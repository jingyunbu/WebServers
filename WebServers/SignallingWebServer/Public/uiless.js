(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["epicgames-frontend"] = factory();
	else
		root["epicgames-frontend"] = factory();
})(this, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "../../library/dist/lib-pixelstreamingfrontend.esm.js":
/*!************************************************************!*\
  !*** ../../library/dist/lib-pixelstreamingfrontend.esm.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AfkLogic": () => (/* binding */ __webpack_exports__AfkLogic),
/* harmony export */   "AfkTimedOutEvent": () => (/* binding */ __webpack_exports__AfkTimedOutEvent),
/* harmony export */   "AfkWarningActivateEvent": () => (/* binding */ __webpack_exports__AfkWarningActivateEvent),
/* harmony export */   "AfkWarningDeactivateEvent": () => (/* binding */ __webpack_exports__AfkWarningDeactivateEvent),
/* harmony export */   "AfkWarningUpdateEvent": () => (/* binding */ __webpack_exports__AfkWarningUpdateEvent),
/* harmony export */   "AggregatedStats": () => (/* binding */ __webpack_exports__AggregatedStats),
/* harmony export */   "CandidatePairStats": () => (/* binding */ __webpack_exports__CandidatePairStats),
/* harmony export */   "CandidateStat": () => (/* binding */ __webpack_exports__CandidateStat),
/* harmony export */   "Config": () => (/* binding */ __webpack_exports__Config),
/* harmony export */   "ControlSchemeType": () => (/* binding */ __webpack_exports__ControlSchemeType),
/* harmony export */   "DataChannelCloseEvent": () => (/* binding */ __webpack_exports__DataChannelCloseEvent),
/* harmony export */   "DataChannelErrorEvent": () => (/* binding */ __webpack_exports__DataChannelErrorEvent),
/* harmony export */   "DataChannelOpenEvent": () => (/* binding */ __webpack_exports__DataChannelOpenEvent),
/* harmony export */   "DataChannelStats": () => (/* binding */ __webpack_exports__DataChannelStats),
/* harmony export */   "EncoderSettings": () => (/* binding */ __webpack_exports__EncoderSettings),
/* harmony export */   "EventEmitter": () => (/* binding */ __webpack_exports__EventEmitter),
/* harmony export */   "Flags": () => (/* binding */ __webpack_exports__Flags),
/* harmony export */   "HideFreezeFrameEvent": () => (/* binding */ __webpack_exports__HideFreezeFrameEvent),
/* harmony export */   "InboundAudioStats": () => (/* binding */ __webpack_exports__InboundAudioStats),
/* harmony export */   "InboundVideoStats": () => (/* binding */ __webpack_exports__InboundVideoStats),
/* harmony export */   "InitialSettings": () => (/* binding */ __webpack_exports__InitialSettings),
/* harmony export */   "InitialSettingsEvent": () => (/* binding */ __webpack_exports__InitialSettingsEvent),
/* harmony export */   "LatencyTestResultEvent": () => (/* binding */ __webpack_exports__LatencyTestResultEvent),
/* harmony export */   "LatencyTestResults": () => (/* binding */ __webpack_exports__LatencyTestResults),
/* harmony export */   "LoadFreezeFrameEvent": () => (/* binding */ __webpack_exports__LoadFreezeFrameEvent),
/* harmony export */   "Logger": () => (/* binding */ __webpack_exports__Logger),
/* harmony export */   "MessageRecv": () => (/* binding */ __webpack_exports__MessageRecv),
/* harmony export */   "MessageSend": () => (/* binding */ __webpack_exports__MessageSend),
/* harmony export */   "MessageStreamerList": () => (/* binding */ __webpack_exports__MessageStreamerList),
/* harmony export */   "NumericParameters": () => (/* binding */ __webpack_exports__NumericParameters),
/* harmony export */   "OptionParameters": () => (/* binding */ __webpack_exports__OptionParameters),
/* harmony export */   "OutBoundVideoStats": () => (/* binding */ __webpack_exports__OutBoundVideoStats),
/* harmony export */   "PixelStreaming": () => (/* binding */ __webpack_exports__PixelStreaming),
/* harmony export */   "PlayStreamErrorEvent": () => (/* binding */ __webpack_exports__PlayStreamErrorEvent),
/* harmony export */   "PlayStreamEvent": () => (/* binding */ __webpack_exports__PlayStreamEvent),
/* harmony export */   "PlayStreamRejectedEvent": () => (/* binding */ __webpack_exports__PlayStreamRejectedEvent),
/* harmony export */   "SettingBase": () => (/* binding */ __webpack_exports__SettingBase),
/* harmony export */   "SettingFlag": () => (/* binding */ __webpack_exports__SettingFlag),
/* harmony export */   "SettingNumber": () => (/* binding */ __webpack_exports__SettingNumber),
/* harmony export */   "SettingOption": () => (/* binding */ __webpack_exports__SettingOption),
/* harmony export */   "SettingText": () => (/* binding */ __webpack_exports__SettingText),
/* harmony export */   "SettingsChangedEvent": () => (/* binding */ __webpack_exports__SettingsChangedEvent),
/* harmony export */   "SignallingProtocol": () => (/* binding */ __webpack_exports__SignallingProtocol),
/* harmony export */   "StatsReceivedEvent": () => (/* binding */ __webpack_exports__StatsReceivedEvent),
/* harmony export */   "StreamLoadingEvent": () => (/* binding */ __webpack_exports__StreamLoadingEvent),
/* harmony export */   "StreamPreConnectEvent": () => (/* binding */ __webpack_exports__StreamPreConnectEvent),
/* harmony export */   "StreamPreDisconnectEvent": () => (/* binding */ __webpack_exports__StreamPreDisconnectEvent),
/* harmony export */   "StreamReconnectEvent": () => (/* binding */ __webpack_exports__StreamReconnectEvent),
/* harmony export */   "StreamerListMessageEvent": () => (/* binding */ __webpack_exports__StreamerListMessageEvent),
/* harmony export */   "TextParameters": () => (/* binding */ __webpack_exports__TextParameters),
/* harmony export */   "UnquantizedAndDenormalizeUnsigned": () => (/* binding */ __webpack_exports__UnquantizedAndDenormalizeUnsigned),
/* harmony export */   "VideoEncoderAvgQPEvent": () => (/* binding */ __webpack_exports__VideoEncoderAvgQPEvent),
/* harmony export */   "VideoInitializedEvent": () => (/* binding */ __webpack_exports__VideoInitializedEvent),
/* harmony export */   "WebRTCSettings": () => (/* binding */ __webpack_exports__WebRTCSettings),
/* harmony export */   "WebRtcAutoConnectEvent": () => (/* binding */ __webpack_exports__WebRtcAutoConnectEvent),
/* harmony export */   "WebRtcConnectedEvent": () => (/* binding */ __webpack_exports__WebRtcConnectedEvent),
/* harmony export */   "WebRtcConnectingEvent": () => (/* binding */ __webpack_exports__WebRtcConnectingEvent),
/* harmony export */   "WebRtcDisconnectedEvent": () => (/* binding */ __webpack_exports__WebRtcDisconnectedEvent),
/* harmony export */   "WebRtcFailedEvent": () => (/* binding */ __webpack_exports__WebRtcFailedEvent),
/* harmony export */   "WebRtcPlayerController": () => (/* binding */ __webpack_exports__WebRtcPlayerController),
/* harmony export */   "WebRtcSdpEvent": () => (/* binding */ __webpack_exports__WebRtcSdpEvent),
/* harmony export */   "WebSocketController": () => (/* binding */ __webpack_exports__WebSocketController),
/* harmony export */   "WebXRController": () => (/* binding */ __webpack_exports__WebXRController),
/* harmony export */   "XrFrameEvent": () => (/* binding */ __webpack_exports__XrFrameEvent),
/* harmony export */   "XrSessionEndedEvent": () => (/* binding */ __webpack_exports__XrSessionEndedEvent),
/* harmony export */   "XrSessionStartedEvent": () => (/* binding */ __webpack_exports__XrSessionStartedEvent)
/* harmony export */ });
/* harmony import */ var sdp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! sdp */ "../../library/node_modules/sdp/sdp.js");
/* harmony import */ var sdp__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(sdp__WEBPACK_IMPORTED_MODULE_0__);

/******/ var __webpack_modules__ = ({

/***/ "./src/AFK/AFKController.ts":
/*!**********************************!*\
  !*** ./src/AFK/AFKController.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_304__) => {

__nested_webpack_require_304__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_304__.d(__webpack_exports__, {
/* harmony export */   "AFKController": () => (/* binding */ AFKController)
/* harmony export */ });
/* harmony import */ var _Config_Config__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_304__(/*! ../Config/Config */ "./src/Config/Config.ts");
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_304__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_304__(/*! ../Util/EventEmitter */ "./src/Util/EventEmitter.ts");
// Copyright Epic Games, Inc. All Rights Reserved.



class AFKController {
    constructor(config, pixelStreaming, onDismissAfk) {
        // time out logic details
        this.closeTimeout = 10;
        this.active = false;
        this.countdownActive = false;
        this.warnTimer = undefined;
        this.countDown = 0;
        this.countDownTimer = undefined;
        this.config = config;
        this.pixelStreaming = pixelStreaming;
        this.onDismissAfk = onDismissAfk;
        this.onAFKTimedOutCallback = () => {
            console.log('AFK timed out, did you want to override this callback?');
        };
    }
    /**
     * The methods that occur when an afk event listener is clicked
     */
    onAfkClick() {
        clearInterval(this.countDownTimer);
        if (this.active || this.countdownActive) {
            this.startAfkWarningTimer();
            this.pixelStreaming.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_0__.AfkWarningDeactivateEvent());
        }
    }
    /**
     * Start the warning timer if a timeout is set greater that 0 seconds
     */
    startAfkWarningTimer() {
        if (this.config.getNumericSettingValue(_Config_Config__WEBPACK_IMPORTED_MODULE_1__.NumericParameters.AFKTimeoutSecs) > 0 &&
            this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_1__.Flags.AFKDetection)) {
            this.active = true;
        }
        else {
            this.active = false;
        }
        this.resetAfkWarningTimer();
    }
    /**
     * Stop the afk warning timer
     */
    stopAfkWarningTimer() {
        this.active = false;
        this.countdownActive = false;
        clearTimeout(this.warnTimer);
        clearInterval(this.countDownTimer);
    }
    /**
     * Pause the timer which when elapsed will warn the user they are inactive.
     */
    pauseAfkWarningTimer() {
        this.active = false;
    }
    /**
     * If the user interacts then reset the warning timer.
     */
    resetAfkWarningTimer() {
        if (this.active && this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_1__.Flags.AFKDetection)) {
            clearTimeout(this.warnTimer);
            this.warnTimer = setTimeout(() => this.activateAfkEvent(), this.config.getNumericSettingValue(_Config_Config__WEBPACK_IMPORTED_MODULE_1__.NumericParameters.AFKTimeoutSecs) * 1000);
        }
    }
    /**
     * Show the AFK overlay and begin the countDown
     */
    activateAfkEvent() {
        // Pause the timer while the user is looking at the inactivity warning overlay
        this.pauseAfkWarningTimer();
        // instantiate a new overlay
        this.pixelStreaming.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_0__.AfkWarningActivateEvent({
            countDown: this.countDown,
            dismissAfk: this.onDismissAfk
        }));
        // update our countDown timer and overlay contents
        this.countDown = this.closeTimeout;
        this.countdownActive = true;
        this.pixelStreaming.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_0__.AfkWarningUpdateEvent({ countDown: this.countDown }));
        // if we are in locked mouse exit pointerlock
        if (!this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_1__.Flags.HoveringMouseMode)) {
            // minor hack to alleviate ios not supporting pointerlock
            if (document.exitPointerLock) {
                document.exitPointerLock();
            }
        }
        // reset our countDown interval accordingly
        this.countDownTimer = setInterval(() => {
            this.countDown--;
            if (this.countDown == 0) {
                // The user failed to click so hide the overlay and disconnect them.
                this.pixelStreaming.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_0__.AfkTimedOutEvent());
                this.onAFKTimedOutCallback();
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), 'You have been disconnected due to inactivity');
                // switch off the afk feature as stream has closed
                this.stopAfkWarningTimer();
            }
            else {
                this.pixelStreaming.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_0__.AfkWarningUpdateEvent({ countDown: this.countDown }));
            }
        }, 1000);
    }
}


/***/ }),

/***/ "./src/Config/Config.ts":
/*!******************************!*\
  !*** ./src/Config/Config.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_5733__) => {

__nested_webpack_require_5733__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_5733__.d(__webpack_exports__, {
/* harmony export */   "Config": () => (/* binding */ Config),
/* harmony export */   "ControlSchemeType": () => (/* binding */ ControlSchemeType),
/* harmony export */   "Flags": () => (/* binding */ Flags),
/* harmony export */   "NumericParameters": () => (/* binding */ NumericParameters),
/* harmony export */   "OptionParameters": () => (/* binding */ OptionParameters),
/* harmony export */   "TextParameters": () => (/* binding */ TextParameters)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_5733__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _SettingFlag__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_5733__(/*! ./SettingFlag */ "./src/Config/SettingFlag.ts");
/* harmony import */ var _SettingNumber__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_5733__(/*! ./SettingNumber */ "./src/Config/SettingNumber.ts");
/* harmony import */ var _SettingText__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_5733__(/*! ./SettingText */ "./src/Config/SettingText.ts");
/* harmony import */ var _SettingOption__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_5733__(/*! ./SettingOption */ "./src/Config/SettingOption.ts");
/* harmony import */ var _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_5__ = __nested_webpack_require_5733__(/*! ../Util/EventEmitter */ "./src/Util/EventEmitter.ts");
// Copyright Epic Games, Inc. All Rights Reserved.






/**
 * A collection of flags that can be toggled and are core to all Pixel Streaming experiences.
 * These are used in the `Config.Flags` map.
 */
class Flags {
}
Flags.AutoConnect = 'AutoConnect';
Flags.AutoPlayVideo = 'AutoPlayVideo';
Flags.AFKDetection = 'TimeoutIfIdle';
Flags.BrowserSendOffer = 'OfferToReceive';
Flags.HoveringMouseMode = 'HoveringMouse';
Flags.ForceMonoAudio = 'ForceMonoAudio';
Flags.ForceTURN = 'ForceTURN';
Flags.FakeMouseWithTouches = 'FakeMouseWithTouches';
Flags.IsQualityController = 'ControlsQuality';
Flags.MatchViewportResolution = 'MatchViewportRes';
Flags.PreferSFU = 'preferSFU';
Flags.StartVideoMuted = 'StartVideoMuted';
Flags.SuppressBrowserKeys = 'SuppressBrowserKeys';
Flags.UseMic = 'UseMic';
Flags.KeyboardInput = 'KeyboardInput';
Flags.MouseInput = 'MouseInput';
Flags.TouchInput = 'TouchInput';
Flags.GamepadInput = 'GamepadInput';
Flags.XRControllerInput = 'XRControllerInput';
const isFlagId = (id) => Object.getOwnPropertyNames(Flags).some((name) => Flags[name] === id);
/**
 * A collection of numeric parameters that are core to all Pixel Streaming experiences.
 *
 */
class NumericParameters {
}
NumericParameters.AFKTimeoutSecs = 'AFKTimeout';
NumericParameters.MinQP = 'MinQP';
NumericParameters.MaxQP = 'MaxQP';
NumericParameters.WebRTCFPS = 'WebRTCFPS';
NumericParameters.WebRTCMinBitrate = 'WebRTCMinBitrate';
NumericParameters.WebRTCMaxBitrate = 'WebRTCMaxBitrate';
NumericParameters.MaxReconnectAttempts = 'MaxReconnectAttempts';
const isNumericId = (id) => Object.getOwnPropertyNames(NumericParameters).some((name) => NumericParameters[name] === id);
/**
 * A collection of textual parameters that are core to all Pixel Streaming experiences.
 *
 */
class TextParameters {
}
TextParameters.SignallingServerUrl = 'ss';
const isTextId = (id) => Object.getOwnPropertyNames(TextParameters).some((name) => TextParameters[name] === id);
/**
 * A collection of enum based parameters that are core to all Pixel Streaming experiences.
 *
 */
class OptionParameters {
}
OptionParameters.PreferredCodec = 'PreferredCodec';
OptionParameters.StreamerId = 'StreamerId';
const isOptionId = (id) => Object.getOwnPropertyNames(OptionParameters).some((name) => OptionParameters[name] === id);
class Config {
    // ------------ Settings -----------------
    constructor(config = {}) {
        /* A map of flags that can be toggled - options that can be set in the application - e.g. Use Mic? */
        this.flags = new Map();
        /* A map of numerical settings - options that can be in the application - e.g. MinBitrate */
        this.numericParameters = new Map();
        /* A map of text settings - e.g. signalling server url */
        this.textParameters = new Map();
        /* A map of enum based settings - e.g. preferred codec */
        this.optionParameters = new Map();
        const { initialSettings, useUrlParams } = config;
        this._useUrlParams = !!useUrlParams;
        this.populateDefaultSettings(this._useUrlParams);
        if (initialSettings) {
            this.setSettings(initialSettings);
        }
    }
    /**
     * True if reading configuration initial values from URL parameters, and
     * persisting changes in URL when changed.
     */
    get useUrlParams() {
        return this._useUrlParams;
    }
    /**
     * Populate the default settings for a Pixel Streaming application
     */
    populateDefaultSettings(useUrlParams) {
        /**
         * Text Parameters
         */
        this.textParameters.set(TextParameters.SignallingServerUrl, new _SettingText__WEBPACK_IMPORTED_MODULE_0__.SettingText(TextParameters.SignallingServerUrl, 'Signalling url', 'Url of the signalling server', (location.protocol === 'https:' ? 'wss://' : 'ws://') +
            window.location.hostname +
            // for readability, we omit the port if it's 80
            (window.location.port === '80' ||
                window.location.port === ''
                ? ''
                : `:${window.location.port}`), useUrlParams));
        this.optionParameters.set(OptionParameters.StreamerId, new _SettingOption__WEBPACK_IMPORTED_MODULE_1__.SettingOption(OptionParameters.StreamerId, 'Streamer ID', 'The ID of the streamer to stream.', '', [], useUrlParams));
        /**
         * Enum Parameters
         */
        this.optionParameters.set(OptionParameters.PreferredCodec, new _SettingOption__WEBPACK_IMPORTED_MODULE_1__.SettingOption(OptionParameters.PreferredCodec, 'Preferred Codec', 'The preferred codec to be used during codec negotiation', 'H264 level-asymmetry-allowed=1;packetization-mode=1;profile-level-id=42e01f', (function () {
            const browserSupportedCodecs = [];
            // Try get the info needed from the RTCRtpReceiver. This is only available on chrome
            if (!RTCRtpReceiver.getCapabilities) {
                browserSupportedCodecs.push('Only available on Chrome');
                return browserSupportedCodecs;
            }
            const matcher = /(VP\d|H26\d|AV1).*/;
            const codecs = RTCRtpReceiver.getCapabilities('video').codecs;
            codecs.forEach((codec) => {
                const str = codec.mimeType.split('/')[1] +
                    ' ' +
                    (codec.sdpFmtpLine || '');
                const match = matcher.exec(str);
                if (match !== null) {
                    browserSupportedCodecs.push(str);
                }
            });
            return browserSupportedCodecs;
        })(), useUrlParams));
        /**
         * Boolean parameters
         */
        this.flags.set(Flags.AutoConnect, new _SettingFlag__WEBPACK_IMPORTED_MODULE_2__.SettingFlag(Flags.AutoConnect, 'Auto connect to stream', 'Whether we should attempt to auto connect to the signalling server or show a click to start prompt.', false, useUrlParams));
        this.flags.set(Flags.AutoPlayVideo, new _SettingFlag__WEBPACK_IMPORTED_MODULE_2__.SettingFlag(Flags.AutoPlayVideo, 'Auto play video', 'When video is ready automatically start playing it as opposed to showing a play button.', true, useUrlParams));
        this.flags.set(Flags.BrowserSendOffer, new _SettingFlag__WEBPACK_IMPORTED_MODULE_2__.SettingFlag(Flags.BrowserSendOffer, 'Browser send offer', 'Browser will initiate the WebRTC handshake by sending the offer to the streamer', false, useUrlParams));
        this.flags.set(Flags.UseMic, new _SettingFlag__WEBPACK_IMPORTED_MODULE_2__.SettingFlag(Flags.UseMic, 'Use microphone', 'Make browser request microphone access and open an input audio track.', false, useUrlParams));
        this.flags.set(Flags.StartVideoMuted, new _SettingFlag__WEBPACK_IMPORTED_MODULE_2__.SettingFlag(Flags.StartVideoMuted, 'Start video muted', 'Video will start muted if true.', false, useUrlParams));
        this.flags.set(Flags.SuppressBrowserKeys, new _SettingFlag__WEBPACK_IMPORTED_MODULE_2__.SettingFlag(Flags.SuppressBrowserKeys, 'Suppress browser keys', 'Suppress certain browser keys that we use in UE, for example F5 to show shader complexity instead of refresh the page.', true, useUrlParams));
        this.flags.set(Flags.PreferSFU, new _SettingFlag__WEBPACK_IMPORTED_MODULE_2__.SettingFlag(Flags.PreferSFU, 'Prefer SFU', 'Try to connect to the SFU instead of P2P.', false, useUrlParams));
        this.flags.set(Flags.IsQualityController, new _SettingFlag__WEBPACK_IMPORTED_MODULE_2__.SettingFlag(Flags.IsQualityController, 'Is quality controller?', 'True if this peer controls stream quality', true, useUrlParams));
        this.flags.set(Flags.ForceMonoAudio, new _SettingFlag__WEBPACK_IMPORTED_MODULE_2__.SettingFlag(Flags.ForceMonoAudio, 'Force mono audio', 'Force browser to request mono audio in the SDP', false, useUrlParams));
        this.flags.set(Flags.ForceTURN, new _SettingFlag__WEBPACK_IMPORTED_MODULE_2__.SettingFlag(Flags.ForceTURN, 'Force TURN', 'Only generate TURN/Relayed ICE candidates.', false, useUrlParams));
        this.flags.set(Flags.AFKDetection, new _SettingFlag__WEBPACK_IMPORTED_MODULE_2__.SettingFlag(Flags.AFKDetection, 'AFK if idle', 'Timeout the experience if user is AFK for a period.', false, useUrlParams));
        this.flags.set(Flags.MatchViewportResolution, new _SettingFlag__WEBPACK_IMPORTED_MODULE_2__.SettingFlag(Flags.MatchViewportResolution, 'Match viewport resolution', 'Pixel Streaming will be instructed to dynamically resize the video stream to match the size of the video element.', false, useUrlParams));
        this.flags.set(Flags.HoveringMouseMode, new _SettingFlag__WEBPACK_IMPORTED_MODULE_2__.SettingFlag(Flags.HoveringMouseMode, 'Control Scheme: Locked Mouse', 'Either locked mouse, where the pointer is consumed by the video and locked to it, or hovering mouse, where the mouse is not consumed.', false, useUrlParams, (isHoveringMouse, setting) => {
            setting.label = `Control Scheme: ${isHoveringMouse ? 'Hovering' : 'Locked'} Mouse`;
        }));
        this.flags.set(Flags.FakeMouseWithTouches, new _SettingFlag__WEBPACK_IMPORTED_MODULE_2__.SettingFlag(Flags.FakeMouseWithTouches, 'Fake mouse with touches', 'A single finger touch is converted into a mouse event. This allows a non-touch application to be controlled partially via a touch device.', false, useUrlParams));
        this.flags.set(Flags.KeyboardInput, new _SettingFlag__WEBPACK_IMPORTED_MODULE_2__.SettingFlag(Flags.KeyboardInput, 'Keyboard input', 'If enabled, send keyboard events to streamer', true, useUrlParams));
        this.flags.set(Flags.MouseInput, new _SettingFlag__WEBPACK_IMPORTED_MODULE_2__.SettingFlag(Flags.MouseInput, 'Mouse input', 'If enabled, send mouse events to streamer', true, useUrlParams));
        this.flags.set(Flags.TouchInput, new _SettingFlag__WEBPACK_IMPORTED_MODULE_2__.SettingFlag(Flags.TouchInput, 'Touch input', 'If enabled, send touch events to streamer', true, useUrlParams));
        this.flags.set(Flags.GamepadInput, new _SettingFlag__WEBPACK_IMPORTED_MODULE_2__.SettingFlag(Flags.GamepadInput, 'Gamepad input', 'If enabled, send gamepad events to streamer', true, useUrlParams));
        this.flags.set(Flags.XRControllerInput, new _SettingFlag__WEBPACK_IMPORTED_MODULE_2__.SettingFlag(Flags.XRControllerInput, 'XR controller input', 'If enabled, send XR controller events to streamer', true, useUrlParams));
        /**
         * Numeric parameters
         */
        this.numericParameters.set(NumericParameters.AFKTimeoutSecs, new _SettingNumber__WEBPACK_IMPORTED_MODULE_3__.SettingNumber(NumericParameters.AFKTimeoutSecs, 'AFK timeout', 'The time (in seconds) it takes for the application to time out if AFK timeout is enabled.', 0 /*min*/, 600 /*max*/, 120 /*value*/, useUrlParams));
        this.numericParameters.set(NumericParameters.MaxReconnectAttempts, new _SettingNumber__WEBPACK_IMPORTED_MODULE_3__.SettingNumber(NumericParameters.MaxReconnectAttempts, 'Max Reconnects', 'Maximum number of reconnects the application will attempt when a streamer disconnects.', 0 /*min*/, 999 /*max*/, 3 /*value*/, useUrlParams));
        this.numericParameters.set(NumericParameters.MinQP, new _SettingNumber__WEBPACK_IMPORTED_MODULE_3__.SettingNumber(NumericParameters.MinQP, 'Min QP', 'The lower bound for the quantization parameter (QP) of the encoder. 0 = Best quality, 51 = worst quality.', 0 /*min*/, 51 /*max*/, 0 /*value*/, useUrlParams));
        this.numericParameters.set(NumericParameters.MaxQP, new _SettingNumber__WEBPACK_IMPORTED_MODULE_3__.SettingNumber(NumericParameters.MaxQP, 'Max QP', 'The upper bound for the quantization parameter (QP) of the encoder. 0 = Best quality, 51 = worst quality.', 0 /*min*/, 51 /*max*/, 51 /*value*/, useUrlParams));
        this.numericParameters.set(NumericParameters.WebRTCFPS, new _SettingNumber__WEBPACK_IMPORTED_MODULE_3__.SettingNumber(NumericParameters.WebRTCFPS, 'Max FPS', 'The maximum FPS that WebRTC will try to transmit frames at.', 1 /*min*/, 999 /*max*/, 60 /*value*/, useUrlParams));
        this.numericParameters.set(NumericParameters.WebRTCMinBitrate, new _SettingNumber__WEBPACK_IMPORTED_MODULE_3__.SettingNumber(NumericParameters.WebRTCMinBitrate, 'Min Bitrate (kbps)', 'The minimum bitrate that WebRTC should use.', 0 /*min*/, 500000 /*max*/, 0 /*value*/, useUrlParams));
        this.numericParameters.set(NumericParameters.WebRTCMaxBitrate, new _SettingNumber__WEBPACK_IMPORTED_MODULE_3__.SettingNumber(NumericParameters.WebRTCMaxBitrate, 'Max Bitrate (kbps)', 'The maximum bitrate that WebRTC should use.', 0 /*min*/, 500000 /*max*/, 0 /*value*/, useUrlParams));
    }
    /**
     * Add a callback to fire when the numeric setting is toggled.
     * @param id The id of the flag.
     * @param onChangedListener The callback to fire when the numeric value changes.
     */
    _addOnNumericSettingChangedListener(id, onChangedListener) {
        if (this.numericParameters.has(id)) {
            this.numericParameters
                .get(id)
                .addOnChangedListener(onChangedListener);
        }
    }
    _addOnOptionSettingChangedListener(id, onChangedListener) {
        if (this.optionParameters.has(id)) {
            this.optionParameters
                .get(id)
                .addOnChangedListener(onChangedListener);
        }
    }
    /**
     * @param id The id of the numeric setting we are interested in getting a value for.
     * @returns The numeric value stored in the parameter with the passed id.
     */
    getNumericSettingValue(id) {
        if (this.numericParameters.has(id)) {
            return this.numericParameters.get(id).number;
        }
        else {
            throw new Error(`There is no numeric setting with the id of ${id}`);
        }
    }
    /**
     * @param id The id of the text setting we are interested in getting a value for.
     * @returns The text value stored in the parameter with the passed id.
     */
    getTextSettingValue(id) {
        if (this.textParameters.has(id)) {
            return this.textParameters.get(id).value;
        }
        else {
            throw new Error(`There is no numeric setting with the id of ${id}`);
        }
    }
    /**
     * Set number in the setting.
     * @param id The id of the numeric setting we are interested in.
     * @param value The numeric value to set.
     */
    setNumericSetting(id, value) {
        if (this.numericParameters.has(id)) {
            this.numericParameters.get(id).number = value;
        }
        else {
            throw new Error(`There is no numeric setting with the id of ${id}`);
        }
    }
    /**
     * Add a callback to fire when the flag is toggled.
     * @param id The id of the flag.
     * @param onChangeListener The callback to fire when the value changes.
     */
    _addOnSettingChangedListener(id, onChangeListener) {
        if (this.flags.has(id)) {
            this.flags.get(id).onChange = onChangeListener;
        }
    }
    /**
     * Add a callback to fire when the text is changed.
     * @param id The id of the flag.
     * @param onChangeListener The callback to fire when the value changes.
     */
    _addOnTextSettingChangedListener(id, onChangeListener) {
        if (this.textParameters.has(id)) {
            this.textParameters.get(id).onChange = onChangeListener;
        }
    }
    /**
     * Get the option which has the given id.
     * @param id The id of the option.
     * @returns The SettingOption object matching id
     */
    getSettingOption(id) {
        return this.optionParameters.get(id);
    }
    /**
     * Get the value of the configuration flag which has the given id.
     * @param id The unique id for the flag.
     * @returns True if the flag is enabled.
     */
    isFlagEnabled(id) {
        return this.flags.get(id).flag;
    }
    /**
     * Set flag to be enabled/disabled.
     * @param id The id of the flag to toggle.
     * @param flagEnabled True if the flag should be enabled.
     */
    setFlagEnabled(id, flagEnabled) {
        if (!this.flags.has(id)) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_4__.Logger.Warning(_Logger_Logger__WEBPACK_IMPORTED_MODULE_4__.Logger.GetStackTrace(), `Cannot toggle flag called ${id} - it does not exist in the Config.flags map.`);
        }
        else {
            this.flags.get(id).flag = flagEnabled;
        }
    }
    /**
     * Set the text setting.
     * @param id The id of the setting
     * @param settingValue The value to set in the setting.
     */
    setTextSetting(id, settingValue) {
        if (!this.textParameters.has(id)) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_4__.Logger.Warning(_Logger_Logger__WEBPACK_IMPORTED_MODULE_4__.Logger.GetStackTrace(), `Cannot set text setting called ${id} - it does not exist in the Config.textParameters map.`);
        }
        else {
            this.textParameters.get(id).text = settingValue;
        }
    }
    /**
     * Set the option setting list of options.
     * @param id The id of the setting
     * @param settingOptions The values the setting could take
     */
    setOptionSettingOptions(id, settingOptions) {
        if (!this.optionParameters.has(id)) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_4__.Logger.Warning(_Logger_Logger__WEBPACK_IMPORTED_MODULE_4__.Logger.GetStackTrace(), `Cannot set text setting called ${id} - it does not exist in the Config.optionParameters map.`);
        }
        else {
            this.optionParameters.get(id).options = settingOptions;
        }
    }
    /**
     * Set option enum settings selected option.
     * @param id The id of the setting
     * @param settingOptions The value to select out of all the options
     */
    setOptionSettingValue(id, settingValue) {
        if (!this.optionParameters.has(id)) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_4__.Logger.Warning(_Logger_Logger__WEBPACK_IMPORTED_MODULE_4__.Logger.GetStackTrace(), `Cannot set text setting called ${id} - it does not exist in the Config.enumParameters map.`);
        }
        else {
            this.optionParameters.get(id).selected = settingValue;
        }
    }
    /**
     * Set the label for the flag.
     * @param id The id of the flag.
     * @param label The new label to use for the flag.
     */
    setFlagLabel(id, label) {
        if (!this.flags.has(id)) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_4__.Logger.Warning(_Logger_Logger__WEBPACK_IMPORTED_MODULE_4__.Logger.GetStackTrace(), `Cannot set label for flag called ${id} - it does not exist in the Config.flags map.`);
        }
        else {
            this.flags.get(id).label = label;
        }
    }
    /**
     * Set a subset of all settings in one function call.
     *
     * @param settings A (partial) list of settings to set
     */
    setSettings(settings) {
        for (const key of Object.keys(settings)) {
            if (isFlagId(key)) {
                this.setFlagEnabled(key, settings[key]);
            }
            else if (isNumericId(key)) {
                this.setNumericSetting(key, settings[key]);
            }
            else if (isTextId(key)) {
                this.setTextSetting(key, settings[key]);
            }
            else if (isOptionId(key)) {
                this.setOptionSettingValue(key, settings[key]);
            }
        }
    }
    /**
     * Get all settings
     * @returns All setting values as an object with setting ids as keys
     */
    getSettings() {
        const settings = {};
        for (const [key, value] of this.flags.entries()) {
            settings[key] = value.flag;
        }
        for (const [key, value] of this.numericParameters.entries()) {
            settings[key] = value.number;
        }
        for (const [key, value] of this.textParameters.entries()) {
            settings[key] = value.text;
        }
        for (const [key, value] of this.optionParameters.entries()) {
            settings[key] = value.selected;
        }
        return settings;
    }
    /**
     * Get all Flag settings as an array.
     * @returns All SettingFlag objects
     */
    getFlags() {
        return Array.from(this.flags.values());
    }
    /**
     * Get all Text settings as an array.
     * @returns All SettingText objects
     */
    getTextSettings() {
        return Array.from(this.textParameters.values());
    }
    /**
     * Get all Number settings as an array.
     * @returns All SettingNumber objects
     */
    getNumericSettings() {
        return Array.from(this.numericParameters.values());
    }
    /**
     * Get all Option settings as an array.
     * @returns All SettingOption objects
     */
    getOptionSettings() {
        return Array.from(this.optionParameters.values());
    }
    /**
     * Emit events when settings change.
     * @param eventEmitter
     */
    _registerOnChangeEvents(eventEmitter) {
        for (const key of this.flags.keys()) {
            const flag = this.flags.get(key);
            if (flag) {
                flag.onChangeEmit = (newValue) => eventEmitter.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_5__.SettingsChangedEvent({
                    id: flag.id,
                    type: 'flag',
                    value: newValue,
                    target: flag
                }));
            }
        }
        for (const key of this.numericParameters.keys()) {
            const number = this.numericParameters.get(key);
            if (number) {
                number.onChangeEmit = (newValue) => eventEmitter.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_5__.SettingsChangedEvent({
                    id: number.id,
                    type: 'number',
                    value: newValue,
                    target: number
                }));
            }
        }
        for (const key of this.textParameters.keys()) {
            const text = this.textParameters.get(key);
            if (text) {
                text.onChangeEmit = (newValue) => eventEmitter.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_5__.SettingsChangedEvent({
                    id: text.id,
                    type: 'text',
                    value: newValue,
                    target: text
                }));
            }
        }
        for (const key of this.optionParameters.keys()) {
            const option = this.optionParameters.get(key);
            if (option) {
                option.onChangeEmit = (newValue) => eventEmitter.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_5__.SettingsChangedEvent({
                    id: option.id,
                    type: 'option',
                    value: newValue,
                    target: option
                }));
            }
        }
    }
}
/**
 * The enum associated with the mouse being locked or hovering
 */
var ControlSchemeType;
(function (ControlSchemeType) {
    ControlSchemeType[ControlSchemeType["LockedMouse"] = 0] = "LockedMouse";
    ControlSchemeType[ControlSchemeType["HoveringMouse"] = 1] = "HoveringMouse";
})(ControlSchemeType || (ControlSchemeType = {}));


/***/ }),

/***/ "./src/Config/SettingBase.ts":
/*!***********************************!*\
  !*** ./src/Config/SettingBase.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_30961__) => {

__nested_webpack_require_30961__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_30961__.d(__webpack_exports__, {
/* harmony export */   "SettingBase": () => (/* binding */ SettingBase)
/* harmony export */ });
// Copyright Epic Games, Inc. All Rights Reserved.
/**
 * Base class for a setting that has a text label and an arbitrary setting value it stores.
 */
class SettingBase {
    constructor(id, label, description, defaultSettingValue, 
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    defaultOnChangeListener = () => { }) {
        this.onChange = defaultOnChangeListener;
        this.onChangeEmit = () => {
            /* Do nothing, to be overridden. */
        };
        this.id = id;
        this.description = description;
        this.label = label;
        this.value = defaultSettingValue;
    }
    /**
     * Set the label text for the setting.
     * @param label setting label.
     */
    set label(inLabel) {
        this._label = inLabel;
        this.onChangeEmit(this._value);
    }
    /**
     * @returns The label text for the setting.
     */
    get label() {
        return this._label;
    }
    /**
     * @return The setting's value.
     */
    get value() {
        return this._value;
    }
    /**
     * Update the setting's stored value.
     * @param inValue The new value for the setting.
     */
    set value(inValue) {
        this._value = inValue;
        this.onChange(this._value, this);
        this.onChangeEmit(this._value);
    }
}


/***/ }),

/***/ "./src/Config/SettingFlag.ts":
/*!***********************************!*\
  !*** ./src/Config/SettingFlag.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_32768__) => {

__nested_webpack_require_32768__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_32768__.d(__webpack_exports__, {
/* harmony export */   "SettingFlag": () => (/* binding */ SettingFlag)
/* harmony export */ });
/* harmony import */ var _SettingBase__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_32768__(/*! ./SettingBase */ "./src/Config/SettingBase.ts");
// Copyright Epic Games, Inc. All Rights Reserved.

/**
 * A boolean flag setting object with a text label.
 */
class SettingFlag extends _SettingBase__WEBPACK_IMPORTED_MODULE_0__.SettingBase {
    constructor(id, label, description, defaultFlagValue, useUrlParams, 
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    defaultOnChangeListener = () => { }) {
        super(id, label, description, defaultFlagValue, defaultOnChangeListener);
        const urlParams = new URLSearchParams(window.location.search);
        if (!useUrlParams || !urlParams.has(this.id)) {
            this.flag = defaultFlagValue;
        }
        else {
            // parse flag from url parameters
            const urlParamFlag = this.getUrlParamFlag();
            this.flag = urlParamFlag;
        }
        this.useUrlParams = useUrlParams;
    }
    /**
     * Parse the flag value from the url parameters.
     * @returns True if the url parameters contains /?id, but False if /?id=false
     */
    getUrlParamFlag() {
        const urlParams = new URLSearchParams(window.location.search);
        if (urlParams.has(this.id)) {
            if (urlParams.get(this.id) === 'false' ||
                urlParams.get(this.id) === 'False') {
                return false;
            }
            return true;
        }
        return false;
    }
    /**
     * Persist the setting value in URL.
     */
    updateURLParams() {
        if (this.useUrlParams) {
            // set url params
            const urlParams = new URLSearchParams(window.location.search);
            if (this.flag === true) {
                urlParams.set(this.id, 'true');
            }
            else {
                urlParams.set(this.id, 'false');
            }
            window.history.replaceState({}, '', urlParams.toString() !== ''
                ? `${location.pathname}?${urlParams}`
                : `${location.pathname}`);
        }
    }
    /**
     * Enables this flag.
     */
    enable() {
        this.flag = true;
    }
    /**
     * @return The setting's value.
     */
    get flag() {
        return !!this.value;
    }
    /**
     * Update the setting's stored value.
     * @param inValue The new value for the setting.
     */
    set flag(inValue) {
        this.value = inValue;
    }
}


/***/ }),

/***/ "./src/Config/SettingNumber.ts":
/*!*************************************!*\
  !*** ./src/Config/SettingNumber.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_35761__) => {

__nested_webpack_require_35761__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_35761__.d(__webpack_exports__, {
/* harmony export */   "SettingNumber": () => (/* binding */ SettingNumber)
/* harmony export */ });
/* harmony import */ var _SettingBase__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_35761__(/*! ./SettingBase */ "./src/Config/SettingBase.ts");
// Copyright Epic Games, Inc. All Rights Reserved.

/**
 * A number setting object with a text label. Min and max limit the range of allowed values.
 */
class SettingNumber extends _SettingBase__WEBPACK_IMPORTED_MODULE_0__.SettingBase {
    constructor(id, label, description, min, max, defaultNumber, useUrlParams, 
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    defaultOnChangeListener = () => { }) {
        super(id, label, description, defaultNumber, defaultOnChangeListener);
        this._min = min;
        this._max = max;
        // attempt to read the number from the url params
        const urlParams = new URLSearchParams(window.location.search);
        if (!useUrlParams || !urlParams.has(this.id)) {
            this.number = defaultNumber;
        }
        else {
            const parsedValue = Number.parseInt(urlParams.get(this.id));
            this.number = Number.isNaN(parsedValue)
                ? defaultNumber
                : parsedValue;
        }
        this.useUrlParams = useUrlParams;
    }
    /**
     * Persist the setting value in URL.
     */
    updateURLParams() {
        if (this.useUrlParams) {
            // set url params like ?id=number
            const urlParams = new URLSearchParams(window.location.search);
            urlParams.set(this.id, this.number.toString());
            window.history.replaceState({}, '', urlParams.toString() !== ''
                ? `${location.pathname}?${urlParams}`
                : `${location.pathname}`);
        }
    }
    /**
     * Set the number value (will be clamped within range).
     */
    set number(newNumber) {
        this.value = this.clamp(newNumber);
    }
    /**
     * @returns The number stored.
     */
    get number() {
        return this.value;
    }
    /**
     * Clamps a number between the min and max values (inclusive).
     * @param inNumber The number to clamp.
     * @returns The clamped number.
     */
    clamp(inNumber) {
        return Math.max(Math.min(this._max, inNumber), this._min);
    }
    /**
     * Returns the minimum value
     * @returns The minimum value
     */
    get min() {
        return this._min;
    }
    /**
     * Returns the maximum value
     * @returns The maximum value
     */
    get max() {
        return this._max;
    }
    /**
     * Add a change listener to the number object.
     */
    addOnChangedListener(onChangedFunc) {
        this.onChange = onChangedFunc;
    }
}


/***/ }),

/***/ "./src/Config/SettingOption.ts":
/*!*************************************!*\
  !*** ./src/Config/SettingOption.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_38926__) => {

__nested_webpack_require_38926__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_38926__.d(__webpack_exports__, {
/* harmony export */   "SettingOption": () => (/* binding */ SettingOption)
/* harmony export */ });
/* harmony import */ var _SettingBase__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_38926__(/*! ./SettingBase */ "./src/Config/SettingBase.ts");
// Copyright Epic Games, Inc. All Rights Reserved.

/**
 * An Option setting object with a text label. Allows you to specify an array of options and select one of them.
 */
class SettingOption extends _SettingBase__WEBPACK_IMPORTED_MODULE_0__.SettingBase {
    constructor(id, label, description, defaultTextValue, options, useUrlParams, 
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    defaultOnChangeListener = () => { }) {
        super(id, label, description, [defaultTextValue, defaultTextValue], defaultOnChangeListener);
        this.options = options;
        const urlParams = new URLSearchParams(window.location.search);
        const stringToMatch = useUrlParams && urlParams.has(this.id)
            ? this.getUrlParamText()
            : defaultTextValue;
        this.selected = stringToMatch;
        this.useUrlParams = useUrlParams;
    }
    /**
     * Parse the text value from the url parameters.
     * @returns The text value parsed from the url if the url parameters contains /?id=value, but empty string if just /?id or no url param found.
     */
    getUrlParamText() {
        var _a;
        const urlParams = new URLSearchParams(window.location.search);
        if (urlParams.has(this.id)) {
            return (_a = urlParams.get(this.id)) !== null && _a !== void 0 ? _a : '';
        }
        return '';
    }
    /**
     * Persist the setting value in URL.
     */
    updateURLParams() {
        if (this.useUrlParams) {
            // set url params
            const urlParams = new URLSearchParams(window.location.search);
            urlParams.set(this.id, this.selected);
            window.history.replaceState({}, '', urlParams.toString() !== ''
                ? `${location.pathname}?${urlParams}`
                : `${location.pathname}`);
        }
    }
    /**
     * Add a change listener to the select element.
     */
    addOnChangedListener(onChangedFunc) {
        this.onChange = onChangedFunc;
    }
    /**
     * @returns All available options as an array
     */
    get options() {
        return this._options;
    }
    /**
     * Set options
     * @param values Array of options
     */
    set options(values) {
        this._options = values;
        this.onChangeEmit(this.selected);
    }
    /**
     * @returns Selected option as a string
     */
    get selected() {
        return this.value;
    }
    /**
     * Set selected option if it matches one of the available options
     * @param value Selected option
     */
    set selected(value) {
        // A user may not specify the full possible value so we instead use the closest match.
        // eg ?xxx=H264 would select 'H264 level-asymmetry-allowed=1;packetization-mode=1;profile-level-id=42001f'
        const filteredList = this.options.filter((option) => option.indexOf(value) !== -1);
        if (filteredList.length) {
            this.value = filteredList[0];
        }
    }
}


/***/ }),

/***/ "./src/Config/SettingText.ts":
/*!***********************************!*\
  !*** ./src/Config/SettingText.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_42555__) => {

__nested_webpack_require_42555__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_42555__.d(__webpack_exports__, {
/* harmony export */   "SettingText": () => (/* binding */ SettingText)
/* harmony export */ });
/* harmony import */ var _SettingBase__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_42555__(/*! ./SettingBase */ "./src/Config/SettingBase.ts");
// Copyright Epic Games, Inc. All Rights Reserved.

/**
 * A text setting object with a text label.
 */
class SettingText extends _SettingBase__WEBPACK_IMPORTED_MODULE_0__.SettingBase {
    constructor(id, label, description, defaultTextValue, useUrlParams, 
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    defaultOnChangeListener = () => { }) {
        super(id, label, description, defaultTextValue, defaultOnChangeListener);
        const urlParams = new URLSearchParams(window.location.search);
        if (!useUrlParams || !urlParams.has(this.id)) {
            this.text = defaultTextValue;
        }
        else {
            // parse flag from url parameters
            const urlParamFlag = this.getUrlParamText();
            this.text = urlParamFlag;
        }
        this.useUrlParams = useUrlParams;
    }
    /**
     * Parse the text value from the url parameters.
     * @returns The text value parsed from the url if the url parameters contains /?id=value, but empty string if just /?id or no url param found.
     */
    getUrlParamText() {
        var _a;
        const urlParams = new URLSearchParams(window.location.search);
        if (urlParams.has(this.id)) {
            return (_a = urlParams.get(this.id)) !== null && _a !== void 0 ? _a : '';
        }
        return '';
    }
    /**
     * Persist the setting value in URL.
     */
    updateURLParams() {
        if (this.useUrlParams) {
            // set url params
            const urlParams = new URLSearchParams(window.location.search);
            urlParams.set(this.id, this.text);
            window.history.replaceState({}, '', urlParams.toString() !== ''
                ? `${location.pathname}?${urlParams}`
                : `${location.pathname}`);
        }
    }
    /**
     * @return The setting's value.
     */
    get text() {
        return this.value;
    }
    /**
     * Update the setting's stored value.
     * @param inValue The new value for the setting.
     */
    set text(inValue) {
        this.value = inValue;
    }
}


/***/ }),

/***/ "./src/DataChannel/DataChannelController.ts":
/*!**************************************************!*\
  !*** ./src/DataChannel/DataChannelController.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_45339__) => {

__nested_webpack_require_45339__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_45339__.d(__webpack_exports__, {
/* harmony export */   "DataChannelController": () => (/* binding */ DataChannelController)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_45339__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
// Copyright Epic Games, Inc. All Rights Reserved.

/**
 * Handles the Sending and Receiving of messages to the UE Instance via the Data Channel
 */
class DataChannelController {
    constructor() {
        this.isReceivingFreezeFrame = false;
    }
    /**
     * return the current state of a datachannel controller instance
     * @returns the current DataChannelController instance
     */
    getDataChannelInstance() {
        return this;
    }
    /**
     * To Create and Set up a Data Channel
     * @param peerConnection - The RTC Peer Connection
     * @param label - Label of the Data Channel
     * @param datachannelOptions - Optional RTC DataChannel options
     */
    createDataChannel(peerConnection, label, datachannelOptions) {
        this.peerConnection = peerConnection;
        this.label = label;
        this.datachannelOptions = datachannelOptions;
        if (datachannelOptions == null) {
            this.datachannelOptions = {};
            this.datachannelOptions.ordered = true;
        }
        this.dataChannel = this.peerConnection.createDataChannel(this.label, this.datachannelOptions);
        this.setupDataChannel();
    }
    setupDataChannel() {
        //We Want an Array Buffer not a blob
        this.dataChannel.binaryType = 'arraybuffer';
        this.dataChannel.onopen = (ev) => this.handleOnOpen(ev);
        this.dataChannel.onclose = (ev) => this.handleOnClose(ev);
        this.dataChannel.onmessage = (ev) => this.handleOnMessage(ev);
        this.dataChannel.onerror = (ev) => this.handleOnError(ev);
    }
    /**
     * Handles when the Data Channel is opened
     */
    handleOnOpen(ev) {
        var _a;
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), `Data Channel (${this.label}) opened.`, 7);
        this.onOpen((_a = this.dataChannel) === null || _a === void 0 ? void 0 : _a.label, ev);
    }
    /**
     * Handles when the Data Channel is closed
     */
    handleOnClose(ev) {
        var _a;
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), `Data Channel (${this.label}) closed.`, 7);
        this.onClose((_a = this.dataChannel) === null || _a === void 0 ? void 0 : _a.label, ev);
    }
    /**
     * Handles when a message is received
     * @param event - Message Event
     */
    handleOnMessage(event) {
        // Higher log level to prevent log spam with messages received
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), `Data Channel (${this.label}) message: ${event}`, 8);
    }
    /**
     * Handles when an error is thrown
     * @param event - Error Event
     */
    handleOnError(event) {
        var _a;
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), `Data Channel (${this.label}) error: ${event}`, 7);
        this.onError((_a = this.dataChannel) === null || _a === void 0 ? void 0 : _a.label, event);
    }
    /**
     * Override to register onOpen handler
     * @param label Data channel label ("datachannel", "send-datachannel", "recv-datachannel")
     * @param ev event
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    onOpen(label, ev) {
        // empty default implementation
    }
    /**
     * Override to register onClose handler
     * @param label Data channel label ("datachannel", "send-datachannel", "recv-datachannel")
     * @param ev event
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    onClose(label, ev) {
        // empty default implementation
    }
    /**
     * Override to register onError handler
     * @param label Data channel label ("datachannel", "send-datachannel", "recv-datachannel")
     * @param ev event
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    onError(label, ev) {
        // empty default implementation
    }
}


/***/ }),

/***/ "./src/DataChannel/DataChannelSender.ts":
/*!**********************************************!*\
  !*** ./src/DataChannel/DataChannelSender.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_50182__) => {

__nested_webpack_require_50182__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_50182__.d(__webpack_exports__, {
/* harmony export */   "DataChannelSender": () => (/* binding */ DataChannelSender)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_50182__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
// Copyright Epic Games, Inc. All Rights Reserved.

/**
 * A class for sending data channel messages
 */
class DataChannelSender {
    /**
     * @param dataChannelProvider - Data channel object type
     */
    constructor(dataChannelProvider) {
        this.dataChannelProvider = dataChannelProvider;
    }
    canSend() {
        return (this.dataChannelProvider.getDataChannelInstance().dataChannel !==
            undefined &&
            this.dataChannelProvider.getDataChannelInstance().dataChannel
                .readyState == 'open');
    }
    /**
     * Send Data over the Data channel to the UE Instance
     * @param data - Message Data Array Buffer
     */
    sendData(data) {
        // reset the afk inactivity
        const dataChannelInstance = this.dataChannelProvider.getDataChannelInstance();
        if (dataChannelInstance.dataChannel.readyState == 'open') {
            dataChannelInstance.dataChannel.send(data);
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), `Message Sent: ${new Uint8Array(data)}`, 6);
            this.resetAfkWarningTimerOnDataSend();
        }
        else {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), `Message Failed: ${new Uint8Array(data)}`);
        }
    }
    /**
     * An override method for resetting the Afk warning timer when data is sent over the data channel
     */
    resetAfkWarningTimerOnDataSend() {
        // Base Functionality: Do Nothing
    }
}


/***/ }),

/***/ "./src/DataChannel/InitialSettings.ts":
/*!********************************************!*\
  !*** ./src/DataChannel/InitialSettings.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_52474__) => {

__nested_webpack_require_52474__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_52474__.d(__webpack_exports__, {
/* harmony export */   "EncoderSettings": () => (/* binding */ EncoderSettings),
/* harmony export */   "InitialSettings": () => (/* binding */ InitialSettings),
/* harmony export */   "PixelStreamingSettings": () => (/* binding */ PixelStreamingSettings),
/* harmony export */   "WebRTCSettings": () => (/* binding */ WebRTCSettings)
/* harmony export */ });
// Copyright Epic Games, Inc. All Rights Reserved.
/**
 * Latency Test Results Data
 */
class InitialSettings {
    constructor() {
        this.PixelStreamingSettings = new PixelStreamingSettings();
        this.EncoderSettings = new EncoderSettings();
        this.WebRTCSettings = new WebRTCSettings();
    }
    /**
     * Checks for compatibility with the FPS and MaxFPS stats between 4.27 and 5
     */
    ueCompatible() {
        if (this.WebRTCSettings.MaxFPS != null) {
            this.WebRTCSettings.FPS = this.WebRTCSettings.MaxFPS;
        }
    }
}
/**
 * A class for handling Pixel Streaming details
 */
class PixelStreamingSettings {
}
/**
 * A class for handling encoder stats
 */
class EncoderSettings {
}
/**
 * A class for handling web rtc stats
 */
class WebRTCSettings {
}


/***/ }),

/***/ "./src/DataChannel/LatencyTestResults.ts":
/*!***********************************************!*\
  !*** ./src/DataChannel/LatencyTestResults.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_54075__) => {

__nested_webpack_require_54075__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_54075__.d(__webpack_exports__, {
/* harmony export */   "LatencyTestResults": () => (/* binding */ LatencyTestResults)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_54075__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
// Copyright Epic Games, Inc. All Rights Reserved.

/**
 * Latency Test Results Data
 */
class LatencyTestResults {
    constructor() {
        //Fields Set from the latency payload regardless of version
        this.ReceiptTimeMs = null;
        this.TransmissionTimeMs = null;
        //Fields Set from the latency payload from 4.27.2
        this.PreCaptureTimeMs = null;
        this.PostCaptureTimeMs = null;
        this.PreEncodeTimeMs = null;
        this.PostEncodeTimeMs = null;
        //Fields Set from the latency payload from 5.0
        this.EncodeMs = null;
        this.CaptureToSendMs = null;
        //Fields Set when processed
        this.testStartTimeMs = 0;
        this.browserReceiptTimeMs = 0;
        //Fields set from calculations
        this.latencyExcludingDecode = 0;
        this.testDuration = 0;
        //ueLatency: number = 0;
        this.networkLatency = 0;
        this.browserSendLatency = 0;
        this.frameDisplayDeltaTimeMs = 0;
        this.endToEndLatency = 0;
        //uePixelStreamLatency: number = 0;
        this.encodeLatency = 0;
    }
    /**
     * Sets the Delta Time Milliseconds
     * @param DeltaTimeMs - Delta Time Milliseconds
     */
    setFrameDisplayDeltaTime(DeltaTimeMs) {
        if (this.frameDisplayDeltaTimeMs == 0) {
            this.frameDisplayDeltaTimeMs = Math.round(DeltaTimeMs);
        }
    }
    /**
     * Process the encoder times and set them
     */
    processFields() {
        if (this.EncodeMs == null &&
            (this.PreEncodeTimeMs != null || this.PostEncodeTimeMs != null)) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), `Setting Encode Ms \n ${this.PostEncodeTimeMs} \n ${this.PreEncodeTimeMs}`, 6);
            this.EncodeMs = this.PostEncodeTimeMs - this.PreEncodeTimeMs;
        }
        if (this.CaptureToSendMs == null &&
            (this.PreCaptureTimeMs != null || this.PostCaptureTimeMs != null)) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), `Setting CaptureToSendMs Ms \n ${this.PostCaptureTimeMs} \n ${this.PreCaptureTimeMs}`, 6);
            this.CaptureToSendMs =
                this.PostCaptureTimeMs - this.PreCaptureTimeMs;
        }
    }
}


/***/ }),

/***/ "./src/FreezeFrame/FreezeFrame.ts":
/*!****************************************!*\
  !*** ./src/FreezeFrame/FreezeFrame.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_57113__) => {

__nested_webpack_require_57113__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_57113__.d(__webpack_exports__, {
/* harmony export */   "FreezeFrame": () => (/* binding */ FreezeFrame)
/* harmony export */ });
// Copyright Epic Games, Inc. All Rights Reserved.
/**
 * A class for managing the freeze frame object
 */
class FreezeFrame {
    /**
     * Construct a freeze frame
     * @param rootDiv the div that a freeze frame element will be injected into
     */
    constructor(rootDiv) {
        this.freezeFrameHeight = 0;
        this.freezeFrameWidth = 0;
        this.rootDiv = rootDiv;
        // create the overlay
        this.rootElement = document.createElement('div');
        this.rootElement.id = 'freezeFrame';
        this.rootElement.style.display = 'none';
        this.rootElement.style.pointerEvents = 'none';
        this.rootElement.style.position = 'absolute';
        this.rootElement.style.zIndex = '20';
        // create the image place holder
        this.imageElement = document.createElement('img');
        this.imageElement.style.position = 'absolute';
        // append the image into the root element and append the element to the root div
        this.rootElement.appendChild(this.imageElement);
        this.rootDiv.appendChild(this.rootElement);
    }
    /**
     * Set the freeze frame element for showing
     */
    setElementForShow() {
        this.rootElement.style.display = 'block';
    }
    /**
     * Set the freeze frame element for hiding
     */
    setElementForHide() {
        this.rootElement.style.display = 'none';
    }
    /**
     * Update the freeze frames image source
     * @param jpeg - the freeze frame image as a byte array data
     */
    updateImageElementSource(jpeg) {
        const base64 = btoa(jpeg.reduce((data, byte) => data + String.fromCharCode(byte), ''));
        this.imageElement.src = 'data:image/jpeg;base64,' + base64;
    }
    /**
     * Set the dimensions for the freeze frame from the element and resize it
     */
    setDimensionsFromElementAndResize() {
        this.freezeFrameHeight = this.imageElement.naturalHeight;
        this.freezeFrameWidth = this.imageElement.naturalWidth;
        this.resize();
    }
    /**
     * Resize a freeze frame element
     */
    resize() {
        if (this.freezeFrameWidth !== 0 && this.freezeFrameHeight !== 0) {
            let displayWidth = 0;
            let displayHeight = 0;
            let displayTop = 0;
            let displayLeft = 0;
            const parentAspectRatio = this.rootDiv.clientWidth / this.rootDiv.clientHeight;
            const videoAspectRatio = this.freezeFrameWidth / this.freezeFrameHeight;
            if (parentAspectRatio < videoAspectRatio) {
                displayWidth = this.rootDiv.clientWidth;
                displayHeight = Math.floor(this.rootDiv.clientWidth / videoAspectRatio);
                displayTop = Math.floor((this.rootDiv.clientHeight - displayHeight) * 0.5);
                displayLeft = 0;
            }
            else {
                displayWidth = Math.floor(this.rootDiv.clientHeight * videoAspectRatio);
                displayHeight = this.rootDiv.clientHeight;
                displayTop = 0;
                displayLeft = Math.floor((this.rootDiv.clientWidth - displayWidth) * 0.5);
            }
            this.rootElement.style.width = this.rootDiv.offsetWidth + 'px';
            this.rootElement.style.height = this.rootDiv.offsetHeight + 'px';
            this.rootElement.style.left = 0 + 'px';
            this.rootElement.style.top = 0 + 'px';
            this.imageElement.style.width = displayWidth + 'px';
            this.imageElement.style.height = displayHeight + 'px';
            this.imageElement.style.left = displayLeft + 'px';
            this.imageElement.style.top = displayTop + 'px';
        }
    }
}


/***/ }),

/***/ "./src/FreezeFrame/FreezeFrameController.ts":
/*!**************************************************!*\
  !*** ./src/FreezeFrame/FreezeFrameController.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_61351__) => {

__nested_webpack_require_61351__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_61351__.d(__webpack_exports__, {
/* harmony export */   "FreezeFrameController": () => (/* binding */ FreezeFrameController)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_61351__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _FreezeFrame__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_61351__(/*! ./FreezeFrame */ "./src/FreezeFrame/FreezeFrame.ts");
// Copyright Epic Games, Inc. All Rights Reserved.


/**
 * A class for controlling freeze frame functionality
 */
class FreezeFrameController {
    /**
     * Construct a freeze frame controller
     * @param rootDiv - the div that a freeze frame element will be injected into
     */
    constructor(rootDiv) {
        this.receiving = false;
        this.size = 0;
        this.jpeg = undefined;
        this.valid = false;
        this.freezeFrameDelay = 50;
        this.freezeFrame = new _FreezeFrame__WEBPACK_IMPORTED_MODULE_0__.FreezeFrame(rootDiv);
    }
    /**
     * Show the freeze frame if it is valid
     */
    showFreezeFrame() {
        if (this.valid) {
            this.freezeFrame.setElementForShow();
        }
    }
    /**
     * Hide the freeze frame and set the validity to false
     */
    hideFreezeFrame() {
        this.valid = false;
        this.freezeFrame.setElementForHide();
    }
    /**
     * Update the freeze frames image source and load it
     * @param jpeg - the freeze frame image as a byte array data
     * @param onLoadCallBack - a call back for managing if the play overlay needs to be shown or not
     */
    updateFreezeFrameAndShow(jpeg, onLoadCallBack) {
        this.freezeFrame.updateImageElementSource(jpeg);
        this.freezeFrame.imageElement.onload = () => {
            this.freezeFrame.setDimensionsFromElementAndResize();
            onLoadCallBack();
        };
    }
    /**
     * Process the new freeze frame image and update it
     * @param view - the freeze frame image as a byte array data
     * @param onLoadCallBack - a call back for managing if the play overlay needs to be shown or not
     */
    processFreezeFrameMessage(view, onLoadCallBack) {
        // Reset freeze frame if we got a freeze frame message and we are not "receiving" yet.
        if (!this.receiving) {
            this.receiving = true;
            this.valid = false;
            this.size = 0;
            this.jpeg = undefined;
        }
        // Extract total size of freeze frame (across all chunks)
        this.size = new DataView(view.slice(1, 5).buffer).getInt32(0, true);
        // Get the jpeg part of the payload
        const jpegBytes = view.slice(1 + 4);
        // Append to existing jpeg that holds the freeze frame
        if (this.jpeg) {
            const jpeg = new Uint8Array(this.jpeg.length + jpegBytes.length);
            jpeg.set(this.jpeg, 0);
            jpeg.set(jpegBytes, this.jpeg.length);
            this.jpeg = jpeg;
        }
        // No existing freeze frame jpeg, make one
        else {
            this.jpeg = jpegBytes;
            this.receiving = true;
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), `received first chunk of freeze frame: ${this.jpeg.length}/${this.size}`, 6);
        }
        // Finished receiving freeze frame, we can show it now
        if (this.jpeg.length === this.size) {
            this.receiving = false;
            this.valid = true;
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), `received complete freeze frame ${this.size}`, 6);
            this.updateFreezeFrameAndShow(this.jpeg, onLoadCallBack);
        }
        // We received more data than the freeze frame payload message indicate (this is an error)
        else if (this.jpeg.length > this.size) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), `received bigger freeze frame than advertised: ${this.jpeg.length}/${this.size}`);
            this.jpeg = undefined;
            this.receiving = false;
        }
    }
}


/***/ }),

/***/ "./src/Inputs/FakeTouchController.ts":
/*!*******************************************!*\
  !*** ./src/Inputs/FakeTouchController.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_66019__) => {

__nested_webpack_require_66019__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_66019__.d(__webpack_exports__, {
/* harmony export */   "FakeTouchController": () => (/* binding */ FakeTouchController),
/* harmony export */   "FakeTouchFinger": () => (/* binding */ FakeTouchFinger)
/* harmony export */ });
/* harmony import */ var _MouseButtons__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_66019__(/*! ./MouseButtons */ "./src/Inputs/MouseButtons.ts");
/* harmony import */ var _Util_EventListenerTracker__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_66019__(/*! ../Util/EventListenerTracker */ "./src/Util/EventListenerTracker.ts");
// Copyright Epic Games, Inc. All Rights Reserved.


/**
 * Allows for the usage of fake touch events and implements ITouchController
 * @param dataChannelController - The controller for the Data channel
 * @param videoElementParent - The video player DOM element
 */
class FakeTouchController {
    /**
     * @param toStreamerMessagesProvider - Stream message instance
     * @param videoElementProvider - Video element instance
     * @param coordinateConverter - A coordinate converter instance
     */
    constructor(toStreamerMessagesProvider, videoElementProvider, coordinateConverter) {
        // Utility for keeping track of event handlers and unregistering them
        this.touchEventListenerTracker = new _Util_EventListenerTracker__WEBPACK_IMPORTED_MODULE_0__.EventListenerTracker();
        this.toStreamerMessagesProvider = toStreamerMessagesProvider;
        this.videoElementProvider = videoElementProvider;
        this.coordinateConverter = coordinateConverter;
        const ontouchstart = (ev) => this.onTouchStart(ev);
        const ontouchend = (ev) => this.onTouchEnd(ev);
        const ontouchmove = (ev) => this.onTouchMove(ev);
        document.addEventListener('touchstart', ontouchstart, { passive: false });
        document.addEventListener('touchend', ontouchend, { passive: false });
        document.addEventListener('touchmove', ontouchmove, { passive: false });
        this.touchEventListenerTracker.addUnregisterCallback(() => document.removeEventListener('touchstart', ontouchstart));
        this.touchEventListenerTracker.addUnregisterCallback(() => document.removeEventListener('touchend', ontouchend));
        this.touchEventListenerTracker.addUnregisterCallback(() => document.removeEventListener('touchmove', ontouchmove));
    }
    /**
     * Unregister all touch events
     */
    unregisterTouchEvents() {
        this.touchEventListenerTracker.unregisterAll();
    }
    /**
     * Sets the video Element Parent Client Rect numbers for this class
     * @param videoElementParentClientRect - a html ElementParentClientRect object
     */
    setVideoElementParentClientRect(videoElementParentClientRect) {
        this.videoElementParentClientRect = videoElementParentClientRect;
    }
    /**
     * When a touch event begins
     * @param touch - the activating touch event
     */
    onTouchStart(touch) {
        if (!this.videoElementProvider.isVideoReady()) {
            return;
        }
        if (this.fakeTouchFinger == null) {
            const first_touch = touch.changedTouches[0];
            this.fakeTouchFinger = new FakeTouchFinger(first_touch.identifier, first_touch.clientX - this.videoElementParentClientRect.left, first_touch.clientY - this.videoElementParentClientRect.top);
            const videoElementParent = this.videoElementProvider.getVideoParentElement();
            const mouseEvent = new MouseEvent('mouseenter', first_touch);
            videoElementParent.dispatchEvent(mouseEvent);
            const coord = this.coordinateConverter.normalizeAndQuantizeUnsigned(this.fakeTouchFinger.x, this.fakeTouchFinger.y);
            const toStreamerHandlers = this.toStreamerMessagesProvider.toStreamerHandlers;
            toStreamerHandlers.get('MouseDown')([
                _MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButton.mainButton,
                coord.x,
                coord.y
            ]);
        }
        touch.preventDefault();
    }
    /**
     * When a touch event ends
     * @param touchEvent - the activating touch event
     */
    onTouchEnd(touchEvent) {
        if (!this.videoElementProvider.isVideoReady()) {
            return;
        }
        const videoElementParent = this.videoElementProvider.getVideoParentElement();
        const toStreamerHandlers = this.toStreamerMessagesProvider.toStreamerHandlers;
        for (let t = 0; t < touchEvent.changedTouches.length; t++) {
            const touch = touchEvent.changedTouches[t];
            if (touch.identifier === this.fakeTouchFinger.id) {
                const x = touch.clientX - this.videoElementParentClientRect.left;
                const y = touch.clientY - this.videoElementParentClientRect.top;
                const coord = this.coordinateConverter.normalizeAndQuantizeUnsigned(x, y);
                toStreamerHandlers.get('MouseUp')([
                    _MouseButtons__WEBPACK_IMPORTED_MODULE_1__.MouseButton.mainButton,
                    coord.x,
                    coord.y
                ]);
                const mouseEvent = new MouseEvent('mouseleave', touch);
                videoElementParent.dispatchEvent(mouseEvent);
                this.fakeTouchFinger = null;
                break;
            }
        }
        touchEvent.preventDefault();
    }
    /**
     * On a Move touch event
     * @param touchEvent - the activating touch event
     */
    onTouchMove(touchEvent) {
        if (!this.videoElementProvider.isVideoReady()) {
            return;
        }
        const toStreamerHandlers = this.toStreamerMessagesProvider.toStreamerHandlers;
        for (let t = 0; t < touchEvent.touches.length; t++) {
            const touch = touchEvent.touches[t];
            if (touch.identifier === this.fakeTouchFinger.id) {
                const x = touch.clientX - this.videoElementParentClientRect.left;
                const y = touch.clientY - this.videoElementParentClientRect.top;
                const coord = this.coordinateConverter.normalizeAndQuantizeUnsigned(x, y);
                const delta = this.coordinateConverter.normalizeAndQuantizeSigned(x - this.fakeTouchFinger.x, y - this.fakeTouchFinger.y);
                toStreamerHandlers.get('MouseMove')([
                    coord.x,
                    coord.y,
                    delta.x,
                    delta.y
                ]);
                this.fakeTouchFinger.x = x;
                this.fakeTouchFinger.y = y;
                break;
            }
        }
        touchEvent.preventDefault();
    }
}
/**
 * The interface for finger position mapping
 */
class FakeTouchFinger {
    /**
     * @param id - the button id
     * @param x - the x axis value
     * @param y - the y axis value
     */
    constructor(id, x, y) {
        this.id = id;
        this.x = x;
        this.y = y;
    }
}


/***/ }),

/***/ "./src/Inputs/GamepadController.ts":
/*!*****************************************!*\
  !*** ./src/Inputs/GamepadController.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_73359__) => {

__nested_webpack_require_73359__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_73359__.d(__webpack_exports__, {
/* harmony export */   "GamePadController": () => (/* binding */ GamePadController),
/* harmony export */   "gamepadLayout": () => (/* binding */ gamepadLayout)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_73359__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _Util_EventListenerTracker__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_73359__(/*! ../Util/EventListenerTracker */ "./src/Util/EventListenerTracker.ts");
// Copyright Epic Games, Inc. All Rights Reserved.


/**
 * The class that handles the functionality of gamepads and controllers
 */
class GamePadController {
    /**
     * @param toStreamerMessagesProvider - Stream message instance
     */
    constructor(toStreamerMessagesProvider) {
        // Utility for keeping track of event handlers and unregistering them
        this.gamePadEventListenerTracker = new _Util_EventListenerTracker__WEBPACK_IMPORTED_MODULE_0__.EventListenerTracker();
        this.toStreamerMessagesProvider = toStreamerMessagesProvider;
        this.requestAnimationFrame = (window.mozRequestAnimationFrame ||
            window.webkitRequestAnimationFrame ||
            window.requestAnimationFrame).bind(window);
        const browserWindow = window;
        if ('GamepadEvent' in browserWindow) {
            const onGamePadConnected = (ev) => this.gamePadConnectHandler(ev);
            const onGamePadDisconnected = (ev) => this.gamePadDisconnectHandler(ev);
            window.addEventListener('gamepadconnected', onGamePadConnected);
            window.addEventListener('gamepaddisconnected', onGamePadDisconnected);
            this.gamePadEventListenerTracker.addUnregisterCallback(() => window.removeEventListener('gamepadconnected', onGamePadConnected));
            this.gamePadEventListenerTracker.addUnregisterCallback(() => window.removeEventListener('gamepaddisconnected', onGamePadDisconnected));
        }
        else if ('WebKitGamepadEvent' in browserWindow) {
            const onWebkitGamePadConnected = (ev) => this.gamePadConnectHandler(ev);
            const onWebkitGamePadDisconnected = (ev) => this.gamePadDisconnectHandler(ev);
            window.addEventListener('webkitgamepadconnected', onWebkitGamePadConnected);
            window.addEventListener('webkitgamepaddisconnected', onWebkitGamePadDisconnected);
            this.gamePadEventListenerTracker.addUnregisterCallback(() => window.removeEventListener('webkitgamepadconnected', onWebkitGamePadConnected));
            this.gamePadEventListenerTracker.addUnregisterCallback(() => window.removeEventListener('webkitgamepaddisconnected', onWebkitGamePadDisconnected));
        }
        this.controllers = [];
        if (navigator.getGamepads) {
            for (const gamepad of navigator.getGamepads()) {
                if (gamepad) {
                    this.gamePadConnectHandler(new GamepadEvent('gamepadconnected', { gamepad }));
                }
            }
        }
    }
    /**
     * Unregisters all event handlers
     */
    unregisterGamePadEvents() {
        this.gamePadEventListenerTracker.unregisterAll();
        for (const controller of this.controllers) {
            if (controller.id !== undefined) {
                this.onGamepadDisconnected(controller.id);
            }
        }
        this.controllers = [];
        this.onGamepadConnected = () => { };
        this.onGamepadDisconnected = () => { };
    }
    /**
     * Connects the gamepad handler
     * @param gamePadEvent - the activating gamepad event
     */
    gamePadConnectHandler(gamePadEvent) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), 'Gamepad connect handler', 6);
        const gamepad = gamePadEvent.gamepad;
        const temp = {
            currentState: gamepad,
            prevState: gamepad,
            id: undefined
        };
        this.controllers.push(temp);
        this.controllers[gamepad.index].currentState = gamepad;
        this.controllers[gamepad.index].prevState = gamepad;
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), 'gamepad: ' + gamepad.id + ' connected', 6);
        window.requestAnimationFrame(() => this.updateStatus());
        this.onGamepadConnected();
    }
    /**
     * Disconnects the gamepad handler
     * @param gamePadEvent - the activating gamepad event
     */
    gamePadDisconnectHandler(gamePadEvent) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), 'Gamepad disconnect handler', 6);
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), 'gamepad: ' + gamePadEvent.gamepad.id + ' disconnected', 6);
        const deletedController = this.controllers[gamePadEvent.gamepad.index];
        delete this.controllers[gamePadEvent.gamepad.index];
        this.controllers = this.controllers.filter((controller) => controller !== undefined);
        this.onGamepadDisconnected(deletedController.id);
    }
    /**
     * Scan for connected gamepads
     */
    scanGamePads() {
        const gamepads = navigator.getGamepads
            ? navigator.getGamepads()
            : navigator.webkitGetGamepads
                ? navigator.webkitGetGamepads()
                : [];
        for (let i = 0; i < gamepads.length; i++) {
            if (gamepads[i] && gamepads[i].index in this.controllers) {
                this.controllers[gamepads[i].index].currentState = gamepads[i];
            }
        }
    }
    /**
     * Updates the status of the gamepad and sends the inputs
     */
    updateStatus() {
        this.scanGamePads();
        const toStreamerHandlers = this.toStreamerMessagesProvider.toStreamerHandlers;
        // Iterate over multiple controllers in the case the multiple gamepads are connected
        for (const controller of this.controllers) {
            // If we haven't received an id (possible if using an older version of UE), return to original functionality
            const controllerIndex = (controller.id === undefined) ? this.controllers.indexOf(controller) : controller.id;
            const currentState = controller.currentState;
            for (let i = 0; i < controller.currentState.buttons.length; i++) {
                const currentButton = controller.currentState.buttons[i];
                const previousButton = controller.prevState.buttons[i];
                if (currentButton.pressed) {
                    // press
                    if (i == gamepadLayout.LeftTrigger) {
                        //                       UEs left analog has a button index of 5
                        toStreamerHandlers.get('GamepadAnalog')([
                            controllerIndex,
                            5,
                            currentButton.value
                        ]);
                    }
                    else if (i == gamepadLayout.RightTrigger) {
                        //                       UEs right analog has a button index of 6
                        toStreamerHandlers.get('GamepadAnalog')([
                            controllerIndex,
                            6,
                            currentButton.value
                        ]);
                    }
                    else {
                        toStreamerHandlers.get('GamepadButtonPressed')([
                            controllerIndex,
                            i,
                            previousButton.pressed ? 1 : 0
                        ]);
                    }
                }
                else if (!currentButton.pressed && previousButton.pressed) {
                    // release
                    if (i == gamepadLayout.LeftTrigger) {
                        //                       UEs left analog has a button index of 5
                        toStreamerHandlers.get('GamepadAnalog')([
                            controllerIndex,
                            5,
                            0
                        ]);
                    }
                    else if (i == gamepadLayout.RightTrigger) {
                        //                       UEs right analog has a button index of 6
                        toStreamerHandlers.get('GamepadAnalog')([
                            controllerIndex,
                            6,
                            0
                        ]);
                    }
                    else {
                        toStreamerHandlers.get('GamepadButtonReleased')([
                            controllerIndex,
                            i
                        ]);
                    }
                }
            }
            // Iterate over gamepad axes (we will increment in lots of 2 as there is 2 axes per stick)
            for (let i = 0; i < currentState.axes.length; i += 2) {
                // Horizontal axes are even numbered
                const x = parseFloat(currentState.axes[i].toFixed(4));
                // Vertical axes are odd numbered
                // https://w3c.github.io/gamepad/#remapping Gamepad browser side standard mapping has positive down, negative up. This is downright disgusting. So we fix it.
                const y = -parseFloat(currentState.axes[i + 1].toFixed(4));
                // UE's analog axes follow the same order as the browsers, but start at index 1 so we will offset as such
                toStreamerHandlers.get('GamepadAnalog')([
                    controllerIndex,
                    i + 1,
                    x
                ]); // Horizontal axes, only offset by 1
                toStreamerHandlers.get('GamepadAnalog')([
                    controllerIndex,
                    i + 2,
                    y
                ]); // Vertical axes, offset by two (1 to match UEs axes convention and then another 1 for the vertical axes)
            }
            this.controllers[controllerIndex].prevState = currentState;
        }
        if (this.controllers.length > 0) {
            this.requestAnimationFrame(() => this.updateStatus());
        }
    }
    onGamepadResponseReceived(gamepadId) {
        for (const controller of this.controllers) {
            if (controller.id === undefined) {
                controller.id = gamepadId;
                break;
            }
        }
    }
    /**
     * Event to send the gamepadconnected message to the application
     */
    onGamepadConnected() {
        // Default Functionality: Do Nothing
    }
    /**
     * Event to send the gamepaddisconnected message to the application
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    onGamepadDisconnected(controllerIdx) {
        // Default Functionality: Do Nothing
    }
}
/**
 * Gamepad layout codes enum
 */
var gamepadLayout;
(function (gamepadLayout) {
    gamepadLayout[gamepadLayout["RightClusterBottomButton"] = 0] = "RightClusterBottomButton";
    gamepadLayout[gamepadLayout["RightClusterRightButton"] = 1] = "RightClusterRightButton";
    gamepadLayout[gamepadLayout["RightClusterLeftButton"] = 2] = "RightClusterLeftButton";
    gamepadLayout[gamepadLayout["RightClusterTopButton"] = 3] = "RightClusterTopButton";
    gamepadLayout[gamepadLayout["LeftShoulder"] = 4] = "LeftShoulder";
    gamepadLayout[gamepadLayout["RightShoulder"] = 5] = "RightShoulder";
    gamepadLayout[gamepadLayout["LeftTrigger"] = 6] = "LeftTrigger";
    gamepadLayout[gamepadLayout["RightTrigger"] = 7] = "RightTrigger";
    gamepadLayout[gamepadLayout["SelectOrBack"] = 8] = "SelectOrBack";
    gamepadLayout[gamepadLayout["StartOrForward"] = 9] = "StartOrForward";
    gamepadLayout[gamepadLayout["LeftAnalogPress"] = 10] = "LeftAnalogPress";
    gamepadLayout[gamepadLayout["RightAnalogPress"] = 11] = "RightAnalogPress";
    gamepadLayout[gamepadLayout["LeftClusterTopButton"] = 12] = "LeftClusterTopButton";
    gamepadLayout[gamepadLayout["LeftClusterBottomButton"] = 13] = "LeftClusterBottomButton";
    gamepadLayout[gamepadLayout["LeftClusterLeftButton"] = 14] = "LeftClusterLeftButton";
    gamepadLayout[gamepadLayout["LeftClusterRightButton"] = 15] = "LeftClusterRightButton";
    gamepadLayout[gamepadLayout["CentreButton"] = 16] = "CentreButton";
    // Axes
    gamepadLayout[gamepadLayout["LeftStickHorizontal"] = 0] = "LeftStickHorizontal";
    gamepadLayout[gamepadLayout["LeftStickVertical"] = 1] = "LeftStickVertical";
    gamepadLayout[gamepadLayout["RightStickHorizontal"] = 2] = "RightStickHorizontal";
    gamepadLayout[gamepadLayout["RightStickVertical"] = 3] = "RightStickVertical";
})(gamepadLayout || (gamepadLayout = {}));


/***/ }),

/***/ "./src/Inputs/HoveringMouseEvents.ts":
/*!*******************************************!*\
  !*** ./src/Inputs/HoveringMouseEvents.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_86794__) => {

__nested_webpack_require_86794__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_86794__.d(__webpack_exports__, {
/* harmony export */   "HoveringMouseEvents": () => (/* binding */ HoveringMouseEvents)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_86794__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
// Copyright Epic Games, Inc. All Rights Reserved.

/**
 * Video Player mouse Hover handler
 */
class HoveringMouseEvents {
    /**
     * @param mouseController - Mouse Controller instance
     */
    constructor(mouseController) {
        this.mouseController = mouseController;
    }
    /**
     * Unregister event handlers
     */
    unregisterMouseEvents() {
        // empty for HoveringMouseEvents implementation
    }
    /**
     * Handle the mouse move event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    updateMouseMovePosition(mouseEvent) {
        if (!this.mouseController.videoElementProvider.isVideoReady()) {
            return;
        }
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'MouseMove', 6);
        const coord = this.mouseController.coordinateConverter.normalizeAndQuantizeUnsigned(mouseEvent.offsetX, mouseEvent.offsetY);
        const delta = this.mouseController.coordinateConverter.normalizeAndQuantizeSigned(mouseEvent.movementX, mouseEvent.movementY);
        const toStreamerHandlers = this.mouseController.toStreamerMessagesProvider.toStreamerHandlers;
        toStreamerHandlers.get('MouseMove')([
            coord.x,
            coord.y,
            delta.x,
            delta.y
        ]);
        mouseEvent.preventDefault();
    }
    /**
     * Handle the mouse Down event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    handleMouseDown(mouseEvent) {
        if (!this.mouseController.videoElementProvider.isVideoReady()) {
            return;
        }
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'onMouse Down', 6);
        const coord = this.mouseController.coordinateConverter.normalizeAndQuantizeUnsigned(mouseEvent.offsetX, mouseEvent.offsetY);
        const toStreamerHandlers = this.mouseController.toStreamerMessagesProvider.toStreamerHandlers;
        toStreamerHandlers.get('MouseDown')([
            mouseEvent.button,
            coord.x,
            coord.y
        ]);
        mouseEvent.preventDefault();
    }
    /**
     * Handle the mouse Up event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    handleMouseUp(mouseEvent) {
        if (!this.mouseController.videoElementProvider.isVideoReady()) {
            return;
        }
        const coord = this.mouseController.coordinateConverter.normalizeAndQuantizeUnsigned(mouseEvent.offsetX, mouseEvent.offsetY);
        const toStreamerHandlers = this.mouseController.toStreamerMessagesProvider.toStreamerHandlers;
        toStreamerHandlers.get('MouseUp')([
            mouseEvent.button,
            coord.x,
            coord.y
        ]);
        mouseEvent.preventDefault();
    }
    /**
     * Handle the mouse context menu event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    handleContextMenu(mouseEvent) {
        if (!this.mouseController.videoElementProvider.isVideoReady()) {
            return;
        }
        const coord = this.mouseController.coordinateConverter.normalizeAndQuantizeUnsigned(mouseEvent.offsetX, mouseEvent.offsetY);
        const toStreamerHandlers = this.mouseController.toStreamerMessagesProvider.toStreamerHandlers;
        toStreamerHandlers.get('MouseUp')([
            mouseEvent.button,
            coord.x,
            coord.y
        ]);
        mouseEvent.preventDefault();
    }
    /**
     * Handle the mouse wheel event, sends the mouse wheel data to the UE Instance
     * @param wheelEvent - Mouse Event
     */
    handleMouseWheel(wheelEvent) {
        if (!this.mouseController.videoElementProvider.isVideoReady()) {
            return;
        }
        const coord = this.mouseController.coordinateConverter.normalizeAndQuantizeUnsigned(wheelEvent.offsetX, wheelEvent.offsetY);
        const toStreamerHandlers = this.mouseController.toStreamerMessagesProvider.toStreamerHandlers;
        toStreamerHandlers.get('MouseWheel')([
            wheelEvent.wheelDelta,
            coord.x,
            coord.y
        ]);
        wheelEvent.preventDefault();
    }
    /**
     * Handle the mouse double click event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    handleMouseDouble(mouseEvent) {
        if (!this.mouseController.videoElementProvider.isVideoReady()) {
            return;
        }
        const coord = this.mouseController.coordinateConverter.normalizeAndQuantizeUnsigned(mouseEvent.offsetX, mouseEvent.offsetY);
        const toStreamerHandlers = this.mouseController.toStreamerMessagesProvider.toStreamerHandlers;
        toStreamerHandlers.get('MouseDouble')([
            mouseEvent.button,
            coord.x,
            coord.y
        ]);
    }
    /**
     * Handle the press mouse buttons event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    handlePressMouseButtons(mouseEvent) {
        if (!this.mouseController.videoElementProvider.isVideoReady()) {
            return;
        }
        this.mouseController.pressMouseButtons(mouseEvent.buttons, mouseEvent.offsetX, mouseEvent.offsetY);
    }
    /**
     * Handle the release mouse buttons event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    handleReleaseMouseButtons(mouseEvent) {
        if (!this.mouseController.videoElementProvider.isVideoReady()) {
            return;
        }
        this.mouseController.releaseMouseButtons(mouseEvent.buttons, mouseEvent.offsetX, mouseEvent.offsetY);
    }
}


/***/ }),

/***/ "./src/Inputs/InputClassesFactory.ts":
/*!*******************************************!*\
  !*** ./src/Inputs/InputClassesFactory.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_93327__) => {

__nested_webpack_require_93327__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_93327__.d(__webpack_exports__, {
/* harmony export */   "ActiveKeys": () => (/* binding */ ActiveKeys),
/* harmony export */   "InputClassesFactory": () => (/* binding */ InputClassesFactory)
/* harmony export */ });
/* harmony import */ var _FakeTouchController__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_93327__(/*! ./FakeTouchController */ "./src/Inputs/FakeTouchController.ts");
/* harmony import */ var _KeyboardController__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_93327__(/*! ./KeyboardController */ "./src/Inputs/KeyboardController.ts");
/* harmony import */ var _MouseController__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_93327__(/*! ./MouseController */ "./src/Inputs/MouseController.ts");
/* harmony import */ var _TouchController__WEBPACK_IMPORTED_MODULE_5__ = __nested_webpack_require_93327__(/*! ./TouchController */ "./src/Inputs/TouchController.ts");
/* harmony import */ var _GamepadController__WEBPACK_IMPORTED_MODULE_6__ = __nested_webpack_require_93327__(/*! ./GamepadController */ "./src/Inputs/GamepadController.ts");
/* harmony import */ var _Config_Config__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_93327__(/*! ../Config/Config */ "./src/Config/Config.ts");
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_93327__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
// Copyright Epic Games, Inc. All Rights Reserved.







/**
 * Class for making and setting up input class types
 */
class InputClassesFactory {
    /**
     * @param toStreamerMessagesProvider - Stream message instance
     * @param videoElementProvider - Video Player instance
     * @param coordinateConverter - A coordinateConverter instance
     */
    constructor(toStreamerMessagesProvider, videoElementProvider, coordinateConverter) {
        this.activeKeys = new ActiveKeys();
        this.toStreamerMessagesProvider = toStreamerMessagesProvider;
        this.videoElementProvider = videoElementProvider;
        this.coordinateConverter = coordinateConverter;
    }
    /**
     * Registers browser key events.
     */
    registerKeyBoard(config) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'Register Keyboard Events', 7);
        const keyboardController = new _KeyboardController__WEBPACK_IMPORTED_MODULE_1__.KeyboardController(this.toStreamerMessagesProvider, config, this.activeKeys);
        keyboardController.registerKeyBoardEvents();
        return keyboardController;
    }
    /**
     * register mouse events based on a control type
     * @param controlScheme - if the mouse is either hovering or locked
     */
    registerMouse(controlScheme) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'Register Mouse Events', 7);
        const mouseController = new _MouseController__WEBPACK_IMPORTED_MODULE_2__.MouseController(this.toStreamerMessagesProvider, this.videoElementProvider, this.coordinateConverter, this.activeKeys);
        switch (controlScheme) {
            case _Config_Config__WEBPACK_IMPORTED_MODULE_3__.ControlSchemeType.LockedMouse:
                mouseController.registerLockedMouseEvents(mouseController);
                break;
            case _Config_Config__WEBPACK_IMPORTED_MODULE_3__.ControlSchemeType.HoveringMouse:
                mouseController.registerHoveringMouseEvents(mouseController);
                break;
            default:
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Info(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'unknown Control Scheme Type Defaulting to Locked Mouse Events');
                mouseController.registerLockedMouseEvents(mouseController);
                break;
        }
        return mouseController;
    }
    /**
     * register touch events
     * @param fakeMouseTouch - the faked mouse touch event
     */
    registerTouch(fakeMouseTouch, videoElementParentClientRect) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'Registering Touch', 6);
        if (fakeMouseTouch) {
            const fakeTouchController = new _FakeTouchController__WEBPACK_IMPORTED_MODULE_4__.FakeTouchController(this.toStreamerMessagesProvider, this.videoElementProvider, this.coordinateConverter);
            fakeTouchController.setVideoElementParentClientRect(videoElementParentClientRect);
            return fakeTouchController;
        }
        else {
            return new _TouchController__WEBPACK_IMPORTED_MODULE_5__.TouchController(this.toStreamerMessagesProvider, this.videoElementProvider, this.coordinateConverter);
        }
    }
    /**
     * registers a gamepad
     */
    registerGamePad() {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'Register Game Pad', 7);
        const gamePadController = new _GamepadController__WEBPACK_IMPORTED_MODULE_6__.GamePadController(this.toStreamerMessagesProvider);
        return gamePadController;
    }
}
/**
 * A class that keeps track of current active keys
 */
class ActiveKeys {
    constructor() {
        this.activeKeys = [];
        this.activeKeys = [];
    }
    /**
     * Get the current array of active keys
     * @returns - an array of active keys
     */
    getActiveKeys() {
        return this.activeKeys;
    }
}


/***/ }),

/***/ "./src/Inputs/KeyboardController.ts":
/*!******************************************!*\
  !*** ./src/Inputs/KeyboardController.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_99229__) => {

__nested_webpack_require_99229__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_99229__.d(__webpack_exports__, {
/* harmony export */   "KeyboardController": () => (/* binding */ KeyboardController)
/* harmony export */ });
/* harmony import */ var _SpecialKeyCodes__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_99229__(/*! ./SpecialKeyCodes */ "./src/Inputs/SpecialKeyCodes.ts");
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_99229__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _Config_Config__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_99229__(/*! ../Config/Config */ "./src/Config/Config.ts");
/* harmony import */ var _Util_EventListenerTracker__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_99229__(/*! ../Util/EventListenerTracker */ "./src/Util/EventListenerTracker.ts");
// Copyright Epic Games, Inc. All Rights Reserved.




/**
 * Handles the Keyboard Inputs for the document
 */
class KeyboardController {
    /**
     * @param toStreamerMessagesProvider Stream message provider class object
     * @param config The applications configuration. We're interested in the suppress browser keys option
     * @param activeKeysProvider Active keys provider class object
     */
    constructor(toStreamerMessagesProvider, config, activeKeysProvider) {
        // Utility for keeping track of event handlers and unregistering them
        this.keyboardEventListenerTracker = new _Util_EventListenerTracker__WEBPACK_IMPORTED_MODULE_0__.EventListenerTracker();
        /*
         * New browser APIs have moved away from KeyboardEvent.keyCode to KeyboardEvent.Code.
         * For details see: https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode#constants_for_keycode_value
         * We still use old KeyboardEvent.keyCode integers in the UE C++ side, so we need a way to map the new
         * string-based KeyboardEvent.Code to the old integers.
         */
        this.CodeToKeyCode = {
            Escape: 27,
            Digit0: 48,
            Digit1: 49,
            Digit2: 50,
            Digit3: 51,
            Digit4: 52,
            Digit5: 53,
            Digit6: 54,
            Digit7: 55,
            Digit8: 56,
            Digit9: 57,
            Minus: 173,
            Equal: 187,
            Backspace: 8,
            Tab: 9,
            KeyQ: 81,
            KeyW: 87,
            KeyE: 69,
            KeyR: 82,
            KeyT: 84,
            KeyY: 89,
            KeyU: 85,
            KeyI: 73,
            KeyO: 79,
            KeyP: 80,
            BracketLeft: 219,
            BracketRight: 221,
            Enter: 13,
            ControlLeft: 17,
            KeyA: 65,
            KeyS: 83,
            KeyD: 68,
            KeyF: 70,
            KeyG: 71,
            KeyH: 72,
            KeyJ: 74,
            KeyK: 75,
            KeyL: 76,
            Semicolon: 186,
            Quote: 222,
            Backquote: 192,
            ShiftLeft: 16,
            Backslash: 220,
            KeyZ: 90,
            KeyX: 88,
            KeyC: 67,
            KeyV: 86,
            KeyB: 66,
            KeyN: 78,
            KeyM: 77,
            Comma: 188,
            Period: 190,
            Slash: 191,
            ShiftRight: 253,
            AltLeft: 18,
            Space: 32,
            CapsLock: 20,
            F1: 112,
            F2: 113,
            F3: 114,
            F4: 115,
            F5: 116,
            F6: 117,
            F7: 118,
            F8: 119,
            F9: 120,
            F10: 121,
            F11: 122,
            F12: 123,
            Pause: 19,
            ScrollLock: 145,
            NumpadDivide: 111,
            NumpadMultiply: 106,
            NumpadSubtract: 109,
            NumpadAdd: 107,
            NumpadDecimal: 110,
            Numpad9: 105,
            Numpad8: 104,
            Numpad7: 103,
            Numpad6: 102,
            Numpad5: 101,
            Numpad4: 100,
            Numpad3: 99,
            Numpad2: 98,
            Numpad1: 97,
            Numpad0: 96,
            NumLock: 144,
            ControlRight: 254,
            AltRight: 255,
            Home: 36,
            End: 35,
            ArrowUp: 38,
            ArrowLeft: 37,
            ArrowRight: 39,
            ArrowDown: 40,
            PageUp: 33,
            PageDown: 34,
            Insert: 45,
            Delete: 46,
            ContextMenu: 93
        };
        this.toStreamerMessagesProvider = toStreamerMessagesProvider;
        this.config = config;
        this.activeKeysProvider = activeKeysProvider;
    }
    /**
     * Registers document keyboard events with the controller
     */
    registerKeyBoardEvents() {
        const keyDownHandler = (ev) => this.handleOnKeyDown(ev);
        const keyUpHandler = (ev) => this.handleOnKeyUp(ev);
        const keyPressHandler = (ev) => this.handleOnKeyPress(ev);
        document.addEventListener("keydown", keyDownHandler);
        document.addEventListener("keyup", keyUpHandler);
        //This has been deprecated as at Jun 13 2021
        document.addEventListener("keypress", keyPressHandler);
        this.keyboardEventListenerTracker.addUnregisterCallback(() => document.removeEventListener("keydown", keyDownHandler));
        this.keyboardEventListenerTracker.addUnregisterCallback(() => document.removeEventListener("keyup", keyUpHandler));
        this.keyboardEventListenerTracker.addUnregisterCallback(() => document.removeEventListener("keypress", keyPressHandler));
    }
    /**
     * Unregisters document keyboard events
     */
    unregisterKeyBoardEvents() {
        this.keyboardEventListenerTracker.unregisterAll();
    }
    /**
     * Handles When a key is down
     * @param keyboardEvent - Keyboard event
     */
    handleOnKeyDown(keyboardEvent) {
        const keyCode = this.getKeycode(keyboardEvent);
        if (!keyCode) {
            return;
        }
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), `key down ${keyCode}, repeat = ${keyboardEvent.repeat}`, 6);
        const toStreamerHandlers = this.toStreamerMessagesProvider.toStreamerHandlers;
        toStreamerHandlers.get('KeyDown')([
            this.getKeycode(keyboardEvent),
            keyboardEvent.repeat ? 1 : 0
        ]);
        const activeKeys = this.activeKeysProvider.getActiveKeys();
        activeKeys.push(keyCode);
        // Backspace is not considered a keypress in JavaScript but we need it
        // to be so characters may be deleted in a UE text entry field.
        if (keyCode === _SpecialKeyCodes__WEBPACK_IMPORTED_MODULE_2__.SpecialKeyCodes.backSpace) {
            document.dispatchEvent(new KeyboardEvent('keypress', {
                charCode: _SpecialKeyCodes__WEBPACK_IMPORTED_MODULE_2__.SpecialKeyCodes.backSpace
            }));
        }
        if (this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_3__.Flags.SuppressBrowserKeys) &&
            this.isKeyCodeBrowserKey(keyCode)) {
            keyboardEvent.preventDefault();
        }
    }
    /**
     * handles when a key is up
     * @param keyboardEvent - Keyboard event
     */
    handleOnKeyUp(keyboardEvent) {
        const keyCode = this.getKeycode(keyboardEvent);
        if (!keyCode) {
            return;
        }
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), `key up ${keyCode}`, 6);
        const toStreamerHandlers = this.toStreamerMessagesProvider.toStreamerHandlers;
        toStreamerHandlers.get('KeyUp')([
            keyCode,
            keyboardEvent.repeat ? 1 : 0
        ]);
        if (this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_3__.Flags.SuppressBrowserKeys) &&
            this.isKeyCodeBrowserKey(keyCode)) {
            keyboardEvent.preventDefault();
        }
    }
    /**
     * Handles when a key is press
     * @param keyboard - Keyboard Event
     */
    handleOnKeyPress(keyboard) {
        if (!('charCode' in keyboard)) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Warning(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), 'KeyboardEvent.charCode is deprecated in this browser, cannot send key press.');
            return;
        }
        const charCode = keyboard.charCode;
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), `key press ${charCode}`, 6);
        const toStreamerHandlers = this.toStreamerMessagesProvider.toStreamerHandlers;
        toStreamerHandlers.get('KeyPress')([charCode]);
    }
    /**
     * Gets the Keycode of the Key pressed
     * @param keyboardEvent - Key board Event
     * @returns - the key code of the Key
     */
    getKeycode(keyboardEvent) {
        // If we don't have keyCode property because browser API is deprecated then use KeyboardEvent.code instead.
        // See: https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode#constants_for_keycode_value
        if (!('keyCode' in keyboardEvent)) {
            // Convert KeyboardEvent.code string into integer-based key code for backwards compatibility reasons.
            const event = keyboardEvent;
            if (event.code in this.CodeToKeyCode) {
                return this.CodeToKeyCode[event.code];
            }
            else {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Warning(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), `Keyboard code of ${event.code} is not supported in our mapping, ignoring this key.`);
                return null;
            }
        }
        // If we made it here KeyboardEvent.keyCode is still supported so we can safely use it.
        if (keyboardEvent.keyCode === _SpecialKeyCodes__WEBPACK_IMPORTED_MODULE_2__.SpecialKeyCodes.shift &&
            keyboardEvent.code === 'ShiftRight') {
            return _SpecialKeyCodes__WEBPACK_IMPORTED_MODULE_2__.SpecialKeyCodes.rightShift;
        }
        else if (keyboardEvent.keyCode === _SpecialKeyCodes__WEBPACK_IMPORTED_MODULE_2__.SpecialKeyCodes.control &&
            keyboardEvent.code === 'ControlRight') {
            return _SpecialKeyCodes__WEBPACK_IMPORTED_MODULE_2__.SpecialKeyCodes.rightControl;
        }
        else if (keyboardEvent.keyCode === _SpecialKeyCodes__WEBPACK_IMPORTED_MODULE_2__.SpecialKeyCodes.alt &&
            keyboardEvent.code === 'AltRight') {
            return _SpecialKeyCodes__WEBPACK_IMPORTED_MODULE_2__.SpecialKeyCodes.rightAlt;
        }
        else {
            return keyboardEvent.keyCode;
        }
    }
    /**
     * Browser keys do not have a charCode so we only need to test keyCode.
     * @param keyCode - the browser keycode number
     */
    isKeyCodeBrowserKey(keyCode) {
        // Function keys or tab key are considered "browser keys" that we may wish to suppress by preventing them being process by browser.
        return (keyCode >= 112 && keyCode <= 123) || keyCode === 9;
    }
}


/***/ }),

/***/ "./src/Inputs/LockedMouseEvents.ts":
/*!*****************************************!*\
  !*** ./src/Inputs/LockedMouseEvents.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_110834__) => {

__nested_webpack_require_110834__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_110834__.d(__webpack_exports__, {
/* harmony export */   "LockedMouseEvents": () => (/* binding */ LockedMouseEvents)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_110834__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _Util_EventListenerTracker__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_110834__(/*! ../Util/EventListenerTracker */ "./src/Util/EventListenerTracker.ts");
// Copyright Epic Games, Inc. All Rights Reserved.


/**
 * Handle the mouse locked events
 */
class LockedMouseEvents {
    /**
     * @param videoElementProvider - Video Player instance
     * @param mouseController - Mouse controller instance
     * @param activeKeysProvider - Active keys provider instance
     * @param playerStyleAttributesProvider - Player style attributes instance
     */
    constructor(videoElementProvider, mouseController, activeKeysProvider) {
        this.x = 0;
        this.y = 0;
        this.updateMouseMovePositionEvent = (mouseEvent) => {
            this.updateMouseMovePosition(mouseEvent);
        };
        // Utility for keeping track of event handlers and unregistering them
        this.mouseEventListenerTracker = new _Util_EventListenerTracker__WEBPACK_IMPORTED_MODULE_0__.EventListenerTracker();
        this.videoElementProvider = videoElementProvider;
        this.mouseController = mouseController;
        this.activeKeysProvider = activeKeysProvider;
        const videoElementParent = this.videoElementProvider.getVideoParentElement();
        this.x = videoElementParent.getBoundingClientRect().width / 2;
        this.y = videoElementParent.getBoundingClientRect().height / 2;
        this.coord =
            this.mouseController.coordinateConverter.normalizeAndQuantizeUnsigned(this.x, this.y);
    }
    /**
     * Unregisters all event handlers
     */
    unregisterMouseEvents() {
        this.mouseEventListenerTracker.unregisterAll();
    }
    /**
     * Handle when the locked state Changed
     */
    lockStateChange() {
        const videoElementParent = this.videoElementProvider.getVideoParentElement();
        const toStreamerHandlers = this.mouseController.toStreamerMessagesProvider.toStreamerHandlers;
        if (document.pointerLockElement === videoElementParent ||
            document.mozPointerLockElement === videoElementParent) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), 'Pointer locked', 6);
            document.addEventListener('mousemove', this.updateMouseMovePositionEvent, false);
            this.mouseEventListenerTracker.addUnregisterCallback(() => document.removeEventListener('mousemove', this.updateMouseMovePositionEvent, false));
        }
        else {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), 'The pointer lock status is now unlocked', 6);
            // !a new arrow function must not be used here as it will be counted as a new function that cannot be removed
            document.removeEventListener('mousemove', this.updateMouseMovePositionEvent, false);
            // If mouse loses focus, send a key up for all of the currently held-down keys
            // This is necessary as when the mouse loses focus, the windows stops listening for events and as such
            // the keyup listener won't get fired
            let activeKeys = this.activeKeysProvider.getActiveKeys();
            const setKeys = new Set(activeKeys);
            const newKeysIterable = [];
            setKeys.forEach((setKey) => {
                newKeysIterable[setKey];
            });
            newKeysIterable.forEach((uniqueKeycode) => {
                toStreamerHandlers.get('KeyUp')([uniqueKeycode]);
            });
            // Reset the active keys back to nothing
            activeKeys = [];
        }
    }
    /**
     * Handle the mouse move event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    updateMouseMovePosition(mouseEvent) {
        if (!this.videoElementProvider.isVideoReady()) {
            return;
        }
        const toStreamerHandlers = this.mouseController.toStreamerMessagesProvider.toStreamerHandlers;
        const styleWidth = this.videoElementProvider.getVideoParentElement().clientWidth;
        const styleHeight = this.videoElementProvider.getVideoParentElement().clientHeight;
        this.x += mouseEvent.movementX;
        this.y += mouseEvent.movementY;
        if (this.x > styleWidth) {
            this.x -= styleWidth;
        }
        if (this.y > styleHeight) {
            this.y -= styleHeight;
        }
        if (this.x < 0) {
            this.x = styleWidth + this.x;
        }
        if (this.y < 0) {
            this.y = styleHeight - this.y;
        }
        this.coord =
            this.mouseController.coordinateConverter.normalizeAndQuantizeUnsigned(this.x, this.y);
        const delta = this.mouseController.coordinateConverter.normalizeAndQuantizeSigned(mouseEvent.movementX, mouseEvent.movementY);
        toStreamerHandlers.get('MouseMove')([
            this.coord.x,
            this.coord.y,
            delta.x,
            delta.y
        ]);
    }
    /**
     * Handle the mouse Down event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    handleMouseDown(mouseEvent) {
        if (!this.videoElementProvider.isVideoReady()) {
            return;
        }
        const toStreamerHandlers = this.mouseController.toStreamerMessagesProvider.toStreamerHandlers;
        toStreamerHandlers.get('MouseDown')([
            mouseEvent.button,
            // We use the store value of this.coord as opposed to the mouseEvent.x/y as the mouseEvent location
            // uses the system cursor location which hasn't moved
            this.coord.x,
            this.coord.y
        ]);
    }
    /**
     * Handle the mouse Up event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    handleMouseUp(mouseEvent) {
        if (!this.videoElementProvider.isVideoReady()) {
            return;
        }
        const toStreamerHandlers = this.mouseController.toStreamerMessagesProvider.toStreamerHandlers;
        toStreamerHandlers.get('MouseUp')([
            mouseEvent.button,
            // We use the store value of this.coord as opposed to the mouseEvent.x/y as the mouseEvent location
            // uses the system cursor location which hasn't moved
            this.coord.x,
            this.coord.y
        ]);
    }
    /**
     * Handle the mouse wheel event, sends the mouse wheel data to the UE Instance
     * @param wheelEvent - Mouse Event
     */
    handleMouseWheel(wheelEvent) {
        if (!this.videoElementProvider.isVideoReady()) {
            return;
        }
        const toStreamerHandlers = this.mouseController.toStreamerMessagesProvider.toStreamerHandlers;
        toStreamerHandlers.get('MouseWheel')([
            wheelEvent.wheelDelta,
            // We use the store value of this.coord as opposed to the mouseEvent.x/y as the mouseEvent location
            // uses the system cursor location which hasn't moved
            this.coord.x,
            this.coord.y
        ]);
    }
    /**
     * Handle the mouse double click event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    handleMouseDouble(mouseEvent) {
        if (!this.videoElementProvider.isVideoReady()) {
            return;
        }
        const toStreamerHandlers = this.mouseController.toStreamerMessagesProvider.toStreamerHandlers;
        toStreamerHandlers.get('MouseDouble')([
            mouseEvent.button,
            // We use the store value of this.coord as opposed to the mouseEvent.x/y as the mouseEvent location
            // uses the system cursor location which hasn't moved
            this.coord.x,
            this.coord.y
        ]);
    }
    /**
     * Handle the press mouse buttons event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    handlePressMouseButtons(mouseEvent) {
        if (!this.videoElementProvider.isVideoReady()) {
            return;
        }
        this.mouseController.pressMouseButtons(mouseEvent.buttons, this.x, this.y);
    }
    /**
     * Handle the release mouse buttons event, sends the mouse data to the UE Instance
     * @param mouseEvent - Mouse Event
     */
    handleReleaseMouseButtons(mouseEvent) {
        if (!this.videoElementProvider.isVideoReady()) {
            return;
        }
        this.mouseController.releaseMouseButtons(mouseEvent.buttons, this.x, this.y);
    }
}


/***/ }),

/***/ "./src/Inputs/MouseButtons.ts":
/*!************************************!*\
  !*** ./src/Inputs/MouseButtons.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_120136__) => {

__nested_webpack_require_120136__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_120136__.d(__webpack_exports__, {
/* harmony export */   "MouseButton": () => (/* binding */ MouseButton),
/* harmony export */   "MouseButtonsMask": () => (/* binding */ MouseButtonsMask)
/* harmony export */ });
// Copyright Epic Games, Inc. All Rights Reserved.
/**
 * Mouse Button Data
 * {@link https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button}
 */
class MouseButton {
}
MouseButton.mainButton = 0; // Left button.
MouseButton.auxiliaryButton = 1; // Wheel button.
MouseButton.secondaryButton = 2; // Right button.
MouseButton.fourthButton = 3; // Browser Back button.
MouseButton.fifthButton = 4; // Browser Forward button.
/**
 * Mouse Button Mask Data
 * {@link https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons}
 */
class MouseButtonsMask {
}
MouseButtonsMask.primaryButton = 1; // Left button.
MouseButtonsMask.secondaryButton = 2; // Right button.
MouseButtonsMask.auxiliaryButton = 4; // Wheel button.
MouseButtonsMask.fourthButton = 8; // Browser Back button.
MouseButtonsMask.fifthButton = 16; // Browser Forward button.


/***/ }),

/***/ "./src/Inputs/MouseController.ts":
/*!***************************************!*\
  !*** ./src/Inputs/MouseController.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_121575__) => {

__nested_webpack_require_121575__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_121575__.d(__webpack_exports__, {
/* harmony export */   "MouseController": () => (/* binding */ MouseController)
/* harmony export */ });
/* harmony import */ var _MouseButtons__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_121575__(/*! ./MouseButtons */ "./src/Inputs/MouseButtons.ts");
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_121575__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _LockedMouseEvents__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_121575__(/*! ./LockedMouseEvents */ "./src/Inputs/LockedMouseEvents.ts");
/* harmony import */ var _HoveringMouseEvents__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_121575__(/*! ./HoveringMouseEvents */ "./src/Inputs/HoveringMouseEvents.ts");
/* harmony import */ var _Util_EventListenerTracker__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_121575__(/*! ../Util/EventListenerTracker */ "./src/Util/EventListenerTracker.ts");
// Copyright Epic Games, Inc. All Rights Reserved.





/**
 * Handles the Mouse Inputs for the document
 */
class MouseController {
    /**
     * @param toStreamerMessagesProvider - Stream message instance
     * @param videoElementProvider - Video Player instance
     * @param normalizeAndQuantize - A normalize and quantize instance
     */
    constructor(toStreamerMessagesProvider, videoElementProvider, coordinateConverter, activeKeysProvider) {
        // Utility for keeping track of event handlers and unregistering them
        this.mouseEventListenerTracker = new _Util_EventListenerTracker__WEBPACK_IMPORTED_MODULE_0__.EventListenerTracker();
        this.toStreamerMessagesProvider = toStreamerMessagesProvider;
        this.coordinateConverter = coordinateConverter;
        this.videoElementProvider = videoElementProvider;
        this.activeKeysProvider = activeKeysProvider;
        this.registerMouseEnterAndLeaveEvents();
    }
    /**
     * Clears all the click events on the current video element parent div
     */
    unregisterMouseEvents() {
        this.mouseEventListenerTracker.unregisterAll();
    }
    /**
     * Register a locked mouse class
     * @param mouseController - a mouse controller instance
     * @param playerStyleAttributesProvider - a player style attributes instance
     */
    registerLockedMouseEvents(mouseController) {
        const videoElementParent = this.videoElementProvider.getVideoParentElement();
        const lockedMouseEvents = new _LockedMouseEvents__WEBPACK_IMPORTED_MODULE_1__.LockedMouseEvents(this.videoElementProvider, mouseController, this.activeKeysProvider);
        videoElementParent.requestPointerLock =
            videoElementParent.requestPointerLock ||
                videoElementParent.mozRequestPointerLock;
        document.exitPointerLock =
            document.exitPointerLock || document.mozExitPointerLock;
        // minor hack to alleviate ios not supporting pointerlock
        if (videoElementParent.requestPointerLock) {
            const onclick = () => {
                videoElementParent.requestPointerLock();
            };
            videoElementParent.addEventListener('click', onclick);
            this.mouseEventListenerTracker.addUnregisterCallback(() => videoElementParent.removeEventListener('click', onclick));
        }
        const lockStateChangeListener = () => lockedMouseEvents.lockStateChange();
        document.addEventListener('pointerlockchange', lockStateChangeListener, false);
        document.addEventListener('mozpointerlockchange', lockStateChangeListener, false);
        this.mouseEventListenerTracker.addUnregisterCallback(() => document.removeEventListener('pointerlockchange', lockStateChangeListener, false));
        this.mouseEventListenerTracker.addUnregisterCallback(() => document.removeEventListener('mozpointerlockchange', lockStateChangeListener, false));
        const onmousedown = (mouseEvent) => lockedMouseEvents.handleMouseDown(mouseEvent);
        const onmouseup = (mouseEvent) => lockedMouseEvents.handleMouseUp(mouseEvent);
        const onwheel = (wheelEvent) => lockedMouseEvents.handleMouseWheel(wheelEvent);
        const ondblclick = (mouseEvent) => lockedMouseEvents.handleMouseDouble(mouseEvent);
        videoElementParent.addEventListener('mousedown', onmousedown);
        videoElementParent.addEventListener('mouseup', onmouseup);
        videoElementParent.addEventListener('wheel', onwheel);
        videoElementParent.addEventListener('dblclick', ondblclick);
        this.mouseEventListenerTracker.addUnregisterCallback(() => videoElementParent.removeEventListener('mousedown', onmousedown));
        this.mouseEventListenerTracker.addUnregisterCallback(() => videoElementParent.removeEventListener('mouseup', onmouseup));
        this.mouseEventListenerTracker.addUnregisterCallback(() => videoElementParent.removeEventListener('wheel', onwheel));
        this.mouseEventListenerTracker.addUnregisterCallback(() => videoElementParent.removeEventListener('dblclick', ondblclick));
        this.mouseEventListenerTracker.addUnregisterCallback(() => lockedMouseEvents.unregisterMouseEvents());
        this.mouseEventListenerTracker.addUnregisterCallback(() => {
            if (document.exitPointerLock &&
                (document.pointerLockElement === videoElementParent ||
                    document.mozPointerLockElement === videoElementParent)) {
                document.exitPointerLock();
            }
        });
    }
    /**
     * Register a hovering mouse class
     * @param mouseController - A mouse controller object
     */
    registerHoveringMouseEvents(mouseController) {
        const videoElementParent = this.videoElementProvider.getVideoParentElement();
        const hoveringMouseEvents = new _HoveringMouseEvents__WEBPACK_IMPORTED_MODULE_2__.HoveringMouseEvents(mouseController);
        const onmousemove = (mouseEvent) => hoveringMouseEvents.updateMouseMovePosition(mouseEvent);
        const onmousedown = (mouseEvent) => hoveringMouseEvents.handleMouseDown(mouseEvent);
        const onmouseup = (mouseEvent) => hoveringMouseEvents.handleMouseUp(mouseEvent);
        const oncontextmenu = (mouseEvent) => hoveringMouseEvents.handleContextMenu(mouseEvent);
        const onwheel = (wheelEvent) => hoveringMouseEvents.handleMouseWheel(wheelEvent);
        const ondblclick = (mouseEvent) => hoveringMouseEvents.handleMouseDouble(mouseEvent);
        videoElementParent.addEventListener('mousemove', onmousemove);
        videoElementParent.addEventListener('mousedown', onmousedown);
        videoElementParent.addEventListener('mouseup', onmouseup);
        videoElementParent.addEventListener('contextmenu', oncontextmenu);
        videoElementParent.addEventListener('wheel', onwheel);
        videoElementParent.addEventListener('dblclick', ondblclick);
        this.mouseEventListenerTracker.addUnregisterCallback(() => videoElementParent.removeEventListener('mousemove', onmousemove));
        this.mouseEventListenerTracker.addUnregisterCallback(() => videoElementParent.removeEventListener('mousedown', onmousedown));
        this.mouseEventListenerTracker.addUnregisterCallback(() => videoElementParent.removeEventListener('mouseup', onmouseup));
        this.mouseEventListenerTracker.addUnregisterCallback(() => videoElementParent.removeEventListener('contextmenu', oncontextmenu));
        this.mouseEventListenerTracker.addUnregisterCallback(() => videoElementParent.removeEventListener('wheel', onwheel));
        this.mouseEventListenerTracker.addUnregisterCallback(() => videoElementParent.removeEventListener('dblclick', ondblclick));
        this.mouseEventListenerTracker.addUnregisterCallback(() => hoveringMouseEvents.unregisterMouseEvents());
    }
    /**
     * Set the mouse enter and mouse leave events
     */
    registerMouseEnterAndLeaveEvents() {
        const videoElementParent = this.videoElementProvider.getVideoParentElement();
        // Handle when the Mouse has entered the element
        const onmouseenter = (event) => {
            if (!this.videoElementProvider.isVideoReady()) {
                return;
            }
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_3__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_3__.Logger.GetStackTrace(), 'Mouse Entered', 6);
            this.sendMouseEnter();
            this.pressMouseButtons(event.buttons, event.x, event.y);
        };
        // Handles when the mouse has left the element
        const onmouseleave = (event) => {
            if (!this.videoElementProvider.isVideoReady()) {
                return;
            }
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_3__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_3__.Logger.GetStackTrace(), 'Mouse Left', 6);
            this.sendMouseLeave();
            this.releaseMouseButtons(event.buttons, event.x, event.y);
        };
        videoElementParent.addEventListener('mouseenter', onmouseenter);
        videoElementParent.addEventListener('mouseleave', onmouseleave);
        this.mouseEventListenerTracker.addUnregisterCallback(() => videoElementParent.removeEventListener('mouseenter', onmouseenter));
        this.mouseEventListenerTracker.addUnregisterCallback(() => videoElementParent.removeEventListener('mouseleave', onmouseleave));
    }
    /**
     * Handle when a mouse button is released
     * @param buttons - Mouse Button
     * @param X - Mouse pointer X coordinate
     * @param Y - Mouse pointer Y coordinate
     */
    releaseMouseButtons(buttons, X, Y) {
        const coord = this.coordinateConverter.normalizeAndQuantizeUnsigned(X, Y);
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_4__.MouseButtonsMask.primaryButton) {
            this.sendMouseUp(_MouseButtons__WEBPACK_IMPORTED_MODULE_4__.MouseButton.mainButton, coord.x, coord.y);
        }
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_4__.MouseButtonsMask.secondaryButton) {
            this.sendMouseUp(_MouseButtons__WEBPACK_IMPORTED_MODULE_4__.MouseButton.secondaryButton, coord.x, coord.y);
        }
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_4__.MouseButtonsMask.auxiliaryButton) {
            this.sendMouseUp(_MouseButtons__WEBPACK_IMPORTED_MODULE_4__.MouseButton.auxiliaryButton, coord.x, coord.y);
        }
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_4__.MouseButtonsMask.fourthButton) {
            this.sendMouseUp(_MouseButtons__WEBPACK_IMPORTED_MODULE_4__.MouseButton.fourthButton, coord.x, coord.y);
        }
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_4__.MouseButtonsMask.fifthButton) {
            this.sendMouseUp(_MouseButtons__WEBPACK_IMPORTED_MODULE_4__.MouseButton.fifthButton, coord.x, coord.y);
        }
    }
    /**
     * Handle when a mouse button is pressed
     * @param buttons - Mouse Button
     * @param X - Mouse pointer X coordinate
     * @param Y - Mouse pointer Y coordinate
     */
    pressMouseButtons(buttons, X, Y) {
        if (!this.videoElementProvider.isVideoReady()) {
            return;
        }
        const coord = this.coordinateConverter.normalizeAndQuantizeUnsigned(X, Y);
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_4__.MouseButtonsMask.primaryButton) {
            this.sendMouseDown(_MouseButtons__WEBPACK_IMPORTED_MODULE_4__.MouseButton.mainButton, coord.x, coord.y);
        }
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_4__.MouseButtonsMask.secondaryButton) {
            this.sendMouseDown(_MouseButtons__WEBPACK_IMPORTED_MODULE_4__.MouseButton.secondaryButton, coord.x, coord.y);
        }
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_4__.MouseButtonsMask.auxiliaryButton) {
            this.sendMouseDown(_MouseButtons__WEBPACK_IMPORTED_MODULE_4__.MouseButton.auxiliaryButton, coord.x, coord.y);
        }
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_4__.MouseButtonsMask.fourthButton) {
            this.sendMouseDown(_MouseButtons__WEBPACK_IMPORTED_MODULE_4__.MouseButton.fourthButton, coord.x, coord.y);
        }
        if (buttons & _MouseButtons__WEBPACK_IMPORTED_MODULE_4__.MouseButtonsMask.fifthButton) {
            this.sendMouseDown(_MouseButtons__WEBPACK_IMPORTED_MODULE_4__.MouseButton.fifthButton, coord.x, coord.y);
        }
    }
    /**
     * Handles mouse enter
     */
    sendMouseEnter() {
        if (!this.videoElementProvider.isVideoReady()) {
            return;
        }
        const toStreamerHandlers = this.toStreamerMessagesProvider.toStreamerHandlers;
        toStreamerHandlers.get('MouseEnter')();
    }
    /**
     * Handles mouse Leave
     */
    sendMouseLeave() {
        if (!this.videoElementProvider.isVideoReady()) {
            return;
        }
        const toStreamerHandlers = this.toStreamerMessagesProvider.toStreamerHandlers;
        toStreamerHandlers.get('MouseLeave')();
    }
    /**
     * Handles when a mouse button is pressed down
     * @param button - Mouse Button Pressed
     * @param X  - Mouse X Coordinate
     * @param Y  - Mouse Y Coordinate
     */
    sendMouseDown(button, X, Y) {
        if (!this.videoElementProvider.isVideoReady()) {
            return;
        }
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_3__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_3__.Logger.GetStackTrace(), `mouse button ${button} down at (${X}, ${Y})`, 6);
        const toStreamerHandlers = this.toStreamerMessagesProvider.toStreamerHandlers;
        toStreamerHandlers.get('MouseDown')([button, X, Y]);
    }
    /**
     * Handles when a mouse button is pressed up
     * @param button - Mouse Button Pressed
     * @param X  - Mouse X Coordinate
     * @param Y  - Mouse Y Coordinate
     */
    sendMouseUp(button, X, Y) {
        if (!this.videoElementProvider.isVideoReady()) {
            return;
        }
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_3__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_3__.Logger.GetStackTrace(), `mouse button ${button} up at (${X}, ${Y})`, 6);
        const coord = this.coordinateConverter.normalizeAndQuantizeUnsigned(X, Y);
        const toStreamerHandlers = this.toStreamerMessagesProvider.toStreamerHandlers;
        toStreamerHandlers.get('MouseUp')([button, coord.x, coord.y]);
    }
}


/***/ }),

/***/ "./src/Inputs/SpecialKeyCodes.ts":
/*!***************************************!*\
  !*** ./src/Inputs/SpecialKeyCodes.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_136371__) => {

__nested_webpack_require_136371__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_136371__.d(__webpack_exports__, {
/* harmony export */   "SpecialKeyCodes": () => (/* binding */ SpecialKeyCodes)
/* harmony export */ });
// Copyright Epic Games, Inc. All Rights Reserved.
/**
 * Registers the Special Key codes
 *  Must be kept in sync with JavaScriptKeyCodeToFKey C++ array.
 * The index of the entry in the array is the special key code given below.
 */
class SpecialKeyCodes {
}
SpecialKeyCodes.backSpace = 8;
SpecialKeyCodes.shift = 16;
SpecialKeyCodes.control = 17;
SpecialKeyCodes.alt = 18;
SpecialKeyCodes.rightShift = 253;
SpecialKeyCodes.rightControl = 254;
SpecialKeyCodes.rightAlt = 255;


/***/ }),

/***/ "./src/Inputs/TouchController.ts":
/*!***************************************!*\
  !*** ./src/Inputs/TouchController.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_137348__) => {

__nested_webpack_require_137348__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_137348__.d(__webpack_exports__, {
/* harmony export */   "TouchController": () => (/* binding */ TouchController)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_137348__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _Util_EventListenerTracker__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_137348__(/*! ../Util/EventListenerTracker */ "./src/Util/EventListenerTracker.ts");
// Copyright Epic Games, Inc. All Rights Reserved.


/**
 * Handles the Touch input Events
 */
class TouchController {
    /**
     * @param toStreamerMessagesProvider - Stream message instance
     * @param videoElementProvider - Video Player instance
     * @param coordinateConverter - A coordinate converter instance
     */
    constructor(toStreamerMessagesProvider, videoElementProvider, coordinateConverter) {
        this.fingers = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0];
        this.fingerIds = new Map();
        this.maxByteValue = 255;
        // Utility for keeping track of event handlers and unregistering them
        this.touchEventListenerTracker = new _Util_EventListenerTracker__WEBPACK_IMPORTED_MODULE_0__.EventListenerTracker();
        this.toStreamerMessagesProvider = toStreamerMessagesProvider;
        this.videoElementProvider = videoElementProvider;
        this.coordinateConverter = coordinateConverter;
        this.videoElementParent = videoElementProvider.getVideoElement();
        const ontouchstart = (ev) => this.onTouchStart(ev);
        const ontouchend = (ev) => this.onTouchEnd(ev);
        const ontouchmove = (ev) => this.onTouchMove(ev);
        this.videoElementParent.addEventListener('touchstart', ontouchstart, { passive: false });
        this.videoElementParent.addEventListener('touchend', ontouchend, { passive: false });
        this.videoElementParent.addEventListener('touchmove', ontouchmove, { passive: false });
        this.touchEventListenerTracker.addUnregisterCallback(() => this.videoElementParent.removeEventListener('touchstart', ontouchstart));
        this.touchEventListenerTracker.addUnregisterCallback(() => this.videoElementParent.removeEventListener('touchend', ontouchend));
        this.touchEventListenerTracker.addUnregisterCallback(() => this.videoElementParent.removeEventListener('touchmove', ontouchmove));
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), 'Touch Events Registered', 6);
        // is this strictly necessary?
        const preventOnTouchMove = (event) => {
            event.preventDefault();
        };
        document.addEventListener('touchmove', preventOnTouchMove, { passive: false });
        this.touchEventListenerTracker.addUnregisterCallback(() => document.removeEventListener('touchmove', preventOnTouchMove));
    }
    /**
     * Unregister all touch events
     */
    unregisterTouchEvents() {
        this.touchEventListenerTracker.unregisterAll();
    }
    /**
     * Remember a touch command
     * @param touch - the touch command
     */
    rememberTouch(touch) {
        const finger = this.fingers.pop();
        if (finger === undefined) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), 'exhausted touch identifiers', 6);
        }
        this.fingerIds.set(touch.identifier, finger);
    }
    /**
     * Forgets a touch command
     * @param touch - the touch command
     */
    forgetTouch(touch) {
        this.fingers.push(this.fingerIds.get(touch.identifier));
        // Sort array back into descending order. This means if finger '1' were to lift after finger '0', we would ensure that 0 will be the first index to pop
        this.fingers.sort(function (a, b) {
            return b - a;
        });
        this.fingerIds.delete(touch.identifier);
    }
    /**
     * When a touch event starts
     * @param touchEvent - the touch event being intercepted
     */
    onTouchStart(touchEvent) {
        if (!this.videoElementProvider.isVideoReady()) {
            return;
        }
        for (let t = 0; t < touchEvent.changedTouches.length; t++) {
            this.rememberTouch(touchEvent.changedTouches[t]);
        }
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), 'touch start', 6);
        this.emitTouchData('TouchStart', touchEvent.changedTouches);
        touchEvent.preventDefault();
    }
    /**
     * When a touch event ends
     * @param touchEvent - the touch event being intercepted
     */
    onTouchEnd(touchEvent) {
        if (!this.videoElementProvider.isVideoReady()) {
            return;
        }
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), 'touch end', 6);
        this.emitTouchData('TouchEnd', touchEvent.changedTouches);
        // Re-cycle unique identifiers previously assigned to each touch.
        for (let t = 0; t < touchEvent.changedTouches.length; t++) {
            this.forgetTouch(touchEvent.changedTouches[t]);
        }
        touchEvent.preventDefault();
    }
    /**
     * when a moving touch event occurs
     * @param touchEvent - the touch event being intercepted
     */
    onTouchMove(touchEvent) {
        if (!this.videoElementProvider.isVideoReady()) {
            return;
        }
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), 'touch move', 6);
        this.emitTouchData('TouchMove', touchEvent.touches);
        touchEvent.preventDefault();
    }
    emitTouchData(type, touches) {
        if (!this.videoElementProvider.isVideoReady()) {
            return;
        }
        const videoElementParent = this.videoElementProvider.getVideoParentElement();
        const toStreamerHandlers = this.toStreamerMessagesProvider.toStreamerHandlers;
        for (let t = 0; t < touches.length; t++) {
            const numTouches = 1; // the number of touches to be sent this message
            const touch = touches[t];
            const x = touch.clientX - videoElementParent.offsetLeft;
            const y = touch.clientY - videoElementParent.offsetTop;
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), `F${this.fingerIds.get(touch.identifier)}=(${x}, ${y})`, 6);
            const coord = this.coordinateConverter.normalizeAndQuantizeUnsigned(x, y);
            switch (type) {
                case 'TouchStart':
                    toStreamerHandlers.get('TouchStart')([
                        numTouches,
                        coord.x,
                        coord.y,
                        this.fingerIds.get(touch.identifier),
                        this.maxByteValue * touch.force,
                        coord.inRange ? 1 : 0
                    ]);
                    break;
                case 'TouchEnd':
                    toStreamerHandlers.get('TouchEnd')([
                        numTouches,
                        coord.x,
                        coord.y,
                        this.fingerIds.get(touch.identifier),
                        this.maxByteValue * touch.force,
                        coord.inRange ? 1 : 0
                    ]);
                    break;
                case 'TouchMove':
                    toStreamerHandlers.get('TouchMove')([
                        numTouches,
                        coord.x,
                        coord.y,
                        this.fingerIds.get(touch.identifier),
                        this.maxByteValue * touch.force,
                        coord.inRange ? 1 : 0
                    ]);
                    break;
            }
        }
    }
}


/***/ }),

/***/ "./src/Inputs/XRGamepadController.ts":
/*!*******************************************!*\
  !*** ./src/Inputs/XRGamepadController.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_145771__) => {

__nested_webpack_require_145771__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_145771__.d(__webpack_exports__, {
/* harmony export */   "XRGamepadController": () => (/* binding */ XRGamepadController)
/* harmony export */ });
/* harmony import */ var _Util_WebXRUtils__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_145771__(/*! ../Util/WebXRUtils */ "./src/Util/WebXRUtils.ts");
// Copyright Epic Games, Inc. All Rights Reserved.

/**
 * The class that handles the functionality of xrgamepads and controllers
 */
class XRGamepadController {
    /**
     * @param toStreamerMessagesProvider - Stream message instance
     */
    constructor(toStreamerMessagesProvider) {
        this.toStreamerMessagesProvider = toStreamerMessagesProvider;
        this.controllers = [];
    }
    updateStatus(source, frame, refSpace) {
        if (source.gamepad) {
            const gamepadPose = frame.getPose(source.gripSpace, refSpace);
            if (!gamepadPose) {
                return;
            }
            let system = 0;
            if (source.profiles.includes('htc-vive')) {
                system = 1;
            }
            else if (source.profiles.includes('oculus-touch')) {
                system = 2;
            }
            // TODO (william.belcher): Add other profiles (Quest, Microsoft Mixed Reality, etc)
            this.toStreamerMessagesProvider.toStreamerHandlers.get('XRSystem')([
                system
            ]);
            // Default: AnyHand (2)
            let handedness = 2;
            switch (source.handedness) {
                case 'left':
                    handedness = 0;
                    break;
                case 'right':
                    handedness = 1;
                    break;
            }
            // Send controller transform
            const matrix = gamepadPose.transform.matrix;
            const mat = [];
            for (let i = 0; i < 16; i++) {
                mat[i] = new Float32Array([matrix[i]])[0];
            }
            // prettier-ignore
            this.toStreamerMessagesProvider.toStreamerHandlers.get('XRControllerTransform')([
                mat[0], mat[4], mat[8], mat[12],
                mat[1], mat[5], mat[9], mat[13],
                mat[2], mat[6], mat[10], mat[14],
                mat[3], mat[7], mat[11], mat[15],
                handedness
            ]);
            // Handle controller buttons and axes
            if (this.controllers[handedness] === undefined) {
                this.controllers[handedness] = {
                    prevState: undefined,
                    currentState: undefined,
                    id: undefined
                };
                this.controllers[handedness].prevState =
                    _Util_WebXRUtils__WEBPACK_IMPORTED_MODULE_0__.WebXRUtils.deepCopyGamepad(source.gamepad);
            }
            this.controllers[handedness].currentState =
                _Util_WebXRUtils__WEBPACK_IMPORTED_MODULE_0__.WebXRUtils.deepCopyGamepad(source.gamepad);
            const controller = this.controllers[handedness];
            const currState = controller.currentState;
            const prevState = controller.prevState;
            // Iterate over buttons
            for (let i = 0; i < currState.buttons.length; i++) {
                const currButton = currState.buttons[i];
                const prevButton = prevState.buttons[i];
                if (currButton.pressed) {
                    // press
                    this.toStreamerMessagesProvider.toStreamerHandlers.get('XRButtonPressed')([handedness, i, prevButton.pressed ? 1 : 0]);
                }
                else if (!currButton.pressed && prevButton.pressed) {
                    this.toStreamerMessagesProvider.toStreamerHandlers.get('XRButtonReleased')([handedness, i, 0]);
                }
                if (currButton.touched && !currButton.pressed) {
                    // press
                    this.toStreamerMessagesProvider.toStreamerHandlers.get('XRButtonPressed')([handedness, 3, prevButton.touched ? 1 : 0]);
                }
                else if (!currButton.touched && prevButton.touched) {
                    this.toStreamerMessagesProvider.toStreamerHandlers.get('XRButtonReleased')([handedness, 3, 0]);
                }
            }
            // Iterate over gamepad axes
            for (let i = 0; i < currState.axes.length; i++) {
                this.toStreamerMessagesProvider.toStreamerHandlers.get('XRAnalog')([handedness, i, currState.axes[i]]);
            }
            this.controllers[handedness].prevState = currState;
        }
    }
}


/***/ }),

/***/ "./src/Logger/Logger.ts":
/*!******************************!*\
  !*** ./src/Logger/Logger.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_150702__) => {

__nested_webpack_require_150702__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_150702__.d(__webpack_exports__, {
/* harmony export */   "Logger": () => (/* binding */ Logger)
/* harmony export */ });
// Copyright Epic Games, Inc. All Rights Reserved.
class Logger {
    /**
     * Captures the stack and returns it
     * @returns the current stack
     */
    static GetStackTrace() {
        const error = new Error();
        let formattedStack = 'No Stack Available for this browser';
        // format the error
        if (error.stack) {
            formattedStack = error.stack.toString().replace(/Error/g, '');
        }
        return formattedStack;
    }
    /**
     * Set the log verbosity level
     */
    static SetLoggerVerbosity(verboseLogLevel) {
        if (this.verboseLogLevel != null) {
            this.verboseLogLevel = verboseLogLevel;
        }
    }
    /**
     * The standard logging output
     * @param stack - the stack trace
     * @param message - the message to be logged
     * @param verbosity - the verbosity level
     */
    static Log(stack, message, verbosity) {
        if (verbosity > this.verboseLogLevel) {
            return;
        }
        const returnString = `Level: Log\nMsg: ${message}\nCaller: ${stack}`;
        console.log(returnString);
    }
    /**
     * The standard logging output
     * @param stack - the stack trace
     * @param message - the message to be logged
     * @param verbosity - the verbosity level
     */
    static Info(stack, message, verbosity) {
        if (verbosity > this.verboseLogLevel) {
            return;
        }
        const returnString = `Level: Info\nMsg: ${message}`;
        console.info(returnString);
    }
    /**
     * The standard logging output
     * @param stack - the stack trace
     * @param message - the message to be logged
     */
    static Error(stack, message) {
        const returnString = `Level: Error\nMsg: ${message}\nCaller: ${stack}`;
        console.error(returnString);
    }
    /**
     * The standard logging output
     * @param stack - the stack trace
     * @param message - the message to be logged
     */
    static Warning(stack, message) {
        const returnString = `Level: Warning\nCaller: ${stack}\nMsg: ${message}`;
        console.warn(returnString);
    }
}
Logger.verboseLogLevel = 5;


/***/ }),

/***/ "./src/PeerConnectionController/AggregatedStats.ts":
/*!*********************************************************!*\
  !*** ./src/PeerConnectionController/AggregatedStats.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_153447__) => {

__nested_webpack_require_153447__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_153447__.d(__webpack_exports__, {
/* harmony export */   "AggregatedStats": () => (/* binding */ AggregatedStats)
/* harmony export */ });
/* harmony import */ var _InboundRTPStats__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_153447__(/*! ./InboundRTPStats */ "./src/PeerConnectionController/InboundRTPStats.ts");
/* harmony import */ var _DataChannelStats__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_153447__(/*! ./DataChannelStats */ "./src/PeerConnectionController/DataChannelStats.ts");
/* harmony import */ var _CandidateStat__WEBPACK_IMPORTED_MODULE_7__ = __nested_webpack_require_153447__(/*! ./CandidateStat */ "./src/PeerConnectionController/CandidateStat.ts");
/* harmony import */ var _CandidatePairStats__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_153447__(/*! ./CandidatePairStats */ "./src/PeerConnectionController/CandidatePairStats.ts");
/* harmony import */ var _OutBoundRTPStats__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_153447__(/*! ./OutBoundRTPStats */ "./src/PeerConnectionController/OutBoundRTPStats.ts");
/* harmony import */ var _SessionStats__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_153447__(/*! ./SessionStats */ "./src/PeerConnectionController/SessionStats.ts");
/* harmony import */ var _StreamStats__WEBPACK_IMPORTED_MODULE_5__ = __nested_webpack_require_153447__(/*! ./StreamStats */ "./src/PeerConnectionController/StreamStats.ts");
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_6__ = __nested_webpack_require_153447__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
// Copyright Epic Games, Inc. All Rights Reserved.








class AggregatedStats {
    constructor() {
        this.inboundVideoStats = new _InboundRTPStats__WEBPACK_IMPORTED_MODULE_0__.InboundVideoStats();
        this.inboundAudioStats = new _InboundRTPStats__WEBPACK_IMPORTED_MODULE_0__.InboundAudioStats();
        this.candidatePair = new _CandidatePairStats__WEBPACK_IMPORTED_MODULE_1__.CandidatePairStats();
        this.DataChannelStats = new _DataChannelStats__WEBPACK_IMPORTED_MODULE_2__.DataChannelStats();
        this.outBoundVideoStats = new _OutBoundRTPStats__WEBPACK_IMPORTED_MODULE_3__.OutBoundVideoStats();
        this.sessionStats = new _SessionStats__WEBPACK_IMPORTED_MODULE_4__.SessionStats();
        this.streamStats = new _StreamStats__WEBPACK_IMPORTED_MODULE_5__.StreamStats();
        this.codecs = new Map();
    }
    /**
     * Gather all the information from the RTC Peer Connection Report
     * @param rtcStatsReport - RTC Stats Report
     */
    processStats(rtcStatsReport) {
        this.localCandidates = new Array();
        this.remoteCandidates = new Array();
        rtcStatsReport.forEach((stat) => {
            const type = stat.type;
            switch (type) {
                case 'candidate-pair':
                    this.handleCandidatePair(stat);
                    break;
                case 'certificate':
                    break;
                case 'codec':
                    this.handleCodec(stat);
                    break;
                case 'data-channel':
                    this.handleDataChannel(stat);
                    break;
                case 'inbound-rtp':
                    this.handleInBoundRTP(stat);
                    break;
                case 'local-candidate':
                    this.handleLocalCandidate(stat);
                    break;
                case 'media-source':
                    break;
                case 'media-playout':
                    break;
                case 'outbound-rtp':
                    break;
                case 'peer-connection':
                    break;
                case 'remote-candidate':
                    this.handleRemoteCandidate(stat);
                    break;
                case 'remote-inbound-rtp':
                    break;
                case 'remote-outbound-rtp':
                    this.handleRemoteOutBound(stat);
                    break;
                case 'track':
                    this.handleTrack(stat);
                    break;
                case 'transport':
                    break;
                case 'stream':
                    this.handleStream(stat);
                    break;
                default:
                    _Logger_Logger__WEBPACK_IMPORTED_MODULE_6__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_6__.Logger.GetStackTrace(), 'unhandled Stat Type');
                    _Logger_Logger__WEBPACK_IMPORTED_MODULE_6__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_6__.Logger.GetStackTrace(), stat);
                    break;
            }
        });
    }
    /**
     * Process stream stats data from webrtc
     *
     * @param stat - the stats coming in from webrtc
     */
    handleStream(stat) {
        this.streamStats = stat;
    }
    /**
     * Process the Ice Candidate Pair Data
     * @param stat - the stats coming in from ice candidates
     */
    handleCandidatePair(stat) {
        this.candidatePair.bytesReceived = stat.bytesReceived;
        this.candidatePair.bytesSent = stat.bytesSent;
        this.candidatePair.localCandidateId = stat.localCandidateId;
        this.candidatePair.remoteCandidateId = stat.remoteCandidateId;
        this.candidatePair.nominated = stat.nominated;
        this.candidatePair.readable = stat.readable;
        this.candidatePair.selected = stat.selected;
        this.candidatePair.writable = stat.writable;
        this.candidatePair.state = stat.state;
        this.candidatePair.currentRoundTripTime = stat.currentRoundTripTime;
    }
    /**
     * Process the Data Channel Data
     * @param stat - the stats coming in from the data channel
     */
    handleDataChannel(stat) {
        this.DataChannelStats.bytesReceived = stat.bytesReceived;
        this.DataChannelStats.bytesSent = stat.bytesSent;
        this.DataChannelStats.dataChannelIdentifier =
            stat.dataChannelIdentifier;
        this.DataChannelStats.id = stat.id;
        this.DataChannelStats.label = stat.label;
        this.DataChannelStats.messagesReceived = stat.messagesReceived;
        this.DataChannelStats.messagesSent = stat.messagesSent;
        this.DataChannelStats.protocol = stat.protocol;
        this.DataChannelStats.state = stat.state;
        this.DataChannelStats.timestamp = stat.timestamp;
    }
    /**
     * Process the Local Ice Candidate Data
     * @param stat - local stats
     */
    handleLocalCandidate(stat) {
        const localCandidate = new _CandidateStat__WEBPACK_IMPORTED_MODULE_7__.CandidateStat();
        localCandidate.label = 'local-candidate';
        localCandidate.address = stat.address;
        localCandidate.port = stat.port;
        localCandidate.protocol = stat.protocol;
        localCandidate.candidateType = stat.candidateType;
        localCandidate.id = stat.id;
        this.localCandidates.push(localCandidate);
    }
    /**
     * Process the Remote Ice Candidate Data
     * @param stat - ice candidate stats
     */
    handleRemoteCandidate(stat) {
        const RemoteCandidate = new _CandidateStat__WEBPACK_IMPORTED_MODULE_7__.CandidateStat();
        RemoteCandidate.label = 'local-candidate';
        RemoteCandidate.address = stat.address;
        RemoteCandidate.port = stat.port;
        RemoteCandidate.protocol = stat.protocol;
        RemoteCandidate.id = stat.id;
        RemoteCandidate.candidateType = stat.candidateType;
        this.remoteCandidates.push(RemoteCandidate);
    }
    /**
     * Process the Inbound RTP Audio and Video Data
     * @param stat - inbound rtp stats
     */
    handleInBoundRTP(stat) {
        switch (stat.kind) {
            case 'video':
                // Need to convert to unknown first to remove an error around
                // InboundVideoStats having the bitrate member which isn't found on
                // the InboundRTPStats
                this.inboundVideoStats = stat;
                if (this.lastVideoStats != undefined) {
                    this.inboundVideoStats.bitrate =
                        (8 *
                            (this.inboundVideoStats.bytesReceived -
                                this.lastVideoStats.bytesReceived)) /
                            (this.inboundVideoStats.timestamp -
                                this.lastVideoStats.timestamp);
                    this.inboundVideoStats.bitrate = Math.floor(this.inboundVideoStats.bitrate);
                }
                this.lastVideoStats = Object.assign({}, this.inboundVideoStats);
                break;
            case 'audio':
                // Need to convert to unknown first to remove an error around
                // InboundAudioStats having the bitrate member which isn't found on
                // the InboundRTPStats
                this.inboundAudioStats = stat;
                if (this.lastAudioStats != undefined) {
                    this.inboundAudioStats.bitrate =
                        (8 *
                            (this.inboundAudioStats.bytesReceived -
                                this.lastAudioStats.bytesReceived)) /
                            (this.inboundAudioStats.timestamp -
                                this.lastAudioStats.timestamp);
                    this.inboundAudioStats.bitrate = Math.floor(this.inboundAudioStats.bitrate);
                }
                this.lastAudioStats = Object.assign({}, this.inboundAudioStats);
                break;
            default:
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_6__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_6__.Logger.GetStackTrace(), 'Kind is not handled');
                break;
        }
    }
    /**
     * Process the outbound RTP Audio and Video Data
     * @param stat - remote outbound stats
     */
    handleRemoteOutBound(stat) {
        switch (stat.kind) {
            case 'video':
                this.outBoundVideoStats.bytesSent = stat.bytesSent;
                this.outBoundVideoStats.id = stat.id;
                this.outBoundVideoStats.localId = stat.localId;
                this.outBoundVideoStats.packetsSent = stat.packetsSent;
                this.outBoundVideoStats.remoteTimestamp = stat.remoteTimestamp;
                this.outBoundVideoStats.timestamp = stat.timestamp;
                break;
            case 'audio':
                break;
            default:
                break;
        }
    }
    /**
     * Process the Inbound Video Track Data
     * @param stat - video track stats
     */
    handleTrack(stat) {
        // we only want to extract stats from the video track
        if (stat.type === 'track' &&
            (stat.trackIdentifier === 'video_label' || stat.kind === 'video')) {
            this.inboundVideoStats.framesDropped = stat.framesDropped;
            this.inboundVideoStats.framesReceived = stat.framesReceived;
            this.inboundVideoStats.frameHeight = stat.frameHeight;
            this.inboundVideoStats.frameWidth = stat.frameWidth;
        }
    }
    handleCodec(stat) {
        const codecId = stat.id;
        const codecType = `${stat.mimeType
            .replace('video/', '')
            .replace('audio/', '')}${stat.sdpFmtpLine ? ` ${stat.sdpFmtpLine}` : ''}`;
        this.codecs.set(codecId, codecType);
    }
    handleSessionStatistics(videoStartTime, inputController, videoEncoderAvgQP) {
        const deltaTime = Date.now() - videoStartTime;
        this.sessionStats.runTime = new Date(deltaTime)
            .toISOString()
            .substr(11, 8)
            .toString();
        const controlsStreamInput = inputController === null
            ? 'Not sent yet'
            : inputController
                ? 'true'
                : 'false';
        this.sessionStats.controlsStreamInput = controlsStreamInput;
        this.sessionStats.videoEncoderAvgQP = videoEncoderAvgQP;
    }
    /**
     * Check if a value coming in from our stats is actually a number
     * @param value - the number to be checked
     */
    isNumber(value) {
        return typeof value === 'number' && isFinite(value);
    }
}


/***/ }),

/***/ "./src/PeerConnectionController/CandidatePairStats.ts":
/*!************************************************************!*\
  !*** ./src/PeerConnectionController/CandidatePairStats.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_166124__) => {

__nested_webpack_require_166124__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_166124__.d(__webpack_exports__, {
/* harmony export */   "CandidatePairStats": () => (/* binding */ CandidatePairStats)
/* harmony export */ });
// Copyright Epic Games, Inc. All Rights Reserved.
/**
 * ICE Candidate Pair Stats collected from the RTC Stats Report
 */
class CandidatePairStats {
}


/***/ }),

/***/ "./src/PeerConnectionController/CandidateStat.ts":
/*!*******************************************************!*\
  !*** ./src/PeerConnectionController/CandidateStat.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_166836__) => {

__nested_webpack_require_166836__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_166836__.d(__webpack_exports__, {
/* harmony export */   "CandidateStat": () => (/* binding */ CandidateStat)
/* harmony export */ });
// Copyright Epic Games, Inc. All Rights Reserved.
/**
 * ICE Candidate Stat collected from the RTC Stats Report
 */
class CandidateStat {
}


/***/ }),

/***/ "./src/PeerConnectionController/DataChannelStats.ts":
/*!**********************************************************!*\
  !*** ./src/PeerConnectionController/DataChannelStats.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_167539__) => {

__nested_webpack_require_167539__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_167539__.d(__webpack_exports__, {
/* harmony export */   "DataChannelStats": () => (/* binding */ DataChannelStats)
/* harmony export */ });
// Copyright Epic Games, Inc. All Rights Reserved.
/**
 * Data Channel Stats collected from the RTC Stats Report
 */
class DataChannelStats {
}


/***/ }),

/***/ "./src/PeerConnectionController/InboundRTPStats.ts":
/*!*********************************************************!*\
  !*** ./src/PeerConnectionController/InboundRTPStats.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_168247__) => {

__nested_webpack_require_168247__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_168247__.d(__webpack_exports__, {
/* harmony export */   "InboundAudioStats": () => (/* binding */ InboundAudioStats),
/* harmony export */   "InboundRTPStats": () => (/* binding */ InboundRTPStats),
/* harmony export */   "InboundVideoStats": () => (/* binding */ InboundVideoStats)
/* harmony export */ });
// Copyright Epic Games, Inc. All Rights Reserved.
/**
 * Inbound Audio Stats collected from the RTC Stats Report
 */
class InboundAudioStats {
}
/**
 * Inbound Video Stats collected from the RTC Stats Report
 */
class InboundVideoStats {
}
/**
 * Inbound Stats collected from the RTC Stats Report
 */
class InboundRTPStats {
}


/***/ }),

/***/ "./src/PeerConnectionController/OutBoundRTPStats.ts":
/*!**********************************************************!*\
  !*** ./src/PeerConnectionController/OutBoundRTPStats.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_169321__) => {

__nested_webpack_require_169321__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_169321__.d(__webpack_exports__, {
/* harmony export */   "OutBoundRTPStats": () => (/* binding */ OutBoundRTPStats),
/* harmony export */   "OutBoundVideoStats": () => (/* binding */ OutBoundVideoStats)
/* harmony export */ });
// Copyright Epic Games, Inc. All Rights Reserved.
/**
 * Outbound Video Stats collected from the RTC Stats Report
 */
class OutBoundVideoStats {
}
/**
 * Outbound Stats collected from the RTC Stats Report
 */
class OutBoundRTPStats {
}


/***/ }),

/***/ "./src/PeerConnectionController/PeerConnectionController.ts":
/*!******************************************************************!*\
  !*** ./src/PeerConnectionController/PeerConnectionController.ts ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_170250__) => {

__nested_webpack_require_170250__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_170250__.d(__webpack_exports__, {
/* harmony export */   "PeerConnectionController": () => (/* binding */ PeerConnectionController)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_170250__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _Config_Config__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_170250__(/*! ../Config/Config */ "./src/Config/Config.ts");
/* harmony import */ var _AggregatedStats__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_170250__(/*! ./AggregatedStats */ "./src/PeerConnectionController/AggregatedStats.ts");
/* harmony import */ var sdp__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_170250__(/*! sdp */ "sdp");
// Copyright Epic Games, Inc. All Rights Reserved.
var __awaiter = ( false) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};




/**
 * Handles the Peer Connection
 */
class PeerConnectionController {
    /**
     * Create a new RTC Peer Connection client
     * @param options - Peer connection Options
     * @param config - The config for our PS experience.
     */
    constructor(options, config, preferredCodec) {
        this.config = config;
        this.createPeerConnection(options, preferredCodec);
    }
    createPeerConnection(options, preferredCodec) {
        // Set the ICE transport to relay if TURN enabled
        if (this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_1__.Flags.ForceTURN)) {
            options.iceTransportPolicy = 'relay';
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), 'Forcing TURN usage by setting ICE Transport Policy in peer connection config.');
        }
        // build a new peer connection with the options
        this.peerConnection = new RTCPeerConnection(options);
        this.peerConnection.onsignalingstatechange = (ev) => this.handleSignalStateChange(ev);
        this.peerConnection.oniceconnectionstatechange = (ev) => this.handleIceConnectionStateChange(ev);
        this.peerConnection.onicegatheringstatechange = (ev) => this.handleIceGatheringStateChange(ev);
        this.peerConnection.ontrack = (ev) => this.handleOnTrack(ev);
        this.peerConnection.onicecandidate = (ev) => this.handleIceCandidate(ev);
        this.peerConnection.ondatachannel = (ev) => this.handleDataChannel(ev);
        this.aggregatedStats = new _AggregatedStats__WEBPACK_IMPORTED_MODULE_3__.AggregatedStats();
        this.preferredCodec = preferredCodec;
        this.updateCodecSelection = true;
    }
    /**
     * Create an offer for the Web RTC handshake and send the offer to the signaling server via websocket
     * @param offerOptions - RTC Offer Options
     */
    createOffer(offerOptions, config) {
        return __awaiter(this, void 0, void 0, function* () {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), 'Create Offer', 6);
            const isLocalhostConnection = location.hostname === 'localhost' ||
                location.hostname === '127.0.0.1';
            const isHttpsConnection = location.protocol === 'https:';
            let useMic = config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_1__.Flags.UseMic);
            if (useMic && !(isLocalhostConnection || isHttpsConnection)) {
                useMic = false;
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), 'Microphone access in the browser will not work if you are not on HTTPS or localhost. Disabling mic access.');
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), "For testing you can enable HTTP microphone access Chrome by visiting chrome://flags/ and enabling 'unsafely-treat-insecure-origin-as-secure'");
            }
            this.setupTransceiversAsync(useMic).finally(() => {
                var _a;
                (_a = this.peerConnection) === null || _a === void 0 ? void 0 : _a.createOffer(offerOptions).then((offer) => {
                    var _a;
                    this.showTextOverlayConnecting();
                    offer.sdp = this.mungeSDP(offer.sdp, useMic);
                    (_a = this.peerConnection) === null || _a === void 0 ? void 0 : _a.setLocalDescription(offer);
                    this.onSendWebRTCOffer(offer);
                }).catch(() => {
                    this.showTextOverlaySetupFailure();
                });
            });
        });
    }
    /**
     *
     */
    receiveOffer(offer, config) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), 'Receive Offer', 6);
            (_a = this.peerConnection) === null || _a === void 0 ? void 0 : _a.setRemoteDescription(offer).then(() => {
                const isLocalhostConnection = location.hostname === 'localhost' ||
                    location.hostname === '127.0.0.1';
                const isHttpsConnection = location.protocol === 'https:';
                let useMic = config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_1__.Flags.UseMic);
                if (useMic && !(isLocalhostConnection || isHttpsConnection)) {
                    useMic = false;
                    _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), 'Microphone access in the browser will not work if you are not on HTTPS or localhost. Disabling mic access.');
                    _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), "For testing you can enable HTTP microphone access Chrome by visiting chrome://flags/ and enabling 'unsafely-treat-insecure-origin-as-secure'");
                }
                this.setupTransceiversAsync(useMic).finally(() => {
                    var _a;
                    (_a = this.peerConnection) === null || _a === void 0 ? void 0 : _a.createAnswer().then((Answer) => {
                        var _a;
                        Answer.sdp = this.mungeSDP(Answer.sdp, useMic);
                        return (_a = this.peerConnection) === null || _a === void 0 ? void 0 : _a.setLocalDescription(Answer);
                    }).then(() => {
                        var _a;
                        this.onSendWebRTCAnswer((_a = this.peerConnection) === null || _a === void 0 ? void 0 : _a.currentLocalDescription);
                    }).catch(() => {
                        _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), 'createAnswer() failed');
                    });
                });
            });
            // Ugly syntax, but this achieves the intersection of the browser supported list and the UE supported list
            this.config.setOptionSettingOptions(_Config_Config__WEBPACK_IMPORTED_MODULE_1__.OptionParameters.PreferredCodec, this.parseAvailableCodecs(offer).filter((value) => this.config
                .getSettingOption(_Config_Config__WEBPACK_IMPORTED_MODULE_1__.OptionParameters.PreferredCodec)
                .options.includes(value)));
        });
    }
    /**
     * Set the Remote Descriptor from the signaling server to the RTC Peer Connection
     * @param answer - RTC Session Descriptor from the Signaling Server
     */
    receiveAnswer(answer) {
        var _a;
        (_a = this.peerConnection) === null || _a === void 0 ? void 0 : _a.setRemoteDescription(answer);
        // Ugly syntax, but this achieves the intersection of the browser supported list and the UE supported list
        this.config.setOptionSettingOptions(_Config_Config__WEBPACK_IMPORTED_MODULE_1__.OptionParameters.PreferredCodec, this.parseAvailableCodecs(answer).filter((value) => this.config
            .getSettingOption(_Config_Config__WEBPACK_IMPORTED_MODULE_1__.OptionParameters.PreferredCodec)
            .options.includes(value)));
    }
    /**
     * Generate Aggregated Stats and then fire a onVideo Stats event
     */
    generateStats() {
        var _a;
        (_a = this.peerConnection) === null || _a === void 0 ? void 0 : _a.getStats(null).then((StatsData) => {
            this.aggregatedStats.processStats(StatsData);
            this.onVideoStats(this.aggregatedStats);
            // Update the preferred codec selection based on what was actually negotiated
            if (this.updateCodecSelection) {
                this.config.setOptionSettingValue(_Config_Config__WEBPACK_IMPORTED_MODULE_1__.OptionParameters.PreferredCodec, this.aggregatedStats.codecs.get(this.aggregatedStats.inboundVideoStats.codecId));
            }
        });
    }
    /**
     * Close The Peer Connection
     */
    close() {
        if (this.peerConnection) {
            this.peerConnection.close();
            this.peerConnection = null;
        }
    }
    /**
     * Modify the Session Descriptor
     * @param sdp - Session Descriptor as a string
     * @param useMic - Is the microphone in use
     * @returns A modified Session Descriptor
     */
    mungeSDP(sdp, useMic) {
        const mungedSDP = sdp;
        mungedSDP.replace(/(a=fmtp:\d+ .*level-asymmetry-allowed=.*)\r\n/gm, '$1;x-google-start-bitrate=10000;x-google-max-bitrate=100000\r\n');
        let audioSDP = '';
        // set max bitrate to highest bitrate Opus supports
        audioSDP += 'maxaveragebitrate=510000;';
        if (useMic) {
            // set the max capture rate to 48khz (so we can send high quality audio from mic)
            audioSDP += 'sprop-maxcapturerate=48000;';
        }
        // Force mono or stereo based on whether ?forceMono was passed or not
        audioSDP += this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_1__.Flags.ForceMonoAudio)
            ? 'stereo=0;'
            : 'stereo=1;';
        // enable in-band forward error correction for opus audio
        audioSDP += 'useinbandfec=1';
        // We use the line 'useinbandfec=1' (which Opus uses) to set our Opus specific audio parameters.
        mungedSDP.replace('useinbandfec=1', audioSDP);
        return mungedSDP;
    }
    /**
     * When a Ice Candidate is received add to the RTC Peer Connection
     * @param iceCandidate - RTC Ice Candidate from the Signaling Server
     */
    handleOnIce(iceCandidate) {
        var _a;
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), 'peerconnection handleOnIce', 6);
        // // if forcing TURN, reject any candidates not relay
        if (this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_1__.Flags.ForceTURN)) {
            // check if no relay address is found, if so, we are assuming it means no TURN server
            if (iceCandidate.candidate.indexOf('relay') < 0) {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Info(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), `Dropping candidate because it was not TURN relay. | Type= ${iceCandidate.type} | Protocol= ${iceCandidate.protocol} | Address=${iceCandidate.address} | Port=${iceCandidate.port} |`, 6);
                return;
            }
        }
        (_a = this.peerConnection) === null || _a === void 0 ? void 0 : _a.addIceCandidate(iceCandidate);
    }
    /**
     * When the RTC Peer Connection Signaling server state Changes
     * @param state - Signaling Server State Change Event
     */
    handleSignalStateChange(state) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), 'signaling state change: ' + state, 6);
    }
    /**
     * Handle when the Ice Connection State Changes
     * @param state - Ice Connection State
     */
    handleIceConnectionStateChange(state) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), 'ice connection state change: ' + state, 6);
        this.onIceConnectionStateChange(state);
    }
    /**
     * Handle when the Ice Gathering State Changes
     * @param state - Ice Gathering State Change
     */
    handleIceGatheringStateChange(state) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_2__.Logger.GetStackTrace(), 'ice gathering state change: ' + JSON.stringify(state), 6);
    }
    /**
     * Activates the onTrack method
     * @param event - The webRtc track event
     */
    handleOnTrack(event) {
        this.onTrack(event);
    }
    /**
     * Activates the onPeerIceCandidate
     * @param event - The peer ice candidate
     */
    handleIceCandidate(event) {
        this.onPeerIceCandidate(event);
    }
    /**
     * Activates the onDataChannel
     * @param event - The peer's data channel
     */
    handleDataChannel(event) {
        this.onDataChannel(event);
    }
    /**
     * An override method for onTrack for use outside of the PeerConnectionController
     * @param trackEvent - The webRtc track event
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    onTrack(trackEvent) {
        // Default Functionality: Do Nothing
    }
    /**
     * An override method for onIceConnectionStateChange for use outside of the PeerConnectionController
     * @param event - The webRtc iceconnectionstatechange event
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    onIceConnectionStateChange(event) {
        // Default Functionality: Do Nothing
    }
    /**
     * An override method for onPeerIceCandidate for use outside of the PeerConnectionController
     * @param peerConnectionIceEvent - The peer ice candidate
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    onPeerIceCandidate(peerConnectionIceEvent) {
        // Default Functionality: Do Nothing
    }
    /**
     * An override method for onDataChannel for use outside of the PeerConnectionController
     * @param datachannelEvent - The peer's data channel
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    onDataChannel(datachannelEvent) {
        // Default Functionality: Do Nothing
    }
    /**
     * Setup tracks on the RTC Peer Connection
     * @param useMic - is mic in use
     */
    setupTransceiversAsync(useMic) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        return __awaiter(this, void 0, void 0, function* () {
            const hasTransceivers = ((_a = this.peerConnection) === null || _a === void 0 ? void 0 : _a.getTransceivers().length) > 0;
            // Setup a transceiver for getting UE video
            (_b = this.peerConnection) === null || _b === void 0 ? void 0 : _b.addTransceiver('video', { direction: 'recvonly' });
            // We can only set preferrec codec on Chrome
            if (RTCRtpReceiver.getCapabilities && this.preferredCodec != '') {
                for (const transceiver of (_d = (_c = this.peerConnection) === null || _c === void 0 ? void 0 : _c.getTransceivers()) !== null && _d !== void 0 ? _d : []) {
                    if (transceiver &&
                        transceiver.receiver &&
                        transceiver.receiver.track &&
                        transceiver.receiver.track.kind === 'video') {
                        const preferredRTPCodec = this.preferredCodec.split(' ');
                        const codecs = [
                            {
                                mimeType: 'video/' + preferredRTPCodec[0] /* Name */,
                                clockRate: 90000,
                                sdpFmtpLine: preferredRTPCodec[1] /* sdpFmtpLine */
                                    ? preferredRTPCodec[1]
                                    : ''
                            }
                        ];
                        this.config
                            .getSettingOption(_Config_Config__WEBPACK_IMPORTED_MODULE_1__.OptionParameters.PreferredCodec)
                            .options.filter((option) => {
                            // Remove the preferred codec from the list of possible codecs as we've set it already
                            return option != this.preferredCodec;
                        })
                            .forEach((option) => {
                            // Ammend the rest of the browsers supported codecs
                            const altCodec = option.split(' ');
                            codecs.push({
                                mimeType: 'video/' + altCodec[0] /* Name */,
                                clockRate: 90000,
                                sdpFmtpLine: altCodec[1] /* sdpFmtpLine */
                                    ? altCodec[1]
                                    : ''
                            });
                        });
                        for (const codec of codecs) {
                            if (codec.sdpFmtpLine === '') {
                                // We can't dynamically add members to the codec, so instead remove the field if it's empty
                                delete codec.sdpFmtpLine;
                            }
                        }
                        transceiver.setCodecPreferences(codecs);
                    }
                }
            }
            // Setup a transceiver for sending mic audio to UE and receiving audio from UE
            if (!useMic) {
                (_e = this.peerConnection) === null || _e === void 0 ? void 0 : _e.addTransceiver('audio', {
                    direction: 'recvonly'
                });
            }
            else {
                // set the audio options based on mic usage
                const audioOptions = useMic
                    ? {
                        autoGainControl: false,
                        channelCount: 1,
                        echoCancellation: false,
                        latency: 0,
                        noiseSuppression: false,
                        sampleRate: 48000,
                        sampleSize: 16,
                        volume: 1.0
                    }
                    : false;
                // set the media send options
                const mediaSendOptions = {
                    video: false,
                    audio: audioOptions
                };
                // Note using mic on android chrome requires SSL or chrome://flags/ "unsafely-treat-insecure-origin-as-secure"
                const stream = yield navigator.mediaDevices.getUserMedia(mediaSendOptions);
                if (stream) {
                    if (hasTransceivers) {
                        for (const transceiver of (_g = (_f = this.peerConnection) === null || _f === void 0 ? void 0 : _f.getTransceivers()) !== null && _g !== void 0 ? _g : []) {
                            if (transceiver &&
                                transceiver.receiver &&
                                transceiver.receiver.track &&
                                transceiver.receiver.track.kind === 'audio') {
                                for (const track of stream.getTracks()) {
                                    if (track.kind && track.kind == 'audio') {
                                        transceiver.sender.replaceTrack(track);
                                        transceiver.direction = 'sendrecv';
                                    }
                                }
                            }
                        }
                    }
                    else {
                        for (const track of stream.getTracks()) {
                            if (track.kind && track.kind == 'audio') {
                                (_h = this.peerConnection) === null || _h === void 0 ? void 0 : _h.addTransceiver(track, {
                                    direction: 'sendrecv'
                                });
                            }
                        }
                    }
                }
                else {
                    (_j = this.peerConnection) === null || _j === void 0 ? void 0 : _j.addTransceiver('audio', {
                        direction: 'recvonly'
                    });
                }
            }
        });
    }
    /**
     * And override event for when the video stats are fired
     * @param event - Aggregated Stats
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    onVideoStats(event) {
        // Default Functionality: Do Nothing
    }
    /**
     * Event to send the RTC offer to the Signaling server
     * @param offer - RTC Offer
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    onSendWebRTCOffer(offer) {
        // Default Functionality: Do Nothing
    }
    /**
     * Event to send the RTC Answer to the Signaling server
     * @param answer - RTC Answer
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    onSendWebRTCAnswer(answer) {
        // Default Functionality: Do Nothing
    }
    /**
     * An override for showing the Peer connection connecting Overlay
     */
    showTextOverlayConnecting() {
        // Default Functionality: Do Nothing
    }
    /**
     * An override for showing the Peer connection Failed overlay
     */
    showTextOverlaySetupFailure() {
        // Default Functionality: Do Nothing
    }
    parseAvailableCodecs(rtcSessionDescription) {
        // No point in updating the available codecs if on FF
        if (!RTCRtpReceiver.getCapabilities)
            return ['Only available on Chrome'];
        const ueSupportedCodecs = [];
        const sections = (0,sdp__WEBPACK_IMPORTED_MODULE_0__.splitSections)(rtcSessionDescription.sdp);
        // discard the session information as we only want media related info
        sections.shift();
        sections.forEach((mediaSection) => {
            const { codecs } = (0,sdp__WEBPACK_IMPORTED_MODULE_0__.parseRtpParameters)(mediaSection);
            // Filter only for VPX / H26X / AV1
            const matcher = /(VP\d|H26\d|AV1).*/;
            codecs.forEach((c) => {
                const str = c.name +
                    ' ' +
                    Object.keys(c.parameters || {})
                        .map((p) => p + '=' + c.parameters[p])
                        .join(';');
                const match = matcher.exec(str);
                if (match !== null) {
                    if (c.name == 'VP9') {
                        // UE answers don't specify profile but we know we want profile 0
                        c.parameters = {
                            'profile-id': '0'
                        };
                    }
                    const codecStr = c.name +
                        ' ' +
                        Object.keys(c.parameters || {})
                            .map((p) => p + '=' + c.parameters[p])
                            .join(';');
                    ueSupportedCodecs.push(codecStr);
                }
            });
        });
        return ueSupportedCodecs;
    }
}


/***/ }),

/***/ "./src/PeerConnectionController/SessionStats.ts":
/*!******************************************************!*\
  !*** ./src/PeerConnectionController/SessionStats.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_195050__) => {

__nested_webpack_require_195050__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_195050__.d(__webpack_exports__, {
/* harmony export */   "SessionStats": () => (/* binding */ SessionStats)
/* harmony export */ });
// Copyright Epic Games, Inc. All Rights Reserved.
/**
 * Session statistics
 */
class SessionStats {
}


/***/ }),

/***/ "./src/PeerConnectionController/StreamStats.ts":
/*!*****************************************************!*\
  !*** ./src/PeerConnectionController/StreamStats.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_195694__) => {

__nested_webpack_require_195694__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_195694__.d(__webpack_exports__, {
/* harmony export */   "StreamStats": () => (/* binding */ StreamStats)
/* harmony export */ });
// Copyright Epic Games, Inc. All Rights Reserved.
/**
 * Class to hold the stream stats data coming in from webRtc
 */
class StreamStats {
}


/***/ }),

/***/ "./src/PixelStreaming/PixelStreaming.ts":
/*!**********************************************!*\
  !*** ./src/PixelStreaming/PixelStreaming.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_196346__) => {

__nested_webpack_require_196346__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_196346__.d(__webpack_exports__, {
/* harmony export */   "PixelStreaming": () => (/* binding */ PixelStreaming)
/* harmony export */ });
/* harmony import */ var _Config_Config__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_196346__(/*! ../Config/Config */ "./src/Config/Config.ts");
/* harmony import */ var _WebRtcPlayer_WebRtcPlayerController__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_196346__(/*! ../WebRtcPlayer/WebRtcPlayerController */ "./src/WebRtcPlayer/WebRtcPlayerController.ts");
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_5__ = __nested_webpack_require_196346__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _UI_OnScreenKeyboard__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_196346__(/*! ../UI/OnScreenKeyboard */ "./src/UI/OnScreenKeyboard.ts");
/* harmony import */ var _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_196346__(/*! ../Util/EventEmitter */ "./src/Util/EventEmitter.ts");
/* harmony import */ var _WebXR_WebXRController__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_196346__(/*! ../WebXR/WebXRController */ "./src/WebXR/WebXRController.ts");
// Copyright Epic Games, Inc. All Rights Reserved.







/**
 * The key class for the browser side of a Pixel Streaming application, it includes:
 * WebRTC handling, XR support, input handling, and emitters for lifetime and state change events.
 * Users are encouraged to use this class as is, through composition, or extend it. In any case,
 * this will likely be the core of your Pixel Streaming experience in terms of functionality.
 */
class PixelStreaming {
    /**
     * @param config - A newly instantiated config object
     * @param overrides - Parameters to override default behaviour
     * returns the base Pixel streaming object
     */
    constructor(config, overrides) {
        this._showActionOrErrorOnDisconnect = true;
        this.allowConsoleCommands = false;
        this.config = config;
        if (overrides === null || overrides === void 0 ? void 0 : overrides.videoElementParent) {
            this._videoElementParent = overrides.videoElementParent;
        }
        this._eventEmitter = new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
        this.configureSettings();
        // setup WebRTC
        this.setWebRtcPlayerController(new _WebRtcPlayer_WebRtcPlayerController__WEBPACK_IMPORTED_MODULE_1__.WebRtcPlayerController(this.config, this));
        // Onscreen keyboard
        this.onScreenKeyboardHelper = new _UI_OnScreenKeyboard__WEBPACK_IMPORTED_MODULE_2__.OnScreenKeyboard(this.videoElementParent);
        this.onScreenKeyboardHelper.unquantizeAndDenormalizeUnsigned = (x, y) => this._webRtcController.requestUnquantizedAndDenormalizeUnsigned(x, y);
        this._activateOnScreenKeyboard = (command) => this.onScreenKeyboardHelper.showOnScreenKeyboard(command);
        this._webXrController = new _WebXR_WebXRController__WEBPACK_IMPORTED_MODULE_3__.WebXRController(this._webRtcController);
    }
    /**
     * Gets the element that contains the video stream element.
     */
    get videoElementParent() {
        if (!this._videoElementParent) {
            this._videoElementParent = document.createElement('div');
            this._videoElementParent.id = 'videoElementParent';
        }
        return this._videoElementParent;
    }
    /**
     * Configure the settings with on change listeners and any additional per experience settings.
     */
    configureSettings() {
        this.config._addOnSettingChangedListener(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.Flags.IsQualityController, (wantsQualityController) => {
            // If the setting has been set to true (either programatically or the user has flicked the toggle)
            // and we aren't currently quality controller, send the request
            if (wantsQualityController === true &&
                !this._webRtcController.isQualityController) {
                this._webRtcController.sendRequestQualityControlOwnership();
            }
        });
        this.config._addOnSettingChangedListener(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.Flags.AFKDetection, (isAFKEnabled) => {
            this._webRtcController.setAfkEnabled(isAFKEnabled);
        });
        this.config._addOnSettingChangedListener(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.Flags.MatchViewportResolution, () => {
            this._webRtcController.videoPlayer.updateVideoStreamSize();
        });
        this.config._addOnSettingChangedListener(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.Flags.HoveringMouseMode, (isHoveringMouse) => {
            this.config.setFlagLabel(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.Flags.HoveringMouseMode, `Control Scheme: ${isHoveringMouse ? 'Hovering' : 'Locked'} Mouse`);
            this._webRtcController.setMouseInputEnabled(this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.Flags.MouseInput));
        });
        // user input
        this.config._addOnSettingChangedListener(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.Flags.KeyboardInput, (isEnabled) => {
            this._webRtcController.setKeyboardInputEnabled(isEnabled);
        });
        this.config._addOnSettingChangedListener(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.Flags.MouseInput, (isEnabled) => {
            this._webRtcController.setMouseInputEnabled(isEnabled);
        });
        this.config._addOnSettingChangedListener(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.Flags.TouchInput, (isEnabled) => {
            this._webRtcController.setTouchInputEnabled(isEnabled);
        });
        this.config._addOnSettingChangedListener(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.Flags.GamepadInput, (isEnabled) => {
            this._webRtcController.setGamePadInputEnabled(isEnabled);
        });
        // encoder settings
        this.config._addOnNumericSettingChangedListener(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.NumericParameters.MinQP, (newValue) => {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.GetStackTrace(), '--------  Sending MinQP  --------', 7);
            this._webRtcController.sendEncoderMinQP(newValue);
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.GetStackTrace(), '-------------------------------------------', 7);
        });
        this.config._addOnNumericSettingChangedListener(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.NumericParameters.MaxQP, (newValue) => {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.GetStackTrace(), '--------  Sending encoder settings  --------', 7);
            this._webRtcController.sendEncoderMaxQP(newValue);
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.GetStackTrace(), '-------------------------------------------', 7);
        });
        // WebRTC settings
        this.config._addOnNumericSettingChangedListener(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.NumericParameters.WebRTCMinBitrate, (newValue) => {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.GetStackTrace(), '--------  Sending web rtc settings  --------', 7);
            this._webRtcController.sendWebRTCMinBitrate(newValue * 1000 /* kbps to bps */);
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.GetStackTrace(), '-------------------------------------------', 7);
        });
        this.config._addOnNumericSettingChangedListener(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.NumericParameters.WebRTCMaxBitrate, (newValue) => {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.GetStackTrace(), '--------  Sending web rtc settings  --------', 7);
            this._webRtcController.sendWebRTCMaxBitrate(newValue * 1000 /* kbps to bps */);
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.GetStackTrace(), '-------------------------------------------', 7);
        });
        this.config._addOnNumericSettingChangedListener(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.NumericParameters.WebRTCFPS, (newValue) => {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.GetStackTrace(), '--------  Sending web rtc settings  --------', 7);
            this._webRtcController.sendWebRTCFps(newValue);
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.GetStackTrace(), '-------------------------------------------', 7);
        });
        this.config._addOnOptionSettingChangedListener(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.OptionParameters.PreferredCodec, (newValue) => {
            if (this._webRtcController) {
                this._webRtcController.setPreferredCodec(newValue);
            }
        });
        this.config._registerOnChangeEvents(this._eventEmitter);
    }
    /**
     * Activate the on screen keyboard when receiving the command from the streamer
     * @param command - the keyboard command
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    _activateOnScreenKeyboard(command) {
        throw new Error('Method not implemented.');
    }
    /**
     * Set the input control ownership
     * @param inputControlOwnership - does the user have input control ownership
     */
    _onInputControlOwnership(inputControlOwnership) {
        this._inputController = inputControlOwnership;
    }
    /**
     * Instantiate the WebRTCPlayerController interface to provide WebRTCPlayerController functionality within this class and set up anything that requires it
     * @param webRtcPlayerController - a WebRtcPlayerController controller instance
     */
    setWebRtcPlayerController(webRtcPlayerController) {
        this._webRtcController = webRtcPlayerController;
        this._webRtcController.setPreferredCodec(this.config.getSettingOption(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.OptionParameters.PreferredCodec)
            .selected);
        this._webRtcController.resizePlayerStyle();
        // connect if auto connect flag is enabled
        this.checkForAutoConnect();
    }
    /**
     * Connect to signaling server.
     */
    connect() {
        this._eventEmitter.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_0__.StreamPreConnectEvent());
        this._webRtcController.connectToSignallingServer();
    }
    /**
     * Reconnects to the signaling server. If connection is up, disconnects first
     * before establishing a new connection
     */
    reconnect() {
        this._eventEmitter.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_0__.StreamReconnectEvent());
        this._webRtcController.restartStreamAutomatically();
    }
    /**
     * Disconnect from the signaling server and close open peer connections.
     */
    disconnect() {
        this._eventEmitter.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_0__.StreamPreDisconnectEvent());
        this._webRtcController.close();
    }
    /**
     * Play the stream. Can be called only after a peer connection has been established.
     */
    play() {
        this._onStreamLoading();
        this._webRtcController.playStream();
    }
    /**
     * Auto connect if AutoConnect flag is enabled
     */
    checkForAutoConnect() {
        // set up if the auto play will be used or regular click to start
        if (this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.Flags.AutoConnect)) {
            // if autoplaying show an info overlay while while waiting for the connection to begin
            this._onWebRtcAutoConnect();
            this._webRtcController.connectToSignallingServer();
        }
    }
    /**
     * Emit an event on auto connecting
     */
    _onWebRtcAutoConnect() {
        this._eventEmitter.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_0__.WebRtcAutoConnectEvent());
        this._showActionOrErrorOnDisconnect = true;
    }
    /**
     * Set up functionality to happen when receiving a webRTC answer
     */
    _onWebRtcSdp() {
        this._eventEmitter.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_0__.WebRtcSdpEvent());
    }
    /**
     * Emits a StreamLoading event
     */
    _onStreamLoading() {
        this._eventEmitter.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_0__.StreamLoadingEvent());
    }
    /**
     * Event fired when the video is disconnected - emits given eventString or an override
     * message from webRtcController if one has been set
     * @param eventString - the event text that will be emitted
     */
    _onDisconnect(eventString) {
        // if we have overridden the default disconnection message, assign the new value here
        if (this._webRtcController.getDisconnectMessageOverride() != '' &&
            this._webRtcController.getDisconnectMessageOverride() !==
                undefined &&
            this._webRtcController.getDisconnectMessageOverride() != null) {
            eventString = this._webRtcController.getDisconnectMessageOverride();
            this._webRtcController.setDisconnectMessageOverride('');
        }
        this._eventEmitter.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_0__.WebRtcDisconnectedEvent({
            eventString,
            showActionOrErrorOnDisconnect: this._showActionOrErrorOnDisconnect
        }));
        if (this._showActionOrErrorOnDisconnect == false) {
            this._showActionOrErrorOnDisconnect = true;
        }
    }
    /**
     * Handles when Web Rtc is connecting
     */
    _onWebRtcConnecting() {
        this._eventEmitter.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_0__.WebRtcConnectingEvent());
    }
    /**
     * Handles when Web Rtc has connected
     */
    _onWebRtcConnected() {
        this._eventEmitter.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_0__.WebRtcConnectedEvent());
    }
    /**
     * Handles when Web Rtc fails to connect
     */
    _onWebRtcFailed() {
        this._eventEmitter.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_0__.WebRtcFailedEvent());
    }
    /**
     * Handle when the Video has been Initialized
     */
    _onVideoInitialized() {
        this._eventEmitter.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_0__.VideoInitializedEvent());
        this._videoStartTime = Date.now();
    }
    /**
     * Set up functionality to happen when receiving latency test results
     * @param latency - latency test results object
     */
    _onLatencyTestResult(latencyTimings) {
        this._eventEmitter.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_0__.LatencyTestResultEvent({ latencyTimings }));
    }
    /**
     * Set up functionality to happen when receiving video statistics
     * @param videoStats - video statistics as a aggregate stats object
     */
    _onVideoStats(videoStats) {
        // Duration
        if (!this._videoStartTime || this._videoStartTime === undefined) {
            this._videoStartTime = Date.now();
        }
        videoStats.handleSessionStatistics(this._videoStartTime, this._inputController, this._webRtcController.videoAvgQp);
        this._eventEmitter.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_0__.StatsReceivedEvent({ aggregatedStats: videoStats }));
    }
    /**
     * Set up functionality to happen when calculating the average video encoder qp
     * @param QP - the quality number of the stream
     */
    _onVideoEncoderAvgQP(QP) {
        this._eventEmitter.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_0__.VideoEncoderAvgQPEvent({ avgQP: QP }));
    }
    /**
     * Set up functionality to happen when receiving and handling initial settings for the UE app
     * @param settings - initial UE app settings
     */
    _onInitialSettings(settings) {
        var _a;
        this._eventEmitter.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_0__.InitialSettingsEvent({ settings }));
        if (settings.PixelStreamingSettings) {
            this.allowConsoleCommands =
                (_a = settings.PixelStreamingSettings.AllowPixelStreamingCommands) !== null && _a !== void 0 ? _a : false;
            if (this.allowConsoleCommands === false) {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.Info(_Logger_Logger__WEBPACK_IMPORTED_MODULE_5__.Logger.GetStackTrace(), '-AllowPixelStreamingCommands=false, sending arbitrary console commands from browser to UE is disabled.');
            }
        }
        const useUrlParams = this.config.useUrlParams;
        const urlParams = new URLSearchParams(window.location.search);
        if (settings.EncoderSettings) {
            this.config.setNumericSetting(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.NumericParameters.MinQP, 
            // If a setting is set in the URL, make sure we respect that value as opposed to what the application sends us
            (useUrlParams && urlParams.has(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.NumericParameters.MinQP))
                ? Number.parseInt(urlParams.get(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.NumericParameters.MinQP))
                : settings.EncoderSettings.MinQP);
            this.config.setNumericSetting(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.NumericParameters.MaxQP, (useUrlParams && urlParams.has(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.NumericParameters.MaxQP))
                ? Number.parseInt(urlParams.get(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.NumericParameters.MaxQP))
                : settings.EncoderSettings.MaxQP);
        }
        if (settings.WebRTCSettings) {
            this.config.setNumericSetting(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.NumericParameters.WebRTCMinBitrate, (useUrlParams && urlParams.has(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.NumericParameters.WebRTCMinBitrate))
                ? Number.parseInt(urlParams.get(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.NumericParameters.WebRTCMinBitrate)) / 1000 /* bps to kbps */
                : settings.WebRTCSettings.MinBitrate / 1000 /* bps to kbps */);
            this.config.setNumericSetting(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.NumericParameters.WebRTCMaxBitrate, (useUrlParams && urlParams.has(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.NumericParameters.WebRTCMaxBitrate))
                ? Number.parseInt(urlParams.get(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.NumericParameters.WebRTCMaxBitrate)) / 1000 /* bps to kbps */
                : settings.WebRTCSettings.MaxBitrate / 1000 /* bps to kbps */);
            this.config.setNumericSetting(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.NumericParameters.WebRTCFPS, (useUrlParams && urlParams.has(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.NumericParameters.WebRTCFPS))
                ? Number.parseInt(urlParams.get(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.NumericParameters.WebRTCFPS))
                : settings.WebRTCSettings.FPS);
        }
    }
    /**
     * Set up functionality to happen when setting quality control ownership of a stream
     * @param hasQualityOwnership - does this user have quality ownership of the stream true / false
     */
    _onQualityControlOwnership(hasQualityOwnership) {
        this.config.setFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_4__.Flags.IsQualityController, hasQualityOwnership);
    }
    /**
     * Request a connection latency test.
     * NOTE: There are plans to refactor all request* functions. Expect changes if you use this!
     * @returns
     */
    requestLatencyTest() {
        if (!this._webRtcController.videoPlayer.isVideoReady()) {
            return false;
        }
        this._webRtcController.sendLatencyTest();
        return true;
    }
    /**
     * Request for the UE application to show FPS counter.
     * NOTE: There are plans to refactor all request* functions. Expect changes if you use this!
     * @returns
     */
    requestShowFps() {
        if (!this._webRtcController.videoPlayer.isVideoReady()) {
            return false;
        }
        this._webRtcController.sendShowFps();
        return true;
    }
    /**
     * Request for a new IFrame from the UE application.
     * NOTE: There are plans to refactor all request* functions. Expect changes if you use this!
     * @returns
     */
    requestIframe() {
        if (!this._webRtcController.videoPlayer.isVideoReady()) {
            return false;
        }
        this._webRtcController.sendIframeRequest();
        return true;
    }
    /**
     * Send data to UE application. The data will be run through JSON.stringify() so e.g. strings
     * and any serializable plain JSON objects with no recurrence can be sent.
     * @returns true if succeeded, false if rejected
     */
    emitUIInteraction(descriptor) {
        if (!this._webRtcController.videoPlayer.isVideoReady()) {
            return false;
        }
        this._webRtcController.emitUIInteraction(descriptor);
        return true;
    }
    /**
     * Send a command to UE application. Blocks ConsoleCommand descriptors unless UE
     * has signaled that it allows console commands.
     * @returns true if succeeded, false if rejected
     */
    emitCommand(descriptor) {
        if (!this._webRtcController.videoPlayer.isVideoReady()) {
            return false;
        }
        if (!this.allowConsoleCommands && 'ConsoleCommand' in descriptor) {
            return false;
        }
        this._webRtcController.emitCommand(descriptor);
        return true;
    }
    /**
     * Send a console command to UE application. Only allowed if UE has signaled that it allows
     * console commands.
     * @returns true if succeeded, false if rejected
     */
    emitConsoleCommand(command) {
        if (!this.allowConsoleCommands || !this._webRtcController.videoPlayer.isVideoReady()) {
            return false;
        }
        this._webRtcController.emitConsoleCommand(command);
        return true;
    }
    /**
     * Add a UE -> browser response event listener
     * @param name - The name of the response handler
     * @param listener - The method to be activated when a message is received
     */
    addResponseEventListener(name, listener) {
        this._webRtcController.responseController.addResponseEventListener(name, listener);
    }
    /**
     * Remove a UE -> browser response event listener
     * @param name - The name of the response handler
     */
    removeResponseEventListener(name) {
        this._webRtcController.responseController.removeResponseEventListener(name);
    }
    /**
     * Dispatch a new event.
     * @param e event
     * @returns
     */
    dispatchEvent(e) {
        return this._eventEmitter.dispatchEvent(e);
    }
    /**
     * Register an event handler.
     * @param type event name
     * @param listener event handler function
     */
    addEventListener(type, listener) {
        this._eventEmitter.addEventListener(type, listener);
    }
    /**
     * Remove an event handler.
     * @param type event name
     * @param listener event handler function
     */
    removeEventListener(type, listener) {
        this._eventEmitter.removeEventListener(type, listener);
    }
    /**
     * Enable/disable XR mode.
     */
    toggleXR() {
        this.webXrController.xrClicked();
    }
    /**
     * Pass in a function to generate a signalling server URL.
     * This function is useful if you need to programmatically construct your signalling server URL.
     * @param signallingUrlBuilderFunc A function that generates a signalling server url.
     */
    setSignallingUrlBuilder(signallingUrlBuilderFunc) {
        this._webRtcController.signallingUrlBuilder = signallingUrlBuilderFunc;
    }
    /**
     * Public getter for the websocket controller. Access to this property allows you to send
     * custom websocket messages.
     */
    get webSocketController() {
        return this._webRtcController.webSocketController;
    }
    /**
     * Public getter for the webXrController controller. Used for all XR features.
     */
    get webXrController() {
        return this._webXrController;
    }
}


/***/ }),

/***/ "./src/UI/OnScreenKeyboard.ts":
/*!************************************!*\
  !*** ./src/UI/OnScreenKeyboard.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_221647__) => {

__nested_webpack_require_221647__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_221647__.d(__webpack_exports__, {
/* harmony export */   "OnScreenKeyboard": () => (/* binding */ OnScreenKeyboard)
/* harmony export */ });
// Copyright Epic Games, Inc. All Rights Reserved.
/**
 * Class for handling on screen keyboard usage
 */
class OnScreenKeyboard {
    /**
     *
     * @param videoElementParent The div element the video player is injected into
     */
    constructor(videoElementParent) {
        this.editTextButton = null;
        this.hiddenInput = null;
        if ('ontouchstart' in document.documentElement) {
            this.createOnScreenKeyboardHelpers(videoElementParent);
        }
    }
    /**
     * An override for unquantizeAndDenormalizeUnsigned
     * @param x the x axis point
     * @param y the y axis point
     * @returns unquantizeAndDenormalizeUnsigned object
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    unquantizeAndDenormalizeUnsigned(x, y) {
        return null;
    }
    /**
     * Creates on screen keyboard helpers
     * @param videoElementParent The div element the video player i injected into
     */
    createOnScreenKeyboardHelpers(videoElementParent) {
        if (!this.hiddenInput) {
            this.hiddenInput = document.createElement('input');
            this.hiddenInput.id = 'hiddenInput';
            this.hiddenInput.maxLength = 0;
            videoElementParent.appendChild(this.hiddenInput);
        }
        if (!this.editTextButton) {
            this.editTextButton = document.createElement('button');
            this.editTextButton.id = 'editTextButton';
            this.editTextButton.innerHTML = 'edit text';
            videoElementParent.appendChild(this.editTextButton);
            // Hide the 'edit text' button.
            this.editTextButton.classList.add('hiddenState');
            this.editTextButton.addEventListener('touchend', (event) => {
                // Show the on-screen keyboard.
                this.hiddenInput.focus();
                event.preventDefault();
            });
        }
    }
    /**
     * Shows the on screen keyboard
     * @param command the command received via the data channel containing keyboard positions
     */
    showOnScreenKeyboard(command) {
        if (command.showOnScreenKeyboard) {
            // Show the 'edit text' button.
            this.editTextButton.classList.remove('hiddenState');
            // Place the 'edit text' button near the UE input widget.
            const pos = this.unquantizeAndDenormalizeUnsigned(command.x, command.y);
            this.editTextButton.style.top = pos.y.toString() + 'px';
            this.editTextButton.style.left = (pos.x - 40).toString() + 'px';
        }
        else {
            // Hide the 'edit text' button.
            this.editTextButton.classList.add('hiddenState');
            // Hide the on-screen keyboard.
            this.hiddenInput.blur();
        }
    }
}


/***/ }),

/***/ "./src/UeInstanceMessage/ResponseController.ts":
/*!*****************************************************!*\
  !*** ./src/UeInstanceMessage/ResponseController.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_225026__) => {

__nested_webpack_require_225026__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_225026__.d(__webpack_exports__, {
/* harmony export */   "ResponseController": () => (/* binding */ ResponseController)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_225026__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
// Copyright Epic Games, Inc. All Rights Reserved.

class ResponseController {
    constructor() {
        this.responseEventListeners = new Map();
    }
    /**
     * Add a response event listener to the response map
     * @param name - The name of the response
     * @param listener - The method to be activated when the response is selected
     */
    addResponseEventListener(name, listener) {
        this.responseEventListeners.set(name, listener);
    }
    /**
     * Remove a response event listener to the response map
     * @param name - The name of the response
     */
    removeResponseEventListener(name) {
        this.responseEventListeners.delete(name);
    }
    /**
     * Handle a response when receiving one form the streamer
     * @param message - Data received from the data channel with the command in question
     */
    onResponse(message) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'DataChannelReceiveMessageType.Response', 6);
        const responses = new TextDecoder('utf-16').decode(message.slice(1));
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), responses, 6);
        this.responseEventListeners.forEach((listener) => {
            listener(responses);
        });
    }
}


/***/ }),

/***/ "./src/UeInstanceMessage/SendDescriptorController.ts":
/*!***********************************************************!*\
  !*** ./src/UeInstanceMessage/SendDescriptorController.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_227162__) => {

__nested_webpack_require_227162__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_227162__.d(__webpack_exports__, {
/* harmony export */   "SendDescriptorController": () => (/* binding */ SendDescriptorController)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_227162__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
// Copyright Epic Games, Inc. All Rights Reserved.

class SendDescriptorController {
    constructor(dataChannelSender, toStreamerMessagesMapProvider) {
        this.dataChannelSender = dataChannelSender;
        this.toStreamerMessagesMapProvider = toStreamerMessagesMapProvider;
    }
    /**
     * Send a Latency Test to the UE Instance
     * @param descriptor - the descriptor for a latency test
     */
    sendLatencyTest(descriptor) {
        this.sendDescriptor('LatencyTest', descriptor);
    }
    /**
     * Send a Latency Test to the UE Instance
     * @param descriptor - the descriptor for a command
     */
    emitCommand(descriptor) {
        this.sendDescriptor('Command', descriptor);
    }
    /**
     * Send a Latency Test to the UE Instance
     * @param descriptor - the descriptor for a UI Interaction
     */
    emitUIInteraction(descriptor) {
        this.sendDescriptor('UIInteraction', descriptor);
    }
    /**
     * Send a Descriptor to the UE Instances
     * @param messageType - UE Message Type
     * @param descriptor - Descriptor Message as JSON
     */
    sendDescriptor(messageType, descriptor) {
        // Convert the descriptor object into a JSON string.
        const descriptorAsString = JSON.stringify(descriptor);
        const toStreamerMessages = this.toStreamerMessagesMapProvider.toStreamerMessages;
        const messageFormat = toStreamerMessages.getFromKey(messageType);
        if (messageFormat === undefined) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), `Attempted to emit descriptor with message type: ${messageType}, but the frontend hasn't been configured to send such a message. Check you've added the message type in your cpp`);
        }
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'Sending: ' + descriptor, 6);
        // Add the UTF-16 JSON string to the array byte buffer, going two bytes at
        // a time.
        const data = new DataView(new ArrayBuffer(1 + 2 + 2 * descriptorAsString.length));
        let byteIdx = 0;
        data.setUint8(byteIdx, messageFormat.id);
        byteIdx++;
        data.setUint16(byteIdx, descriptorAsString.length, true);
        byteIdx += 2;
        for (let i = 0; i < descriptorAsString.length; i++) {
            data.setUint16(byteIdx, descriptorAsString.charCodeAt(i), true);
            byteIdx += 2;
        }
        if (!this.dataChannelSender.canSend()) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Info(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), `Data channel cannot send yet, skipping sending descriptor message: ${messageType} - ${descriptorAsString}`);
            return;
        }
        this.dataChannelSender.sendData(data.buffer);
    }
}


/***/ }),

/***/ "./src/UeInstanceMessage/SendMessageController.ts":
/*!********************************************************!*\
  !*** ./src/UeInstanceMessage/SendMessageController.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_230833__) => {

__nested_webpack_require_230833__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_230833__.d(__webpack_exports__, {
/* harmony export */   "SendMessageController": () => (/* binding */ SendMessageController)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_230833__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
// Copyright Epic Games, Inc. All Rights Reserved.

class SendMessageController {
    /**
     * @param dataChannelSender - Data channel instance
     * @param toStreamerMessagesMapProvider - Stream Messages instance
     */
    constructor(dataChannelSender, toStreamerMessagesMapProvider) {
        this.dataChannelSender = dataChannelSender;
        this.toStreamerMessagesMapProvider = toStreamerMessagesMapProvider;
    }
    /**
     * Send a message to the streamer through the data channel
     * @param messageType - the type of message we are sending
     * @param messageData - the message data we are sending over the data channel
     * @returns - nil
     */
    sendMessageToStreamer(messageType, messageData) {
        if (messageData === undefined) {
            messageData = [];
        }
        const toStreamerMessages = this.toStreamerMessagesMapProvider.toStreamerMessages;
        const messageFormat = toStreamerMessages.getFromKey(messageType);
        if (messageFormat === undefined) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), `Attempted to send a message to the streamer with message type: ${messageType}, but the frontend hasn't been configured to send such a message. Check you've added the message type in your cpp`);
            return;
        }
        const data = new DataView(new ArrayBuffer(messageFormat.byteLength + 1));
        data.setUint8(0, messageFormat.id);
        let byteOffset = 1;
        messageData.forEach((element, idx) => {
            const type = messageFormat.structure[idx];
            switch (type) {
                case 'uint8':
                    data.setUint8(byteOffset, element);
                    byteOffset += 1;
                    break;
                case 'uint16':
                    data.setUint16(byteOffset, element, true);
                    byteOffset += 2;
                    break;
                case 'int16':
                    data.setInt16(byteOffset, element, true);
                    byteOffset += 2;
                    break;
                case 'float':
                    data.setFloat32(byteOffset, element, true);
                    byteOffset += 4;
                    break;
                case 'double':
                    data.setFloat64(byteOffset, element, true);
                    byteOffset += 8;
                    break;
            }
        });
        if (!this.dataChannelSender.canSend()) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Info(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), `Data channel cannot send yet, skipping sending message: ${messageType} - ${new Uint8Array(data.buffer)}`);
            return;
        }
        else {
            this.dataChannelSender.sendData(data.buffer);
        }
    }
}


/***/ }),

/***/ "./src/UeInstanceMessage/StreamMessageController.ts":
/*!**********************************************************!*\
  !*** ./src/UeInstanceMessage/StreamMessageController.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_234494__) => {

__nested_webpack_require_234494__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_234494__.d(__webpack_exports__, {
/* harmony export */   "MessageDirection": () => (/* binding */ MessageDirection),
/* harmony export */   "StreamMessageController": () => (/* binding */ StreamMessageController),
/* harmony export */   "ToStreamerMessage": () => (/* binding */ ToStreamerMessage)
/* harmony export */ });
/* harmony import */ var _TwoWayMap__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_234494__(/*! ./TwoWayMap */ "./src/UeInstanceMessage/TwoWayMap.ts");
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_234494__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
// Copyright Epic Games, Inc. All Rights Reserved.


class ToStreamerMessage {
}
class StreamMessageController {
    constructor() {
        this.toStreamerHandlers = new Map();
        this.fromStreamerHandlers = new Map();
        this.toStreamerMessages = new _TwoWayMap__WEBPACK_IMPORTED_MODULE_0__.TwoWayMap();
        this.fromStreamerMessages = new _TwoWayMap__WEBPACK_IMPORTED_MODULE_0__.TwoWayMap();
    }
    /**
     * Populate the Default message protocol
     */
    populateDefaultProtocol() {
        /*
         * Control Messages. Range = 0..49.
         */
        this.toStreamerMessages.add('IFrameRequest', {
            id: 0,
            byteLength: 0,
            structure: []
        });
        this.toStreamerMessages.add('RequestQualityControl', {
            id: 1,
            byteLength: 0,
            structure: []
        });
        this.toStreamerMessages.add('FpsRequest', {
            id: 2,
            byteLength: 0,
            structure: []
        });
        this.toStreamerMessages.add('AverageBitrateRequest', {
            id: 3,
            byteLength: 0,
            structure: []
        });
        this.toStreamerMessages.add('StartStreaming', {
            id: 4,
            byteLength: 0,
            structure: []
        });
        this.toStreamerMessages.add('StopStreaming', {
            id: 5,
            byteLength: 0,
            structure: []
        });
        this.toStreamerMessages.add('LatencyTest', {
            id: 6,
            byteLength: 0,
            structure: []
        });
        this.toStreamerMessages.add('RequestInitialSettings', {
            id: 7,
            byteLength: 0,
            structure: []
        });
        this.toStreamerMessages.add('TestEcho', {
            id: 8,
            byteLength: 0,
            structure: []
        });
        /*
         * Input Messages. Range = 50..89.
         */
        // Generic Input Messages. Range = 50..59.
        this.toStreamerMessages.add('UIInteraction', {
            id: 50,
            byteLength: 0,
            structure: []
        });
        this.toStreamerMessages.add('Command', {
            id: 51,
            byteLength: 0,
            structure: []
        });
        // Keyboard Input Message. Range = 60..69.
        this.toStreamerMessages.add('KeyDown', {
            id: 60,
            byteLength: 2,
            //            keyCode  isRepeat
            structure: ['uint8', 'uint8']
        });
        this.toStreamerMessages.add('KeyUp', {
            id: 61,
            byteLength: 1,
            //            keyCode
            structure: ['uint8']
        });
        this.toStreamerMessages.add('KeyPress', {
            id: 62,
            byteLength: 2,
            //            charcode
            structure: ['uint16']
        });
        // Mouse Input Messages. Range = 70..79.
        this.toStreamerMessages.add('MouseEnter', {
            id: 70,
            byteLength: 0,
            structure: []
        });
        this.toStreamerMessages.add('MouseLeave', {
            id: 71,
            byteLength: 0,
            structure: []
        });
        this.toStreamerMessages.add('MouseDown', {
            id: 72,
            byteLength: 5,
            //              button     x         y
            structure: ['uint8', 'uint16', 'uint16']
        });
        this.toStreamerMessages.add('MouseUp', {
            id: 73,
            byteLength: 5,
            //              button     x         y
            structure: ['uint8', 'uint16', 'uint16']
        });
        this.toStreamerMessages.add('MouseMove', {
            id: 74,
            byteLength: 8,
            //              x           y      deltaX    deltaY
            structure: ['uint16', 'uint16', 'int16', 'int16']
        });
        this.toStreamerMessages.add('MouseWheel', {
            id: 75,
            byteLength: 6,
            //              delta       x        y
            structure: ['int16', 'uint16', 'uint16']
        });
        this.toStreamerMessages.add('MouseDouble', {
            id: 76,
            byteLength: 5,
            //              button     x         y
            structure: ['uint8', 'uint16', 'uint16']
        });
        // Touch Input Messages. Range = 80..89.
        this.toStreamerMessages.add('TouchStart', {
            id: 80,
            byteLength: 8,
            //          numtouches(1)   x       y        idx     force     valid
            structure: ['uint8', 'uint16', 'uint16', 'uint8', 'uint8', 'uint8']
        });
        this.toStreamerMessages.add('TouchEnd', {
            id: 81,
            byteLength: 8,
            //          numtouches(1)   x       y        idx     force     valid
            structure: ['uint8', 'uint16', 'uint16', 'uint8', 'uint8', 'uint8']
        });
        this.toStreamerMessages.add('TouchMove', {
            id: 82,
            byteLength: 8,
            //          numtouches(1)   x       y       idx      force     valid
            structure: ['uint8', 'uint16', 'uint16', 'uint8', 'uint8', 'uint8']
        });
        // Gamepad Input Messages. Range = 90..99
        this.toStreamerMessages.add('GamepadConnected', {
            id: 93,
            byteLength: 0,
            structure: []
        });
        this.toStreamerMessages.add('GamepadButtonPressed', {
            id: 90,
            byteLength: 3,
            //            ctrlerId   button  isRepeat
            structure: ['uint8', 'uint8', 'uint8']
        });
        this.toStreamerMessages.add('GamepadButtonReleased', {
            id: 91,
            byteLength: 3,
            //            ctrlerId   button  isRepeat(0)
            structure: ['uint8', 'uint8', 'uint8']
        });
        this.toStreamerMessages.add('GamepadAnalog', {
            id: 92,
            byteLength: 10,
            //            ctrlerId   button  analogValue
            structure: ['uint8', 'uint8', 'double']
        });
        this.toStreamerMessages.add('GamepadDisconnected', {
            id: 94,
            byteLength: 1,
            //          ctrlerId
            structure: ['uint8']
        });
        this.fromStreamerMessages.add('QualityControlOwnership', 0);
        this.fromStreamerMessages.add('Response', 1);
        this.fromStreamerMessages.add('Command', 2);
        this.fromStreamerMessages.add('FreezeFrame', 3);
        this.fromStreamerMessages.add('UnfreezeFrame', 4);
        this.fromStreamerMessages.add('VideoEncoderAvgQP', 5);
        this.fromStreamerMessages.add('LatencyTest', 6);
        this.fromStreamerMessages.add('InitialSettings', 7);
        this.fromStreamerMessages.add('FileExtension', 8);
        this.fromStreamerMessages.add('FileMimeType', 9);
        this.fromStreamerMessages.add('FileContents', 10);
        this.fromStreamerMessages.add('TestEcho', 11);
        this.fromStreamerMessages.add('InputControlOwnership', 12);
        this.fromStreamerMessages.add('GamepadResponse', 13);
        this.fromStreamerMessages.add('Protocol', 255);
    }
    /**
     * Register a message handler
     * @param messageDirection - the direction of the message; toStreamer or fromStreamer
     * @param messageType - the type of the message
     * @param messageHandler - the function or method to be executed when this handler is called
     */
    registerMessageHandler(messageDirection, messageType, messageHandler) {
        switch (messageDirection) {
            case MessageDirection.ToStreamer:
                this.toStreamerHandlers.set(messageType, messageHandler);
                break;
            case MessageDirection.FromStreamer:
                this.fromStreamerHandlers.set(messageType, messageHandler);
                break;
            default:
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), `Unknown message direction ${messageDirection}`);
        }
    }
}
/**
 * The enum for message directions
 */
var MessageDirection;
(function (MessageDirection) {
    MessageDirection[MessageDirection["ToStreamer"] = 0] = "ToStreamer";
    MessageDirection[MessageDirection["FromStreamer"] = 1] = "FromStreamer";
})(MessageDirection || (MessageDirection = {}));


/***/ }),

/***/ "./src/UeInstanceMessage/ToStreamerMessagesController.ts":
/*!***************************************************************!*\
  !*** ./src/UeInstanceMessage/ToStreamerMessagesController.ts ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_244053__) => {

__nested_webpack_require_244053__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_244053__.d(__webpack_exports__, {
/* harmony export */   "ToStreamerMessagesController": () => (/* binding */ ToStreamerMessagesController)
/* harmony export */ });
// Copyright Epic Games, Inc. All Rights Reserved.
class ToStreamerMessagesController {
    /**
     * @param sendMessageController - Stream message controller instance
     */
    constructor(sendMessageController) {
        this.sendMessageController = sendMessageController;
    }
    /**
     * Send Request to Take Quality Control to the UE Instance
     */
    SendRequestQualityControl() {
        this.sendMessageController.sendMessageToStreamer('RequestQualityControl');
    }
    /**
     * Send Max FPS Request to the UE Instance
     */
    SendMaxFpsRequest() {
        this.sendMessageController.sendMessageToStreamer('FpsRequest');
    }
    /**
     * Send Average Bitrate Request to the UE Instance
     */
    SendAverageBitrateRequest() {
        this.sendMessageController.sendMessageToStreamer('AverageBitrateRequest');
    }
    /**
     * Send a Start Streaming Message to the UE Instance
     */
    SendStartStreaming() {
        this.sendMessageController.sendMessageToStreamer('StartStreaming');
    }
    /**
     * Send a Stop Streaming Message to the UE Instance
     */
    SendStopStreaming() {
        this.sendMessageController.sendMessageToStreamer('StopStreaming');
    }
    /**
     * Send a Request Initial Settings to the UE Instance
     */
    SendRequestInitialSettings() {
        this.sendMessageController.sendMessageToStreamer('RequestInitialSettings');
    }
}


/***/ }),

/***/ "./src/UeInstanceMessage/TwoWayMap.ts":
/*!********************************************!*\
  !*** ./src/UeInstanceMessage/TwoWayMap.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_246037__) => {

__nested_webpack_require_246037__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_246037__.d(__webpack_exports__, {
/* harmony export */   "TwoWayMap": () => (/* binding */ TwoWayMap)
/* harmony export */ });
// Copyright Epic Games, Inc. All Rights Reserved.
class TwoWayMap {
    /**
     * @param map - an optional map of parameters
     */
    constructor() {
        this.map = new Map();
        this.reverseMap = new Map();
    }
    /**
     * Get the value from the map by key
     * @param key - the key we are searching by
     * @returns - the value associated with the key
     */
    getFromKey(key) {
        return this.map.get(key);
    }
    /**
     * Get the reverse key from the map by searching by value
     * @param value - the key we are searching by
     * @returns - they key associated with the value
     */
    getFromValue(value) {
        return this.reverseMap.get(value);
    }
    /**
     * Add a key and value to both the map and reverse map
     * @param key - the indexing key
     * @param value - the value associated with the key
     */
    add(key, value) {
        this.map.set(key, value);
        this.reverseMap.set(value, key);
    }
    /**
     * Remove a key and value from both the map and reverse map
     * @param key - the indexing key
     * @param value - the value associated with the key
     */
    remove(key, value) {
        this.map.delete(key);
        this.reverseMap.delete(value);
    }
}


/***/ }),

/***/ "./src/Util/CoordinateConverter.ts":
/*!*****************************************!*\
  !*** ./src/Util/CoordinateConverter.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_247810__) => {

__nested_webpack_require_247810__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_247810__.d(__webpack_exports__, {
/* harmony export */   "CoordinateConverter": () => (/* binding */ CoordinateConverter),
/* harmony export */   "NormalizedQuantizedSignedCoord": () => (/* binding */ NormalizedQuantizedSignedCoord),
/* harmony export */   "NormalizedQuantizedUnsignedCoord": () => (/* binding */ NormalizedQuantizedUnsignedCoord),
/* harmony export */   "UnquantizedDenormalizedUnsignedCoord": () => (/* binding */ UnquantizedDenormalizedUnsignedCoord)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_247810__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
// Copyright Epic Games, Inc. All Rights Reserved.

/**
 * Converts coordinates from element relative coordinates to values normalized within the value range of a short (and back again)
 */
class CoordinateConverter {
    /**
     * @param videoElementProvider - the div element that the video player will be injected into
     */
    constructor(videoElementProvider) {
        this.videoElementProvider = videoElementProvider;
        this.normalizeAndQuantizeUnsignedFunc = () => {
            throw new Error('Normalize and quantize unsigned, method not implemented.');
        };
        this.normalizeAndQuantizeSignedFunc = () => {
            throw new Error('Normalize and unquantize signed, method not implemented.');
        };
        this.denormalizeAndUnquantizeUnsignedFunc = () => {
            throw new Error('Denormalize and unquantize unsigned, method not implemented.');
        };
    }
    /**
     * The surface method for setterNormalizeAndQuantizeUnsigned
     * @param x - x axis point
     * @param y - y axis point
     */
    normalizeAndQuantizeUnsigned(x, y) {
        return this.normalizeAndQuantizeUnsignedFunc(x, y);
    }
    /**
     * The surface method for setterUnquantizeAndDenormalizeUnsigned
     * @param x - x axis point
     * @param y - y axis point
     */
    unquantizeAndDenormalizeUnsigned(x, y) {
        return this.denormalizeAndUnquantizeUnsignedFunc(x, y);
    }
    /**
     * The surface method for setterNormalizeAndQuantizeSigned
     * @param x - x axis point
     * @param y - y axis point
     */
    normalizeAndQuantizeSigned(x, y) {
        return this.normalizeAndQuantizeSignedFunc(x, y);
    }
    /**
     * set up the Normalize And Quantize methods based on the aspect ratio and the video player ratio
     */
    setupNormalizeAndQuantize() {
        this.videoElementParent =
            this.videoElementProvider.getVideoParentElement();
        this.videoElement = this.videoElementProvider.getVideoElement();
        if (this.videoElementParent && this.videoElement) {
            const playerAspectRatio = this.videoElementParent.clientHeight /
                this.videoElementParent.clientWidth;
            const videoAspectRatio = this.videoElement.videoHeight / this.videoElement.videoWidth;
            if (playerAspectRatio > videoAspectRatio) {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'Setup Normalize and Quantize for playerAspectRatio > videoAspectRatio', 6);
                this.ratio = playerAspectRatio / videoAspectRatio;
                this.normalizeAndQuantizeUnsignedFunc = (x, y) => this.normalizeAndQuantizeUnsignedPlayerBigger(x, y);
                this.normalizeAndQuantizeSignedFunc = (x, y) => this.normalizeAndQuantizeSignedPlayerBigger(x, y);
                this.denormalizeAndUnquantizeUnsignedFunc = (x, y) => this.denormalizeAndUnquantizeUnsignedPlayerBigger(x, y);
            }
            else {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'Setup Normalize and Quantize for playerAspectRatio <= videoAspectRatio', 6);
                this.ratio = videoAspectRatio / playerAspectRatio;
                this.normalizeAndQuantizeUnsignedFunc = (x, y) => this.normalizeAndQuantizeUnsignedPlayerSmaller(x, y);
                this.normalizeAndQuantizeSignedFunc = (x, y) => this.normalizeAndQuantizeSignedPlayerSmaller(x, y);
                this.denormalizeAndUnquantizeUnsignedFunc = (x, y) => this.denormalizeAndUnquantizeUnsignedPlayerSmaller(x, y);
            }
        }
    }
    /**
     * normalizeAndQuantizeUnsigned for playerAspectRatio > videoAspectRatio
     * @param x - x axis point
     * @param y - y axis point
     */
    normalizeAndQuantizeUnsignedPlayerBigger(x, y) {
        const normalizedX = x / this.videoElementParent.clientWidth;
        const normalizedY = this.ratio * (y / this.videoElementParent.clientHeight - 0.5) + 0.5;
        if (normalizedX < 0.0 ||
            normalizedX > 1.0 ||
            normalizedY < 0.0 ||
            normalizedY > 1.0) {
            return new NormalizedQuantizedUnsignedCoord(false, 65535, 65535);
        }
        else {
            return new NormalizedQuantizedUnsignedCoord(true, normalizedX * 65536, normalizedY * 65536);
        }
    }
    /**
     * unquantizeAndDenormalizeUnsigned for playerAspectRatio > videoAspectRatio
     * @param x - x axis point
     * @param y - y axis point
     */
    denormalizeAndUnquantizeUnsignedPlayerBigger(x, y) {
        const normalizedX = x / 65536;
        const normalizedY = (y / 65536 - 0.5) / this.ratio + 0.5;
        return new UnquantizedDenormalizedUnsignedCoord(normalizedX * this.videoElementParent.clientWidth, normalizedY * this.videoElementParent.clientHeight);
    }
    /**
     * normalizeAndQuantizeSigned for playerAspectRatio > videoAspectRatio
     * @param x - x axis point
     * @param y - y axis point
     */
    normalizeAndQuantizeSignedPlayerBigger(x, y) {
        const normalizedX = x / (0.5 * this.videoElementParent.clientWidth);
        const normalizedY = (this.ratio * y) / (0.5 * this.videoElementParent.clientHeight);
        return new NormalizedQuantizedSignedCoord(normalizedX * 32767, normalizedY * 32767);
    }
    /**
     * normalizeAndQuantizeUnsigned for playerAspectRatio <= videoAspectRatio
     * @param x - x axis point
     * @param y - y axis point
     */
    normalizeAndQuantizeUnsignedPlayerSmaller(x, y) {
        const normalizedX = this.ratio * (x / this.videoElementParent.clientWidth - 0.5) + 0.5;
        const normalizedY = y / this.videoElementParent.clientHeight;
        if (normalizedX < 0.0 ||
            normalizedX > 1.0 ||
            normalizedY < 0.0 ||
            normalizedY > 1.0) {
            return new NormalizedQuantizedUnsignedCoord(false, 65535, 65535);
        }
        else {
            return new NormalizedQuantizedUnsignedCoord(true, normalizedX * 65536, normalizedY * 65536);
        }
    }
    /**
     * unquantizeAndDenormalizeUnsigned for playerAspectRatio <= videoAspectRatio
     * @param x - x axis point
     * @param y - y axis point
     */
    denormalizeAndUnquantizeUnsignedPlayerSmaller(x, y) {
        const normalizedX = (x / 65536 - 0.5) / this.ratio + 0.5;
        const normalizedY = y / 65536;
        return new UnquantizedDenormalizedUnsignedCoord(normalizedX * this.videoElementParent.clientWidth, normalizedY * this.videoElementParent.clientHeight);
    }
    /**
     * normalizeAndQuantizeSigned for playerAspectRatio <= videoAspectRatio
     * @param x - x axis point
     * @param y - y axis point
     */
    normalizeAndQuantizeSignedPlayerSmaller(x, y) {
        const normalizedX = (this.ratio * x) / (0.5 * this.videoElementParent.clientWidth);
        const normalizedY = y / (0.5 * this.videoElementParent.clientHeight);
        return new NormalizedQuantizedSignedCoord(normalizedX * 32767, normalizedY * 32767);
    }
}
/**
 * A class for NormalizeAndQuantizeUnsigned objects
 */
class NormalizedQuantizedUnsignedCoord {
    constructor(inRange, x, y) {
        this.inRange = inRange;
        this.x = x;
        this.y = y;
    }
}
/**
 * A class for UnquantizedAndDenormalizeUnsigned objects
 */
class UnquantizedDenormalizedUnsignedCoord {
    constructor(x, y) {
        this.x = x;
        this.y = y;
    }
}
/**
 * A class for NormalizedQuantizedSignedCoord objects
 */
class NormalizedQuantizedSignedCoord {
    constructor(x, y) {
        this.x = x;
        this.y = y;
    }
}


/***/ }),

/***/ "./src/Util/EventEmitter.ts":
/*!**********************************!*\
  !*** ./src/Util/EventEmitter.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_256594__) => {

__nested_webpack_require_256594__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_256594__.d(__webpack_exports__, {
/* harmony export */   "AfkTimedOutEvent": () => (/* binding */ AfkTimedOutEvent),
/* harmony export */   "AfkWarningActivateEvent": () => (/* binding */ AfkWarningActivateEvent),
/* harmony export */   "AfkWarningDeactivateEvent": () => (/* binding */ AfkWarningDeactivateEvent),
/* harmony export */   "AfkWarningUpdateEvent": () => (/* binding */ AfkWarningUpdateEvent),
/* harmony export */   "DataChannelCloseEvent": () => (/* binding */ DataChannelCloseEvent),
/* harmony export */   "DataChannelErrorEvent": () => (/* binding */ DataChannelErrorEvent),
/* harmony export */   "DataChannelOpenEvent": () => (/* binding */ DataChannelOpenEvent),
/* harmony export */   "EventEmitter": () => (/* binding */ EventEmitter),
/* harmony export */   "HideFreezeFrameEvent": () => (/* binding */ HideFreezeFrameEvent),
/* harmony export */   "InitialSettingsEvent": () => (/* binding */ InitialSettingsEvent),
/* harmony export */   "LatencyTestResultEvent": () => (/* binding */ LatencyTestResultEvent),
/* harmony export */   "LoadFreezeFrameEvent": () => (/* binding */ LoadFreezeFrameEvent),
/* harmony export */   "PlayStreamErrorEvent": () => (/* binding */ PlayStreamErrorEvent),
/* harmony export */   "PlayStreamEvent": () => (/* binding */ PlayStreamEvent),
/* harmony export */   "PlayStreamRejectedEvent": () => (/* binding */ PlayStreamRejectedEvent),
/* harmony export */   "SettingsChangedEvent": () => (/* binding */ SettingsChangedEvent),
/* harmony export */   "StatsReceivedEvent": () => (/* binding */ StatsReceivedEvent),
/* harmony export */   "StreamLoadingEvent": () => (/* binding */ StreamLoadingEvent),
/* harmony export */   "StreamPreConnectEvent": () => (/* binding */ StreamPreConnectEvent),
/* harmony export */   "StreamPreDisconnectEvent": () => (/* binding */ StreamPreDisconnectEvent),
/* harmony export */   "StreamReconnectEvent": () => (/* binding */ StreamReconnectEvent),
/* harmony export */   "StreamerListMessageEvent": () => (/* binding */ StreamerListMessageEvent),
/* harmony export */   "VideoEncoderAvgQPEvent": () => (/* binding */ VideoEncoderAvgQPEvent),
/* harmony export */   "VideoInitializedEvent": () => (/* binding */ VideoInitializedEvent),
/* harmony export */   "WebRtcAutoConnectEvent": () => (/* binding */ WebRtcAutoConnectEvent),
/* harmony export */   "WebRtcConnectedEvent": () => (/* binding */ WebRtcConnectedEvent),
/* harmony export */   "WebRtcConnectingEvent": () => (/* binding */ WebRtcConnectingEvent),
/* harmony export */   "WebRtcDisconnectedEvent": () => (/* binding */ WebRtcDisconnectedEvent),
/* harmony export */   "WebRtcFailedEvent": () => (/* binding */ WebRtcFailedEvent),
/* harmony export */   "WebRtcSdpEvent": () => (/* binding */ WebRtcSdpEvent),
/* harmony export */   "XrFrameEvent": () => (/* binding */ XrFrameEvent),
/* harmony export */   "XrSessionEndedEvent": () => (/* binding */ XrSessionEndedEvent),
/* harmony export */   "XrSessionStartedEvent": () => (/* binding */ XrSessionStartedEvent)
/* harmony export */ });
/**
 * An event that is emitted when AFK disconnect is about to happen.
 * Can be cancelled by calling the callback function provided as part of the event.
 */
class AfkWarningActivateEvent extends Event {
    constructor(data) {
        super('afkWarningActivate');
        this.data = data;
    }
}
/**
 * An event that is emitted when the AFK disconnect countdown is updated.
 */
class AfkWarningUpdateEvent extends Event {
    constructor(data) {
        super('afkWarningUpdate');
        this.data = data;
    }
}
/**
 * An event that is emitted when AFK warning is deactivated.
 */
class AfkWarningDeactivateEvent extends Event {
    constructor() {
        super('afkWarningDeactivate');
    }
}
/**
 * An event that is emitted when AFK countdown reaches 0 and the user is disconnected.
 */
class AfkTimedOutEvent extends Event {
    constructor() {
        super('afkTimedOut');
    }
}
/**
 * An event that is emitted when we receive new video quality value.
 */
class VideoEncoderAvgQPEvent extends Event {
    constructor(data) {
        super('videoEncoderAvgQP');
        this.data = data;
    }
}
/**
 * An event that is emitted after a WebRtc connection has been negotiated.
 */
class WebRtcSdpEvent extends Event {
    constructor() {
        super('webRtcSdp');
    }
}
/**
 * An event that is emitted when auto connecting.
 */
class WebRtcAutoConnectEvent extends Event {
    constructor() {
        super('webRtcAutoConnect');
    }
}
/**
 * An event that is emitted when sending a WebRtc offer.
 */
class WebRtcConnectingEvent extends Event {
    constructor() {
        super('webRtcConnecting');
    }
}
/**
 * An event that is emitted when WebRtc connection has been established.
 */
class WebRtcConnectedEvent extends Event {
    constructor() {
        super('webRtcConnected');
    }
}
/**
 * An event that is emitted if WebRtc connection has failed.
 */
class WebRtcFailedEvent extends Event {
    constructor() {
        super('webRtcFailed');
    }
}
/**
 * An event that is emitted if WebRtc connection is disconnected.
 */
class WebRtcDisconnectedEvent extends Event {
    constructor(data) {
        super('webRtcDisconnected');
        this.data = data;
    }
}
/**
 * An event that is emitted when RTCDataChannel is opened.
 */
class DataChannelOpenEvent extends Event {
    constructor(data) {
        super('dataChannelOpen');
        this.data = data;
    }
}
/**
 * An event that is emitted when RTCDataChannel is closed.
 */
class DataChannelCloseEvent extends Event {
    constructor(data) {
        super('dataChannelClose');
        this.data = data;
    }
}
/**
 * An event that is emitted on RTCDataChannel errors.
 */
class DataChannelErrorEvent extends Event {
    constructor(data) {
        super('dataChannelError');
        this.data = data;
    }
}
/**
 * An event that is emitted when the video stream has been initialized.
 */
class VideoInitializedEvent extends Event {
    constructor() {
        super('videoInitialized');
    }
}
/**
 * An event that is emitted when video stream loading starts.
 */
class StreamLoadingEvent extends Event {
    constructor() {
        super('streamLoading');
    }
}
/**
 * An event that is emitted when video stream loading has finished.
 */
class StreamPreConnectEvent extends Event {
    constructor() {
        super('streamConnect');
    }
}
/**
 * An event that is emitted when video stream has stopped.
 */
class StreamPreDisconnectEvent extends Event {
    constructor() {
        super('streamDisconnect');
    }
}
/**
 * An event that is emitted when video stream is reconnecting.
 */
class StreamReconnectEvent extends Event {
    constructor() {
        super('streamReconnect');
    }
}
/**
 * An event that is emitted if there are errors loading the video stream.
 */
class PlayStreamErrorEvent extends Event {
    constructor(data) {
        super('playStreamError');
        this.data = data;
    }
}
/**
 * An event that is emitted before trying to start video playback.
 */
class PlayStreamEvent extends Event {
    constructor() {
        super('playStream');
    }
}
/**
 * An event that is emitted if the browser rejects video playback. Can happen for example if
 * video auto-play without user interaction is refused by the browser.
 */
class PlayStreamRejectedEvent extends Event {
    constructor(data) {
        super('playStreamRejected');
        this.data = data;
    }
}
/**
 * An event that is emitted when receiving a full FreezeFrame image from UE.
 */
class LoadFreezeFrameEvent extends Event {
    constructor(data) {
        super('loadFreezeFrame');
        this.data = data;
    }
}
/**
 * An event that is emitted when receiving UnfreezeFrame message from UE and video playback is about to be resumed.
 */
class HideFreezeFrameEvent extends Event {
    constructor() {
        super('hideFreezeFrame');
    }
}
/**
 * An event that is emitted when receiving WebRTC statistics.
 */
class StatsReceivedEvent extends Event {
    constructor(data) {
        super('statsReceived');
        this.data = data;
    }
}
/**
 * An event that is emitted when streamer list changes.
 */
class StreamerListMessageEvent extends Event {
    constructor(data) {
        super('streamerListMessage');
        this.data = data;
    }
}
/**
 * An event that is emitted when receiving latency test results.
 */
class LatencyTestResultEvent extends Event {
    constructor(data) {
        super('latencyTestResult');
        this.data = data;
    }
}
/**
 * An event that is emitted when receiving initial settings from UE.
 */
class InitialSettingsEvent extends Event {
    constructor(data) {
        super('initialSettings');
        this.data = data;
    }
}
/**
 * An event that is emitted when PixelStreaming settings change.
 */
class SettingsChangedEvent extends Event {
    constructor(data) {
        super('settingsChanged');
        this.data = data;
    }
}
/**
 * Event emitted when an XR Session starts
 */
class XrSessionStartedEvent extends Event {
    constructor() {
        super('xrSessionStarted');
    }
}
/**
 * Event emitted when an XR Session ends
 */
class XrSessionEndedEvent extends Event {
    constructor() {
        super('xrSessionEnded');
    }
}
/**
 * Event emitted when an XR Frame is complete
 */
class XrFrameEvent extends Event {
    constructor(data) {
        super('xrFrame');
        this.data = data;
    }
}
class EventEmitter extends EventTarget {
    /**
     * Dispatch a new event.
     * @param e event
     * @returns
     */
    dispatchEvent(e) {
        return super.dispatchEvent(e);
    }
    /**
     * Register an event handler.
     * @param type event name
     * @param listener event handler function
     */
    addEventListener(type, listener) {
        super.addEventListener(type, listener);
    }
    /**
     * Remove an event handler.
     * @param type event name
     * @param listener event handler function
     */
    removeEventListener(type, listener) {
        super.removeEventListener(type, listener);
    }
}


/***/ }),

/***/ "./src/Util/EventListenerTracker.ts":
/*!******************************************!*\
  !*** ./src/Util/EventListenerTracker.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_267304__) => {

__nested_webpack_require_267304__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_267304__.d(__webpack_exports__, {
/* harmony export */   "EventListenerTracker": () => (/* binding */ EventListenerTracker)
/* harmony export */ });
// Copyright Epic Games, Inc. All Rights Reserved.
class EventListenerTracker {
    constructor() {
        this.unregisterCallbacks = [];
    }
    /**
     * Add a new callback that is executed when unregisterAll is called.
     * @param callback
     */
    addUnregisterCallback(callback) {
        this.unregisterCallbacks.push(callback);
    }
    /**
     * Execute all callbacks and clear the list.
     */
    unregisterAll() {
        for (const callback of this.unregisterCallbacks) {
            callback();
        }
        this.unregisterCallbacks = [];
    }
}


/***/ }),

/***/ "./src/Util/FileUtil.ts":
/*!******************************!*\
  !*** ./src/Util/FileUtil.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_268361__) => {

__nested_webpack_require_268361__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_268361__.d(__webpack_exports__, {
/* harmony export */   "FileTemplate": () => (/* binding */ FileTemplate),
/* harmony export */   "FileUtil": () => (/* binding */ FileUtil)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_268361__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
// Copyright Epic Games, Inc. All Rights Reserved.

/**
 * Utility function for populate file information from byte buffers.
 */
class FileUtil {
    /**
     * Processes a files extension when received over data channel
     * @param view - the file extension data
     */
    static setExtensionFromBytes(view, file) {
        // Reset file if we got a file message and we are not "receiving" it yet
        if (!file.receiving) {
            file.mimetype = '';
            file.extension = '';
            file.receiving = true;
            file.valid = false;
            file.size = 0;
            file.data = [];
            file.timestampStart = new Date().getTime();
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'Received first chunk of file', 6);
        }
        const extensionAsString = new TextDecoder('utf-16').decode(view.slice(1));
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), extensionAsString, 6);
        file.extension = extensionAsString;
    }
    /**
     * Processes a files mime type when received over data channel
     * @param view - the file mime type data
     */
    static setMimeTypeFromBytes(view, file) {
        // Reset file if we got a file message and we are not "receiving" it yet
        if (!file.receiving) {
            file.mimetype = '';
            file.extension = '';
            file.receiving = true;
            file.valid = false;
            file.size = 0;
            file.data = [];
            file.timestampStart = new Date().getTime();
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'Received first chunk of file', 6);
        }
        const mimeAsString = new TextDecoder('utf-16').decode(view.slice(1));
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), mimeAsString, 6);
        file.mimetype = mimeAsString;
    }
    /**
     * Processes a files contents when received over data channel
     * @param view - the file contents data
     */
    static setContentsFromBytes(view, file) {
        // If we haven't received the initial setup instructions, return
        if (!file.receiving)
            return;
        // Extract the total size of the file (across all chunks)
        file.size = Math.ceil(new DataView(view.slice(1, 5).buffer).getInt32(0, true) /
            16379 /* The maximum number of payload bits per message*/);
        // Get the file part of the payload
        const fileBytes = view.slice(1 + 4);
        // Append to existing data that holds the file
        file.data.push(fileBytes);
        // Uncomment for debug
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), `Received file chunk: ${file.data.length}/${file.size}`, 6);
        if (file.data.length === file.size) {
            file.receiving = false;
            file.valid = true;
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'Received complete file', 6);
            const transferDuration = new Date().getTime() - file.timestampStart;
            const transferBitrate = Math.round((file.size * 16 * 1024) / transferDuration);
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), `Average transfer bitrate: ${transferBitrate}kb/s over ${transferDuration / 1000} seconds`, 6);
            // File reconstruction
            /**
             * Example code to reconstruct the file
             *
             * This code reconstructs the received data into the original file based on the mime type and extension provided and then downloads the reconstructed file
             */
            const received = new Blob(file.data, { type: file.mimetype });
            const a = document.createElement('a');
            a.setAttribute('href', URL.createObjectURL(received));
            a.setAttribute('download', `transfer.${file.extension}`);
            document.body.append(a);
            // if you are so inclined to make it auto-download, do something like: a.click();
            a.remove();
        }
        else if (file.data.length > file.size) {
            file.receiving = false;
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), `Received bigger file than advertised: ${file.data.length}/${file.size}`);
        }
    }
}
/**
 * A class that represents a template for a downloaded file
 */
class FileTemplate {
    constructor() {
        this.mimetype = '';
        this.extension = '';
        this.receiving = false;
        this.size = 0;
        this.data = [];
        this.valid = false;
    }
}


/***/ }),

/***/ "./src/Util/WebGLUtils.ts":
/*!********************************!*\
  !*** ./src/Util/WebGLUtils.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_274177__) => {

__nested_webpack_require_274177__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_274177__.d(__webpack_exports__, {
/* harmony export */   "WebGLUtils": () => (/* binding */ WebGLUtils)
/* harmony export */ });
// Copyright Epic Games, Inc. All Rights Reserved.
class WebGLUtils {
    static vertexShader() {
        return `
		attribute vec2 a_position;
		attribute vec2 a_texCoord;

		// input
		uniform vec2 u_resolution;
		uniform vec4 u_offset;

		//
		varying vec2 v_texCoord;

		void main() {
		   // convert the rectangle from pixels to 0.0 to 1.0
		   vec2 zeroToOne = a_position / u_resolution;

		   // convert from 0->1 to 0->2
		   vec2 zeroToTwo = zeroToOne * 2.0;

		   // convert from 0->2 to -1->+1 (clipspace)
		   vec2 clipSpace = zeroToTwo - 1.0;

		   gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);
		   // pass the texCoord to the fragment shader
		   // The GPU will interpolate this value between points.
		   v_texCoord = (a_texCoord * u_offset.xy) + u_offset.zw;
		}
		`;
    }
    static fragmentShader() {
        return `
		precision mediump float;

		// our texture
		uniform sampler2D u_image;

		// the texCoords passed in from the vertex shader.
		varying vec2 v_texCoord;

		void main() {
		   gl_FragColor = texture2D(u_image, v_texCoord);
		}
		`;
    }
}


/***/ }),

/***/ "./src/Util/WebXRUtils.ts":
/*!********************************!*\
  !*** ./src/Util/WebXRUtils.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_275717__) => {

__nested_webpack_require_275717__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_275717__.d(__webpack_exports__, {
/* harmony export */   "WebXRUtils": () => (/* binding */ WebXRUtils)
/* harmony export */ });
// Copyright Epic Games, Inc. All Rights Reserved.
class WebXRUtils {
    /**
     * Deep copies a gamepad's values by first converting it to a JSON object and then back to a gamepad
     *
     * @param gamepad the original gamepad
     * @returns a new gamepad object, populated with the original gamepads values
     */
    static deepCopyGamepad(gamepad) {
        return JSON.parse(JSON.stringify({
            buttons: gamepad.buttons.map((b) => JSON.parse(JSON.stringify({
                pressed: b.pressed,
                touched: b.touched
            }))),
            axes: gamepad.axes
        }));
    }
}


/***/ }),

/***/ "./src/VideoPlayer/StreamController.ts":
/*!*********************************************!*\
  !*** ./src/VideoPlayer/StreamController.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_276854__) => {

__nested_webpack_require_276854__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_276854__.d(__webpack_exports__, {
/* harmony export */   "StreamController": () => (/* binding */ StreamController)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_276854__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
// Copyright Epic Games, Inc. All Rights Reserved.

/**
 * Video Player Controller handles the creation of the video HTML element and all handlers
 */
class StreamController {
    /**
     * @param videoElementProvider Video Player instance
     */
    constructor(videoElementProvider) {
        this.videoElementProvider = videoElementProvider;
        this.audioElement = document.createElement('Audio');
    }
    /**
     * Handles when the Peer connection has a track event
     * @param rtcTrackEvent - RTC Track Event
     */
    handleOnTrack(rtcTrackEvent) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'handleOnTrack ' + JSON.stringify(rtcTrackEvent.streams), 6);
        const videoElement = this.videoElementProvider.getVideoElement();
        if (rtcTrackEvent.track) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'Got track - ' +
                rtcTrackEvent.track.kind +
                ' id=' +
                rtcTrackEvent.track.id +
                ' readyState=' +
                rtcTrackEvent.track.readyState, 6);
        }
        if (rtcTrackEvent.track.kind == 'audio') {
            this.CreateAudioTrack(rtcTrackEvent.streams[0]);
            return;
        }
        else if (rtcTrackEvent.track.kind == 'video' &&
            videoElement.srcObject !== rtcTrackEvent.streams[0]) {
            videoElement.srcObject = rtcTrackEvent.streams[0];
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'Set video source from video track ontrack.');
            return;
        }
    }
    /**
     * Creates the audio device when receiving an RTCTrackEvent with the kind of "audio"
     * @param audioMediaStream - Audio Media stream track
     */
    CreateAudioTrack(audioMediaStream) {
        const videoElement = this.videoElementProvider.getVideoElement();
        // do nothing the video has the same media stream as the audio track we have here (they are linked)
        if (videoElement.srcObject == audioMediaStream) {
            return;
        }
        // video element has some other media stream that is not associated with this audio track
        else if (videoElement.srcObject &&
            videoElement.srcObject !== audioMediaStream) {
            // create a new audio element
            this.audioElement.srcObject = audioMediaStream;
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'Created new audio element to play separate audio stream.');
        }
    }
}


/***/ }),

/***/ "./src/VideoPlayer/VideoPlayer.ts":
/*!****************************************!*\
  !*** ./src/VideoPlayer/VideoPlayer.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_280307__) => {

__nested_webpack_require_280307__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_280307__.d(__webpack_exports__, {
/* harmony export */   "VideoPlayer": () => (/* binding */ VideoPlayer)
/* harmony export */ });
/* harmony import */ var _Config_Config__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_280307__(/*! ../Config/Config */ "./src/Config/Config.ts");
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_280307__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
// Copyright Epic Games, Inc. All Rights Reserved.


/**
 * The video player html element
 */
class VideoPlayer {
    /**
     * @param videoElementParent the html div the the video player will be injected into
     * @param config the applications configuration. We're interested in the startVideoMuted flag
     */
    constructor(videoElementParent, config) {
        this.lastTimeResized = new Date().getTime();
        this.videoElement = document.createElement('video');
        this.config = config;
        this.videoElement.id = 'streamingVideo';
        this.videoElement.disablePictureInPicture = true;
        this.videoElement.playsInline = true;
        this.videoElement.style.width = '100%';
        this.videoElement.style.height = '100%';
        this.videoElement.style.position = 'absolute';
        this.videoElement.style.pointerEvents = 'all';
        videoElementParent.appendChild(this.videoElement);
        this.onResizePlayerCallback = () => {
            console.log('Resolution changed, restyling player, did you forget to override this function?');
        };
        this.onMatchViewportResolutionCallback = () => {
            console.log('Resolution changed and match viewport resolution is turned on, did you forget to override this function?');
        };
        // set play for video
        this.videoElement.onclick = () => {
            if (this.videoElement.paused) {
                this.videoElement.play();
            }
        };
        this.videoElement.onloadedmetadata = () => {
            this.onVideoInitialized();
        };
        // set resize events to the windows if it is resized or its orientation is changed
        window.addEventListener('resize', () => this.resizePlayerStyle(), true);
        window.addEventListener('orientationchange', () => this.onOrientationChange());
    }
    /**
     * Sets up the video element with any application config and plays the video element.
     * @returns A promise for if playing the video was successful or not.
     */
    play() {
        this.videoElement.muted = this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_0__.Flags.StartVideoMuted);
        this.videoElement.autoplay = this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_0__.Flags.AutoPlayVideo);
        return this.videoElement.play();
    }
    /**
     * @returns True if the video element is paused.
     */
    isPaused() {
        return this.videoElement.paused;
    }
    /**
     * @returns - whether the video element is playing.
     */
    isVideoReady() {
        return (this.videoElement.readyState !== undefined &&
            this.videoElement.readyState > 0);
    }
    /**
     * @returns True if the video element has a valid video source (srcObject).
     */
    hasVideoSource() {
        return (this.videoElement.srcObject !== undefined &&
            this.videoElement.srcObject !== null);
    }
    /**
     * Get the current context of the html video element
     * @returns - the current context of the video element
     */
    getVideoElement() {
        return this.videoElement;
    }
    /**
     * Get the current context of the html video elements parent
     * @returns - the current context of the video elements parent
     */
    getVideoParentElement() {
        return this.videoElement.parentElement;
    }
    /**
     * Set the Video Elements src object tracks to enable
     * @param enabled - Enable Tracks on the Src Object
     */
    setVideoEnabled(enabled) {
        // this is a temporary hack until type scripts video element is updated to reflect the need for tracks on a html video element
        const videoElement = this.videoElement;
        videoElement.srcObject
            .getTracks()
            .forEach((track) => (track.enabled = enabled));
    }
    /**
     * An override for when the video has been initialized with a srcObject
     */
    onVideoInitialized() {
        // Default Functionality: Do Nothing
    }
    /**
     * On the orientation change of a window clear the timeout
     */
    onOrientationChange() {
        clearTimeout(this.orientationChangeTimeout);
        this.orientationChangeTimeout = window.setTimeout(() => {
            this.resizePlayerStyle();
        }, 500);
    }
    /**
     * Resizes the player style based on the window height and width
     * @returns - nil if requirements are satisfied
     */
    resizePlayerStyle() {
        const videoElementParent = this.getVideoParentElement();
        if (!videoElementParent) {
            return;
        }
        this.updateVideoStreamSize();
        if (videoElementParent.classList.contains('fixed-size')) {
            this.onResizePlayerCallback();
            return;
        }
        // controls for resizing the player
        this.resizePlayerStyleToFillParentElement();
        this.onResizePlayerCallback();
    }
    /**
     * Resizes the player element to fill the parent element
     */
    resizePlayerStyleToFillParentElement() {
        const videoElementParent = this.getVideoParentElement();
        //Video is not initialized yet so set videoElementParent to size of parent element
        const styleWidth = '100%';
        const styleHeight = '100%';
        const styleTop = 0;
        const styleLeft = 0;
        videoElementParent.setAttribute('style', 'top: ' +
            styleTop +
            'px; left: ' +
            styleLeft +
            'px; width: ' +
            styleWidth +
            '; height: ' +
            styleHeight +
            '; cursor: default;');
    }
    updateVideoStreamSize() {
        if (!this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_0__.Flags.MatchViewportResolution)) {
            return;
        }
        const now = new Date().getTime();
        if (now - this.lastTimeResized > 300) {
            const videoElementParent = this.getVideoParentElement();
            if (!videoElementParent) {
                return;
            }
            this.onMatchViewportResolutionCallback(videoElementParent.clientWidth, videoElementParent.clientHeight);
            this.lastTimeResized = new Date().getTime();
        }
        else {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), 'Resizing too often - skipping', 6);
            clearTimeout(this.resizeTimeoutHandle);
            this.resizeTimeoutHandle = window.setTimeout(() => this.updateVideoStreamSize(), 100);
        }
    }
}


/***/ }),

/***/ "./src/WebRtcPlayer/WebRtcPlayerController.ts":
/*!****************************************************!*\
  !*** ./src/WebRtcPlayer/WebRtcPlayerController.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_287812__) => {

__nested_webpack_require_287812__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_287812__.d(__webpack_exports__, {
/* harmony export */   "WebRtcPlayerController": () => (/* binding */ WebRtcPlayerController)
/* harmony export */ });
/* harmony import */ var _WebSockets_WebSocketController__WEBPACK_IMPORTED_MODULE_10__ = __nested_webpack_require_287812__(/*! ../WebSockets/WebSocketController */ "./src/WebSockets/WebSocketController.ts");
/* harmony import */ var _VideoPlayer_StreamController__WEBPACK_IMPORTED_MODULE_5__ = __nested_webpack_require_287812__(/*! ../VideoPlayer/StreamController */ "./src/VideoPlayer/StreamController.ts");
/* harmony import */ var _FreezeFrame_FreezeFrameController__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_287812__(/*! ../FreezeFrame/FreezeFrameController */ "./src/FreezeFrame/FreezeFrameController.ts");
/* harmony import */ var _AFK_AFKController__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_287812__(/*! ../AFK/AFKController */ "./src/AFK/AFKController.ts");
/* harmony import */ var _DataChannel_DataChannelController__WEBPACK_IMPORTED_MODULE_7__ = __nested_webpack_require_287812__(/*! ../DataChannel/DataChannelController */ "./src/DataChannel/DataChannelController.ts");
/* harmony import */ var _PeerConnectionController_PeerConnectionController__WEBPACK_IMPORTED_MODULE_18__ = __nested_webpack_require_287812__(/*! ../PeerConnectionController/PeerConnectionController */ "./src/PeerConnectionController/PeerConnectionController.ts");
/* harmony import */ var _Config_Config__WEBPACK_IMPORTED_MODULE_11__ = __nested_webpack_require_287812__(/*! ../Config/Config */ "./src/Config/Config.ts");
/* harmony import */ var _DataChannel_InitialSettings__WEBPACK_IMPORTED_MODULE_20__ = __nested_webpack_require_287812__(/*! ../DataChannel/InitialSettings */ "./src/DataChannel/InitialSettings.ts");
/* harmony import */ var _DataChannel_LatencyTestResults__WEBPACK_IMPORTED_MODULE_19__ = __nested_webpack_require_287812__(/*! ../DataChannel/LatencyTestResults */ "./src/DataChannel/LatencyTestResults.ts");
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__ = __nested_webpack_require_287812__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _Util_FileUtil__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_287812__(/*! ../Util/FileUtil */ "./src/Util/FileUtil.ts");
/* harmony import */ var _Inputs_InputClassesFactory__WEBPACK_IMPORTED_MODULE_15__ = __nested_webpack_require_287812__(/*! ../Inputs/InputClassesFactory */ "./src/Inputs/InputClassesFactory.ts");
/* harmony import */ var _VideoPlayer_VideoPlayer__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_287812__(/*! ../VideoPlayer/VideoPlayer */ "./src/VideoPlayer/VideoPlayer.ts");
/* harmony import */ var _UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__ = __nested_webpack_require_287812__(/*! ../UeInstanceMessage/StreamMessageController */ "./src/UeInstanceMessage/StreamMessageController.ts");
/* harmony import */ var _UeInstanceMessage_ResponseController__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_287812__(/*! ../UeInstanceMessage/ResponseController */ "./src/UeInstanceMessage/ResponseController.ts");
/* harmony import */ var _UeInstanceMessage_SendDescriptorController__WEBPACK_IMPORTED_MODULE_12__ = __nested_webpack_require_287812__(/*! ../UeInstanceMessage/SendDescriptorController */ "./src/UeInstanceMessage/SendDescriptorController.ts");
/* harmony import */ var _UeInstanceMessage_SendMessageController__WEBPACK_IMPORTED_MODULE_13__ = __nested_webpack_require_287812__(/*! ../UeInstanceMessage/SendMessageController */ "./src/UeInstanceMessage/SendMessageController.ts");
/* harmony import */ var _UeInstanceMessage_ToStreamerMessagesController__WEBPACK_IMPORTED_MODULE_14__ = __nested_webpack_require_287812__(/*! ../UeInstanceMessage/ToStreamerMessagesController */ "./src/UeInstanceMessage/ToStreamerMessagesController.ts");
/* harmony import */ var _DataChannel_DataChannelSender__WEBPACK_IMPORTED_MODULE_8__ = __nested_webpack_require_287812__(/*! ../DataChannel/DataChannelSender */ "./src/DataChannel/DataChannelSender.ts");
/* harmony import */ var _Util_CoordinateConverter__WEBPACK_IMPORTED_MODULE_6__ = __nested_webpack_require_287812__(/*! ../Util/CoordinateConverter */ "./src/Util/CoordinateConverter.ts");
/* harmony import */ var _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_17__ = __nested_webpack_require_287812__(/*! ../Util/EventEmitter */ "./src/Util/EventEmitter.ts");
// Copyright Epic Games, Inc. All Rights Reserved.





















/**
 * Entry point for the WebRTC Player
 */
class WebRtcPlayerController {
    /**
     *
     * @param config - the frontend config object
     * @param pixelStreaming - the PixelStreaming object
     */
    constructor(config, pixelStreaming) {
        this.shouldShowPlayOverlay = true;
        this.config = config;
        this.pixelStreaming = pixelStreaming;
        this.responseController = new _UeInstanceMessage_ResponseController__WEBPACK_IMPORTED_MODULE_0__.ResponseController();
        this.file = new _Util_FileUtil__WEBPACK_IMPORTED_MODULE_1__.FileTemplate();
        this.sdpConstraints = {
            offerToReceiveAudio: true,
            offerToReceiveVideo: true
        };
        // set up the afk logic class and connect up its method for closing the signaling server
        this.afkController = new _AFK_AFKController__WEBPACK_IMPORTED_MODULE_2__.AFKController(this.config, this.pixelStreaming, this.onAfkTriggered.bind(this));
        this.afkController.onAFKTimedOutCallback = () => {
            this.setDisconnectMessageOverride('You have been disconnected due to inactivity');
            this.closeSignalingServer();
        };
        this.freezeFrameController = new _FreezeFrame_FreezeFrameController__WEBPACK_IMPORTED_MODULE_3__.FreezeFrameController(this.pixelStreaming.videoElementParent);
        this.videoPlayer = new _VideoPlayer_VideoPlayer__WEBPACK_IMPORTED_MODULE_4__.VideoPlayer(this.pixelStreaming.videoElementParent, this.config);
        this.videoPlayer.onVideoInitialized = () => this.handleVideoInitialized();
        // When in match viewport resolution mode, when the browser viewport is resized we send a resize command back to UE.
        this.videoPlayer.onMatchViewportResolutionCallback = (width, height) => {
            const descriptor = {
                'Resolution.Width': width,
                'Resolution.Height': height
            };
            this.sendDescriptorController.emitCommand(descriptor);
        };
        // Every time video player is resized in browser we need to reinitialize the mouse coordinate conversion and freeze frame sizing logic.
        this.videoPlayer.onResizePlayerCallback = () => {
            this.setUpMouseAndFreezeFrame();
        };
        this.streamController = new _VideoPlayer_StreamController__WEBPACK_IMPORTED_MODULE_5__.StreamController(this.videoPlayer);
        this.coordinateConverter = new _Util_CoordinateConverter__WEBPACK_IMPORTED_MODULE_6__.CoordinateConverter(this.videoPlayer);
        this.sendrecvDataChannelController = new _DataChannel_DataChannelController__WEBPACK_IMPORTED_MODULE_7__.DataChannelController();
        this.recvDataChannelController = new _DataChannel_DataChannelController__WEBPACK_IMPORTED_MODULE_7__.DataChannelController();
        this.registerDataChannelEventEmitters(this.sendrecvDataChannelController);
        this.registerDataChannelEventEmitters(this.recvDataChannelController);
        this.dataChannelSender = new _DataChannel_DataChannelSender__WEBPACK_IMPORTED_MODULE_8__.DataChannelSender(this.sendrecvDataChannelController);
        this.dataChannelSender.resetAfkWarningTimerOnDataSend = () => this.afkController.resetAfkWarningTimer();
        this.streamMessageController = new _UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.StreamMessageController();
        // set up websocket methods
        this.webSocketController = new _WebSockets_WebSocketController__WEBPACK_IMPORTED_MODULE_10__.WebSocketController();
        this.webSocketController.onConfig = (messageConfig) => this.handleOnConfigMessage(messageConfig);
        this.webSocketController.onStreamerList = (messageList) => this.handleStreamerListMessage(messageList);
        this.webSocketController.onWebSocketOncloseOverlayMessage = (event) => {
            this.pixelStreaming._onDisconnect(`Websocket disconnect (${event.code}) ${event.reason != '' ? '- ' + event.reason : ''}`);
            this.setVideoEncoderAvgQP(0);
        };
        this.webSocketController.onOpen.addEventListener('open', () => {
            const BrowserSendsOffer = this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.Flags.BrowserSendOffer);
            if (!BrowserSendsOffer) {
                this.webSocketController.requestStreamerList();
            }
        });
        this.webSocketController.onClose.addEventListener('close', () => {
            this.afkController.stopAfkWarningTimer();
            // stop sending stats on interval if we have closed our connection
            if (this.statsTimerHandle && this.statsTimerHandle !== undefined) {
                window.clearInterval(this.statsTimerHandle);
            }
            // unregister all input device event handlers on disconnect
            this.setTouchInputEnabled(false);
            this.setMouseInputEnabled(false);
            this.setKeyboardInputEnabled(false);
            this.setGamePadInputEnabled(false);
            if (this.shouldReconnect && this.config.getNumericSettingValue(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.NumericParameters.MaxReconnectAttempts) > 0) {
                this.isReconnecting = true;
                this.reconnectAttempt++;
                this.restartStreamAutomatically();
            }
        });
        // set up the final webRtc player controller methods from within our application so a connection can be activated
        this.sendDescriptorController = new _UeInstanceMessage_SendDescriptorController__WEBPACK_IMPORTED_MODULE_12__.SendDescriptorController(this.dataChannelSender, this.streamMessageController);
        this.sendMessageController = new _UeInstanceMessage_SendMessageController__WEBPACK_IMPORTED_MODULE_13__.SendMessageController(this.dataChannelSender, this.streamMessageController);
        this.toStreamerMessagesController = new _UeInstanceMessage_ToStreamerMessagesController__WEBPACK_IMPORTED_MODULE_14__.ToStreamerMessagesController(this.sendMessageController);
        this.registerMessageHandlers();
        this.streamMessageController.populateDefaultProtocol();
        this.inputClassesFactory = new _Inputs_InputClassesFactory__WEBPACK_IMPORTED_MODULE_15__.InputClassesFactory(this.streamMessageController, this.videoPlayer, this.coordinateConverter);
        this.isUsingSFU = false;
        this.isQualityController = false;
        this.preferredCodec = '';
        this.shouldReconnect = true;
        this.isReconnecting = false;
        this.reconnectAttempt = 0;
        this.config._addOnOptionSettingChangedListener(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.OptionParameters.StreamerId, (streamerid) => {
            if (streamerid === "") {
                return;
            }
            // close the current peer connection and create a new one
            this.peerConnectionController.peerConnection.close();
            this.peerConnectionController.createPeerConnection(this.peerConfig, this.preferredCodec);
            this.subscribedStream = streamerid;
            this.webSocketController.sendSubscribe(streamerid);
        });
        this.setVideoEncoderAvgQP(-1);
        this.signallingUrlBuilder = () => {
            let signallingServerUrl = this.config.getTextSettingValue(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.TextParameters.SignallingServerUrl);
            // If we are connecting to the SFU add a special url parameter to the url
            if (this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.Flags.BrowserSendOffer)) {
                signallingServerUrl += '?' + _Config_Config__WEBPACK_IMPORTED_MODULE_11__.Flags.BrowserSendOffer + '=true';
            }
            // This code is no longer needed, but is a good example for how subsequent config flags can be appended
            // if (this.config.isFlagEnabled(Flags.BrowserSendOffer)) {
            //     signallingServerUrl += (signallingServerUrl.includes('?') ? '&' : '?') + Flags.BrowserSendOffer + '=true';
            // }
            return signallingServerUrl;
        };
    }
    /**
     * Make a request to UnquantizedAndDenormalizeUnsigned coordinates
     * @param x x axis coordinate
     * @param y y axis coordinate
     */
    requestUnquantizedAndDenormalizeUnsigned(x, y) {
        return this.coordinateConverter.unquantizeAndDenormalizeUnsigned(x, y);
    }
    /**
     * Handles when a message is received
     * @param event - Message Event
     */
    handleOnMessage(event) {
        const message = new Uint8Array(event.data);
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), 'Message incoming:' + message, 6);
        //try {
        const messageType = this.streamMessageController.fromStreamerMessages.getFromValue(message[0]);
        this.streamMessageController.fromStreamerHandlers.get(messageType)(event.data);
        //} catch (e) {
        //Logger.Error(Logger.GetStackTrace(), `Custom data channel message with message type that is unknown to the Pixel Streaming protocol. Does your PixelStreamingProtocol need updating? The message type was: ${message[0]}`);
        //}
    }
    /**
     * Register message all handlers
     */
    registerMessageHandlers() {
        // From Streamer
        // Message events from the streamer have a data type of ArrayBuffer as we force this type in the DatachannelController
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.FromStreamer, 'QualityControlOwnership', (data) => this.onQualityControlOwnership(data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.FromStreamer, 'Response', (data) => this.responseController.onResponse(data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.FromStreamer, 'Command', (data) => {
            this.onCommand(data);
        });
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.FromStreamer, 'FreezeFrame', (data) => this.onFreezeFrameMessage(data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.FromStreamer, 'UnfreezeFrame', () => this.invalidateFreezeFrameAndEnableVideo());
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.FromStreamer, 'VideoEncoderAvgQP', (data) => this.handleVideoEncoderAvgQP(data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.FromStreamer, 'LatencyTest', (data) => this.handleLatencyTestResult(data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.FromStreamer, 'InitialSettings', (data) => this.handleInitialSettings(data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.FromStreamer, 'FileExtension', (data) => this.onFileExtension(data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.FromStreamer, 'FileMimeType', (data) => this.onFileMimeType(data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.FromStreamer, 'FileContents', (data) => this.onFileContents(data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.FromStreamer, 'TestEcho', () => {
            /* Do nothing */
        });
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.FromStreamer, 'InputControlOwnership', (data) => this.onInputControlOwnership(data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.FromStreamer, 'GamepadResponse', (data) => this.onGamepadResponse(data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.FromStreamer, 'Protocol', (data) => this.onProtocolMessage(data));
        // To Streamer
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'IFrameRequest', () => this.sendMessageController.sendMessageToStreamer('IFrameRequest'));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'RequestQualityControl', () => this.sendMessageController.sendMessageToStreamer('RequestQualityControl'));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'FpsRequest', () => this.sendMessageController.sendMessageToStreamer('FpsRequest'));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'AverageBitrateRequest', () => this.sendMessageController.sendMessageToStreamer('AverageBitrateRequest'));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'StartStreaming', () => this.sendMessageController.sendMessageToStreamer('StartStreaming'));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'StopStreaming', () => this.sendMessageController.sendMessageToStreamer('StopStreaming'));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'LatencyTest', () => this.sendMessageController.sendMessageToStreamer('LatencyTest'));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'RequestInitialSettings', () => this.sendMessageController.sendMessageToStreamer('RequestInitialSettings'));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'TestEcho', () => {
            /* Do nothing */
        });
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'UIInteraction', (data) => this.sendDescriptorController.emitUIInteraction(data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'Command', (data) => this.sendDescriptorController.emitCommand(data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'KeyDown', (data) => this.sendMessageController.sendMessageToStreamer('KeyDown', data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'KeyUp', (data) => this.sendMessageController.sendMessageToStreamer('KeyUp', data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'KeyPress', (data) => this.sendMessageController.sendMessageToStreamer('KeyPress', data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'MouseEnter', (data) => this.sendMessageController.sendMessageToStreamer('MouseEnter', data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'MouseLeave', (data) => this.sendMessageController.sendMessageToStreamer('MouseLeave', data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'MouseDown', (data) => this.sendMessageController.sendMessageToStreamer('MouseDown', data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'MouseUp', (data) => this.sendMessageController.sendMessageToStreamer('MouseUp', data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'MouseMove', (data) => this.sendMessageController.sendMessageToStreamer('MouseMove', data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'MouseWheel', (data) => this.sendMessageController.sendMessageToStreamer('MouseWheel', data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'MouseDouble', (data) => this.sendMessageController.sendMessageToStreamer('MouseDouble', data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'TouchStart', (data) => this.sendMessageController.sendMessageToStreamer('TouchStart', data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'TouchEnd', (data) => this.sendMessageController.sendMessageToStreamer('TouchEnd', data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'TouchMove', (data) => this.sendMessageController.sendMessageToStreamer('TouchMove', data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'GamepadConnected', () => this.sendMessageController.sendMessageToStreamer('GamepadConnected'));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'GamepadButtonPressed', (data) => this.sendMessageController.sendMessageToStreamer('GamepadButtonPressed', data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'GamepadButtonReleased', (data) => this.sendMessageController.sendMessageToStreamer('GamepadButtonReleased', data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'GamepadAnalog', (data) => this.sendMessageController.sendMessageToStreamer('GamepadAnalog', data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'GamepadDisconnected', (data) => this.sendMessageController.sendMessageToStreamer('GamepadDisconnected', data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'XRHMDTransform', (data) => this.sendMessageController.sendMessageToStreamer('XRHMDTransform', data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'XRControllerTransform', (data) => this.sendMessageController.sendMessageToStreamer('XRControllerTransform', data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'XRSystem', (data) => this.sendMessageController.sendMessageToStreamer('XRSystem', data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'XRButtonTouched', (data) => this.sendMessageController.sendMessageToStreamer('XRButtonTouched', data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'XRButtonPressed', (data) => this.sendMessageController.sendMessageToStreamer('XRButtonPressed', data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'XRButtonReleased', (data) => this.sendMessageController.sendMessageToStreamer('XRButtonReleased', data));
        this.streamMessageController.registerMessageHandler(_UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer, 'XRAnalog', (data) => this.sendMessageController.sendMessageToStreamer('XRAnalog', data));
    }
    /**
     * Activate the logic associated with a command from UE
     * @param message
     */
    onCommand(message) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), 'DataChannelReceiveMessageType.Command', 6);
        const commandAsString = new TextDecoder('utf-16').decode(message.slice(1));
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), 'Data Channel Command: ' + commandAsString, 6);
        const command = JSON.parse(commandAsString);
        if (command.command === 'onScreenKeyboard') {
            this.pixelStreaming._activateOnScreenKeyboard(command);
        }
    }
    /**
     * Handles a protocol message received from the streamer
     * @param message the message data from the streamer
     */
    onProtocolMessage(message) {
        try {
            const protocolString = new TextDecoder('utf-16').decode(message.slice(1));
            const protocolJSON = JSON.parse(protocolString);
            if (!Object.prototype.hasOwnProperty.call(protocolJSON, 'Direction')) {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), 'Malformed protocol received. Ensure the protocol message contains a direction');
            }
            const direction = protocolJSON.Direction;
            delete protocolJSON.Direction;
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), `Received new ${direction == _UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.FromStreamer
                ? 'FromStreamer'
                : 'ToStreamer'} protocol. Updating existing protocol...`);
            Object.keys(protocolJSON).forEach((messageType) => {
                const message = protocolJSON[messageType];
                switch (direction) {
                    case _UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.ToStreamer:
                        // Check that the message contains all the relevant params
                        if (!Object.prototype.hasOwnProperty.call(message, 'id') ||
                            !Object.prototype.hasOwnProperty.call(message, 'byteLength')) {
                            _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), `ToStreamer->${messageType} protocol definition was malformed as it didn't contain at least an id and a byteLength\n
                                           Definition was: ${JSON.stringify(message, null, 2)}`);
                            // return in a forEach is equivalent to a continue in a normal for loop
                            return;
                        }
                        if (message.byteLength > 0 &&
                            !Object.prototype.hasOwnProperty.call(message, 'structure')) {
                            // If we specify a bytelength, will must have a corresponding structure
                            _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), `ToStreamer->${messageType} protocol definition was malformed as it specified a byteLength but no accompanying structure`);
                            // return in a forEach is equivalent to a continue in a normal for loop
                            return;
                        }
                        if (this.streamMessageController.toStreamerHandlers.get(messageType)) {
                            // If we've registered a handler for this message type we can add it to our supported messages. ie registerMessageHandler(...)
                            this.streamMessageController.toStreamerMessages.add(messageType, message);
                        }
                        else {
                            _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), `There was no registered handler for "${messageType}" - try adding one using registerMessageHandler(MessageDirection.ToStreamer, "${messageType}", myHandler)`);
                        }
                        break;
                    case _UeInstanceMessage_StreamMessageController__WEBPACK_IMPORTED_MODULE_9__.MessageDirection.FromStreamer:
                        // Check that the message contains all the relevant params
                        if (!Object.prototype.hasOwnProperty.call(message, 'id')) {
                            _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), `FromStreamer->${messageType} protocol definition was malformed as it didn't contain at least an id\n
                            Definition was: ${JSON.stringify(message, null, 2)}`);
                            // return in a forEach is equivalent to a continue in a normal for loop
                            return;
                        }
                        if (this.streamMessageController.fromStreamerHandlers.get(messageType)) {
                            // If we've registered a handler for this message type. ie registerMessageHandler(...)
                            this.streamMessageController.fromStreamerMessages.add(messageType, message.id);
                        }
                        else {
                            _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), `There was no registered handler for "${message}" - try adding one using registerMessageHandler(MessageDirection.FromStreamer, "${messageType}", myHandler)`);
                        }
                        break;
                    default:
                        _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), `Unknown direction: ${direction}`);
                }
            });
            // Once the protocol has been received, we can send our control messages
            this.toStreamerMessagesController.SendRequestInitialSettings();
            this.toStreamerMessagesController.SendRequestQualityControl();
        }
        catch (e) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), e);
        }
    }
    /**
     * Handles an input control message when it is received from the streamer
     * @param message The input control message
     */
    onInputControlOwnership(message) {
        const view = new Uint8Array(message);
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), 'DataChannelReceiveMessageType.InputControlOwnership', 6);
        const inputControlOwnership = new Boolean(view[1]).valueOf();
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), `Received input controller message - will your input control the stream: ${inputControlOwnership}`);
        this.pixelStreaming._onInputControlOwnership(inputControlOwnership);
    }
    /**
     *
     * @param message
     */
    onGamepadResponse(message) {
        const responseString = new TextDecoder('utf-16').decode(message.slice(1));
        const responseJSON = JSON.parse(responseString);
        this.gamePadController.onGamepadResponseReceived(responseJSON.controllerId);
    }
    onAfkTriggered() {
        this.afkController.onAfkClick();
        // if the stream is paused play it, if we can
        if (this.videoPlayer.isPaused() && this.videoPlayer.hasVideoSource()) {
            this.playStream();
        }
    }
    /**
     * Set whether we should timeout when afk.
     * @param afkEnabled If true we timeout when idle for some given amount of time.
     */
    setAfkEnabled(afkEnabled) {
        if (afkEnabled) {
            this.onAfkTriggered();
        }
        else {
            this.afkController.stopAfkWarningTimer();
        }
    }
    /**
     * Restart the stream automatically without refreshing the page
     */
    restartStreamAutomatically() {
        // if there is no webSocketController return immediately or this will not work
        if (!this.webSocketController) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), 'The Web Socket Controller does not exist so this will not work right now.');
            return;
        }
        // if a websocket object has not been created connect normally without closing
        if (!this.webSocketController.webSocket ||
            this.webSocketController.webSocket.readyState === WebSocket.CLOSED) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), 'A websocket connection has not been made yet so we will start the stream');
            this.pixelStreaming._onWebRtcAutoConnect();
            this.connectToSignallingServer();
        }
        else {
            // set the replay status so we get a text overlay over an action overlay
            this.pixelStreaming._showActionOrErrorOnDisconnect = false;
            // set the disconnect message
            this.setDisconnectMessageOverride('Restarting stream...');
            // close the connection
            this.closeSignalingServer();
            // wait for the connection to close and restart the connection
            const autoConnectTimeout = setTimeout(() => {
                this.pixelStreaming._onWebRtcAutoConnect();
                this.connectToSignallingServer();
                clearTimeout(autoConnectTimeout);
            }, 3000);
        }
    }
    /**
     * Loads a freeze frame if it is required otherwise shows the play overlay
     */
    loadFreezeFrameOrShowPlayOverlay() {
        this.pixelStreaming.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_17__.LoadFreezeFrameEvent({
            shouldShowPlayOverlay: this.shouldShowPlayOverlay,
            isValid: this.freezeFrameController.valid,
            jpegData: this.freezeFrameController.jpeg
        }));
        if (this.shouldShowPlayOverlay === true) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), 'showing play overlay');
            this.resizePlayerStyle();
        }
        else {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), 'showing freeze frame');
            this.freezeFrameController.showFreezeFrame();
        }
        setTimeout(() => {
            this.videoPlayer.setVideoEnabled(false);
        }, this.freezeFrameController.freezeFrameDelay);
    }
    /**
     * Process the freeze frame and load it
     * @param message The freeze frame data in bytes
     */
    onFreezeFrameMessage(message) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), 'DataChannelReceiveMessageType.FreezeFrame', 6);
        const view = new Uint8Array(message);
        this.freezeFrameController.processFreezeFrameMessage(view, () => this.loadFreezeFrameOrShowPlayOverlay());
    }
    /**
     * Enable the video after hiding a freeze frame
     */
    invalidateFreezeFrameAndEnableVideo() {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), 'DataChannelReceiveMessageType.FreezeFrame', 6);
        setTimeout(() => {
            this.pixelStreaming.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_17__.HideFreezeFrameEvent());
            this.freezeFrameController.hideFreezeFrame();
        }, this.freezeFrameController.freezeFrameDelay);
        if (this.videoPlayer.getVideoElement()) {
            this.videoPlayer.setVideoEnabled(true);
        }
    }
    /**
     * Prep datachannel data for processing file extension
     * @param data the file extension data
     */
    onFileExtension(data) {
        const view = new Uint8Array(data);
        _Util_FileUtil__WEBPACK_IMPORTED_MODULE_1__.FileUtil.setExtensionFromBytes(view, this.file);
    }
    /**
     * Prep datachannel data for processing the file mime type
     * @param data the file mime type data
     */
    onFileMimeType(data) {
        const view = new Uint8Array(data);
        _Util_FileUtil__WEBPACK_IMPORTED_MODULE_1__.FileUtil.setMimeTypeFromBytes(view, this.file);
    }
    /**
     * Prep datachannel data for processing the file contents
     * @param data the file contents data
     */
    onFileContents(data) {
        const view = new Uint8Array(data);
        _Util_FileUtil__WEBPACK_IMPORTED_MODULE_1__.FileUtil.setContentsFromBytes(view, this.file);
    }
    /**
     * Plays the stream audio and video source and sets up other pieces while the stream starts
     */
    playStream() {
        if (!this.videoPlayer.getVideoElement()) {
            const message = 'Could not play video stream because the video player was not initialized correctly.';
            this.pixelStreaming.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_17__.PlayStreamErrorEvent({ message }));
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), message);
            // set the disconnect message
            this.setDisconnectMessageOverride('Stream not initialized correctly');
            // close the connection
            this.closeSignalingServer();
            return;
        }
        if (!this.videoPlayer.hasVideoSource()) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Warning(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), 'Cannot play stream, the video element has no srcObject to play.');
            return;
        }
        this.setTouchInputEnabled(this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.Flags.TouchInput));
        this.pixelStreaming.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_17__.PlayStreamEvent());
        if (this.streamController.audioElement.srcObject) {
            this.streamController.audioElement.muted =
                this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.Flags.StartVideoMuted);
            this.streamController.audioElement
                .play()
                .then(() => {
                this.playVideo();
            })
                .catch((onRejectedReason) => {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), onRejectedReason);
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), 'Browser does not support autoplaying video without interaction - to resolve this we are going to show the play button overlay.');
                this.pixelStreaming.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_17__.PlayStreamRejectedEvent({
                    reason: onRejectedReason
                }));
            });
        }
        else {
            this.playVideo();
        }
        this.shouldShowPlayOverlay = false;
        this.freezeFrameController.showFreezeFrame();
    }
    /**
     * Plays the video stream
     */
    playVideo() {
        // handle play() with promise as it is an asynchronous call
        this.videoPlayer.play().catch((onRejectedReason) => {
            if (this.streamController.audioElement.srcObject) {
                this.streamController.audioElement.pause();
            }
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), onRejectedReason);
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), 'Browser does not support autoplaying video without interaction - to resolve this we are going to show the play button overlay.');
            this.pixelStreaming.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_17__.PlayStreamRejectedEvent({ reason: onRejectedReason }));
        });
    }
    /**
     * Enable the video to play automatically if enableAutoplay is true
     */
    autoPlayVideoOrSetUpPlayOverlay() {
        if (this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.Flags.AutoPlayVideo)) {
            // attempt to play the video
            this.playStream();
        }
        this.resizePlayerStyle();
    }
    /**
     * Connect to the Signaling server
     */
    connectToSignallingServer() {
        const signallingUrl = this.signallingUrlBuilder();
        this.webSocketController.connect(signallingUrl);
    }
    /**
     * This will start the handshake to the signalling server
     * @param peerConfig  - RTC Configuration Options from the Signaling server
     * @remark RTC Peer Connection on Ice Candidate event have it handled by handle Send Ice Candidate
     */
    startSession(peerConfig) {
        this.peerConfig = peerConfig;
        // check for forcing turn
        if (this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.Flags.ForceTURN)) {
            // check for a turn server
            const hasTurnServer = this.checkTurnServerAvailability(peerConfig);
            // close and error if turn is forced and there is no turn server
            if (!hasTurnServer) {
                _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Info(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), 'No turn server was found in the Peer Connection Options. TURN cannot be forced, closing connection. Please use STUN instead');
                this.setDisconnectMessageOverride('TURN cannot be forced, closing connection. Please use STUN instead.');
                this.closeSignalingServer();
                return;
            }
        }
        // set up the peer connection controller
        this.peerConnectionController = new _PeerConnectionController_PeerConnectionController__WEBPACK_IMPORTED_MODULE_18__.PeerConnectionController(this.peerConfig, this.config, this.preferredCodec);
        // set up peer connection controller video stats
        this.peerConnectionController.onVideoStats = (event) => this.handleVideoStats(event);
        /* When the Peer Connection wants to send an offer have it handled */
        this.peerConnectionController.onSendWebRTCOffer = (offer) => this.handleSendWebRTCOffer(offer);
        /* When the Peer Connection wants to send an answer have it handled */
        this.peerConnectionController.onSendWebRTCAnswer = (offer) => this.handleSendWebRTCAnswer(offer);
        /* When the Peer Connection ice candidate is added have it handled */
        this.peerConnectionController.onPeerIceCandidate = (peerConnectionIceEvent) => this.handleSendIceCandidate(peerConnectionIceEvent);
        /* When the Peer Connection has a data channel created for it by the browser, handle it */
        this.peerConnectionController.onDataChannel = (datachannelEvent) => this.handleDataChannel(datachannelEvent);
        // set up webRtc text overlays
        this.peerConnectionController.showTextOverlayConnecting = () => this.pixelStreaming._onWebRtcConnecting();
        this.peerConnectionController.showTextOverlaySetupFailure = () => this.pixelStreaming._onWebRtcFailed();
        let webRtcConnectedSent = false;
        this.peerConnectionController.onIceConnectionStateChange = () => {
            // Browsers emit "connected" when getting first connection and "completed" when finishing
            // candidate checking. However, sometimes browsers can skip "connected" and only emit "completed".
            // Therefore need to check both cases and emit onWebRtcConnected only once on the first hit.
            if (!webRtcConnectedSent &&
                ["connected", "completed"].includes(this.peerConnectionController.peerConnection.iceConnectionState)) {
                this.pixelStreaming._onWebRtcConnected();
                webRtcConnectedSent = true;
            }
        };
        /* RTC Peer Connection on Track event -> handle on track */
        this.peerConnectionController.onTrack = (trackEvent) => this.streamController.handleOnTrack(trackEvent);
        /* Start the Hand shake process by creating an Offer */
        const BrowserSendsOffer = this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.Flags.BrowserSendOffer);
        if (BrowserSendsOffer) {
            // If browser is sending the offer, create an offer and send it to the streamer
            this.sendrecvDataChannelController.createDataChannel(this.peerConnectionController.peerConnection, 'cirrus', this.datachannelOptions);
            this.sendrecvDataChannelController.handleOnMessage = (ev) => this.handleOnMessage(ev);
            this.peerConnectionController.createOffer(this.sdpConstraints, this.config);
        }
    }
    /**
     * Checks the peer connection options for a turn server and returns true or false
     */
    checkTurnServerAvailability(options) {
        // if iceServers is empty return false this should not be the general use case but is here incase
        if (!options.iceServers) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Info(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), 'A turn sever was not found');
            return false;
        }
        // loop through the ice servers to check for a turn url
        for (const iceServer of options.iceServers) {
            for (const url of iceServer.urls) {
                if (url.includes('turn')) {
                    _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), `A turn sever was found at ${url}`);
                    return true;
                }
            }
        }
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Info(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), 'A turn sever was not found');
        return false;
    }
    /**
     * Handles when a Config Message is received contains the Peer Connection Options required (STUN and TURN Server Info)
     * @param messageConfig - Config Message received from the signaling server
     */
    handleOnConfigMessage(messageConfig) {
        this.resizePlayerStyle();
        // Tell the WebRtcController to start a session with the peer options sent from the signaling server
        this.startSession(messageConfig.peerConnectionOptions);
        // When the signaling server sends a WebRTC Answer over the websocket connection have the WebRtcController handle the message
        this.webSocketController.onWebRtcAnswer = (messageAnswer) => this.handleWebRtcAnswer(messageAnswer);
        this.webSocketController.onWebRtcOffer = (messageOffer) => this.handleWebRtcOffer(messageOffer);
        this.webSocketController.onWebRtcPeerDataChannels = (messageDataChannels) => this.handleWebRtcSFUPeerDatachannels(messageDataChannels);
        // When the signaling server sends a IceCandidate over the websocket connection have the WebRtcController handle the message
        this.webSocketController.onIceCandidate = (iceCandidate) => this.handleIceCandidate(iceCandidate);
    }
    /**
     * Handles when the signalling server gives us the list of streamer ids.
     */
    handleStreamerListMessage(messageStreamerList) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), `Got streamer list ${messageStreamerList.ids}`, 6);
        if (this.isReconnecting) {
            if (messageStreamerList.ids.includes(this.subscribedStream)) {
                // If we're reconnecting and the previously subscribed stream has come back, resubscribe to it
                this.isReconnecting = false;
                this.reconnectAttempt = 0;
                this.webSocketController.sendSubscribe(this.subscribedStream);
            }
            else if (this.reconnectAttempt < this.config.getNumericSettingValue(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.NumericParameters.MaxReconnectAttempts)) {
                // Our previous stream hasn't come back, wait 2 seconds and request an updated stream list
                this.reconnectAttempt++;
                setTimeout(() => {
                    this.webSocketController.requestStreamerList();
                }, 2000);
            }
            else {
                // We've exhausted our reconnect attempts, return to main screen
                this.reconnectAttempt = 0;
                this.isReconnecting = false;
                this.shouldReconnect = false;
                this.webSocketController.close();
                this.config.setOptionSettingValue(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.OptionParameters.StreamerId, "");
                this.config.setOptionSettingOptions(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.OptionParameters.StreamerId, []);
            }
        }
        else {
            const settingOptions = [...messageStreamerList.ids]; // copy the original messageStreamerList.ids
            settingOptions.unshift(''); // add an empty option at the top
            this.config.setOptionSettingOptions(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.OptionParameters.StreamerId, settingOptions);
            const urlParams = new URLSearchParams(window.location.search);
            let autoSelectedStreamerId = null;
            if (messageStreamerList.ids.length == 1) {
                // If there's only a single streamer, subscribe to it regardless of what is in the URL
                autoSelectedStreamerId = messageStreamerList.ids[0];
            }
            else if (this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.Flags.PreferSFU) &&
                messageStreamerList.ids.includes('SFU')) {
                // If the SFU toggle is on and there's an SFU connected, subscribe to it regardless of what is in the URL
                autoSelectedStreamerId = 'SFU';
            }
            else if (urlParams.has(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.OptionParameters.StreamerId) &&
                messageStreamerList.ids.includes(urlParams.get(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.OptionParameters.StreamerId))) {
                // If there's a streamer ID in the URL and a streamer with this ID is connected, set it as the selected streamer
                autoSelectedStreamerId = urlParams.get(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.OptionParameters.StreamerId);
            }
            if (autoSelectedStreamerId !== null) {
                this.config.setOptionSettingValue(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.OptionParameters.StreamerId, autoSelectedStreamerId);
            }
            this.pixelStreaming.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_17__.StreamerListMessageEvent({
                messageStreamerList,
                autoSelectedStreamerId
            }));
        }
    }
    /**
     * Handle the RTC Answer from the signaling server
     * @param Answer - Answer SDP from the peer.
     */
    handleWebRtcAnswer(Answer) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), `Got answer sdp ${Answer.sdp}`, 6);
        const sdpAnswer = {
            sdp: Answer.sdp,
            type: 'answer'
        };
        this.peerConnectionController.receiveAnswer(sdpAnswer);
        this.handlePostWebrtcNegotiation();
    }
    /**
     * Handle the RTC offer from a WebRTC peer (received through the signalling server).
     * @param Offer - Offer SDP from the peer.
     */
    handleWebRtcOffer(Offer) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), `Got offer sdp ${Offer.sdp}`, 6);
        this.isUsingSFU = Offer.sfu ? Offer.sfu : false;
        if (this.isUsingSFU) {
            // Disable negotiating with the sfu as the sfu only supports one codec at a time
            this.peerConnectionController.preferredCodec = '';
        }
        const sdpOffer = {
            sdp: Offer.sdp,
            type: 'offer'
        };
        this.peerConnectionController.receiveOffer(sdpOffer, this.config);
        this.handlePostWebrtcNegotiation();
    }
    /**
     * Handle when the SFU provides the peer with its data channels
     * @param DataChannels - The message from the SFU containing the data channels ids
     */
    handleWebRtcSFUPeerDatachannels(DataChannels) {
        const SendOptions = {
            ordered: true,
            negotiated: true,
            id: DataChannels.sendStreamId
        };
        const unidirectional = DataChannels.sendStreamId != DataChannels.recvStreamId;
        this.sendrecvDataChannelController.createDataChannel(this.peerConnectionController.peerConnection, unidirectional ? 'send-datachannel' : 'datachannel', SendOptions);
        if (unidirectional) {
            const RecvOptions = {
                ordered: true,
                negotiated: true,
                id: DataChannels.recvStreamId
            };
            this.recvDataChannelController.createDataChannel(this.peerConnectionController.peerConnection, 'recv-datachannel', RecvOptions);
            this.recvDataChannelController.handleOnOpen = () => this.webSocketController.sendSFURecvDataChannelReady();
            // If we're uni-directional, only the recv data channel should handle incoming messages
            this.recvDataChannelController.handleOnMessage = (ev) => this.handleOnMessage(ev);
        }
        else {
            // else our primary datachannel is send/recv so it can handle incoming messages
            this.sendrecvDataChannelController.handleOnMessage = (ev) => this.handleOnMessage(ev);
        }
    }
    handlePostWebrtcNegotiation() {
        // start the afk warning timer as PS is now running
        this.afkController.startAfkWarningTimer();
        // show the overlay that we have negotiated a connection
        this.pixelStreaming._onWebRtcSdp();
        if (this.statsTimerHandle && this.statsTimerHandle !== undefined) {
            window.clearInterval(this.statsTimerHandle);
        }
        this.statsTimerHandle = window.setInterval(() => this.getStats(), 1000);
        /*  */
        this.setMouseInputEnabled(this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.Flags.MouseInput));
        this.setKeyboardInputEnabled(this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.Flags.KeyboardInput));
        this.setGamePadInputEnabled(this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.Flags.GamepadInput));
    }
    /**
     * When an ice Candidate is received from the Signaling server add it to the Peer Connection Client
     * @param iceCandidate - Ice Candidate from Server
     */
    handleIceCandidate(iceCandidate) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), 'Web RTC Controller: onWebRtcIce', 6);
        const candidate = new RTCIceCandidate(iceCandidate);
        this.peerConnectionController.handleOnIce(candidate);
    }
    /**
     * Send the ice Candidate to the signaling server via websocket
     * @param iceEvent - RTC Peer ConnectionIceEvent) {
     */
    handleSendIceCandidate(iceEvent) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), 'OnIceCandidate', 6);
        if (iceEvent.candidate && iceEvent.candidate.candidate) {
            this.webSocketController.sendIceCandidate(iceEvent.candidate);
        }
    }
    /**
     * Send the ice Candidate to the signaling server via websocket
     * @param iceEvent - RTC Peer ConnectionIceEvent) {
     */
    handleDataChannel(datachannelEvent) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), 'Data channel created for us by browser as we are a receiving peer.', 6);
        this.sendrecvDataChannelController.dataChannel =
            datachannelEvent.channel;
        // Data channel was created for us, so we just need to setup its callbacks and array type
        this.sendrecvDataChannelController.setupDataChannel();
        this.sendrecvDataChannelController.handleOnMessage = (ev) => this.handleOnMessage(ev);
    }
    /**
     * Send the RTC Offer Session to the Signaling server via websocket
     * @param offer - RTC Session Description
     */
    handleSendWebRTCOffer(offer) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), 'Sending the offer to the Server', 6);
        this.webSocketController.sendWebRtcOffer(offer);
    }
    /**
     * Send the RTC Offer Session to the Signaling server via websocket
     * @param answer - RTC Session Description
     */
    handleSendWebRTCAnswer(answer) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), 'Sending the answer to the Server', 6);
        this.webSocketController.sendWebRtcAnswer(answer);
        if (this.isUsingSFU) {
            this.webSocketController.sendWebRtcDatachannelRequest();
        }
    }
    /**
     * Set the freeze frame overlay to the player div
     */
    setUpMouseAndFreezeFrame() {
        // Calculating and normalizing positions depends on the width and height of the player.
        this.videoElementParentClientRect = this.videoPlayer
            .getVideoParentElement()
            .getBoundingClientRect();
        this.coordinateConverter.setupNormalizeAndQuantize();
        this.freezeFrameController.freezeFrame.resize();
    }
    /**
     * Close the Connection to the signaling server
     */
    closeSignalingServer() {
        var _a;
        // We explicitly called close, therefore we don't want to trigger auto reconnect
        this.shouldReconnect = false;
        (_a = this.webSocketController) === null || _a === void 0 ? void 0 : _a.close();
    }
    /**
     * Close the peer connection
     */
    closePeerConnection() {
        var _a;
        (_a = this.peerConnectionController) === null || _a === void 0 ? void 0 : _a.close();
    }
    /**
     * Close all connections
     */
    close() {
        this.closeSignalingServer();
        this.closePeerConnection();
    }
    /**
     * Fires a Video Stats Event in the RTC Peer Connection
     */
    getStats() {
        this.peerConnectionController.generateStats();
    }
    /**
     * Send a Latency Test Request to the UE Instance
     */
    sendLatencyTest() {
        this.latencyStartTime = Date.now();
        this.sendDescriptorController.sendLatencyTest({
            StartTime: this.latencyStartTime
        });
    }
    /**
     * Send the MinQP encoder setting to the UE Instance.
     * @param minQP - The lower bound for QP when encoding
     * valid values are (1-51) where:
     * 1 = Best quality but highest bitrate.
     * 51 = Worst quality but lowest bitrate.
     * By default the minQP is 1 meaning the encoder is free
     * to aim for the best quality it can on the given network link.
     */
    sendEncoderMinQP(minQP) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), `MinQP=${minQP}\n`, 6);
        if (minQP != null) {
            this.sendDescriptorController.emitCommand({
                'Encoder.MinQP': minQP
            });
        }
    }
    /**
     * Send the MaxQP encoder setting to the UE Instance.
     * @param maxQP - The upper bound for QP when encoding
     * valid values are (1-51) where:
     * 1 = Best quality but highest bitrate.
     * 51 = Worst quality but lowest bitrate.
     * By default the maxQP is 51 meaning the encoder is free
     * to drop quality as low as needed on the given network link.
     */
    sendEncoderMaxQP(maxQP) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), `MaxQP=${maxQP}\n`, 6);
        if (maxQP != null) {
            this.sendDescriptorController.emitCommand({
                'Encoder.MaxQP': maxQP
            });
        }
    }
    /**
     * Send the { WebRTC.MinBitrate: SomeNumber }} command to UE to set
     * the minimum bitrate that we allow WebRTC to use
     * (note setting this too high in poor networks can be problematic).
     * @param minBitrate - The minimum bitrate we would like WebRTC to not fall below.
     */
    sendWebRTCMinBitrate(minBitrate) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), `WebRTC Min Bitrate=${minBitrate}`, 6);
        if (minBitrate != null) {
            this.sendDescriptorController.emitCommand({
                'WebRTC.MinBitrate': minBitrate
            });
        }
    }
    /**
     * Send the { WebRTC.MaxBitrate: SomeNumber }} command to UE to set
     * the minimum bitrate that we allow WebRTC to use
     * (note setting this too low could result in blocky video).
     * @param minBitrate - The minimum bitrate we would like WebRTC to not fall below.
     */
    sendWebRTCMaxBitrate(maxBitrate) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), `WebRTC Max Bitrate=${maxBitrate}`, 6);
        if (maxBitrate != null) {
            this.sendDescriptorController.emitCommand({
                'WebRTC.MaxBitrate': maxBitrate
            });
        }
    }
    /**
     * Send the { WebRTC.Fps: SomeNumber }} UE 5.0+
     * and { WebRTC.MaxFps } UE 4.27 command to set
     * the maximum fps we would like WebRTC to stream at.
     * @param fps - The maximum stream fps.
     */
    sendWebRTCFps(fps) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), `WebRTC FPS=${fps}`, 6);
        if (fps != null) {
            this.sendDescriptorController.emitCommand({ 'WebRTC.Fps': fps });
            this.sendDescriptorController.emitCommand({ 'WebRTC.MaxFps': fps }); /* TODO: Remove when UE 4.27 unsupported. */
        }
    }
    /**
     * Sends the UI Descriptor `stat fps` to the UE Instance
     */
    sendShowFps() {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), '----   Sending show stat to UE   ----', 6);
        this.sendDescriptorController.emitCommand({ 'stat.fps': '' });
    }
    /**
     * Send an Iframe request to the streamer
     */
    sendIframeRequest() {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), '----   Sending Request for an IFrame  ----', 6);
        this.streamMessageController.toStreamerHandlers.get('IFrameRequest')();
    }
    /**
     * Send a UIInteraction message
     */
    emitUIInteraction(descriptor) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), '----   Sending custom UIInteraction message   ----', 6);
        this.sendDescriptorController.emitUIInteraction(descriptor);
    }
    /**
     * Send a Command message
     */
    emitCommand(descriptor) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), '----   Sending custom Command message   ----', 6);
        this.sendDescriptorController.emitCommand(descriptor);
    }
    /**
     * Send a console command message
     */
    emitConsoleCommand(command) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), '----   Sending custom Command:ConsoleCommand message   ----', 6);
        this.sendDescriptorController.emitCommand({
            ConsoleCommand: command,
        });
    }
    /**
     * Sends a request to the UE Instance to have ownership of Quality
     */
    sendRequestQualityControlOwnership() {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), '----   Sending Request to Control Quality  ----', 6);
        this.toStreamerMessagesController.SendRequestQualityControl();
    }
    /**
     * Handles when a Latency Test Result are received from the UE Instance
     * @param message - Latency Test Timings
     */
    handleLatencyTestResult(message) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), 'DataChannelReceiveMessageType.latencyTest', 6);
        const latencyAsString = new TextDecoder('utf-16').decode(message.slice(1));
        const latencyTestResults = new _DataChannel_LatencyTestResults__WEBPACK_IMPORTED_MODULE_19__.LatencyTestResults();
        Object.assign(latencyTestResults, JSON.parse(latencyAsString));
        latencyTestResults.processFields();
        latencyTestResults.testStartTimeMs = this.latencyStartTime;
        latencyTestResults.browserReceiptTimeMs = Date.now();
        latencyTestResults.latencyExcludingDecode = ~~(latencyTestResults.browserReceiptTimeMs -
            latencyTestResults.testStartTimeMs);
        latencyTestResults.testDuration = ~~(latencyTestResults.TransmissionTimeMs -
            latencyTestResults.ReceiptTimeMs);
        latencyTestResults.networkLatency = ~~(latencyTestResults.latencyExcludingDecode -
            latencyTestResults.testDuration);
        if (latencyTestResults.frameDisplayDeltaTimeMs &&
            latencyTestResults.browserReceiptTimeMs) {
            latencyTestResults.endToEndLatency =
                ~~(latencyTestResults.frameDisplayDeltaTimeMs +
                    latencyTestResults.networkLatency,
                    +latencyTestResults.CaptureToSendMs);
        }
        this.pixelStreaming._onLatencyTestResult(latencyTestResults);
    }
    /**
     * Handles when the Encoder and Web RTC Settings are received from the UE Instance
     * @param message - Initial Encoder and Web RTC Settings
     */
    handleInitialSettings(message) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), 'DataChannelReceiveMessageType.InitialSettings', 6);
        const payloadAsString = new TextDecoder('utf-16').decode(message.slice(1));
        const parsedInitialSettings = JSON.parse(payloadAsString);
        const initialSettings = new _DataChannel_InitialSettings__WEBPACK_IMPORTED_MODULE_20__.InitialSettings();
        if (parsedInitialSettings.Encoder) {
            initialSettings.EncoderSettings = parsedInitialSettings.Encoder;
        }
        if (parsedInitialSettings.WebRTC) {
            initialSettings.WebRTCSettings = parsedInitialSettings.WebRTC;
        }
        if (parsedInitialSettings.PixelStreaming) {
            initialSettings.PixelStreamingSettings =
                parsedInitialSettings.PixelStreaming;
        }
        if (parsedInitialSettings.ConfigOptions && parsedInitialSettings.ConfigOptions.DefaultToHover !== undefined) {
            this.config.setFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.Flags.HoveringMouseMode, !!parsedInitialSettings.ConfigOptions.DefaultToHover);
        }
        initialSettings.ueCompatible();
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), payloadAsString, 6);
        this.pixelStreaming._onInitialSettings(initialSettings);
    }
    /**
     * Handles when the Quantization Parameter are received from the UE Instance
     * @param message - Encoders Quantization Parameter
     */
    handleVideoEncoderAvgQP(message) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), 'DataChannelReceiveMessageType.VideoEncoderAvgQP', 6);
        const AvgQP = Number(new TextDecoder('utf-16').decode(message.slice(1)));
        this.setVideoEncoderAvgQP(AvgQP);
    }
    /**
     * Handles when the video element has been loaded with a srcObject
     */
    handleVideoInitialized() {
        this.pixelStreaming._onVideoInitialized();
        // either autoplay the video or set up the play overlay
        this.autoPlayVideoOrSetUpPlayOverlay();
        this.resizePlayerStyle();
        this.videoPlayer.updateVideoStreamSize();
    }
    /**
     * Flag set if the user has Quality Ownership
     * @param message - Does the current client have Quality Ownership
     */
    onQualityControlOwnership(message) {
        const view = new Uint8Array(message);
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), 'DataChannelReceiveMessageType.QualityControlOwnership', 6);
        this.isQualityController = new Boolean(view[1]).valueOf();
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_16__.Logger.GetStackTrace(), `Received quality controller message, will control quality: ${this.isQualityController}`);
        this.pixelStreaming._onQualityControlOwnership(this.isQualityController);
    }
    /**
     * Handles when the Aggregated stats are Collected
     * @param stats - Aggregated Stats
     */
    handleVideoStats(stats) {
        this.pixelStreaming._onVideoStats(stats);
    }
    /**
     * To Resize the Video Player element
     */
    resizePlayerStyle() {
        this.videoPlayer.resizePlayerStyle();
    }
    /**
     * Get the overridden disconnect message
     */
    getDisconnectMessageOverride() {
        return this.disconnectMessageOverride;
    }
    /**
     * Set the override for the disconnect message
     */
    setDisconnectMessageOverride(message) {
        this.disconnectMessageOverride = message;
    }
    setPreferredCodec(codec) {
        this.preferredCodec = codec;
        if (this.peerConnectionController) {
            this.peerConnectionController.preferredCodec = codec;
            this.peerConnectionController.updateCodecSelection = false;
        }
    }
    setVideoEncoderAvgQP(avgQP) {
        this.videoAvgQp = avgQP;
        this.pixelStreaming._onVideoEncoderAvgQP(this.videoAvgQp);
    }
    /**
     * enables/disables keyboard event listeners
     */
    setKeyboardInputEnabled(isEnabled) {
        var _a;
        (_a = this.keyboardController) === null || _a === void 0 ? void 0 : _a.unregisterKeyBoardEvents();
        if (isEnabled) {
            this.keyboardController = this.inputClassesFactory.registerKeyBoard(this.config);
        }
    }
    /**
     * enables/disables mouse event listeners
     */
    setMouseInputEnabled(isEnabled) {
        var _a;
        (_a = this.mouseController) === null || _a === void 0 ? void 0 : _a.unregisterMouseEvents();
        if (isEnabled) {
            const mouseMode = this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.Flags.HoveringMouseMode)
                ? _Config_Config__WEBPACK_IMPORTED_MODULE_11__.ControlSchemeType.HoveringMouse
                : _Config_Config__WEBPACK_IMPORTED_MODULE_11__.ControlSchemeType.LockedMouse;
            this.mouseController =
                this.inputClassesFactory.registerMouse(mouseMode);
        }
    }
    /**
     * enables/disables touch event listeners
     */
    setTouchInputEnabled(isEnabled) {
        var _a;
        (_a = this.touchController) === null || _a === void 0 ? void 0 : _a.unregisterTouchEvents();
        if (isEnabled) {
            this.touchController = this.inputClassesFactory.registerTouch(this.config.isFlagEnabled(_Config_Config__WEBPACK_IMPORTED_MODULE_11__.Flags.FakeMouseWithTouches), this.videoElementParentClientRect);
        }
    }
    /**
     * enables/disables game pad event listeners
     */
    setGamePadInputEnabled(isEnabled) {
        var _a;
        (_a = this.gamePadController) === null || _a === void 0 ? void 0 : _a.unregisterGamePadEvents();
        if (isEnabled) {
            this.gamePadController = this.inputClassesFactory.registerGamePad();
            this.gamePadController.onGamepadConnected = () => {
                this.streamMessageController.toStreamerHandlers.get('GamepadConnected')();
            };
            this.gamePadController.onGamepadDisconnected = (controllerIdx) => {
                this.streamMessageController.toStreamerHandlers.get('GamepadDisconnected')([controllerIdx]);
            };
        }
    }
    registerDataChannelEventEmitters(dataChannel) {
        dataChannel.onOpen = (label, event) => this.pixelStreaming.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_17__.DataChannelOpenEvent({ label, event }));
        dataChannel.onClose = (label, event) => this.pixelStreaming.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_17__.DataChannelCloseEvent({ label, event }));
        dataChannel.onError = (label, event) => this.pixelStreaming.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_17__.DataChannelErrorEvent({ label, event }));
    }
}


/***/ }),

/***/ "./src/WebSockets/MessageReceive.ts":
/*!******************************************!*\
  !*** ./src/WebSockets/MessageReceive.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_365719__) => {

__nested_webpack_require_365719__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_365719__.d(__webpack_exports__, {
/* harmony export */   "MessageAnswer": () => (/* binding */ MessageAnswer),
/* harmony export */   "MessageAuthRequired": () => (/* binding */ MessageAuthRequired),
/* harmony export */   "MessageConfig": () => (/* binding */ MessageConfig),
/* harmony export */   "MessageIceCandidate": () => (/* binding */ MessageIceCandidate),
/* harmony export */   "MessageOffer": () => (/* binding */ MessageOffer),
/* harmony export */   "MessageOnScreenKeyboard": () => (/* binding */ MessageOnScreenKeyboard),
/* harmony export */   "MessagePeerDataChannels": () => (/* binding */ MessagePeerDataChannels),
/* harmony export */   "MessagePlayerCount": () => (/* binding */ MessagePlayerCount),
/* harmony export */   "MessageRecv": () => (/* binding */ MessageRecv),
/* harmony export */   "MessageRecvTypes": () => (/* binding */ MessageRecvTypes),
/* harmony export */   "MessageStreamerList": () => (/* binding */ MessageStreamerList)
/* harmony export */ });
// Copyright Epic Games, Inc. All Rights Reserved.
/**
 * The Types of Messages that will be received
 */
var MessageRecvTypes;
(function (MessageRecvTypes) {
    MessageRecvTypes["CONFIG"] = "config";
    MessageRecvTypes["STREAMER_LIST"] = "streamerList";
    MessageRecvTypes["PLAYER_COUNT"] = "playerCount";
    MessageRecvTypes["OFFER"] = "offer";
    MessageRecvTypes["ANSWER"] = "answer";
    MessageRecvTypes["ICE_CANDIDATE"] = "iceCandidate";
    MessageRecvTypes["PEER_DATA_CHANNELS"] = "peerDataChannels";
    MessageRecvTypes["PING"] = "ping";
    MessageRecvTypes["WARNING"] = "warning";
})(MessageRecvTypes || (MessageRecvTypes = {}));
/**
 * Concrete Received Message wrapper
 */
class MessageRecv {
}
/**
 * Authentication Required Message wrapper
 */
class MessageAuthRequired extends MessageRecv {
}
/**
 * Config Message Wrapper
 */
class MessageConfig extends MessageRecv {
}
/**
 * Streamer List Message Wrapper
 */
class MessageStreamerList extends MessageRecv {
}
/**
 * Player Count Message wrapper
 */
class MessagePlayerCount extends MessageRecv {
}
/**
 * Web RTC offer Answer Message wrapper
 */
class MessageAnswer extends MessageRecv {
}
/**
 * WebRTC sdp offer Message wrapper.
 */
class MessageOffer extends MessageRecv {
}
/**
 * Ice Candidate Message wrapper
 */
class MessageIceCandidate extends MessageRecv {
}
/**
 * Peer Data Channels Message wrapper
 */
class MessagePeerDataChannels extends MessageRecv {
}
class MessageOnScreenKeyboard {
}


/***/ }),

/***/ "./src/WebSockets/MessageSend.ts":
/*!***************************************!*\
  !*** ./src/WebSockets/MessageSend.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_368599__) => {

__nested_webpack_require_368599__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_368599__.d(__webpack_exports__, {
/* harmony export */   "MessageIceCandidate": () => (/* binding */ MessageIceCandidate),
/* harmony export */   "MessageListStreamers": () => (/* binding */ MessageListStreamers),
/* harmony export */   "MessagePong": () => (/* binding */ MessagePong),
/* harmony export */   "MessageSFURecvDataChannelReady": () => (/* binding */ MessageSFURecvDataChannelReady),
/* harmony export */   "MessageSend": () => (/* binding */ MessageSend),
/* harmony export */   "MessageSendTypes": () => (/* binding */ MessageSendTypes),
/* harmony export */   "MessageSubscribe": () => (/* binding */ MessageSubscribe),
/* harmony export */   "MessageUnsubscribe": () => (/* binding */ MessageUnsubscribe),
/* harmony export */   "MessageWebRTCAnswer": () => (/* binding */ MessageWebRTCAnswer),
/* harmony export */   "MessageWebRTCDatachannelRequest": () => (/* binding */ MessageWebRTCDatachannelRequest),
/* harmony export */   "MessageWebRTCOffer": () => (/* binding */ MessageWebRTCOffer)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_368599__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
// Copyright Epic Games, Inc. All Rights Reserved.

/**
 * The Send Types that are pushed from the signaling server
 */
var MessageSendTypes;
(function (MessageSendTypes) {
    MessageSendTypes["LIST_STREAMERS"] = "listStreamers";
    MessageSendTypes["SUBSCRIBE"] = "subscribe";
    MessageSendTypes["UNSUBSCRIBE"] = "unsubscribe";
    MessageSendTypes["ICE_CANDIDATE"] = "iceCandidate";
    MessageSendTypes["OFFER"] = "offer";
    MessageSendTypes["ANSWER"] = "answer";
    MessageSendTypes["DATACHANNELREQUEST"] = "dataChannelRequest";
    MessageSendTypes["SFURECVDATACHANNELREADY"] = "peerDataChannelsReady";
    MessageSendTypes["PONG"] = "pong";
})(MessageSendTypes || (MessageSendTypes = {}));
/**
 * A Wrapper for the message to send to the signaling server
 */
class MessageSend {
    /**
     * Turns the wrapper into a JSON String
     * @returns - JSON String of the Message to send
     */
    payload() {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'Sending => \n' + JSON.stringify(this, undefined, 4), 6);
        return JSON.stringify(this);
    }
}
class MessageListStreamers extends MessageSend {
    constructor() {
        super();
        this.type = MessageSendTypes.LIST_STREAMERS;
    }
}
class MessageSubscribe extends MessageSend {
    constructor(streamerid) {
        super();
        this.type = MessageSendTypes.SUBSCRIBE;
        this.streamerId = streamerid;
    }
}
class MessageUnsubscribe extends MessageSend {
    constructor() {
        super();
        this.type = MessageSendTypes.UNSUBSCRIBE;
    }
}
/**
 * Instance Request Message Wrapper
 */
class MessagePong extends MessageSend {
    constructor(time) {
        super();
        this.type = MessageSendTypes.PONG;
        this.time = time;
    }
}
/**
 *  Web RTC Offer message wrapper
 */
class MessageWebRTCOffer extends MessageSend {
    /**
     * @param offer - Generated Web RTC Offer
     */
    constructor(offer) {
        super();
        this.type = MessageSendTypes.OFFER;
        if (offer) {
            this.type = offer.type;
            this.sdp = offer.sdp;
        }
    }
}
/**
 *  Web RTC Answer message wrapper
 */
class MessageWebRTCAnswer extends MessageSend {
    /**
     * @param answer - Generated Web RTC Offer
     */
    constructor(answer) {
        super();
        this.type = MessageSendTypes.ANSWER;
        if (answer) {
            this.type = answer.type;
            this.sdp = answer.sdp;
        }
    }
}
/**
 *  Web RTC Data channel request message wrapper
 */
class MessageWebRTCDatachannelRequest extends MessageSend {
    constructor() {
        super();
        this.type = MessageSendTypes.DATACHANNELREQUEST;
    }
}
/**
 *  Web RTC SFU Data channel ready message wrapper
 */
class MessageSFURecvDataChannelReady extends MessageSend {
    constructor() {
        super();
        this.type = MessageSendTypes.SFURECVDATACHANNELREADY;
    }
}
/**
 * RTC Ice Candidate Wrapper
 */
class MessageIceCandidate {
    /**
     * @param candidate - RTC Ice Candidate
     */
    constructor(candidate) {
        this.type = MessageSendTypes.ICE_CANDIDATE;
        this.candidate = candidate;
    }
    /**
     * Turns the wrapper into a JSON String
     * @returns - JSON String of the Message to send
     */
    payload() {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'Sending => \n' + JSON.stringify(this, undefined, 4), 6);
        return JSON.stringify(this);
    }
}


/***/ }),

/***/ "./src/WebSockets/SignallingProtocol.ts":
/*!**********************************************!*\
  !*** ./src/WebSockets/SignallingProtocol.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_373867__) => {

__nested_webpack_require_373867__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_373867__.d(__webpack_exports__, {
/* harmony export */   "SignallingProtocol": () => (/* binding */ SignallingProtocol)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_373867__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _MessageReceive__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_373867__(/*! ./MessageReceive */ "./src/WebSockets/MessageReceive.ts");
/* harmony import */ var _MessageSend__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_373867__(/*! ./MessageSend */ "./src/WebSockets/MessageSend.ts");
// Copyright Epic Games, Inc. All Rights Reserved.



/**
 * Signalling protocol for handling messages from the signalling server.
 */
class SignallingProtocol {
    constructor() {
        this.FromUEMessageHandlers = new Map();
    }
    addMessageHandler(messageId, messageHandler) {
        this.FromUEMessageHandlers.set(messageId, messageHandler);
    }
    handleMessage(messageId, messageData) {
        if (this.FromUEMessageHandlers.has(messageId)) {
            this.FromUEMessageHandlers.get(messageId)(messageData);
        }
        else {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), `Message type of ${messageId} does not have a message handler registered on the frontend - ignoring message.`);
        }
    }
    /**
     * Setup any default signalling message handling, these can be overridden or additional handlers added with `addMessageHandler`.
     * @param websocketController The controller to setup these handlers on.
     */
    static setupDefaultHandlers(websocketController) {
        // PING
        websocketController.signallingProtocol.addMessageHandler(_MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.PING, (pingPayload) => {
            // send our pong payload back to the signalling server
            const pongPayload = new _MessageSend__WEBPACK_IMPORTED_MODULE_2__.MessagePong(new Date().getTime()).payload();
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.PING + ': ' + pingPayload, 6);
            websocketController.webSocket.send(pongPayload);
        });
        // CONFIG
        websocketController.signallingProtocol.addMessageHandler(_MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.CONFIG, (configPayload) => {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.CONFIG, 6);
            const config = JSON.parse(configPayload);
            websocketController.onConfig(config);
        });
        // STREAMER_LIST
        websocketController.signallingProtocol.addMessageHandler(_MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.STREAMER_LIST, (listPayload) => {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.STREAMER_LIST, 6);
            const streamerList = JSON.parse(listPayload);
            websocketController.onStreamerList(streamerList);
        });
        // PLAYER_COUNT
        websocketController.signallingProtocol.addMessageHandler(_MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.PLAYER_COUNT, (playerCountPayload) => {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.PLAYER_COUNT, 6);
            const playerCount = JSON.parse(playerCountPayload);
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), 'Player Count: ' + playerCount.count, 6);
        });
        // ANSWER
        websocketController.signallingProtocol.addMessageHandler(_MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.ANSWER, (answerPayload) => {
            // send our pong payload back to the signalling server
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.ANSWER, 6);
            const answer = JSON.parse(answerPayload);
            websocketController.onWebRtcAnswer(answer);
        });
        // OFFER
        websocketController.signallingProtocol.addMessageHandler(_MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.OFFER, (offerPayload) => {
            // send our pong payload back to the signalling server
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.OFFER, 6);
            const offer = JSON.parse(offerPayload);
            websocketController.onWebRtcOffer(offer);
        });
        // ICE CANDIDATE
        websocketController.signallingProtocol.addMessageHandler(_MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.ICE_CANDIDATE, (iceCandidatePayload) => {
            // send our pong payload back to the signalling server
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.ICE_CANDIDATE, 6);
            const iceCandidate = JSON.parse(iceCandidatePayload);
            websocketController.onIceCandidate(iceCandidate.candidate);
        });
        // WARNING
        websocketController.signallingProtocol.addMessageHandler(_MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.WARNING, (warningPayload) => {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Warning(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), `Warning received: ${warningPayload}`);
        });
        // PEER DATA CHANNELS
        websocketController.signallingProtocol.addMessageHandler(_MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.PEER_DATA_CHANNELS, (peerDataChannelsPayload) => {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_0__.Logger.GetStackTrace(), _MessageReceive__WEBPACK_IMPORTED_MODULE_1__.MessageRecvTypes.PEER_DATA_CHANNELS, 6);
            const peerDataChannels = JSON.parse(peerDataChannelsPayload);
            websocketController.onWebRtcPeerDataChannels(peerDataChannels);
        });
    }
}


/***/ }),

/***/ "./src/WebSockets/WebSocketController.ts":
/*!***********************************************!*\
  !*** ./src/WebSockets/WebSocketController.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_381098__) => {

__nested_webpack_require_381098__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_381098__.d(__webpack_exports__, {
/* harmony export */   "WebSocketController": () => (/* binding */ WebSocketController)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_381098__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _MessageSend__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_381098__(/*! ./MessageSend */ "./src/WebSockets/MessageSend.ts");
/* harmony import */ var _SignallingProtocol__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_381098__(/*! ./SignallingProtocol */ "./src/WebSockets/SignallingProtocol.ts");
// Copyright Epic Games, Inc. All Rights Reserved.



/**
 * The controller for the WebSocket and all associated methods
 */
class WebSocketController {
    constructor() {
        this.WS_OPEN_STATE = 1;
        this.onOpen = new EventTarget();
        this.onClose = new EventTarget();
        this.signallingProtocol = new _SignallingProtocol__WEBPACK_IMPORTED_MODULE_0__.SignallingProtocol();
        _SignallingProtocol__WEBPACK_IMPORTED_MODULE_0__.SignallingProtocol.setupDefaultHandlers(this);
    }
    /**
     * Connect to the signaling server
     * @param connectionURL - The Address of the signaling server
     * @returns - If there is a connection
     */
    connect(connectionURL) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), connectionURL, 6);
        try {
            this.webSocket = new WebSocket(connectionURL);
            this.webSocket.onopen = (event) => this.handleOnOpen(event);
            this.webSocket.onerror = () => this.handleOnError();
            this.webSocket.onclose = (event) => this.handleOnClose(event);
            this.webSocket.onmessage = (event) => this.handleOnMessage(event);
            this.webSocket.onmessagebinary = (event) => this.handleOnMessageBinary(event);
            return true;
        }
        catch (error) {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Error(error, error);
            return false;
        }
    }
    /**
     * Handles what happens when a message is received in binary form
     * @param event - Message Received
     */
    handleOnMessageBinary(event) {
        // if the event is empty return
        if (!event || !event.data) {
            return;
        }
        // handle the binary and then handle the message
        event.data
            .text()
            .then((messageString) => {
            // build a new message
            const constructedMessage = new MessageEvent('messageFromBinary', {
                data: messageString
            });
            // send the new stringified event back into `onmessage`
            this.handleOnMessage(constructedMessage);
        })
            .catch((error) => {
            _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), `Failed to parse binary blob from websocket, reason: ${error}`);
        });
    }
    /**
     * Handles what happens when a message is received
     * @param event - Message Received
     */
    handleOnMessage(event) {
        // Check if websocket message is binary, if so, stringify it.
        if (event.data && event.data instanceof Blob) {
            this.handleOnMessageBinary(event);
            return;
        }
        const message = JSON.parse(event.data);
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), 'received => \n' +
            JSON.stringify(JSON.parse(event.data), undefined, 4), 6);
        // Send to our signalling protocol to handle the incoming message
        this.signallingProtocol.handleMessage(message.type, event.data);
    }
    /**
     * Handles when the Websocket is opened
     * @param event - Not Used
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    handleOnOpen(event) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), 'Connected to the signalling server via WebSocket', 6);
        this.onOpen.dispatchEvent(new Event('open'));
    }
    /**
     * Handles when there is an error on the websocket
     * @param event - Error Payload
     */
    handleOnError() {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Error(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), 'WebSocket error');
    }
    /**
     * Handles when the Websocket is closed
     * @param event - Close Event
     */
    handleOnClose(event) {
        this.onWebSocketOncloseOverlayMessage(event);
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), 'Disconnected to the signalling server via WebSocket: ' +
            JSON.stringify(event.code) +
            ' - ' +
            event.reason);
        this.onClose.dispatchEvent(new Event('close'));
    }
    requestStreamerList() {
        const payload = new _MessageSend__WEBPACK_IMPORTED_MODULE_2__.MessageListStreamers();
        this.webSocket.send(payload.payload());
    }
    sendSubscribe(streamerid) {
        const payload = new _MessageSend__WEBPACK_IMPORTED_MODULE_2__.MessageSubscribe(streamerid);
        this.webSocket.send(payload.payload());
    }
    sendUnsubscribe() {
        const payload = new _MessageSend__WEBPACK_IMPORTED_MODULE_2__.MessageUnsubscribe();
        this.webSocket.send(payload.payload());
    }
    sendWebRtcOffer(offer) {
        const payload = new _MessageSend__WEBPACK_IMPORTED_MODULE_2__.MessageWebRTCOffer(offer);
        this.webSocket.send(payload.payload());
    }
    sendWebRtcAnswer(answer) {
        const payload = new _MessageSend__WEBPACK_IMPORTED_MODULE_2__.MessageWebRTCAnswer(answer);
        this.webSocket.send(payload.payload());
    }
    sendWebRtcDatachannelRequest() {
        const payload = new _MessageSend__WEBPACK_IMPORTED_MODULE_2__.MessageWebRTCDatachannelRequest();
        this.webSocket.send(payload.payload());
    }
    sendSFURecvDataChannelReady() {
        const payload = new _MessageSend__WEBPACK_IMPORTED_MODULE_2__.MessageSFURecvDataChannelReady();
        this.webSocket.send(payload.payload());
    }
    /**
     * Sends an RTC Ice Candidate to the Server
     * @param candidate - RTC Ice Candidate
     */
    sendIceCandidate(candidate) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), 'Sending Ice Candidate');
        if (this.webSocket &&
            this.webSocket.readyState === this.WS_OPEN_STATE) {
            //ws.send(JSON.stringify({ type: 'iceCandidate', candidate: candidate }));
            const IceCandidate = new _MessageSend__WEBPACK_IMPORTED_MODULE_2__.MessageIceCandidate(candidate);
            this.webSocket.send(IceCandidate.payload());
        }
    }
    /**
     * Closes the Websocket connection
     */
    close() {
        var _a;
        (_a = this.webSocket) === null || _a === void 0 ? void 0 : _a.close();
    }
    /** Event used for Displaying websocket closed messages */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars, @typescript-eslint/no-empty-function
    onWebSocketOncloseOverlayMessage(event) { }
    /**
     * The Message Contains the payload of the peer connection options used for the RTC Peer hand shake
     * @param messageConfig - Config Message received from he signaling server
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars, @typescript-eslint/no-empty-function
    onConfig(messageConfig) { }
    /**
     * The Message Contains the payload of the peer connection options used for the RTC Peer hand shake
     * @param messageConfig - Config Message received from he signaling server
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars, @typescript-eslint/no-empty-function
    onStreamerList(messageStreamerList) { }
    /**
     * @param iceCandidate - Ice Candidate sent from the Signaling server server's RTC hand shake
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars, @typescript-eslint/no-empty-function
    onIceCandidate(iceCandidate) { }
    /**
     * Event is fired when the websocket receives the answer for the RTC peer Connection
     * @param messageAnswer - The RTC Answer payload from the signaling server
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars, @typescript-eslint/no-empty-function
    onWebRtcAnswer(messageAnswer) { }
    /**
     * Event is fired when the websocket receives the offer for the RTC peer Connection
     * @param messageOffer - The sdp offer
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars, @typescript-eslint/no-empty-function
    onWebRtcOffer(messageOffer) { }
    /**
     * Event is fired when the websocket receives the data channels for the RTC peer Connection from the SFU
     * @param messageDataChannels - The data channels details
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars, @typescript-eslint/no-empty-function
    onWebRtcPeerDataChannels(messageDataChannels) { }
}


/***/ }),

/***/ "./src/WebXR/WebXRController.ts":
/*!**************************************!*\
  !*** ./src/WebXR/WebXRController.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __nested_webpack_require_390903__) => {

__nested_webpack_require_390903__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_390903__.d(__webpack_exports__, {
/* harmony export */   "WebXRController": () => (/* binding */ WebXRController)
/* harmony export */ });
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_390903__(/*! ../Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _Util_WebGLUtils__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_390903__(/*! ../Util/WebGLUtils */ "./src/Util/WebGLUtils.ts");
/* harmony import */ var _Inputs_XRGamepadController__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_390903__(/*! ../Inputs/XRGamepadController */ "./src/Inputs/XRGamepadController.ts");
/* harmony import */ var _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_390903__(/*! ../Util/EventEmitter */ "./src/Util/EventEmitter.ts");
/* harmony import */ var _pixelstreamingfrontend__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_390903__(/*! ../pixelstreamingfrontend */ "./src/Config/Config.ts");
// Copyright Epic Games, Inc. All Rights Reserved.





class WebXRController {
    constructor(webRtcPlayerController) {
        this.xrSession = null;
        this.webRtcController = webRtcPlayerController;
        this.xrControllers = [];
        this.xrGamepadController = new _Inputs_XRGamepadController__WEBPACK_IMPORTED_MODULE_0__.XRGamepadController(this.webRtcController.streamMessageController);
        this.onSessionEnded = new EventTarget();
        this.onSessionStarted = new EventTarget();
        this.onFrame = new EventTarget();
    }
    xrClicked() {
        if (!this.xrSession) {
            navigator.xr
                .requestSession('immersive-vr')
                .then((session) => {
                this.onXrSessionStarted(session);
            });
        }
        else {
            this.xrSession.end();
        }
    }
    onXrSessionEnded() {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), 'XR Session ended');
        this.xrSession = null;
        this.onSessionEnded.dispatchEvent(new Event('xrSessionEnded'));
    }
    onXrSessionStarted(session) {
        _Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.Log(_Logger_Logger__WEBPACK_IMPORTED_MODULE_1__.Logger.GetStackTrace(), 'XR Session started');
        this.xrSession = session;
        this.xrSession.addEventListener('end', () => {
            this.onXrSessionEnded();
        });
        const canvas = document.createElement('canvas');
        this.gl = canvas.getContext('webgl2', {
            xrCompatible: true
        });
        this.xrSession.updateRenderState({
            baseLayer: new XRWebGLLayer(this.xrSession, this.gl)
        });
        // setup vertex shader
        const vertexShader = this.gl.createShader(this.gl.VERTEX_SHADER);
        this.gl.shaderSource(vertexShader, _Util_WebGLUtils__WEBPACK_IMPORTED_MODULE_2__.WebGLUtils.vertexShader());
        this.gl.compileShader(vertexShader);
        // setup fragment shader
        const fragmentShader = this.gl.createShader(this.gl.FRAGMENT_SHADER);
        this.gl.shaderSource(fragmentShader, _Util_WebGLUtils__WEBPACK_IMPORTED_MODULE_2__.WebGLUtils.fragmentShader());
        this.gl.compileShader(fragmentShader);
        // setup GLSL program
        const shaderProgram = this.gl.createProgram();
        this.gl.attachShader(shaderProgram, vertexShader);
        this.gl.attachShader(shaderProgram, fragmentShader);
        this.gl.linkProgram(shaderProgram);
        this.gl.useProgram(shaderProgram);
        // look up where vertex data needs to go
        this.positionLocation = this.gl.getAttribLocation(shaderProgram, 'a_position');
        this.texcoordLocation = this.gl.getAttribLocation(shaderProgram, 'a_texCoord');
        // Create a buffer to put three 2d clip space points in
        this.positionBuffer = this.gl.createBuffer();
        // Bind it to ARRAY_BUFFER (think of it as ARRAY_BUFFER = positionBuffer)
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.positionBuffer);
        // Turn on the position attribute
        this.gl.enableVertexAttribArray(this.positionLocation);
        // Create a texture.
        const texture = this.gl.createTexture();
        this.gl.bindTexture(this.gl.TEXTURE_2D, texture);
        // Set the parameters so we can render any size image.
        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, this.gl.CLAMP_TO_EDGE);
        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, this.gl.CLAMP_TO_EDGE);
        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.NEAREST);
        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.NEAREST);
        this.texcoordBuffer = this.gl.createBuffer();
        // lookup uniforms
        this.resolutionLocation = this.gl.getUniformLocation(shaderProgram, 'u_resolution');
        this.offsetLocation = this.gl.getUniformLocation(shaderProgram, 'u_offset');
        session.requestReferenceSpace('local').then((refSpace) => {
            this.xrRefSpace = refSpace;
            this.xrSession.requestAnimationFrame((time, frame) => this.onXrFrame(time, frame));
        });
        this.onSessionStarted.dispatchEvent(new Event('xrSessionStarted'));
    }
    onXrFrame(time, frame) {
        const pose = frame.getViewerPose(this.xrRefSpace);
        if (pose) {
            const matrix = pose.transform.matrix;
            const mat = [];
            for (let i = 0; i < 16; i++) {
                mat[i] = new Float32Array([matrix[i]])[0];
            }
            // prettier-ignore
            this.webRtcController.streamMessageController.toStreamerHandlers.get('XRHMDTransform')([
                mat[0], mat[4], mat[8], mat[12],
                mat[1], mat[5], mat[9], mat[13],
                mat[2], mat[6], mat[10], mat[14],
                mat[3], mat[7], mat[11], mat[15]
            ]);
            const glLayer = this.xrSession.renderState.baseLayer;
            // If we do have a valid pose, bind the WebGL layer's framebuffer,
            // which is where any content to be displayed on the XRDevice must be
            // rendered.
            this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, glLayer.framebuffer);
            // Upload the image into the texture. WebGL knows how to extract the current frame from the video element
            this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, this.gl.RGBA, this.gl.UNSIGNED_BYTE, this.webRtcController.videoPlayer.getVideoElement());
            this.render(this.webRtcController.videoPlayer.getVideoElement());
        }
        if (this.webRtcController.config.isFlagEnabled(_pixelstreamingfrontend__WEBPACK_IMPORTED_MODULE_3__.Flags.XRControllerInput)) {
            this.xrSession.inputSources.forEach((source, index, array) => {
                this.xrGamepadController.updateStatus(source, frame, this.xrRefSpace);
            }, this);
        }
        this.xrSession.requestAnimationFrame((time, frame) => this.onXrFrame(time, frame));
        this.onFrame.dispatchEvent(new _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_4__.XrFrameEvent({
            time,
            frame
        }));
    }
    render(videoElement) {
        if (!this.gl) {
            return;
        }
        const glLayer = this.xrSession.renderState.baseLayer;
        this.gl.viewport(0, 0, glLayer.framebufferWidth, glLayer.framebufferHeight);
        this.gl.uniform4f(this.offsetLocation, 1.0, 1.0, 0.0, 0.0);
        // Set rectangle
        // prettier-ignore
        this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array([
            0, 0,
            videoElement.videoWidth, 0,
            0, videoElement.videoHeight,
            0, videoElement.videoHeight,
            videoElement.videoWidth, 0,
            videoElement.videoWidth, videoElement.videoHeight
        ]), this.gl.STATIC_DRAW);
        // Provide texture coordinates for the rectangle
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.texcoordBuffer);
        this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array([
            0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0
        ]), this.gl.STATIC_DRAW);
        let size; // components per iteration
        let type; // the data type
        let normalize; // normalize the data
        let stride; // 0 = move forward size * sizeof(type) each iteration to get the next position
        let offset; // start position of the buffer
        // Bind the position buffer.
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.positionBuffer);
        // Tell the position attribute how to get data out of positionBuffer (ARRAY_BUFFER)
        size = 2; // 2 components per iteration
        type = this.gl.FLOAT; // the data is 32bit floats
        normalize = false; // don't normalize the data
        stride = 0; // 0 = move forward size * sizeof(type) each iteration to get the next position
        offset = 0; // start at the beginning of the buffer
        this.gl.vertexAttribPointer(this.positionLocation, size, type, normalize, stride, offset);
        // Turn on the texcoord attribute
        this.gl.enableVertexAttribArray(this.texcoordLocation);
        // bind the texcoord buffer.
        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.texcoordBuffer);
        // Tell the texcoord attribute how to get data out of texcoordBuffer (ARRAY_BUFFER)
        size = 2; // 2 components per iteration
        type = this.gl.FLOAT; // the data is 32bit floats
        normalize = false; // don't normalize the data
        stride = 0; // 0 = move forward size * sizeof(type) each iteration to get the next position
        offset = 0; // start at the beginning of the buffer
        this.gl.vertexAttribPointer(this.texcoordLocation, size, type, normalize, stride, offset);
        // set the resolution
        this.gl.uniform2f(this.resolutionLocation, videoElement.videoWidth, videoElement.videoHeight);
        // draw the rectangle.
        const primitiveType = this.gl.TRIANGLES;
        const count = 6;
        offset = 0;
        this.gl.drawArrays(primitiveType, offset, count);
    }
    static isSessionSupported(mode) {
        if (navigator.xr) {
            return navigator.xr.isSessionSupported(mode);
        }
        else {
            return new Promise(() => {
                return false;
            });
        }
    }
}


/***/ }),

/***/ "sdp":
/*!**********************!*\
  !*** external "sdp" ***!
  \**********************/
/***/ ((module) => {

var x = y => { var x = {}; __nested_webpack_require_402044__.d(x, y); return x; }
var y = x => () => x
module.exports = sdp__WEBPACK_IMPORTED_MODULE_0__;

/***/ })

/******/ });
/************************************************************************/
/******/ // The module cache
/******/ var __webpack_module_cache__ = {};
/******/ 
/******/ // The require function
/******/ function __nested_webpack_require_402044__(moduleId) {
/******/ 	// Check if module is in cache
/******/ 	var cachedModule = __webpack_module_cache__[moduleId];
/******/ 	if (cachedModule !== undefined) {
/******/ 		return cachedModule.exports;
/******/ 	}
/******/ 	// Create a new module (and put it into the cache)
/******/ 	var module = __webpack_module_cache__[moduleId] = {
/******/ 		// no module.id needed
/******/ 		// no module.loaded needed
/******/ 		exports: {}
/******/ 	};
/******/ 
/******/ 	// Execute the module function
/******/ 	__webpack_modules__[moduleId](module, module.exports, __nested_webpack_require_402044__);
/******/ 
/******/ 	// Return the exports of the module
/******/ 	return module.exports;
/******/ }
/******/ 
/************************************************************************/
/******/ /* webpack/runtime/define property getters */
/******/ (() => {
/******/ 	// define getter functions for harmony exports
/******/ 	__nested_webpack_require_402044__.d = (exports, definition) => {
/******/ 		for(var key in definition) {
/******/ 			if(__nested_webpack_require_402044__.o(definition, key) && !__nested_webpack_require_402044__.o(exports, key)) {
/******/ 				Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 			}
/******/ 		}
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/hasOwnProperty shorthand */
/******/ (() => {
/******/ 	__nested_webpack_require_402044__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ })();
/******/ 
/******/ /* webpack/runtime/make namespace object */
/******/ (() => {
/******/ 	// define __esModule on exports
/******/ 	__nested_webpack_require_402044__.r = (exports) => {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/ })();
/******/ 
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!***************************************!*\
  !*** ./src/pixelstreamingfrontend.ts ***!
  \***************************************/
__nested_webpack_require_402044__.r(__webpack_exports__);
/* harmony export */ __nested_webpack_require_402044__.d(__webpack_exports__, {
/* harmony export */   "AfkLogic": () => (/* reexport safe */ _AFK_AFKController__WEBPACK_IMPORTED_MODULE_9__.AFKController),
/* harmony export */   "AfkTimedOutEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_24__.AfkTimedOutEvent),
/* harmony export */   "AfkWarningActivateEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_24__.AfkWarningActivateEvent),
/* harmony export */   "AfkWarningDeactivateEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_24__.AfkWarningDeactivateEvent),
/* harmony export */   "AfkWarningUpdateEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_24__.AfkWarningUpdateEvent),
/* harmony export */   "AggregatedStats": () => (/* reexport safe */ _PeerConnectionController_AggregatedStats__WEBPACK_IMPORTED_MODULE_12__.AggregatedStats),
/* harmony export */   "CandidatePairStats": () => (/* reexport safe */ _PeerConnectionController_CandidatePairStats__WEBPACK_IMPORTED_MODULE_19__.CandidatePairStats),
/* harmony export */   "CandidateStat": () => (/* reexport safe */ _PeerConnectionController_CandidateStat__WEBPACK_IMPORTED_MODULE_20__.CandidateStat),
/* harmony export */   "Config": () => (/* reexport safe */ _Config_Config__WEBPACK_IMPORTED_MODULE_2__.Config),
/* harmony export */   "ControlSchemeType": () => (/* reexport safe */ _Config_Config__WEBPACK_IMPORTED_MODULE_2__.ControlSchemeType),
/* harmony export */   "DataChannelCloseEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_24__.DataChannelCloseEvent),
/* harmony export */   "DataChannelErrorEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_24__.DataChannelErrorEvent),
/* harmony export */   "DataChannelOpenEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_24__.DataChannelOpenEvent),
/* harmony export */   "DataChannelStats": () => (/* reexport safe */ _PeerConnectionController_DataChannelStats__WEBPACK_IMPORTED_MODULE_21__.DataChannelStats),
/* harmony export */   "EncoderSettings": () => (/* reexport safe */ _DataChannel_InitialSettings__WEBPACK_IMPORTED_MODULE_11__.EncoderSettings),
/* harmony export */   "EventEmitter": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_24__.EventEmitter),
/* harmony export */   "Flags": () => (/* reexport safe */ _Config_Config__WEBPACK_IMPORTED_MODULE_2__.Flags),
/* harmony export */   "HideFreezeFrameEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_24__.HideFreezeFrameEvent),
/* harmony export */   "InboundAudioStats": () => (/* reexport safe */ _PeerConnectionController_InboundRTPStats__WEBPACK_IMPORTED_MODULE_22__.InboundAudioStats),
/* harmony export */   "InboundVideoStats": () => (/* reexport safe */ _PeerConnectionController_InboundRTPStats__WEBPACK_IMPORTED_MODULE_22__.InboundVideoStats),
/* harmony export */   "InitialSettings": () => (/* reexport safe */ _DataChannel_InitialSettings__WEBPACK_IMPORTED_MODULE_11__.InitialSettings),
/* harmony export */   "InitialSettingsEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_24__.InitialSettingsEvent),
/* harmony export */   "LatencyTestResultEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_24__.LatencyTestResultEvent),
/* harmony export */   "LatencyTestResults": () => (/* reexport safe */ _DataChannel_LatencyTestResults__WEBPACK_IMPORTED_MODULE_10__.LatencyTestResults),
/* harmony export */   "LoadFreezeFrameEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_24__.LoadFreezeFrameEvent),
/* harmony export */   "Logger": () => (/* reexport safe */ _Logger_Logger__WEBPACK_IMPORTED_MODULE_13__.Logger),
/* harmony export */   "MessageRecv": () => (/* reexport safe */ _WebSockets_MessageReceive__WEBPACK_IMPORTED_MODULE_16__.MessageRecv),
/* harmony export */   "MessageSend": () => (/* reexport safe */ _WebSockets_MessageSend__WEBPACK_IMPORTED_MODULE_15__.MessageSend),
/* harmony export */   "MessageStreamerList": () => (/* reexport safe */ _WebSockets_MessageReceive__WEBPACK_IMPORTED_MODULE_16__.MessageStreamerList),
/* harmony export */   "NumericParameters": () => (/* reexport safe */ _Config_Config__WEBPACK_IMPORTED_MODULE_2__.NumericParameters),
/* harmony export */   "OptionParameters": () => (/* reexport safe */ _Config_Config__WEBPACK_IMPORTED_MODULE_2__.OptionParameters),
/* harmony export */   "OutBoundVideoStats": () => (/* reexport safe */ _PeerConnectionController_OutBoundRTPStats__WEBPACK_IMPORTED_MODULE_23__.OutBoundVideoStats),
/* harmony export */   "PixelStreaming": () => (/* reexport safe */ _PixelStreaming_PixelStreaming__WEBPACK_IMPORTED_MODULE_8__.PixelStreaming),
/* harmony export */   "PlayStreamErrorEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_24__.PlayStreamErrorEvent),
/* harmony export */   "PlayStreamEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_24__.PlayStreamEvent),
/* harmony export */   "PlayStreamRejectedEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_24__.PlayStreamRejectedEvent),
/* harmony export */   "SettingBase": () => (/* reexport safe */ _Config_SettingBase__WEBPACK_IMPORTED_MODULE_3__.SettingBase),
/* harmony export */   "SettingFlag": () => (/* reexport safe */ _Config_SettingFlag__WEBPACK_IMPORTED_MODULE_4__.SettingFlag),
/* harmony export */   "SettingNumber": () => (/* reexport safe */ _Config_SettingNumber__WEBPACK_IMPORTED_MODULE_5__.SettingNumber),
/* harmony export */   "SettingOption": () => (/* reexport safe */ _Config_SettingOption__WEBPACK_IMPORTED_MODULE_6__.SettingOption),
/* harmony export */   "SettingText": () => (/* reexport safe */ _Config_SettingText__WEBPACK_IMPORTED_MODULE_7__.SettingText),
/* harmony export */   "SettingsChangedEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_24__.SettingsChangedEvent),
/* harmony export */   "SignallingProtocol": () => (/* reexport safe */ _WebSockets_SignallingProtocol__WEBPACK_IMPORTED_MODULE_18__.SignallingProtocol),
/* harmony export */   "StatsReceivedEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_24__.StatsReceivedEvent),
/* harmony export */   "StreamLoadingEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_24__.StreamLoadingEvent),
/* harmony export */   "StreamPreConnectEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_24__.StreamPreConnectEvent),
/* harmony export */   "StreamPreDisconnectEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_24__.StreamPreDisconnectEvent),
/* harmony export */   "StreamReconnectEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_24__.StreamReconnectEvent),
/* harmony export */   "StreamerListMessageEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_24__.StreamerListMessageEvent),
/* harmony export */   "TextParameters": () => (/* reexport safe */ _Config_Config__WEBPACK_IMPORTED_MODULE_2__.TextParameters),
/* harmony export */   "UnquantizedAndDenormalizeUnsigned": () => (/* reexport safe */ _Util_CoordinateConverter__WEBPACK_IMPORTED_MODULE_14__.UnquantizedDenormalizedUnsignedCoord),
/* harmony export */   "VideoEncoderAvgQPEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_24__.VideoEncoderAvgQPEvent),
/* harmony export */   "VideoInitializedEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_24__.VideoInitializedEvent),
/* harmony export */   "WebRTCSettings": () => (/* reexport safe */ _DataChannel_InitialSettings__WEBPACK_IMPORTED_MODULE_11__.WebRTCSettings),
/* harmony export */   "WebRtcAutoConnectEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_24__.WebRtcAutoConnectEvent),
/* harmony export */   "WebRtcConnectedEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_24__.WebRtcConnectedEvent),
/* harmony export */   "WebRtcConnectingEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_24__.WebRtcConnectingEvent),
/* harmony export */   "WebRtcDisconnectedEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_24__.WebRtcDisconnectedEvent),
/* harmony export */   "WebRtcFailedEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_24__.WebRtcFailedEvent),
/* harmony export */   "WebRtcPlayerController": () => (/* reexport safe */ _WebRtcPlayer_WebRtcPlayerController__WEBPACK_IMPORTED_MODULE_0__.WebRtcPlayerController),
/* harmony export */   "WebRtcSdpEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_24__.WebRtcSdpEvent),
/* harmony export */   "WebSocketController": () => (/* reexport safe */ _WebSockets_WebSocketController__WEBPACK_IMPORTED_MODULE_17__.WebSocketController),
/* harmony export */   "WebXRController": () => (/* reexport safe */ _WebXR_WebXRController__WEBPACK_IMPORTED_MODULE_1__.WebXRController),
/* harmony export */   "XrFrameEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_24__.XrFrameEvent),
/* harmony export */   "XrSessionEndedEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_24__.XrSessionEndedEvent),
/* harmony export */   "XrSessionStartedEvent": () => (/* reexport safe */ _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_24__.XrSessionStartedEvent)
/* harmony export */ });
/* harmony import */ var _WebRtcPlayer_WebRtcPlayerController__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_402044__(/*! ./WebRtcPlayer/WebRtcPlayerController */ "./src/WebRtcPlayer/WebRtcPlayerController.ts");
/* harmony import */ var _WebXR_WebXRController__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_402044__(/*! ./WebXR/WebXRController */ "./src/WebXR/WebXRController.ts");
/* harmony import */ var _Config_Config__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_402044__(/*! ./Config/Config */ "./src/Config/Config.ts");
/* harmony import */ var _Config_SettingBase__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_402044__(/*! ./Config/SettingBase */ "./src/Config/SettingBase.ts");
/* harmony import */ var _Config_SettingFlag__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_402044__(/*! ./Config/SettingFlag */ "./src/Config/SettingFlag.ts");
/* harmony import */ var _Config_SettingNumber__WEBPACK_IMPORTED_MODULE_5__ = __nested_webpack_require_402044__(/*! ./Config/SettingNumber */ "./src/Config/SettingNumber.ts");
/* harmony import */ var _Config_SettingOption__WEBPACK_IMPORTED_MODULE_6__ = __nested_webpack_require_402044__(/*! ./Config/SettingOption */ "./src/Config/SettingOption.ts");
/* harmony import */ var _Config_SettingText__WEBPACK_IMPORTED_MODULE_7__ = __nested_webpack_require_402044__(/*! ./Config/SettingText */ "./src/Config/SettingText.ts");
/* harmony import */ var _PixelStreaming_PixelStreaming__WEBPACK_IMPORTED_MODULE_8__ = __nested_webpack_require_402044__(/*! ./PixelStreaming/PixelStreaming */ "./src/PixelStreaming/PixelStreaming.ts");
/* harmony import */ var _AFK_AFKController__WEBPACK_IMPORTED_MODULE_9__ = __nested_webpack_require_402044__(/*! ./AFK/AFKController */ "./src/AFK/AFKController.ts");
/* harmony import */ var _DataChannel_LatencyTestResults__WEBPACK_IMPORTED_MODULE_10__ = __nested_webpack_require_402044__(/*! ./DataChannel/LatencyTestResults */ "./src/DataChannel/LatencyTestResults.ts");
/* harmony import */ var _DataChannel_InitialSettings__WEBPACK_IMPORTED_MODULE_11__ = __nested_webpack_require_402044__(/*! ./DataChannel/InitialSettings */ "./src/DataChannel/InitialSettings.ts");
/* harmony import */ var _PeerConnectionController_AggregatedStats__WEBPACK_IMPORTED_MODULE_12__ = __nested_webpack_require_402044__(/*! ./PeerConnectionController/AggregatedStats */ "./src/PeerConnectionController/AggregatedStats.ts");
/* harmony import */ var _Logger_Logger__WEBPACK_IMPORTED_MODULE_13__ = __nested_webpack_require_402044__(/*! ./Logger/Logger */ "./src/Logger/Logger.ts");
/* harmony import */ var _Util_CoordinateConverter__WEBPACK_IMPORTED_MODULE_14__ = __nested_webpack_require_402044__(/*! ./Util/CoordinateConverter */ "./src/Util/CoordinateConverter.ts");
/* harmony import */ var _WebSockets_MessageSend__WEBPACK_IMPORTED_MODULE_15__ = __nested_webpack_require_402044__(/*! ./WebSockets/MessageSend */ "./src/WebSockets/MessageSend.ts");
/* harmony import */ var _WebSockets_MessageReceive__WEBPACK_IMPORTED_MODULE_16__ = __nested_webpack_require_402044__(/*! ./WebSockets/MessageReceive */ "./src/WebSockets/MessageReceive.ts");
/* harmony import */ var _WebSockets_WebSocketController__WEBPACK_IMPORTED_MODULE_17__ = __nested_webpack_require_402044__(/*! ./WebSockets/WebSocketController */ "./src/WebSockets/WebSocketController.ts");
/* harmony import */ var _WebSockets_SignallingProtocol__WEBPACK_IMPORTED_MODULE_18__ = __nested_webpack_require_402044__(/*! ./WebSockets/SignallingProtocol */ "./src/WebSockets/SignallingProtocol.ts");
/* harmony import */ var _PeerConnectionController_CandidatePairStats__WEBPACK_IMPORTED_MODULE_19__ = __nested_webpack_require_402044__(/*! ./PeerConnectionController/CandidatePairStats */ "./src/PeerConnectionController/CandidatePairStats.ts");
/* harmony import */ var _PeerConnectionController_CandidateStat__WEBPACK_IMPORTED_MODULE_20__ = __nested_webpack_require_402044__(/*! ./PeerConnectionController/CandidateStat */ "./src/PeerConnectionController/CandidateStat.ts");
/* harmony import */ var _PeerConnectionController_DataChannelStats__WEBPACK_IMPORTED_MODULE_21__ = __nested_webpack_require_402044__(/*! ./PeerConnectionController/DataChannelStats */ "./src/PeerConnectionController/DataChannelStats.ts");
/* harmony import */ var _PeerConnectionController_InboundRTPStats__WEBPACK_IMPORTED_MODULE_22__ = __nested_webpack_require_402044__(/*! ./PeerConnectionController/InboundRTPStats */ "./src/PeerConnectionController/InboundRTPStats.ts");
/* harmony import */ var _PeerConnectionController_OutBoundRTPStats__WEBPACK_IMPORTED_MODULE_23__ = __nested_webpack_require_402044__(/*! ./PeerConnectionController/OutBoundRTPStats */ "./src/PeerConnectionController/OutBoundRTPStats.ts");
/* harmony import */ var _Util_EventEmitter__WEBPACK_IMPORTED_MODULE_24__ = __nested_webpack_require_402044__(/*! ./Util/EventEmitter */ "./src/Util/EventEmitter.ts");
// Copyright Epic Games, Inc. All Rights Reserved.


























})();

var __webpack_exports__AfkLogic = __webpack_exports__.AfkLogic;
var __webpack_exports__AfkTimedOutEvent = __webpack_exports__.AfkTimedOutEvent;
var __webpack_exports__AfkWarningActivateEvent = __webpack_exports__.AfkWarningActivateEvent;
var __webpack_exports__AfkWarningDeactivateEvent = __webpack_exports__.AfkWarningDeactivateEvent;
var __webpack_exports__AfkWarningUpdateEvent = __webpack_exports__.AfkWarningUpdateEvent;
var __webpack_exports__AggregatedStats = __webpack_exports__.AggregatedStats;
var __webpack_exports__CandidatePairStats = __webpack_exports__.CandidatePairStats;
var __webpack_exports__CandidateStat = __webpack_exports__.CandidateStat;
var __webpack_exports__Config = __webpack_exports__.Config;
var __webpack_exports__ControlSchemeType = __webpack_exports__.ControlSchemeType;
var __webpack_exports__DataChannelCloseEvent = __webpack_exports__.DataChannelCloseEvent;
var __webpack_exports__DataChannelErrorEvent = __webpack_exports__.DataChannelErrorEvent;
var __webpack_exports__DataChannelOpenEvent = __webpack_exports__.DataChannelOpenEvent;
var __webpack_exports__DataChannelStats = __webpack_exports__.DataChannelStats;
var __webpack_exports__EncoderSettings = __webpack_exports__.EncoderSettings;
var __webpack_exports__EventEmitter = __webpack_exports__.EventEmitter;
var __webpack_exports__Flags = __webpack_exports__.Flags;
var __webpack_exports__HideFreezeFrameEvent = __webpack_exports__.HideFreezeFrameEvent;
var __webpack_exports__InboundAudioStats = __webpack_exports__.InboundAudioStats;
var __webpack_exports__InboundVideoStats = __webpack_exports__.InboundVideoStats;
var __webpack_exports__InitialSettings = __webpack_exports__.InitialSettings;
var __webpack_exports__InitialSettingsEvent = __webpack_exports__.InitialSettingsEvent;
var __webpack_exports__LatencyTestResultEvent = __webpack_exports__.LatencyTestResultEvent;
var __webpack_exports__LatencyTestResults = __webpack_exports__.LatencyTestResults;
var __webpack_exports__LoadFreezeFrameEvent = __webpack_exports__.LoadFreezeFrameEvent;
var __webpack_exports__Logger = __webpack_exports__.Logger;
var __webpack_exports__MessageRecv = __webpack_exports__.MessageRecv;
var __webpack_exports__MessageSend = __webpack_exports__.MessageSend;
var __webpack_exports__MessageStreamerList = __webpack_exports__.MessageStreamerList;
var __webpack_exports__NumericParameters = __webpack_exports__.NumericParameters;
var __webpack_exports__OptionParameters = __webpack_exports__.OptionParameters;
var __webpack_exports__OutBoundVideoStats = __webpack_exports__.OutBoundVideoStats;
var __webpack_exports__PixelStreaming = __webpack_exports__.PixelStreaming;
var __webpack_exports__PlayStreamErrorEvent = __webpack_exports__.PlayStreamErrorEvent;
var __webpack_exports__PlayStreamEvent = __webpack_exports__.PlayStreamEvent;
var __webpack_exports__PlayStreamRejectedEvent = __webpack_exports__.PlayStreamRejectedEvent;
var __webpack_exports__SettingBase = __webpack_exports__.SettingBase;
var __webpack_exports__SettingFlag = __webpack_exports__.SettingFlag;
var __webpack_exports__SettingNumber = __webpack_exports__.SettingNumber;
var __webpack_exports__SettingOption = __webpack_exports__.SettingOption;
var __webpack_exports__SettingText = __webpack_exports__.SettingText;
var __webpack_exports__SettingsChangedEvent = __webpack_exports__.SettingsChangedEvent;
var __webpack_exports__SignallingProtocol = __webpack_exports__.SignallingProtocol;
var __webpack_exports__StatsReceivedEvent = __webpack_exports__.StatsReceivedEvent;
var __webpack_exports__StreamLoadingEvent = __webpack_exports__.StreamLoadingEvent;
var __webpack_exports__StreamPreConnectEvent = __webpack_exports__.StreamPreConnectEvent;
var __webpack_exports__StreamPreDisconnectEvent = __webpack_exports__.StreamPreDisconnectEvent;
var __webpack_exports__StreamReconnectEvent = __webpack_exports__.StreamReconnectEvent;
var __webpack_exports__StreamerListMessageEvent = __webpack_exports__.StreamerListMessageEvent;
var __webpack_exports__TextParameters = __webpack_exports__.TextParameters;
var __webpack_exports__UnquantizedAndDenormalizeUnsigned = __webpack_exports__.UnquantizedAndDenormalizeUnsigned;
var __webpack_exports__VideoEncoderAvgQPEvent = __webpack_exports__.VideoEncoderAvgQPEvent;
var __webpack_exports__VideoInitializedEvent = __webpack_exports__.VideoInitializedEvent;
var __webpack_exports__WebRTCSettings = __webpack_exports__.WebRTCSettings;
var __webpack_exports__WebRtcAutoConnectEvent = __webpack_exports__.WebRtcAutoConnectEvent;
var __webpack_exports__WebRtcConnectedEvent = __webpack_exports__.WebRtcConnectedEvent;
var __webpack_exports__WebRtcConnectingEvent = __webpack_exports__.WebRtcConnectingEvent;
var __webpack_exports__WebRtcDisconnectedEvent = __webpack_exports__.WebRtcDisconnectedEvent;
var __webpack_exports__WebRtcFailedEvent = __webpack_exports__.WebRtcFailedEvent;
var __webpack_exports__WebRtcPlayerController = __webpack_exports__.WebRtcPlayerController;
var __webpack_exports__WebRtcSdpEvent = __webpack_exports__.WebRtcSdpEvent;
var __webpack_exports__WebSocketController = __webpack_exports__.WebSocketController;
var __webpack_exports__WebXRController = __webpack_exports__.WebXRController;
var __webpack_exports__XrFrameEvent = __webpack_exports__.XrFrameEvent;
var __webpack_exports__XrSessionEndedEvent = __webpack_exports__.XrSessionEndedEvent;
var __webpack_exports__XrSessionStartedEvent = __webpack_exports__.XrSessionStartedEvent;


//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUUsQ0FBQyxVQUFVLENBQUMsYUFBYSxFQUFFLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBRUQsTUFBTSxDQUFDLGtCQUFrQixDQUFDLElBQW1CO1FBQ3pDLElBQUksU0FBUyxDQUFDLEVBQUUsRUFBRTtZQUNkLE9BQU8sU0FBUyxDQUFDLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNoRDthQUFNO1lBQ0gsT0FBTyxJQUFJLE9BQU8sQ0FBVSxHQUFHLEVBQUU7Z0JBQzdCLE9BQU8sS0FBSyxDQUFDO1lBQ2pCLENBQUMsQ0FBQyxDQUFDO1NBQ047SUFDTCxDQUFDO0NBQ0o7Ozs7Ozs7Ozs7O0FDOVRELGVBQWUsWUFBWSw2QkFBNkI7QUFDeEQ7QUFDQTs7Ozs7O1NDRkE7U0FDQTs7U0FFQTtTQUNBO1NBQ0E7U0FDQTtTQUNBO1NBQ0E7U0FDQTtTQUNBO1NBQ0E7U0FDQTtTQUNBO1NBQ0E7U0FDQTs7U0FFQTtTQUNBOztTQUVBO1NBQ0E7U0FDQTs7Ozs7VUN0QkE7VUFDQTtVQUNBO1VBQ0E7VUFDQSx5Q0FBeUMsd0NBQXdDO1VBQ2pGO1VBQ0E7VUFDQTs7Ozs7VUNQQTs7Ozs7VUNBQTtVQUNBO1VBQ0E7VUFDQSx1REFBdUQsaUJBQWlCO1VBQ3hFO1VBQ0EsZ0RBQWdELGFBQWE7VUFDN0Q7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDTkEsa0RBQWtEO0FBRTZCO0FBQ3JCO0FBYWpDO0FBQzBCO0FBQ0E7QUFDSTtBQUNBO0FBQ0o7QUFDYztBQUVEO0FBRU07QUFLL0I7QUFDc0M7QUFDcEM7QUFDOEU7QUFDaEU7QUFDd0I7QUFDUjtBQUNGO0FBRWM7QUFDVjtBQUNNO0FBSTNCO0FBQzZCO0FBQzdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGVwaWNnYW1lcy1wcy9saWItcGl4ZWxzdHJlYW1pbmdmcm9udGVuZC11ZTUuMi8uL3NyYy9BRksvQUZLQ29udHJvbGxlci50cyIsIndlYnBhY2s6Ly9AZXBpY2dhbWVzLXBzL2xpYi1waXhlbHN0cmVhbWluZ2Zyb250ZW5kLXVlNS4yLy4vc3JjL0NvbmZpZy9Db25maWcudHMiLCJ3ZWJwYWNrOi8vQGVwaWNnYW1lcy1wcy9saWItcGl4ZWxzdHJlYW1pbmdmcm9udGVuZC11ZTUuMi8uL3NyYy9Db25maWcvU2V0dGluZ0Jhc2UudHMiLCJ3ZWJwYWNrOi8vQGVwaWNnYW1lcy1wcy9saWItcGl4ZWxzdHJlYW1pbmdmcm9udGVuZC11ZTUuMi8uL3NyYy9Db25maWcvU2V0dGluZ0ZsYWcudHMiLCJ3ZWJwYWNrOi8vQGVwaWNnYW1lcy1wcy9saWItcGl4ZWxzdHJlYW1pbmdmcm9udGVuZC11ZTUuMi8uL3NyYy9Db25maWcvU2V0dGluZ051bWJlci50cyIsIndlYnBhY2s6Ly9AZXBpY2dhbWVzLXBzL2xpYi1waXhlbHN0cmVhbWluZ2Zyb250ZW5kLXVlNS4yLy4vc3JjL0NvbmZpZy9TZXR0aW5nT3B0aW9uLnRzIiwid2VicGFjazovL0BlcGljZ2FtZXMtcHMvbGliLXBpeGVsc3RyZWFtaW5nZnJvbnRlbmQtdWU1LjIvLi9zcmMvQ29uZmlnL1NldHRpbmdUZXh0LnRzIiwid2VicGFjazovL0BlcGljZ2FtZXMtcHMvbGliLXBpeGVsc3RyZWFtaW5nZnJvbnRlbmQtdWU1LjIvLi9zcmMvRGF0YUNoYW5uZWwvRGF0YUNoYW5uZWxDb250cm9sbGVyLnRzIiwid2VicGFjazovL0BlcGljZ2FtZXMtcHMvbGliLXBpeGVsc3RyZWFtaW5nZnJvbnRlbmQtdWU1LjIvLi9zcmMvRGF0YUNoYW5uZWwvRGF0YUNoYW5uZWxTZW5kZXIudHMiLCJ3ZWJwYWNrOi8vQGVwaWNnYW1lcy1wcy9saWItcGl4ZWxzdHJlYW1pbmdmcm9udGVuZC11ZTUuMi8uL3NyYy9EYXRhQ2hhbm5lbC9Jbml0aWFsU2V0dGluZ3MudHMiLCJ3ZWJwYWNrOi8vQGVwaWNnYW1lcy1wcy9saWItcGl4ZWxzdHJlYW1pbmdmcm9udGVuZC11ZTUuMi8uL3NyYy9EYXRhQ2hhbm5lbC9MYXRlbmN5VGVzdFJlc3VsdHMudHMiLCJ3ZWJwYWNrOi8vQGVwaWNnYW1lcy1wcy9saWItcGl4ZWxzdHJlYW1pbmdmcm9udGVuZC11ZTUuMi8uL3NyYy9GcmVlemVGcmFtZS9GcmVlemVGcmFtZS50cyIsIndlYnBhY2s6Ly9AZXBpY2dhbWVzLXBzL2xpYi1waXhlbHN0cmVhbWluZ2Zyb250ZW5kLXVlNS4yLy4vc3JjL0ZyZWV6ZUZyYW1lL0ZyZWV6ZUZyYW1lQ29udHJvbGxlci50cyIsIndlYnBhY2s6Ly9AZXBpY2dhbWVzLXBzL2xpYi1waXhlbHN0cmVhbWluZ2Zyb250ZW5kLXVlNS4yLy4vc3JjL0lucHV0cy9GYWtlVG91Y2hDb250cm9sbGVyLnRzIiwid2VicGFjazovL0BlcGljZ2FtZXMtcHMvbGliLXBpeGVsc3RyZWFtaW5nZnJvbnRlbmQtdWU1LjIvLi9zcmMvSW5wdXRzL0dhbWVwYWRDb250cm9sbGVyLnRzIiwid2VicGFjazovL0BlcGljZ2FtZXMtcHMvbGliLXBpeGVsc3RyZWFtaW5nZnJvbnRlbmQtdWU1LjIvLi9zcmMvSW5wdXRzL0hvdmVyaW5nTW91c2VFdmVudHMudHMiLCJ3ZWJwYWNrOi8vQGVwaWNnYW1lcy1wcy9saWItcGl4ZWxzdHJlYW1pbmdmcm9udGVuZC11ZTUuMi8uL3NyYy9JbnB1dHMvSW5wdXRDbGFzc2VzRmFjdG9yeS50cyIsIndlYnBhY2s6Ly9AZXBpY2dhbWVzLXBzL2xpYi1waXhlbHN0cmVhbWluZ2Zyb250ZW5kLXVlNS4yLy4vc3JjL0lucHV0cy9LZXlib2FyZENvbnRyb2xsZXIudHMiLCJ3ZWJwYWNrOi8vQGVwaWNnYW1lcy1wcy9saWItcGl4ZWxzdHJlYW1pbmdmcm9udGVuZC11ZTUuMi8uL3NyYy9JbnB1dHMvTG9ja2VkTW91c2VFdmVudHMudHMiLCJ3ZWJwYWNrOi8vQGVwaWNnYW1lcy1wcy9saWItcGl4ZWxzdHJlYW1pbmdmcm9udGVuZC11ZTUuMi8uL3NyYy9JbnB1dHMvTW91c2VCdXR0b25zLnRzIiwid2VicGFjazovL0BlcGljZ2FtZXMtcHMvbGliLXBpeGVsc3RyZWFtaW5nZnJvbnRlbmQtdWU1LjIvLi9zcmMvSW5wdXRzL01vdXNlQ29udHJvbGxlci50cyIsIndlYnBhY2s6Ly9AZXBpY2dhbWVzLXBzL2xpYi1waXhlbHN0cmVhbWluZ2Zyb250ZW5kLXVlNS4yLy4vc3JjL0lucHV0cy9TcGVjaWFsS2V5Q29kZXMudHMiLCJ3ZWJwYWNrOi8vQGVwaWNnYW1lcy1wcy9saWItcGl4ZWxzdHJlYW1pbmdmcm9udGVuZC11ZTUuMi8uL3NyYy9JbnB1dHMvVG91Y2hDb250cm9sbGVyLnRzIiwid2VicGFjazovL0BlcGljZ2FtZXMtcHMvbGliLXBpeGVsc3RyZWFtaW5nZnJvbnRlbmQtdWU1LjIvLi9zcmMvSW5wdXRzL1hSR2FtZXBhZENvbnRyb2xsZXIudHMiLCJ3ZWJwYWNrOi8vQGVwaWNnYW1lcy1wcy9saWItcGl4ZWxzdHJlYW1pbmdmcm9udGVuZC11ZTUuMi8uL3NyYy9Mb2dnZXIvTG9nZ2VyLnRzIiwid2VicGFjazovL0BlcGljZ2FtZXMtcHMvbGliLXBpeGVsc3RyZWFtaW5nZnJvbnRlbmQtdWU1LjIvLi9zcmMvUGVlckNvbm5lY3Rpb25Db250cm9sbGVyL0FnZ3JlZ2F0ZWRTdGF0cy50cyIsIndlYnBhY2s6Ly9AZXBpY2dhbWVzLXBzL2xpYi1waXhlbHN0cmVhbWluZ2Zyb250ZW5kLXVlNS4yLy4vc3JjL1BlZXJDb25uZWN0aW9uQ29udHJvbGxlci9DYW5kaWRhdGVQYWlyU3RhdHMudHMiLCJ3ZWJwYWNrOi8vQGVwaWNnYW1lcy1wcy9saWItcGl4ZWxzdHJlYW1pbmdmcm9udGVuZC11ZTUuMi8uL3NyYy9QZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIvQ2FuZGlkYXRlU3RhdC50cyIsIndlYnBhY2s6Ly9AZXBpY2dhbWVzLXBzL2xpYi1waXhlbHN0cmVhbWluZ2Zyb250ZW5kLXVlNS4yLy4vc3JjL1BlZXJDb25uZWN0aW9uQ29udHJvbGxlci9EYXRhQ2hhbm5lbFN0YXRzLnRzIiwid2VicGFjazovL0BlcGljZ2FtZXMtcHMvbGliLXBpeGVsc3RyZWFtaW5nZnJvbnRlbmQtdWU1LjIvLi9zcmMvUGVlckNvbm5lY3Rpb25Db250cm9sbGVyL0luYm91bmRSVFBTdGF0cy50cyIsIndlYnBhY2s6Ly9AZXBpY2dhbWVzLXBzL2xpYi1waXhlbHN0cmVhbWluZ2Zyb250ZW5kLXVlNS4yLy4vc3JjL1BlZXJDb25uZWN0aW9uQ29udHJvbGxlci9PdXRCb3VuZFJUUFN0YXRzLnRzIiwid2VicGFjazovL0BlcGljZ2FtZXMtcHMvbGliLXBpeGVsc3RyZWFtaW5nZnJvbnRlbmQtdWU1LjIvLi9zcmMvUGVlckNvbm5lY3Rpb25Db250cm9sbGVyL1BlZXJDb25uZWN0aW9uQ29udHJvbGxlci50cyIsIndlYnBhY2s6Ly9AZXBpY2dhbWVzLXBzL2xpYi1waXhlbHN0cmVhbWluZ2Zyb250ZW5kLXVlNS4yLy4vc3JjL1BlZXJDb25uZWN0aW9uQ29udHJvbGxlci9TZXNzaW9uU3RhdHMudHMiLCJ3ZWJwYWNrOi8vQGVwaWNnYW1lcy1wcy9saWItcGl4ZWxzdHJlYW1pbmdmcm9udGVuZC11ZTUuMi8uL3NyYy9QZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIvU3RyZWFtU3RhdHMudHMiLCJ3ZWJwYWNrOi8vQGVwaWNnYW1lcy1wcy9saWItcGl4ZWxzdHJlYW1pbmdmcm9udGVuZC11ZTUuMi8uL3NyYy9QaXhlbFN0cmVhbWluZy9QaXhlbFN0cmVhbWluZy50cyIsIndlYnBhY2s6Ly9AZXBpY2dhbWVzLXBzL2xpYi1waXhlbHN0cmVhbWluZ2Zyb250ZW5kLXVlNS4yLy4vc3JjL1VJL09uU2NyZWVuS2V5Ym9hcmQudHMiLCJ3ZWJwYWNrOi8vQGVwaWNnYW1lcy1wcy9saWItcGl4ZWxzdHJlYW1pbmdmcm9udGVuZC11ZTUuMi8uL3NyYy9VZUluc3RhbmNlTWVzc2FnZS9SZXNwb25zZUNvbnRyb2xsZXIudHMiLCJ3ZWJwYWNrOi8vQGVwaWNnYW1lcy1wcy9saWItcGl4ZWxzdHJlYW1pbmdmcm9udGVuZC11ZTUuMi8uL3NyYy9VZUluc3RhbmNlTWVzc2FnZS9TZW5kRGVzY3JpcHRvckNvbnRyb2xsZXIudHMiLCJ3ZWJwYWNrOi8vQGVwaWNnYW1lcy1wcy9saWItcGl4ZWxzdHJlYW1pbmdmcm9udGVuZC11ZTUuMi8uL3NyYy9VZUluc3RhbmNlTWVzc2FnZS9TZW5kTWVzc2FnZUNvbnRyb2xsZXIudHMiLCJ3ZWJwYWNrOi8vQGVwaWNnYW1lcy1wcy9saWItcGl4ZWxzdHJlYW1pbmdmcm9udGVuZC11ZTUuMi8uL3NyYy9VZUluc3RhbmNlTWVzc2FnZS9TdHJlYW1NZXNzYWdlQ29udHJvbGxlci50cyIsIndlYnBhY2s6Ly9AZXBpY2dhbWVzLXBzL2xpYi1waXhlbHN0cmVhbWluZ2Zyb250ZW5kLXVlNS4yLy4vc3JjL1VlSW5zdGFuY2VNZXNzYWdlL1RvU3RyZWFtZXJNZXNzYWdlc0NvbnRyb2xsZXIudHMiLCJ3ZWJwYWNrOi8vQGVwaWNnYW1lcy1wcy9saWItcGl4ZWxzdHJlYW1pbmdmcm9udGVuZC11ZTUuMi8uL3NyYy9VZUluc3RhbmNlTWVzc2FnZS9Ud29XYXlNYXAudHMiLCJ3ZWJwYWNrOi8vQGVwaWNnYW1lcy1wcy9saWItcGl4ZWxzdHJlYW1pbmdmcm9udGVuZC11ZTUuMi8uL3NyYy9VdGlsL0Nvb3JkaW5hdGVDb252ZXJ0ZXIudHMiLCJ3ZWJwYWNrOi8vQGVwaWNnYW1lcy1wcy9saWItcGl4ZWxzdHJlYW1pbmdmcm9udGVuZC11ZTUuMi8uL3NyYy9VdGlsL0V2ZW50RW1pdHRlci50cyIsIndlYnBhY2s6Ly9AZXBpY2dhbWVzLXBzL2xpYi1waXhlbHN0cmVhbWluZ2Zyb250ZW5kLXVlNS4yLy4vc3JjL1V0aWwvRXZlbnRMaXN0ZW5lclRyYWNrZXIudHMiLCJ3ZWJwYWNrOi8vQGVwaWNnYW1lcy1wcy9saWItcGl4ZWxzdHJlYW1pbmdmcm9udGVuZC11ZTUuMi8uL3NyYy9VdGlsL0ZpbGVVdGlsLnRzIiwid2VicGFjazovL0BlcGljZ2FtZXMtcHMvbGliLXBpeGVsc3RyZWFtaW5nZnJvbnRlbmQtdWU1LjIvLi9zcmMvVXRpbC9XZWJHTFV0aWxzLnRzIiwid2VicGFjazovL0BlcGljZ2FtZXMtcHMvbGliLXBpeGVsc3RyZWFtaW5nZnJvbnRlbmQtdWU1LjIvLi9zcmMvVXRpbC9XZWJYUlV0aWxzLnRzIiwid2VicGFjazovL0BlcGljZ2FtZXMtcHMvbGliLXBpeGVsc3RyZWFtaW5nZnJvbnRlbmQtdWU1LjIvLi9zcmMvVmlkZW9QbGF5ZXIvU3RyZWFtQ29udHJvbGxlci50cyIsIndlYnBhY2s6Ly9AZXBpY2dhbWVzLXBzL2xpYi1waXhlbHN0cmVhbWluZ2Zyb250ZW5kLXVlNS4yLy4vc3JjL1ZpZGVvUGxheWVyL1ZpZGVvUGxheWVyLnRzIiwid2VicGFjazovL0BlcGljZ2FtZXMtcHMvbGliLXBpeGVsc3RyZWFtaW5nZnJvbnRlbmQtdWU1LjIvLi9zcmMvV2ViUnRjUGxheWVyL1dlYlJ0Y1BsYXllckNvbnRyb2xsZXIudHMiLCJ3ZWJwYWNrOi8vQGVwaWNnYW1lcy1wcy9saWItcGl4ZWxzdHJlYW1pbmdmcm9udGVuZC11ZTUuMi8uL3NyYy9XZWJTb2NrZXRzL01lc3NhZ2VSZWNlaXZlLnRzIiwid2VicGFjazovL0BlcGljZ2FtZXMtcHMvbGliLXBpeGVsc3RyZWFtaW5nZnJvbnRlbmQtdWU1LjIvLi9zcmMvV2ViU29ja2V0cy9NZXNzYWdlU2VuZC50cyIsIndlYnBhY2s6Ly9AZXBpY2dhbWVzLXBzL2xpYi1waXhlbHN0cmVhbWluZ2Zyb250ZW5kLXVlNS4yLy4vc3JjL1dlYlNvY2tldHMvU2lnbmFsbGluZ1Byb3RvY29sLnRzIiwid2VicGFjazovL0BlcGljZ2FtZXMtcHMvbGliLXBpeGVsc3RyZWFtaW5nZnJvbnRlbmQtdWU1LjIvLi9zcmMvV2ViU29ja2V0cy9XZWJTb2NrZXRDb250cm9sbGVyLnRzIiwid2VicGFjazovL0BlcGljZ2FtZXMtcHMvbGliLXBpeGVsc3RyZWFtaW5nZnJvbnRlbmQtdWU1LjIvLi9zcmMvV2ViWFIvV2ViWFJDb250cm9sbGVyLnRzIiwid2VicGFjazovL0BlcGljZ2FtZXMtcHMvbGliLXBpeGVsc3RyZWFtaW5nZnJvbnRlbmQtdWU1LjIvZXh0ZXJuYWwgbW9kdWxlIFwic2RwXCIiLCJ3ZWJwYWNrOi8vQGVwaWNnYW1lcy1wcy9saWItcGl4ZWxzdHJlYW1pbmdmcm9udGVuZC11ZTUuMi93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9AZXBpY2dhbWVzLXBzL2xpYi1waXhlbHN0cmVhbWluZ2Zyb250ZW5kLXVlNS4yL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9AZXBpY2dhbWVzLXBzL2xpYi1waXhlbHN0cmVhbWluZ2Zyb250ZW5kLXVlNS4yL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vQGVwaWNnYW1lcy1wcy9saWItcGl4ZWxzdHJlYW1pbmdmcm9udGVuZC11ZTUuMi93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL0BlcGljZ2FtZXMtcHMvbGliLXBpeGVsc3RyZWFtaW5nZnJvbnRlbmQtdWU1LjIvLi9zcmMvcGl4ZWxzdHJlYW1pbmdmcm9udGVuZC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgRXBpYyBHYW1lcywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXG5pbXBvcnQgeyBDb25maWcsIEZsYWdzLCBOdW1lcmljUGFyYW1ldGVycyB9IGZyb20gJy4uL0NvbmZpZy9Db25maWcnO1xuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSAnLi4vTG9nZ2VyL0xvZ2dlcic7XG5pbXBvcnQgeyBQaXhlbFN0cmVhbWluZyB9IGZyb20gJy4uL1BpeGVsU3RyZWFtaW5nL1BpeGVsU3RyZWFtaW5nJztcbmltcG9ydCB7XG4gICAgQWZrVGltZWRPdXRFdmVudCxcbiAgICBBZmtXYXJuaW5nQWN0aXZhdGVFdmVudCxcbiAgICBBZmtXYXJuaW5nRGVhY3RpdmF0ZUV2ZW50LFxuICAgIEFma1dhcm5pbmdVcGRhdGVFdmVudFxufSBmcm9tICcuLi9VdGlsL0V2ZW50RW1pdHRlcic7XG5cbmV4cG9ydCBjbGFzcyBBRktDb250cm9sbGVyIHtcbiAgICAvLyB0aW1lIG91dCBsb2dpYyBkZXRhaWxzXG4gICAgY2xvc2VUaW1lb3V0ID0gMTA7XG4gICAgYWN0aXZlID0gZmFsc2U7XG4gICAgY291bnRkb3duQWN0aXZlID0gZmFsc2U7XG4gICAgd2FyblRpbWVyOiBSZXR1cm5UeXBlPHR5cGVvZiBzZXRUaW1lb3V0PiA9IHVuZGVmaW5lZDtcbiAgICBjb3VudERvd24gPSAwO1xuICAgIGNvdW50RG93blRpbWVyOiBSZXR1cm5UeXBlPHR5cGVvZiBzZXRJbnRlcnZhbD4gPSB1bmRlZmluZWQ7XG4gICAgY29uZmlnOiBDb25maWc7XG4gICAgcGl4ZWxTdHJlYW1pbmc6IFBpeGVsU3RyZWFtaW5nO1xuICAgIG9uRGlzbWlzc0FmazogKCkgPT4gdm9pZDtcblxuICAgIG9uQUZLVGltZWRPdXRDYWxsYmFjazogKCkgPT4gdm9pZDtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBjb25maWc6IENvbmZpZyxcbiAgICAgICAgcGl4ZWxTdHJlYW1pbmc6IFBpeGVsU3RyZWFtaW5nLFxuICAgICAgICBvbkRpc21pc3NBZms6ICgpID0+IHZvaWRcbiAgICApIHtcbiAgICAgICAgdGhpcy5jb25maWcgPSBjb25maWc7XG4gICAgICAgIHRoaXMucGl4ZWxTdHJlYW1pbmcgPSBwaXhlbFN0cmVhbWluZztcbiAgICAgICAgdGhpcy5vbkRpc21pc3NBZmsgPSBvbkRpc21pc3NBZms7XG4gICAgICAgIHRoaXMub25BRktUaW1lZE91dENhbGxiYWNrID0gKCkgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXG4gICAgICAgICAgICAgICAgJ0FGSyB0aW1lZCBvdXQsIGRpZCB5b3Ugd2FudCB0byBvdmVycmlkZSB0aGlzIGNhbGxiYWNrPydcbiAgICAgICAgICAgICk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIG1ldGhvZHMgdGhhdCBvY2N1ciB3aGVuIGFuIGFmayBldmVudCBsaXN0ZW5lciBpcyBjbGlja2VkXG4gICAgICovXG4gICAgb25BZmtDbGljaygpIHtcbiAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLmNvdW50RG93blRpbWVyKTtcblxuICAgICAgICBpZiAodGhpcy5hY3RpdmUgfHwgdGhpcy5jb3VudGRvd25BY3RpdmUpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhcnRBZmtXYXJuaW5nVGltZXIoKTtcbiAgICAgICAgICAgIHRoaXMucGl4ZWxTdHJlYW1pbmcuZGlzcGF0Y2hFdmVudChcbiAgICAgICAgICAgICAgICBuZXcgQWZrV2FybmluZ0RlYWN0aXZhdGVFdmVudCgpXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU3RhcnQgdGhlIHdhcm5pbmcgdGltZXIgaWYgYSB0aW1lb3V0IGlzIHNldCBncmVhdGVyIHRoYXQgMCBzZWNvbmRzXG4gICAgICovXG4gICAgc3RhcnRBZmtXYXJuaW5nVGltZXIoKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIHRoaXMuY29uZmlnLmdldE51bWVyaWNTZXR0aW5nVmFsdWUoXG4gICAgICAgICAgICAgICAgTnVtZXJpY1BhcmFtZXRlcnMuQUZLVGltZW91dFNlY3NcbiAgICAgICAgICAgICkgPiAwICYmXG4gICAgICAgICAgICB0aGlzLmNvbmZpZy5pc0ZsYWdFbmFibGVkKEZsYWdzLkFGS0RldGVjdGlvbilcbiAgICAgICAgKSB7XG4gICAgICAgICAgICB0aGlzLmFjdGl2ZSA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVzZXRBZmtXYXJuaW5nVGltZXIoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTdG9wIHRoZSBhZmsgd2FybmluZyB0aW1lclxuICAgICAqL1xuICAgIHN0b3BBZmtXYXJuaW5nVGltZXIoKSB7XG4gICAgICAgIHRoaXMuYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuY291bnRkb3duQWN0aXZlID0gZmFsc2U7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLndhcm5UaW1lcik7XG4gICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5jb3VudERvd25UaW1lcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGF1c2UgdGhlIHRpbWVyIHdoaWNoIHdoZW4gZWxhcHNlZCB3aWxsIHdhcm4gdGhlIHVzZXIgdGhleSBhcmUgaW5hY3RpdmUuXG4gICAgICovXG4gICAgcGF1c2VBZmtXYXJuaW5nVGltZXIoKSB7XG4gICAgICAgIHRoaXMuYWN0aXZlID0gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSWYgdGhlIHVzZXIgaW50ZXJhY3RzIHRoZW4gcmVzZXQgdGhlIHdhcm5pbmcgdGltZXIuXG4gICAgICovXG4gICAgcmVzZXRBZmtXYXJuaW5nVGltZXIoKSB7XG4gICAgICAgIGlmICh0aGlzLmFjdGl2ZSAmJiB0aGlzLmNvbmZpZy5pc0ZsYWdFbmFibGVkKEZsYWdzLkFGS0RldGVjdGlvbikpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLndhcm5UaW1lcik7XG4gICAgICAgICAgICB0aGlzLndhcm5UaW1lciA9IHNldFRpbWVvdXQoXG4gICAgICAgICAgICAgICAgKCkgPT4gdGhpcy5hY3RpdmF0ZUFma0V2ZW50KCksXG4gICAgICAgICAgICAgICAgdGhpcy5jb25maWcuZ2V0TnVtZXJpY1NldHRpbmdWYWx1ZShcbiAgICAgICAgICAgICAgICAgICAgTnVtZXJpY1BhcmFtZXRlcnMuQUZLVGltZW91dFNlY3NcbiAgICAgICAgICAgICAgICApICogMTAwMFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNob3cgdGhlIEFGSyBvdmVybGF5IGFuZCBiZWdpbiB0aGUgY291bnREb3duXG4gICAgICovXG4gICAgYWN0aXZhdGVBZmtFdmVudCgpIHtcbiAgICAgICAgLy8gUGF1c2UgdGhlIHRpbWVyIHdoaWxlIHRoZSB1c2VyIGlzIGxvb2tpbmcgYXQgdGhlIGluYWN0aXZpdHkgd2FybmluZyBvdmVybGF5XG4gICAgICAgIHRoaXMucGF1c2VBZmtXYXJuaW5nVGltZXIoKTtcblxuICAgICAgICAvLyBpbnN0YW50aWF0ZSBhIG5ldyBvdmVybGF5XG4gICAgICAgIHRoaXMucGl4ZWxTdHJlYW1pbmcuZGlzcGF0Y2hFdmVudChcbiAgICAgICAgICAgIG5ldyBBZmtXYXJuaW5nQWN0aXZhdGVFdmVudCh7XG4gICAgICAgICAgICAgICAgY291bnREb3duOiB0aGlzLmNvdW50RG93bixcbiAgICAgICAgICAgICAgICBkaXNtaXNzQWZrOiB0aGlzLm9uRGlzbWlzc0Fma1xuICAgICAgICAgICAgfSlcbiAgICAgICAgKTtcblxuICAgICAgICAvLyB1cGRhdGUgb3VyIGNvdW50RG93biB0aW1lciBhbmQgb3ZlcmxheSBjb250ZW50c1xuICAgICAgICB0aGlzLmNvdW50RG93biA9IHRoaXMuY2xvc2VUaW1lb3V0O1xuICAgICAgICB0aGlzLmNvdW50ZG93bkFjdGl2ZSA9IHRydWU7XG4gICAgICAgIHRoaXMucGl4ZWxTdHJlYW1pbmcuZGlzcGF0Y2hFdmVudChcbiAgICAgICAgICAgIG5ldyBBZmtXYXJuaW5nVXBkYXRlRXZlbnQoeyBjb3VudERvd246IHRoaXMuY291bnREb3duIH0pXG4gICAgICAgICk7XG5cbiAgICAgICAgLy8gaWYgd2UgYXJlIGluIGxvY2tlZCBtb3VzZSBleGl0IHBvaW50ZXJsb2NrXG4gICAgICAgIGlmICghdGhpcy5jb25maWcuaXNGbGFnRW5hYmxlZChGbGFncy5Ib3ZlcmluZ01vdXNlTW9kZSkpIHtcbiAgICAgICAgICAgIC8vIG1pbm9yIGhhY2sgdG8gYWxsZXZpYXRlIGlvcyBub3Qgc3VwcG9ydGluZyBwb2ludGVybG9ja1xuICAgICAgICAgICAgaWYgKGRvY3VtZW50LmV4aXRQb2ludGVyTG9jaykge1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmV4aXRQb2ludGVyTG9jaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gcmVzZXQgb3VyIGNvdW50RG93biBpbnRlcnZhbCBhY2NvcmRpbmdseVxuICAgICAgICB0aGlzLmNvdW50RG93blRpbWVyID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5jb3VudERvd24tLTtcbiAgICAgICAgICAgIGlmICh0aGlzLmNvdW50RG93biA9PSAwKSB7XG4gICAgICAgICAgICAgICAgLy8gVGhlIHVzZXIgZmFpbGVkIHRvIGNsaWNrIHNvIGhpZGUgdGhlIG92ZXJsYXkgYW5kIGRpc2Nvbm5lY3QgdGhlbS5cbiAgICAgICAgICAgICAgICB0aGlzLnBpeGVsU3RyZWFtaW5nLmRpc3BhdGNoRXZlbnQoXG4gICAgICAgICAgICAgICAgICAgIG5ldyBBZmtUaW1lZE91dEV2ZW50KClcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHRoaXMub25BRktUaW1lZE91dENhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgTG9nZ2VyLkxvZyhcbiAgICAgICAgICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcbiAgICAgICAgICAgICAgICAgICAgJ1lvdSBoYXZlIGJlZW4gZGlzY29ubmVjdGVkIGR1ZSB0byBpbmFjdGl2aXR5J1xuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICAvLyBzd2l0Y2ggb2ZmIHRoZSBhZmsgZmVhdHVyZSBhcyBzdHJlYW0gaGFzIGNsb3NlZFxuICAgICAgICAgICAgICAgIHRoaXMuc3RvcEFma1dhcm5pbmdUaW1lcigpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBpeGVsU3RyZWFtaW5nLmRpc3BhdGNoRXZlbnQoXG4gICAgICAgICAgICAgICAgICAgIG5ldyBBZmtXYXJuaW5nVXBkYXRlRXZlbnQoeyBjb3VudERvd246IHRoaXMuY291bnREb3duIH0pXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgMTAwMCk7XG4gICAgfVxufVxuIiwiLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSAnLi4vTG9nZ2VyL0xvZ2dlcic7XG5pbXBvcnQgeyBTZXR0aW5nRmxhZyB9IGZyb20gJy4vU2V0dGluZ0ZsYWcnO1xuaW1wb3J0IHsgU2V0dGluZ051bWJlciB9IGZyb20gJy4vU2V0dGluZ051bWJlcic7XG5pbXBvcnQgeyBTZXR0aW5nVGV4dCB9IGZyb20gJy4vU2V0dGluZ1RleHQnO1xuaW1wb3J0IHsgU2V0dGluZ09wdGlvbiB9IGZyb20gJy4vU2V0dGluZ09wdGlvbic7XG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIsIFNldHRpbmdzQ2hhbmdlZEV2ZW50IH0gZnJvbSAnLi4vVXRpbC9FdmVudEVtaXR0ZXInO1xuaW1wb3J0IHsgU2V0dGluZ0Jhc2UgfSBmcm9tICcuL1NldHRpbmdCYXNlJztcblxuLyoqXG4gKiBBIGNvbGxlY3Rpb24gb2YgZmxhZ3MgdGhhdCBjYW4gYmUgdG9nZ2xlZCBhbmQgYXJlIGNvcmUgdG8gYWxsIFBpeGVsIFN0cmVhbWluZyBleHBlcmllbmNlcy5cbiAqIFRoZXNlIGFyZSB1c2VkIGluIHRoZSBgQ29uZmlnLkZsYWdzYCBtYXAuXG4gKi9cbmV4cG9ydCBjbGFzcyBGbGFncyB7XG4gICAgc3RhdGljIEF1dG9Db25uZWN0ID0gJ0F1dG9Db25uZWN0JyBhcyBjb25zdDtcbiAgICBzdGF0aWMgQXV0b1BsYXlWaWRlbyA9ICdBdXRvUGxheVZpZGVvJyBhcyBjb25zdDtcbiAgICBzdGF0aWMgQUZLRGV0ZWN0aW9uID0gJ1RpbWVvdXRJZklkbGUnIGFzIGNvbnN0O1xuICAgIHN0YXRpYyBCcm93c2VyU2VuZE9mZmVyID0gJ09mZmVyVG9SZWNlaXZlJyBhcyBjb25zdDtcbiAgICBzdGF0aWMgSG92ZXJpbmdNb3VzZU1vZGUgPSAnSG92ZXJpbmdNb3VzZScgYXMgY29uc3Q7XG4gICAgc3RhdGljIEZvcmNlTW9ub0F1ZGlvID0gJ0ZvcmNlTW9ub0F1ZGlvJyBhcyBjb25zdDtcbiAgICBzdGF0aWMgRm9yY2VUVVJOID0gJ0ZvcmNlVFVSTicgYXMgY29uc3Q7XG4gICAgc3RhdGljIEZha2VNb3VzZVdpdGhUb3VjaGVzID0gJ0Zha2VNb3VzZVdpdGhUb3VjaGVzJyBhcyBjb25zdDtcbiAgICBzdGF0aWMgSXNRdWFsaXR5Q29udHJvbGxlciA9ICdDb250cm9sc1F1YWxpdHknIGFzIGNvbnN0O1xuICAgIHN0YXRpYyBNYXRjaFZpZXdwb3J0UmVzb2x1dGlvbiA9ICdNYXRjaFZpZXdwb3J0UmVzJyBhcyBjb25zdDtcbiAgICBzdGF0aWMgUHJlZmVyU0ZVID0gJ3ByZWZlclNGVScgYXMgY29uc3Q7XG4gICAgc3RhdGljIFN0YXJ0VmlkZW9NdXRlZCA9ICdTdGFydFZpZGVvTXV0ZWQnIGFzIGNvbnN0O1xuICAgIHN0YXRpYyBTdXBwcmVzc0Jyb3dzZXJLZXlzID0gJ1N1cHByZXNzQnJvd3NlcktleXMnIGFzIGNvbnN0O1xuICAgIHN0YXRpYyBVc2VNaWMgPSAnVXNlTWljJyBhcyBjb25zdDtcbiAgICBzdGF0aWMgS2V5Ym9hcmRJbnB1dCA9ICdLZXlib2FyZElucHV0JyBhcyBjb25zdDtcbiAgICBzdGF0aWMgTW91c2VJbnB1dCA9ICdNb3VzZUlucHV0JyBhcyBjb25zdDtcbiAgICBzdGF0aWMgVG91Y2hJbnB1dCA9ICdUb3VjaElucHV0JyBhcyBjb25zdDtcbiAgICBzdGF0aWMgR2FtZXBhZElucHV0ID0gJ0dhbWVwYWRJbnB1dCcgYXMgY29uc3Q7XG4gICAgc3RhdGljIFhSQ29udHJvbGxlcklucHV0ID0gJ1hSQ29udHJvbGxlcklucHV0JyBhcyBjb25zdDtcbn1cblxuZXhwb3J0IHR5cGUgRmxhZ3NLZXlzID0gRXhjbHVkZTxrZXlvZiB0eXBlb2YgRmxhZ3MsICdwcm90b3R5cGUnPjtcbmV4cG9ydCB0eXBlIEZsYWdzSWRzID0gdHlwZW9mIEZsYWdzW0ZsYWdzS2V5c107XG5cbmNvbnN0IGlzRmxhZ0lkID0gKGlkOiBzdHJpbmcpOiBpZCBpcyBGbGFnc0lkcyA9PlxuICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKEZsYWdzKS5zb21lKFxuICAgICAgICAobmFtZTogRmxhZ3NLZXlzKSA9PiBGbGFnc1tuYW1lXSA9PT0gaWRcbiAgICApO1xuXG4vKipcbiAqIEEgY29sbGVjdGlvbiBvZiBudW1lcmljIHBhcmFtZXRlcnMgdGhhdCBhcmUgY29yZSB0byBhbGwgUGl4ZWwgU3RyZWFtaW5nIGV4cGVyaWVuY2VzLlxuICpcbiAqL1xuZXhwb3J0IGNsYXNzIE51bWVyaWNQYXJhbWV0ZXJzIHtcbiAgICBzdGF0aWMgQUZLVGltZW91dFNlY3MgPSAnQUZLVGltZW91dCcgYXMgY29uc3Q7XG4gICAgc3RhdGljIE1pblFQID0gJ01pblFQJyBhcyBjb25zdDtcbiAgICBzdGF0aWMgTWF4UVAgPSAnTWF4UVAnIGFzIGNvbnN0O1xuICAgIHN0YXRpYyBXZWJSVENGUFMgPSAnV2ViUlRDRlBTJyBhcyBjb25zdDtcbiAgICBzdGF0aWMgV2ViUlRDTWluQml0cmF0ZSA9ICdXZWJSVENNaW5CaXRyYXRlJyBhcyBjb25zdDtcbiAgICBzdGF0aWMgV2ViUlRDTWF4Qml0cmF0ZSA9ICdXZWJSVENNYXhCaXRyYXRlJyBhcyBjb25zdDtcbiAgICBzdGF0aWMgTWF4UmVjb25uZWN0QXR0ZW1wdHMgPSAnTWF4UmVjb25uZWN0QXR0ZW1wdHMnIGFzIGNvbnN0O1xufVxuXG5leHBvcnQgdHlwZSBOdW1lcmljUGFyYW1ldGVyc0tleXMgPSBFeGNsdWRlPFxuICAgIGtleW9mIHR5cGVvZiBOdW1lcmljUGFyYW1ldGVycyxcbiAgICAncHJvdG90eXBlJ1xuPjtcbmV4cG9ydCB0eXBlIE51bWVyaWNQYXJhbWV0ZXJzSWRzID1cbiAgICB0eXBlb2YgTnVtZXJpY1BhcmFtZXRlcnNbTnVtZXJpY1BhcmFtZXRlcnNLZXlzXTtcblxuY29uc3QgaXNOdW1lcmljSWQgPSAoaWQ6IHN0cmluZyk6IGlkIGlzIE51bWVyaWNQYXJhbWV0ZXJzSWRzID0+XG4gICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTnVtZXJpY1BhcmFtZXRlcnMpLnNvbWUoXG4gICAgICAgIChuYW1lOiBOdW1lcmljUGFyYW1ldGVyc0tleXMpID0+IE51bWVyaWNQYXJhbWV0ZXJzW25hbWVdID09PSBpZFxuICAgICk7XG5cbi8qKlxuICogQSBjb2xsZWN0aW9uIG9mIHRleHR1YWwgcGFyYW1ldGVycyB0aGF0IGFyZSBjb3JlIHRvIGFsbCBQaXhlbCBTdHJlYW1pbmcgZXhwZXJpZW5jZXMuXG4gKlxuICovXG5leHBvcnQgY2xhc3MgVGV4dFBhcmFtZXRlcnMge1xuICAgIHN0YXRpYyBTaWduYWxsaW5nU2VydmVyVXJsID0gJ3NzJyBhcyBjb25zdDtcbn1cblxuZXhwb3J0IHR5cGUgVGV4dFBhcmFtZXRlcnNLZXlzID0gRXhjbHVkZTxcbiAgICBrZXlvZiB0eXBlb2YgVGV4dFBhcmFtZXRlcnMsXG4gICAgJ3Byb3RvdHlwZSdcbj47XG5leHBvcnQgdHlwZSBUZXh0UGFyYW1ldGVyc0lkcyA9IHR5cGVvZiBUZXh0UGFyYW1ldGVyc1tUZXh0UGFyYW1ldGVyc0tleXNdO1xuXG5jb25zdCBpc1RleHRJZCA9IChpZDogc3RyaW5nKTogaWQgaXMgVGV4dFBhcmFtZXRlcnNJZHMgPT5cbiAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhUZXh0UGFyYW1ldGVycykuc29tZShcbiAgICAgICAgKG5hbWU6IFRleHRQYXJhbWV0ZXJzS2V5cykgPT4gVGV4dFBhcmFtZXRlcnNbbmFtZV0gPT09IGlkXG4gICAgKTtcblxuLyoqXG4gKiBBIGNvbGxlY3Rpb24gb2YgZW51bSBiYXNlZCBwYXJhbWV0ZXJzIHRoYXQgYXJlIGNvcmUgdG8gYWxsIFBpeGVsIFN0cmVhbWluZyBleHBlcmllbmNlcy5cbiAqXG4gKi9cbmV4cG9ydCBjbGFzcyBPcHRpb25QYXJhbWV0ZXJzIHtcbiAgICBzdGF0aWMgUHJlZmVycmVkQ29kZWMgPSAnUHJlZmVycmVkQ29kZWMnIGFzIGNvbnN0O1xuICAgIHN0YXRpYyBTdHJlYW1lcklkID0gJ1N0cmVhbWVySWQnIGFzIGNvbnN0O1xufVxuXG5leHBvcnQgdHlwZSBPcHRpb25QYXJhbWV0ZXJzS2V5cyA9IEV4Y2x1ZGU8XG4gICAga2V5b2YgdHlwZW9mIE9wdGlvblBhcmFtZXRlcnMsXG4gICAgJ3Byb3RvdHlwZSdcbj47XG5leHBvcnQgdHlwZSBPcHRpb25QYXJhbWV0ZXJzSWRzID0gdHlwZW9mIE9wdGlvblBhcmFtZXRlcnNbT3B0aW9uUGFyYW1ldGVyc0tleXNdO1xuXG5jb25zdCBpc09wdGlvbklkID0gKGlkOiBzdHJpbmcpOiBpZCBpcyBPcHRpb25QYXJhbWV0ZXJzSWRzID0+XG4gICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoT3B0aW9uUGFyYW1ldGVycykuc29tZShcbiAgICAgICAgKG5hbWU6IE9wdGlvblBhcmFtZXRlcnNLZXlzKSA9PiBPcHRpb25QYXJhbWV0ZXJzW25hbWVdID09PSBpZFxuICAgICk7XG5cbi8qKlxuICogVXRpbGl0eSB0eXBlcyBmb3IgaW5mZXJyaW5nIGRhdGEgdHlwZSBiYXNlZCBvbiBzZXR0aW5nIElEXG4gKi9cbmV4cG9ydCB0eXBlIE9wdGlvbklkcyA9XG4gICAgfCBGbGFnc0lkc1xuICAgIHwgTnVtZXJpY1BhcmFtZXRlcnNJZHNcbiAgICB8IFRleHRQYXJhbWV0ZXJzSWRzXG4gICAgfCBPcHRpb25QYXJhbWV0ZXJzSWRzO1xuZXhwb3J0IHR5cGUgT3B0aW9uS2V5czxUPiA9IFQgZXh0ZW5kcyBGbGFnc0lkc1xuICAgID8gYm9vbGVhblxuICAgIDogVCBleHRlbmRzIE51bWVyaWNQYXJhbWV0ZXJzSWRzXG4gICAgPyBudW1iZXJcbiAgICA6IFQgZXh0ZW5kcyBUZXh0UGFyYW1ldGVyc0lkc1xuICAgID8gc3RyaW5nXG4gICAgOiBUIGV4dGVuZHMgT3B0aW9uUGFyYW1ldGVyc0lkc1xuICAgID8gc3RyaW5nXG4gICAgOiBuZXZlcjtcblxuZXhwb3J0IHR5cGUgQWxsU2V0dGluZ3MgPSB7XG4gICAgW0sgaW4gT3B0aW9uSWRzXTogT3B0aW9uS2V5czxLPjtcbn07XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29uZmlnUGFyYW1zIHtcbiAgICAvKiogSW5pdGlhbCBQaXhlbCBTdHJlYW1pbmcgc2V0dGluZ3MgKi9cbiAgICBpbml0aWFsU2V0dGluZ3M/OiBQYXJ0aWFsPEFsbFNldHRpbmdzPjtcbiAgICAvKiogSWYgdXNlVXJsUGFyYW1zIGlzIHNldCB0cnVlLCB3aWxsIHJlYWQgaW5pdGlhbCB2YWx1ZXMgZnJvbSBVUkwgcGFyYW1ldGVycyBhbmQgcGVyc2lzdCBjaGFuZ2VkIHNldHRpbmdzIGludG8gVVJMICovXG4gICAgdXNlVXJsUGFyYW1zPzogYm9vbGVhbjtcbn1cbmV4cG9ydCBjbGFzcyBDb25maWcge1xuICAgIC8qIEEgbWFwIG9mIGZsYWdzIHRoYXQgY2FuIGJlIHRvZ2dsZWQgLSBvcHRpb25zIHRoYXQgY2FuIGJlIHNldCBpbiB0aGUgYXBwbGljYXRpb24gLSBlLmcuIFVzZSBNaWM/ICovXG4gICAgcHJpdmF0ZSBmbGFncyA9IG5ldyBNYXA8RmxhZ3NJZHMsIFNldHRpbmdGbGFnPigpO1xuXG4gICAgLyogQSBtYXAgb2YgbnVtZXJpY2FsIHNldHRpbmdzIC0gb3B0aW9ucyB0aGF0IGNhbiBiZSBpbiB0aGUgYXBwbGljYXRpb24gLSBlLmcuIE1pbkJpdHJhdGUgKi9cbiAgICBwcml2YXRlIG51bWVyaWNQYXJhbWV0ZXJzID0gbmV3IE1hcDxOdW1lcmljUGFyYW1ldGVyc0lkcywgU2V0dGluZ051bWJlcj4oKTtcblxuICAgIC8qIEEgbWFwIG9mIHRleHQgc2V0dGluZ3MgLSBlLmcuIHNpZ25hbGxpbmcgc2VydmVyIHVybCAqL1xuICAgIHByaXZhdGUgdGV4dFBhcmFtZXRlcnMgPSBuZXcgTWFwPFRleHRQYXJhbWV0ZXJzSWRzLCBTZXR0aW5nVGV4dD4oKTtcblxuICAgIC8qIEEgbWFwIG9mIGVudW0gYmFzZWQgc2V0dGluZ3MgLSBlLmcuIHByZWZlcnJlZCBjb2RlYyAqL1xuICAgIHByaXZhdGUgb3B0aW9uUGFyYW1ldGVycyA9IG5ldyBNYXA8T3B0aW9uUGFyYW1ldGVyc0lkcywgU2V0dGluZ09wdGlvbj4oKTtcblxuICAgIHByaXZhdGUgX3VzZVVybFBhcmFtczogYm9vbGVhbjtcblxuICAgIC8vIC0tLS0tLS0tLS0tLSBTZXR0aW5ncyAtLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgY29uc3RydWN0b3IoY29uZmlnOiBDb25maWdQYXJhbXMgPSB7fSkge1xuICAgICAgICBjb25zdCB7IGluaXRpYWxTZXR0aW5ncywgdXNlVXJsUGFyYW1zIH0gPSBjb25maWc7XG4gICAgICAgIHRoaXMuX3VzZVVybFBhcmFtcyA9ICEhdXNlVXJsUGFyYW1zO1xuICAgICAgICB0aGlzLnBvcHVsYXRlRGVmYXVsdFNldHRpbmdzKHRoaXMuX3VzZVVybFBhcmFtcyk7XG4gICAgICAgIGlmIChpbml0aWFsU2V0dGluZ3MpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0U2V0dGluZ3MoaW5pdGlhbFNldHRpbmdzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRydWUgaWYgcmVhZGluZyBjb25maWd1cmF0aW9uIGluaXRpYWwgdmFsdWVzIGZyb20gVVJMIHBhcmFtZXRlcnMsIGFuZFxuICAgICAqIHBlcnNpc3RpbmcgY2hhbmdlcyBpbiBVUkwgd2hlbiBjaGFuZ2VkLlxuICAgICAqL1xuICAgIHB1YmxpYyBnZXQgdXNlVXJsUGFyYW1zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdXNlVXJsUGFyYW1zO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBvcHVsYXRlIHRoZSBkZWZhdWx0IHNldHRpbmdzIGZvciBhIFBpeGVsIFN0cmVhbWluZyBhcHBsaWNhdGlvblxuICAgICAqL1xuICAgIHByaXZhdGUgcG9wdWxhdGVEZWZhdWx0U2V0dGluZ3ModXNlVXJsUGFyYW1zOiBib29sZWFuKTogdm9pZCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUZXh0IFBhcmFtZXRlcnNcbiAgICAgICAgICovXG5cbiAgICAgICAgdGhpcy50ZXh0UGFyYW1ldGVycy5zZXQoXG4gICAgICAgICAgICBUZXh0UGFyYW1ldGVycy5TaWduYWxsaW5nU2VydmVyVXJsLFxuICAgICAgICAgICAgbmV3IFNldHRpbmdUZXh0KFxuICAgICAgICAgICAgICAgIFRleHRQYXJhbWV0ZXJzLlNpZ25hbGxpbmdTZXJ2ZXJVcmwsXG4gICAgICAgICAgICAgICAgJ1NpZ25hbGxpbmcgdXJsJyxcbiAgICAgICAgICAgICAgICAnVXJsIG9mIHRoZSBzaWduYWxsaW5nIHNlcnZlcicsXG4gICAgICAgICAgICAgICAgKGxvY2F0aW9uLnByb3RvY29sID09PSAnaHR0cHM6JyA/ICd3c3M6Ly8nIDogJ3dzOi8vJykgK1xuICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaG9zdG5hbWUgK1xuICAgICAgICAgICAgICAgICAgICAvLyBmb3IgcmVhZGFiaWxpdHksIHdlIG9taXQgdGhlIHBvcnQgaWYgaXQncyA4MFxuICAgICAgICAgICAgICAgICAgICAod2luZG93LmxvY2F0aW9uLnBvcnQgPT09ICc4MCcgfHxcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLnBvcnQgPT09ICcnXG4gICAgICAgICAgICAgICAgICAgICAgICA/ICcnXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGA6JHt3aW5kb3cubG9jYXRpb24ucG9ydH1gKSxcbiAgICAgICAgICAgICAgICB1c2VVcmxQYXJhbXNcbiAgICAgICAgICAgIClcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLm9wdGlvblBhcmFtZXRlcnMuc2V0KFxuICAgICAgICAgICAgT3B0aW9uUGFyYW1ldGVycy5TdHJlYW1lcklkLFxuICAgICAgICAgICAgbmV3IFNldHRpbmdPcHRpb24oXG4gICAgICAgICAgICAgICAgT3B0aW9uUGFyYW1ldGVycy5TdHJlYW1lcklkLFxuICAgICAgICAgICAgICAgICdTdHJlYW1lciBJRCcsXG4gICAgICAgICAgICAgICAgJ1RoZSBJRCBvZiB0aGUgc3RyZWFtZXIgdG8gc3RyZWFtLicsXG4gICAgICAgICAgICAgICAgJycsXG4gICAgICAgICAgICAgICAgW10sXG4gICAgICAgICAgICAgICAgdXNlVXJsUGFyYW1zXG4gICAgICAgICAgICApXG4gICAgICAgICk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEVudW0gUGFyYW1ldGVyc1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5vcHRpb25QYXJhbWV0ZXJzLnNldChcbiAgICAgICAgICAgIE9wdGlvblBhcmFtZXRlcnMuUHJlZmVycmVkQ29kZWMsXG4gICAgICAgICAgICBuZXcgU2V0dGluZ09wdGlvbihcbiAgICAgICAgICAgICAgICBPcHRpb25QYXJhbWV0ZXJzLlByZWZlcnJlZENvZGVjLFxuICAgICAgICAgICAgICAgICdQcmVmZXJyZWQgQ29kZWMnLFxuICAgICAgICAgICAgICAgICdUaGUgcHJlZmVycmVkIGNvZGVjIHRvIGJlIHVzZWQgZHVyaW5nIGNvZGVjIG5lZ290aWF0aW9uJyxcbiAgICAgICAgICAgICAgICAnSDI2NCBsZXZlbC1hc3ltbWV0cnktYWxsb3dlZD0xO3BhY2tldGl6YXRpb24tbW9kZT0xO3Byb2ZpbGUtbGV2ZWwtaWQ9NDJlMDFmJyxcbiAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKCk6IEFycmF5PHN0cmluZz4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBicm93c2VyU3VwcG9ydGVkQ29kZWNzOiBBcnJheTxzdHJpbmc+ID0gW107XG4gICAgICAgICAgICAgICAgICAgIC8vIFRyeSBnZXQgdGhlIGluZm8gbmVlZGVkIGZyb20gdGhlIFJUQ1J0cFJlY2VpdmVyLiBUaGlzIGlzIG9ubHkgYXZhaWxhYmxlIG9uIGNocm9tZVxuICAgICAgICAgICAgICAgICAgICBpZiAoIVJUQ1J0cFJlY2VpdmVyLmdldENhcGFiaWxpdGllcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJvd3NlclN1cHBvcnRlZENvZGVjcy5wdXNoKCdPbmx5IGF2YWlsYWJsZSBvbiBDaHJvbWUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBicm93c2VyU3VwcG9ydGVkQ29kZWNzO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbWF0Y2hlciA9IC8oVlBcXGR8SDI2XFxkfEFWMSkuKi87XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvZGVjcyA9XG4gICAgICAgICAgICAgICAgICAgICAgICBSVENSdHBSZWNlaXZlci5nZXRDYXBhYmlsaXRpZXMoJ3ZpZGVvJykuY29kZWNzO1xuICAgICAgICAgICAgICAgICAgICBjb2RlY3MuZm9yRWFjaCgoY29kZWMpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0ciA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZWMubWltZVR5cGUuc3BsaXQoJy8nKVsxXSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJyAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoY29kZWMuc2RwRm10cExpbmUgfHwgJycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWF0Y2ggPSBtYXRjaGVyLmV4ZWMoc3RyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyb3dzZXJTdXBwb3J0ZWRDb2RlY3MucHVzaChzdHIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGJyb3dzZXJTdXBwb3J0ZWRDb2RlY3M7XG4gICAgICAgICAgICAgICAgfSkoKSxcbiAgICAgICAgICAgICAgICB1c2VVcmxQYXJhbXNcbiAgICAgICAgICAgIClcbiAgICAgICAgKTtcdFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBCb29sZWFuIHBhcmFtZXRlcnNcbiAgICAgICAgICovXG5cbiAgICAgICAgdGhpcy5mbGFncy5zZXQoXG4gICAgICAgICAgICBGbGFncy5BdXRvQ29ubmVjdCxcbiAgICAgICAgICAgIG5ldyBTZXR0aW5nRmxhZyhcbiAgICAgICAgICAgICAgICBGbGFncy5BdXRvQ29ubmVjdCxcbiAgICAgICAgICAgICAgICAnQXV0byBjb25uZWN0IHRvIHN0cmVhbScsXG4gICAgICAgICAgICAgICAgJ1doZXRoZXIgd2Ugc2hvdWxkIGF0dGVtcHQgdG8gYXV0byBjb25uZWN0IHRvIHRoZSBzaWduYWxsaW5nIHNlcnZlciBvciBzaG93IGEgY2xpY2sgdG8gc3RhcnQgcHJvbXB0LicsXG4gICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgdXNlVXJsUGFyYW1zXG4gICAgICAgICAgICApXG4gICAgICAgICk7XG5cbiAgICAgICAgdGhpcy5mbGFncy5zZXQoXG4gICAgICAgICAgICBGbGFncy5BdXRvUGxheVZpZGVvLFxuICAgICAgICAgICAgbmV3IFNldHRpbmdGbGFnKFxuICAgICAgICAgICAgICAgIEZsYWdzLkF1dG9QbGF5VmlkZW8sXG4gICAgICAgICAgICAgICAgJ0F1dG8gcGxheSB2aWRlbycsXG4gICAgICAgICAgICAgICAgJ1doZW4gdmlkZW8gaXMgcmVhZHkgYXV0b21hdGljYWxseSBzdGFydCBwbGF5aW5nIGl0IGFzIG9wcG9zZWQgdG8gc2hvd2luZyBhIHBsYXkgYnV0dG9uLicsXG4gICAgICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgICAgICB1c2VVcmxQYXJhbXNcbiAgICAgICAgICAgIClcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLmZsYWdzLnNldChcbiAgICAgICAgICAgIEZsYWdzLkJyb3dzZXJTZW5kT2ZmZXIsXG4gICAgICAgICAgICBuZXcgU2V0dGluZ0ZsYWcoXG4gICAgICAgICAgICAgICAgRmxhZ3MuQnJvd3NlclNlbmRPZmZlcixcbiAgICAgICAgICAgICAgICAnQnJvd3NlciBzZW5kIG9mZmVyJyxcbiAgICAgICAgICAgICAgICAnQnJvd3NlciB3aWxsIGluaXRpYXRlIHRoZSBXZWJSVEMgaGFuZHNoYWtlIGJ5IHNlbmRpbmcgdGhlIG9mZmVyIHRvIHRoZSBzdHJlYW1lcicsXG4gICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgdXNlVXJsUGFyYW1zXG4gICAgICAgICAgICApXG4gICAgICAgICk7XG5cbiAgICAgICAgdGhpcy5mbGFncy5zZXQoXG4gICAgICAgICAgICBGbGFncy5Vc2VNaWMsXG4gICAgICAgICAgICBuZXcgU2V0dGluZ0ZsYWcoXG4gICAgICAgICAgICAgICAgRmxhZ3MuVXNlTWljLFxuICAgICAgICAgICAgICAgICdVc2UgbWljcm9waG9uZScsXG4gICAgICAgICAgICAgICAgJ01ha2UgYnJvd3NlciByZXF1ZXN0IG1pY3JvcGhvbmUgYWNjZXNzIGFuZCBvcGVuIGFuIGlucHV0IGF1ZGlvIHRyYWNrLicsXG4gICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgdXNlVXJsUGFyYW1zXG4gICAgICAgICAgICApXG4gICAgICAgICk7XG5cbiAgICAgICAgdGhpcy5mbGFncy5zZXQoXG4gICAgICAgICAgICBGbGFncy5TdGFydFZpZGVvTXV0ZWQsXG4gICAgICAgICAgICBuZXcgU2V0dGluZ0ZsYWcoXG4gICAgICAgICAgICAgICAgRmxhZ3MuU3RhcnRWaWRlb011dGVkLFxuICAgICAgICAgICAgICAgICdTdGFydCB2aWRlbyBtdXRlZCcsXG4gICAgICAgICAgICAgICAgJ1ZpZGVvIHdpbGwgc3RhcnQgbXV0ZWQgaWYgdHJ1ZS4nLFxuICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgIHVzZVVybFBhcmFtc1xuICAgICAgICAgICAgKVxuICAgICAgICApO1xuXG4gICAgICAgIHRoaXMuZmxhZ3Muc2V0KFxuICAgICAgICAgICAgRmxhZ3MuU3VwcHJlc3NCcm93c2VyS2V5cyxcbiAgICAgICAgICAgIG5ldyBTZXR0aW5nRmxhZyhcbiAgICAgICAgICAgICAgICBGbGFncy5TdXBwcmVzc0Jyb3dzZXJLZXlzLFxuICAgICAgICAgICAgICAgICdTdXBwcmVzcyBicm93c2VyIGtleXMnLFxuICAgICAgICAgICAgICAgICdTdXBwcmVzcyBjZXJ0YWluIGJyb3dzZXIga2V5cyB0aGF0IHdlIHVzZSBpbiBVRSwgZm9yIGV4YW1wbGUgRjUgdG8gc2hvdyBzaGFkZXIgY29tcGxleGl0eSBpbnN0ZWFkIG9mIHJlZnJlc2ggdGhlIHBhZ2UuJyxcbiAgICAgICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgICAgIHVzZVVybFBhcmFtc1xuICAgICAgICAgICAgKVxuICAgICAgICApO1xuXG4gICAgICAgIHRoaXMuZmxhZ3Muc2V0KFxuICAgICAgICAgICAgRmxhZ3MuUHJlZmVyU0ZVLFxuICAgICAgICAgICAgbmV3IFNldHRpbmdGbGFnKFxuICAgICAgICAgICAgICAgIEZsYWdzLlByZWZlclNGVSxcbiAgICAgICAgICAgICAgICAnUHJlZmVyIFNGVScsXG4gICAgICAgICAgICAgICAgJ1RyeSB0byBjb25uZWN0IHRvIHRoZSBTRlUgaW5zdGVhZCBvZiBQMlAuJyxcbiAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICB1c2VVcmxQYXJhbXNcbiAgICAgICAgICAgIClcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLmZsYWdzLnNldChcbiAgICAgICAgICAgIEZsYWdzLklzUXVhbGl0eUNvbnRyb2xsZXIsXG4gICAgICAgICAgICBuZXcgU2V0dGluZ0ZsYWcoXG4gICAgICAgICAgICAgICAgRmxhZ3MuSXNRdWFsaXR5Q29udHJvbGxlcixcbiAgICAgICAgICAgICAgICAnSXMgcXVhbGl0eSBjb250cm9sbGVyPycsXG4gICAgICAgICAgICAgICAgJ1RydWUgaWYgdGhpcyBwZWVyIGNvbnRyb2xzIHN0cmVhbSBxdWFsaXR5JyxcbiAgICAgICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgICAgIHVzZVVybFBhcmFtc1xuICAgICAgICAgICAgKVxuICAgICAgICApO1xuXG4gICAgICAgIHRoaXMuZmxhZ3Muc2V0KFxuICAgICAgICAgICAgRmxhZ3MuRm9yY2VNb25vQXVkaW8sXG4gICAgICAgICAgICBuZXcgU2V0dGluZ0ZsYWcoXG4gICAgICAgICAgICAgICAgRmxhZ3MuRm9yY2VNb25vQXVkaW8sXG4gICAgICAgICAgICAgICAgJ0ZvcmNlIG1vbm8gYXVkaW8nLFxuICAgICAgICAgICAgICAgICdGb3JjZSBicm93c2VyIHRvIHJlcXVlc3QgbW9ubyBhdWRpbyBpbiB0aGUgU0RQJyxcbiAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICB1c2VVcmxQYXJhbXNcbiAgICAgICAgICAgIClcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLmZsYWdzLnNldChcbiAgICAgICAgICAgIEZsYWdzLkZvcmNlVFVSTixcbiAgICAgICAgICAgIG5ldyBTZXR0aW5nRmxhZyhcbiAgICAgICAgICAgICAgICBGbGFncy5Gb3JjZVRVUk4sXG4gICAgICAgICAgICAgICAgJ0ZvcmNlIFRVUk4nLFxuICAgICAgICAgICAgICAgICdPbmx5IGdlbmVyYXRlIFRVUk4vUmVsYXllZCBJQ0UgY2FuZGlkYXRlcy4nLFxuICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgIHVzZVVybFBhcmFtc1xuICAgICAgICAgICAgKVxuICAgICAgICApO1xuXG4gICAgICAgIHRoaXMuZmxhZ3Muc2V0KFxuICAgICAgICAgICAgRmxhZ3MuQUZLRGV0ZWN0aW9uLFxuICAgICAgICAgICAgbmV3IFNldHRpbmdGbGFnKFxuICAgICAgICAgICAgICAgIEZsYWdzLkFGS0RldGVjdGlvbixcbiAgICAgICAgICAgICAgICAnQUZLIGlmIGlkbGUnLFxuICAgICAgICAgICAgICAgICdUaW1lb3V0IHRoZSBleHBlcmllbmNlIGlmIHVzZXIgaXMgQUZLIGZvciBhIHBlcmlvZC4nLFxuICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgIHVzZVVybFBhcmFtc1xuICAgICAgICAgICAgKVxuICAgICAgICApO1xuXG4gICAgICAgIHRoaXMuZmxhZ3Muc2V0KFxuICAgICAgICAgICAgRmxhZ3MuTWF0Y2hWaWV3cG9ydFJlc29sdXRpb24sXG4gICAgICAgICAgICBuZXcgU2V0dGluZ0ZsYWcoXG4gICAgICAgICAgICAgICAgRmxhZ3MuTWF0Y2hWaWV3cG9ydFJlc29sdXRpb24sXG4gICAgICAgICAgICAgICAgJ01hdGNoIHZpZXdwb3J0IHJlc29sdXRpb24nLFxuICAgICAgICAgICAgICAgICdQaXhlbCBTdHJlYW1pbmcgd2lsbCBiZSBpbnN0cnVjdGVkIHRvIGR5bmFtaWNhbGx5IHJlc2l6ZSB0aGUgdmlkZW8gc3RyZWFtIHRvIG1hdGNoIHRoZSBzaXplIG9mIHRoZSB2aWRlbyBlbGVtZW50LicsXG4gICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgdXNlVXJsUGFyYW1zXG4gICAgICAgICAgICApXG4gICAgICAgICk7XG5cbiAgICAgICAgdGhpcy5mbGFncy5zZXQoXG4gICAgICAgICAgICBGbGFncy5Ib3ZlcmluZ01vdXNlTW9kZSxcbiAgICAgICAgICAgIG5ldyBTZXR0aW5nRmxhZyhcbiAgICAgICAgICAgICAgICBGbGFncy5Ib3ZlcmluZ01vdXNlTW9kZSxcbiAgICAgICAgICAgICAgICAnQ29udHJvbCBTY2hlbWU6IExvY2tlZCBNb3VzZScsXG4gICAgICAgICAgICAgICAgJ0VpdGhlciBsb2NrZWQgbW91c2UsIHdoZXJlIHRoZSBwb2ludGVyIGlzIGNvbnN1bWVkIGJ5IHRoZSB2aWRlbyBhbmQgbG9ja2VkIHRvIGl0LCBvciBob3ZlcmluZyBtb3VzZSwgd2hlcmUgdGhlIG1vdXNlIGlzIG5vdCBjb25zdW1lZC4nLFxuICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgIHVzZVVybFBhcmFtcyxcbiAgICAgICAgICAgICAgICAoaXNIb3ZlcmluZ01vdXNlOiBib29sZWFuLCBzZXR0aW5nOiBTZXR0aW5nQmFzZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBzZXR0aW5nLmxhYmVsID0gYENvbnRyb2wgU2NoZW1lOiAke2lzSG92ZXJpbmdNb3VzZSA/ICdIb3ZlcmluZycgOiAnTG9ja2VkJ30gTW91c2VgO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIClcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLmZsYWdzLnNldChcbiAgICAgICAgICAgIEZsYWdzLkZha2VNb3VzZVdpdGhUb3VjaGVzLFxuICAgICAgICAgICAgbmV3IFNldHRpbmdGbGFnKFxuICAgICAgICAgICAgICAgIEZsYWdzLkZha2VNb3VzZVdpdGhUb3VjaGVzLFxuICAgICAgICAgICAgICAgICdGYWtlIG1vdXNlIHdpdGggdG91Y2hlcycsXG4gICAgICAgICAgICAgICAgJ0Egc2luZ2xlIGZpbmdlciB0b3VjaCBpcyBjb252ZXJ0ZWQgaW50byBhIG1vdXNlIGV2ZW50LiBUaGlzIGFsbG93cyBhIG5vbi10b3VjaCBhcHBsaWNhdGlvbiB0byBiZSBjb250cm9sbGVkIHBhcnRpYWxseSB2aWEgYSB0b3VjaCBkZXZpY2UuJyxcbiAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICB1c2VVcmxQYXJhbXNcbiAgICAgICAgICAgIClcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLmZsYWdzLnNldChcbiAgICAgICAgICAgIEZsYWdzLktleWJvYXJkSW5wdXQsXG4gICAgICAgICAgICBuZXcgU2V0dGluZ0ZsYWcoXG4gICAgICAgICAgICAgICAgRmxhZ3MuS2V5Ym9hcmRJbnB1dCxcbiAgICAgICAgICAgICAgICAnS2V5Ym9hcmQgaW5wdXQnLFxuICAgICAgICAgICAgICAgICdJZiBlbmFibGVkLCBzZW5kIGtleWJvYXJkIGV2ZW50cyB0byBzdHJlYW1lcicsXG4gICAgICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgICAgICB1c2VVcmxQYXJhbXNcbiAgICAgICAgICAgIClcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLmZsYWdzLnNldChcbiAgICAgICAgICAgIEZsYWdzLk1vdXNlSW5wdXQsXG4gICAgICAgICAgICBuZXcgU2V0dGluZ0ZsYWcoXG4gICAgICAgICAgICAgICAgRmxhZ3MuTW91c2VJbnB1dCxcbiAgICAgICAgICAgICAgICAnTW91c2UgaW5wdXQnLFxuICAgICAgICAgICAgICAgICdJZiBlbmFibGVkLCBzZW5kIG1vdXNlIGV2ZW50cyB0byBzdHJlYW1lcicsXG4gICAgICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgICAgICB1c2VVcmxQYXJhbXNcbiAgICAgICAgICAgIClcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLmZsYWdzLnNldChcbiAgICAgICAgICAgIEZsYWdzLlRvdWNoSW5wdXQsXG4gICAgICAgICAgICBuZXcgU2V0dGluZ0ZsYWcoXG4gICAgICAgICAgICAgICAgRmxhZ3MuVG91Y2hJbnB1dCxcbiAgICAgICAgICAgICAgICAnVG91Y2ggaW5wdXQnLFxuICAgICAgICAgICAgICAgICdJZiBlbmFibGVkLCBzZW5kIHRvdWNoIGV2ZW50cyB0byBzdHJlYW1lcicsXG4gICAgICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgICAgICB1c2VVcmxQYXJhbXNcbiAgICAgICAgICAgIClcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLmZsYWdzLnNldChcbiAgICAgICAgICAgIEZsYWdzLkdhbWVwYWRJbnB1dCxcbiAgICAgICAgICAgIG5ldyBTZXR0aW5nRmxhZyhcbiAgICAgICAgICAgICAgICBGbGFncy5HYW1lcGFkSW5wdXQsXG4gICAgICAgICAgICAgICAgJ0dhbWVwYWQgaW5wdXQnLFxuICAgICAgICAgICAgICAgICdJZiBlbmFibGVkLCBzZW5kIGdhbWVwYWQgZXZlbnRzIHRvIHN0cmVhbWVyJyxcbiAgICAgICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgICAgIHVzZVVybFBhcmFtc1xuICAgICAgICAgICAgKVxuICAgICAgICApO1xuXG4gICAgICAgIHRoaXMuZmxhZ3Muc2V0KFxuICAgICAgICAgICAgRmxhZ3MuWFJDb250cm9sbGVySW5wdXQsXG4gICAgICAgICAgICBuZXcgU2V0dGluZ0ZsYWcoXG4gICAgICAgICAgICAgICAgRmxhZ3MuWFJDb250cm9sbGVySW5wdXQsXG4gICAgICAgICAgICAgICAgJ1hSIGNvbnRyb2xsZXIgaW5wdXQnLFxuICAgICAgICAgICAgICAgICdJZiBlbmFibGVkLCBzZW5kIFhSIGNvbnRyb2xsZXIgZXZlbnRzIHRvIHN0cmVhbWVyJyxcbiAgICAgICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgICAgIHVzZVVybFBhcmFtc1xuICAgICAgICAgICAgKVxuICAgICAgICApO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBOdW1lcmljIHBhcmFtZXRlcnNcbiAgICAgICAgICovXG5cbiAgICAgICAgdGhpcy5udW1lcmljUGFyYW1ldGVycy5zZXQoXG4gICAgICAgICAgICBOdW1lcmljUGFyYW1ldGVycy5BRktUaW1lb3V0U2VjcyxcbiAgICAgICAgICAgIG5ldyBTZXR0aW5nTnVtYmVyKFxuICAgICAgICAgICAgICAgIE51bWVyaWNQYXJhbWV0ZXJzLkFGS1RpbWVvdXRTZWNzLFxuICAgICAgICAgICAgICAgICdBRksgdGltZW91dCcsXG4gICAgICAgICAgICAgICAgJ1RoZSB0aW1lIChpbiBzZWNvbmRzKSBpdCB0YWtlcyBmb3IgdGhlIGFwcGxpY2F0aW9uIHRvIHRpbWUgb3V0IGlmIEFGSyB0aW1lb3V0IGlzIGVuYWJsZWQuJyxcbiAgICAgICAgICAgICAgICAwIC8qbWluKi8sXG4gICAgICAgICAgICAgICAgNjAwIC8qbWF4Ki8sXG4gICAgICAgICAgICAgICAgMTIwIC8qdmFsdWUqLyxcbiAgICAgICAgICAgICAgICB1c2VVcmxQYXJhbXNcbiAgICAgICAgICAgIClcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLm51bWVyaWNQYXJhbWV0ZXJzLnNldChcbiAgICAgICAgICAgIE51bWVyaWNQYXJhbWV0ZXJzLk1heFJlY29ubmVjdEF0dGVtcHRzLFxuICAgICAgICAgICAgbmV3IFNldHRpbmdOdW1iZXIoXG4gICAgICAgICAgICAgICAgTnVtZXJpY1BhcmFtZXRlcnMuTWF4UmVjb25uZWN0QXR0ZW1wdHMsXG4gICAgICAgICAgICAgICAgJ01heCBSZWNvbm5lY3RzJyxcbiAgICAgICAgICAgICAgICAnTWF4aW11bSBudW1iZXIgb2YgcmVjb25uZWN0cyB0aGUgYXBwbGljYXRpb24gd2lsbCBhdHRlbXB0IHdoZW4gYSBzdHJlYW1lciBkaXNjb25uZWN0cy4nLFxuICAgICAgICAgICAgICAgIDAgLyptaW4qLyxcbiAgICAgICAgICAgICAgICA5OTkgLyptYXgqLyxcbiAgICAgICAgICAgICAgICAzIC8qdmFsdWUqLyxcbiAgICAgICAgICAgICAgICB1c2VVcmxQYXJhbXNcbiAgICAgICAgICAgIClcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLm51bWVyaWNQYXJhbWV0ZXJzLnNldChcbiAgICAgICAgICAgIE51bWVyaWNQYXJhbWV0ZXJzLk1pblFQLFxuICAgICAgICAgICAgbmV3IFNldHRpbmdOdW1iZXIoXG4gICAgICAgICAgICAgICAgTnVtZXJpY1BhcmFtZXRlcnMuTWluUVAsXG4gICAgICAgICAgICAgICAgJ01pbiBRUCcsXG4gICAgICAgICAgICAgICAgJ1RoZSBsb3dlciBib3VuZCBmb3IgdGhlIHF1YW50aXphdGlvbiBwYXJhbWV0ZXIgKFFQKSBvZiB0aGUgZW5jb2Rlci4gMCA9IEJlc3QgcXVhbGl0eSwgNTEgPSB3b3JzdCBxdWFsaXR5LicsXG4gICAgICAgICAgICAgICAgMCAvKm1pbiovLFxuICAgICAgICAgICAgICAgIDUxIC8qbWF4Ki8sXG4gICAgICAgICAgICAgICAgMCAvKnZhbHVlKi8sXG4gICAgICAgICAgICAgICAgdXNlVXJsUGFyYW1zXG4gICAgICAgICAgICApXG4gICAgICAgICk7XG5cbiAgICAgICAgdGhpcy5udW1lcmljUGFyYW1ldGVycy5zZXQoXG4gICAgICAgICAgICBOdW1lcmljUGFyYW1ldGVycy5NYXhRUCxcbiAgICAgICAgICAgIG5ldyBTZXR0aW5nTnVtYmVyKFxuICAgICAgICAgICAgICAgIE51bWVyaWNQYXJhbWV0ZXJzLk1heFFQLFxuICAgICAgICAgICAgICAgICdNYXggUVAnLFxuICAgICAgICAgICAgICAgICdUaGUgdXBwZXIgYm91bmQgZm9yIHRoZSBxdWFudGl6YXRpb24gcGFyYW1ldGVyIChRUCkgb2YgdGhlIGVuY29kZXIuIDAgPSBCZXN0IHF1YWxpdHksIDUxID0gd29yc3QgcXVhbGl0eS4nLFxuICAgICAgICAgICAgICAgIDAgLyptaW4qLyxcbiAgICAgICAgICAgICAgICA1MSAvKm1heCovLFxuICAgICAgICAgICAgICAgIDUxIC8qdmFsdWUqLyxcbiAgICAgICAgICAgICAgICB1c2VVcmxQYXJhbXNcbiAgICAgICAgICAgIClcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLm51bWVyaWNQYXJhbWV0ZXJzLnNldChcbiAgICAgICAgICAgIE51bWVyaWNQYXJhbWV0ZXJzLldlYlJUQ0ZQUyxcbiAgICAgICAgICAgIG5ldyBTZXR0aW5nTnVtYmVyKFxuICAgICAgICAgICAgICAgIE51bWVyaWNQYXJhbWV0ZXJzLldlYlJUQ0ZQUyxcbiAgICAgICAgICAgICAgICAnTWF4IEZQUycsXG4gICAgICAgICAgICAgICAgJ1RoZSBtYXhpbXVtIEZQUyB0aGF0IFdlYlJUQyB3aWxsIHRyeSB0byB0cmFuc21pdCBmcmFtZXMgYXQuJyxcbiAgICAgICAgICAgICAgICAxIC8qbWluKi8sXG4gICAgICAgICAgICAgICAgOTk5IC8qbWF4Ki8sXG4gICAgICAgICAgICAgICAgNjAgLyp2YWx1ZSovLFxuICAgICAgICAgICAgICAgIHVzZVVybFBhcmFtc1xuICAgICAgICAgICAgKVxuICAgICAgICApO1xuXG4gICAgICAgIHRoaXMubnVtZXJpY1BhcmFtZXRlcnMuc2V0KFxuICAgICAgICAgICAgTnVtZXJpY1BhcmFtZXRlcnMuV2ViUlRDTWluQml0cmF0ZSxcbiAgICAgICAgICAgIG5ldyBTZXR0aW5nTnVtYmVyKFxuICAgICAgICAgICAgICAgIE51bWVyaWNQYXJhbWV0ZXJzLldlYlJUQ01pbkJpdHJhdGUsXG4gICAgICAgICAgICAgICAgJ01pbiBCaXRyYXRlIChrYnBzKScsXG4gICAgICAgICAgICAgICAgJ1RoZSBtaW5pbXVtIGJpdHJhdGUgdGhhdCBXZWJSVEMgc2hvdWxkIHVzZS4nLFxuICAgICAgICAgICAgICAgIDAgLyptaW4qLyxcbiAgICAgICAgICAgICAgICA1MDAwMDAgLyptYXgqLyxcbiAgICAgICAgICAgICAgICAwIC8qdmFsdWUqLyxcbiAgICAgICAgICAgICAgICB1c2VVcmxQYXJhbXNcbiAgICAgICAgICAgIClcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLm51bWVyaWNQYXJhbWV0ZXJzLnNldChcbiAgICAgICAgICAgIE51bWVyaWNQYXJhbWV0ZXJzLldlYlJUQ01heEJpdHJhdGUsXG4gICAgICAgICAgICBuZXcgU2V0dGluZ051bWJlcihcbiAgICAgICAgICAgICAgICBOdW1lcmljUGFyYW1ldGVycy5XZWJSVENNYXhCaXRyYXRlLFxuICAgICAgICAgICAgICAgICdNYXggQml0cmF0ZSAoa2JwcyknLFxuICAgICAgICAgICAgICAgICdUaGUgbWF4aW11bSBiaXRyYXRlIHRoYXQgV2ViUlRDIHNob3VsZCB1c2UuJyxcbiAgICAgICAgICAgICAgICAwIC8qbWluKi8sXG4gICAgICAgICAgICAgICAgNTAwMDAwIC8qbWF4Ki8sXG4gICAgICAgICAgICAgICAgMCAvKnZhbHVlKi8sXG4gICAgICAgICAgICAgICAgdXNlVXJsUGFyYW1zXG4gICAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkIGEgY2FsbGJhY2sgdG8gZmlyZSB3aGVuIHRoZSBudW1lcmljIHNldHRpbmcgaXMgdG9nZ2xlZC5cbiAgICAgKiBAcGFyYW0gaWQgVGhlIGlkIG9mIHRoZSBmbGFnLlxuICAgICAqIEBwYXJhbSBvbkNoYW5nZWRMaXN0ZW5lciBUaGUgY2FsbGJhY2sgdG8gZmlyZSB3aGVuIHRoZSBudW1lcmljIHZhbHVlIGNoYW5nZXMuXG4gICAgICovXG4gICAgX2FkZE9uTnVtZXJpY1NldHRpbmdDaGFuZ2VkTGlzdGVuZXIoXG4gICAgICAgIGlkOiBOdW1lcmljUGFyYW1ldGVyc0lkcyxcbiAgICAgICAgb25DaGFuZ2VkTGlzdGVuZXI6IChuZXdWYWx1ZTogbnVtYmVyKSA9PiB2b2lkXG4gICAgKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLm51bWVyaWNQYXJhbWV0ZXJzLmhhcyhpZCkpIHtcbiAgICAgICAgICAgIHRoaXMubnVtZXJpY1BhcmFtZXRlcnNcbiAgICAgICAgICAgICAgICAuZ2V0KGlkKVxuICAgICAgICAgICAgICAgIC5hZGRPbkNoYW5nZWRMaXN0ZW5lcihvbkNoYW5nZWRMaXN0ZW5lcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfYWRkT25PcHRpb25TZXR0aW5nQ2hhbmdlZExpc3RlbmVyKFxuICAgICAgICBpZDogT3B0aW9uUGFyYW1ldGVyc0lkcyxcbiAgICAgICAgb25DaGFuZ2VkTGlzdGVuZXI6IChuZXdWYWx1ZTogc3RyaW5nKSA9PiB2b2lkXG4gICAgKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvblBhcmFtZXRlcnMuaGFzKGlkKSkge1xuICAgICAgICAgICAgdGhpcy5vcHRpb25QYXJhbWV0ZXJzXG4gICAgICAgICAgICAgICAgLmdldChpZClcbiAgICAgICAgICAgICAgICAuYWRkT25DaGFuZ2VkTGlzdGVuZXIob25DaGFuZ2VkTGlzdGVuZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIGlkIFRoZSBpZCBvZiB0aGUgbnVtZXJpYyBzZXR0aW5nIHdlIGFyZSBpbnRlcmVzdGVkIGluIGdldHRpbmcgYSB2YWx1ZSBmb3IuXG4gICAgICogQHJldHVybnMgVGhlIG51bWVyaWMgdmFsdWUgc3RvcmVkIGluIHRoZSBwYXJhbWV0ZXIgd2l0aCB0aGUgcGFzc2VkIGlkLlxuICAgICAqL1xuICAgIGdldE51bWVyaWNTZXR0aW5nVmFsdWUoaWQ6IE51bWVyaWNQYXJhbWV0ZXJzSWRzKTogbnVtYmVyIHtcbiAgICAgICAgaWYgKHRoaXMubnVtZXJpY1BhcmFtZXRlcnMuaGFzKGlkKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubnVtZXJpY1BhcmFtZXRlcnMuZ2V0KGlkKS5udW1iZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFRoZXJlIGlzIG5vIG51bWVyaWMgc2V0dGluZyB3aXRoIHRoZSBpZCBvZiAke2lkfWApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIGlkIFRoZSBpZCBvZiB0aGUgdGV4dCBzZXR0aW5nIHdlIGFyZSBpbnRlcmVzdGVkIGluIGdldHRpbmcgYSB2YWx1ZSBmb3IuXG4gICAgICogQHJldHVybnMgVGhlIHRleHQgdmFsdWUgc3RvcmVkIGluIHRoZSBwYXJhbWV0ZXIgd2l0aCB0aGUgcGFzc2VkIGlkLlxuICAgICAqL1xuICAgIGdldFRleHRTZXR0aW5nVmFsdWUoaWQ6IFRleHRQYXJhbWV0ZXJzSWRzKTogc3RyaW5nIHtcbiAgICAgICAgaWYgKHRoaXMudGV4dFBhcmFtZXRlcnMuaGFzKGlkKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudGV4dFBhcmFtZXRlcnMuZ2V0KGlkKS52YWx1ZSBhcyBzdHJpbmc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFRoZXJlIGlzIG5vIG51bWVyaWMgc2V0dGluZyB3aXRoIHRoZSBpZCBvZiAke2lkfWApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0IG51bWJlciBpbiB0aGUgc2V0dGluZy5cbiAgICAgKiBAcGFyYW0gaWQgVGhlIGlkIG9mIHRoZSBudW1lcmljIHNldHRpbmcgd2UgYXJlIGludGVyZXN0ZWQgaW4uXG4gICAgICogQHBhcmFtIHZhbHVlIFRoZSBudW1lcmljIHZhbHVlIHRvIHNldC5cbiAgICAgKi9cbiAgICBzZXROdW1lcmljU2V0dGluZyhpZDogTnVtZXJpY1BhcmFtZXRlcnNJZHMsIHZhbHVlOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMubnVtZXJpY1BhcmFtZXRlcnMuaGFzKGlkKSkge1xuICAgICAgICAgICAgdGhpcy5udW1lcmljUGFyYW1ldGVycy5nZXQoaWQpLm51bWJlciA9IHZhbHVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBUaGVyZSBpcyBubyBudW1lcmljIHNldHRpbmcgd2l0aCB0aGUgaWQgb2YgJHtpZH1gKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZCBhIGNhbGxiYWNrIHRvIGZpcmUgd2hlbiB0aGUgZmxhZyBpcyB0b2dnbGVkLlxuICAgICAqIEBwYXJhbSBpZCBUaGUgaWQgb2YgdGhlIGZsYWcuXG4gICAgICogQHBhcmFtIG9uQ2hhbmdlTGlzdGVuZXIgVGhlIGNhbGxiYWNrIHRvIGZpcmUgd2hlbiB0aGUgdmFsdWUgY2hhbmdlcy5cbiAgICAgKi9cbiAgICBfYWRkT25TZXR0aW5nQ2hhbmdlZExpc3RlbmVyKFxuICAgICAgICBpZDogRmxhZ3NJZHMsXG4gICAgICAgIG9uQ2hhbmdlTGlzdGVuZXI6IChuZXdGbGFnVmFsdWU6IGJvb2xlYW4pID0+IHZvaWRcbiAgICApOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuZmxhZ3MuaGFzKGlkKSkge1xuICAgICAgICAgICAgdGhpcy5mbGFncy5nZXQoaWQpLm9uQ2hhbmdlID0gb25DaGFuZ2VMaXN0ZW5lcjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZCBhIGNhbGxiYWNrIHRvIGZpcmUgd2hlbiB0aGUgdGV4dCBpcyBjaGFuZ2VkLlxuICAgICAqIEBwYXJhbSBpZCBUaGUgaWQgb2YgdGhlIGZsYWcuXG4gICAgICogQHBhcmFtIG9uQ2hhbmdlTGlzdGVuZXIgVGhlIGNhbGxiYWNrIHRvIGZpcmUgd2hlbiB0aGUgdmFsdWUgY2hhbmdlcy5cbiAgICAgKi9cbiAgICBfYWRkT25UZXh0U2V0dGluZ0NoYW5nZWRMaXN0ZW5lcihcbiAgICAgICAgaWQ6IFRleHRQYXJhbWV0ZXJzSWRzLFxuICAgICAgICBvbkNoYW5nZUxpc3RlbmVyOiAobmV3VGV4dFZhbHVlOiBzdHJpbmcpID0+IHZvaWRcbiAgICApOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMudGV4dFBhcmFtZXRlcnMuaGFzKGlkKSkge1xuICAgICAgICAgICAgdGhpcy50ZXh0UGFyYW1ldGVycy5nZXQoaWQpLm9uQ2hhbmdlID0gb25DaGFuZ2VMaXN0ZW5lcjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgb3B0aW9uIHdoaWNoIGhhcyB0aGUgZ2l2ZW4gaWQuXG4gICAgICogQHBhcmFtIGlkIFRoZSBpZCBvZiB0aGUgb3B0aW9uLlxuICAgICAqIEByZXR1cm5zIFRoZSBTZXR0aW5nT3B0aW9uIG9iamVjdCBtYXRjaGluZyBpZFxuICAgICAqL1xuICAgIGdldFNldHRpbmdPcHRpb24oaWQ6IE9wdGlvblBhcmFtZXRlcnNJZHMpOiBTZXR0aW5nT3B0aW9uIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9uUGFyYW1ldGVycy5nZXQoaWQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgdmFsdWUgb2YgdGhlIGNvbmZpZ3VyYXRpb24gZmxhZyB3aGljaCBoYXMgdGhlIGdpdmVuIGlkLlxuICAgICAqIEBwYXJhbSBpZCBUaGUgdW5pcXVlIGlkIGZvciB0aGUgZmxhZy5cbiAgICAgKiBAcmV0dXJucyBUcnVlIGlmIHRoZSBmbGFnIGlzIGVuYWJsZWQuXG4gICAgICovXG4gICAgaXNGbGFnRW5hYmxlZChpZDogRmxhZ3NJZHMpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmxhZ3MuZ2V0KGlkKS5mbGFnIGFzIGJvb2xlYW47XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0IGZsYWcgdG8gYmUgZW5hYmxlZC9kaXNhYmxlZC5cbiAgICAgKiBAcGFyYW0gaWQgVGhlIGlkIG9mIHRoZSBmbGFnIHRvIHRvZ2dsZS5cbiAgICAgKiBAcGFyYW0gZmxhZ0VuYWJsZWQgVHJ1ZSBpZiB0aGUgZmxhZyBzaG91bGQgYmUgZW5hYmxlZC5cbiAgICAgKi9cbiAgICBzZXRGbGFnRW5hYmxlZChpZDogRmxhZ3NJZHMsIGZsYWdFbmFibGVkOiBib29sZWFuKSB7XG4gICAgICAgIGlmICghdGhpcy5mbGFncy5oYXMoaWQpKSB7XG4gICAgICAgICAgICBMb2dnZXIuV2FybmluZyhcbiAgICAgICAgICAgICAgICBMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLFxuICAgICAgICAgICAgICAgIGBDYW5ub3QgdG9nZ2xlIGZsYWcgY2FsbGVkICR7aWR9IC0gaXQgZG9lcyBub3QgZXhpc3QgaW4gdGhlIENvbmZpZy5mbGFncyBtYXAuYFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZmxhZ3MuZ2V0KGlkKS5mbGFnID0gZmxhZ0VuYWJsZWQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIHRleHQgc2V0dGluZy5cbiAgICAgKiBAcGFyYW0gaWQgVGhlIGlkIG9mIHRoZSBzZXR0aW5nXG4gICAgICogQHBhcmFtIHNldHRpbmdWYWx1ZSBUaGUgdmFsdWUgdG8gc2V0IGluIHRoZSBzZXR0aW5nLlxuICAgICAqL1xuICAgIHNldFRleHRTZXR0aW5nKGlkOiBUZXh0UGFyYW1ldGVyc0lkcywgc2V0dGluZ1ZhbHVlOiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKCF0aGlzLnRleHRQYXJhbWV0ZXJzLmhhcyhpZCkpIHtcbiAgICAgICAgICAgIExvZ2dlci5XYXJuaW5nKFxuICAgICAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXG4gICAgICAgICAgICAgICAgYENhbm5vdCBzZXQgdGV4dCBzZXR0aW5nIGNhbGxlZCAke2lkfSAtIGl0IGRvZXMgbm90IGV4aXN0IGluIHRoZSBDb25maWcudGV4dFBhcmFtZXRlcnMgbWFwLmBcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnRleHRQYXJhbWV0ZXJzLmdldChpZCkudGV4dCA9IHNldHRpbmdWYWx1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldCB0aGUgb3B0aW9uIHNldHRpbmcgbGlzdCBvZiBvcHRpb25zLlxuICAgICAqIEBwYXJhbSBpZCBUaGUgaWQgb2YgdGhlIHNldHRpbmdcbiAgICAgKiBAcGFyYW0gc2V0dGluZ09wdGlvbnMgVGhlIHZhbHVlcyB0aGUgc2V0dGluZyBjb3VsZCB0YWtlXG4gICAgICovXG4gICAgc2V0T3B0aW9uU2V0dGluZ09wdGlvbnMoXG4gICAgICAgIGlkOiBPcHRpb25QYXJhbWV0ZXJzSWRzLFxuICAgICAgICBzZXR0aW5nT3B0aW9uczogQXJyYXk8c3RyaW5nPlxuICAgICkge1xuICAgICAgICBpZiAoIXRoaXMub3B0aW9uUGFyYW1ldGVycy5oYXMoaWQpKSB7XG4gICAgICAgICAgICBMb2dnZXIuV2FybmluZyhcbiAgICAgICAgICAgICAgICBMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLFxuICAgICAgICAgICAgICAgIGBDYW5ub3Qgc2V0IHRleHQgc2V0dGluZyBjYWxsZWQgJHtpZH0gLSBpdCBkb2VzIG5vdCBleGlzdCBpbiB0aGUgQ29uZmlnLm9wdGlvblBhcmFtZXRlcnMgbWFwLmBcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm9wdGlvblBhcmFtZXRlcnMuZ2V0KGlkKS5vcHRpb25zID0gc2V0dGluZ09wdGlvbnM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXQgb3B0aW9uIGVudW0gc2V0dGluZ3Mgc2VsZWN0ZWQgb3B0aW9uLlxuICAgICAqIEBwYXJhbSBpZCBUaGUgaWQgb2YgdGhlIHNldHRpbmdcbiAgICAgKiBAcGFyYW0gc2V0dGluZ09wdGlvbnMgVGhlIHZhbHVlIHRvIHNlbGVjdCBvdXQgb2YgYWxsIHRoZSBvcHRpb25zXG4gICAgICovXG4gICAgc2V0T3B0aW9uU2V0dGluZ1ZhbHVlKGlkOiBPcHRpb25QYXJhbWV0ZXJzSWRzLCBzZXR0aW5nVmFsdWU6IHN0cmluZykge1xuICAgICAgICBpZiAoIXRoaXMub3B0aW9uUGFyYW1ldGVycy5oYXMoaWQpKSB7XG4gICAgICAgICAgICBMb2dnZXIuV2FybmluZyhcbiAgICAgICAgICAgICAgICBMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLFxuICAgICAgICAgICAgICAgIGBDYW5ub3Qgc2V0IHRleHQgc2V0dGluZyBjYWxsZWQgJHtpZH0gLSBpdCBkb2VzIG5vdCBleGlzdCBpbiB0aGUgQ29uZmlnLmVudW1QYXJhbWV0ZXJzIG1hcC5gXG4gICAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5vcHRpb25QYXJhbWV0ZXJzLmdldChpZCkuc2VsZWN0ZWQgPSBzZXR0aW5nVmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIGxhYmVsIGZvciB0aGUgZmxhZy5cbiAgICAgKiBAcGFyYW0gaWQgVGhlIGlkIG9mIHRoZSBmbGFnLlxuICAgICAqIEBwYXJhbSBsYWJlbCBUaGUgbmV3IGxhYmVsIHRvIHVzZSBmb3IgdGhlIGZsYWcuXG4gICAgICovXG4gICAgc2V0RmxhZ0xhYmVsKGlkOiBGbGFnc0lkcywgbGFiZWw6IHN0cmluZykge1xuICAgICAgICBpZiAoIXRoaXMuZmxhZ3MuaGFzKGlkKSkge1xuICAgICAgICAgICAgTG9nZ2VyLldhcm5pbmcoXG4gICAgICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcbiAgICAgICAgICAgICAgICBgQ2Fubm90IHNldCBsYWJlbCBmb3IgZmxhZyBjYWxsZWQgJHtpZH0gLSBpdCBkb2VzIG5vdCBleGlzdCBpbiB0aGUgQ29uZmlnLmZsYWdzIG1hcC5gXG4gICAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5mbGFncy5nZXQoaWQpLmxhYmVsID0gbGFiZWw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXQgYSBzdWJzZXQgb2YgYWxsIHNldHRpbmdzIGluIG9uZSBmdW5jdGlvbiBjYWxsLlxuICAgICAqXG4gICAgICogQHBhcmFtIHNldHRpbmdzIEEgKHBhcnRpYWwpIGxpc3Qgb2Ygc2V0dGluZ3MgdG8gc2V0XG4gICAgICovXG4gICAgc2V0U2V0dGluZ3Moc2V0dGluZ3M6IFBhcnRpYWw8QWxsU2V0dGluZ3M+KSB7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHNldHRpbmdzKSkge1xuICAgICAgICAgICAgaWYgKGlzRmxhZ0lkKGtleSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldEZsYWdFbmFibGVkKGtleSwgc2V0dGluZ3Nba2V5XSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzTnVtZXJpY0lkKGtleSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldE51bWVyaWNTZXR0aW5nKGtleSwgc2V0dGluZ3Nba2V5XSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzVGV4dElkKGtleSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFRleHRTZXR0aW5nKGtleSwgc2V0dGluZ3Nba2V5XSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzT3B0aW9uSWQoa2V5KSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0T3B0aW9uU2V0dGluZ1ZhbHVlKGtleSwgc2V0dGluZ3Nba2V5XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgYWxsIHNldHRpbmdzXG4gICAgICogQHJldHVybnMgQWxsIHNldHRpbmcgdmFsdWVzIGFzIGFuIG9iamVjdCB3aXRoIHNldHRpbmcgaWRzIGFzIGtleXNcbiAgICAgKi9cbiAgICBnZXRTZXR0aW5ncygpOiBQYXJ0aWFsPEFsbFNldHRpbmdzPiB7XG4gICAgICAgIGNvbnN0IHNldHRpbmdzOiBQYXJ0aWFsPEFsbFNldHRpbmdzPiA9IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiB0aGlzLmZsYWdzLmVudHJpZXMoKSkge1xuICAgICAgICAgICAgc2V0dGluZ3Nba2V5XSA9IHZhbHVlLmZsYWc7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgdGhpcy5udW1lcmljUGFyYW1ldGVycy5lbnRyaWVzKCkpIHtcbiAgICAgICAgICAgIHNldHRpbmdzW2tleV0gPSB2YWx1ZS5udW1iZXI7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgdGhpcy50ZXh0UGFyYW1ldGVycy5lbnRyaWVzKCkpIHtcbiAgICAgICAgICAgIHNldHRpbmdzW2tleV0gPSB2YWx1ZS50ZXh0O1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIHRoaXMub3B0aW9uUGFyYW1ldGVycy5lbnRyaWVzKCkpIHtcbiAgICAgICAgICAgIHNldHRpbmdzW2tleV0gPSB2YWx1ZS5zZWxlY3RlZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2V0dGluZ3M7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGFsbCBGbGFnIHNldHRpbmdzIGFzIGFuIGFycmF5LlxuICAgICAqIEByZXR1cm5zIEFsbCBTZXR0aW5nRmxhZyBvYmplY3RzXG4gICAgICovXG4gICAgZ2V0RmxhZ3MoKTogQXJyYXk8U2V0dGluZ0ZsYWc+IHtcbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5mbGFncy52YWx1ZXMoKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGFsbCBUZXh0IHNldHRpbmdzIGFzIGFuIGFycmF5LlxuICAgICAqIEByZXR1cm5zIEFsbCBTZXR0aW5nVGV4dCBvYmplY3RzXG4gICAgICovXG4gICAgZ2V0VGV4dFNldHRpbmdzKCk6IEFycmF5PFNldHRpbmdUZXh0PiB7XG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMudGV4dFBhcmFtZXRlcnMudmFsdWVzKCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBhbGwgTnVtYmVyIHNldHRpbmdzIGFzIGFuIGFycmF5LlxuICAgICAqIEByZXR1cm5zIEFsbCBTZXR0aW5nTnVtYmVyIG9iamVjdHNcbiAgICAgKi9cbiAgICBnZXROdW1lcmljU2V0dGluZ3MoKTogQXJyYXk8U2V0dGluZ051bWJlcj4ge1xuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLm51bWVyaWNQYXJhbWV0ZXJzLnZhbHVlcygpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgYWxsIE9wdGlvbiBzZXR0aW5ncyBhcyBhbiBhcnJheS5cbiAgICAgKiBAcmV0dXJucyBBbGwgU2V0dGluZ09wdGlvbiBvYmplY3RzXG4gICAgICovXG4gICAgZ2V0T3B0aW9uU2V0dGluZ3MoKTogQXJyYXk8U2V0dGluZ09wdGlvbj4ge1xuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLm9wdGlvblBhcmFtZXRlcnMudmFsdWVzKCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVtaXQgZXZlbnRzIHdoZW4gc2V0dGluZ3MgY2hhbmdlLlxuICAgICAqIEBwYXJhbSBldmVudEVtaXR0ZXJcbiAgICAgKi9cbiAgICBfcmVnaXN0ZXJPbkNoYW5nZUV2ZW50cyhldmVudEVtaXR0ZXI6IEV2ZW50RW1pdHRlcikge1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiB0aGlzLmZsYWdzLmtleXMoKSkge1xuICAgICAgICAgICAgY29uc3QgZmxhZyA9IHRoaXMuZmxhZ3MuZ2V0KGtleSk7XG4gICAgICAgICAgICBpZiAoZmxhZykge1xuICAgICAgICAgICAgICAgIGZsYWcub25DaGFuZ2VFbWl0ID0gKG5ld1ZhbHVlOiBib29sZWFuKSA9PlxuICAgICAgICAgICAgICAgICAgICBldmVudEVtaXR0ZXIuZGlzcGF0Y2hFdmVudChcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBTZXR0aW5nc0NoYW5nZWRFdmVudCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IGZsYWcuaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2ZsYWcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBuZXdWYWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IGZsYWdcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgdGhpcy5udW1lcmljUGFyYW1ldGVycy5rZXlzKCkpIHtcbiAgICAgICAgICAgIGNvbnN0IG51bWJlciA9IHRoaXMubnVtZXJpY1BhcmFtZXRlcnMuZ2V0KGtleSk7XG4gICAgICAgICAgICBpZiAobnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgbnVtYmVyLm9uQ2hhbmdlRW1pdCA9IChuZXdWYWx1ZTogbnVtYmVyKSA9PlxuICAgICAgICAgICAgICAgICAgICBldmVudEVtaXR0ZXIuZGlzcGF0Y2hFdmVudChcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBTZXR0aW5nc0NoYW5nZWRFdmVudCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IG51bWJlci5pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbnVtYmVyJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogbmV3VmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiBudW1iZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgdGhpcy50ZXh0UGFyYW1ldGVycy5rZXlzKCkpIHtcbiAgICAgICAgICAgIGNvbnN0IHRleHQgPSB0aGlzLnRleHRQYXJhbWV0ZXJzLmdldChrZXkpO1xuICAgICAgICAgICAgaWYgKHRleHQpIHtcbiAgICAgICAgICAgICAgICB0ZXh0Lm9uQ2hhbmdlRW1pdCA9IChuZXdWYWx1ZTogc3RyaW5nKSA9PlxuICAgICAgICAgICAgICAgICAgICBldmVudEVtaXR0ZXIuZGlzcGF0Y2hFdmVudChcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBTZXR0aW5nc0NoYW5nZWRFdmVudCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IHRleHQuaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBuZXdWYWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IHRleHRcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgdGhpcy5vcHRpb25QYXJhbWV0ZXJzLmtleXMoKSkge1xuICAgICAgICAgICAgY29uc3Qgb3B0aW9uID0gdGhpcy5vcHRpb25QYXJhbWV0ZXJzLmdldChrZXkpO1xuICAgICAgICAgICAgaWYgKG9wdGlvbikge1xuICAgICAgICAgICAgICAgIG9wdGlvbi5vbkNoYW5nZUVtaXQgPSAobmV3VmFsdWU6IHN0cmluZykgPT5cbiAgICAgICAgICAgICAgICAgICAgZXZlbnRFbWl0dGVyLmRpc3BhdGNoRXZlbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgU2V0dGluZ3NDaGFuZ2VkRXZlbnQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBvcHRpb24uaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ29wdGlvbicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IG5ld1ZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldDogb3B0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG4vKipcbiAqIFRoZSBlbnVtIGFzc29jaWF0ZWQgd2l0aCB0aGUgbW91c2UgYmVpbmcgbG9ja2VkIG9yIGhvdmVyaW5nXG4gKi9cbmV4cG9ydCBlbnVtIENvbnRyb2xTY2hlbWVUeXBlIHtcbiAgICBMb2NrZWRNb3VzZSA9IDAsXG4gICAgSG92ZXJpbmdNb3VzZSA9IDFcbn1cbiIsIi8vIENvcHlyaWdodCBFcGljIEdhbWVzLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG5cbi8qKlxuICogQmFzZSBjbGFzcyBmb3IgYSBzZXR0aW5nIHRoYXQgaGFzIGEgdGV4dCBsYWJlbCBhbmQgYW4gYXJiaXRyYXJ5IHNldHRpbmcgdmFsdWUgaXQgc3RvcmVzLlxuICovXG5leHBvcnQgY2xhc3MgU2V0dGluZ0Jhc2Uge1xuICAgIGlkOiBzdHJpbmc7XG4gICAgZGVzY3JpcHRpb246IHN0cmluZztcbiAgICBfbGFiZWw6IHN0cmluZztcbiAgICBfdmFsdWU6IHVua25vd247XG4gICAgb25DaGFuZ2U6IChjaGFuZ2VkVmFsdWU6IHVua25vd24sIHNldHRpbmc6IFNldHRpbmdCYXNlKSA9PiB2b2lkO1xuICAgIG9uQ2hhbmdlRW1pdDogKGNoYW5nZWRWYWx1ZTogdW5rbm93bikgPT4gdm9pZDtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBpZDogc3RyaW5nLFxuICAgICAgICBsYWJlbDogc3RyaW5nLFxuICAgICAgICBkZXNjcmlwdGlvbjogc3RyaW5nLFxuICAgICAgICBkZWZhdWx0U2V0dGluZ1ZhbHVlOiB1bmtub3duLFxuXHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZW1wdHktZnVuY3Rpb25cblx0XHRkZWZhdWx0T25DaGFuZ2VMaXN0ZW5lcjogKGNoYW5nZWRWYWx1ZTogdW5rbm93biwgc2V0dGluZzogU2V0dGluZ0Jhc2UpID0+IHZvaWQgPSAoKSA9PiB7IC8qIERvIG5vdGhpbmcsIHRvIGJlIG92ZXJyaWRkZW4uICovIH1cbiAgICApIHtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSA9IGRlZmF1bHRPbkNoYW5nZUxpc3RlbmVyO1xuXG4gICAgICAgIHRoaXMub25DaGFuZ2VFbWl0ID0gKCkgPT4ge1xuICAgICAgICAgICAgLyogRG8gbm90aGluZywgdG8gYmUgb3ZlcnJpZGRlbi4gKi9cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xuICAgICAgICB0aGlzLmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XG4gICAgICAgIHRoaXMubGFiZWwgPSBsYWJlbDtcbiAgICAgICAgdGhpcy52YWx1ZSA9IGRlZmF1bHRTZXR0aW5nVmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBsYWJlbCB0ZXh0IGZvciB0aGUgc2V0dGluZy5cbiAgICAgKiBAcGFyYW0gbGFiZWwgc2V0dGluZyBsYWJlbC5cbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0IGxhYmVsKGluTGFiZWw6IHN0cmluZykge1xuICAgICAgICB0aGlzLl9sYWJlbCA9IGluTGFiZWw7XG4gICAgICAgIHRoaXMub25DaGFuZ2VFbWl0KHRoaXMuX3ZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyBUaGUgbGFiZWwgdGV4dCBmb3IgdGhlIHNldHRpbmcuXG4gICAgICovXG4gICAgcHVibGljIGdldCBsYWJlbCgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5fbGFiZWw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybiBUaGUgc2V0dGluZydzIHZhbHVlLlxuICAgICAqL1xuICAgIHB1YmxpYyBnZXQgdmFsdWUoKTogdW5rbm93biB7XG4gICAgICAgIHJldHVybiB0aGlzLl92YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGUgdGhlIHNldHRpbmcncyBzdG9yZWQgdmFsdWUuXG4gICAgICogQHBhcmFtIGluVmFsdWUgVGhlIG5ldyB2YWx1ZSBmb3IgdGhlIHNldHRpbmcuXG4gICAgICovXG4gICAgcHVibGljIHNldCB2YWx1ZShpblZhbHVlOiB1bmtub3duKSB7XG4gICAgICAgIHRoaXMuX3ZhbHVlID0gaW5WYWx1ZTtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSh0aGlzLl92YWx1ZSwgdGhpcyk7XG4gICAgICAgIHRoaXMub25DaGFuZ2VFbWl0KHRoaXMuX3ZhbHVlKTtcbiAgICB9XG59XG4iLCIvLyBDb3B5cmlnaHQgRXBpYyBHYW1lcywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXG5pbXBvcnQgdHlwZSB7IEZsYWdzSWRzIH0gZnJvbSAnLi9Db25maWcnO1xuaW1wb3J0IHsgU2V0dGluZ0Jhc2UgfSBmcm9tICcuL1NldHRpbmdCYXNlJztcblxuLyoqXG4gKiBBIGJvb2xlYW4gZmxhZyBzZXR0aW5nIG9iamVjdCB3aXRoIGEgdGV4dCBsYWJlbC5cbiAqL1xuZXhwb3J0IGNsYXNzIFNldHRpbmdGbGFnPFxuICAgIEN1c3RvbUlkcyBleHRlbmRzIHN0cmluZyA9IEZsYWdzSWRzXG4+IGV4dGVuZHMgU2V0dGluZ0Jhc2Uge1xuICAgIGlkOiBGbGFnc0lkcyB8IEN1c3RvbUlkcztcbiAgICBvbkNoYW5nZUVtaXQ6IChjaGFuZ2VkVmFsdWU6IGJvb2xlYW4pID0+IHZvaWQ7XG4gICAgdXNlVXJsUGFyYW1zOiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIGlkOiBGbGFnc0lkcyB8IEN1c3RvbUlkcyxcbiAgICAgICAgbGFiZWw6IHN0cmluZyxcbiAgICAgICAgZGVzY3JpcHRpb246IHN0cmluZyxcbiAgICAgICAgZGVmYXVsdEZsYWdWYWx1ZTogYm9vbGVhbixcbiAgICAgICAgdXNlVXJsUGFyYW1zOiBib29sZWFuLFxuXHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZW1wdHktZnVuY3Rpb25cblx0XHRkZWZhdWx0T25DaGFuZ2VMaXN0ZW5lcjogKGNoYW5nZWRWYWx1ZTogdW5rbm93biwgc2V0dGluZzogU2V0dGluZ0Jhc2UpID0+IHZvaWQgPSAoKSA9PiB7IC8qIERvIG5vdGhpbmcsIHRvIGJlIG92ZXJyaWRkZW4uICovIH1cbiAgICApIHtcbiAgICAgICAgc3VwZXIoaWQsIGxhYmVsLCBkZXNjcmlwdGlvbiwgZGVmYXVsdEZsYWdWYWx1ZSwgZGVmYXVsdE9uQ2hhbmdlTGlzdGVuZXIpO1xuXG4gICAgICAgIGNvbnN0IHVybFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMod2luZG93LmxvY2F0aW9uLnNlYXJjaCk7XG4gICAgICAgIGlmICghdXNlVXJsUGFyYW1zIHx8ICF1cmxQYXJhbXMuaGFzKHRoaXMuaWQpKSB7XG4gICAgICAgICAgICB0aGlzLmZsYWcgPSBkZWZhdWx0RmxhZ1ZhbHVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gcGFyc2UgZmxhZyBmcm9tIHVybCBwYXJhbWV0ZXJzXG4gICAgICAgICAgICBjb25zdCB1cmxQYXJhbUZsYWcgPSB0aGlzLmdldFVybFBhcmFtRmxhZygpO1xuICAgICAgICAgICAgdGhpcy5mbGFnID0gdXJsUGFyYW1GbGFnO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudXNlVXJsUGFyYW1zID0gdXNlVXJsUGFyYW1zO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBhcnNlIHRoZSBmbGFnIHZhbHVlIGZyb20gdGhlIHVybCBwYXJhbWV0ZXJzLlxuICAgICAqIEByZXR1cm5zIFRydWUgaWYgdGhlIHVybCBwYXJhbWV0ZXJzIGNvbnRhaW5zIC8/aWQsIGJ1dCBGYWxzZSBpZiAvP2lkPWZhbHNlXG4gICAgICovXG4gICAgZ2V0VXJsUGFyYW1GbGFnKCk6IGJvb2xlYW4ge1xuICAgICAgICBjb25zdCB1cmxQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpO1xuICAgICAgICBpZiAodXJsUGFyYW1zLmhhcyh0aGlzLmlkKSkge1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIHVybFBhcmFtcy5nZXQodGhpcy5pZCkgPT09ICdmYWxzZScgfHxcbiAgICAgICAgICAgICAgICB1cmxQYXJhbXMuZ2V0KHRoaXMuaWQpID09PSAnRmFsc2UnXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGVyc2lzdCB0aGUgc2V0dGluZyB2YWx1ZSBpbiBVUkwuXG4gICAgICovXG4gICAgcHVibGljIHVwZGF0ZVVSTFBhcmFtcygpIHtcbiAgICAgICAgaWYgKHRoaXMudXNlVXJsUGFyYW1zKSB7XG4gICAgICAgICAgICAvLyBzZXQgdXJsIHBhcmFtc1xuICAgICAgICAgICAgY29uc3QgdXJsUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh3aW5kb3cubG9jYXRpb24uc2VhcmNoKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmZsYWcgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICB1cmxQYXJhbXMuc2V0KHRoaXMuaWQsICd0cnVlJyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHVybFBhcmFtcy5zZXQodGhpcy5pZCwgJ2ZhbHNlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUoXG4gICAgICAgICAgICAgICAge30sXG4gICAgICAgICAgICAgICAgJycsXG4gICAgICAgICAgICAgICAgdXJsUGFyYW1zLnRvU3RyaW5nKCkgIT09ICcnXG4gICAgICAgICAgICAgICAgICAgID8gYCR7bG9jYXRpb24ucGF0aG5hbWV9PyR7dXJsUGFyYW1zfWBcbiAgICAgICAgICAgICAgICAgICAgOiBgJHtsb2NhdGlvbi5wYXRobmFtZX1gXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRW5hYmxlcyB0aGlzIGZsYWcuXG4gICAgICovXG4gICAgcHVibGljIGVuYWJsZSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5mbGFnID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIFRoZSBzZXR0aW5nJ3MgdmFsdWUuXG4gICAgICovXG4gICAgcHVibGljIGdldCBmbGFnKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gISF0aGlzLnZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZSB0aGUgc2V0dGluZydzIHN0b3JlZCB2YWx1ZS5cbiAgICAgKiBAcGFyYW0gaW5WYWx1ZSBUaGUgbmV3IHZhbHVlIGZvciB0aGUgc2V0dGluZy5cbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0IGZsYWcoaW5WYWx1ZTogYm9vbGVhbikge1xuICAgICAgICB0aGlzLnZhbHVlID0gaW5WYWx1ZTtcbiAgICB9XG59XG4iLCIvLyBDb3B5cmlnaHQgRXBpYyBHYW1lcywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXG5pbXBvcnQgdHlwZSB7IE51bWVyaWNQYXJhbWV0ZXJzSWRzIH0gZnJvbSAnLi9Db25maWcnO1xuaW1wb3J0IHsgU2V0dGluZ0Jhc2UgfSBmcm9tICcuL1NldHRpbmdCYXNlJztcblxuLyoqXG4gKiBBIG51bWJlciBzZXR0aW5nIG9iamVjdCB3aXRoIGEgdGV4dCBsYWJlbC4gTWluIGFuZCBtYXggbGltaXQgdGhlIHJhbmdlIG9mIGFsbG93ZWQgdmFsdWVzLlxuICovXG5leHBvcnQgY2xhc3MgU2V0dGluZ051bWJlcjxcbiAgICBDdXN0b21JZHMgZXh0ZW5kcyBzdHJpbmcgPSBOdW1lcmljUGFyYW1ldGVyc0lkc1xuPiBleHRlbmRzIFNldHRpbmdCYXNlIHtcbiAgICBfbWluOiBudW1iZXI7XG4gICAgX21heDogbnVtYmVyO1xuXG4gICAgaWQ6IE51bWVyaWNQYXJhbWV0ZXJzSWRzIHwgQ3VzdG9tSWRzO1xuICAgIG9uQ2hhbmdlRW1pdDogKGNoYW5nZWRWYWx1ZTogbnVtYmVyKSA9PiB2b2lkO1xuICAgIHVzZVVybFBhcmFtczogYm9vbGVhbjtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBpZDogTnVtZXJpY1BhcmFtZXRlcnNJZHMgfCBDdXN0b21JZHMsXG4gICAgICAgIGxhYmVsOiBzdHJpbmcsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBzdHJpbmcsXG4gICAgICAgIG1pbjogbnVtYmVyLFxuICAgICAgICBtYXg6IG51bWJlcixcbiAgICAgICAgZGVmYXVsdE51bWJlcjogbnVtYmVyLFxuICAgICAgICB1c2VVcmxQYXJhbXM6IGJvb2xlYW4sXG5cdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1lbXB0eS1mdW5jdGlvblxuXHRcdGRlZmF1bHRPbkNoYW5nZUxpc3RlbmVyOiAoY2hhbmdlZFZhbHVlOiB1bmtub3duLCBzZXR0aW5nOiBTZXR0aW5nQmFzZSkgPT4gdm9pZCA9ICgpID0+IHsgLyogRG8gbm90aGluZywgdG8gYmUgb3ZlcnJpZGRlbi4gKi8gfVxuICAgICkge1xuICAgICAgICBzdXBlcihpZCwgbGFiZWwsIGRlc2NyaXB0aW9uLCBkZWZhdWx0TnVtYmVyLCBkZWZhdWx0T25DaGFuZ2VMaXN0ZW5lcik7XG5cbiAgICAgICAgdGhpcy5fbWluID0gbWluO1xuICAgICAgICB0aGlzLl9tYXggPSBtYXg7XG5cbiAgICAgICAgLy8gYXR0ZW1wdCB0byByZWFkIHRoZSBudW1iZXIgZnJvbSB0aGUgdXJsIHBhcmFtc1xuICAgICAgICBjb25zdCB1cmxQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpO1xuICAgICAgICBpZiAoIXVzZVVybFBhcmFtcyB8fCAhdXJsUGFyYW1zLmhhcyh0aGlzLmlkKSkge1xuICAgICAgICAgICAgdGhpcy5udW1iZXIgPSBkZWZhdWx0TnVtYmVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgcGFyc2VkVmFsdWUgPSBOdW1iZXIucGFyc2VJbnQodXJsUGFyYW1zLmdldCh0aGlzLmlkKSk7XG4gICAgICAgICAgICB0aGlzLm51bWJlciA9IE51bWJlci5pc05hTihwYXJzZWRWYWx1ZSlcbiAgICAgICAgICAgICAgICA/IGRlZmF1bHROdW1iZXJcbiAgICAgICAgICAgICAgICA6IHBhcnNlZFZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudXNlVXJsUGFyYW1zID0gdXNlVXJsUGFyYW1zO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBlcnNpc3QgdGhlIHNldHRpbmcgdmFsdWUgaW4gVVJMLlxuICAgICAqL1xuICAgIHB1YmxpYyB1cGRhdGVVUkxQYXJhbXMoKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLnVzZVVybFBhcmFtcykge1xuICAgICAgICAgICAgLy8gc2V0IHVybCBwYXJhbXMgbGlrZSA/aWQ9bnVtYmVyXG4gICAgICAgICAgICBjb25zdCB1cmxQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpO1xuICAgICAgICAgICAgdXJsUGFyYW1zLnNldCh0aGlzLmlkLCB0aGlzLm51bWJlci50b1N0cmluZygpKTtcbiAgICAgICAgICAgIHdpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZShcbiAgICAgICAgICAgICAgICB7fSxcbiAgICAgICAgICAgICAgICAnJyxcbiAgICAgICAgICAgICAgICB1cmxQYXJhbXMudG9TdHJpbmcoKSAhPT0gJydcbiAgICAgICAgICAgICAgICAgICAgPyBgJHtsb2NhdGlvbi5wYXRobmFtZX0/JHt1cmxQYXJhbXN9YFxuICAgICAgICAgICAgICAgICAgICA6IGAke2xvY2F0aW9uLnBhdGhuYW1lfWBcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIG51bWJlciB2YWx1ZSAod2lsbCBiZSBjbGFtcGVkIHdpdGhpbiByYW5nZSkuXG4gICAgICovXG4gICAgcHVibGljIHNldCBudW1iZXIobmV3TnVtYmVyOiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHRoaXMuY2xhbXAobmV3TnVtYmVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyBUaGUgbnVtYmVyIHN0b3JlZC5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0IG51bWJlcigpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZSBhcyBudW1iZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2xhbXBzIGEgbnVtYmVyIGJldHdlZW4gdGhlIG1pbiBhbmQgbWF4IHZhbHVlcyAoaW5jbHVzaXZlKS5cbiAgICAgKiBAcGFyYW0gaW5OdW1iZXIgVGhlIG51bWJlciB0byBjbGFtcC5cbiAgICAgKiBAcmV0dXJucyBUaGUgY2xhbXBlZCBudW1iZXIuXG4gICAgICovXG4gICAgcHVibGljIGNsYW1wKGluTnVtYmVyOiBudW1iZXIpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gTWF0aC5tYXgoTWF0aC5taW4odGhpcy5fbWF4LCBpbk51bWJlciksIHRoaXMuX21pbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbWluaW11bSB2YWx1ZVxuICAgICAqIEByZXR1cm5zIFRoZSBtaW5pbXVtIHZhbHVlXG4gICAgICovXG4gICAgcHVibGljIGdldCBtaW4oKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX21pbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBtYXhpbXVtIHZhbHVlXG4gICAgICogQHJldHVybnMgVGhlIG1heGltdW0gdmFsdWVcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0IG1heCgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5fbWF4O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZCBhIGNoYW5nZSBsaXN0ZW5lciB0byB0aGUgbnVtYmVyIG9iamVjdC5cbiAgICAgKi9cbiAgICBwdWJsaWMgYWRkT25DaGFuZ2VkTGlzdGVuZXIob25DaGFuZ2VkRnVuYzogKG5ld051bWJlcjogbnVtYmVyKSA9PiB2b2lkKSB7XG4gICAgICAgIHRoaXMub25DaGFuZ2UgPSBvbkNoYW5nZWRGdW5jO1xuICAgIH1cbn1cbiIsIi8vIENvcHlyaWdodCBFcGljIEdhbWVzLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG5cbmltcG9ydCB0eXBlIHsgT3B0aW9uUGFyYW1ldGVyc0lkcyB9IGZyb20gJy4vQ29uZmlnJztcbmltcG9ydCB7IFNldHRpbmdCYXNlIH0gZnJvbSAnLi9TZXR0aW5nQmFzZSc7XG5cbi8qKlxuICogQW4gT3B0aW9uIHNldHRpbmcgb2JqZWN0IHdpdGggYSB0ZXh0IGxhYmVsLiBBbGxvd3MgeW91IHRvIHNwZWNpZnkgYW4gYXJyYXkgb2Ygb3B0aW9ucyBhbmQgc2VsZWN0IG9uZSBvZiB0aGVtLlxuICovXG5leHBvcnQgY2xhc3MgU2V0dGluZ09wdGlvbjxcbiAgICBDdXN0b21JZHMgZXh0ZW5kcyBzdHJpbmcgPSBPcHRpb25QYXJhbWV0ZXJzSWRzXG4+IGV4dGVuZHMgU2V0dGluZ0Jhc2Uge1xuICAgIGlkOiBPcHRpb25QYXJhbWV0ZXJzSWRzIHwgQ3VzdG9tSWRzO1xuICAgIG9uQ2hhbmdlRW1pdDogKGNoYW5nZWRWYWx1ZTogc3RyaW5nKSA9PiB2b2lkO1xuICAgIF9vcHRpb25zOiBBcnJheTxzdHJpbmc+O1xuICAgIHVzZVVybFBhcmFtczogYm9vbGVhbjtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBpZDogT3B0aW9uUGFyYW1ldGVyc0lkcyB8IEN1c3RvbUlkcyxcbiAgICAgICAgbGFiZWw6IHN0cmluZyxcbiAgICAgICAgZGVzY3JpcHRpb246IHN0cmluZyxcbiAgICAgICAgZGVmYXVsdFRleHRWYWx1ZTogc3RyaW5nLFxuICAgICAgICBvcHRpb25zOiBBcnJheTxzdHJpbmc+LFxuICAgICAgICB1c2VVcmxQYXJhbXM6IGJvb2xlYW4sXG5cdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1lbXB0eS1mdW5jdGlvblxuXHRcdGRlZmF1bHRPbkNoYW5nZUxpc3RlbmVyOiAoY2hhbmdlZFZhbHVlOiB1bmtub3duLCBzZXR0aW5nOiBTZXR0aW5nQmFzZSkgPT4gdm9pZCA9ICgpID0+IHsgLyogRG8gbm90aGluZywgdG8gYmUgb3ZlcnJpZGRlbi4gKi8gfVxuICAgICkge1xuICAgICAgICBzdXBlcihpZCwgbGFiZWwsIGRlc2NyaXB0aW9uLCBbZGVmYXVsdFRleHRWYWx1ZSwgZGVmYXVsdFRleHRWYWx1ZV0sIGRlZmF1bHRPbkNoYW5nZUxpc3RlbmVyKTtcblxuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICBjb25zdCB1cmxQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpO1xuICAgICAgICBjb25zdCBzdHJpbmdUb01hdGNoOiBzdHJpbmcgPVxuICAgICAgICAgICAgdXNlVXJsUGFyYW1zICYmIHVybFBhcmFtcy5oYXModGhpcy5pZClcbiAgICAgICAgICAgICAgICA/IHRoaXMuZ2V0VXJsUGFyYW1UZXh0KClcbiAgICAgICAgICAgICAgICA6IGRlZmF1bHRUZXh0VmFsdWU7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWQgPSBzdHJpbmdUb01hdGNoO1xuICAgICAgICB0aGlzLnVzZVVybFBhcmFtcyA9IHVzZVVybFBhcmFtcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQYXJzZSB0aGUgdGV4dCB2YWx1ZSBmcm9tIHRoZSB1cmwgcGFyYW1ldGVycy5cbiAgICAgKiBAcmV0dXJucyBUaGUgdGV4dCB2YWx1ZSBwYXJzZWQgZnJvbSB0aGUgdXJsIGlmIHRoZSB1cmwgcGFyYW1ldGVycyBjb250YWlucyAvP2lkPXZhbHVlLCBidXQgZW1wdHkgc3RyaW5nIGlmIGp1c3QgLz9pZCBvciBubyB1cmwgcGFyYW0gZm91bmQuXG4gICAgICovXG4gICAgZ2V0VXJsUGFyYW1UZXh0KCk6IHN0cmluZyB7XG4gICAgICAgIGNvbnN0IHVybFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMod2luZG93LmxvY2F0aW9uLnNlYXJjaCk7XG4gICAgICAgIGlmICh1cmxQYXJhbXMuaGFzKHRoaXMuaWQpKSB7XG4gICAgICAgICAgICByZXR1cm4gdXJsUGFyYW1zLmdldCh0aGlzLmlkKSA/PyAnJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGVyc2lzdCB0aGUgc2V0dGluZyB2YWx1ZSBpbiBVUkwuXG4gICAgICovXG4gICAgcHVibGljIHVwZGF0ZVVSTFBhcmFtcygpIHtcbiAgICAgICAgaWYgKHRoaXMudXNlVXJsUGFyYW1zKSB7XG4gICAgICAgICAgICAvLyBzZXQgdXJsIHBhcmFtc1xuICAgICAgICAgICAgY29uc3QgdXJsUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh3aW5kb3cubG9jYXRpb24uc2VhcmNoKTtcbiAgICAgICAgICAgIHVybFBhcmFtcy5zZXQodGhpcy5pZCwgdGhpcy5zZWxlY3RlZCk7XG4gICAgICAgICAgICB3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUoXG4gICAgICAgICAgICAgICAge30sXG4gICAgICAgICAgICAgICAgJycsXG4gICAgICAgICAgICAgICAgdXJsUGFyYW1zLnRvU3RyaW5nKCkgIT09ICcnXG4gICAgICAgICAgICAgICAgICAgID8gYCR7bG9jYXRpb24ucGF0aG5hbWV9PyR7dXJsUGFyYW1zfWBcbiAgICAgICAgICAgICAgICAgICAgOiBgJHtsb2NhdGlvbi5wYXRobmFtZX1gXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkIGEgY2hhbmdlIGxpc3RlbmVyIHRvIHRoZSBzZWxlY3QgZWxlbWVudC5cbiAgICAgKi9cbiAgICBwdWJsaWMgYWRkT25DaGFuZ2VkTGlzdGVuZXIob25DaGFuZ2VkRnVuYzogKG5ld1ZhbHVlOiBzdHJpbmcpID0+IHZvaWQpIHtcbiAgICAgICAgdGhpcy5vbkNoYW5nZSA9IG9uQ2hhbmdlZEZ1bmM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybnMgQWxsIGF2YWlsYWJsZSBvcHRpb25zIGFzIGFuIGFycmF5XG4gICAgICovXG4gICAgcHVibGljIGdldCBvcHRpb25zKCk6IEFycmF5PHN0cmluZz4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fb3B0aW9ucztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXQgb3B0aW9uc1xuICAgICAqIEBwYXJhbSB2YWx1ZXMgQXJyYXkgb2Ygb3B0aW9uc1xuICAgICAqL1xuICAgIHB1YmxpYyBzZXQgb3B0aW9ucyh2YWx1ZXM6IEFycmF5PHN0cmluZz4pIHtcbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9IHZhbHVlcztcbiAgICAgICAgdGhpcy5vbkNoYW5nZUVtaXQodGhpcy5zZWxlY3RlZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybnMgU2VsZWN0ZWQgb3B0aW9uIGFzIGEgc3RyaW5nXG4gICAgICovXG4gICAgcHVibGljIGdldCBzZWxlY3RlZCgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZSBhcyBzdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0IHNlbGVjdGVkIG9wdGlvbiBpZiBpdCBtYXRjaGVzIG9uZSBvZiB0aGUgYXZhaWxhYmxlIG9wdGlvbnNcbiAgICAgKiBAcGFyYW0gdmFsdWUgU2VsZWN0ZWQgb3B0aW9uXG4gICAgICovXG4gICAgcHVibGljIHNldCBzZWxlY3RlZCh2YWx1ZTogc3RyaW5nKSB7XG4gICAgICAgIC8vIEEgdXNlciBtYXkgbm90IHNwZWNpZnkgdGhlIGZ1bGwgcG9zc2libGUgdmFsdWUgc28gd2UgaW5zdGVhZCB1c2UgdGhlIGNsb3Nlc3QgbWF0Y2guXG4gICAgICAgIC8vIGVnID94eHg9SDI2NCB3b3VsZCBzZWxlY3QgJ0gyNjQgbGV2ZWwtYXN5bW1ldHJ5LWFsbG93ZWQ9MTtwYWNrZXRpemF0aW9uLW1vZGU9MTtwcm9maWxlLWxldmVsLWlkPTQyMDAxZidcbiAgICAgICAgY29uc3QgZmlsdGVyZWRMaXN0ID0gdGhpcy5vcHRpb25zLmZpbHRlcihcbiAgICAgICAgICAgIChvcHRpb246IHN0cmluZykgPT4gb3B0aW9uLmluZGV4T2YodmFsdWUpICE9PSAtMVxuICAgICAgICApO1xuICAgICAgICBpZiAoZmlsdGVyZWRMaXN0Lmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IGZpbHRlcmVkTGlzdFswXTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIi8vIENvcHlyaWdodCBFcGljIEdhbWVzLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG5cbmltcG9ydCB0eXBlIHsgVGV4dFBhcmFtZXRlcnNJZHMgfSBmcm9tICcuL0NvbmZpZyc7XG5pbXBvcnQgeyBTZXR0aW5nQmFzZSB9IGZyb20gJy4vU2V0dGluZ0Jhc2UnO1xuXG4vKipcbiAqIEEgdGV4dCBzZXR0aW5nIG9iamVjdCB3aXRoIGEgdGV4dCBsYWJlbC5cbiAqL1xuZXhwb3J0IGNsYXNzIFNldHRpbmdUZXh0PFxuICAgIEN1c3RvbUlkcyBleHRlbmRzIHN0cmluZyA9IFRleHRQYXJhbWV0ZXJzSWRzXG4+IGV4dGVuZHMgU2V0dGluZ0Jhc2Uge1xuICAgIGlkOiBUZXh0UGFyYW1ldGVyc0lkcyB8IEN1c3RvbUlkcztcbiAgICBvbkNoYW5nZUVtaXQ6IChjaGFuZ2VkVmFsdWU6IHN0cmluZykgPT4gdm9pZDtcbiAgICB1c2VVcmxQYXJhbXM6IGJvb2xlYW47XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgaWQ6IFRleHRQYXJhbWV0ZXJzSWRzIHwgQ3VzdG9tSWRzLFxuICAgICAgICBsYWJlbDogc3RyaW5nLFxuICAgICAgICBkZXNjcmlwdGlvbjogc3RyaW5nLFxuICAgICAgICBkZWZhdWx0VGV4dFZhbHVlOiBzdHJpbmcsXG4gICAgICAgIHVzZVVybFBhcmFtczogYm9vbGVhbixcblx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWVtcHR5LWZ1bmN0aW9uXG5cdFx0ZGVmYXVsdE9uQ2hhbmdlTGlzdGVuZXI6IChjaGFuZ2VkVmFsdWU6IHVua25vd24sIHNldHRpbmc6IFNldHRpbmdCYXNlKSA9PiB2b2lkID0gKCkgPT4geyAvKiBEbyBub3RoaW5nLCB0byBiZSBvdmVycmlkZGVuLiAqLyB9XG4gICAgKSB7XG4gICAgICAgIHN1cGVyKGlkLCBsYWJlbCwgZGVzY3JpcHRpb24sIGRlZmF1bHRUZXh0VmFsdWUsIGRlZmF1bHRPbkNoYW5nZUxpc3RlbmVyKTtcblxuICAgICAgICBjb25zdCB1cmxQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpO1xuICAgICAgICBpZiAoIXVzZVVybFBhcmFtcyB8fCAhdXJsUGFyYW1zLmhhcyh0aGlzLmlkKSkge1xuICAgICAgICAgICAgdGhpcy50ZXh0ID0gZGVmYXVsdFRleHRWYWx1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHBhcnNlIGZsYWcgZnJvbSB1cmwgcGFyYW1ldGVyc1xuICAgICAgICAgICAgY29uc3QgdXJsUGFyYW1GbGFnID0gdGhpcy5nZXRVcmxQYXJhbVRleHQoKTtcbiAgICAgICAgICAgIHRoaXMudGV4dCA9IHVybFBhcmFtRmxhZztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnVzZVVybFBhcmFtcyA9IHVzZVVybFBhcmFtcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQYXJzZSB0aGUgdGV4dCB2YWx1ZSBmcm9tIHRoZSB1cmwgcGFyYW1ldGVycy5cbiAgICAgKiBAcmV0dXJucyBUaGUgdGV4dCB2YWx1ZSBwYXJzZWQgZnJvbSB0aGUgdXJsIGlmIHRoZSB1cmwgcGFyYW1ldGVycyBjb250YWlucyAvP2lkPXZhbHVlLCBidXQgZW1wdHkgc3RyaW5nIGlmIGp1c3QgLz9pZCBvciBubyB1cmwgcGFyYW0gZm91bmQuXG4gICAgICovXG4gICAgZ2V0VXJsUGFyYW1UZXh0KCk6IHN0cmluZyB7XG4gICAgICAgIGNvbnN0IHVybFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMod2luZG93LmxvY2F0aW9uLnNlYXJjaCk7XG4gICAgICAgIGlmICh1cmxQYXJhbXMuaGFzKHRoaXMuaWQpKSB7XG4gICAgICAgICAgICByZXR1cm4gdXJsUGFyYW1zLmdldCh0aGlzLmlkKSA/PyAnJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGVyc2lzdCB0aGUgc2V0dGluZyB2YWx1ZSBpbiBVUkwuXG4gICAgICovXG4gICAgcHVibGljIHVwZGF0ZVVSTFBhcmFtcygpIHtcbiAgICAgICAgaWYgKHRoaXMudXNlVXJsUGFyYW1zKSB7XG4gICAgICAgICAgICAvLyBzZXQgdXJsIHBhcmFtc1xuICAgICAgICAgICAgY29uc3QgdXJsUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh3aW5kb3cubG9jYXRpb24uc2VhcmNoKTtcbiAgICAgICAgICAgIHVybFBhcmFtcy5zZXQodGhpcy5pZCwgdGhpcy50ZXh0KTtcbiAgICAgICAgICAgIHdpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZShcbiAgICAgICAgICAgICAgICB7fSxcbiAgICAgICAgICAgICAgICAnJyxcbiAgICAgICAgICAgICAgICB1cmxQYXJhbXMudG9TdHJpbmcoKSAhPT0gJydcbiAgICAgICAgICAgICAgICAgICAgPyBgJHtsb2NhdGlvbi5wYXRobmFtZX0/JHt1cmxQYXJhbXN9YFxuICAgICAgICAgICAgICAgICAgICA6IGAke2xvY2F0aW9uLnBhdGhuYW1lfWBcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIFRoZSBzZXR0aW5nJ3MgdmFsdWUuXG4gICAgICovXG4gICAgcHVibGljIGdldCB0ZXh0KCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlIGFzIHN0cmluZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGUgdGhlIHNldHRpbmcncyBzdG9yZWQgdmFsdWUuXG4gICAgICogQHBhcmFtIGluVmFsdWUgVGhlIG5ldyB2YWx1ZSBmb3IgdGhlIHNldHRpbmcuXG4gICAgICovXG4gICAgcHVibGljIHNldCB0ZXh0KGluVmFsdWU6IHN0cmluZykge1xuICAgICAgICB0aGlzLnZhbHVlID0gaW5WYWx1ZTtcbiAgICB9XG59XG4iLCIvLyBDb3B5cmlnaHQgRXBpYyBHYW1lcywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tICcuLi9Mb2dnZXIvTG9nZ2VyJztcblxuLyoqXG4gKiBIYW5kbGVzIHRoZSBTZW5kaW5nIGFuZCBSZWNlaXZpbmcgb2YgbWVzc2FnZXMgdG8gdGhlIFVFIEluc3RhbmNlIHZpYSB0aGUgRGF0YSBDaGFubmVsXG4gKi9cbmV4cG9ydCBjbGFzcyBEYXRhQ2hhbm5lbENvbnRyb2xsZXIge1xuICAgIGRhdGFDaGFubmVsOiBSVENEYXRhQ2hhbm5lbDtcbiAgICBwZWVyQ29ubmVjdGlvbjogUlRDUGVlckNvbm5lY3Rpb247XG4gICAgZGF0YWNoYW5uZWxPcHRpb25zOiBSVENEYXRhQ2hhbm5lbEluaXQ7XG4gICAgbGFiZWw6IHN0cmluZztcbiAgICBpc1JlY2VpdmluZ0ZyZWV6ZUZyYW1lID0gZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiByZXR1cm4gdGhlIGN1cnJlbnQgc3RhdGUgb2YgYSBkYXRhY2hhbm5lbCBjb250cm9sbGVyIGluc3RhbmNlXG4gICAgICogQHJldHVybnMgdGhlIGN1cnJlbnQgRGF0YUNoYW5uZWxDb250cm9sbGVyIGluc3RhbmNlXG4gICAgICovXG4gICAgZ2V0RGF0YUNoYW5uZWxJbnN0YW5jZSgpOiBEYXRhQ2hhbm5lbENvbnRyb2xsZXIge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUbyBDcmVhdGUgYW5kIFNldCB1cCBhIERhdGEgQ2hhbm5lbFxuICAgICAqIEBwYXJhbSBwZWVyQ29ubmVjdGlvbiAtIFRoZSBSVEMgUGVlciBDb25uZWN0aW9uXG4gICAgICogQHBhcmFtIGxhYmVsIC0gTGFiZWwgb2YgdGhlIERhdGEgQ2hhbm5lbFxuICAgICAqIEBwYXJhbSBkYXRhY2hhbm5lbE9wdGlvbnMgLSBPcHRpb25hbCBSVEMgRGF0YUNoYW5uZWwgb3B0aW9uc1xuICAgICAqL1xuICAgIGNyZWF0ZURhdGFDaGFubmVsKFxuICAgICAgICBwZWVyQ29ubmVjdGlvbjogUlRDUGVlckNvbm5lY3Rpb24sXG4gICAgICAgIGxhYmVsOiBzdHJpbmcsXG4gICAgICAgIGRhdGFjaGFubmVsT3B0aW9ucz86IFJUQ0RhdGFDaGFubmVsSW5pdFxuICAgICkge1xuICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uID0gcGVlckNvbm5lY3Rpb247XG4gICAgICAgIHRoaXMubGFiZWwgPSBsYWJlbDtcbiAgICAgICAgdGhpcy5kYXRhY2hhbm5lbE9wdGlvbnMgPSBkYXRhY2hhbm5lbE9wdGlvbnM7XG4gICAgICAgIGlmIChkYXRhY2hhbm5lbE9wdGlvbnMgPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5kYXRhY2hhbm5lbE9wdGlvbnMgPSB7fSBhcyBSVENEYXRhQ2hhbm5lbEluaXQ7XG4gICAgICAgICAgICB0aGlzLmRhdGFjaGFubmVsT3B0aW9ucy5vcmRlcmVkID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZGF0YUNoYW5uZWwgPSB0aGlzLnBlZXJDb25uZWN0aW9uLmNyZWF0ZURhdGFDaGFubmVsKFxuICAgICAgICAgICAgdGhpcy5sYWJlbCxcbiAgICAgICAgICAgIHRoaXMuZGF0YWNoYW5uZWxPcHRpb25zXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuc2V0dXBEYXRhQ2hhbm5lbCgpO1xuICAgIH1cblxuICAgIHNldHVwRGF0YUNoYW5uZWwoKSB7XG4gICAgICAgIC8vV2UgV2FudCBhbiBBcnJheSBCdWZmZXIgbm90IGEgYmxvYlxuICAgICAgICB0aGlzLmRhdGFDaGFubmVsLmJpbmFyeVR5cGUgPSAnYXJyYXlidWZmZXInO1xuICAgICAgICB0aGlzLmRhdGFDaGFubmVsLm9ub3BlbiA9IChldjogRXZlbnQpID0+IHRoaXMuaGFuZGxlT25PcGVuKGV2KTtcbiAgICAgICAgdGhpcy5kYXRhQ2hhbm5lbC5vbmNsb3NlID0gKGV2OiBFdmVudCkgPT4gdGhpcy5oYW5kbGVPbkNsb3NlKGV2KTtcbiAgICAgICAgdGhpcy5kYXRhQ2hhbm5lbC5vbm1lc3NhZ2UgPSAoZXY6IE1lc3NhZ2VFdmVudCkgPT5cbiAgICAgICAgICAgIHRoaXMuaGFuZGxlT25NZXNzYWdlKGV2KTtcbiAgICAgICAgdGhpcy5kYXRhQ2hhbm5lbC5vbmVycm9yID0gKGV2OiBNZXNzYWdlRXZlbnQpID0+IHRoaXMuaGFuZGxlT25FcnJvcihldik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGFuZGxlcyB3aGVuIHRoZSBEYXRhIENoYW5uZWwgaXMgb3BlbmVkXG4gICAgICovXG4gICAgaGFuZGxlT25PcGVuKGV2OiBFdmVudCkge1xuICAgICAgICBMb2dnZXIuTG9nKFxuICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcbiAgICAgICAgICAgIGBEYXRhIENoYW5uZWwgKCR7dGhpcy5sYWJlbH0pIG9wZW5lZC5gLFxuICAgICAgICAgICAgN1xuICAgICAgICApO1xuICAgICAgICB0aGlzLm9uT3Blbih0aGlzLmRhdGFDaGFubmVsPy5sYWJlbCwgZXYpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhhbmRsZXMgd2hlbiB0aGUgRGF0YSBDaGFubmVsIGlzIGNsb3NlZFxuICAgICAqL1xuICAgIGhhbmRsZU9uQ2xvc2UoZXY6IEV2ZW50KSB7XG4gICAgICAgIExvZ2dlci5Mb2coXG4gICAgICAgICAgICBMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLFxuICAgICAgICAgICAgYERhdGEgQ2hhbm5lbCAoJHt0aGlzLmxhYmVsfSkgY2xvc2VkLmAsXG4gICAgICAgICAgICA3XG4gICAgICAgICk7XG4gICAgICAgIHRoaXMub25DbG9zZSh0aGlzLmRhdGFDaGFubmVsPy5sYWJlbCwgZXYpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhhbmRsZXMgd2hlbiBhIG1lc3NhZ2UgaXMgcmVjZWl2ZWRcbiAgICAgKiBAcGFyYW0gZXZlbnQgLSBNZXNzYWdlIEV2ZW50XG4gICAgICovXG4gICAgaGFuZGxlT25NZXNzYWdlKGV2ZW50OiBNZXNzYWdlRXZlbnQpIHtcbiAgICAgICAgLy8gSGlnaGVyIGxvZyBsZXZlbCB0byBwcmV2ZW50IGxvZyBzcGFtIHdpdGggbWVzc2FnZXMgcmVjZWl2ZWRcbiAgICAgICAgTG9nZ2VyLkxvZyhcbiAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXG4gICAgICAgICAgICBgRGF0YSBDaGFubmVsICgke3RoaXMubGFiZWx9KSBtZXNzYWdlOiAke2V2ZW50fWAsXG4gICAgICAgICAgICA4XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGFuZGxlcyB3aGVuIGFuIGVycm9yIGlzIHRocm93blxuICAgICAqIEBwYXJhbSBldmVudCAtIEVycm9yIEV2ZW50XG4gICAgICovXG4gICAgaGFuZGxlT25FcnJvcihldmVudDogTWVzc2FnZUV2ZW50KSB7XG4gICAgICAgIExvZ2dlci5Mb2coXG4gICAgICAgICAgICBMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLFxuICAgICAgICAgICAgYERhdGEgQ2hhbm5lbCAoJHt0aGlzLmxhYmVsfSkgZXJyb3I6ICR7ZXZlbnR9YCxcbiAgICAgICAgICAgIDdcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5vbkVycm9yKHRoaXMuZGF0YUNoYW5uZWw/LmxhYmVsLCBldmVudCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT3ZlcnJpZGUgdG8gcmVnaXN0ZXIgb25PcGVuIGhhbmRsZXJcbiAgICAgKiBAcGFyYW0gbGFiZWwgRGF0YSBjaGFubmVsIGxhYmVsIChcImRhdGFjaGFubmVsXCIsIFwic2VuZC1kYXRhY2hhbm5lbFwiLCBcInJlY3YtZGF0YWNoYW5uZWxcIilcbiAgICAgKiBAcGFyYW0gZXYgZXZlbnRcbiAgICAgKi9cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG4gICAgb25PcGVuKGxhYmVsOiBzdHJpbmcsIGV2OiBFdmVudCkge1xuICAgICAgICAvLyBlbXB0eSBkZWZhdWx0IGltcGxlbWVudGF0aW9uXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT3ZlcnJpZGUgdG8gcmVnaXN0ZXIgb25DbG9zZSBoYW5kbGVyXG4gICAgICogQHBhcmFtIGxhYmVsIERhdGEgY2hhbm5lbCBsYWJlbCAoXCJkYXRhY2hhbm5lbFwiLCBcInNlbmQtZGF0YWNoYW5uZWxcIiwgXCJyZWN2LWRhdGFjaGFubmVsXCIpXG4gICAgICogQHBhcmFtIGV2IGV2ZW50XG4gICAgICovXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuICAgIG9uQ2xvc2UobGFiZWw6IHN0cmluZywgZXY6IEV2ZW50KSB7XG4gICAgICAgIC8vIGVtcHR5IGRlZmF1bHQgaW1wbGVtZW50YXRpb25cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPdmVycmlkZSB0byByZWdpc3RlciBvbkVycm9yIGhhbmRsZXJcbiAgICAgKiBAcGFyYW0gbGFiZWwgRGF0YSBjaGFubmVsIGxhYmVsIChcImRhdGFjaGFubmVsXCIsIFwic2VuZC1kYXRhY2hhbm5lbFwiLCBcInJlY3YtZGF0YWNoYW5uZWxcIilcbiAgICAgKiBAcGFyYW0gZXYgZXZlbnRcbiAgICAgKi9cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG4gICAgb25FcnJvcihsYWJlbDogc3RyaW5nLCBldjogRXZlbnQpIHtcbiAgICAgICAgLy8gZW1wdHkgZGVmYXVsdCBpbXBsZW1lbnRhdGlvblxuICAgIH1cbn1cbiIsIi8vIENvcHlyaWdodCBFcGljIEdhbWVzLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG5cbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJy4uL0xvZ2dlci9Mb2dnZXInO1xuaW1wb3J0IHsgRGF0YUNoYW5uZWxDb250cm9sbGVyIH0gZnJvbSAnLi9EYXRhQ2hhbm5lbENvbnRyb2xsZXInO1xuXG4vKipcbiAqIEEgY2xhc3MgZm9yIHNlbmRpbmcgZGF0YSBjaGFubmVsIG1lc3NhZ2VzXG4gKi9cbmV4cG9ydCBjbGFzcyBEYXRhQ2hhbm5lbFNlbmRlciB7XG4gICAgZGF0YUNoYW5uZWxQcm92aWRlcjogRGF0YUNoYW5uZWxDb250cm9sbGVyO1xuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIGRhdGFDaGFubmVsUHJvdmlkZXIgLSBEYXRhIGNoYW5uZWwgb2JqZWN0IHR5cGVcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihkYXRhQ2hhbm5lbFByb3ZpZGVyOiBEYXRhQ2hhbm5lbENvbnRyb2xsZXIpIHtcbiAgICAgICAgdGhpcy5kYXRhQ2hhbm5lbFByb3ZpZGVyID0gZGF0YUNoYW5uZWxQcm92aWRlcjtcbiAgICB9XG5cbiAgICBjYW5TZW5kKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgdGhpcy5kYXRhQ2hhbm5lbFByb3ZpZGVyLmdldERhdGFDaGFubmVsSW5zdGFuY2UoKS5kYXRhQ2hhbm5lbCAhPT1cbiAgICAgICAgICAgICAgICB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIHRoaXMuZGF0YUNoYW5uZWxQcm92aWRlci5nZXREYXRhQ2hhbm5lbEluc3RhbmNlKCkuZGF0YUNoYW5uZWxcbiAgICAgICAgICAgICAgICAucmVhZHlTdGF0ZSA9PSAnb3BlbidcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZW5kIERhdGEgb3ZlciB0aGUgRGF0YSBjaGFubmVsIHRvIHRoZSBVRSBJbnN0YW5jZVxuICAgICAqIEBwYXJhbSBkYXRhIC0gTWVzc2FnZSBEYXRhIEFycmF5IEJ1ZmZlclxuICAgICAqL1xuICAgIHNlbmREYXRhKGRhdGE6IEFycmF5QnVmZmVyKSB7XG4gICAgICAgIC8vIHJlc2V0IHRoZSBhZmsgaW5hY3Rpdml0eVxuICAgICAgICBjb25zdCBkYXRhQ2hhbm5lbEluc3RhbmNlID1cbiAgICAgICAgICAgIHRoaXMuZGF0YUNoYW5uZWxQcm92aWRlci5nZXREYXRhQ2hhbm5lbEluc3RhbmNlKCk7XG5cbiAgICAgICAgaWYgKGRhdGFDaGFubmVsSW5zdGFuY2UuZGF0YUNoYW5uZWwucmVhZHlTdGF0ZSA9PSAnb3BlbicpIHtcbiAgICAgICAgICAgIGRhdGFDaGFubmVsSW5zdGFuY2UuZGF0YUNoYW5uZWwuc2VuZChkYXRhKTtcbiAgICAgICAgICAgIExvZ2dlci5Mb2coXG4gICAgICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcbiAgICAgICAgICAgICAgICBgTWVzc2FnZSBTZW50OiAke25ldyBVaW50OEFycmF5KGRhdGEpfWAsXG4gICAgICAgICAgICAgICAgNlxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMucmVzZXRBZmtXYXJuaW5nVGltZXJPbkRhdGFTZW5kKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBMb2dnZXIuRXJyb3IoXG4gICAgICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcbiAgICAgICAgICAgICAgICBgTWVzc2FnZSBGYWlsZWQ6ICR7bmV3IFVpbnQ4QXJyYXkoZGF0YSl9YFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFuIG92ZXJyaWRlIG1ldGhvZCBmb3IgcmVzZXR0aW5nIHRoZSBBZmsgd2FybmluZyB0aW1lciB3aGVuIGRhdGEgaXMgc2VudCBvdmVyIHRoZSBkYXRhIGNoYW5uZWxcbiAgICAgKi9cbiAgICByZXNldEFma1dhcm5pbmdUaW1lck9uRGF0YVNlbmQoKSB7XG4gICAgICAgIC8vIEJhc2UgRnVuY3Rpb25hbGl0eTogRG8gTm90aGluZ1xuICAgIH1cbn1cbiIsIi8vIENvcHlyaWdodCBFcGljIEdhbWVzLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG5cbi8qKlxuICogTGF0ZW5jeSBUZXN0IFJlc3VsdHMgRGF0YVxuICovXG5leHBvcnQgY2xhc3MgSW5pdGlhbFNldHRpbmdzIHtcbiAgICBQaXhlbFN0cmVhbWluZ1NldHRpbmdzOiBQaXhlbFN0cmVhbWluZ1NldHRpbmdzO1xuICAgIEVuY29kZXJTZXR0aW5nczogRW5jb2RlclNldHRpbmdzO1xuICAgIFdlYlJUQ1NldHRpbmdzOiBXZWJSVENTZXR0aW5ncztcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLlBpeGVsU3RyZWFtaW5nU2V0dGluZ3MgPSBuZXcgUGl4ZWxTdHJlYW1pbmdTZXR0aW5ncygpO1xuICAgICAgICB0aGlzLkVuY29kZXJTZXR0aW5ncyA9IG5ldyBFbmNvZGVyU2V0dGluZ3MoKTtcbiAgICAgICAgdGhpcy5XZWJSVENTZXR0aW5ncyA9IG5ldyBXZWJSVENTZXR0aW5ncygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIHRoZSBGUFMgYW5kIE1heEZQUyBzdGF0cyBiZXR3ZWVuIDQuMjcgYW5kIDVcbiAgICAgKi9cbiAgICB1ZUNvbXBhdGlibGUoKSB7XG4gICAgICAgIGlmICh0aGlzLldlYlJUQ1NldHRpbmdzLk1heEZQUyAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLldlYlJUQ1NldHRpbmdzLkZQUyA9IHRoaXMuV2ViUlRDU2V0dGluZ3MuTWF4RlBTO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vKipcbiAqIEEgY2xhc3MgZm9yIGhhbmRsaW5nIFBpeGVsIFN0cmVhbWluZyBkZXRhaWxzXG4gKi9cbmV4cG9ydCBjbGFzcyBQaXhlbFN0cmVhbWluZ1NldHRpbmdzIHtcbiAgICBBbGxvd1BpeGVsU3RyZWFtaW5nQ29tbWFuZHM/OiBib29sZWFuO1xuICAgIERpc2FibGVMYXRlbmN5VGVzdD86IGJvb2xlYW47XG59XG5cbi8qKlxuICogQSBjbGFzcyBmb3IgaGFuZGxpbmcgZW5jb2RlciBzdGF0c1xuICovXG5leHBvcnQgY2xhc3MgRW5jb2RlclNldHRpbmdzIHtcbiAgICBUYXJnZXRCaXRyYXRlPzogbnVtYmVyO1xuICAgIE1heEJpdHJhdGU/OiBudW1iZXI7XG4gICAgTWluUVA/OiBudW1iZXI7XG4gICAgTWF4UVA/OiBudW1iZXI7XG4gICAgUmF0ZUNvbnRyb2w/OiAnQ0JSJyB8ICdWQlInIHwgJ0NvbnN0UVAnO1xuICAgIEZpbGxlckRhdGE/OiBib29sZWFuO1xuICAgIE11bHRpUGFzcz86ICdESVNBQkxFRCcgfCAnUVVBUlRFUicgfCAnRlVMTCc7XG59XG5cbi8qKlxuICogQSBjbGFzcyBmb3IgaGFuZGxpbmcgd2ViIHJ0YyBzdGF0c1xuICovXG5leHBvcnQgY2xhc3MgV2ViUlRDU2V0dGluZ3Mge1xuICAgIERlZ3JhZGF0aW9uUHJlZj86ICdCQUxBTkNFRCcgfCAnTUFJTlRBSU5fRlJBTUVSQVRFJyB8ICdNQUlOVEFJTl9SRVNPTFVUSU9OJztcbiAgICBNaW5CaXRyYXRlPzogbnVtYmVyO1xuICAgIE1heEJpdHJhdGU/OiBudW1iZXI7XG4gICAgTG93UVA/OiBudW1iZXI7XG4gICAgSGlnaFFQPzogbnVtYmVyO1xuICAgIC8vIFVFNC4yNyBjb21wYXRpYmxlXG4gICAgTWF4RlBTPzogbnVtYmVyO1xuICAgIC8vIFVFNSBjb21wYXRpYmxlXG4gICAgRlBTPzogbnVtYmVyO1xufVxuIiwiLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSAnLi4vTG9nZ2VyL0xvZ2dlcic7XG4vKipcbiAqIExhdGVuY3kgVGVzdCBSZXN1bHRzIERhdGFcbiAqL1xuZXhwb3J0IGNsYXNzIExhdGVuY3lUZXN0UmVzdWx0cyB7XG4gICAgLy9GaWVsZHMgU2V0IGZyb20gdGhlIGxhdGVuY3kgcGF5bG9hZCByZWdhcmRsZXNzIG9mIHZlcnNpb25cbiAgICBSZWNlaXB0VGltZU1zOiBudW1iZXIgPSBudWxsO1xuICAgIFRyYW5zbWlzc2lvblRpbWVNczogbnVtYmVyID0gbnVsbDtcblxuICAgIC8vRmllbGRzIFNldCBmcm9tIHRoZSBsYXRlbmN5IHBheWxvYWQgZnJvbSA0LjI3LjJcbiAgICBQcmVDYXB0dXJlVGltZU1zOiBudW1iZXIgPSBudWxsO1xuICAgIFBvc3RDYXB0dXJlVGltZU1zOiBudW1iZXIgPSBudWxsO1xuICAgIFByZUVuY29kZVRpbWVNczogbnVtYmVyID0gbnVsbDtcbiAgICBQb3N0RW5jb2RlVGltZU1zOiBudW1iZXIgPSBudWxsO1xuXG4gICAgLy9GaWVsZHMgU2V0IGZyb20gdGhlIGxhdGVuY3kgcGF5bG9hZCBmcm9tIDUuMFxuICAgIEVuY29kZU1zOiBudW1iZXIgPSBudWxsO1xuICAgIENhcHR1cmVUb1NlbmRNczogbnVtYmVyID0gbnVsbDtcblxuICAgIC8vRmllbGRzIFNldCB3aGVuIHByb2Nlc3NlZFxuICAgIHRlc3RTdGFydFRpbWVNcyA9IDA7XG4gICAgYnJvd3NlclJlY2VpcHRUaW1lTXMgPSAwO1xuXG4gICAgLy9GaWVsZHMgc2V0IGZyb20gY2FsY3VsYXRpb25zXG4gICAgbGF0ZW5jeUV4Y2x1ZGluZ0RlY29kZSA9IDA7XG4gICAgdGVzdER1cmF0aW9uID0gMDtcbiAgICAvL3VlTGF0ZW5jeTogbnVtYmVyID0gMDtcbiAgICBuZXR3b3JrTGF0ZW5jeSA9IDA7XG4gICAgYnJvd3NlclNlbmRMYXRlbmN5ID0gMDtcbiAgICBmcmFtZURpc3BsYXlEZWx0YVRpbWVNcyA9IDA7XG4gICAgZW5kVG9FbmRMYXRlbmN5ID0gMDtcbiAgICAvL3VlUGl4ZWxTdHJlYW1MYXRlbmN5OiBudW1iZXIgPSAwO1xuICAgIGVuY29kZUxhdGVuY3kgPSAwO1xuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgRGVsdGEgVGltZSBNaWxsaXNlY29uZHNcbiAgICAgKiBAcGFyYW0gRGVsdGFUaW1lTXMgLSBEZWx0YSBUaW1lIE1pbGxpc2Vjb25kc1xuICAgICAqL1xuICAgIHNldEZyYW1lRGlzcGxheURlbHRhVGltZShEZWx0YVRpbWVNczogbnVtYmVyKSB7XG4gICAgICAgIGlmICh0aGlzLmZyYW1lRGlzcGxheURlbHRhVGltZU1zID09IDApIHtcbiAgICAgICAgICAgIHRoaXMuZnJhbWVEaXNwbGF5RGVsdGFUaW1lTXMgPSBNYXRoLnJvdW5kKERlbHRhVGltZU1zKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFByb2Nlc3MgdGhlIGVuY29kZXIgdGltZXMgYW5kIHNldCB0aGVtXG4gICAgICovXG4gICAgcHJvY2Vzc0ZpZWxkcygpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgdGhpcy5FbmNvZGVNcyA9PSBudWxsICYmXG4gICAgICAgICAgICAodGhpcy5QcmVFbmNvZGVUaW1lTXMgIT0gbnVsbCB8fCB0aGlzLlBvc3RFbmNvZGVUaW1lTXMgIT0gbnVsbClcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBMb2dnZXIuTG9nKFxuICAgICAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXG4gICAgICAgICAgICAgICAgYFNldHRpbmcgRW5jb2RlIE1zIFxcbiAke3RoaXMuUG9zdEVuY29kZVRpbWVNc30gXFxuICR7dGhpcy5QcmVFbmNvZGVUaW1lTXN9YCxcbiAgICAgICAgICAgICAgICA2XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgdGhpcy5FbmNvZGVNcyA9IHRoaXMuUG9zdEVuY29kZVRpbWVNcyAtIHRoaXMuUHJlRW5jb2RlVGltZU1zO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgdGhpcy5DYXB0dXJlVG9TZW5kTXMgPT0gbnVsbCAmJlxuICAgICAgICAgICAgKHRoaXMuUHJlQ2FwdHVyZVRpbWVNcyAhPSBudWxsIHx8IHRoaXMuUG9zdENhcHR1cmVUaW1lTXMgIT0gbnVsbClcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBMb2dnZXIuTG9nKFxuICAgICAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXG4gICAgICAgICAgICAgICAgYFNldHRpbmcgQ2FwdHVyZVRvU2VuZE1zIE1zIFxcbiAke3RoaXMuUG9zdENhcHR1cmVUaW1lTXN9IFxcbiAke3RoaXMuUHJlQ2FwdHVyZVRpbWVNc31gLFxuICAgICAgICAgICAgICAgIDZcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aGlzLkNhcHR1cmVUb1NlbmRNcyA9XG4gICAgICAgICAgICAgICAgdGhpcy5Qb3N0Q2FwdHVyZVRpbWVNcyAtIHRoaXMuUHJlQ2FwdHVyZVRpbWVNcztcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIi8vIENvcHlyaWdodCBFcGljIEdhbWVzLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG5cbi8qKlxuICogQSBjbGFzcyBmb3IgbWFuYWdpbmcgdGhlIGZyZWV6ZSBmcmFtZSBvYmplY3RcbiAqL1xuZXhwb3J0IGNsYXNzIEZyZWV6ZUZyYW1lIHtcbiAgICBwcm90ZWN0ZWQgcm9vdERpdjogSFRNTEVsZW1lbnQ7XG4gICAgcHJvdGVjdGVkIHJvb3RFbGVtZW50OiBIVE1MRGl2RWxlbWVudDtcbiAgICBpbWFnZUVsZW1lbnQ6IEhUTUxJbWFnZUVsZW1lbnQ7XG4gICAgZnJlZXplRnJhbWVIZWlnaHQgPSAwO1xuICAgIGZyZWV6ZUZyYW1lV2lkdGggPSAwO1xuXG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0IGEgZnJlZXplIGZyYW1lXG4gICAgICogQHBhcmFtIHJvb3REaXYgdGhlIGRpdiB0aGF0IGEgZnJlZXplIGZyYW1lIGVsZW1lbnQgd2lsbCBiZSBpbmplY3RlZCBpbnRvXG4gICAgICovXG4gICAgY29uc3RydWN0b3Iocm9vdERpdjogSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgdGhpcy5yb290RGl2ID0gcm9vdERpdjtcblxuICAgICAgICAvLyBjcmVhdGUgdGhlIG92ZXJsYXlcbiAgICAgICAgdGhpcy5yb290RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICB0aGlzLnJvb3RFbGVtZW50LmlkID0gJ2ZyZWV6ZUZyYW1lJztcbiAgICAgICAgdGhpcy5yb290RWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICB0aGlzLnJvb3RFbGVtZW50LnN0eWxlLnBvaW50ZXJFdmVudHMgPSAnbm9uZSc7XG4gICAgICAgIHRoaXMucm9vdEVsZW1lbnQuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgICAgICB0aGlzLnJvb3RFbGVtZW50LnN0eWxlLnpJbmRleCA9ICcyMCc7XG5cbiAgICAgICAgLy8gY3JlYXRlIHRoZSBpbWFnZSBwbGFjZSBob2xkZXJcbiAgICAgICAgdGhpcy5pbWFnZUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcbiAgICAgICAgdGhpcy5pbWFnZUVsZW1lbnQuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuXG4gICAgICAgIC8vIGFwcGVuZCB0aGUgaW1hZ2UgaW50byB0aGUgcm9vdCBlbGVtZW50IGFuZCBhcHBlbmQgdGhlIGVsZW1lbnQgdG8gdGhlIHJvb3QgZGl2XG4gICAgICAgIHRoaXMucm9vdEVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5pbWFnZUVsZW1lbnQpO1xuICAgICAgICB0aGlzLnJvb3REaXYuYXBwZW5kQ2hpbGQodGhpcy5yb290RWxlbWVudCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBmcmVlemUgZnJhbWUgZWxlbWVudCBmb3Igc2hvd2luZ1xuICAgICAqL1xuICAgIHNldEVsZW1lbnRGb3JTaG93KCkge1xuICAgICAgICB0aGlzLnJvb3RFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldCB0aGUgZnJlZXplIGZyYW1lIGVsZW1lbnQgZm9yIGhpZGluZ1xuICAgICAqL1xuICAgIHNldEVsZW1lbnRGb3JIaWRlKCkge1xuICAgICAgICB0aGlzLnJvb3RFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXBkYXRlIHRoZSBmcmVlemUgZnJhbWVzIGltYWdlIHNvdXJjZVxuICAgICAqIEBwYXJhbSBqcGVnIC0gdGhlIGZyZWV6ZSBmcmFtZSBpbWFnZSBhcyBhIGJ5dGUgYXJyYXkgZGF0YVxuICAgICAqL1xuICAgIHVwZGF0ZUltYWdlRWxlbWVudFNvdXJjZShqcGVnOiBVaW50OEFycmF5KSB7XG4gICAgICAgIGNvbnN0IGJhc2U2NCA9IGJ0b2EoXG4gICAgICAgICAgICBqcGVnLnJlZHVjZSgoZGF0YSwgYnl0ZSkgPT4gZGF0YSArIFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZSksICcnKVxuICAgICAgICApO1xuICAgICAgICB0aGlzLmltYWdlRWxlbWVudC5zcmMgPSAnZGF0YTppbWFnZS9qcGVnO2Jhc2U2NCwnICsgYmFzZTY0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldCB0aGUgZGltZW5zaW9ucyBmb3IgdGhlIGZyZWV6ZSBmcmFtZSBmcm9tIHRoZSBlbGVtZW50IGFuZCByZXNpemUgaXRcbiAgICAgKi9cbiAgICBzZXREaW1lbnNpb25zRnJvbUVsZW1lbnRBbmRSZXNpemUoKSB7XG4gICAgICAgIHRoaXMuZnJlZXplRnJhbWVIZWlnaHQgPSB0aGlzLmltYWdlRWxlbWVudC5uYXR1cmFsSGVpZ2h0O1xuICAgICAgICB0aGlzLmZyZWV6ZUZyYW1lV2lkdGggPSB0aGlzLmltYWdlRWxlbWVudC5uYXR1cmFsV2lkdGg7XG4gICAgICAgIHRoaXMucmVzaXplKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVzaXplIGEgZnJlZXplIGZyYW1lIGVsZW1lbnRcbiAgICAgKi9cbiAgICByZXNpemUoKSB7XG4gICAgICAgIGlmICh0aGlzLmZyZWV6ZUZyYW1lV2lkdGggIT09IDAgJiYgdGhpcy5mcmVlemVGcmFtZUhlaWdodCAhPT0gMCkge1xuICAgICAgICAgICAgbGV0IGRpc3BsYXlXaWR0aCA9IDA7XG4gICAgICAgICAgICBsZXQgZGlzcGxheUhlaWdodCA9IDA7XG4gICAgICAgICAgICBsZXQgZGlzcGxheVRvcCA9IDA7XG4gICAgICAgICAgICBsZXQgZGlzcGxheUxlZnQgPSAwO1xuICAgICAgICAgICAgY29uc3QgcGFyZW50QXNwZWN0UmF0aW8gPVxuICAgICAgICAgICAgICAgIHRoaXMucm9vdERpdi5jbGllbnRXaWR0aCAvIHRoaXMucm9vdERpdi5jbGllbnRIZWlnaHQ7XG4gICAgICAgICAgICBjb25zdCB2aWRlb0FzcGVjdFJhdGlvID1cbiAgICAgICAgICAgICAgICB0aGlzLmZyZWV6ZUZyYW1lV2lkdGggLyB0aGlzLmZyZWV6ZUZyYW1lSGVpZ2h0O1xuICAgICAgICAgICAgaWYgKHBhcmVudEFzcGVjdFJhdGlvIDwgdmlkZW9Bc3BlY3RSYXRpbykge1xuICAgICAgICAgICAgICAgIGRpc3BsYXlXaWR0aCA9IHRoaXMucm9vdERpdi5jbGllbnRXaWR0aDtcbiAgICAgICAgICAgICAgICBkaXNwbGF5SGVpZ2h0ID0gTWF0aC5mbG9vcihcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yb290RGl2LmNsaWVudFdpZHRoIC8gdmlkZW9Bc3BlY3RSYXRpb1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgZGlzcGxheVRvcCA9IE1hdGguZmxvb3IoXG4gICAgICAgICAgICAgICAgICAgICh0aGlzLnJvb3REaXYuY2xpZW50SGVpZ2h0IC0gZGlzcGxheUhlaWdodCkgKiAwLjVcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGRpc3BsYXlMZWZ0ID0gMDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZGlzcGxheVdpZHRoID0gTWF0aC5mbG9vcihcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yb290RGl2LmNsaWVudEhlaWdodCAqIHZpZGVvQXNwZWN0UmF0aW9cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGRpc3BsYXlIZWlnaHQgPSB0aGlzLnJvb3REaXYuY2xpZW50SGVpZ2h0O1xuICAgICAgICAgICAgICAgIGRpc3BsYXlUb3AgPSAwO1xuICAgICAgICAgICAgICAgIGRpc3BsYXlMZWZ0ID0gTWF0aC5mbG9vcihcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMucm9vdERpdi5jbGllbnRXaWR0aCAtIGRpc3BsYXlXaWR0aCkgKiAwLjVcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5yb290RWxlbWVudC5zdHlsZS53aWR0aCA9IHRoaXMucm9vdERpdi5vZmZzZXRXaWR0aCArICdweCc7XG4gICAgICAgICAgICB0aGlzLnJvb3RFbGVtZW50LnN0eWxlLmhlaWdodCA9IHRoaXMucm9vdERpdi5vZmZzZXRIZWlnaHQgKyAncHgnO1xuICAgICAgICAgICAgdGhpcy5yb290RWxlbWVudC5zdHlsZS5sZWZ0ID0gMCArICdweCc7XG4gICAgICAgICAgICB0aGlzLnJvb3RFbGVtZW50LnN0eWxlLnRvcCA9IDAgKyAncHgnO1xuXG4gICAgICAgICAgICB0aGlzLmltYWdlRWxlbWVudC5zdHlsZS53aWR0aCA9IGRpc3BsYXlXaWR0aCArICdweCc7XG4gICAgICAgICAgICB0aGlzLmltYWdlRWxlbWVudC5zdHlsZS5oZWlnaHQgPSBkaXNwbGF5SGVpZ2h0ICsgJ3B4JztcbiAgICAgICAgICAgIHRoaXMuaW1hZ2VFbGVtZW50LnN0eWxlLmxlZnQgPSBkaXNwbGF5TGVmdCArICdweCc7XG4gICAgICAgICAgICB0aGlzLmltYWdlRWxlbWVudC5zdHlsZS50b3AgPSBkaXNwbGF5VG9wICsgJ3B4JztcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIi8vIENvcHlyaWdodCBFcGljIEdhbWVzLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG5cbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJy4uL0xvZ2dlci9Mb2dnZXInO1xuaW1wb3J0IHsgRnJlZXplRnJhbWUgfSBmcm9tICcuL0ZyZWV6ZUZyYW1lJztcblxuLyoqXG4gKiBBIGNsYXNzIGZvciBjb250cm9sbGluZyBmcmVlemUgZnJhbWUgZnVuY3Rpb25hbGl0eVxuICovXG5leHBvcnQgY2xhc3MgRnJlZXplRnJhbWVDb250cm9sbGVyIHtcbiAgICBmcmVlemVGcmFtZTogRnJlZXplRnJhbWU7XG4gICAgcmVjZWl2aW5nID0gZmFsc2U7XG4gICAgc2l6ZSA9IDA7XG4gICAganBlZzogVWludDhBcnJheSA9IHVuZGVmaW5lZDtcbiAgICB2YWxpZCA9IGZhbHNlO1xuICAgIGZyZWV6ZUZyYW1lRGVsYXkgPSA1MDtcblxuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdCBhIGZyZWV6ZSBmcmFtZSBjb250cm9sbGVyXG4gICAgICogQHBhcmFtIHJvb3REaXYgLSB0aGUgZGl2IHRoYXQgYSBmcmVlemUgZnJhbWUgZWxlbWVudCB3aWxsIGJlIGluamVjdGVkIGludG9cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihyb290RGl2OiBIVE1MRWxlbWVudCkge1xuICAgICAgICB0aGlzLmZyZWV6ZUZyYW1lID0gbmV3IEZyZWV6ZUZyYW1lKHJvb3REaXYpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNob3cgdGhlIGZyZWV6ZSBmcmFtZSBpZiBpdCBpcyB2YWxpZFxuICAgICAqL1xuICAgIHNob3dGcmVlemVGcmFtZSgpIHtcbiAgICAgICAgaWYgKHRoaXMudmFsaWQpIHtcbiAgICAgICAgICAgIHRoaXMuZnJlZXplRnJhbWUuc2V0RWxlbWVudEZvclNob3coKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhpZGUgdGhlIGZyZWV6ZSBmcmFtZSBhbmQgc2V0IHRoZSB2YWxpZGl0eSB0byBmYWxzZVxuICAgICAqL1xuICAgIGhpZGVGcmVlemVGcmFtZSgpIHtcbiAgICAgICAgdGhpcy52YWxpZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmZyZWV6ZUZyYW1lLnNldEVsZW1lbnRGb3JIaWRlKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXBkYXRlIHRoZSBmcmVlemUgZnJhbWVzIGltYWdlIHNvdXJjZSBhbmQgbG9hZCBpdFxuICAgICAqIEBwYXJhbSBqcGVnIC0gdGhlIGZyZWV6ZSBmcmFtZSBpbWFnZSBhcyBhIGJ5dGUgYXJyYXkgZGF0YVxuICAgICAqIEBwYXJhbSBvbkxvYWRDYWxsQmFjayAtIGEgY2FsbCBiYWNrIGZvciBtYW5hZ2luZyBpZiB0aGUgcGxheSBvdmVybGF5IG5lZWRzIHRvIGJlIHNob3duIG9yIG5vdFxuICAgICAqL1xuICAgIHVwZGF0ZUZyZWV6ZUZyYW1lQW5kU2hvdyhqcGVnOiBVaW50OEFycmF5LCBvbkxvYWRDYWxsQmFjazogKCkgPT4gdm9pZCkge1xuICAgICAgICB0aGlzLmZyZWV6ZUZyYW1lLnVwZGF0ZUltYWdlRWxlbWVudFNvdXJjZShqcGVnKTtcbiAgICAgICAgdGhpcy5mcmVlemVGcmFtZS5pbWFnZUVsZW1lbnQub25sb2FkID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5mcmVlemVGcmFtZS5zZXREaW1lbnNpb25zRnJvbUVsZW1lbnRBbmRSZXNpemUoKTtcbiAgICAgICAgICAgIG9uTG9hZENhbGxCYWNrKCk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUHJvY2VzcyB0aGUgbmV3IGZyZWV6ZSBmcmFtZSBpbWFnZSBhbmQgdXBkYXRlIGl0XG4gICAgICogQHBhcmFtIHZpZXcgLSB0aGUgZnJlZXplIGZyYW1lIGltYWdlIGFzIGEgYnl0ZSBhcnJheSBkYXRhXG4gICAgICogQHBhcmFtIG9uTG9hZENhbGxCYWNrIC0gYSBjYWxsIGJhY2sgZm9yIG1hbmFnaW5nIGlmIHRoZSBwbGF5IG92ZXJsYXkgbmVlZHMgdG8gYmUgc2hvd24gb3Igbm90XG4gICAgICovXG4gICAgcHJvY2Vzc0ZyZWV6ZUZyYW1lTWVzc2FnZSh2aWV3OiBVaW50OEFycmF5LCBvbkxvYWRDYWxsQmFjazogKCkgPT4gdm9pZCkge1xuICAgICAgICAvLyBSZXNldCBmcmVlemUgZnJhbWUgaWYgd2UgZ290IGEgZnJlZXplIGZyYW1lIG1lc3NhZ2UgYW5kIHdlIGFyZSBub3QgXCJyZWNlaXZpbmdcIiB5ZXQuXG4gICAgICAgIGlmICghdGhpcy5yZWNlaXZpbmcpIHtcbiAgICAgICAgICAgIHRoaXMucmVjZWl2aW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMudmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuc2l6ZSA9IDA7XG4gICAgICAgICAgICB0aGlzLmpwZWcgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBFeHRyYWN0IHRvdGFsIHNpemUgb2YgZnJlZXplIGZyYW1lIChhY3Jvc3MgYWxsIGNodW5rcylcbiAgICAgICAgdGhpcy5zaXplID0gbmV3IERhdGFWaWV3KHZpZXcuc2xpY2UoMSwgNSkuYnVmZmVyKS5nZXRJbnQzMigwLCB0cnVlKTtcblxuICAgICAgICAvLyBHZXQgdGhlIGpwZWcgcGFydCBvZiB0aGUgcGF5bG9hZFxuICAgICAgICBjb25zdCBqcGVnQnl0ZXMgPSB2aWV3LnNsaWNlKDEgKyA0KTtcblxuICAgICAgICAvLyBBcHBlbmQgdG8gZXhpc3RpbmcganBlZyB0aGF0IGhvbGRzIHRoZSBmcmVlemUgZnJhbWVcbiAgICAgICAgaWYgKHRoaXMuanBlZykge1xuICAgICAgICAgICAgY29uc3QganBlZyA9IG5ldyBVaW50OEFycmF5KHRoaXMuanBlZy5sZW5ndGggKyBqcGVnQnl0ZXMubGVuZ3RoKTtcbiAgICAgICAgICAgIGpwZWcuc2V0KHRoaXMuanBlZywgMCk7XG4gICAgICAgICAgICBqcGVnLnNldChqcGVnQnl0ZXMsIHRoaXMuanBlZy5sZW5ndGgpO1xuICAgICAgICAgICAgdGhpcy5qcGVnID0ganBlZztcbiAgICAgICAgfVxuICAgICAgICAvLyBObyBleGlzdGluZyBmcmVlemUgZnJhbWUganBlZywgbWFrZSBvbmVcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmpwZWcgPSBqcGVnQnl0ZXM7XG4gICAgICAgICAgICB0aGlzLnJlY2VpdmluZyA9IHRydWU7XG4gICAgICAgICAgICBMb2dnZXIuTG9nKFxuICAgICAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXG4gICAgICAgICAgICAgICAgYHJlY2VpdmVkIGZpcnN0IGNodW5rIG9mIGZyZWV6ZSBmcmFtZTogJHt0aGlzLmpwZWcubGVuZ3RofS8ke3RoaXMuc2l6ZX1gLFxuICAgICAgICAgICAgICAgIDZcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBGaW5pc2hlZCByZWNlaXZpbmcgZnJlZXplIGZyYW1lLCB3ZSBjYW4gc2hvdyBpdCBub3dcbiAgICAgICAgaWYgKHRoaXMuanBlZy5sZW5ndGggPT09IHRoaXMuc2l6ZSkge1xuICAgICAgICAgICAgdGhpcy5yZWNlaXZpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMudmFsaWQgPSB0cnVlO1xuICAgICAgICAgICAgTG9nZ2VyLkxvZyhcbiAgICAgICAgICAgICAgICBMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLFxuICAgICAgICAgICAgICAgIGByZWNlaXZlZCBjb21wbGV0ZSBmcmVlemUgZnJhbWUgJHt0aGlzLnNpemV9YCxcbiAgICAgICAgICAgICAgICA2XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVGcmVlemVGcmFtZUFuZFNob3codGhpcy5qcGVnLCBvbkxvYWRDYWxsQmFjayk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gV2UgcmVjZWl2ZWQgbW9yZSBkYXRhIHRoYW4gdGhlIGZyZWV6ZSBmcmFtZSBwYXlsb2FkIG1lc3NhZ2UgaW5kaWNhdGUgKHRoaXMgaXMgYW4gZXJyb3IpXG4gICAgICAgIGVsc2UgaWYgKHRoaXMuanBlZy5sZW5ndGggPiB0aGlzLnNpemUpIHtcbiAgICAgICAgICAgIExvZ2dlci5FcnJvcihcbiAgICAgICAgICAgICAgICBMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLFxuICAgICAgICAgICAgICAgIGByZWNlaXZlZCBiaWdnZXIgZnJlZXplIGZyYW1lIHRoYW4gYWR2ZXJ0aXNlZDogJHt0aGlzLmpwZWcubGVuZ3RofS8ke3RoaXMuc2l6ZX1gXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgdGhpcy5qcGVnID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgdGhpcy5yZWNlaXZpbmcgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIi8vIENvcHlyaWdodCBFcGljIEdhbWVzLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG5cbmltcG9ydCB7IENvb3JkaW5hdGVDb252ZXJ0ZXIgfSBmcm9tICcuLi9VdGlsL0Nvb3JkaW5hdGVDb252ZXJ0ZXInO1xuaW1wb3J0IHsgU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIgfSBmcm9tICcuLi9VZUluc3RhbmNlTWVzc2FnZS9TdHJlYW1NZXNzYWdlQ29udHJvbGxlcic7XG5pbXBvcnQgeyBWaWRlb1BsYXllciB9IGZyb20gJy4uL1ZpZGVvUGxheWVyL1ZpZGVvUGxheWVyJztcbmltcG9ydCB7IElUb3VjaENvbnRyb2xsZXIgfSBmcm9tICcuL0lUb3VjaENvbnRyb2xsZXInO1xuaW1wb3J0IHsgTW91c2VCdXR0b24gfSBmcm9tICcuL01vdXNlQnV0dG9ucyc7XG5pbXBvcnQgeyBFdmVudExpc3RlbmVyVHJhY2tlciB9IGZyb20gJy4uL1V0aWwvRXZlbnRMaXN0ZW5lclRyYWNrZXInO1xuXG4vKipcbiAqIEFsbG93cyBmb3IgdGhlIHVzYWdlIG9mIGZha2UgdG91Y2ggZXZlbnRzIGFuZCBpbXBsZW1lbnRzIElUb3VjaENvbnRyb2xsZXJcbiAqIEBwYXJhbSBkYXRhQ2hhbm5lbENvbnRyb2xsZXIgLSBUaGUgY29udHJvbGxlciBmb3IgdGhlIERhdGEgY2hhbm5lbFxuICogQHBhcmFtIHZpZGVvRWxlbWVudFBhcmVudCAtIFRoZSB2aWRlbyBwbGF5ZXIgRE9NIGVsZW1lbnRcbiAqL1xuZXhwb3J0IGNsYXNzIEZha2VUb3VjaENvbnRyb2xsZXIgaW1wbGVtZW50cyBJVG91Y2hDb250cm9sbGVyIHtcbiAgICBmYWtlVG91Y2hGaW5nZXI6IEZha2VUb3VjaEZpbmdlcjtcbiAgICB0b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlcjogU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXI7XG4gICAgdmlkZW9FbGVtZW50UHJvdmlkZXI6IFZpZGVvUGxheWVyO1xuICAgIGNvb3JkaW5hdGVDb252ZXJ0ZXI6IENvb3JkaW5hdGVDb252ZXJ0ZXI7XG4gICAgdmlkZW9FbGVtZW50UGFyZW50Q2xpZW50UmVjdDogRE9NUmVjdDtcblxuICAgIC8vIFV0aWxpdHkgZm9yIGtlZXBpbmcgdHJhY2sgb2YgZXZlbnQgaGFuZGxlcnMgYW5kIHVucmVnaXN0ZXJpbmcgdGhlbVxuICAgIHByaXZhdGUgdG91Y2hFdmVudExpc3RlbmVyVHJhY2tlciA9IG5ldyBFdmVudExpc3RlbmVyVHJhY2tlcigpO1xuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyIC0gU3RyZWFtIG1lc3NhZ2UgaW5zdGFuY2VcbiAgICAgKiBAcGFyYW0gdmlkZW9FbGVtZW50UHJvdmlkZXIgLSBWaWRlbyBlbGVtZW50IGluc3RhbmNlXG4gICAgICogQHBhcmFtIGNvb3JkaW5hdGVDb252ZXJ0ZXIgLSBBIGNvb3JkaW5hdGUgY29udmVydGVyIGluc3RhbmNlXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyOiBTdHJlYW1NZXNzYWdlQ29udHJvbGxlcixcbiAgICAgICAgdmlkZW9FbGVtZW50UHJvdmlkZXI6IFZpZGVvUGxheWVyLFxuICAgICAgICBjb29yZGluYXRlQ29udmVydGVyOiBDb29yZGluYXRlQ29udmVydGVyXG4gICAgKSB7XG4gICAgICAgIHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXIgPSB0b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlcjtcbiAgICAgICAgdGhpcy52aWRlb0VsZW1lbnRQcm92aWRlciA9IHZpZGVvRWxlbWVudFByb3ZpZGVyO1xuICAgICAgICB0aGlzLmNvb3JkaW5hdGVDb252ZXJ0ZXIgPSBjb29yZGluYXRlQ29udmVydGVyO1xuICAgICAgICBjb25zdCBvbnRvdWNoc3RhcnQgPSAoZXY6IFRvdWNoRXZlbnQpID0+IHRoaXMub25Ub3VjaFN0YXJ0KGV2KTtcbiAgICAgICAgY29uc3Qgb250b3VjaGVuZCA9IChldjogVG91Y2hFdmVudCkgPT4gdGhpcy5vblRvdWNoRW5kKGV2KTtcbiAgICAgICAgY29uc3Qgb250b3VjaG1vdmUgPSAoZXY6IFRvdWNoRXZlbnQpID0+IHRoaXMub25Ub3VjaE1vdmUoZXYpO1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0Jywgb250b3VjaHN0YXJ0LCB7IHBhc3NpdmU6IGZhbHNlIH0pO1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIG9udG91Y2hlbmQsIHsgcGFzc2l2ZTogZmFsc2UgfSk7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIG9udG91Y2htb3ZlLCB7IHBhc3NpdmU6IGZhbHNlIH0pO1xuICAgICAgICB0aGlzLnRvdWNoRXZlbnRMaXN0ZW5lclRyYWNrZXIuYWRkVW5yZWdpc3RlckNhbGxiYWNrKFxuICAgICAgICAgICAgKCkgPT4gZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIG9udG91Y2hzdGFydClcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy50b3VjaEV2ZW50TGlzdGVuZXJUcmFja2VyLmFkZFVucmVnaXN0ZXJDYWxsYmFjayhcbiAgICAgICAgICAgICgpID0+IGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgb250b3VjaGVuZClcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy50b3VjaEV2ZW50TGlzdGVuZXJUcmFja2VyLmFkZFVucmVnaXN0ZXJDYWxsYmFjayhcbiAgICAgICAgICAgICgpID0+IGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIG9udG91Y2htb3ZlKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVucmVnaXN0ZXIgYWxsIHRvdWNoIGV2ZW50c1xuICAgICAqL1xuICAgIHVucmVnaXN0ZXJUb3VjaEV2ZW50cygpIHtcbiAgICAgICAgdGhpcy50b3VjaEV2ZW50TGlzdGVuZXJUcmFja2VyLnVucmVnaXN0ZXJBbGwoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSB2aWRlbyBFbGVtZW50IFBhcmVudCBDbGllbnQgUmVjdCBudW1iZXJzIGZvciB0aGlzIGNsYXNzXG4gICAgICogQHBhcmFtIHZpZGVvRWxlbWVudFBhcmVudENsaWVudFJlY3QgLSBhIGh0bWwgRWxlbWVudFBhcmVudENsaWVudFJlY3Qgb2JqZWN0XG4gICAgICovXG4gICAgc2V0VmlkZW9FbGVtZW50UGFyZW50Q2xpZW50UmVjdCh2aWRlb0VsZW1lbnRQYXJlbnRDbGllbnRSZWN0OiBET01SZWN0KSB7XG4gICAgICAgIHRoaXMudmlkZW9FbGVtZW50UGFyZW50Q2xpZW50UmVjdCA9IHZpZGVvRWxlbWVudFBhcmVudENsaWVudFJlY3Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogV2hlbiBhIHRvdWNoIGV2ZW50IGJlZ2luc1xuICAgICAqIEBwYXJhbSB0b3VjaCAtIHRoZSBhY3RpdmF0aW5nIHRvdWNoIGV2ZW50XG4gICAgICovXG4gICAgb25Ub3VjaFN0YXJ0KHRvdWNoOiBUb3VjaEV2ZW50KTogdm9pZCB7XG4gICAgICAgIGlmICghdGhpcy52aWRlb0VsZW1lbnRQcm92aWRlci5pc1ZpZGVvUmVhZHkoKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmZha2VUb3VjaEZpbmdlciA9PSBudWxsKSB7XG4gICAgICAgICAgICBjb25zdCBmaXJzdF90b3VjaCA9IHRvdWNoLmNoYW5nZWRUb3VjaGVzWzBdO1xuICAgICAgICAgICAgdGhpcy5mYWtlVG91Y2hGaW5nZXIgPSBuZXcgRmFrZVRvdWNoRmluZ2VyKFxuICAgICAgICAgICAgICAgIGZpcnN0X3RvdWNoLmlkZW50aWZpZXIsXG4gICAgICAgICAgICAgICAgZmlyc3RfdG91Y2guY2xpZW50WCAtIHRoaXMudmlkZW9FbGVtZW50UGFyZW50Q2xpZW50UmVjdC5sZWZ0LFxuICAgICAgICAgICAgICAgIGZpcnN0X3RvdWNoLmNsaWVudFkgLSB0aGlzLnZpZGVvRWxlbWVudFBhcmVudENsaWVudFJlY3QudG9wXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBjb25zdCB2aWRlb0VsZW1lbnRQYXJlbnQgPVxuICAgICAgICAgICAgICAgIHRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIuZ2V0VmlkZW9QYXJlbnRFbGVtZW50KCkgYXMgSFRNTERpdkVsZW1lbnQ7XG4gICAgICAgICAgICBjb25zdCBtb3VzZUV2ZW50ID0gbmV3IE1vdXNlRXZlbnQoJ21vdXNlZW50ZXInLCBmaXJzdF90b3VjaCk7XG4gICAgICAgICAgICB2aWRlb0VsZW1lbnRQYXJlbnQuZGlzcGF0Y2hFdmVudChtb3VzZUV2ZW50KTtcblxuICAgICAgICAgICAgY29uc3QgY29vcmQgPSB0aGlzLmNvb3JkaW5hdGVDb252ZXJ0ZXIubm9ybWFsaXplQW5kUXVhbnRpemVVbnNpZ25lZChcbiAgICAgICAgICAgICAgICB0aGlzLmZha2VUb3VjaEZpbmdlci54LFxuICAgICAgICAgICAgICAgIHRoaXMuZmFrZVRvdWNoRmluZ2VyLnlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBjb25zdCB0b1N0cmVhbWVySGFuZGxlcnMgPVxuICAgICAgICAgICAgICAgIHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXIudG9TdHJlYW1lckhhbmRsZXJzO1xuICAgICAgICAgICAgdG9TdHJlYW1lckhhbmRsZXJzLmdldCgnTW91c2VEb3duJykoW1xuICAgICAgICAgICAgICAgIE1vdXNlQnV0dG9uLm1haW5CdXR0b24sXG4gICAgICAgICAgICAgICAgY29vcmQueCxcbiAgICAgICAgICAgICAgICBjb29yZC55XG4gICAgICAgICAgICBdKTtcbiAgICAgICAgfVxuICAgICAgICB0b3VjaC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFdoZW4gYSB0b3VjaCBldmVudCBlbmRzXG4gICAgICogQHBhcmFtIHRvdWNoRXZlbnQgLSB0aGUgYWN0aXZhdGluZyB0b3VjaCBldmVudFxuICAgICAqL1xuICAgIG9uVG91Y2hFbmQodG91Y2hFdmVudDogVG91Y2hFdmVudCk6IHZvaWQge1xuICAgICAgICBpZiAoIXRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIuaXNWaWRlb1JlYWR5KCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB2aWRlb0VsZW1lbnRQYXJlbnQgPVxuICAgICAgICAgICAgdGhpcy52aWRlb0VsZW1lbnRQcm92aWRlci5nZXRWaWRlb1BhcmVudEVsZW1lbnQoKTtcbiAgICAgICAgY29uc3QgdG9TdHJlYW1lckhhbmRsZXJzID1cbiAgICAgICAgICAgIHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXIudG9TdHJlYW1lckhhbmRsZXJzO1xuXG4gICAgICAgIGZvciAobGV0IHQgPSAwOyB0IDwgdG91Y2hFdmVudC5jaGFuZ2VkVG91Y2hlcy5sZW5ndGg7IHQrKykge1xuICAgICAgICAgICAgY29uc3QgdG91Y2ggPSB0b3VjaEV2ZW50LmNoYW5nZWRUb3VjaGVzW3RdO1xuICAgICAgICAgICAgaWYgKHRvdWNoLmlkZW50aWZpZXIgPT09IHRoaXMuZmFrZVRvdWNoRmluZ2VyLmlkKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeCA9XG4gICAgICAgICAgICAgICAgICAgIHRvdWNoLmNsaWVudFggLSB0aGlzLnZpZGVvRWxlbWVudFBhcmVudENsaWVudFJlY3QubGVmdDtcbiAgICAgICAgICAgICAgICBjb25zdCB5ID0gdG91Y2guY2xpZW50WSAtIHRoaXMudmlkZW9FbGVtZW50UGFyZW50Q2xpZW50UmVjdC50b3A7XG4gICAgICAgICAgICAgICAgY29uc3QgY29vcmQgPVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvb3JkaW5hdGVDb252ZXJ0ZXIubm9ybWFsaXplQW5kUXVhbnRpemVVbnNpZ25lZCh4LCB5KTtcbiAgICAgICAgICAgICAgICB0b1N0cmVhbWVySGFuZGxlcnMuZ2V0KCdNb3VzZVVwJykoW1xuICAgICAgICAgICAgICAgICAgICBNb3VzZUJ1dHRvbi5tYWluQnV0dG9uLFxuICAgICAgICAgICAgICAgICAgICBjb29yZC54LFxuICAgICAgICAgICAgICAgICAgICBjb29yZC55XG4gICAgICAgICAgICAgICAgXSk7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBtb3VzZUV2ZW50ID0gbmV3IE1vdXNlRXZlbnQoJ21vdXNlbGVhdmUnLCB0b3VjaCk7XG4gICAgICAgICAgICAgICAgdmlkZW9FbGVtZW50UGFyZW50LmRpc3BhdGNoRXZlbnQobW91c2VFdmVudCk7XG4gICAgICAgICAgICAgICAgdGhpcy5mYWtlVG91Y2hGaW5nZXIgPSBudWxsO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRvdWNoRXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPbiBhIE1vdmUgdG91Y2ggZXZlbnRcbiAgICAgKiBAcGFyYW0gdG91Y2hFdmVudCAtIHRoZSBhY3RpdmF0aW5nIHRvdWNoIGV2ZW50XG4gICAgICovXG4gICAgb25Ub3VjaE1vdmUodG91Y2hFdmVudDogVG91Y2hFdmVudCk6IHZvaWQge1xuICAgICAgICBpZiAoIXRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIuaXNWaWRlb1JlYWR5KCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0b1N0cmVhbWVySGFuZGxlcnMgPVxuICAgICAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlci50b1N0cmVhbWVySGFuZGxlcnM7XG5cbiAgICAgICAgZm9yIChsZXQgdCA9IDA7IHQgPCB0b3VjaEV2ZW50LnRvdWNoZXMubGVuZ3RoOyB0KyspIHtcbiAgICAgICAgICAgIGNvbnN0IHRvdWNoID0gdG91Y2hFdmVudC50b3VjaGVzW3RdO1xuICAgICAgICAgICAgaWYgKHRvdWNoLmlkZW50aWZpZXIgPT09IHRoaXMuZmFrZVRvdWNoRmluZ2VyLmlkKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeCA9XG4gICAgICAgICAgICAgICAgICAgIHRvdWNoLmNsaWVudFggLSB0aGlzLnZpZGVvRWxlbWVudFBhcmVudENsaWVudFJlY3QubGVmdDtcbiAgICAgICAgICAgICAgICBjb25zdCB5ID0gdG91Y2guY2xpZW50WSAtIHRoaXMudmlkZW9FbGVtZW50UGFyZW50Q2xpZW50UmVjdC50b3A7XG4gICAgICAgICAgICAgICAgY29uc3QgY29vcmQgPVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvb3JkaW5hdGVDb252ZXJ0ZXIubm9ybWFsaXplQW5kUXVhbnRpemVVbnNpZ25lZCh4LCB5KTtcbiAgICAgICAgICAgICAgICBjb25zdCBkZWx0YSA9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29vcmRpbmF0ZUNvbnZlcnRlci5ub3JtYWxpemVBbmRRdWFudGl6ZVNpZ25lZChcbiAgICAgICAgICAgICAgICAgICAgICAgIHggLSB0aGlzLmZha2VUb3VjaEZpbmdlci54LFxuICAgICAgICAgICAgICAgICAgICAgICAgeSAtIHRoaXMuZmFrZVRvdWNoRmluZ2VyLnlcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB0b1N0cmVhbWVySGFuZGxlcnMuZ2V0KCdNb3VzZU1vdmUnKShbXG4gICAgICAgICAgICAgICAgICAgIGNvb3JkLngsXG4gICAgICAgICAgICAgICAgICAgIGNvb3JkLnksXG4gICAgICAgICAgICAgICAgICAgIGRlbHRhLngsXG4gICAgICAgICAgICAgICAgICAgIGRlbHRhLnlcbiAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICB0aGlzLmZha2VUb3VjaEZpbmdlci54ID0geDtcbiAgICAgICAgICAgICAgICB0aGlzLmZha2VUb3VjaEZpbmdlci55ID0geTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0b3VjaEV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxufVxuXG4vKipcbiAqIFRoZSBpbnRlcmZhY2UgZm9yIGZpbmdlciBwb3NpdGlvbiBtYXBwaW5nXG4gKi9cbmV4cG9ydCBjbGFzcyBGYWtlVG91Y2hGaW5nZXIge1xuICAgIGlkOiBudW1iZXI7XG4gICAgeDogbnVtYmVyO1xuICAgIHk6IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSBpZCAtIHRoZSBidXR0b24gaWRcbiAgICAgKiBAcGFyYW0geCAtIHRoZSB4IGF4aXMgdmFsdWVcbiAgICAgKiBAcGFyYW0geSAtIHRoZSB5IGF4aXMgdmFsdWVcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihpZDogbnVtYmVyLCB4OiBudW1iZXIsIHk6IG51bWJlcikge1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgIHRoaXMueCA9IHg7XG4gICAgICAgIHRoaXMueSA9IHk7XG4gICAgfVxufVxuIiwiLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSAnLi4vTG9nZ2VyL0xvZ2dlcic7XG5pbXBvcnQgeyBTdHJlYW1NZXNzYWdlQ29udHJvbGxlciB9IGZyb20gJy4uL1VlSW5zdGFuY2VNZXNzYWdlL1N0cmVhbU1lc3NhZ2VDb250cm9sbGVyJztcbmltcG9ydCB7IEV2ZW50TGlzdGVuZXJUcmFja2VyIH0gZnJvbSAnLi4vVXRpbC9FdmVudExpc3RlbmVyVHJhY2tlcic7XG5pbXBvcnQgeyBDb250cm9sbGVyIH0gZnJvbSAnLi9HYW1lcGFkVHlwZXMnO1xuXG4vKipcbiAqIFRoZSBjbGFzcyB0aGF0IGhhbmRsZXMgdGhlIGZ1bmN0aW9uYWxpdHkgb2YgZ2FtZXBhZHMgYW5kIGNvbnRyb2xsZXJzXG4gKi9cbmV4cG9ydCBjbGFzcyBHYW1lUGFkQ29udHJvbGxlciB7XG4gICAgY29udHJvbGxlcnM6IEFycmF5PENvbnRyb2xsZXI+O1xuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZTogKGNhbGxiYWNrOiBGcmFtZVJlcXVlc3RDYWxsYmFjaykgPT4gbnVtYmVyO1xuICAgIHRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyOiBTdHJlYW1NZXNzYWdlQ29udHJvbGxlcjtcblxuICAgIC8vIFV0aWxpdHkgZm9yIGtlZXBpbmcgdHJhY2sgb2YgZXZlbnQgaGFuZGxlcnMgYW5kIHVucmVnaXN0ZXJpbmcgdGhlbVxuICAgIHByaXZhdGUgZ2FtZVBhZEV2ZW50TGlzdGVuZXJUcmFja2VyID0gbmV3IEV2ZW50TGlzdGVuZXJUcmFja2VyKCk7XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gdG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXIgLSBTdHJlYW0gbWVzc2FnZSBpbnN0YW5jZVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyOiBTdHJlYW1NZXNzYWdlQ29udHJvbGxlcikge1xuICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyID0gdG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXI7XG5cbiAgICAgICAgdGhpcy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSAoXG4gICAgICAgICAgICB3aW5kb3cubW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XG4gICAgICAgICAgICB3aW5kb3cud2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XG4gICAgICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lXG4gICAgICAgICkuYmluZCh3aW5kb3cpO1xuICAgICAgICBjb25zdCBicm93c2VyV2luZG93ID0gd2luZG93IGFzIFdpbmRvdztcbiAgICAgICAgaWYgKCdHYW1lcGFkRXZlbnQnIGluIGJyb3dzZXJXaW5kb3cpIHtcbiAgICAgICAgICAgIGNvbnN0IG9uR2FtZVBhZENvbm5lY3RlZCA9IChldjogR2FtZXBhZEV2ZW50KSA9PlxuICAgICAgICAgICAgICAgIHRoaXMuZ2FtZVBhZENvbm5lY3RIYW5kbGVyKGV2KTtcbiAgICAgICAgICAgIGNvbnN0IG9uR2FtZVBhZERpc2Nvbm5lY3RlZCA9IChldjogR2FtZXBhZEV2ZW50KSA9PlxuICAgICAgICAgICAgICAgIHRoaXMuZ2FtZVBhZERpc2Nvbm5lY3RIYW5kbGVyKGV2KTtcbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdnYW1lcGFkY29ubmVjdGVkJywgb25HYW1lUGFkQ29ubmVjdGVkKTtcbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdnYW1lcGFkZGlzY29ubmVjdGVkJywgb25HYW1lUGFkRGlzY29ubmVjdGVkKTtcbiAgICAgICAgICAgIHRoaXMuZ2FtZVBhZEV2ZW50TGlzdGVuZXJUcmFja2VyLmFkZFVucmVnaXN0ZXJDYWxsYmFjayhcbiAgICAgICAgICAgICAgICAoKSA9PiB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignZ2FtZXBhZGNvbm5lY3RlZCcsIG9uR2FtZVBhZENvbm5lY3RlZClcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aGlzLmdhbWVQYWRFdmVudExpc3RlbmVyVHJhY2tlci5hZGRVbnJlZ2lzdGVyQ2FsbGJhY2soXG4gICAgICAgICAgICAgICAgKCkgPT4gd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2dhbWVwYWRkaXNjb25uZWN0ZWQnLCBvbkdhbWVQYWREaXNjb25uZWN0ZWQpXG4gICAgICAgICAgICApO1xuICAgICAgICB9IGVsc2UgaWYgKCdXZWJLaXRHYW1lcGFkRXZlbnQnIGluIGJyb3dzZXJXaW5kb3cpIHtcbiAgICAgICAgICAgIGNvbnN0IG9uV2Via2l0R2FtZVBhZENvbm5lY3RlZCA9IChldjogR2FtZXBhZEV2ZW50KSA9PiB0aGlzLmdhbWVQYWRDb25uZWN0SGFuZGxlcihldik7XG4gICAgICAgICAgICBjb25zdCBvbldlYmtpdEdhbWVQYWREaXNjb25uZWN0ZWQgPSAoZXY6IEdhbWVwYWRFdmVudCkgPT4gdGhpcy5nYW1lUGFkRGlzY29ubmVjdEhhbmRsZXIoZXYpO1xuICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3dlYmtpdGdhbWVwYWRjb25uZWN0ZWQnLCBvbldlYmtpdEdhbWVQYWRDb25uZWN0ZWQpO1xuICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3dlYmtpdGdhbWVwYWRkaXNjb25uZWN0ZWQnLCBvbldlYmtpdEdhbWVQYWREaXNjb25uZWN0ZWQpO1xuICAgICAgICAgICAgdGhpcy5nYW1lUGFkRXZlbnRMaXN0ZW5lclRyYWNrZXIuYWRkVW5yZWdpc3RlckNhbGxiYWNrKFxuICAgICAgICAgICAgICAgICgpID0+IHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCd3ZWJraXRnYW1lcGFkY29ubmVjdGVkJywgb25XZWJraXRHYW1lUGFkQ29ubmVjdGVkKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMuZ2FtZVBhZEV2ZW50TGlzdGVuZXJUcmFja2VyLmFkZFVucmVnaXN0ZXJDYWxsYmFjayhcbiAgICAgICAgICAgICAgICAoKSA9PiB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignd2Via2l0Z2FtZXBhZGRpc2Nvbm5lY3RlZCcsIG9uV2Via2l0R2FtZVBhZERpc2Nvbm5lY3RlZClcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jb250cm9sbGVycyA9IFtdO1xuICAgICAgICBpZiAobmF2aWdhdG9yLmdldEdhbWVwYWRzKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGdhbWVwYWQgb2YgbmF2aWdhdG9yLmdldEdhbWVwYWRzKCkpIHtcbiAgICAgICAgICAgICAgICBpZiAoZ2FtZXBhZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmdhbWVQYWRDb25uZWN0SGFuZGxlcihuZXcgR2FtZXBhZEV2ZW50KCdnYW1lcGFkY29ubmVjdGVkJywgeyBnYW1lcGFkIH0pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVbnJlZ2lzdGVycyBhbGwgZXZlbnQgaGFuZGxlcnNcbiAgICAgKi9cbiAgICB1bnJlZ2lzdGVyR2FtZVBhZEV2ZW50cygpIHtcbiAgICAgICAgdGhpcy5nYW1lUGFkRXZlbnRMaXN0ZW5lclRyYWNrZXIudW5yZWdpc3RlckFsbCgpO1xuICAgICAgICBmb3IoY29uc3QgY29udHJvbGxlciBvZiB0aGlzLmNvbnRyb2xsZXJzKSB7XG4gICAgICAgICAgICBpZihjb250cm9sbGVyLmlkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9uR2FtZXBhZERpc2Nvbm5lY3RlZChjb250cm9sbGVyLmlkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNvbnRyb2xsZXJzID0gW107XG4gICAgICAgIHRoaXMub25HYW1lcGFkQ29ubmVjdGVkID0gKCkgPT4geyAvKiAqLyB9O1xuICAgICAgICB0aGlzLm9uR2FtZXBhZERpc2Nvbm5lY3RlZCA9ICgpID0+IHsgLyogKi8gfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb25uZWN0cyB0aGUgZ2FtZXBhZCBoYW5kbGVyXG4gICAgICogQHBhcmFtIGdhbWVQYWRFdmVudCAtIHRoZSBhY3RpdmF0aW5nIGdhbWVwYWQgZXZlbnRcbiAgICAgKi9cbiAgICBnYW1lUGFkQ29ubmVjdEhhbmRsZXIoZ2FtZVBhZEV2ZW50OiBHYW1lcGFkRXZlbnQpIHtcbiAgICAgICAgTG9nZ2VyLkxvZyhMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnR2FtZXBhZCBjb25uZWN0IGhhbmRsZXInLCA2KTtcbiAgICAgICAgY29uc3QgZ2FtZXBhZCA9IGdhbWVQYWRFdmVudC5nYW1lcGFkO1xuXG4gICAgICAgIGNvbnN0IHRlbXA6IENvbnRyb2xsZXIgPSB7XG4gICAgICAgICAgICBjdXJyZW50U3RhdGU6IGdhbWVwYWQsXG4gICAgICAgICAgICBwcmV2U3RhdGU6IGdhbWVwYWQsXG4gICAgICAgICAgICBpZDogdW5kZWZpbmVkXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5jb250cm9sbGVycy5wdXNoKHRlbXApO1xuICAgICAgICB0aGlzLmNvbnRyb2xsZXJzW2dhbWVwYWQuaW5kZXhdLmN1cnJlbnRTdGF0ZSA9IGdhbWVwYWQ7XG4gICAgICAgIHRoaXMuY29udHJvbGxlcnNbZ2FtZXBhZC5pbmRleF0ucHJldlN0YXRlID0gZ2FtZXBhZDtcbiAgICAgICAgTG9nZ2VyLkxvZyhcbiAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXG4gICAgICAgICAgICAnZ2FtZXBhZDogJyArIGdhbWVwYWQuaWQgKyAnIGNvbm5lY3RlZCcsXG4gICAgICAgICAgICA2XG4gICAgICAgICk7XG4gICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gdGhpcy51cGRhdGVTdGF0dXMoKSk7XG4gICAgICAgIHRoaXMub25HYW1lcGFkQ29ubmVjdGVkKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGlzY29ubmVjdHMgdGhlIGdhbWVwYWQgaGFuZGxlclxuICAgICAqIEBwYXJhbSBnYW1lUGFkRXZlbnQgLSB0aGUgYWN0aXZhdGluZyBnYW1lcGFkIGV2ZW50XG4gICAgICovXG4gICAgZ2FtZVBhZERpc2Nvbm5lY3RIYW5kbGVyKGdhbWVQYWRFdmVudDogR2FtZXBhZEV2ZW50KSB7XG4gICAgICAgIExvZ2dlci5Mb2coTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ0dhbWVwYWQgZGlzY29ubmVjdCBoYW5kbGVyJywgNik7XG4gICAgICAgIExvZ2dlci5Mb2coXG4gICAgICAgICAgICBMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLFxuICAgICAgICAgICAgJ2dhbWVwYWQ6ICcgKyBnYW1lUGFkRXZlbnQuZ2FtZXBhZC5pZCArICcgZGlzY29ubmVjdGVkJyxcbiAgICAgICAgICAgIDZcbiAgICAgICAgKTtcbiAgICAgICAgY29uc3QgZGVsZXRlZENvbnRyb2xsZXIgPSB0aGlzLmNvbnRyb2xsZXJzW2dhbWVQYWRFdmVudC5nYW1lcGFkLmluZGV4XTtcbiAgICAgICAgZGVsZXRlIHRoaXMuY29udHJvbGxlcnNbZ2FtZVBhZEV2ZW50LmdhbWVwYWQuaW5kZXhdO1xuICAgICAgICB0aGlzLmNvbnRyb2xsZXJzID0gdGhpcy5jb250cm9sbGVycy5maWx0ZXIoXG4gICAgICAgICAgICAoY29udHJvbGxlcikgPT4gY29udHJvbGxlciAhPT0gdW5kZWZpbmVkXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMub25HYW1lcGFkRGlzY29ubmVjdGVkKGRlbGV0ZWRDb250cm9sbGVyLmlkKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTY2FuIGZvciBjb25uZWN0ZWQgZ2FtZXBhZHNcbiAgICAgKi9cbiAgICBzY2FuR2FtZVBhZHMoKSB7XG4gICAgICAgIGNvbnN0IGdhbWVwYWRzID0gbmF2aWdhdG9yLmdldEdhbWVwYWRzXG4gICAgICAgICAgICA/IG5hdmlnYXRvci5nZXRHYW1lcGFkcygpXG4gICAgICAgICAgICA6IG5hdmlnYXRvci53ZWJraXRHZXRHYW1lcGFkc1xuICAgICAgICAgICAgPyBuYXZpZ2F0b3Iud2Via2l0R2V0R2FtZXBhZHMoKVxuICAgICAgICAgICAgOiBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBnYW1lcGFkcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGdhbWVwYWRzW2ldICYmIGdhbWVwYWRzW2ldLmluZGV4IGluIHRoaXMuY29udHJvbGxlcnMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRyb2xsZXJzW2dhbWVwYWRzW2ldLmluZGV4XS5jdXJyZW50U3RhdGUgPSBnYW1lcGFkc1tpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgdGhlIHN0YXR1cyBvZiB0aGUgZ2FtZXBhZCBhbmQgc2VuZHMgdGhlIGlucHV0c1xuICAgICAqL1xuICAgIHVwZGF0ZVN0YXR1cygpIHtcbiAgICAgICAgdGhpcy5zY2FuR2FtZVBhZHMoKTtcbiAgICAgICAgY29uc3QgdG9TdHJlYW1lckhhbmRsZXJzID1cbiAgICAgICAgICAgIHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXIudG9TdHJlYW1lckhhbmRsZXJzO1xuXG4gICAgICAgIC8vIEl0ZXJhdGUgb3ZlciBtdWx0aXBsZSBjb250cm9sbGVycyBpbiB0aGUgY2FzZSB0aGUgbXVsdGlwbGUgZ2FtZXBhZHMgYXJlIGNvbm5lY3RlZFxuICAgICAgICBmb3IgKGNvbnN0IGNvbnRyb2xsZXIgb2YgdGhpcy5jb250cm9sbGVycykge1xuICAgICAgICAgICAgLy8gSWYgd2UgaGF2ZW4ndCByZWNlaXZlZCBhbiBpZCAocG9zc2libGUgaWYgdXNpbmcgYW4gb2xkZXIgdmVyc2lvbiBvZiBVRSksIHJldHVybiB0byBvcmlnaW5hbCBmdW5jdGlvbmFsaXR5XG4gICAgICAgICAgICBjb25zdCBjb250cm9sbGVySW5kZXggPSAoY29udHJvbGxlci5pZCA9PT0gdW5kZWZpbmVkKSA/IHRoaXMuY29udHJvbGxlcnMuaW5kZXhPZihjb250cm9sbGVyKSA6IGNvbnRyb2xsZXIuaWQ7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50U3RhdGUgPSBjb250cm9sbGVyLmN1cnJlbnRTdGF0ZTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29udHJvbGxlci5jdXJyZW50U3RhdGUuYnV0dG9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRCdXR0b24gPSBjb250cm9sbGVyLmN1cnJlbnRTdGF0ZS5idXR0b25zW2ldO1xuICAgICAgICAgICAgICAgIGNvbnN0IHByZXZpb3VzQnV0dG9uID0gY29udHJvbGxlci5wcmV2U3RhdGUuYnV0dG9uc1tpXTtcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudEJ1dHRvbi5wcmVzc2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHByZXNzXG4gICAgICAgICAgICAgICAgICAgIGlmIChpID09IGdhbWVwYWRMYXlvdXQuTGVmdFRyaWdnZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICBVRXMgbGVmdCBhbmFsb2cgaGFzIGEgYnV0dG9uIGluZGV4IG9mIDVcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvU3RyZWFtZXJIYW5kbGVycy5nZXQoJ0dhbWVwYWRBbmFsb2cnKShbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlckluZGV4LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudEJ1dHRvbi52YWx1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaSA9PSBnYW1lcGFkTGF5b3V0LlJpZ2h0VHJpZ2dlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgIFVFcyByaWdodCBhbmFsb2cgaGFzIGEgYnV0dG9uIGluZGV4IG9mIDZcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvU3RyZWFtZXJIYW5kbGVycy5nZXQoJ0dhbWVwYWRBbmFsb2cnKShbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlckluZGV4LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDYsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudEJ1dHRvbi52YWx1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b1N0cmVhbWVySGFuZGxlcnMuZ2V0KCdHYW1lcGFkQnV0dG9uUHJlc3NlZCcpKFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVySW5kZXgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2aW91c0J1dHRvbi5wcmVzc2VkID8gMSA6IDBcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICghY3VycmVudEJ1dHRvbi5wcmVzc2VkICYmIHByZXZpb3VzQnV0dG9uLnByZXNzZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gcmVsZWFzZVxuICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PSBnYW1lcGFkTGF5b3V0LkxlZnRUcmlnZ2VyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgVUVzIGxlZnQgYW5hbG9nIGhhcyBhIGJ1dHRvbiBpbmRleCBvZiA1XG4gICAgICAgICAgICAgICAgICAgICAgICB0b1N0cmVhbWVySGFuZGxlcnMuZ2V0KCdHYW1lcGFkQW5hbG9nJykoW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXJJbmRleCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA1LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDBcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGkgPT0gZ2FtZXBhZExheW91dC5SaWdodFRyaWdnZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICBVRXMgcmlnaHQgYW5hbG9nIGhhcyBhIGJ1dHRvbiBpbmRleCBvZiA2XG4gICAgICAgICAgICAgICAgICAgICAgICB0b1N0cmVhbWVySGFuZGxlcnMuZ2V0KCdHYW1lcGFkQW5hbG9nJykoW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXJJbmRleCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA2LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDBcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9TdHJlYW1lckhhbmRsZXJzLmdldCgnR2FtZXBhZEJ1dHRvblJlbGVhc2VkJykoW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXJJbmRleCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpXG4gICAgICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEl0ZXJhdGUgb3ZlciBnYW1lcGFkIGF4ZXMgKHdlIHdpbGwgaW5jcmVtZW50IGluIGxvdHMgb2YgMiBhcyB0aGVyZSBpcyAyIGF4ZXMgcGVyIHN0aWNrKVxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjdXJyZW50U3RhdGUuYXhlcy5sZW5ndGg7IGkgKz0gMikge1xuICAgICAgICAgICAgICAgIC8vIEhvcml6b250YWwgYXhlcyBhcmUgZXZlbiBudW1iZXJlZFxuICAgICAgICAgICAgICAgIGNvbnN0IHggPSBwYXJzZUZsb2F0KGN1cnJlbnRTdGF0ZS5heGVzW2ldLnRvRml4ZWQoNCkpO1xuXG4gICAgICAgICAgICAgICAgLy8gVmVydGljYWwgYXhlcyBhcmUgb2RkIG51bWJlcmVkXG4gICAgICAgICAgICAgICAgLy8gaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2dhbWVwYWQvI3JlbWFwcGluZyBHYW1lcGFkIGJyb3dzZXIgc2lkZSBzdGFuZGFyZCBtYXBwaW5nIGhhcyBwb3NpdGl2ZSBkb3duLCBuZWdhdGl2ZSB1cC4gVGhpcyBpcyBkb3ducmlnaHQgZGlzZ3VzdGluZy4gU28gd2UgZml4IGl0LlxuICAgICAgICAgICAgICAgIGNvbnN0IHkgPSAtcGFyc2VGbG9hdChjdXJyZW50U3RhdGUuYXhlc1tpICsgMV0udG9GaXhlZCg0KSk7XG5cbiAgICAgICAgICAgICAgICAvLyBVRSdzIGFuYWxvZyBheGVzIGZvbGxvdyB0aGUgc2FtZSBvcmRlciBhcyB0aGUgYnJvd3NlcnMsIGJ1dCBzdGFydCBhdCBpbmRleCAxIHNvIHdlIHdpbGwgb2Zmc2V0IGFzIHN1Y2hcbiAgICAgICAgICAgICAgICB0b1N0cmVhbWVySGFuZGxlcnMuZ2V0KCdHYW1lcGFkQW5hbG9nJykoW1xuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVySW5kZXgsXG4gICAgICAgICAgICAgICAgICAgIGkgKyAxLFxuICAgICAgICAgICAgICAgICAgICB4XG4gICAgICAgICAgICAgICAgXSk7IC8vIEhvcml6b250YWwgYXhlcywgb25seSBvZmZzZXQgYnkgMVxuICAgICAgICAgICAgICAgIHRvU3RyZWFtZXJIYW5kbGVycy5nZXQoJ0dhbWVwYWRBbmFsb2cnKShbXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXJJbmRleCxcbiAgICAgICAgICAgICAgICAgICAgaSArIDIsXG4gICAgICAgICAgICAgICAgICAgIHlcbiAgICAgICAgICAgICAgICBdKTsgLy8gVmVydGljYWwgYXhlcywgb2Zmc2V0IGJ5IHR3byAoMSB0byBtYXRjaCBVRXMgYXhlcyBjb252ZW50aW9uIGFuZCB0aGVuIGFub3RoZXIgMSBmb3IgdGhlIHZlcnRpY2FsIGF4ZXMpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmNvbnRyb2xsZXJzW2NvbnRyb2xsZXJJbmRleF0ucHJldlN0YXRlID0gY3VycmVudFN0YXRlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmNvbnRyb2xsZXJzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHRoaXMudXBkYXRlU3RhdHVzKCkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25HYW1lcGFkUmVzcG9uc2VSZWNlaXZlZChnYW1lcGFkSWQ6IG51bWJlcikge1xuICAgICAgICBmb3IoY29uc3QgY29udHJvbGxlciBvZiB0aGlzLmNvbnRyb2xsZXJzKSB7XG4gICAgICAgICAgICBpZihjb250cm9sbGVyLmlkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyLmlkID0gZ2FtZXBhZElkO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXZlbnQgdG8gc2VuZCB0aGUgZ2FtZXBhZGNvbm5lY3RlZCBtZXNzYWdlIHRvIHRoZSBhcHBsaWNhdGlvblxuICAgICAqL1xuICAgIG9uR2FtZXBhZENvbm5lY3RlZCgpIHtcbiAgICAgICAgLy8gRGVmYXVsdCBGdW5jdGlvbmFsaXR5OiBEbyBOb3RoaW5nXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXZlbnQgdG8gc2VuZCB0aGUgZ2FtZXBhZGRpc2Nvbm5lY3RlZCBtZXNzYWdlIHRvIHRoZSBhcHBsaWNhdGlvblxuICAgICAqL1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcbiAgICBvbkdhbWVwYWREaXNjb25uZWN0ZWQoY29udHJvbGxlcklkeDogbnVtYmVyKSB7XG4gICAgICAgIC8vIERlZmF1bHQgRnVuY3Rpb25hbGl0eTogRG8gTm90aGluZ1xuICAgIH1cbn1cblxuXG5cbi8qKlxuICogQWRkaXRpb25hbCB0eXBlcyBmb3IgV2luZG93IGFuZCBOYXZpZ2F0b3JcbiAqL1xuZGVjbGFyZSBnbG9iYWwge1xuICAgIGludGVyZmFjZSBXaW5kb3cge1xuICAgICAgICBtb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWUoY2FsbGJhY2s6IEZyYW1lUmVxdWVzdENhbGxiYWNrKTogbnVtYmVyO1xuICAgICAgICB3ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUoY2FsbGJhY2s6IEZyYW1lUmVxdWVzdENhbGxiYWNrKTogbnVtYmVyO1xuICAgIH1cblxuICAgIGludGVyZmFjZSBOYXZpZ2F0b3Ige1xuICAgICAgICB3ZWJraXRHZXRHYW1lcGFkcygpOiBHYW1lcGFkW107XG4gICAgfVxufVxuXG4vKipcbiAqIEdhbWVwYWQgbGF5b3V0IGNvZGVzIGVudW1cbiAqL1xuZXhwb3J0IGVudW0gZ2FtZXBhZExheW91dCB7XG4gICAgUmlnaHRDbHVzdGVyQm90dG9tQnV0dG9uID0gMCxcbiAgICBSaWdodENsdXN0ZXJSaWdodEJ1dHRvbiA9IDEsXG4gICAgUmlnaHRDbHVzdGVyTGVmdEJ1dHRvbiA9IDIsXG4gICAgUmlnaHRDbHVzdGVyVG9wQnV0dG9uID0gMyxcbiAgICBMZWZ0U2hvdWxkZXIgPSA0LFxuICAgIFJpZ2h0U2hvdWxkZXIgPSA1LFxuICAgIExlZnRUcmlnZ2VyID0gNixcbiAgICBSaWdodFRyaWdnZXIgPSA3LFxuICAgIFNlbGVjdE9yQmFjayA9IDgsXG4gICAgU3RhcnRPckZvcndhcmQgPSA5LFxuICAgIExlZnRBbmFsb2dQcmVzcyA9IDEwLFxuICAgIFJpZ2h0QW5hbG9nUHJlc3MgPSAxMSxcbiAgICBMZWZ0Q2x1c3RlclRvcEJ1dHRvbiA9IDEyLFxuICAgIExlZnRDbHVzdGVyQm90dG9tQnV0dG9uID0gMTMsXG4gICAgTGVmdENsdXN0ZXJMZWZ0QnV0dG9uID0gMTQsXG4gICAgTGVmdENsdXN0ZXJSaWdodEJ1dHRvbiA9IDE1LFxuICAgIENlbnRyZUJ1dHRvbiA9IDE2LFxuICAgIC8vIEF4ZXNcbiAgICBMZWZ0U3RpY2tIb3Jpem9udGFsID0gMCxcbiAgICBMZWZ0U3RpY2tWZXJ0aWNhbCA9IDEsXG4gICAgUmlnaHRTdGlja0hvcml6b250YWwgPSAyLFxuICAgIFJpZ2h0U3RpY2tWZXJ0aWNhbCA9IDNcbn1cbiIsIi8vIENvcHlyaWdodCBFcGljIEdhbWVzLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG5cbmltcG9ydCB7IE1vdXNlQ29udHJvbGxlciB9IGZyb20gJy4vTW91c2VDb250cm9sbGVyJztcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJy4uL0xvZ2dlci9Mb2dnZXInO1xuaW1wb3J0IHsgSU1vdXNlRXZlbnRzIH0gZnJvbSAnLi9JTW91c2VFdmVudHMnO1xuXG4vKipcbiAqIFZpZGVvIFBsYXllciBtb3VzZSBIb3ZlciBoYW5kbGVyXG4gKi9cbmV4cG9ydCBjbGFzcyBIb3ZlcmluZ01vdXNlRXZlbnRzIGltcGxlbWVudHMgSU1vdXNlRXZlbnRzIHtcbiAgICBtb3VzZUNvbnRyb2xsZXI6IE1vdXNlQ29udHJvbGxlcjtcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSBtb3VzZUNvbnRyb2xsZXIgLSBNb3VzZSBDb250cm9sbGVyIGluc3RhbmNlXG4gICAgICovXG4gICAgY29uc3RydWN0b3IobW91c2VDb250cm9sbGVyOiBNb3VzZUNvbnRyb2xsZXIpIHtcbiAgICAgICAgdGhpcy5tb3VzZUNvbnRyb2xsZXIgPSBtb3VzZUNvbnRyb2xsZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVW5yZWdpc3RlciBldmVudCBoYW5kbGVyc1xuICAgICAqL1xuICAgIHVucmVnaXN0ZXJNb3VzZUV2ZW50cygpOiB2b2lkIHtcbiAgICAgICAgLy8gZW1wdHkgZm9yIEhvdmVyaW5nTW91c2VFdmVudHMgaW1wbGVtZW50YXRpb25cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIYW5kbGUgdGhlIG1vdXNlIG1vdmUgZXZlbnQsIHNlbmRzIHRoZSBtb3VzZSBkYXRhIHRvIHRoZSBVRSBJbnN0YW5jZVxuICAgICAqIEBwYXJhbSBtb3VzZUV2ZW50IC0gTW91c2UgRXZlbnRcbiAgICAgKi9cbiAgICB1cGRhdGVNb3VzZU1vdmVQb3NpdGlvbihtb3VzZUV2ZW50OiBNb3VzZUV2ZW50KSB7XG4gICAgICAgIGlmICghdGhpcy5tb3VzZUNvbnRyb2xsZXIudmlkZW9FbGVtZW50UHJvdmlkZXIuaXNWaWRlb1JlYWR5KCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBMb2dnZXIuTG9nKExvZ2dlci5HZXRTdGFja1RyYWNlKCksICdNb3VzZU1vdmUnLCA2KTtcbiAgICAgICAgY29uc3QgY29vcmQgPVxuICAgICAgICAgICAgdGhpcy5tb3VzZUNvbnRyb2xsZXIuY29vcmRpbmF0ZUNvbnZlcnRlci5ub3JtYWxpemVBbmRRdWFudGl6ZVVuc2lnbmVkKFxuICAgICAgICAgICAgICAgIG1vdXNlRXZlbnQub2Zmc2V0WCxcbiAgICAgICAgICAgICAgICBtb3VzZUV2ZW50Lm9mZnNldFlcbiAgICAgICAgICAgICk7XG4gICAgICAgIGNvbnN0IGRlbHRhID1cbiAgICAgICAgICAgIHRoaXMubW91c2VDb250cm9sbGVyLmNvb3JkaW5hdGVDb252ZXJ0ZXIubm9ybWFsaXplQW5kUXVhbnRpemVTaWduZWQoXG4gICAgICAgICAgICAgICAgbW91c2VFdmVudC5tb3ZlbWVudFgsXG4gICAgICAgICAgICAgICAgbW91c2VFdmVudC5tb3ZlbWVudFlcbiAgICAgICAgICAgICk7XG4gICAgICAgIGNvbnN0IHRvU3RyZWFtZXJIYW5kbGVycyA9XG4gICAgICAgICAgICB0aGlzLm1vdXNlQ29udHJvbGxlci50b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlci50b1N0cmVhbWVySGFuZGxlcnM7XG4gICAgICAgIHRvU3RyZWFtZXJIYW5kbGVycy5nZXQoJ01vdXNlTW92ZScpKFtcbiAgICAgICAgICAgIGNvb3JkLngsXG4gICAgICAgICAgICBjb29yZC55LFxuICAgICAgICAgICAgZGVsdGEueCxcbiAgICAgICAgICAgIGRlbHRhLnlcbiAgICAgICAgXSk7XG4gICAgICAgIG1vdXNlRXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIYW5kbGUgdGhlIG1vdXNlIERvd24gZXZlbnQsIHNlbmRzIHRoZSBtb3VzZSBkYXRhIHRvIHRoZSBVRSBJbnN0YW5jZVxuICAgICAqIEBwYXJhbSBtb3VzZUV2ZW50IC0gTW91c2UgRXZlbnRcbiAgICAgKi9cbiAgICBoYW5kbGVNb3VzZURvd24obW91c2VFdmVudDogTW91c2VFdmVudCkge1xuICAgICAgICBpZiAoIXRoaXMubW91c2VDb250cm9sbGVyLnZpZGVvRWxlbWVudFByb3ZpZGVyLmlzVmlkZW9SZWFkeSgpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgTG9nZ2VyLkxvZyhMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnb25Nb3VzZSBEb3duJywgNik7XG4gICAgICAgIGNvbnN0IGNvb3JkID1cbiAgICAgICAgICAgIHRoaXMubW91c2VDb250cm9sbGVyLmNvb3JkaW5hdGVDb252ZXJ0ZXIubm9ybWFsaXplQW5kUXVhbnRpemVVbnNpZ25lZChcbiAgICAgICAgICAgICAgICBtb3VzZUV2ZW50Lm9mZnNldFgsXG4gICAgICAgICAgICAgICAgbW91c2VFdmVudC5vZmZzZXRZXG4gICAgICAgICAgICApO1xuICAgICAgICBjb25zdCB0b1N0cmVhbWVySGFuZGxlcnMgPVxuICAgICAgICAgICAgdGhpcy5tb3VzZUNvbnRyb2xsZXIudG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXIudG9TdHJlYW1lckhhbmRsZXJzO1xuICAgICAgICB0b1N0cmVhbWVySGFuZGxlcnMuZ2V0KCdNb3VzZURvd24nKShbXG4gICAgICAgICAgICBtb3VzZUV2ZW50LmJ1dHRvbixcbiAgICAgICAgICAgIGNvb3JkLngsXG4gICAgICAgICAgICBjb29yZC55XG4gICAgICAgIF0pO1xuICAgICAgICBtb3VzZUV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGFuZGxlIHRoZSBtb3VzZSBVcCBldmVudCwgc2VuZHMgdGhlIG1vdXNlIGRhdGEgdG8gdGhlIFVFIEluc3RhbmNlXG4gICAgICogQHBhcmFtIG1vdXNlRXZlbnQgLSBNb3VzZSBFdmVudFxuICAgICAqL1xuICAgIGhhbmRsZU1vdXNlVXAobW91c2VFdmVudDogTW91c2VFdmVudCkge1xuICAgICAgICBpZiAoIXRoaXMubW91c2VDb250cm9sbGVyLnZpZGVvRWxlbWVudFByb3ZpZGVyLmlzVmlkZW9SZWFkeSgpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY29vcmQgPVxuICAgICAgICAgICAgdGhpcy5tb3VzZUNvbnRyb2xsZXIuY29vcmRpbmF0ZUNvbnZlcnRlci5ub3JtYWxpemVBbmRRdWFudGl6ZVVuc2lnbmVkKFxuICAgICAgICAgICAgICAgIG1vdXNlRXZlbnQub2Zmc2V0WCxcbiAgICAgICAgICAgICAgICBtb3VzZUV2ZW50Lm9mZnNldFlcbiAgICAgICAgICAgICk7XG4gICAgICAgIGNvbnN0IHRvU3RyZWFtZXJIYW5kbGVycyA9XG4gICAgICAgICAgICB0aGlzLm1vdXNlQ29udHJvbGxlci50b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlci50b1N0cmVhbWVySGFuZGxlcnM7XG4gICAgICAgIHRvU3RyZWFtZXJIYW5kbGVycy5nZXQoJ01vdXNlVXAnKShbXG4gICAgICAgICAgICBtb3VzZUV2ZW50LmJ1dHRvbixcbiAgICAgICAgICAgIGNvb3JkLngsXG4gICAgICAgICAgICBjb29yZC55XG4gICAgICAgIF0pO1xuICAgICAgICBtb3VzZUV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGFuZGxlIHRoZSBtb3VzZSBjb250ZXh0IG1lbnUgZXZlbnQsIHNlbmRzIHRoZSBtb3VzZSBkYXRhIHRvIHRoZSBVRSBJbnN0YW5jZVxuICAgICAqIEBwYXJhbSBtb3VzZUV2ZW50IC0gTW91c2UgRXZlbnRcbiAgICAgKi9cbiAgICBoYW5kbGVDb250ZXh0TWVudShtb3VzZUV2ZW50OiBNb3VzZUV2ZW50KSB7XG4gICAgICAgIGlmICghdGhpcy5tb3VzZUNvbnRyb2xsZXIudmlkZW9FbGVtZW50UHJvdmlkZXIuaXNWaWRlb1JlYWR5KCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjb29yZCA9XG4gICAgICAgICAgICB0aGlzLm1vdXNlQ29udHJvbGxlci5jb29yZGluYXRlQ29udmVydGVyLm5vcm1hbGl6ZUFuZFF1YW50aXplVW5zaWduZWQoXG4gICAgICAgICAgICAgICAgbW91c2VFdmVudC5vZmZzZXRYLFxuICAgICAgICAgICAgICAgIG1vdXNlRXZlbnQub2Zmc2V0WVxuICAgICAgICAgICAgKTtcbiAgICAgICAgY29uc3QgdG9TdHJlYW1lckhhbmRsZXJzID1cbiAgICAgICAgICAgIHRoaXMubW91c2VDb250cm9sbGVyLnRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyLnRvU3RyZWFtZXJIYW5kbGVycztcbiAgICAgICAgdG9TdHJlYW1lckhhbmRsZXJzLmdldCgnTW91c2VVcCcpKFtcbiAgICAgICAgICAgIG1vdXNlRXZlbnQuYnV0dG9uLFxuICAgICAgICAgICAgY29vcmQueCxcbiAgICAgICAgICAgIGNvb3JkLnlcbiAgICAgICAgXSk7XG4gICAgICAgIG1vdXNlRXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIYW5kbGUgdGhlIG1vdXNlIHdoZWVsIGV2ZW50LCBzZW5kcyB0aGUgbW91c2Ugd2hlZWwgZGF0YSB0byB0aGUgVUUgSW5zdGFuY2VcbiAgICAgKiBAcGFyYW0gd2hlZWxFdmVudCAtIE1vdXNlIEV2ZW50XG4gICAgICovXG4gICAgaGFuZGxlTW91c2VXaGVlbCh3aGVlbEV2ZW50OiBXaGVlbEV2ZW50KSB7XG4gICAgICAgIGlmICghdGhpcy5tb3VzZUNvbnRyb2xsZXIudmlkZW9FbGVtZW50UHJvdmlkZXIuaXNWaWRlb1JlYWR5KCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjb29yZCA9XG4gICAgICAgICAgICB0aGlzLm1vdXNlQ29udHJvbGxlci5jb29yZGluYXRlQ29udmVydGVyLm5vcm1hbGl6ZUFuZFF1YW50aXplVW5zaWduZWQoXG4gICAgICAgICAgICAgICAgd2hlZWxFdmVudC5vZmZzZXRYLFxuICAgICAgICAgICAgICAgIHdoZWVsRXZlbnQub2Zmc2V0WVxuICAgICAgICAgICAgKTtcbiAgICAgICAgY29uc3QgdG9TdHJlYW1lckhhbmRsZXJzID1cbiAgICAgICAgICAgIHRoaXMubW91c2VDb250cm9sbGVyLnRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyLnRvU3RyZWFtZXJIYW5kbGVycztcbiAgICAgICAgdG9TdHJlYW1lckhhbmRsZXJzLmdldCgnTW91c2VXaGVlbCcpKFtcbiAgICAgICAgICAgIHdoZWVsRXZlbnQud2hlZWxEZWx0YSxcbiAgICAgICAgICAgIGNvb3JkLngsXG4gICAgICAgICAgICBjb29yZC55XG4gICAgICAgIF0pO1xuICAgICAgICB3aGVlbEV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGFuZGxlIHRoZSBtb3VzZSBkb3VibGUgY2xpY2sgZXZlbnQsIHNlbmRzIHRoZSBtb3VzZSBkYXRhIHRvIHRoZSBVRSBJbnN0YW5jZVxuICAgICAqIEBwYXJhbSBtb3VzZUV2ZW50IC0gTW91c2UgRXZlbnRcbiAgICAgKi9cbiAgICBoYW5kbGVNb3VzZURvdWJsZShtb3VzZUV2ZW50OiBNb3VzZUV2ZW50KSB7XG4gICAgICAgIGlmICghdGhpcy5tb3VzZUNvbnRyb2xsZXIudmlkZW9FbGVtZW50UHJvdmlkZXIuaXNWaWRlb1JlYWR5KCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjb29yZCA9XG4gICAgICAgICAgICB0aGlzLm1vdXNlQ29udHJvbGxlci5jb29yZGluYXRlQ29udmVydGVyLm5vcm1hbGl6ZUFuZFF1YW50aXplVW5zaWduZWQoXG4gICAgICAgICAgICAgICAgbW91c2VFdmVudC5vZmZzZXRYLFxuICAgICAgICAgICAgICAgIG1vdXNlRXZlbnQub2Zmc2V0WVxuICAgICAgICAgICAgKTtcbiAgICAgICAgY29uc3QgdG9TdHJlYW1lckhhbmRsZXJzID1cbiAgICAgICAgICAgIHRoaXMubW91c2VDb250cm9sbGVyLnRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyLnRvU3RyZWFtZXJIYW5kbGVycztcbiAgICAgICAgdG9TdHJlYW1lckhhbmRsZXJzLmdldCgnTW91c2VEb3VibGUnKShbXG4gICAgICAgICAgICBtb3VzZUV2ZW50LmJ1dHRvbixcbiAgICAgICAgICAgIGNvb3JkLngsXG4gICAgICAgICAgICBjb29yZC55XG4gICAgICAgIF0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhhbmRsZSB0aGUgcHJlc3MgbW91c2UgYnV0dG9ucyBldmVudCwgc2VuZHMgdGhlIG1vdXNlIGRhdGEgdG8gdGhlIFVFIEluc3RhbmNlXG4gICAgICogQHBhcmFtIG1vdXNlRXZlbnQgLSBNb3VzZSBFdmVudFxuICAgICAqL1xuICAgIGhhbmRsZVByZXNzTW91c2VCdXR0b25zKG1vdXNlRXZlbnQ6IE1vdXNlRXZlbnQpIHtcbiAgICAgICAgaWYgKCF0aGlzLm1vdXNlQ29udHJvbGxlci52aWRlb0VsZW1lbnRQcm92aWRlci5pc1ZpZGVvUmVhZHkoKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubW91c2VDb250cm9sbGVyLnByZXNzTW91c2VCdXR0b25zKFxuICAgICAgICAgICAgbW91c2VFdmVudC5idXR0b25zLFxuICAgICAgICAgICAgbW91c2VFdmVudC5vZmZzZXRYLFxuICAgICAgICAgICAgbW91c2VFdmVudC5vZmZzZXRZXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGFuZGxlIHRoZSByZWxlYXNlIG1vdXNlIGJ1dHRvbnMgZXZlbnQsIHNlbmRzIHRoZSBtb3VzZSBkYXRhIHRvIHRoZSBVRSBJbnN0YW5jZVxuICAgICAqIEBwYXJhbSBtb3VzZUV2ZW50IC0gTW91c2UgRXZlbnRcbiAgICAgKi9cbiAgICBoYW5kbGVSZWxlYXNlTW91c2VCdXR0b25zKG1vdXNlRXZlbnQ6IE1vdXNlRXZlbnQpIHtcbiAgICAgICAgaWYgKCF0aGlzLm1vdXNlQ29udHJvbGxlci52aWRlb0VsZW1lbnRQcm92aWRlci5pc1ZpZGVvUmVhZHkoKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubW91c2VDb250cm9sbGVyLnJlbGVhc2VNb3VzZUJ1dHRvbnMoXG4gICAgICAgICAgICBtb3VzZUV2ZW50LmJ1dHRvbnMsXG4gICAgICAgICAgICBtb3VzZUV2ZW50Lm9mZnNldFgsXG4gICAgICAgICAgICBtb3VzZUV2ZW50Lm9mZnNldFlcbiAgICAgICAgKTtcbiAgICB9XG59XG4iLCIvLyBDb3B5cmlnaHQgRXBpYyBHYW1lcywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXG5pbXBvcnQgeyBGYWtlVG91Y2hDb250cm9sbGVyIH0gZnJvbSAnLi9GYWtlVG91Y2hDb250cm9sbGVyJztcbmltcG9ydCB7IEtleWJvYXJkQ29udHJvbGxlciB9IGZyb20gJy4vS2V5Ym9hcmRDb250cm9sbGVyJztcbmltcG9ydCB7IE1vdXNlQ29udHJvbGxlciB9IGZyb20gJy4vTW91c2VDb250cm9sbGVyJztcbmltcG9ydCB7IFRvdWNoQ29udHJvbGxlciB9IGZyb20gJy4vVG91Y2hDb250cm9sbGVyJztcbmltcG9ydCB7IEdhbWVQYWRDb250cm9sbGVyIH0gZnJvbSAnLi9HYW1lcGFkQ29udHJvbGxlcic7XG5pbXBvcnQgeyBDb25maWcsIENvbnRyb2xTY2hlbWVUeXBlIH0gZnJvbSAnLi4vQ29uZmlnL0NvbmZpZyc7XG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tICcuLi9Mb2dnZXIvTG9nZ2VyJztcbmltcG9ydCB7IENvb3JkaW5hdGVDb252ZXJ0ZXIgfSBmcm9tICcuLi9VdGlsL0Nvb3JkaW5hdGVDb252ZXJ0ZXInO1xuaW1wb3J0IHsgU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIgfSBmcm9tICcuLi9VZUluc3RhbmNlTWVzc2FnZS9TdHJlYW1NZXNzYWdlQ29udHJvbGxlcic7XG5pbXBvcnQgeyBWaWRlb1BsYXllciB9IGZyb20gJy4uL1ZpZGVvUGxheWVyL1ZpZGVvUGxheWVyJztcblxuLyoqXG4gKiBDbGFzcyBmb3IgbWFraW5nIGFuZCBzZXR0aW5nIHVwIGlucHV0IGNsYXNzIHR5cGVzXG4gKi9cbmV4cG9ydCBjbGFzcyBJbnB1dENsYXNzZXNGYWN0b3J5IHtcbiAgICB0b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlcjogU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXI7XG4gICAgdmlkZW9FbGVtZW50UHJvdmlkZXI6IFZpZGVvUGxheWVyO1xuICAgIGNvb3JkaW5hdGVDb252ZXJ0ZXI6IENvb3JkaW5hdGVDb252ZXJ0ZXI7XG4gICAgYWN0aXZlS2V5czogQWN0aXZlS2V5cyA9IG5ldyBBY3RpdmVLZXlzKCk7XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gdG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXIgLSBTdHJlYW0gbWVzc2FnZSBpbnN0YW5jZVxuICAgICAqIEBwYXJhbSB2aWRlb0VsZW1lbnRQcm92aWRlciAtIFZpZGVvIFBsYXllciBpbnN0YW5jZVxuICAgICAqIEBwYXJhbSBjb29yZGluYXRlQ29udmVydGVyIC0gQSBjb29yZGluYXRlQ29udmVydGVyIGluc3RhbmNlXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyOiBTdHJlYW1NZXNzYWdlQ29udHJvbGxlcixcbiAgICAgICAgdmlkZW9FbGVtZW50UHJvdmlkZXI6IFZpZGVvUGxheWVyLFxuICAgICAgICBjb29yZGluYXRlQ29udmVydGVyOiBDb29yZGluYXRlQ29udmVydGVyXG4gICAgKSB7XG4gICAgICAgIHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXIgPSB0b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlcjtcbiAgICAgICAgdGhpcy52aWRlb0VsZW1lbnRQcm92aWRlciA9IHZpZGVvRWxlbWVudFByb3ZpZGVyO1xuICAgICAgICB0aGlzLmNvb3JkaW5hdGVDb252ZXJ0ZXIgPSBjb29yZGluYXRlQ29udmVydGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVycyBicm93c2VyIGtleSBldmVudHMuXG4gICAgICovXG4gICAgcmVnaXN0ZXJLZXlCb2FyZChjb25maWc6IENvbmZpZykge1xuICAgICAgICBMb2dnZXIuTG9nKExvZ2dlci5HZXRTdGFja1RyYWNlKCksICdSZWdpc3RlciBLZXlib2FyZCBFdmVudHMnLCA3KTtcbiAgICAgICAgY29uc3Qga2V5Ym9hcmRDb250cm9sbGVyID0gbmV3IEtleWJvYXJkQ29udHJvbGxlcihcbiAgICAgICAgICAgIHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXIsXG4gICAgICAgICAgICBjb25maWcsXG4gICAgICAgICAgICB0aGlzLmFjdGl2ZUtleXNcbiAgICAgICAgKTtcbiAgICAgICAga2V5Ym9hcmRDb250cm9sbGVyLnJlZ2lzdGVyS2V5Qm9hcmRFdmVudHMoKTtcbiAgICAgICAgcmV0dXJuIGtleWJvYXJkQ29udHJvbGxlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiByZWdpc3RlciBtb3VzZSBldmVudHMgYmFzZWQgb24gYSBjb250cm9sIHR5cGVcbiAgICAgKiBAcGFyYW0gY29udHJvbFNjaGVtZSAtIGlmIHRoZSBtb3VzZSBpcyBlaXRoZXIgaG92ZXJpbmcgb3IgbG9ja2VkXG4gICAgICovXG4gICAgcmVnaXN0ZXJNb3VzZShjb250cm9sU2NoZW1lOiBDb250cm9sU2NoZW1lVHlwZSkge1xuICAgICAgICBMb2dnZXIuTG9nKExvZ2dlci5HZXRTdGFja1RyYWNlKCksICdSZWdpc3RlciBNb3VzZSBFdmVudHMnLCA3KTtcbiAgICAgICAgY29uc3QgbW91c2VDb250cm9sbGVyID0gbmV3IE1vdXNlQ29udHJvbGxlcihcbiAgICAgICAgICAgIHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXIsXG4gICAgICAgICAgICB0aGlzLnZpZGVvRWxlbWVudFByb3ZpZGVyLFxuICAgICAgICAgICAgdGhpcy5jb29yZGluYXRlQ29udmVydGVyLFxuICAgICAgICAgICAgdGhpcy5hY3RpdmVLZXlzXG4gICAgICAgICk7XG5cbiAgICAgICAgc3dpdGNoIChjb250cm9sU2NoZW1lKSB7XG4gICAgICAgICAgICBjYXNlIENvbnRyb2xTY2hlbWVUeXBlLkxvY2tlZE1vdXNlOlxuICAgICAgICAgICAgICAgIG1vdXNlQ29udHJvbGxlci5yZWdpc3RlckxvY2tlZE1vdXNlRXZlbnRzKG1vdXNlQ29udHJvbGxlcik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIENvbnRyb2xTY2hlbWVUeXBlLkhvdmVyaW5nTW91c2U6XG4gICAgICAgICAgICAgICAgbW91c2VDb250cm9sbGVyLnJlZ2lzdGVySG92ZXJpbmdNb3VzZUV2ZW50cyhtb3VzZUNvbnRyb2xsZXIpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBMb2dnZXIuSW5mbyhcbiAgICAgICAgICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcbiAgICAgICAgICAgICAgICAgICAgJ3Vua25vd24gQ29udHJvbCBTY2hlbWUgVHlwZSBEZWZhdWx0aW5nIHRvIExvY2tlZCBNb3VzZSBFdmVudHMnXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBtb3VzZUNvbnRyb2xsZXIucmVnaXN0ZXJMb2NrZWRNb3VzZUV2ZW50cyhtb3VzZUNvbnRyb2xsZXIpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG1vdXNlQ29udHJvbGxlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiByZWdpc3RlciB0b3VjaCBldmVudHNcbiAgICAgKiBAcGFyYW0gZmFrZU1vdXNlVG91Y2ggLSB0aGUgZmFrZWQgbW91c2UgdG91Y2ggZXZlbnRcbiAgICAgKi9cbiAgICByZWdpc3RlclRvdWNoKFxuICAgICAgICBmYWtlTW91c2VUb3VjaDogYm9vbGVhbixcbiAgICAgICAgdmlkZW9FbGVtZW50UGFyZW50Q2xpZW50UmVjdDogRE9NUmVjdFxuICAgICkge1xuICAgICAgICBMb2dnZXIuTG9nKExvZ2dlci5HZXRTdGFja1RyYWNlKCksICdSZWdpc3RlcmluZyBUb3VjaCcsIDYpO1xuICAgICAgICBpZiAoZmFrZU1vdXNlVG91Y2gpIHtcbiAgICAgICAgICAgIGNvbnN0IGZha2VUb3VjaENvbnRyb2xsZXIgPSBuZXcgRmFrZVRvdWNoQ29udHJvbGxlcihcbiAgICAgICAgICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyLFxuICAgICAgICAgICAgICAgIHRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIsXG4gICAgICAgICAgICAgICAgdGhpcy5jb29yZGluYXRlQ29udmVydGVyXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgZmFrZVRvdWNoQ29udHJvbGxlci5zZXRWaWRlb0VsZW1lbnRQYXJlbnRDbGllbnRSZWN0KFxuICAgICAgICAgICAgICAgIHZpZGVvRWxlbWVudFBhcmVudENsaWVudFJlY3RcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICByZXR1cm4gZmFrZVRvdWNoQ29udHJvbGxlcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgVG91Y2hDb250cm9sbGVyKFxuICAgICAgICAgICAgICAgIHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXIsXG4gICAgICAgICAgICAgICAgdGhpcy52aWRlb0VsZW1lbnRQcm92aWRlcixcbiAgICAgICAgICAgICAgICB0aGlzLmNvb3JkaW5hdGVDb252ZXJ0ZXJcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiByZWdpc3RlcnMgYSBnYW1lcGFkXG4gICAgICovXG4gICAgcmVnaXN0ZXJHYW1lUGFkKCkge1xuICAgICAgICBMb2dnZXIuTG9nKExvZ2dlci5HZXRTdGFja1RyYWNlKCksICdSZWdpc3RlciBHYW1lIFBhZCcsIDcpO1xuICAgICAgICBjb25zdCBnYW1lUGFkQ29udHJvbGxlciA9IG5ldyBHYW1lUGFkQ29udHJvbGxlcihcbiAgICAgICAgICAgIHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXJcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIGdhbWVQYWRDb250cm9sbGVyO1xuICAgIH1cbn1cblxuLyoqXG4gKiBBIGNsYXNzIHRoYXQga2VlcHMgdHJhY2sgb2YgY3VycmVudCBhY3RpdmUga2V5c1xuICovXG5leHBvcnQgY2xhc3MgQWN0aXZlS2V5cyB7XG4gICAgYWN0aXZlS2V5czogQXJyYXk8bnVtYmVyPiA9IFtdO1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmFjdGl2ZUtleXMgPSBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGN1cnJlbnQgYXJyYXkgb2YgYWN0aXZlIGtleXNcbiAgICAgKiBAcmV0dXJucyAtIGFuIGFycmF5IG9mIGFjdGl2ZSBrZXlzXG4gICAgICovXG4gICAgZ2V0QWN0aXZlS2V5cygpOiBudW1iZXJbXSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFjdGl2ZUtleXM7XG4gICAgfVxufVxuIiwiLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuaW1wb3J0IHsgU3BlY2lhbEtleUNvZGVzIH0gZnJvbSAnLi9TcGVjaWFsS2V5Q29kZXMnO1xuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSAnLi4vTG9nZ2VyL0xvZ2dlcic7XG5pbXBvcnQgeyBBY3RpdmVLZXlzIH0gZnJvbSAnLi9JbnB1dENsYXNzZXNGYWN0b3J5JztcbmltcG9ydCB7IFN0cmVhbU1lc3NhZ2VDb250cm9sbGVyIH0gZnJvbSAnLi4vVWVJbnN0YW5jZU1lc3NhZ2UvU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXInO1xuaW1wb3J0IHsgQ29uZmlnLCBGbGFncyB9IGZyb20gJy4uL0NvbmZpZy9Db25maWcnO1xuaW1wb3J0IHsgRXZlbnRMaXN0ZW5lclRyYWNrZXIgfSBmcm9tICcuLi9VdGlsL0V2ZW50TGlzdGVuZXJUcmFja2VyJztcblxuaW50ZXJmYWNlIElDb2RlVG9LZXlDb2RlIHtcbiAgICBba2V5OiBzdHJpbmddOiBudW1iZXI7XG59XG5cbi8qKlxuICogSGFuZGxlcyB0aGUgS2V5Ym9hcmQgSW5wdXRzIGZvciB0aGUgZG9jdW1lbnRcbiAqL1xuZXhwb3J0IGNsYXNzIEtleWJvYXJkQ29udHJvbGxlciB7XG4gICAgdG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXI6IFN0cmVhbU1lc3NhZ2VDb250cm9sbGVyO1xuICAgIGFjdGl2ZUtleXNQcm92aWRlcjogQWN0aXZlS2V5cztcbiAgICBjb25maWc6IENvbmZpZztcblxuICAgIC8vIFV0aWxpdHkgZm9yIGtlZXBpbmcgdHJhY2sgb2YgZXZlbnQgaGFuZGxlcnMgYW5kIHVucmVnaXN0ZXJpbmcgdGhlbVxuICAgIHByaXZhdGUga2V5Ym9hcmRFdmVudExpc3RlbmVyVHJhY2tlciA9IG5ldyBFdmVudExpc3RlbmVyVHJhY2tlcigpO1xuXG4gICAgLypcbiAgICAgKiBOZXcgYnJvd3NlciBBUElzIGhhdmUgbW92ZWQgYXdheSBmcm9tIEtleWJvYXJkRXZlbnQua2V5Q29kZSB0byBLZXlib2FyZEV2ZW50LkNvZGUuXG4gICAgICogRm9yIGRldGFpbHMgc2VlOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvS2V5Ym9hcmRFdmVudC9rZXlDb2RlI2NvbnN0YW50c19mb3Jfa2V5Y29kZV92YWx1ZVxuICAgICAqIFdlIHN0aWxsIHVzZSBvbGQgS2V5Ym9hcmRFdmVudC5rZXlDb2RlIGludGVnZXJzIGluIHRoZSBVRSBDKysgc2lkZSwgc28gd2UgbmVlZCBhIHdheSB0byBtYXAgdGhlIG5ld1xuICAgICAqIHN0cmluZy1iYXNlZCBLZXlib2FyZEV2ZW50LkNvZGUgdG8gdGhlIG9sZCBpbnRlZ2Vycy5cbiAgICAgKi9cbiAgICBDb2RlVG9LZXlDb2RlOiBJQ29kZVRvS2V5Q29kZSA9IHtcbiAgICAgICAgRXNjYXBlOiAyNyxcbiAgICAgICAgRGlnaXQwOiA0OCxcbiAgICAgICAgRGlnaXQxOiA0OSxcbiAgICAgICAgRGlnaXQyOiA1MCxcbiAgICAgICAgRGlnaXQzOiA1MSxcbiAgICAgICAgRGlnaXQ0OiA1MixcbiAgICAgICAgRGlnaXQ1OiA1MyxcbiAgICAgICAgRGlnaXQ2OiA1NCxcbiAgICAgICAgRGlnaXQ3OiA1NSxcbiAgICAgICAgRGlnaXQ4OiA1NixcbiAgICAgICAgRGlnaXQ5OiA1NyxcbiAgICAgICAgTWludXM6IDE3MyxcbiAgICAgICAgRXF1YWw6IDE4NyxcbiAgICAgICAgQmFja3NwYWNlOiA4LFxuICAgICAgICBUYWI6IDksXG4gICAgICAgIEtleVE6IDgxLFxuICAgICAgICBLZXlXOiA4NyxcbiAgICAgICAgS2V5RTogNjksXG4gICAgICAgIEtleVI6IDgyLFxuICAgICAgICBLZXlUOiA4NCxcbiAgICAgICAgS2V5WTogODksXG4gICAgICAgIEtleVU6IDg1LFxuICAgICAgICBLZXlJOiA3MyxcbiAgICAgICAgS2V5TzogNzksXG4gICAgICAgIEtleVA6IDgwLFxuICAgICAgICBCcmFja2V0TGVmdDogMjE5LFxuICAgICAgICBCcmFja2V0UmlnaHQ6IDIyMSxcbiAgICAgICAgRW50ZXI6IDEzLFxuICAgICAgICBDb250cm9sTGVmdDogMTcsXG4gICAgICAgIEtleUE6IDY1LFxuICAgICAgICBLZXlTOiA4MyxcbiAgICAgICAgS2V5RDogNjgsXG4gICAgICAgIEtleUY6IDcwLFxuICAgICAgICBLZXlHOiA3MSxcbiAgICAgICAgS2V5SDogNzIsXG4gICAgICAgIEtleUo6IDc0LFxuICAgICAgICBLZXlLOiA3NSxcbiAgICAgICAgS2V5TDogNzYsXG4gICAgICAgIFNlbWljb2xvbjogMTg2LFxuICAgICAgICBRdW90ZTogMjIyLFxuICAgICAgICBCYWNrcXVvdGU6IDE5MixcbiAgICAgICAgU2hpZnRMZWZ0OiAxNixcbiAgICAgICAgQmFja3NsYXNoOiAyMjAsXG4gICAgICAgIEtleVo6IDkwLFxuICAgICAgICBLZXlYOiA4OCxcbiAgICAgICAgS2V5QzogNjcsXG4gICAgICAgIEtleVY6IDg2LFxuICAgICAgICBLZXlCOiA2NixcbiAgICAgICAgS2V5TjogNzgsXG4gICAgICAgIEtleU06IDc3LFxuICAgICAgICBDb21tYTogMTg4LFxuICAgICAgICBQZXJpb2Q6IDE5MCxcbiAgICAgICAgU2xhc2g6IDE5MSxcbiAgICAgICAgU2hpZnRSaWdodDogMjUzLFxuICAgICAgICBBbHRMZWZ0OiAxOCxcbiAgICAgICAgU3BhY2U6IDMyLFxuICAgICAgICBDYXBzTG9jazogMjAsXG4gICAgICAgIEYxOiAxMTIsXG4gICAgICAgIEYyOiAxMTMsXG4gICAgICAgIEYzOiAxMTQsXG4gICAgICAgIEY0OiAxMTUsXG4gICAgICAgIEY1OiAxMTYsXG4gICAgICAgIEY2OiAxMTcsXG4gICAgICAgIEY3OiAxMTgsXG4gICAgICAgIEY4OiAxMTksXG4gICAgICAgIEY5OiAxMjAsXG4gICAgICAgIEYxMDogMTIxLFxuICAgICAgICBGMTE6IDEyMixcbiAgICAgICAgRjEyOiAxMjMsXG4gICAgICAgIFBhdXNlOiAxOSxcbiAgICAgICAgU2Nyb2xsTG9jazogMTQ1LFxuICAgICAgICBOdW1wYWREaXZpZGU6IDExMSxcbiAgICAgICAgTnVtcGFkTXVsdGlwbHk6IDEwNixcbiAgICAgICAgTnVtcGFkU3VidHJhY3Q6IDEwOSxcbiAgICAgICAgTnVtcGFkQWRkOiAxMDcsXG4gICAgICAgIE51bXBhZERlY2ltYWw6IDExMCxcbiAgICAgICAgTnVtcGFkOTogMTA1LFxuICAgICAgICBOdW1wYWQ4OiAxMDQsXG4gICAgICAgIE51bXBhZDc6IDEwMyxcbiAgICAgICAgTnVtcGFkNjogMTAyLFxuICAgICAgICBOdW1wYWQ1OiAxMDEsXG4gICAgICAgIE51bXBhZDQ6IDEwMCxcbiAgICAgICAgTnVtcGFkMzogOTksXG4gICAgICAgIE51bXBhZDI6IDk4LFxuICAgICAgICBOdW1wYWQxOiA5NyxcbiAgICAgICAgTnVtcGFkMDogOTYsXG4gICAgICAgIE51bUxvY2s6IDE0NCxcbiAgICAgICAgQ29udHJvbFJpZ2h0OiAyNTQsXG4gICAgICAgIEFsdFJpZ2h0OiAyNTUsXG4gICAgICAgIEhvbWU6IDM2LFxuICAgICAgICBFbmQ6IDM1LFxuICAgICAgICBBcnJvd1VwOiAzOCxcbiAgICAgICAgQXJyb3dMZWZ0OiAzNyxcbiAgICAgICAgQXJyb3dSaWdodDogMzksXG4gICAgICAgIEFycm93RG93bjogNDAsXG4gICAgICAgIFBhZ2VVcDogMzMsXG4gICAgICAgIFBhZ2VEb3duOiAzNCxcbiAgICAgICAgSW5zZXJ0OiA0NSxcbiAgICAgICAgRGVsZXRlOiA0NixcbiAgICAgICAgQ29udGV4dE1lbnU6IDkzXG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB0b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlciBTdHJlYW0gbWVzc2FnZSBwcm92aWRlciBjbGFzcyBvYmplY3RcbiAgICAgKiBAcGFyYW0gY29uZmlnIFRoZSBhcHBsaWNhdGlvbnMgY29uZmlndXJhdGlvbi4gV2UncmUgaW50ZXJlc3RlZCBpbiB0aGUgc3VwcHJlc3MgYnJvd3NlciBrZXlzIG9wdGlvblxuICAgICAqIEBwYXJhbSBhY3RpdmVLZXlzUHJvdmlkZXIgQWN0aXZlIGtleXMgcHJvdmlkZXIgY2xhc3Mgb2JqZWN0XG4gICAgICovXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyOiBTdHJlYW1NZXNzYWdlQ29udHJvbGxlcixcbiAgICAgICAgY29uZmlnOiBDb25maWcsXG4gICAgICAgIGFjdGl2ZUtleXNQcm92aWRlcjogQWN0aXZlS2V5c1xuICAgICkge1xuICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyID0gdG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXI7XG4gICAgICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuICAgICAgICB0aGlzLmFjdGl2ZUtleXNQcm92aWRlciA9IGFjdGl2ZUtleXNQcm92aWRlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWdpc3RlcnMgZG9jdW1lbnQga2V5Ym9hcmQgZXZlbnRzIHdpdGggdGhlIGNvbnRyb2xsZXJcbiAgICAgKi9cbiAgICByZWdpc3RlcktleUJvYXJkRXZlbnRzKCkge1xuICAgICAgICBjb25zdCBrZXlEb3duSGFuZGxlciA9IChldjogS2V5Ym9hcmRFdmVudCkgPT4gdGhpcy5oYW5kbGVPbktleURvd24oZXYpO1xuICAgICAgICBjb25zdCBrZXlVcEhhbmRsZXIgPSAoZXY6IEtleWJvYXJkRXZlbnQpID0+IHRoaXMuaGFuZGxlT25LZXlVcChldik7XG4gICAgICAgIGNvbnN0IGtleVByZXNzSGFuZGxlciA9IChldjogS2V5Ym9hcmRFdmVudCkgPT4gdGhpcy5oYW5kbGVPbktleVByZXNzKGV2KTtcblxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBrZXlEb3duSGFuZGxlcik7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXl1cFwiLCBrZXlVcEhhbmRsZXIpO1xuXG4gICAgICAgIC8vVGhpcyBoYXMgYmVlbiBkZXByZWNhdGVkIGFzIGF0IEp1biAxMyAyMDIxXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlwcmVzc1wiLCBrZXlQcmVzc0hhbmRsZXIpO1xuXG4gICAgICAgIHRoaXMua2V5Ym9hcmRFdmVudExpc3RlbmVyVHJhY2tlci5hZGRVbnJlZ2lzdGVyQ2FsbGJhY2soXG4gICAgICAgICAgICAoKSA9PiBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBrZXlEb3duSGFuZGxlcilcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5rZXlib2FyZEV2ZW50TGlzdGVuZXJUcmFja2VyLmFkZFVucmVnaXN0ZXJDYWxsYmFjayhcbiAgICAgICAgICAgICgpID0+IGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXl1cFwiLCBrZXlVcEhhbmRsZXIpXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMua2V5Ym9hcmRFdmVudExpc3RlbmVyVHJhY2tlci5hZGRVbnJlZ2lzdGVyQ2FsbGJhY2soXG4gICAgICAgICAgICAoKSA9PiBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5cHJlc3NcIiwga2V5UHJlc3NIYW5kbGVyKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVucmVnaXN0ZXJzIGRvY3VtZW50IGtleWJvYXJkIGV2ZW50c1xuICAgICAqL1xuICAgIHVucmVnaXN0ZXJLZXlCb2FyZEV2ZW50cygpIHtcbiAgICAgICAgdGhpcy5rZXlib2FyZEV2ZW50TGlzdGVuZXJUcmFja2VyLnVucmVnaXN0ZXJBbGwoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIYW5kbGVzIFdoZW4gYSBrZXkgaXMgZG93blxuICAgICAqIEBwYXJhbSBrZXlib2FyZEV2ZW50IC0gS2V5Ym9hcmQgZXZlbnRcbiAgICAgKi9cbiAgICBoYW5kbGVPbktleURvd24oa2V5Ym9hcmRFdmVudDogS2V5Ym9hcmRFdmVudCkge1xuICAgICAgICBjb25zdCBrZXlDb2RlID0gdGhpcy5nZXRLZXljb2RlKGtleWJvYXJkRXZlbnQpO1xuICAgICAgICBpZiAoIWtleUNvZGUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIExvZ2dlci5Mb2coXG4gICAgICAgICAgICBMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLFxuICAgICAgICAgICAgYGtleSBkb3duICR7a2V5Q29kZX0sIHJlcGVhdCA9ICR7a2V5Ym9hcmRFdmVudC5yZXBlYXR9YCxcbiAgICAgICAgICAgIDZcbiAgICAgICAgKTtcbiAgICAgICAgY29uc3QgdG9TdHJlYW1lckhhbmRsZXJzID1cbiAgICAgICAgICAgIHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXIudG9TdHJlYW1lckhhbmRsZXJzO1xuICAgICAgICB0b1N0cmVhbWVySGFuZGxlcnMuZ2V0KCdLZXlEb3duJykoW1xuICAgICAgICAgICAgdGhpcy5nZXRLZXljb2RlKGtleWJvYXJkRXZlbnQpLFxuICAgICAgICAgICAga2V5Ym9hcmRFdmVudC5yZXBlYXQgPyAxIDogMFxuICAgICAgICBdKTtcbiAgICAgICAgY29uc3QgYWN0aXZlS2V5cyA9IHRoaXMuYWN0aXZlS2V5c1Byb3ZpZGVyLmdldEFjdGl2ZUtleXMoKTtcbiAgICAgICAgYWN0aXZlS2V5cy5wdXNoKGtleUNvZGUpO1xuICAgICAgICAvLyBCYWNrc3BhY2UgaXMgbm90IGNvbnNpZGVyZWQgYSBrZXlwcmVzcyBpbiBKYXZhU2NyaXB0IGJ1dCB3ZSBuZWVkIGl0XG4gICAgICAgIC8vIHRvIGJlIHNvIGNoYXJhY3RlcnMgbWF5IGJlIGRlbGV0ZWQgaW4gYSBVRSB0ZXh0IGVudHJ5IGZpZWxkLlxuICAgICAgICBpZiAoa2V5Q29kZSA9PT0gU3BlY2lhbEtleUNvZGVzLmJhY2tTcGFjZSkge1xuICAgICAgICAgICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChcbiAgICAgICAgICAgICAgICBuZXcgS2V5Ym9hcmRFdmVudCgna2V5cHJlc3MnLCB7XG4gICAgICAgICAgICAgICAgICAgIGNoYXJDb2RlOiBTcGVjaWFsS2V5Q29kZXMuYmFja1NwYWNlXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXG4gICAgICAgICAgICB0aGlzLmNvbmZpZy5pc0ZsYWdFbmFibGVkKEZsYWdzLlN1cHByZXNzQnJvd3NlcktleXMpICYmXG4gICAgICAgICAgICB0aGlzLmlzS2V5Q29kZUJyb3dzZXJLZXkoa2V5Q29kZSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBrZXlib2FyZEV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBoYW5kbGVzIHdoZW4gYSBrZXkgaXMgdXBcbiAgICAgKiBAcGFyYW0ga2V5Ym9hcmRFdmVudCAtIEtleWJvYXJkIGV2ZW50XG4gICAgICovXG4gICAgaGFuZGxlT25LZXlVcChrZXlib2FyZEV2ZW50OiBLZXlib2FyZEV2ZW50KSB7XG4gICAgICAgIGNvbnN0IGtleUNvZGUgPSB0aGlzLmdldEtleWNvZGUoa2V5Ym9hcmRFdmVudCk7XG4gICAgICAgIGlmICgha2V5Q29kZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgTG9nZ2VyLkxvZyhMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBga2V5IHVwICR7a2V5Q29kZX1gLCA2KTtcbiAgICAgICAgY29uc3QgdG9TdHJlYW1lckhhbmRsZXJzID1cbiAgICAgICAgICAgIHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXIudG9TdHJlYW1lckhhbmRsZXJzO1xuICAgICAgICB0b1N0cmVhbWVySGFuZGxlcnMuZ2V0KCdLZXlVcCcpKFtcbiAgICAgICAgICAgIGtleUNvZGUsXG4gICAgICAgICAgICBrZXlib2FyZEV2ZW50LnJlcGVhdCA/IDEgOiAwXG4gICAgICAgIF0pO1xuXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIHRoaXMuY29uZmlnLmlzRmxhZ0VuYWJsZWQoRmxhZ3MuU3VwcHJlc3NCcm93c2VyS2V5cykgJiZcbiAgICAgICAgICAgIHRoaXMuaXNLZXlDb2RlQnJvd3NlcktleShrZXlDb2RlKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIGtleWJvYXJkRXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhhbmRsZXMgd2hlbiBhIGtleSBpcyBwcmVzc1xuICAgICAqIEBwYXJhbSBrZXlib2FyZCAtIEtleWJvYXJkIEV2ZW50XG4gICAgICovXG4gICAgaGFuZGxlT25LZXlQcmVzcyhrZXlib2FyZDogS2V5Ym9hcmRFdmVudCkge1xuICAgICAgICBpZiAoISgnY2hhckNvZGUnIGluIGtleWJvYXJkKSkge1xuICAgICAgICAgICAgTG9nZ2VyLldhcm5pbmcoXG4gICAgICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcbiAgICAgICAgICAgICAgICAnS2V5Ym9hcmRFdmVudC5jaGFyQ29kZSBpcyBkZXByZWNhdGVkIGluIHRoaXMgYnJvd3NlciwgY2Fubm90IHNlbmQga2V5IHByZXNzLidcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBjaGFyQ29kZSA9IGtleWJvYXJkLmNoYXJDb2RlO1xuICAgICAgICBMb2dnZXIuTG9nKExvZ2dlci5HZXRTdGFja1RyYWNlKCksIGBrZXkgcHJlc3MgJHtjaGFyQ29kZX1gLCA2KTtcblxuICAgICAgICBjb25zdCB0b1N0cmVhbWVySGFuZGxlcnMgPVxuICAgICAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlci50b1N0cmVhbWVySGFuZGxlcnM7XG4gICAgICAgIHRvU3RyZWFtZXJIYW5kbGVycy5nZXQoJ0tleVByZXNzJykoW2NoYXJDb2RlXSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgS2V5Y29kZSBvZiB0aGUgS2V5IHByZXNzZWRcbiAgICAgKiBAcGFyYW0ga2V5Ym9hcmRFdmVudCAtIEtleSBib2FyZCBFdmVudFxuICAgICAqIEByZXR1cm5zIC0gdGhlIGtleSBjb2RlIG9mIHRoZSBLZXlcbiAgICAgKi9cbiAgICBnZXRLZXljb2RlKGtleWJvYXJkRXZlbnQ6IEtleWJvYXJkRXZlbnQpIHtcbiAgICAgICAgLy8gSWYgd2UgZG9uJ3QgaGF2ZSBrZXlDb2RlIHByb3BlcnR5IGJlY2F1c2UgYnJvd3NlciBBUEkgaXMgZGVwcmVjYXRlZCB0aGVuIHVzZSBLZXlib2FyZEV2ZW50LmNvZGUgaW5zdGVhZC5cbiAgICAgICAgLy8gU2VlOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvS2V5Ym9hcmRFdmVudC9rZXlDb2RlI2NvbnN0YW50c19mb3Jfa2V5Y29kZV92YWx1ZVxuICAgICAgICBpZiAoISgna2V5Q29kZScgaW4ga2V5Ym9hcmRFdmVudCkpIHtcbiAgICAgICAgICAgIC8vIENvbnZlcnQgS2V5Ym9hcmRFdmVudC5jb2RlIHN0cmluZyBpbnRvIGludGVnZXItYmFzZWQga2V5IGNvZGUgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IHJlYXNvbnMuXG4gICAgICAgICAgICBjb25zdCBldmVudCA9IGtleWJvYXJkRXZlbnQgYXMgS2V5Ym9hcmRFdmVudDtcbiAgICAgICAgICAgIGlmIChldmVudC5jb2RlIGluIHRoaXMuQ29kZVRvS2V5Q29kZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLkNvZGVUb0tleUNvZGVbZXZlbnQuY29kZV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIExvZ2dlci5XYXJuaW5nKFxuICAgICAgICAgICAgICAgICAgICBMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLFxuICAgICAgICAgICAgICAgICAgICBgS2V5Ym9hcmQgY29kZSBvZiAke2V2ZW50LmNvZGV9IGlzIG5vdCBzdXBwb3J0ZWQgaW4gb3VyIG1hcHBpbmcsIGlnbm9yaW5nIHRoaXMga2V5LmBcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWYgd2UgbWFkZSBpdCBoZXJlIEtleWJvYXJkRXZlbnQua2V5Q29kZSBpcyBzdGlsbCBzdXBwb3J0ZWQgc28gd2UgY2FuIHNhZmVseSB1c2UgaXQuXG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgICAga2V5Ym9hcmRFdmVudC5rZXlDb2RlID09PSBTcGVjaWFsS2V5Q29kZXMuc2hpZnQgJiZcbiAgICAgICAgICAgIGtleWJvYXJkRXZlbnQuY29kZSA9PT0gJ1NoaWZ0UmlnaHQnXG4gICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuIFNwZWNpYWxLZXlDb2Rlcy5yaWdodFNoaWZ0O1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAga2V5Ym9hcmRFdmVudC5rZXlDb2RlID09PSBTcGVjaWFsS2V5Q29kZXMuY29udHJvbCAmJlxuICAgICAgICAgICAga2V5Ym9hcmRFdmVudC5jb2RlID09PSAnQ29udHJvbFJpZ2h0J1xuICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybiBTcGVjaWFsS2V5Q29kZXMucmlnaHRDb250cm9sO1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAga2V5Ym9hcmRFdmVudC5rZXlDb2RlID09PSBTcGVjaWFsS2V5Q29kZXMuYWx0ICYmXG4gICAgICAgICAgICBrZXlib2FyZEV2ZW50LmNvZGUgPT09ICdBbHRSaWdodCdcbiAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm4gU3BlY2lhbEtleUNvZGVzLnJpZ2h0QWx0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGtleWJvYXJkRXZlbnQua2V5Q29kZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEJyb3dzZXIga2V5cyBkbyBub3QgaGF2ZSBhIGNoYXJDb2RlIHNvIHdlIG9ubHkgbmVlZCB0byB0ZXN0IGtleUNvZGUuXG4gICAgICogQHBhcmFtIGtleUNvZGUgLSB0aGUgYnJvd3NlciBrZXljb2RlIG51bWJlclxuICAgICAqL1xuICAgIGlzS2V5Q29kZUJyb3dzZXJLZXkoa2V5Q29kZTogbnVtYmVyKSB7XG4gICAgICAgIC8vIEZ1bmN0aW9uIGtleXMgb3IgdGFiIGtleSBhcmUgY29uc2lkZXJlZCBcImJyb3dzZXIga2V5c1wiIHRoYXQgd2UgbWF5IHdpc2ggdG8gc3VwcHJlc3MgYnkgcHJldmVudGluZyB0aGVtIGJlaW5nIHByb2Nlc3MgYnkgYnJvd3Nlci5cbiAgICAgICAgcmV0dXJuIChrZXlDb2RlID49IDExMiAmJiBrZXlDb2RlIDw9IDEyMykgfHwga2V5Q29kZSA9PT0gOTtcbiAgICB9XG59XG4iLCIvLyBDb3B5cmlnaHQgRXBpYyBHYW1lcywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXG5pbXBvcnQgeyBNb3VzZUNvbnRyb2xsZXIgfSBmcm9tICcuL01vdXNlQ29udHJvbGxlcic7XG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tICcuLi9Mb2dnZXIvTG9nZ2VyJztcbmltcG9ydCB7IElNb3VzZUV2ZW50cyB9IGZyb20gJy4vSU1vdXNlRXZlbnRzJztcbmltcG9ydCB7IE5vcm1hbGl6ZWRRdWFudGl6ZWRVbnNpZ25lZENvb3JkIH0gZnJvbSAnLi4vVXRpbC9Db29yZGluYXRlQ29udmVydGVyJztcbmltcG9ydCB7IEFjdGl2ZUtleXMgfSBmcm9tICcuL0lucHV0Q2xhc3Nlc0ZhY3RvcnknO1xuaW1wb3J0IHsgVmlkZW9QbGF5ZXIgfSBmcm9tICcuLi9WaWRlb1BsYXllci9WaWRlb1BsYXllcic7XG5pbXBvcnQgeyBFdmVudExpc3RlbmVyVHJhY2tlciB9IGZyb20gJy4uL1V0aWwvRXZlbnRMaXN0ZW5lclRyYWNrZXInO1xuXG4vKipcbiAqIEhhbmRsZSB0aGUgbW91c2UgbG9ja2VkIGV2ZW50c1xuICovXG5leHBvcnQgY2xhc3MgTG9ja2VkTW91c2VFdmVudHMgaW1wbGVtZW50cyBJTW91c2VFdmVudHMge1xuICAgIHggPSAwO1xuICAgIHkgPSAwO1xuICAgIGNvb3JkOiBOb3JtYWxpemVkUXVhbnRpemVkVW5zaWduZWRDb29yZDtcbiAgICB2aWRlb0VsZW1lbnRQcm92aWRlcjogVmlkZW9QbGF5ZXI7XG4gICAgbW91c2VDb250cm9sbGVyOiBNb3VzZUNvbnRyb2xsZXI7XG4gICAgYWN0aXZlS2V5c1Byb3ZpZGVyOiBBY3RpdmVLZXlzO1xuICAgIHVwZGF0ZU1vdXNlTW92ZVBvc2l0aW9uRXZlbnQgPSAobW91c2VFdmVudDogTW91c2VFdmVudCkgPT4ge1xuICAgICAgICB0aGlzLnVwZGF0ZU1vdXNlTW92ZVBvc2l0aW9uKG1vdXNlRXZlbnQpO1xuICAgIH07XG5cbiAgICAvLyBVdGlsaXR5IGZvciBrZWVwaW5nIHRyYWNrIG9mIGV2ZW50IGhhbmRsZXJzIGFuZCB1bnJlZ2lzdGVyaW5nIHRoZW1cbiAgICBwcml2YXRlIG1vdXNlRXZlbnRMaXN0ZW5lclRyYWNrZXIgPSBuZXcgRXZlbnRMaXN0ZW5lclRyYWNrZXIoKTtcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB2aWRlb0VsZW1lbnRQcm92aWRlciAtIFZpZGVvIFBsYXllciBpbnN0YW5jZVxuICAgICAqIEBwYXJhbSBtb3VzZUNvbnRyb2xsZXIgLSBNb3VzZSBjb250cm9sbGVyIGluc3RhbmNlXG4gICAgICogQHBhcmFtIGFjdGl2ZUtleXNQcm92aWRlciAtIEFjdGl2ZSBrZXlzIHByb3ZpZGVyIGluc3RhbmNlXG4gICAgICogQHBhcmFtIHBsYXllclN0eWxlQXR0cmlidXRlc1Byb3ZpZGVyIC0gUGxheWVyIHN0eWxlIGF0dHJpYnV0ZXMgaW5zdGFuY2VcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgdmlkZW9FbGVtZW50UHJvdmlkZXI6IFZpZGVvUGxheWVyLFxuICAgICAgICBtb3VzZUNvbnRyb2xsZXI6IE1vdXNlQ29udHJvbGxlcixcbiAgICAgICAgYWN0aXZlS2V5c1Byb3ZpZGVyOiBBY3RpdmVLZXlzXG4gICAgKSB7XG4gICAgICAgIHRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIgPSB2aWRlb0VsZW1lbnRQcm92aWRlcjtcbiAgICAgICAgdGhpcy5tb3VzZUNvbnRyb2xsZXIgPSBtb3VzZUNvbnRyb2xsZXI7XG4gICAgICAgIHRoaXMuYWN0aXZlS2V5c1Byb3ZpZGVyID0gYWN0aXZlS2V5c1Byb3ZpZGVyO1xuICAgICAgICBjb25zdCB2aWRlb0VsZW1lbnRQYXJlbnQgPVxuICAgICAgICAgICAgdGhpcy52aWRlb0VsZW1lbnRQcm92aWRlci5nZXRWaWRlb1BhcmVudEVsZW1lbnQoKTtcbiAgICAgICAgdGhpcy54ID0gdmlkZW9FbGVtZW50UGFyZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoIC8gMjtcbiAgICAgICAgdGhpcy55ID0gdmlkZW9FbGVtZW50UGFyZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodCAvIDI7XG4gICAgICAgIHRoaXMuY29vcmQgPVxuICAgICAgICAgICAgdGhpcy5tb3VzZUNvbnRyb2xsZXIuY29vcmRpbmF0ZUNvbnZlcnRlci5ub3JtYWxpemVBbmRRdWFudGl6ZVVuc2lnbmVkKFxuICAgICAgICAgICAgICAgIHRoaXMueCxcbiAgICAgICAgICAgICAgICB0aGlzLnlcbiAgICAgICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVW5yZWdpc3RlcnMgYWxsIGV2ZW50IGhhbmRsZXJzXG4gICAgICovXG4gICAgdW5yZWdpc3Rlck1vdXNlRXZlbnRzKCkge1xuICAgICAgICB0aGlzLm1vdXNlRXZlbnRMaXN0ZW5lclRyYWNrZXIudW5yZWdpc3RlckFsbCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhhbmRsZSB3aGVuIHRoZSBsb2NrZWQgc3RhdGUgQ2hhbmdlZFxuICAgICAqL1xuICAgIGxvY2tTdGF0ZUNoYW5nZSgpIHtcbiAgICAgICAgY29uc3QgdmlkZW9FbGVtZW50UGFyZW50ID1cbiAgICAgICAgICAgIHRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIuZ2V0VmlkZW9QYXJlbnRFbGVtZW50KCk7XG4gICAgICAgIGNvbnN0IHRvU3RyZWFtZXJIYW5kbGVycyA9XG4gICAgICAgICAgICB0aGlzLm1vdXNlQ29udHJvbGxlci50b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlci50b1N0cmVhbWVySGFuZGxlcnM7XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgZG9jdW1lbnQucG9pbnRlckxvY2tFbGVtZW50ID09PSB2aWRlb0VsZW1lbnRQYXJlbnQgfHxcbiAgICAgICAgICAgIGRvY3VtZW50Lm1velBvaW50ZXJMb2NrRWxlbWVudCA9PT0gdmlkZW9FbGVtZW50UGFyZW50XG4gICAgICAgICkge1xuICAgICAgICAgICAgTG9nZ2VyLkxvZyhMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnUG9pbnRlciBsb2NrZWQnLCA2KTtcbiAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAgICAgICAgICAgJ21vdXNlbW92ZScsXG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVNb3VzZU1vdmVQb3NpdGlvbkV2ZW50LFxuICAgICAgICAgICAgICAgIGZhbHNlXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgdGhpcy5tb3VzZUV2ZW50TGlzdGVuZXJUcmFja2VyLmFkZFVucmVnaXN0ZXJDYWxsYmFjayhcbiAgICAgICAgICAgICAgICAoKSA9PiBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFxuICAgICAgICAgICAgICAgICAgICAnbW91c2Vtb3ZlJyxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVNb3VzZU1vdmVQb3NpdGlvbkV2ZW50LFxuICAgICAgICAgICAgICAgICAgICBmYWxzZVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBMb2dnZXIuTG9nKFxuICAgICAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXG4gICAgICAgICAgICAgICAgJ1RoZSBwb2ludGVyIGxvY2sgc3RhdHVzIGlzIG5vdyB1bmxvY2tlZCcsXG4gICAgICAgICAgICAgICAgNlxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIC8vICFhIG5ldyBhcnJvdyBmdW5jdGlvbiBtdXN0IG5vdCBiZSB1c2VkIGhlcmUgYXMgaXQgd2lsbCBiZSBjb3VudGVkIGFzIGEgbmV3IGZ1bmN0aW9uIHRoYXQgY2Fubm90IGJlIHJlbW92ZWRcbiAgICAgICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXG4gICAgICAgICAgICAgICAgJ21vdXNlbW92ZScsXG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVNb3VzZU1vdmVQb3NpdGlvbkV2ZW50LFxuICAgICAgICAgICAgICAgIGZhbHNlXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAvLyBJZiBtb3VzZSBsb3NlcyBmb2N1cywgc2VuZCBhIGtleSB1cCBmb3IgYWxsIG9mIHRoZSBjdXJyZW50bHkgaGVsZC1kb3duIGtleXNcbiAgICAgICAgICAgIC8vIFRoaXMgaXMgbmVjZXNzYXJ5IGFzIHdoZW4gdGhlIG1vdXNlIGxvc2VzIGZvY3VzLCB0aGUgd2luZG93cyBzdG9wcyBsaXN0ZW5pbmcgZm9yIGV2ZW50cyBhbmQgYXMgc3VjaFxuICAgICAgICAgICAgLy8gdGhlIGtleXVwIGxpc3RlbmVyIHdvbid0IGdldCBmaXJlZFxuICAgICAgICAgICAgbGV0IGFjdGl2ZUtleXMgPSB0aGlzLmFjdGl2ZUtleXNQcm92aWRlci5nZXRBY3RpdmVLZXlzKCk7XG4gICAgICAgICAgICBjb25zdCBzZXRLZXlzID0gbmV3IFNldChhY3RpdmVLZXlzKTtcbiAgICAgICAgICAgIGNvbnN0IG5ld0tleXNJdGVyYWJsZTogQXJyYXk8bnVtYmVyPiA9IFtdO1xuXG4gICAgICAgICAgICBzZXRLZXlzLmZvckVhY2goKHNldEtleTogbnVtYmVyKSA9PiB7XG4gICAgICAgICAgICAgICAgbmV3S2V5c0l0ZXJhYmxlW3NldEtleV07XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgbmV3S2V5c0l0ZXJhYmxlLmZvckVhY2goKHVuaXF1ZUtleWNvZGUpID0+IHtcbiAgICAgICAgICAgICAgICB0b1N0cmVhbWVySGFuZGxlcnMuZ2V0KCdLZXlVcCcpKFt1bmlxdWVLZXljb2RlXSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vIFJlc2V0IHRoZSBhY3RpdmUga2V5cyBiYWNrIHRvIG5vdGhpbmdcbiAgICAgICAgICAgIGFjdGl2ZUtleXMgPSBbXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhhbmRsZSB0aGUgbW91c2UgbW92ZSBldmVudCwgc2VuZHMgdGhlIG1vdXNlIGRhdGEgdG8gdGhlIFVFIEluc3RhbmNlXG4gICAgICogQHBhcmFtIG1vdXNlRXZlbnQgLSBNb3VzZSBFdmVudFxuICAgICAqL1xuICAgIHVwZGF0ZU1vdXNlTW92ZVBvc2l0aW9uKG1vdXNlRXZlbnQ6IE1vdXNlRXZlbnQpIHtcbiAgICAgICAgaWYgKCF0aGlzLnZpZGVvRWxlbWVudFByb3ZpZGVyLmlzVmlkZW9SZWFkeSgpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdG9TdHJlYW1lckhhbmRsZXJzID1cbiAgICAgICAgICAgIHRoaXMubW91c2VDb250cm9sbGVyLnRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyLnRvU3RyZWFtZXJIYW5kbGVycztcbiAgICAgICAgY29uc3Qgc3R5bGVXaWR0aCA9XG4gICAgICAgICAgICB0aGlzLnZpZGVvRWxlbWVudFByb3ZpZGVyLmdldFZpZGVvUGFyZW50RWxlbWVudCgpLmNsaWVudFdpZHRoO1xuICAgICAgICBjb25zdCBzdHlsZUhlaWdodCA9XG4gICAgICAgICAgICB0aGlzLnZpZGVvRWxlbWVudFByb3ZpZGVyLmdldFZpZGVvUGFyZW50RWxlbWVudCgpLmNsaWVudEhlaWdodDtcblxuICAgICAgICB0aGlzLnggKz0gbW91c2VFdmVudC5tb3ZlbWVudFg7XG4gICAgICAgIHRoaXMueSArPSBtb3VzZUV2ZW50Lm1vdmVtZW50WTtcblxuICAgICAgICBpZiAodGhpcy54ID4gc3R5bGVXaWR0aCkge1xuICAgICAgICAgICAgdGhpcy54IC09IHN0eWxlV2lkdGg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMueSA+IHN0eWxlSGVpZ2h0KSB7XG4gICAgICAgICAgICB0aGlzLnkgLT0gc3R5bGVIZWlnaHQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMueCA8IDApIHtcbiAgICAgICAgICAgIHRoaXMueCA9IHN0eWxlV2lkdGggKyB0aGlzLng7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMueSA8IDApIHtcbiAgICAgICAgICAgIHRoaXMueSA9IHN0eWxlSGVpZ2h0IC0gdGhpcy55O1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jb29yZCA9XG4gICAgICAgICAgICB0aGlzLm1vdXNlQ29udHJvbGxlci5jb29yZGluYXRlQ29udmVydGVyLm5vcm1hbGl6ZUFuZFF1YW50aXplVW5zaWduZWQoXG4gICAgICAgICAgICAgICAgdGhpcy54LFxuICAgICAgICAgICAgICAgIHRoaXMueVxuICAgICAgICAgICAgKTtcbiAgICAgICAgY29uc3QgZGVsdGEgPVxuICAgICAgICAgICAgdGhpcy5tb3VzZUNvbnRyb2xsZXIuY29vcmRpbmF0ZUNvbnZlcnRlci5ub3JtYWxpemVBbmRRdWFudGl6ZVNpZ25lZChcbiAgICAgICAgICAgICAgICBtb3VzZUV2ZW50Lm1vdmVtZW50WCxcbiAgICAgICAgICAgICAgICBtb3VzZUV2ZW50Lm1vdmVtZW50WVxuICAgICAgICAgICAgKTtcbiAgICAgICAgdG9TdHJlYW1lckhhbmRsZXJzLmdldCgnTW91c2VNb3ZlJykoW1xuICAgICAgICAgICAgdGhpcy5jb29yZC54LFxuICAgICAgICAgICAgdGhpcy5jb29yZC55LFxuICAgICAgICAgICAgZGVsdGEueCxcbiAgICAgICAgICAgIGRlbHRhLnlcbiAgICAgICAgXSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGFuZGxlIHRoZSBtb3VzZSBEb3duIGV2ZW50LCBzZW5kcyB0aGUgbW91c2UgZGF0YSB0byB0aGUgVUUgSW5zdGFuY2VcbiAgICAgKiBAcGFyYW0gbW91c2VFdmVudCAtIE1vdXNlIEV2ZW50XG4gICAgICovXG4gICAgaGFuZGxlTW91c2VEb3duKG1vdXNlRXZlbnQ6IE1vdXNlRXZlbnQpIHtcbiAgICAgICAgaWYgKCF0aGlzLnZpZGVvRWxlbWVudFByb3ZpZGVyLmlzVmlkZW9SZWFkeSgpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB0b1N0cmVhbWVySGFuZGxlcnMgPVxuICAgICAgICAgICAgdGhpcy5tb3VzZUNvbnRyb2xsZXIudG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXIudG9TdHJlYW1lckhhbmRsZXJzO1xuICAgICAgICB0b1N0cmVhbWVySGFuZGxlcnMuZ2V0KCdNb3VzZURvd24nKShbXG4gICAgICAgICAgICBtb3VzZUV2ZW50LmJ1dHRvbixcbiAgICAgICAgICAgIC8vIFdlIHVzZSB0aGUgc3RvcmUgdmFsdWUgb2YgdGhpcy5jb29yZCBhcyBvcHBvc2VkIHRvIHRoZSBtb3VzZUV2ZW50LngveSBhcyB0aGUgbW91c2VFdmVudCBsb2NhdGlvblxuICAgICAgICAgICAgLy8gdXNlcyB0aGUgc3lzdGVtIGN1cnNvciBsb2NhdGlvbiB3aGljaCBoYXNuJ3QgbW92ZWRcbiAgICAgICAgICAgIHRoaXMuY29vcmQueCxcbiAgICAgICAgICAgIHRoaXMuY29vcmQueVxuICAgICAgICBdKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIYW5kbGUgdGhlIG1vdXNlIFVwIGV2ZW50LCBzZW5kcyB0aGUgbW91c2UgZGF0YSB0byB0aGUgVUUgSW5zdGFuY2VcbiAgICAgKiBAcGFyYW0gbW91c2VFdmVudCAtIE1vdXNlIEV2ZW50XG4gICAgICovXG4gICAgaGFuZGxlTW91c2VVcChtb3VzZUV2ZW50OiBNb3VzZUV2ZW50KSB7XG4gICAgICAgIGlmICghdGhpcy52aWRlb0VsZW1lbnRQcm92aWRlci5pc1ZpZGVvUmVhZHkoKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHRvU3RyZWFtZXJIYW5kbGVycyA9XG4gICAgICAgICAgICB0aGlzLm1vdXNlQ29udHJvbGxlci50b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlci50b1N0cmVhbWVySGFuZGxlcnM7XG4gICAgICAgIHRvU3RyZWFtZXJIYW5kbGVycy5nZXQoJ01vdXNlVXAnKShbXG4gICAgICAgICAgICBtb3VzZUV2ZW50LmJ1dHRvbixcbiAgICAgICAgICAgIC8vIFdlIHVzZSB0aGUgc3RvcmUgdmFsdWUgb2YgdGhpcy5jb29yZCBhcyBvcHBvc2VkIHRvIHRoZSBtb3VzZUV2ZW50LngveSBhcyB0aGUgbW91c2VFdmVudCBsb2NhdGlvblxuICAgICAgICAgICAgLy8gdXNlcyB0aGUgc3lzdGVtIGN1cnNvciBsb2NhdGlvbiB3aGljaCBoYXNuJ3QgbW92ZWRcbiAgICAgICAgICAgIHRoaXMuY29vcmQueCxcbiAgICAgICAgICAgIHRoaXMuY29vcmQueVxuICAgICAgICBdKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIYW5kbGUgdGhlIG1vdXNlIHdoZWVsIGV2ZW50LCBzZW5kcyB0aGUgbW91c2Ugd2hlZWwgZGF0YSB0byB0aGUgVUUgSW5zdGFuY2VcbiAgICAgKiBAcGFyYW0gd2hlZWxFdmVudCAtIE1vdXNlIEV2ZW50XG4gICAgICovXG4gICAgaGFuZGxlTW91c2VXaGVlbCh3aGVlbEV2ZW50OiBXaGVlbEV2ZW50KSB7XG4gICAgICAgIGlmICghdGhpcy52aWRlb0VsZW1lbnRQcm92aWRlci5pc1ZpZGVvUmVhZHkoKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHRvU3RyZWFtZXJIYW5kbGVycyA9XG4gICAgICAgICAgICB0aGlzLm1vdXNlQ29udHJvbGxlci50b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlci50b1N0cmVhbWVySGFuZGxlcnM7XG4gICAgICAgIHRvU3RyZWFtZXJIYW5kbGVycy5nZXQoJ01vdXNlV2hlZWwnKShbXG4gICAgICAgICAgICB3aGVlbEV2ZW50LndoZWVsRGVsdGEsXG4gICAgICAgICAgICAvLyBXZSB1c2UgdGhlIHN0b3JlIHZhbHVlIG9mIHRoaXMuY29vcmQgYXMgb3Bwb3NlZCB0byB0aGUgbW91c2VFdmVudC54L3kgYXMgdGhlIG1vdXNlRXZlbnQgbG9jYXRpb25cbiAgICAgICAgICAgIC8vIHVzZXMgdGhlIHN5c3RlbSBjdXJzb3IgbG9jYXRpb24gd2hpY2ggaGFzbid0IG1vdmVkXG4gICAgICAgICAgICB0aGlzLmNvb3JkLngsXG4gICAgICAgICAgICB0aGlzLmNvb3JkLnlcbiAgICAgICAgXSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGFuZGxlIHRoZSBtb3VzZSBkb3VibGUgY2xpY2sgZXZlbnQsIHNlbmRzIHRoZSBtb3VzZSBkYXRhIHRvIHRoZSBVRSBJbnN0YW5jZVxuICAgICAqIEBwYXJhbSBtb3VzZUV2ZW50IC0gTW91c2UgRXZlbnRcbiAgICAgKi9cbiAgICBoYW5kbGVNb3VzZURvdWJsZShtb3VzZUV2ZW50OiBNb3VzZUV2ZW50KSB7XG4gICAgICAgIGlmICghdGhpcy52aWRlb0VsZW1lbnRQcm92aWRlci5pc1ZpZGVvUmVhZHkoKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHRvU3RyZWFtZXJIYW5kbGVycyA9XG4gICAgICAgICAgICB0aGlzLm1vdXNlQ29udHJvbGxlci50b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlci50b1N0cmVhbWVySGFuZGxlcnM7XG4gICAgICAgIHRvU3RyZWFtZXJIYW5kbGVycy5nZXQoJ01vdXNlRG91YmxlJykoW1xuICAgICAgICAgICAgbW91c2VFdmVudC5idXR0b24sXG4gICAgICAgICAgICAvLyBXZSB1c2UgdGhlIHN0b3JlIHZhbHVlIG9mIHRoaXMuY29vcmQgYXMgb3Bwb3NlZCB0byB0aGUgbW91c2VFdmVudC54L3kgYXMgdGhlIG1vdXNlRXZlbnQgbG9jYXRpb25cbiAgICAgICAgICAgIC8vIHVzZXMgdGhlIHN5c3RlbSBjdXJzb3IgbG9jYXRpb24gd2hpY2ggaGFzbid0IG1vdmVkXG4gICAgICAgICAgICB0aGlzLmNvb3JkLngsXG4gICAgICAgICAgICB0aGlzLmNvb3JkLnlcbiAgICAgICAgXSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGFuZGxlIHRoZSBwcmVzcyBtb3VzZSBidXR0b25zIGV2ZW50LCBzZW5kcyB0aGUgbW91c2UgZGF0YSB0byB0aGUgVUUgSW5zdGFuY2VcbiAgICAgKiBAcGFyYW0gbW91c2VFdmVudCAtIE1vdXNlIEV2ZW50XG4gICAgICovXG4gICAgaGFuZGxlUHJlc3NNb3VzZUJ1dHRvbnMobW91c2VFdmVudDogTW91c2VFdmVudCkge1xuICAgICAgICBpZiAoIXRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIuaXNWaWRlb1JlYWR5KCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm1vdXNlQ29udHJvbGxlci5wcmVzc01vdXNlQnV0dG9ucyhcbiAgICAgICAgICAgIG1vdXNlRXZlbnQuYnV0dG9ucyxcbiAgICAgICAgICAgIHRoaXMueCxcbiAgICAgICAgICAgIHRoaXMueVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhhbmRsZSB0aGUgcmVsZWFzZSBtb3VzZSBidXR0b25zIGV2ZW50LCBzZW5kcyB0aGUgbW91c2UgZGF0YSB0byB0aGUgVUUgSW5zdGFuY2VcbiAgICAgKiBAcGFyYW0gbW91c2VFdmVudCAtIE1vdXNlIEV2ZW50XG4gICAgICovXG4gICAgaGFuZGxlUmVsZWFzZU1vdXNlQnV0dG9ucyhtb3VzZUV2ZW50OiBNb3VzZUV2ZW50KSB7XG4gICAgICAgIGlmICghdGhpcy52aWRlb0VsZW1lbnRQcm92aWRlci5pc1ZpZGVvUmVhZHkoKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubW91c2VDb250cm9sbGVyLnJlbGVhc2VNb3VzZUJ1dHRvbnMoXG4gICAgICAgICAgICBtb3VzZUV2ZW50LmJ1dHRvbnMsXG4gICAgICAgICAgICB0aGlzLngsXG4gICAgICAgICAgICB0aGlzLnlcbiAgICAgICAgKTtcbiAgICB9XG59XG5cbi8qKlxuICogRXh0cmEgdHlwZXMgZm9yIERvY3VtZW50IGFuZCBXaGVlbEV2ZW50XG4gKi9cbmRlY2xhcmUgZ2xvYmFsIHtcbiAgICBpbnRlcmZhY2UgRG9jdW1lbnQge1xuICAgICAgICBtb3pQb2ludGVyTG9ja0VsZW1lbnQ6IHVua25vd247XG4gICAgICAgIG1vekV4aXRQb2ludGVyTG9jaz8oKTogdm9pZDtcbiAgICB9XG5cbiAgICBpbnRlcmZhY2UgV2hlZWxFdmVudCB7XG4gICAgICAgIHdoZWVsRGVsdGE6IG51bWJlcjtcbiAgICB9XG59XG4iLCIvLyBDb3B5cmlnaHQgRXBpYyBHYW1lcywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXG4vKipcbiAqIE1vdXNlIEJ1dHRvbiBEYXRhXG4gKiB7QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL01vdXNlRXZlbnQvYnV0dG9ufVxuICovXG5leHBvcnQgY2xhc3MgTW91c2VCdXR0b24ge1xuICAgIHN0YXRpYyBtYWluQnV0dG9uID0gMDsgLy8gTGVmdCBidXR0b24uXG4gICAgc3RhdGljIGF1eGlsaWFyeUJ1dHRvbiA9IDE7IC8vIFdoZWVsIGJ1dHRvbi5cbiAgICBzdGF0aWMgc2Vjb25kYXJ5QnV0dG9uID0gMjsgLy8gUmlnaHQgYnV0dG9uLlxuICAgIHN0YXRpYyBmb3VydGhCdXR0b24gPSAzOyAvLyBCcm93c2VyIEJhY2sgYnV0dG9uLlxuICAgIHN0YXRpYyBmaWZ0aEJ1dHRvbiA9IDQ7IC8vIEJyb3dzZXIgRm9yd2FyZCBidXR0b24uXG59XG5cbi8qKlxuICogTW91c2UgQnV0dG9uIE1hc2sgRGF0YVxuICoge0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9Nb3VzZUV2ZW50L2J1dHRvbnN9XG4gKi9cbmV4cG9ydCBjbGFzcyBNb3VzZUJ1dHRvbnNNYXNrIHtcbiAgICBzdGF0aWMgcHJpbWFyeUJ1dHRvbiA9IDE7IC8vIExlZnQgYnV0dG9uLlxuICAgIHN0YXRpYyBzZWNvbmRhcnlCdXR0b24gPSAyOyAvLyBSaWdodCBidXR0b24uXG4gICAgc3RhdGljIGF1eGlsaWFyeUJ1dHRvbiA9IDQ7IC8vIFdoZWVsIGJ1dHRvbi5cbiAgICBzdGF0aWMgZm91cnRoQnV0dG9uID0gODsgLy8gQnJvd3NlciBCYWNrIGJ1dHRvbi5cbiAgICBzdGF0aWMgZmlmdGhCdXR0b24gPSAxNjsgLy8gQnJvd3NlciBGb3J3YXJkIGJ1dHRvbi5cbn1cbiIsIi8vIENvcHlyaWdodCBFcGljIEdhbWVzLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG5cbmltcG9ydCB7IE1vdXNlQnV0dG9uc01hc2ssIE1vdXNlQnV0dG9uIH0gZnJvbSAnLi9Nb3VzZUJ1dHRvbnMnO1xuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSAnLi4vTG9nZ2VyL0xvZ2dlcic7XG5pbXBvcnQgeyBTdHJlYW1NZXNzYWdlQ29udHJvbGxlciB9IGZyb20gJy4uL1VlSW5zdGFuY2VNZXNzYWdlL1N0cmVhbU1lc3NhZ2VDb250cm9sbGVyJztcbmltcG9ydCB7IENvb3JkaW5hdGVDb252ZXJ0ZXIgfSBmcm9tICcuLi9VdGlsL0Nvb3JkaW5hdGVDb252ZXJ0ZXInO1xuaW1wb3J0IHsgVmlkZW9QbGF5ZXIgfSBmcm9tICcuLi9WaWRlb1BsYXllci9WaWRlb1BsYXllcic7XG5pbXBvcnQgeyBJTW91c2VFdmVudHMgfSBmcm9tICcuL0lNb3VzZUV2ZW50cyc7XG5pbXBvcnQgeyBMb2NrZWRNb3VzZUV2ZW50cyB9IGZyb20gJy4vTG9ja2VkTW91c2VFdmVudHMnO1xuaW1wb3J0IHsgSG92ZXJpbmdNb3VzZUV2ZW50cyB9IGZyb20gJy4vSG92ZXJpbmdNb3VzZUV2ZW50cyc7XG5pbXBvcnQgdHlwZSB7IEFjdGl2ZUtleXMgfSBmcm9tICcuL0lucHV0Q2xhc3Nlc0ZhY3RvcnknO1xuaW1wb3J0IHsgRXZlbnRMaXN0ZW5lclRyYWNrZXIgfSBmcm9tICcuLi9VdGlsL0V2ZW50TGlzdGVuZXJUcmFja2VyJztcblxuLyoqXG4gKiBIYW5kbGVzIHRoZSBNb3VzZSBJbnB1dHMgZm9yIHRoZSBkb2N1bWVudFxuICovXG5leHBvcnQgY2xhc3MgTW91c2VDb250cm9sbGVyIHtcbiAgICB2aWRlb0VsZW1lbnRQcm92aWRlcjogVmlkZW9QbGF5ZXI7XG4gICAgdG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXI6IFN0cmVhbU1lc3NhZ2VDb250cm9sbGVyO1xuICAgIGNvb3JkaW5hdGVDb252ZXJ0ZXI6IENvb3JkaW5hdGVDb252ZXJ0ZXI7XG4gICAgYWN0aXZlS2V5c1Byb3ZpZGVyOiBBY3RpdmVLZXlzO1xuXG4gICAgLy8gVXRpbGl0eSBmb3Iga2VlcGluZyB0cmFjayBvZiBldmVudCBoYW5kbGVycyBhbmQgdW5yZWdpc3RlcmluZyB0aGVtXG4gICAgcHJpdmF0ZSBtb3VzZUV2ZW50TGlzdGVuZXJUcmFja2VyID0gbmV3IEV2ZW50TGlzdGVuZXJUcmFja2VyKCk7XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gdG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXIgLSBTdHJlYW0gbWVzc2FnZSBpbnN0YW5jZVxuICAgICAqIEBwYXJhbSB2aWRlb0VsZW1lbnRQcm92aWRlciAtIFZpZGVvIFBsYXllciBpbnN0YW5jZVxuICAgICAqIEBwYXJhbSBub3JtYWxpemVBbmRRdWFudGl6ZSAtIEEgbm9ybWFsaXplIGFuZCBxdWFudGl6ZSBpbnN0YW5jZVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICB0b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlcjogU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIsXG4gICAgICAgIHZpZGVvRWxlbWVudFByb3ZpZGVyOiBWaWRlb1BsYXllcixcbiAgICAgICAgY29vcmRpbmF0ZUNvbnZlcnRlcjogQ29vcmRpbmF0ZUNvbnZlcnRlcixcbiAgICAgICAgYWN0aXZlS2V5c1Byb3ZpZGVyOiBBY3RpdmVLZXlzXG4gICAgKSB7XG4gICAgICAgIHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXIgPSB0b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlcjtcbiAgICAgICAgdGhpcy5jb29yZGluYXRlQ29udmVydGVyID0gY29vcmRpbmF0ZUNvbnZlcnRlcjtcbiAgICAgICAgdGhpcy52aWRlb0VsZW1lbnRQcm92aWRlciA9IHZpZGVvRWxlbWVudFByb3ZpZGVyO1xuICAgICAgICB0aGlzLmFjdGl2ZUtleXNQcm92aWRlciA9IGFjdGl2ZUtleXNQcm92aWRlcjtcbiAgICAgICAgdGhpcy5yZWdpc3Rlck1vdXNlRW50ZXJBbmRMZWF2ZUV2ZW50cygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENsZWFycyBhbGwgdGhlIGNsaWNrIGV2ZW50cyBvbiB0aGUgY3VycmVudCB2aWRlbyBlbGVtZW50IHBhcmVudCBkaXZcbiAgICAgKi9cbiAgICB1bnJlZ2lzdGVyTW91c2VFdmVudHMoKSB7XG4gICAgICAgIHRoaXMubW91c2VFdmVudExpc3RlbmVyVHJhY2tlci51bnJlZ2lzdGVyQWxsKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXIgYSBsb2NrZWQgbW91c2UgY2xhc3NcbiAgICAgKiBAcGFyYW0gbW91c2VDb250cm9sbGVyIC0gYSBtb3VzZSBjb250cm9sbGVyIGluc3RhbmNlXG4gICAgICogQHBhcmFtIHBsYXllclN0eWxlQXR0cmlidXRlc1Byb3ZpZGVyIC0gYSBwbGF5ZXIgc3R5bGUgYXR0cmlidXRlcyBpbnN0YW5jZVxuICAgICAqL1xuICAgIHJlZ2lzdGVyTG9ja2VkTW91c2VFdmVudHMobW91c2VDb250cm9sbGVyOiBNb3VzZUNvbnRyb2xsZXIpIHtcbiAgICAgICAgY29uc3QgdmlkZW9FbGVtZW50UGFyZW50ID1cbiAgICAgICAgICAgIHRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIuZ2V0VmlkZW9QYXJlbnRFbGVtZW50KCkgYXMgSFRNTERpdkVsZW1lbnQ7XG4gICAgICAgIGNvbnN0IGxvY2tlZE1vdXNlRXZlbnRzOiBJTW91c2VFdmVudHMgPSBuZXcgTG9ja2VkTW91c2VFdmVudHMoXG4gICAgICAgICAgICB0aGlzLnZpZGVvRWxlbWVudFByb3ZpZGVyLFxuICAgICAgICAgICAgbW91c2VDb250cm9sbGVyLFxuICAgICAgICAgICAgdGhpcy5hY3RpdmVLZXlzUHJvdmlkZXJcbiAgICAgICAgKTtcblxuICAgICAgICB2aWRlb0VsZW1lbnRQYXJlbnQucmVxdWVzdFBvaW50ZXJMb2NrID1cbiAgICAgICAgICAgIHZpZGVvRWxlbWVudFBhcmVudC5yZXF1ZXN0UG9pbnRlckxvY2sgfHxcbiAgICAgICAgICAgIHZpZGVvRWxlbWVudFBhcmVudC5tb3pSZXF1ZXN0UG9pbnRlckxvY2s7XG4gICAgICAgIGRvY3VtZW50LmV4aXRQb2ludGVyTG9jayA9XG4gICAgICAgICAgICBkb2N1bWVudC5leGl0UG9pbnRlckxvY2sgfHwgZG9jdW1lbnQubW96RXhpdFBvaW50ZXJMb2NrO1xuXG4gICAgICAgIC8vIG1pbm9yIGhhY2sgdG8gYWxsZXZpYXRlIGlvcyBub3Qgc3VwcG9ydGluZyBwb2ludGVybG9ja1xuICAgICAgICBpZiAodmlkZW9FbGVtZW50UGFyZW50LnJlcXVlc3RQb2ludGVyTG9jaykge1xuICAgICAgICAgICAgY29uc3Qgb25jbGljayA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICB2aWRlb0VsZW1lbnRQYXJlbnQucmVxdWVzdFBvaW50ZXJMb2NrKCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdmlkZW9FbGVtZW50UGFyZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb25jbGljayk7XG4gICAgICAgICAgICB0aGlzLm1vdXNlRXZlbnRMaXN0ZW5lclRyYWNrZXIuYWRkVW5yZWdpc3RlckNhbGxiYWNrKFxuICAgICAgICAgICAgICAgICgpID0+IHZpZGVvRWxlbWVudFBhcmVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIG9uY2xpY2spXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbG9ja1N0YXRlQ2hhbmdlTGlzdGVuZXIgPSAoKSA9PlxuICAgICAgICAgICAgbG9ja2VkTW91c2VFdmVudHMubG9ja1N0YXRlQ2hhbmdlKCk7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAgICAgICAncG9pbnRlcmxvY2tjaGFuZ2UnLFxuICAgICAgICAgICAgbG9ja1N0YXRlQ2hhbmdlTGlzdGVuZXIsXG4gICAgICAgICAgICBmYWxzZVxuICAgICAgICApO1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgICAgICAgJ21venBvaW50ZXJsb2NrY2hhbmdlJyxcbiAgICAgICAgICAgIGxvY2tTdGF0ZUNoYW5nZUxpc3RlbmVyLFxuICAgICAgICAgICAgZmFsc2VcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5tb3VzZUV2ZW50TGlzdGVuZXJUcmFja2VyLmFkZFVucmVnaXN0ZXJDYWxsYmFjayhcbiAgICAgICAgICAgICgpID0+IGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXG4gICAgICAgICAgICAgICAgJ3BvaW50ZXJsb2NrY2hhbmdlJyxcbiAgICAgICAgICAgICAgICBsb2NrU3RhdGVDaGFuZ2VMaXN0ZW5lcixcbiAgICAgICAgICAgICAgICBmYWxzZVxuICAgICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgICB0aGlzLm1vdXNlRXZlbnRMaXN0ZW5lclRyYWNrZXIuYWRkVW5yZWdpc3RlckNhbGxiYWNrKFxuICAgICAgICAgICAgKCkgPT4gZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgICAgICAgICAnbW96cG9pbnRlcmxvY2tjaGFuZ2UnLFxuICAgICAgICAgICAgICAgIGxvY2tTdGF0ZUNoYW5nZUxpc3RlbmVyLFxuICAgICAgICAgICAgICAgIGZhbHNlXG4gICAgICAgICAgICApXG4gICAgICAgICk7XG5cbiAgICAgICAgY29uc3Qgb25tb3VzZWRvd24gPSAobW91c2VFdmVudDogTW91c2VFdmVudCkgPT5cbiAgICAgICAgICAgIGxvY2tlZE1vdXNlRXZlbnRzLmhhbmRsZU1vdXNlRG93bihtb3VzZUV2ZW50KTtcbiAgICAgICAgY29uc3Qgb25tb3VzZXVwID0gKG1vdXNlRXZlbnQ6IE1vdXNlRXZlbnQpID0+XG4gICAgICAgICAgICBsb2NrZWRNb3VzZUV2ZW50cy5oYW5kbGVNb3VzZVVwKG1vdXNlRXZlbnQpO1xuICAgICAgICBjb25zdCBvbndoZWVsID0gKHdoZWVsRXZlbnQ6IFdoZWVsRXZlbnQpID0+XG4gICAgICAgICAgICBsb2NrZWRNb3VzZUV2ZW50cy5oYW5kbGVNb3VzZVdoZWVsKHdoZWVsRXZlbnQpO1xuICAgICAgICBjb25zdCBvbmRibGNsaWNrID0gKG1vdXNlRXZlbnQ6IE1vdXNlRXZlbnQpID0+XG4gICAgICAgICAgICBsb2NrZWRNb3VzZUV2ZW50cy5oYW5kbGVNb3VzZURvdWJsZShtb3VzZUV2ZW50KTtcbiAgICAgICAgdmlkZW9FbGVtZW50UGFyZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIG9ubW91c2Vkb3duKTtcbiAgICAgICAgdmlkZW9FbGVtZW50UGFyZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBvbm1vdXNldXApO1xuICAgICAgICB2aWRlb0VsZW1lbnRQYXJlbnQuYWRkRXZlbnRMaXN0ZW5lcignd2hlZWwnLCBvbndoZWVsKTtcbiAgICAgICAgdmlkZW9FbGVtZW50UGFyZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2RibGNsaWNrJywgb25kYmxjbGljayk7XG5cbiAgICAgICAgdGhpcy5tb3VzZUV2ZW50TGlzdGVuZXJUcmFja2VyLmFkZFVucmVnaXN0ZXJDYWxsYmFjayhcbiAgICAgICAgICAgICgpID0+IHZpZGVvRWxlbWVudFBhcmVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBvbm1vdXNlZG93bilcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5tb3VzZUV2ZW50TGlzdGVuZXJUcmFja2VyLmFkZFVucmVnaXN0ZXJDYWxsYmFjayhcbiAgICAgICAgICAgICgpID0+IHZpZGVvRWxlbWVudFBhcmVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgb25tb3VzZXVwKVxuICAgICAgICApO1xuICAgICAgICB0aGlzLm1vdXNlRXZlbnRMaXN0ZW5lclRyYWNrZXIuYWRkVW5yZWdpc3RlckNhbGxiYWNrKFxuICAgICAgICAgICAgKCkgPT4gdmlkZW9FbGVtZW50UGFyZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3doZWVsJywgb253aGVlbClcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5tb3VzZUV2ZW50TGlzdGVuZXJUcmFja2VyLmFkZFVucmVnaXN0ZXJDYWxsYmFjayhcbiAgICAgICAgICAgICgpID0+IHZpZGVvRWxlbWVudFBhcmVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdkYmxjbGljaycsIG9uZGJsY2xpY2spXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMubW91c2VFdmVudExpc3RlbmVyVHJhY2tlci5hZGRVbnJlZ2lzdGVyQ2FsbGJhY2soXG4gICAgICAgICAgICAoKSA9PiBsb2NrZWRNb3VzZUV2ZW50cy51bnJlZ2lzdGVyTW91c2VFdmVudHMoKVxuICAgICAgICApO1xuICAgICAgICB0aGlzLm1vdXNlRXZlbnRMaXN0ZW5lclRyYWNrZXIuYWRkVW5yZWdpc3RlckNhbGxiYWNrKCgpID0+IHtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5leGl0UG9pbnRlckxvY2sgJiZcbiAgICAgICAgICAgICAgICAoZG9jdW1lbnQucG9pbnRlckxvY2tFbGVtZW50ID09PSB2aWRlb0VsZW1lbnRQYXJlbnQgfHxcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQubW96UG9pbnRlckxvY2tFbGVtZW50ID09PSB2aWRlb0VsZW1lbnRQYXJlbnQpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5leGl0UG9pbnRlckxvY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXIgYSBob3ZlcmluZyBtb3VzZSBjbGFzc1xuICAgICAqIEBwYXJhbSBtb3VzZUNvbnRyb2xsZXIgLSBBIG1vdXNlIGNvbnRyb2xsZXIgb2JqZWN0XG4gICAgICovXG4gICAgcmVnaXN0ZXJIb3ZlcmluZ01vdXNlRXZlbnRzKG1vdXNlQ29udHJvbGxlcjogTW91c2VDb250cm9sbGVyKSB7XG4gICAgICAgIGNvbnN0IHZpZGVvRWxlbWVudFBhcmVudCA9XG4gICAgICAgICAgICB0aGlzLnZpZGVvRWxlbWVudFByb3ZpZGVyLmdldFZpZGVvUGFyZW50RWxlbWVudCgpIGFzIEhUTUxEaXZFbGVtZW50O1xuICAgICAgICBjb25zdCBob3ZlcmluZ01vdXNlRXZlbnRzID0gbmV3IEhvdmVyaW5nTW91c2VFdmVudHMobW91c2VDb250cm9sbGVyKTtcblxuICAgICAgICBjb25zdCBvbm1vdXNlbW92ZSA9IChtb3VzZUV2ZW50OiBNb3VzZUV2ZW50KSA9PlxuICAgICAgICAgICAgaG92ZXJpbmdNb3VzZUV2ZW50cy51cGRhdGVNb3VzZU1vdmVQb3NpdGlvbihtb3VzZUV2ZW50KTtcbiAgICAgICAgY29uc3Qgb25tb3VzZWRvd24gPSAobW91c2VFdmVudDogTW91c2VFdmVudCkgPT5cbiAgICAgICAgICAgIGhvdmVyaW5nTW91c2VFdmVudHMuaGFuZGxlTW91c2VEb3duKG1vdXNlRXZlbnQpO1xuICAgICAgICBjb25zdCBvbm1vdXNldXAgPSAobW91c2VFdmVudDogTW91c2VFdmVudCkgPT5cbiAgICAgICAgICAgIGhvdmVyaW5nTW91c2VFdmVudHMuaGFuZGxlTW91c2VVcChtb3VzZUV2ZW50KTtcbiAgICAgICAgY29uc3Qgb25jb250ZXh0bWVudSA9IChtb3VzZUV2ZW50OiBNb3VzZUV2ZW50KSA9PlxuICAgICAgICAgICAgaG92ZXJpbmdNb3VzZUV2ZW50cy5oYW5kbGVDb250ZXh0TWVudShtb3VzZUV2ZW50KTtcbiAgICAgICAgY29uc3Qgb253aGVlbCA9ICh3aGVlbEV2ZW50OiBXaGVlbEV2ZW50KSA9PlxuICAgICAgICAgICAgaG92ZXJpbmdNb3VzZUV2ZW50cy5oYW5kbGVNb3VzZVdoZWVsKHdoZWVsRXZlbnQpO1xuICAgICAgICBjb25zdCBvbmRibGNsaWNrID0gKG1vdXNlRXZlbnQ6IE1vdXNlRXZlbnQpID0+XG4gICAgICAgICAgICBob3ZlcmluZ01vdXNlRXZlbnRzLmhhbmRsZU1vdXNlRG91YmxlKG1vdXNlRXZlbnQpO1xuICAgICAgICB2aWRlb0VsZW1lbnRQYXJlbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgb25tb3VzZW1vdmUpO1xuICAgICAgICB2aWRlb0VsZW1lbnRQYXJlbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgb25tb3VzZWRvd24pO1xuICAgICAgICB2aWRlb0VsZW1lbnRQYXJlbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIG9ubW91c2V1cCk7XG4gICAgICAgIHZpZGVvRWxlbWVudFBhcmVudC5hZGRFdmVudExpc3RlbmVyKCdjb250ZXh0bWVudScsIG9uY29udGV4dG1lbnUpO1xuICAgICAgICB2aWRlb0VsZW1lbnRQYXJlbnQuYWRkRXZlbnRMaXN0ZW5lcignd2hlZWwnLCBvbndoZWVsKTtcbiAgICAgICAgdmlkZW9FbGVtZW50UGFyZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2RibGNsaWNrJywgb25kYmxjbGljayk7XG5cbiAgICAgICAgdGhpcy5tb3VzZUV2ZW50TGlzdGVuZXJUcmFja2VyLmFkZFVucmVnaXN0ZXJDYWxsYmFjayhcbiAgICAgICAgICAgICgpID0+IHZpZGVvRWxlbWVudFBhcmVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBvbm1vdXNlbW92ZSlcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5tb3VzZUV2ZW50TGlzdGVuZXJUcmFja2VyLmFkZFVucmVnaXN0ZXJDYWxsYmFjayhcbiAgICAgICAgICAgICgpID0+IHZpZGVvRWxlbWVudFBhcmVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBvbm1vdXNlZG93bilcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5tb3VzZUV2ZW50TGlzdGVuZXJUcmFja2VyLmFkZFVucmVnaXN0ZXJDYWxsYmFjayhcbiAgICAgICAgICAgICgpID0+IHZpZGVvRWxlbWVudFBhcmVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgb25tb3VzZXVwKVxuICAgICAgICApO1xuICAgICAgICB0aGlzLm1vdXNlRXZlbnRMaXN0ZW5lclRyYWNrZXIuYWRkVW5yZWdpc3RlckNhbGxiYWNrKFxuICAgICAgICAgICAgKCkgPT4gdmlkZW9FbGVtZW50UGFyZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NvbnRleHRtZW51Jywgb25jb250ZXh0bWVudSlcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5tb3VzZUV2ZW50TGlzdGVuZXJUcmFja2VyLmFkZFVucmVnaXN0ZXJDYWxsYmFjayhcbiAgICAgICAgICAgICgpID0+IHZpZGVvRWxlbWVudFBhcmVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd3aGVlbCcsIG9ud2hlZWwpXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMubW91c2VFdmVudExpc3RlbmVyVHJhY2tlci5hZGRVbnJlZ2lzdGVyQ2FsbGJhY2soXG4gICAgICAgICAgICAoKSA9PiB2aWRlb0VsZW1lbnRQYXJlbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignZGJsY2xpY2snLCBvbmRibGNsaWNrKVxuICAgICAgICApO1xuICAgICAgICB0aGlzLm1vdXNlRXZlbnRMaXN0ZW5lclRyYWNrZXIuYWRkVW5yZWdpc3RlckNhbGxiYWNrKFxuICAgICAgICAgICAgKCkgPT4gaG92ZXJpbmdNb3VzZUV2ZW50cy51bnJlZ2lzdGVyTW91c2VFdmVudHMoKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldCB0aGUgbW91c2UgZW50ZXIgYW5kIG1vdXNlIGxlYXZlIGV2ZW50c1xuICAgICAqL1xuICAgIHJlZ2lzdGVyTW91c2VFbnRlckFuZExlYXZlRXZlbnRzKCkge1xuICAgICAgICBjb25zdCB2aWRlb0VsZW1lbnRQYXJlbnQgPVxuICAgICAgICAgICAgdGhpcy52aWRlb0VsZW1lbnRQcm92aWRlci5nZXRWaWRlb1BhcmVudEVsZW1lbnQoKSBhcyBIVE1MRGl2RWxlbWVudDtcblxuICAgICAgICAvLyBIYW5kbGUgd2hlbiB0aGUgTW91c2UgaGFzIGVudGVyZWQgdGhlIGVsZW1lbnRcbiAgICAgICAgY29uc3Qgb25tb3VzZWVudGVyID0gKGV2ZW50OiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgICAgICAgICBpZiAoIXRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIuaXNWaWRlb1JlYWR5KCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBMb2dnZXIuTG9nKExvZ2dlci5HZXRTdGFja1RyYWNlKCksICdNb3VzZSBFbnRlcmVkJywgNik7XG4gICAgICAgICAgICB0aGlzLnNlbmRNb3VzZUVudGVyKCk7XG4gICAgICAgICAgICB0aGlzLnByZXNzTW91c2VCdXR0b25zKGV2ZW50LmJ1dHRvbnMsIGV2ZW50LngsIGV2ZW50LnkpO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIEhhbmRsZXMgd2hlbiB0aGUgbW91c2UgaGFzIGxlZnQgdGhlIGVsZW1lbnRcbiAgICAgICAgY29uc3Qgb25tb3VzZWxlYXZlID0gKGV2ZW50OiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgICAgICAgICBpZiAoIXRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIuaXNWaWRlb1JlYWR5KCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBMb2dnZXIuTG9nKExvZ2dlci5HZXRTdGFja1RyYWNlKCksICdNb3VzZSBMZWZ0JywgNik7XG4gICAgICAgICAgICB0aGlzLnNlbmRNb3VzZUxlYXZlKCk7XG4gICAgICAgICAgICB0aGlzLnJlbGVhc2VNb3VzZUJ1dHRvbnMoZXZlbnQuYnV0dG9ucywgZXZlbnQueCwgZXZlbnQueSk7XG4gICAgICAgIH07XG4gICAgICAgIHZpZGVvRWxlbWVudFBhcmVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgb25tb3VzZWVudGVyKTtcbiAgICAgICAgdmlkZW9FbGVtZW50UGFyZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCBvbm1vdXNlbGVhdmUpO1xuXG4gICAgICAgIHRoaXMubW91c2VFdmVudExpc3RlbmVyVHJhY2tlci5hZGRVbnJlZ2lzdGVyQ2FsbGJhY2soXG4gICAgICAgICAgICAoKSA9PiB2aWRlb0VsZW1lbnRQYXJlbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2VlbnRlcicsIG9ubW91c2VlbnRlcilcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5tb3VzZUV2ZW50TGlzdGVuZXJUcmFja2VyLmFkZFVucmVnaXN0ZXJDYWxsYmFjayhcbiAgICAgICAgICAgICgpID0+IHZpZGVvRWxlbWVudFBhcmVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgb25tb3VzZWxlYXZlKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhhbmRsZSB3aGVuIGEgbW91c2UgYnV0dG9uIGlzIHJlbGVhc2VkXG4gICAgICogQHBhcmFtIGJ1dHRvbnMgLSBNb3VzZSBCdXR0b25cbiAgICAgKiBAcGFyYW0gWCAtIE1vdXNlIHBvaW50ZXIgWCBjb29yZGluYXRlXG4gICAgICogQHBhcmFtIFkgLSBNb3VzZSBwb2ludGVyIFkgY29vcmRpbmF0ZVxuICAgICAqL1xuICAgIHJlbGVhc2VNb3VzZUJ1dHRvbnMoYnV0dG9uczogbnVtYmVyLCBYOiBudW1iZXIsIFk6IG51bWJlcikge1xuICAgICAgICBjb25zdCBjb29yZCA9IHRoaXMuY29vcmRpbmF0ZUNvbnZlcnRlci5ub3JtYWxpemVBbmRRdWFudGl6ZVVuc2lnbmVkKFxuICAgICAgICAgICAgWCxcbiAgICAgICAgICAgIFlcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKGJ1dHRvbnMgJiBNb3VzZUJ1dHRvbnNNYXNrLnByaW1hcnlCdXR0b24pIHtcbiAgICAgICAgICAgIHRoaXMuc2VuZE1vdXNlVXAoTW91c2VCdXR0b24ubWFpbkJ1dHRvbiwgY29vcmQueCwgY29vcmQueSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJ1dHRvbnMgJiBNb3VzZUJ1dHRvbnNNYXNrLnNlY29uZGFyeUJ1dHRvbikge1xuICAgICAgICAgICAgdGhpcy5zZW5kTW91c2VVcChNb3VzZUJ1dHRvbi5zZWNvbmRhcnlCdXR0b24sIGNvb3JkLngsIGNvb3JkLnkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChidXR0b25zICYgTW91c2VCdXR0b25zTWFzay5hdXhpbGlhcnlCdXR0b24pIHtcbiAgICAgICAgICAgIHRoaXMuc2VuZE1vdXNlVXAoTW91c2VCdXR0b24uYXV4aWxpYXJ5QnV0dG9uLCBjb29yZC54LCBjb29yZC55KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYnV0dG9ucyAmIE1vdXNlQnV0dG9uc01hc2suZm91cnRoQnV0dG9uKSB7XG4gICAgICAgICAgICB0aGlzLnNlbmRNb3VzZVVwKE1vdXNlQnV0dG9uLmZvdXJ0aEJ1dHRvbiwgY29vcmQueCwgY29vcmQueSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJ1dHRvbnMgJiBNb3VzZUJ1dHRvbnNNYXNrLmZpZnRoQnV0dG9uKSB7XG4gICAgICAgICAgICB0aGlzLnNlbmRNb3VzZVVwKE1vdXNlQnV0dG9uLmZpZnRoQnV0dG9uLCBjb29yZC54LCBjb29yZC55KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhhbmRsZSB3aGVuIGEgbW91c2UgYnV0dG9uIGlzIHByZXNzZWRcbiAgICAgKiBAcGFyYW0gYnV0dG9ucyAtIE1vdXNlIEJ1dHRvblxuICAgICAqIEBwYXJhbSBYIC0gTW91c2UgcG9pbnRlciBYIGNvb3JkaW5hdGVcbiAgICAgKiBAcGFyYW0gWSAtIE1vdXNlIHBvaW50ZXIgWSBjb29yZGluYXRlXG4gICAgICovXG4gICAgcHJlc3NNb3VzZUJ1dHRvbnMoYnV0dG9uczogbnVtYmVyLCBYOiBudW1iZXIsIFk6IG51bWJlcikge1xuICAgICAgICBpZiAoIXRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIuaXNWaWRlb1JlYWR5KCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjb29yZCA9IHRoaXMuY29vcmRpbmF0ZUNvbnZlcnRlci5ub3JtYWxpemVBbmRRdWFudGl6ZVVuc2lnbmVkKFxuICAgICAgICAgICAgWCxcbiAgICAgICAgICAgIFlcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKGJ1dHRvbnMgJiBNb3VzZUJ1dHRvbnNNYXNrLnByaW1hcnlCdXR0b24pIHtcbiAgICAgICAgICAgIHRoaXMuc2VuZE1vdXNlRG93bihNb3VzZUJ1dHRvbi5tYWluQnV0dG9uLCBjb29yZC54LCBjb29yZC55KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYnV0dG9ucyAmIE1vdXNlQnV0dG9uc01hc2suc2Vjb25kYXJ5QnV0dG9uKSB7XG4gICAgICAgICAgICB0aGlzLnNlbmRNb3VzZURvd24oTW91c2VCdXR0b24uc2Vjb25kYXJ5QnV0dG9uLCBjb29yZC54LCBjb29yZC55KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYnV0dG9ucyAmIE1vdXNlQnV0dG9uc01hc2suYXV4aWxpYXJ5QnV0dG9uKSB7XG4gICAgICAgICAgICB0aGlzLnNlbmRNb3VzZURvd24oTW91c2VCdXR0b24uYXV4aWxpYXJ5QnV0dG9uLCBjb29yZC54LCBjb29yZC55KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYnV0dG9ucyAmIE1vdXNlQnV0dG9uc01hc2suZm91cnRoQnV0dG9uKSB7XG4gICAgICAgICAgICB0aGlzLnNlbmRNb3VzZURvd24oTW91c2VCdXR0b24uZm91cnRoQnV0dG9uLCBjb29yZC54LCBjb29yZC55KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYnV0dG9ucyAmIE1vdXNlQnV0dG9uc01hc2suZmlmdGhCdXR0b24pIHtcbiAgICAgICAgICAgIHRoaXMuc2VuZE1vdXNlRG93bihNb3VzZUJ1dHRvbi5maWZ0aEJ1dHRvbiwgY29vcmQueCwgY29vcmQueSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIYW5kbGVzIG1vdXNlIGVudGVyXG4gICAgICovXG4gICAgc2VuZE1vdXNlRW50ZXIoKSB7XG4gICAgICAgIGlmICghdGhpcy52aWRlb0VsZW1lbnRQcm92aWRlci5pc1ZpZGVvUmVhZHkoKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHRvU3RyZWFtZXJIYW5kbGVycyA9XG4gICAgICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyLnRvU3RyZWFtZXJIYW5kbGVycztcbiAgICAgICAgdG9TdHJlYW1lckhhbmRsZXJzLmdldCgnTW91c2VFbnRlcicpKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGFuZGxlcyBtb3VzZSBMZWF2ZVxuICAgICAqL1xuICAgIHNlbmRNb3VzZUxlYXZlKCkge1xuICAgICAgICBpZiAoIXRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIuaXNWaWRlb1JlYWR5KCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0b1N0cmVhbWVySGFuZGxlcnMgPVxuICAgICAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlci50b1N0cmVhbWVySGFuZGxlcnM7XG4gICAgICAgIHRvU3RyZWFtZXJIYW5kbGVycy5nZXQoJ01vdXNlTGVhdmUnKSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhhbmRsZXMgd2hlbiBhIG1vdXNlIGJ1dHRvbiBpcyBwcmVzc2VkIGRvd25cbiAgICAgKiBAcGFyYW0gYnV0dG9uIC0gTW91c2UgQnV0dG9uIFByZXNzZWRcbiAgICAgKiBAcGFyYW0gWCAgLSBNb3VzZSBYIENvb3JkaW5hdGVcbiAgICAgKiBAcGFyYW0gWSAgLSBNb3VzZSBZIENvb3JkaW5hdGVcbiAgICAgKi9cbiAgICBzZW5kTW91c2VEb3duKGJ1dHRvbjogbnVtYmVyLCBYOiBudW1iZXIsIFk6IG51bWJlcikge1xuICAgICAgICBpZiAoIXRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIuaXNWaWRlb1JlYWR5KCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBMb2dnZXIuTG9nKFxuICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcbiAgICAgICAgICAgIGBtb3VzZSBidXR0b24gJHtidXR0b259IGRvd24gYXQgKCR7WH0sICR7WX0pYCxcbiAgICAgICAgICAgIDZcbiAgICAgICAgKTtcbiAgICAgICAgY29uc3QgdG9TdHJlYW1lckhhbmRsZXJzID1cbiAgICAgICAgICAgIHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXIudG9TdHJlYW1lckhhbmRsZXJzO1xuICAgICAgICB0b1N0cmVhbWVySGFuZGxlcnMuZ2V0KCdNb3VzZURvd24nKShbYnV0dG9uLCBYLCBZXSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGFuZGxlcyB3aGVuIGEgbW91c2UgYnV0dG9uIGlzIHByZXNzZWQgdXBcbiAgICAgKiBAcGFyYW0gYnV0dG9uIC0gTW91c2UgQnV0dG9uIFByZXNzZWRcbiAgICAgKiBAcGFyYW0gWCAgLSBNb3VzZSBYIENvb3JkaW5hdGVcbiAgICAgKiBAcGFyYW0gWSAgLSBNb3VzZSBZIENvb3JkaW5hdGVcbiAgICAgKi9cbiAgICBzZW5kTW91c2VVcChidXR0b246IG51bWJlciwgWDogbnVtYmVyLCBZOiBudW1iZXIpIHtcbiAgICAgICAgaWYgKCF0aGlzLnZpZGVvRWxlbWVudFByb3ZpZGVyLmlzVmlkZW9SZWFkeSgpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgTG9nZ2VyLkxvZyhcbiAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXG4gICAgICAgICAgICBgbW91c2UgYnV0dG9uICR7YnV0dG9ufSB1cCBhdCAoJHtYfSwgJHtZfSlgLFxuICAgICAgICAgICAgNlxuICAgICAgICApO1xuICAgICAgICBjb25zdCBjb29yZCA9IHRoaXMuY29vcmRpbmF0ZUNvbnZlcnRlci5ub3JtYWxpemVBbmRRdWFudGl6ZVVuc2lnbmVkKFxuICAgICAgICAgICAgWCxcbiAgICAgICAgICAgIFlcbiAgICAgICAgKTtcbiAgICAgICAgY29uc3QgdG9TdHJlYW1lckhhbmRsZXJzID1cbiAgICAgICAgICAgIHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXIudG9TdHJlYW1lckhhbmRsZXJzO1xuICAgICAgICB0b1N0cmVhbWVySGFuZGxlcnMuZ2V0KCdNb3VzZVVwJykoW2J1dHRvbiwgY29vcmQueCwgY29vcmQueV0pO1xuICAgIH1cbn1cbiIsIi8vIENvcHlyaWdodCBFcGljIEdhbWVzLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG5cbi8qKlxuICogUmVnaXN0ZXJzIHRoZSBTcGVjaWFsIEtleSBjb2Rlc1xuICogIE11c3QgYmUga2VwdCBpbiBzeW5jIHdpdGggSmF2YVNjcmlwdEtleUNvZGVUb0ZLZXkgQysrIGFycmF5LlxuICogVGhlIGluZGV4IG9mIHRoZSBlbnRyeSBpbiB0aGUgYXJyYXkgaXMgdGhlIHNwZWNpYWwga2V5IGNvZGUgZ2l2ZW4gYmVsb3cuXG4gKi9cbmV4cG9ydCBjbGFzcyBTcGVjaWFsS2V5Q29kZXMge1xuICAgIHN0YXRpYyBiYWNrU3BhY2UgPSA4O1xuICAgIHN0YXRpYyBzaGlmdCA9IDE2O1xuICAgIHN0YXRpYyBjb250cm9sID0gMTc7XG4gICAgc3RhdGljIGFsdCA9IDE4O1xuICAgIHN0YXRpYyByaWdodFNoaWZ0ID0gMjUzO1xuICAgIHN0YXRpYyByaWdodENvbnRyb2wgPSAyNTQ7XG4gICAgc3RhdGljIHJpZ2h0QWx0ID0gMjU1O1xufVxuIiwiLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSAnLi4vTG9nZ2VyL0xvZ2dlcic7XG5pbXBvcnQgeyBDb29yZGluYXRlQ29udmVydGVyIH0gZnJvbSAnLi4vVXRpbC9Db29yZGluYXRlQ29udmVydGVyJztcbmltcG9ydCB7IFN0cmVhbU1lc3NhZ2VDb250cm9sbGVyIH0gZnJvbSAnLi4vVWVJbnN0YW5jZU1lc3NhZ2UvU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXInO1xuaW1wb3J0IHsgVmlkZW9QbGF5ZXIgfSBmcm9tICcuLi9WaWRlb1BsYXllci9WaWRlb1BsYXllcic7XG5pbXBvcnQgeyBJVG91Y2hDb250cm9sbGVyIH0gZnJvbSAnLi9JVG91Y2hDb250cm9sbGVyJztcbmltcG9ydCB7IEV2ZW50TGlzdGVuZXJUcmFja2VyIH0gZnJvbSAnLi4vVXRpbC9FdmVudExpc3RlbmVyVHJhY2tlcic7XG4vKipcbiAqIEhhbmRsZXMgdGhlIFRvdWNoIGlucHV0IEV2ZW50c1xuICovXG5leHBvcnQgY2xhc3MgVG91Y2hDb250cm9sbGVyIGltcGxlbWVudHMgSVRvdWNoQ29udHJvbGxlciB7XG4gICAgdG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXI6IFN0cmVhbU1lc3NhZ2VDb250cm9sbGVyO1xuICAgIHZpZGVvRWxlbWVudFByb3ZpZGVyOiBWaWRlb1BsYXllcjtcbiAgICBjb29yZGluYXRlQ29udmVydGVyOiBDb29yZGluYXRlQ29udmVydGVyO1xuICAgIHZpZGVvRWxlbWVudFBhcmVudDogSFRNTFZpZGVvRWxlbWVudDtcbiAgICBmaW5nZXJzID0gWzksIDgsIDcsIDYsIDUsIDQsIDMsIDIsIDEsIDBdO1xuICAgIGZpbmdlcklkcyA9IG5ldyBNYXAoKTtcbiAgICBtYXhCeXRlVmFsdWUgPSAyNTU7XG5cbiAgICAvLyBVdGlsaXR5IGZvciBrZWVwaW5nIHRyYWNrIG9mIGV2ZW50IGhhbmRsZXJzIGFuZCB1bnJlZ2lzdGVyaW5nIHRoZW1cbiAgICBwcml2YXRlIHRvdWNoRXZlbnRMaXN0ZW5lclRyYWNrZXIgPSBuZXcgRXZlbnRMaXN0ZW5lclRyYWNrZXIoKTtcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB0b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlciAtIFN0cmVhbSBtZXNzYWdlIGluc3RhbmNlXG4gICAgICogQHBhcmFtIHZpZGVvRWxlbWVudFByb3ZpZGVyIC0gVmlkZW8gUGxheWVyIGluc3RhbmNlXG4gICAgICogQHBhcmFtIGNvb3JkaW5hdGVDb252ZXJ0ZXIgLSBBIGNvb3JkaW5hdGUgY29udmVydGVyIGluc3RhbmNlXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyOiBTdHJlYW1NZXNzYWdlQ29udHJvbGxlcixcbiAgICAgICAgdmlkZW9FbGVtZW50UHJvdmlkZXI6IFZpZGVvUGxheWVyLFxuICAgICAgICBjb29yZGluYXRlQ29udmVydGVyOiBDb29yZGluYXRlQ29udmVydGVyXG4gICAgKSB7XG4gICAgICAgIHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXIgPSB0b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlcjtcbiAgICAgICAgdGhpcy52aWRlb0VsZW1lbnRQcm92aWRlciA9IHZpZGVvRWxlbWVudFByb3ZpZGVyO1xuICAgICAgICB0aGlzLmNvb3JkaW5hdGVDb252ZXJ0ZXIgPSBjb29yZGluYXRlQ29udmVydGVyO1xuICAgICAgICB0aGlzLnZpZGVvRWxlbWVudFBhcmVudCA9IHZpZGVvRWxlbWVudFByb3ZpZGVyLmdldFZpZGVvRWxlbWVudCgpO1xuICAgICAgICBjb25zdCBvbnRvdWNoc3RhcnQgPSAoZXY6IFRvdWNoRXZlbnQpID0+XG4gICAgICAgICAgICB0aGlzLm9uVG91Y2hTdGFydChldik7XG4gICAgICAgIGNvbnN0IG9udG91Y2hlbmQgPSAoZXY6IFRvdWNoRXZlbnQpID0+XG4gICAgICAgICAgICB0aGlzLm9uVG91Y2hFbmQoZXYpO1xuICAgICAgICBjb25zdCBvbnRvdWNobW92ZSA9IChldjogVG91Y2hFdmVudCkgPT5cbiAgICAgICAgICAgIHRoaXMub25Ub3VjaE1vdmUoZXYpO1xuICAgICAgICB0aGlzLnZpZGVvRWxlbWVudFBhcmVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0Jywgb250b3VjaHN0YXJ0LCB7IHBhc3NpdmU6IGZhbHNlIH0pO1xuICAgICAgICB0aGlzLnZpZGVvRWxlbWVudFBhcmVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIG9udG91Y2hlbmQsIHsgcGFzc2l2ZTogZmFsc2UgfSk7XG4gICAgICAgIHRoaXMudmlkZW9FbGVtZW50UGFyZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIG9udG91Y2htb3ZlLCB7IHBhc3NpdmU6IGZhbHNlIH0pO1xuICAgICAgICB0aGlzLnRvdWNoRXZlbnRMaXN0ZW5lclRyYWNrZXIuYWRkVW5yZWdpc3RlckNhbGxiYWNrKFxuICAgICAgICAgICAgKCkgPT4gdGhpcy52aWRlb0VsZW1lbnRQYXJlbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIG9udG91Y2hzdGFydClcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy50b3VjaEV2ZW50TGlzdGVuZXJUcmFja2VyLmFkZFVucmVnaXN0ZXJDYWxsYmFjayhcbiAgICAgICAgICAgICgpID0+IHRoaXMudmlkZW9FbGVtZW50UGFyZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgb250b3VjaGVuZClcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy50b3VjaEV2ZW50TGlzdGVuZXJUcmFja2VyLmFkZFVucmVnaXN0ZXJDYWxsYmFjayhcbiAgICAgICAgICAgICgpID0+IHRoaXMudmlkZW9FbGVtZW50UGFyZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIG9udG91Y2htb3ZlKVxuICAgICAgICApO1xuICAgICAgICBMb2dnZXIuTG9nKExvZ2dlci5HZXRTdGFja1RyYWNlKCksICdUb3VjaCBFdmVudHMgUmVnaXN0ZXJlZCcsIDYpO1xuXG4gICAgICAgIC8vIGlzIHRoaXMgc3RyaWN0bHkgbmVjZXNzYXJ5P1xuICAgICAgICBjb25zdCBwcmV2ZW50T25Ub3VjaE1vdmUgPSAoZXZlbnQ6IFRvdWNoRXZlbnQpID0+IHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH07XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIHByZXZlbnRPblRvdWNoTW92ZSwgeyBwYXNzaXZlOiBmYWxzZSB9KTtcbiAgICAgICAgdGhpcy50b3VjaEV2ZW50TGlzdGVuZXJUcmFja2VyLmFkZFVucmVnaXN0ZXJDYWxsYmFjayhcbiAgICAgICAgICAgICgpID0+IGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIHByZXZlbnRPblRvdWNoTW92ZSlcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVbnJlZ2lzdGVyIGFsbCB0b3VjaCBldmVudHNcbiAgICAgKi9cbiAgICB1bnJlZ2lzdGVyVG91Y2hFdmVudHMoKSB7XG4gICAgICAgIHRoaXMudG91Y2hFdmVudExpc3RlbmVyVHJhY2tlci51bnJlZ2lzdGVyQWxsKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtZW1iZXIgYSB0b3VjaCBjb21tYW5kXG4gICAgICogQHBhcmFtIHRvdWNoIC0gdGhlIHRvdWNoIGNvbW1hbmRcbiAgICAgKi9cbiAgICByZW1lbWJlclRvdWNoKHRvdWNoOiBUb3VjaCkge1xuICAgICAgICBjb25zdCBmaW5nZXIgPSB0aGlzLmZpbmdlcnMucG9wKCk7XG4gICAgICAgIGlmIChmaW5nZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgTG9nZ2VyLkxvZyhcbiAgICAgICAgICAgICAgICBMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLFxuICAgICAgICAgICAgICAgICdleGhhdXN0ZWQgdG91Y2ggaWRlbnRpZmllcnMnLFxuICAgICAgICAgICAgICAgIDZcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5maW5nZXJJZHMuc2V0KHRvdWNoLmlkZW50aWZpZXIsIGZpbmdlcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRm9yZ2V0cyBhIHRvdWNoIGNvbW1hbmRcbiAgICAgKiBAcGFyYW0gdG91Y2ggLSB0aGUgdG91Y2ggY29tbWFuZFxuICAgICAqL1xuICAgIGZvcmdldFRvdWNoKHRvdWNoOiBUb3VjaCkge1xuICAgICAgICB0aGlzLmZpbmdlcnMucHVzaCh0aGlzLmZpbmdlcklkcy5nZXQodG91Y2guaWRlbnRpZmllcikpO1xuICAgICAgICAvLyBTb3J0IGFycmF5IGJhY2sgaW50byBkZXNjZW5kaW5nIG9yZGVyLiBUaGlzIG1lYW5zIGlmIGZpbmdlciAnMScgd2VyZSB0byBsaWZ0IGFmdGVyIGZpbmdlciAnMCcsIHdlIHdvdWxkIGVuc3VyZSB0aGF0IDAgd2lsbCBiZSB0aGUgZmlyc3QgaW5kZXggdG8gcG9wXG4gICAgICAgIHRoaXMuZmluZ2Vycy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgICByZXR1cm4gYiAtIGE7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmZpbmdlcklkcy5kZWxldGUodG91Y2guaWRlbnRpZmllcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogV2hlbiBhIHRvdWNoIGV2ZW50IHN0YXJ0c1xuICAgICAqIEBwYXJhbSB0b3VjaEV2ZW50IC0gdGhlIHRvdWNoIGV2ZW50IGJlaW5nIGludGVyY2VwdGVkXG4gICAgICovXG4gICAgb25Ub3VjaFN0YXJ0KHRvdWNoRXZlbnQ6IFRvdWNoRXZlbnQpIHtcbiAgICAgICAgaWYgKCF0aGlzLnZpZGVvRWxlbWVudFByb3ZpZGVyLmlzVmlkZW9SZWFkeSgpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgdCA9IDA7IHQgPCB0b3VjaEV2ZW50LmNoYW5nZWRUb3VjaGVzLmxlbmd0aDsgdCsrKSB7XG4gICAgICAgICAgICB0aGlzLnJlbWVtYmVyVG91Y2godG91Y2hFdmVudC5jaGFuZ2VkVG91Y2hlc1t0XSk7XG4gICAgICAgIH1cbiAgICAgICAgTG9nZ2VyLkxvZyhMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAndG91Y2ggc3RhcnQnLCA2KTtcblxuICAgICAgICB0aGlzLmVtaXRUb3VjaERhdGEoJ1RvdWNoU3RhcnQnLCB0b3VjaEV2ZW50LmNoYW5nZWRUb3VjaGVzKTtcbiAgICAgICAgdG91Y2hFdmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFdoZW4gYSB0b3VjaCBldmVudCBlbmRzXG4gICAgICogQHBhcmFtIHRvdWNoRXZlbnQgLSB0aGUgdG91Y2ggZXZlbnQgYmVpbmcgaW50ZXJjZXB0ZWRcbiAgICAgKi9cbiAgICBvblRvdWNoRW5kKHRvdWNoRXZlbnQ6IFRvdWNoRXZlbnQpIHtcbiAgICAgICAgaWYgKCF0aGlzLnZpZGVvRWxlbWVudFByb3ZpZGVyLmlzVmlkZW9SZWFkeSgpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgTG9nZ2VyLkxvZyhMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAndG91Y2ggZW5kJywgNik7XG4gICAgICAgIHRoaXMuZW1pdFRvdWNoRGF0YSgnVG91Y2hFbmQnLCB0b3VjaEV2ZW50LmNoYW5nZWRUb3VjaGVzKTtcbiAgICAgICAgLy8gUmUtY3ljbGUgdW5pcXVlIGlkZW50aWZpZXJzIHByZXZpb3VzbHkgYXNzaWduZWQgdG8gZWFjaCB0b3VjaC5cbiAgICAgICAgZm9yIChsZXQgdCA9IDA7IHQgPCB0b3VjaEV2ZW50LmNoYW5nZWRUb3VjaGVzLmxlbmd0aDsgdCsrKSB7XG4gICAgICAgICAgICB0aGlzLmZvcmdldFRvdWNoKHRvdWNoRXZlbnQuY2hhbmdlZFRvdWNoZXNbdF0pO1xuICAgICAgICB9XG4gICAgICAgIHRvdWNoRXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiB3aGVuIGEgbW92aW5nIHRvdWNoIGV2ZW50IG9jY3Vyc1xuICAgICAqIEBwYXJhbSB0b3VjaEV2ZW50IC0gdGhlIHRvdWNoIGV2ZW50IGJlaW5nIGludGVyY2VwdGVkXG4gICAgICovXG4gICAgb25Ub3VjaE1vdmUodG91Y2hFdmVudDogVG91Y2hFdmVudCkge1xuICAgICAgICBpZiAoIXRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIuaXNWaWRlb1JlYWR5KCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBMb2dnZXIuTG9nKExvZ2dlci5HZXRTdGFja1RyYWNlKCksICd0b3VjaCBtb3ZlJywgNik7XG4gICAgICAgIHRoaXMuZW1pdFRvdWNoRGF0YSgnVG91Y2hNb3ZlJywgdG91Y2hFdmVudC50b3VjaGVzKTtcbiAgICAgICAgdG91Y2hFdmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cblxuICAgIGVtaXRUb3VjaERhdGEodHlwZTogc3RyaW5nLCB0b3VjaGVzOiBUb3VjaExpc3QpIHtcbiAgICAgICAgaWYgKCF0aGlzLnZpZGVvRWxlbWVudFByb3ZpZGVyLmlzVmlkZW9SZWFkeSgpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdmlkZW9FbGVtZW50UGFyZW50ID1cbiAgICAgICAgICAgIHRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIuZ2V0VmlkZW9QYXJlbnRFbGVtZW50KCk7XG4gICAgICAgIGNvbnN0IHRvU3RyZWFtZXJIYW5kbGVycyA9XG4gICAgICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyLnRvU3RyZWFtZXJIYW5kbGVycztcblxuICAgICAgICBmb3IgKGxldCB0ID0gMDsgdCA8IHRvdWNoZXMubGVuZ3RoOyB0KyspIHtcbiAgICAgICAgICAgIGNvbnN0IG51bVRvdWNoZXMgPSAxOyAvLyB0aGUgbnVtYmVyIG9mIHRvdWNoZXMgdG8gYmUgc2VudCB0aGlzIG1lc3NhZ2VcbiAgICAgICAgICAgIGNvbnN0IHRvdWNoID0gdG91Y2hlc1t0XTtcbiAgICAgICAgICAgIGNvbnN0IHggPSB0b3VjaC5jbGllbnRYIC0gdmlkZW9FbGVtZW50UGFyZW50Lm9mZnNldExlZnQ7XG4gICAgICAgICAgICBjb25zdCB5ID0gdG91Y2guY2xpZW50WSAtIHZpZGVvRWxlbWVudFBhcmVudC5vZmZzZXRUb3A7XG4gICAgICAgICAgICBMb2dnZXIuTG9nKFxuICAgICAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXG4gICAgICAgICAgICAgICAgYEYke3RoaXMuZmluZ2VySWRzLmdldCh0b3VjaC5pZGVudGlmaWVyKX09KCR7eH0sICR7eX0pYCxcbiAgICAgICAgICAgICAgICA2XG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBjb25zdCBjb29yZCA9IHRoaXMuY29vcmRpbmF0ZUNvbnZlcnRlci5ub3JtYWxpemVBbmRRdWFudGl6ZVVuc2lnbmVkKFxuICAgICAgICAgICAgICAgIHgsXG4gICAgICAgICAgICAgICAgeVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ1RvdWNoU3RhcnQnOlxuICAgICAgICAgICAgICAgICAgICB0b1N0cmVhbWVySGFuZGxlcnMuZ2V0KCdUb3VjaFN0YXJ0JykoW1xuICAgICAgICAgICAgICAgICAgICAgICAgbnVtVG91Y2hlcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvb3JkLngsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb29yZC55LFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5maW5nZXJJZHMuZ2V0KHRvdWNoLmlkZW50aWZpZXIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXhCeXRlVmFsdWUgKiB0b3VjaC5mb3JjZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvb3JkLmluUmFuZ2UgPyAxIDogMFxuICAgICAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnVG91Y2hFbmQnOlxuICAgICAgICAgICAgICAgICAgICB0b1N0cmVhbWVySGFuZGxlcnMuZ2V0KCdUb3VjaEVuZCcpKFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG51bVRvdWNoZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb29yZC54LFxuICAgICAgICAgICAgICAgICAgICAgICAgY29vcmQueSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZmluZ2VySWRzLmdldCh0b3VjaC5pZGVudGlmaWVyKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWF4Qnl0ZVZhbHVlICogdG91Y2guZm9yY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb29yZC5pblJhbmdlID8gMSA6IDBcbiAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ1RvdWNoTW92ZSc6XG4gICAgICAgICAgICAgICAgICAgIHRvU3RyZWFtZXJIYW5kbGVycy5nZXQoJ1RvdWNoTW92ZScpKFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG51bVRvdWNoZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb29yZC54LFxuICAgICAgICAgICAgICAgICAgICAgICAgY29vcmQueSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZmluZ2VySWRzLmdldCh0b3VjaC5pZGVudGlmaWVyKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWF4Qnl0ZVZhbHVlICogdG91Y2guZm9yY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb29yZC5pblJhbmdlID8gMSA6IDBcbiAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuIiwiLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuaW1wb3J0IHsgU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIgfSBmcm9tICcuLi9VZUluc3RhbmNlTWVzc2FnZS9TdHJlYW1NZXNzYWdlQ29udHJvbGxlcic7XG5pbXBvcnQgeyBDb250cm9sbGVyIH0gZnJvbSAnLi9HYW1lcGFkVHlwZXMnO1xuaW1wb3J0IHsgV2ViWFJVdGlscyB9IGZyb20gJy4uL1V0aWwvV2ViWFJVdGlscyc7XG5cbi8qKlxuICogVGhlIGNsYXNzIHRoYXQgaGFuZGxlcyB0aGUgZnVuY3Rpb25hbGl0eSBvZiB4cmdhbWVwYWRzIGFuZCBjb250cm9sbGVyc1xuICovXG5leHBvcnQgY2xhc3MgWFJHYW1lcGFkQ29udHJvbGxlciB7XG4gICAgY29udHJvbGxlcnM6IEFycmF5PENvbnRyb2xsZXI+O1xuICAgIHRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyOiBTdHJlYW1NZXNzYWdlQ29udHJvbGxlcjtcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB0b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlciAtIFN0cmVhbSBtZXNzYWdlIGluc3RhbmNlXG4gICAgICovXG4gICAgY29uc3RydWN0b3IodG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXI6IFN0cmVhbU1lc3NhZ2VDb250cm9sbGVyKSB7XG4gICAgICAgIHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXIgPSB0b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlcjtcbiAgICAgICAgdGhpcy5jb250cm9sbGVycyA9IFtdO1xuICAgIH1cblxuICAgIHVwZGF0ZVN0YXR1cyhcbiAgICAgICAgc291cmNlOiBYUklucHV0U291cmNlLFxuICAgICAgICBmcmFtZTogWFJGcmFtZSxcbiAgICAgICAgcmVmU3BhY2U6IFhSUmVmZXJlbmNlU3BhY2VcbiAgICApIHtcbiAgICAgICAgaWYgKHNvdXJjZS5nYW1lcGFkKSB7XG4gICAgICAgICAgICBjb25zdCBnYW1lcGFkUG9zZSA9IGZyYW1lLmdldFBvc2Uoc291cmNlLmdyaXBTcGFjZSwgcmVmU3BhY2UpO1xuICAgICAgICAgICAgaWYgKCFnYW1lcGFkUG9zZSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IHN5c3RlbSA9IDA7XG4gICAgICAgICAgICBpZiAoc291cmNlLnByb2ZpbGVzLmluY2x1ZGVzKCdodGMtdml2ZScpKSB7XG4gICAgICAgICAgICAgICAgc3lzdGVtID0gMTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc291cmNlLnByb2ZpbGVzLmluY2x1ZGVzKCdvY3VsdXMtdG91Y2gnKSkge1xuICAgICAgICAgICAgICAgIHN5c3RlbSA9IDI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBUT0RPICh3aWxsaWFtLmJlbGNoZXIpOiBBZGQgb3RoZXIgcHJvZmlsZXMgKFF1ZXN0LCBNaWNyb3NvZnQgTWl4ZWQgUmVhbGl0eSwgZXRjKVxuICAgICAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlci50b1N0cmVhbWVySGFuZGxlcnMuZ2V0KCdYUlN5c3RlbScpKFtcbiAgICAgICAgICAgICAgICBzeXN0ZW1cbiAgICAgICAgICAgIF0pO1xuXG4gICAgICAgICAgICAvLyBEZWZhdWx0OiBBbnlIYW5kICgyKVxuICAgICAgICAgICAgbGV0IGhhbmRlZG5lc3MgPSAyO1xuICAgICAgICAgICAgc3dpdGNoIChzb3VyY2UuaGFuZGVkbmVzcykge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2xlZnQnOlxuICAgICAgICAgICAgICAgICAgICBoYW5kZWRuZXNzID0gMDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAncmlnaHQnOlxuICAgICAgICAgICAgICAgICAgICBoYW5kZWRuZXNzID0gMTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFNlbmQgY29udHJvbGxlciB0cmFuc2Zvcm1cbiAgICAgICAgICAgIGNvbnN0IG1hdHJpeCA9IGdhbWVwYWRQb3NlLnRyYW5zZm9ybS5tYXRyaXg7XG4gICAgICAgICAgICBjb25zdCBtYXQgPSBbXTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTY7IGkrKykge1xuICAgICAgICAgICAgICAgIG1hdFtpXSA9IG5ldyBGbG9hdDMyQXJyYXkoW21hdHJpeFtpXV0pWzBdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBwcmV0dGllci1pZ25vcmVcbiAgICAgICAgICAgIHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXIudG9TdHJlYW1lckhhbmRsZXJzLmdldCgnWFJDb250cm9sbGVyVHJhbnNmb3JtJykoW1xuICAgICAgICAgICAgICAgIG1hdFswXSwgbWF0WzRdLCBtYXRbOF0sIG1hdFsxMl0sXG4gICAgICAgICAgICAgICAgbWF0WzFdLCBtYXRbNV0sIG1hdFs5XSwgbWF0WzEzXSxcbiAgICAgICAgICAgICAgICBtYXRbMl0sIG1hdFs2XSwgbWF0WzEwXSwgbWF0WzE0XSxcbiAgICAgICAgICAgICAgICBtYXRbM10sIG1hdFs3XSwgbWF0WzExXSwgbWF0WzE1XSxcbiAgICAgICAgICAgICAgICBoYW5kZWRuZXNzXG4gICAgICAgICAgICBdKTtcblxuICAgICAgICAgICAgLy8gSGFuZGxlIGNvbnRyb2xsZXIgYnV0dG9ucyBhbmQgYXhlc1xuICAgICAgICAgICAgaWYgKHRoaXMuY29udHJvbGxlcnNbaGFuZGVkbmVzc10gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY29udHJvbGxlcnNbaGFuZGVkbmVzc10gPSB7XG4gICAgICAgICAgICAgICAgICAgIHByZXZTdGF0ZTogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50U3RhdGU6IHVuZGVmaW5lZCxcblx0XHRcdFx0XHRpZDogdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRyb2xsZXJzW2hhbmRlZG5lc3NdLnByZXZTdGF0ZSA9XG4gICAgICAgICAgICAgICAgICAgIFdlYlhSVXRpbHMuZGVlcENvcHlHYW1lcGFkKHNvdXJjZS5nYW1lcGFkKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5jb250cm9sbGVyc1toYW5kZWRuZXNzXS5jdXJyZW50U3RhdGUgPVxuICAgICAgICAgICAgICAgIFdlYlhSVXRpbHMuZGVlcENvcHlHYW1lcGFkKHNvdXJjZS5nYW1lcGFkKTtcblxuICAgICAgICAgICAgY29uc3QgY29udHJvbGxlciA9IHRoaXMuY29udHJvbGxlcnNbaGFuZGVkbmVzc107XG4gICAgICAgICAgICBjb25zdCBjdXJyU3RhdGUgPSBjb250cm9sbGVyLmN1cnJlbnRTdGF0ZTtcbiAgICAgICAgICAgIGNvbnN0IHByZXZTdGF0ZSA9IGNvbnRyb2xsZXIucHJldlN0YXRlO1xuICAgICAgICAgICAgLy8gSXRlcmF0ZSBvdmVyIGJ1dHRvbnNcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY3VyclN0YXRlLmJ1dHRvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyQnV0dG9uID0gY3VyclN0YXRlLmJ1dHRvbnNbaV07XG4gICAgICAgICAgICAgICAgY29uc3QgcHJldkJ1dHRvbiA9IHByZXZTdGF0ZS5idXR0b25zW2ldO1xuXG4gICAgICAgICAgICAgICAgaWYgKGN1cnJCdXR0b24ucHJlc3NlZCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBwcmVzc1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyLnRvU3RyZWFtZXJIYW5kbGVycy5nZXQoXG4gICAgICAgICAgICAgICAgICAgICAgICAnWFJCdXR0b25QcmVzc2VkJ1xuICAgICAgICAgICAgICAgICAgICApKFtoYW5kZWRuZXNzLCBpLCBwcmV2QnV0dG9uLnByZXNzZWQgPyAxIDogMF0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWN1cnJCdXR0b24ucHJlc3NlZCAmJiBwcmV2QnV0dG9uLnByZXNzZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlci50b1N0cmVhbWVySGFuZGxlcnMuZ2V0KFxuICAgICAgICAgICAgICAgICAgICAgICAgJ1hSQnV0dG9uUmVsZWFzZWQnXG4gICAgICAgICAgICAgICAgICAgICkoW2hhbmRlZG5lc3MsIGksIDBdKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoY3VyckJ1dHRvbi50b3VjaGVkICYmICFjdXJyQnV0dG9uLnByZXNzZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gcHJlc3NcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlci50b1N0cmVhbWVySGFuZGxlcnMuZ2V0KFxuICAgICAgICAgICAgICAgICAgICAgICAgJ1hSQnV0dG9uUHJlc3NlZCdcbiAgICAgICAgICAgICAgICAgICAgKShbaGFuZGVkbmVzcywgMywgcHJldkJ1dHRvbi50b3VjaGVkID8gMSA6IDBdKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFjdXJyQnV0dG9uLnRvdWNoZWQgJiYgcHJldkJ1dHRvbi50b3VjaGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXIudG9TdHJlYW1lckhhbmRsZXJzLmdldChcbiAgICAgICAgICAgICAgICAgICAgICAgICdYUkJ1dHRvblJlbGVhc2VkJ1xuICAgICAgICAgICAgICAgICAgICApKFtoYW5kZWRuZXNzLCAzLCAwXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJdGVyYXRlIG92ZXIgZ2FtZXBhZCBheGVzXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGN1cnJTdGF0ZS5heGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlci50b1N0cmVhbWVySGFuZGxlcnMuZ2V0KFxuICAgICAgICAgICAgICAgICAgICAnWFJBbmFsb2cnXG4gICAgICAgICAgICAgICAgKShbaGFuZGVkbmVzcywgaSwgY3VyclN0YXRlLmF4ZXNbaV1dKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5jb250cm9sbGVyc1toYW5kZWRuZXNzXS5wcmV2U3RhdGUgPSBjdXJyU3RhdGU7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCIvLyBDb3B5cmlnaHQgRXBpYyBHYW1lcywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXG5leHBvcnQgY2xhc3MgTG9nZ2VyIHtcbiAgICBzdGF0aWMgdmVyYm9zZUxvZ0xldmVsID0gNTtcblxuICAgIC8qKlxuICAgICAqIENhcHR1cmVzIHRoZSBzdGFjayBhbmQgcmV0dXJucyBpdFxuICAgICAqIEByZXR1cm5zIHRoZSBjdXJyZW50IHN0YWNrXG4gICAgICovXG4gICAgc3RhdGljIEdldFN0YWNrVHJhY2UoKSB7XG4gICAgICAgIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKCk7XG4gICAgICAgIGxldCBmb3JtYXR0ZWRTdGFjayA9ICdObyBTdGFjayBBdmFpbGFibGUgZm9yIHRoaXMgYnJvd3Nlcic7XG5cbiAgICAgICAgLy8gZm9ybWF0IHRoZSBlcnJvclxuICAgICAgICBpZiAoZXJyb3Iuc3RhY2spIHtcbiAgICAgICAgICAgIGZvcm1hdHRlZFN0YWNrID0gZXJyb3Iuc3RhY2sudG9TdHJpbmcoKS5yZXBsYWNlKC9FcnJvci9nLCAnJyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZm9ybWF0dGVkU3RhY2s7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBsb2cgdmVyYm9zaXR5IGxldmVsXG4gICAgICovXG4gICAgc3RhdGljIFNldExvZ2dlclZlcmJvc2l0eSh2ZXJib3NlTG9nTGV2ZWw6IG51bWJlcikge1xuICAgICAgICBpZiAodGhpcy52ZXJib3NlTG9nTGV2ZWwgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy52ZXJib3NlTG9nTGV2ZWwgPSB2ZXJib3NlTG9nTGV2ZWw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgc3RhbmRhcmQgbG9nZ2luZyBvdXRwdXRcbiAgICAgKiBAcGFyYW0gc3RhY2sgLSB0aGUgc3RhY2sgdHJhY2VcbiAgICAgKiBAcGFyYW0gbWVzc2FnZSAtIHRoZSBtZXNzYWdlIHRvIGJlIGxvZ2dlZFxuICAgICAqIEBwYXJhbSB2ZXJib3NpdHkgLSB0aGUgdmVyYm9zaXR5IGxldmVsXG4gICAgICovXG4gICAgc3RhdGljIExvZyhzdGFjazogc3RyaW5nLCBtZXNzYWdlOiBzdHJpbmcsIHZlcmJvc2l0eT86IG51bWJlcikge1xuICAgICAgICBpZiAodmVyYm9zaXR5ID4gdGhpcy52ZXJib3NlTG9nTGV2ZWwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHJldHVyblN0cmluZyA9IGBMZXZlbDogTG9nXFxuTXNnOiAke21lc3NhZ2V9XFxuQ2FsbGVyOiAke3N0YWNrfWA7XG4gICAgICAgIGNvbnNvbGUubG9nKHJldHVyblN0cmluZyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIHN0YW5kYXJkIGxvZ2dpbmcgb3V0cHV0XG4gICAgICogQHBhcmFtIHN0YWNrIC0gdGhlIHN0YWNrIHRyYWNlXG4gICAgICogQHBhcmFtIG1lc3NhZ2UgLSB0aGUgbWVzc2FnZSB0byBiZSBsb2dnZWRcbiAgICAgKiBAcGFyYW0gdmVyYm9zaXR5IC0gdGhlIHZlcmJvc2l0eSBsZXZlbFxuICAgICAqL1xuICAgIHN0YXRpYyBJbmZvKHN0YWNrOiBzdHJpbmcsIG1lc3NhZ2U6IHN0cmluZywgdmVyYm9zaXR5PzogbnVtYmVyKSB7XG4gICAgICAgIGlmICh2ZXJib3NpdHkgPiB0aGlzLnZlcmJvc2VMb2dMZXZlbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcmV0dXJuU3RyaW5nID0gYExldmVsOiBJbmZvXFxuTXNnOiAke21lc3NhZ2V9YDtcbiAgICAgICAgY29uc29sZS5pbmZvKHJldHVyblN0cmluZyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIHN0YW5kYXJkIGxvZ2dpbmcgb3V0cHV0XG4gICAgICogQHBhcmFtIHN0YWNrIC0gdGhlIHN0YWNrIHRyYWNlXG4gICAgICogQHBhcmFtIG1lc3NhZ2UgLSB0aGUgbWVzc2FnZSB0byBiZSBsb2dnZWRcbiAgICAgKi9cbiAgICBzdGF0aWMgRXJyb3Ioc3RhY2s6IHN0cmluZywgbWVzc2FnZTogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IHJldHVyblN0cmluZyA9IGBMZXZlbDogRXJyb3JcXG5Nc2c6ICR7bWVzc2FnZX1cXG5DYWxsZXI6ICR7c3RhY2t9YDtcbiAgICAgICAgY29uc29sZS5lcnJvcihyZXR1cm5TdHJpbmcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBzdGFuZGFyZCBsb2dnaW5nIG91dHB1dFxuICAgICAqIEBwYXJhbSBzdGFjayAtIHRoZSBzdGFjayB0cmFjZVxuICAgICAqIEBwYXJhbSBtZXNzYWdlIC0gdGhlIG1lc3NhZ2UgdG8gYmUgbG9nZ2VkXG4gICAgICovXG4gICAgc3RhdGljIFdhcm5pbmcoc3RhY2s6IHN0cmluZywgbWVzc2FnZTogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IHJldHVyblN0cmluZyA9IGBMZXZlbDogV2FybmluZ1xcbkNhbGxlcjogJHtzdGFja31cXG5Nc2c6ICR7bWVzc2FnZX1gO1xuICAgICAgICBjb25zb2xlLndhcm4ocmV0dXJuU3RyaW5nKTtcbiAgICB9XG59XG4iLCIvLyBDb3B5cmlnaHQgRXBpYyBHYW1lcywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXG5pbXBvcnQge1xuICAgIEluYm91bmRSVFBTdGF0cyxcbiAgICBJbmJvdW5kVmlkZW9TdGF0cyxcbiAgICBJbmJvdW5kQXVkaW9TdGF0c1xufSBmcm9tICcuL0luYm91bmRSVFBTdGF0cyc7XG5pbXBvcnQgeyBJbmJvdW5kVHJhY2tTdGF0cyB9IGZyb20gJy4vSW5ib3VuZFRyYWNrU3RhdHMnO1xuaW1wb3J0IHsgRGF0YUNoYW5uZWxTdGF0cyB9IGZyb20gJy4vRGF0YUNoYW5uZWxTdGF0cyc7XG5pbXBvcnQgeyBDYW5kaWRhdGVTdGF0IH0gZnJvbSAnLi9DYW5kaWRhdGVTdGF0JztcbmltcG9ydCB7IENhbmRpZGF0ZVBhaXJTdGF0cyB9IGZyb20gJy4vQ2FuZGlkYXRlUGFpclN0YXRzJztcbmltcG9ydCB7IE91dEJvdW5kUlRQU3RhdHMsIE91dEJvdW5kVmlkZW9TdGF0cyB9IGZyb20gJy4vT3V0Qm91bmRSVFBTdGF0cyc7XG5pbXBvcnQgeyBTZXNzaW9uU3RhdHMgfSBmcm9tICcuL1Nlc3Npb25TdGF0cyc7XG5pbXBvcnQgeyBTdHJlYW1TdGF0cyB9IGZyb20gJy4vU3RyZWFtU3RhdHMnO1xuaW1wb3J0IHsgQ29kZWNTdGF0cyB9IGZyb20gJy4vQ29kZWNTdGF0cyc7XG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tICcuLi9Mb2dnZXIvTG9nZ2VyJztcblxuLyoqXG4gKiBUaGUgQWdncmVnYXRlZCBTdGF0cyB0aGF0IGlzIGdlbmVyYXRlZCBmcm9tIHRoZSBSVEMgU3RhdHMgUmVwb3J0XG4gKi9cblxudHlwZSBSVENTdGF0c1R5cGVQUyA9IFJUQ1N0YXRzVHlwZSB8ICdzdHJlYW0nIHwgJ21lZGlhLXBsYXlvdXQnO1xuZXhwb3J0IGNsYXNzIEFnZ3JlZ2F0ZWRTdGF0cyB7XG4gICAgaW5ib3VuZFZpZGVvU3RhdHM6IEluYm91bmRWaWRlb1N0YXRzO1xuICAgIGluYm91bmRBdWRpb1N0YXRzOiBJbmJvdW5kQXVkaW9TdGF0cztcbiAgICBsYXN0VmlkZW9TdGF0czogSW5ib3VuZFZpZGVvU3RhdHM7XG4gICAgbGFzdEF1ZGlvU3RhdHM6IEluYm91bmRBdWRpb1N0YXRzO1xuICAgIGNhbmRpZGF0ZVBhaXI6IENhbmRpZGF0ZVBhaXJTdGF0cztcbiAgICBEYXRhQ2hhbm5lbFN0YXRzOiBEYXRhQ2hhbm5lbFN0YXRzO1xuICAgIGxvY2FsQ2FuZGlkYXRlczogQXJyYXk8Q2FuZGlkYXRlU3RhdD47XG4gICAgcmVtb3RlQ2FuZGlkYXRlczogQXJyYXk8Q2FuZGlkYXRlU3RhdD47XG4gICAgb3V0Qm91bmRWaWRlb1N0YXRzOiBPdXRCb3VuZFZpZGVvU3RhdHM7XG4gICAgc2Vzc2lvblN0YXRzOiBTZXNzaW9uU3RhdHM7XG4gICAgc3RyZWFtU3RhdHM6IFN0cmVhbVN0YXRzO1xuICAgIGNvZGVjczogTWFwPHN0cmluZywgc3RyaW5nPjtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmluYm91bmRWaWRlb1N0YXRzID0gbmV3IEluYm91bmRWaWRlb1N0YXRzKCk7XG4gICAgICAgIHRoaXMuaW5ib3VuZEF1ZGlvU3RhdHMgPSBuZXcgSW5ib3VuZEF1ZGlvU3RhdHMoKTtcbiAgICAgICAgdGhpcy5jYW5kaWRhdGVQYWlyID0gbmV3IENhbmRpZGF0ZVBhaXJTdGF0cygpO1xuICAgICAgICB0aGlzLkRhdGFDaGFubmVsU3RhdHMgPSBuZXcgRGF0YUNoYW5uZWxTdGF0cygpO1xuICAgICAgICB0aGlzLm91dEJvdW5kVmlkZW9TdGF0cyA9IG5ldyBPdXRCb3VuZFZpZGVvU3RhdHMoKTtcbiAgICAgICAgdGhpcy5zZXNzaW9uU3RhdHMgPSBuZXcgU2Vzc2lvblN0YXRzKCk7XG4gICAgICAgIHRoaXMuc3RyZWFtU3RhdHMgPSBuZXcgU3RyZWFtU3RhdHMoKTtcbiAgICAgICAgdGhpcy5jb2RlY3MgPSBuZXcgTWFwPHN0cmluZywgc3RyaW5nPigpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdhdGhlciBhbGwgdGhlIGluZm9ybWF0aW9uIGZyb20gdGhlIFJUQyBQZWVyIENvbm5lY3Rpb24gUmVwb3J0XG4gICAgICogQHBhcmFtIHJ0Y1N0YXRzUmVwb3J0IC0gUlRDIFN0YXRzIFJlcG9ydFxuICAgICAqL1xuICAgIHByb2Nlc3NTdGF0cyhydGNTdGF0c1JlcG9ydDogUlRDU3RhdHNSZXBvcnQpIHtcbiAgICAgICAgdGhpcy5sb2NhbENhbmRpZGF0ZXMgPSBuZXcgQXJyYXk8Q2FuZGlkYXRlU3RhdD4oKTtcbiAgICAgICAgdGhpcy5yZW1vdGVDYW5kaWRhdGVzID0gbmV3IEFycmF5PENhbmRpZGF0ZVN0YXQ+KCk7XG5cbiAgICAgICAgcnRjU3RhdHNSZXBvcnQuZm9yRWFjaCgoc3RhdCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdHlwZTogUlRDU3RhdHNUeXBlUFMgPSBzdGF0LnR5cGU7XG5cbiAgICAgICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2NhbmRpZGF0ZS1wYWlyJzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVDYW5kaWRhdGVQYWlyKHN0YXQpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdjZXJ0aWZpY2F0ZSc6XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2NvZGVjJzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVDb2RlYyhzdGF0KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnZGF0YS1jaGFubmVsJzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVEYXRhQ2hhbm5lbChzdGF0KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnaW5ib3VuZC1ydHAnOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZUluQm91bmRSVFAoc3RhdCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2xvY2FsLWNhbmRpZGF0ZSc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlTG9jYWxDYW5kaWRhdGUoc3RhdCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ21lZGlhLXNvdXJjZSc6XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ21lZGlhLXBsYXlvdXQnOlxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdvdXRib3VuZC1ydHAnOlxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdwZWVyLWNvbm5lY3Rpb24nOlxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdyZW1vdGUtY2FuZGlkYXRlJzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVSZW1vdGVDYW5kaWRhdGUoc3RhdCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3JlbW90ZS1pbmJvdW5kLXJ0cCc6XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3JlbW90ZS1vdXRib3VuZC1ydHAnOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZVJlbW90ZU91dEJvdW5kKHN0YXQpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICd0cmFjayc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlVHJhY2soc3RhdCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3RyYW5zcG9ydCc6XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3N0cmVhbSc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlU3RyZWFtKHN0YXQpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBMb2dnZXIuRXJyb3IoTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ3VuaGFuZGxlZCBTdGF0IFR5cGUnKTtcbiAgICAgICAgICAgICAgICAgICAgTG9nZ2VyLkxvZyhMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBzdGF0KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFByb2Nlc3Mgc3RyZWFtIHN0YXRzIGRhdGEgZnJvbSB3ZWJydGNcbiAgICAgKlxuICAgICAqIEBwYXJhbSBzdGF0IC0gdGhlIHN0YXRzIGNvbWluZyBpbiBmcm9tIHdlYnJ0Y1xuICAgICAqL1xuICAgIGhhbmRsZVN0cmVhbShzdGF0OiBTdHJlYW1TdGF0cykge1xuICAgICAgICB0aGlzLnN0cmVhbVN0YXRzID0gc3RhdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQcm9jZXNzIHRoZSBJY2UgQ2FuZGlkYXRlIFBhaXIgRGF0YVxuICAgICAqIEBwYXJhbSBzdGF0IC0gdGhlIHN0YXRzIGNvbWluZyBpbiBmcm9tIGljZSBjYW5kaWRhdGVzXG4gICAgICovXG4gICAgaGFuZGxlQ2FuZGlkYXRlUGFpcihzdGF0OiBDYW5kaWRhdGVQYWlyU3RhdHMpIHtcbiAgICAgICAgdGhpcy5jYW5kaWRhdGVQYWlyLmJ5dGVzUmVjZWl2ZWQgPSBzdGF0LmJ5dGVzUmVjZWl2ZWQ7XG4gICAgICAgIHRoaXMuY2FuZGlkYXRlUGFpci5ieXRlc1NlbnQgPSBzdGF0LmJ5dGVzU2VudDtcbiAgICAgICAgdGhpcy5jYW5kaWRhdGVQYWlyLmxvY2FsQ2FuZGlkYXRlSWQgPSBzdGF0LmxvY2FsQ2FuZGlkYXRlSWQ7XG4gICAgICAgIHRoaXMuY2FuZGlkYXRlUGFpci5yZW1vdGVDYW5kaWRhdGVJZCA9IHN0YXQucmVtb3RlQ2FuZGlkYXRlSWQ7XG4gICAgICAgIHRoaXMuY2FuZGlkYXRlUGFpci5ub21pbmF0ZWQgPSBzdGF0Lm5vbWluYXRlZDtcbiAgICAgICAgdGhpcy5jYW5kaWRhdGVQYWlyLnJlYWRhYmxlID0gc3RhdC5yZWFkYWJsZTtcbiAgICAgICAgdGhpcy5jYW5kaWRhdGVQYWlyLnNlbGVjdGVkID0gc3RhdC5zZWxlY3RlZDtcbiAgICAgICAgdGhpcy5jYW5kaWRhdGVQYWlyLndyaXRhYmxlID0gc3RhdC53cml0YWJsZTtcbiAgICAgICAgdGhpcy5jYW5kaWRhdGVQYWlyLnN0YXRlID0gc3RhdC5zdGF0ZTtcbiAgICAgICAgdGhpcy5jYW5kaWRhdGVQYWlyLmN1cnJlbnRSb3VuZFRyaXBUaW1lID0gc3RhdC5jdXJyZW50Um91bmRUcmlwVGltZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQcm9jZXNzIHRoZSBEYXRhIENoYW5uZWwgRGF0YVxuICAgICAqIEBwYXJhbSBzdGF0IC0gdGhlIHN0YXRzIGNvbWluZyBpbiBmcm9tIHRoZSBkYXRhIGNoYW5uZWxcbiAgICAgKi9cbiAgICBoYW5kbGVEYXRhQ2hhbm5lbChzdGF0OiBEYXRhQ2hhbm5lbFN0YXRzKSB7XG4gICAgICAgIHRoaXMuRGF0YUNoYW5uZWxTdGF0cy5ieXRlc1JlY2VpdmVkID0gc3RhdC5ieXRlc1JlY2VpdmVkO1xuICAgICAgICB0aGlzLkRhdGFDaGFubmVsU3RhdHMuYnl0ZXNTZW50ID0gc3RhdC5ieXRlc1NlbnQ7XG4gICAgICAgIHRoaXMuRGF0YUNoYW5uZWxTdGF0cy5kYXRhQ2hhbm5lbElkZW50aWZpZXIgPVxuICAgICAgICAgICAgc3RhdC5kYXRhQ2hhbm5lbElkZW50aWZpZXI7XG4gICAgICAgIHRoaXMuRGF0YUNoYW5uZWxTdGF0cy5pZCA9IHN0YXQuaWQ7XG4gICAgICAgIHRoaXMuRGF0YUNoYW5uZWxTdGF0cy5sYWJlbCA9IHN0YXQubGFiZWw7XG4gICAgICAgIHRoaXMuRGF0YUNoYW5uZWxTdGF0cy5tZXNzYWdlc1JlY2VpdmVkID0gc3RhdC5tZXNzYWdlc1JlY2VpdmVkO1xuICAgICAgICB0aGlzLkRhdGFDaGFubmVsU3RhdHMubWVzc2FnZXNTZW50ID0gc3RhdC5tZXNzYWdlc1NlbnQ7XG4gICAgICAgIHRoaXMuRGF0YUNoYW5uZWxTdGF0cy5wcm90b2NvbCA9IHN0YXQucHJvdG9jb2w7XG4gICAgICAgIHRoaXMuRGF0YUNoYW5uZWxTdGF0cy5zdGF0ZSA9IHN0YXQuc3RhdGU7XG4gICAgICAgIHRoaXMuRGF0YUNoYW5uZWxTdGF0cy50aW1lc3RhbXAgPSBzdGF0LnRpbWVzdGFtcDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQcm9jZXNzIHRoZSBMb2NhbCBJY2UgQ2FuZGlkYXRlIERhdGFcbiAgICAgKiBAcGFyYW0gc3RhdCAtIGxvY2FsIHN0YXRzXG4gICAgICovXG4gICAgaGFuZGxlTG9jYWxDYW5kaWRhdGUoc3RhdDogQ2FuZGlkYXRlU3RhdCkge1xuICAgICAgICBjb25zdCBsb2NhbENhbmRpZGF0ZSA9IG5ldyBDYW5kaWRhdGVTdGF0KCk7XG4gICAgICAgIGxvY2FsQ2FuZGlkYXRlLmxhYmVsID0gJ2xvY2FsLWNhbmRpZGF0ZSc7XG4gICAgICAgIGxvY2FsQ2FuZGlkYXRlLmFkZHJlc3MgPSBzdGF0LmFkZHJlc3M7XG4gICAgICAgIGxvY2FsQ2FuZGlkYXRlLnBvcnQgPSBzdGF0LnBvcnQ7XG4gICAgICAgIGxvY2FsQ2FuZGlkYXRlLnByb3RvY29sID0gc3RhdC5wcm90b2NvbDtcbiAgICAgICAgbG9jYWxDYW5kaWRhdGUuY2FuZGlkYXRlVHlwZSA9IHN0YXQuY2FuZGlkYXRlVHlwZTtcbiAgICAgICAgbG9jYWxDYW5kaWRhdGUuaWQgPSBzdGF0LmlkO1xuICAgICAgICB0aGlzLmxvY2FsQ2FuZGlkYXRlcy5wdXNoKGxvY2FsQ2FuZGlkYXRlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQcm9jZXNzIHRoZSBSZW1vdGUgSWNlIENhbmRpZGF0ZSBEYXRhXG4gICAgICogQHBhcmFtIHN0YXQgLSBpY2UgY2FuZGlkYXRlIHN0YXRzXG4gICAgICovXG4gICAgaGFuZGxlUmVtb3RlQ2FuZGlkYXRlKHN0YXQ6IENhbmRpZGF0ZVN0YXQpIHtcbiAgICAgICAgY29uc3QgUmVtb3RlQ2FuZGlkYXRlID0gbmV3IENhbmRpZGF0ZVN0YXQoKTtcbiAgICAgICAgUmVtb3RlQ2FuZGlkYXRlLmxhYmVsID0gJ2xvY2FsLWNhbmRpZGF0ZSc7XG4gICAgICAgIFJlbW90ZUNhbmRpZGF0ZS5hZGRyZXNzID0gc3RhdC5hZGRyZXNzO1xuICAgICAgICBSZW1vdGVDYW5kaWRhdGUucG9ydCA9IHN0YXQucG9ydDtcbiAgICAgICAgUmVtb3RlQ2FuZGlkYXRlLnByb3RvY29sID0gc3RhdC5wcm90b2NvbDtcbiAgICAgICAgUmVtb3RlQ2FuZGlkYXRlLmlkID0gc3RhdC5pZDtcbiAgICAgICAgUmVtb3RlQ2FuZGlkYXRlLmNhbmRpZGF0ZVR5cGUgPSBzdGF0LmNhbmRpZGF0ZVR5cGU7XG4gICAgICAgIHRoaXMucmVtb3RlQ2FuZGlkYXRlcy5wdXNoKFJlbW90ZUNhbmRpZGF0ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUHJvY2VzcyB0aGUgSW5ib3VuZCBSVFAgQXVkaW8gYW5kIFZpZGVvIERhdGFcbiAgICAgKiBAcGFyYW0gc3RhdCAtIGluYm91bmQgcnRwIHN0YXRzXG4gICAgICovXG4gICAgaGFuZGxlSW5Cb3VuZFJUUChzdGF0OiBJbmJvdW5kUlRQU3RhdHMpIHtcbiAgICAgICAgc3dpdGNoIChzdGF0LmtpbmQpIHtcbiAgICAgICAgICAgIGNhc2UgJ3ZpZGVvJzpcbiAgICAgICAgICAgICAgICAvLyBOZWVkIHRvIGNvbnZlcnQgdG8gdW5rbm93biBmaXJzdCB0byByZW1vdmUgYW4gZXJyb3IgYXJvdW5kXG4gICAgICAgICAgICAgICAgLy8gSW5ib3VuZFZpZGVvU3RhdHMgaGF2aW5nIHRoZSBiaXRyYXRlIG1lbWJlciB3aGljaCBpc24ndCBmb3VuZCBvblxuICAgICAgICAgICAgICAgIC8vIHRoZSBJbmJvdW5kUlRQU3RhdHNcbiAgICAgICAgICAgICAgICB0aGlzLmluYm91bmRWaWRlb1N0YXRzID0gc3RhdCBhcyB1bmtub3duIGFzIEluYm91bmRWaWRlb1N0YXRzO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubGFzdFZpZGVvU3RhdHMgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5ib3VuZFZpZGVvU3RhdHMuYml0cmF0ZSA9XG4gICAgICAgICAgICAgICAgICAgICAgICAoOCAqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMuaW5ib3VuZFZpZGVvU3RhdHMuYnl0ZXNSZWNlaXZlZCAtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubGFzdFZpZGVvU3RhdHMuYnl0ZXNSZWNlaXZlZCkpIC9cbiAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLmluYm91bmRWaWRlb1N0YXRzLnRpbWVzdGFtcCAtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sYXN0VmlkZW9TdGF0cy50aW1lc3RhbXApO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmluYm91bmRWaWRlb1N0YXRzLmJpdHJhdGUgPSBNYXRoLmZsb29yKFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmJvdW5kVmlkZW9TdGF0cy5iaXRyYXRlXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMubGFzdFZpZGVvU3RhdHMgPSB7IC4uLnRoaXMuaW5ib3VuZFZpZGVvU3RhdHMgfTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2F1ZGlvJzpcbiAgICAgICAgICAgICAgICAvLyBOZWVkIHRvIGNvbnZlcnQgdG8gdW5rbm93biBmaXJzdCB0byByZW1vdmUgYW4gZXJyb3IgYXJvdW5kXG4gICAgICAgICAgICAgICAgLy8gSW5ib3VuZEF1ZGlvU3RhdHMgaGF2aW5nIHRoZSBiaXRyYXRlIG1lbWJlciB3aGljaCBpc24ndCBmb3VuZCBvblxuICAgICAgICAgICAgICAgIC8vIHRoZSBJbmJvdW5kUlRQU3RhdHNcbiAgICAgICAgICAgICAgICB0aGlzLmluYm91bmRBdWRpb1N0YXRzID0gc3RhdCBhcyB1bmtub3duIGFzIEluYm91bmRBdWRpb1N0YXRzO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubGFzdEF1ZGlvU3RhdHMgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5ib3VuZEF1ZGlvU3RhdHMuYml0cmF0ZSA9XG4gICAgICAgICAgICAgICAgICAgICAgICAoOCAqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMuaW5ib3VuZEF1ZGlvU3RhdHMuYnl0ZXNSZWNlaXZlZCAtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubGFzdEF1ZGlvU3RhdHMuYnl0ZXNSZWNlaXZlZCkpIC9cbiAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLmluYm91bmRBdWRpb1N0YXRzLnRpbWVzdGFtcCAtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sYXN0QXVkaW9TdGF0cy50aW1lc3RhbXApO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmluYm91bmRBdWRpb1N0YXRzLmJpdHJhdGUgPSBNYXRoLmZsb29yKFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmJvdW5kQXVkaW9TdGF0cy5iaXRyYXRlXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMubGFzdEF1ZGlvU3RhdHMgPSB7IC4uLnRoaXMuaW5ib3VuZEF1ZGlvU3RhdHMgfTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgTG9nZ2VyLkxvZyhMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnS2luZCBpcyBub3QgaGFuZGxlZCcpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUHJvY2VzcyB0aGUgb3V0Ym91bmQgUlRQIEF1ZGlvIGFuZCBWaWRlbyBEYXRhXG4gICAgICogQHBhcmFtIHN0YXQgLSByZW1vdGUgb3V0Ym91bmQgc3RhdHNcbiAgICAgKi9cbiAgICBoYW5kbGVSZW1vdGVPdXRCb3VuZChzdGF0OiBPdXRCb3VuZFJUUFN0YXRzKSB7XG4gICAgICAgIHN3aXRjaCAoc3RhdC5raW5kKSB7XG4gICAgICAgICAgICBjYXNlICd2aWRlbyc6XG4gICAgICAgICAgICAgICAgdGhpcy5vdXRCb3VuZFZpZGVvU3RhdHMuYnl0ZXNTZW50ID0gc3RhdC5ieXRlc1NlbnQ7XG4gICAgICAgICAgICAgICAgdGhpcy5vdXRCb3VuZFZpZGVvU3RhdHMuaWQgPSBzdGF0LmlkO1xuICAgICAgICAgICAgICAgIHRoaXMub3V0Qm91bmRWaWRlb1N0YXRzLmxvY2FsSWQgPSBzdGF0LmxvY2FsSWQ7XG4gICAgICAgICAgICAgICAgdGhpcy5vdXRCb3VuZFZpZGVvU3RhdHMucGFja2V0c1NlbnQgPSBzdGF0LnBhY2tldHNTZW50O1xuICAgICAgICAgICAgICAgIHRoaXMub3V0Qm91bmRWaWRlb1N0YXRzLnJlbW90ZVRpbWVzdGFtcCA9IHN0YXQucmVtb3RlVGltZXN0YW1wO1xuICAgICAgICAgICAgICAgIHRoaXMub3V0Qm91bmRWaWRlb1N0YXRzLnRpbWVzdGFtcCA9IHN0YXQudGltZXN0YW1wO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnYXVkaW8nOlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUHJvY2VzcyB0aGUgSW5ib3VuZCBWaWRlbyBUcmFjayBEYXRhXG4gICAgICogQHBhcmFtIHN0YXQgLSB2aWRlbyB0cmFjayBzdGF0c1xuICAgICAqL1xuICAgIGhhbmRsZVRyYWNrKHN0YXQ6IEluYm91bmRUcmFja1N0YXRzKSB7XG4gICAgICAgIC8vIHdlIG9ubHkgd2FudCB0byBleHRyYWN0IHN0YXRzIGZyb20gdGhlIHZpZGVvIHRyYWNrXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIHN0YXQudHlwZSA9PT0gJ3RyYWNrJyAmJlxuICAgICAgICAgICAgKHN0YXQudHJhY2tJZGVudGlmaWVyID09PSAndmlkZW9fbGFiZWwnIHx8IHN0YXQua2luZCA9PT0gJ3ZpZGVvJylcbiAgICAgICAgKSB7XG4gICAgICAgICAgICB0aGlzLmluYm91bmRWaWRlb1N0YXRzLmZyYW1lc0Ryb3BwZWQgPSBzdGF0LmZyYW1lc0Ryb3BwZWQ7XG4gICAgICAgICAgICB0aGlzLmluYm91bmRWaWRlb1N0YXRzLmZyYW1lc1JlY2VpdmVkID0gc3RhdC5mcmFtZXNSZWNlaXZlZDtcbiAgICAgICAgICAgIHRoaXMuaW5ib3VuZFZpZGVvU3RhdHMuZnJhbWVIZWlnaHQgPSBzdGF0LmZyYW1lSGVpZ2h0O1xuICAgICAgICAgICAgdGhpcy5pbmJvdW5kVmlkZW9TdGF0cy5mcmFtZVdpZHRoID0gc3RhdC5mcmFtZVdpZHRoO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaGFuZGxlQ29kZWMoc3RhdDogQ29kZWNTdGF0cykge1xuICAgICAgICBjb25zdCBjb2RlY0lkID0gc3RhdC5pZDtcbiAgICAgICAgY29uc3QgY29kZWNUeXBlID0gYCR7c3RhdC5taW1lVHlwZVxuICAgICAgICAgICAgLnJlcGxhY2UoJ3ZpZGVvLycsICcnKVxuICAgICAgICAgICAgLnJlcGxhY2UoJ2F1ZGlvLycsICcnKX0ke1xuICAgICAgICAgICAgc3RhdC5zZHBGbXRwTGluZSA/IGAgJHtzdGF0LnNkcEZtdHBMaW5lfWAgOiAnJ1xuICAgICAgICB9YDtcbiAgICAgICAgdGhpcy5jb2RlY3Muc2V0KGNvZGVjSWQsIGNvZGVjVHlwZSk7XG4gICAgfVxuXG4gICAgaGFuZGxlU2Vzc2lvblN0YXRpc3RpY3MoXG4gICAgICAgIHZpZGVvU3RhcnRUaW1lOiBudW1iZXIsXG4gICAgICAgIGlucHV0Q29udHJvbGxlcjogYm9vbGVhbiB8IG51bGwsXG4gICAgICAgIHZpZGVvRW5jb2RlckF2Z1FQOiBudW1iZXJcbiAgICApIHtcbiAgICAgICAgY29uc3QgZGVsdGFUaW1lID0gRGF0ZS5ub3coKSAtIHZpZGVvU3RhcnRUaW1lO1xuICAgICAgICB0aGlzLnNlc3Npb25TdGF0cy5ydW5UaW1lID0gbmV3IERhdGUoZGVsdGFUaW1lKVxuICAgICAgICAgICAgLnRvSVNPU3RyaW5nKClcbiAgICAgICAgICAgIC5zdWJzdHIoMTEsIDgpXG4gICAgICAgICAgICAudG9TdHJpbmcoKTtcblxuICAgICAgICBjb25zdCBjb250cm9sc1N0cmVhbUlucHV0ID1cbiAgICAgICAgICAgIGlucHV0Q29udHJvbGxlciA9PT0gbnVsbFxuICAgICAgICAgICAgICAgID8gJ05vdCBzZW50IHlldCdcbiAgICAgICAgICAgICAgICA6IGlucHV0Q29udHJvbGxlclxuICAgICAgICAgICAgICAgID8gJ3RydWUnXG4gICAgICAgICAgICAgICAgOiAnZmFsc2UnO1xuICAgICAgICB0aGlzLnNlc3Npb25TdGF0cy5jb250cm9sc1N0cmVhbUlucHV0ID0gY29udHJvbHNTdHJlYW1JbnB1dDtcblxuICAgICAgICB0aGlzLnNlc3Npb25TdGF0cy52aWRlb0VuY29kZXJBdmdRUCA9IHZpZGVvRW5jb2RlckF2Z1FQO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIGEgdmFsdWUgY29taW5nIGluIGZyb20gb3VyIHN0YXRzIGlzIGFjdHVhbGx5IGEgbnVtYmVyXG4gICAgICogQHBhcmFtIHZhbHVlIC0gdGhlIG51bWJlciB0byBiZSBjaGVja2VkXG4gICAgICovXG4gICAgaXNOdW1iZXIodmFsdWU6IHVua25vd24pOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgaXNGaW5pdGUodmFsdWUpO1xuICAgIH1cbn1cbiIsIi8vIENvcHlyaWdodCBFcGljIEdhbWVzLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG5cbi8qKlxuICogSUNFIENhbmRpZGF0ZSBQYWlyIFN0YXRzIGNvbGxlY3RlZCBmcm9tIHRoZSBSVEMgU3RhdHMgUmVwb3J0XG4gKi9cbmV4cG9ydCBjbGFzcyBDYW5kaWRhdGVQYWlyU3RhdHMge1xuICAgIGJ5dGVzUmVjZWl2ZWQ6IG51bWJlcjtcbiAgICBieXRlc1NlbnQ6IG51bWJlcjtcbiAgICBsb2NhbENhbmRpZGF0ZUlkOiBzdHJpbmc7XG4gICAgcmVtb3RlQ2FuZGlkYXRlSWQ6IHN0cmluZztcbiAgICBub21pbmF0ZWQ6IGJvb2xlYW47XG4gICAgcmVhZGFibGU6IGJvb2xlYW47XG4gICAgd3JpdGFibGU6IGJvb2xlYW47XG4gICAgc2VsZWN0ZWQ6IGJvb2xlYW47XG4gICAgc3RhdGU6IHN0cmluZztcbiAgICBjdXJyZW50Um91bmRUcmlwVGltZTogbnVtYmVyO1xufVxuIiwiLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuLyoqXG4gKiBJQ0UgQ2FuZGlkYXRlIFN0YXQgY29sbGVjdGVkIGZyb20gdGhlIFJUQyBTdGF0cyBSZXBvcnRcbiAqL1xuZXhwb3J0IGNsYXNzIENhbmRpZGF0ZVN0YXQge1xuICAgIGxhYmVsOiBzdHJpbmc7XG4gICAgaWQ6IHN0cmluZztcbiAgICBhZGRyZXNzOiBzdHJpbmc7XG4gICAgY2FuZGlkYXRlVHlwZTogc3RyaW5nO1xuICAgIHBvcnQ6IG51bWJlcjtcbiAgICBwcm90b2NvbDogJ3RjcCcgfCAndWRwJztcbn1cbiIsIi8vIENvcHlyaWdodCBFcGljIEdhbWVzLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG5cbi8qKlxuICogRGF0YSBDaGFubmVsIFN0YXRzIGNvbGxlY3RlZCBmcm9tIHRoZSBSVEMgU3RhdHMgUmVwb3J0XG4gKi9cbmV4cG9ydCBjbGFzcyBEYXRhQ2hhbm5lbFN0YXRzIHtcbiAgICBieXRlc1JlY2VpdmVkOiBudW1iZXI7XG4gICAgYnl0ZXNTZW50OiBudW1iZXI7XG4gICAgZGF0YUNoYW5uZWxJZGVudGlmaWVyOiBudW1iZXI7XG4gICAgaWQ6IHN0cmluZztcbiAgICBsYWJlbDogc3RyaW5nO1xuICAgIG1lc3NhZ2VzUmVjZWl2ZWQ6IG51bWJlcjtcbiAgICBtZXNzYWdlc1NlbnQ6IG51bWJlcjtcbiAgICBwcm90b2NvbDogc3RyaW5nO1xuICAgIHN0YXRlOiBzdHJpbmc7XG4gICAgdGltZXN0YW1wOiBudW1iZXI7XG59XG4iLCIvLyBDb3B5cmlnaHQgRXBpYyBHYW1lcywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXG4vKipcbiAqIEluYm91bmQgQXVkaW8gU3RhdHMgY29sbGVjdGVkIGZyb20gdGhlIFJUQyBTdGF0cyBSZXBvcnRcbiAqL1xuZXhwb3J0IGNsYXNzIEluYm91bmRBdWRpb1N0YXRzIHtcbiAgICBhdWRpb0xldmVsOiBudW1iZXI7XG4gICAgYnl0ZXNSZWNlaXZlZDogbnVtYmVyO1xuICAgIGNvZGVjSWQ6IHN0cmluZztcbiAgICBjb25jZWFsZWRTYW1wbGVzOiBudW1iZXI7XG4gICAgY29uY2VhbG1lbnRFdmVudHM6IG51bWJlcjtcbiAgICBmZWNQYWNrZXRzRGlzY2FyZGVkOiBudW1iZXI7XG4gICAgZmVjUGFja2V0c1JlY2VpdmVkOiBudW1iZXI7XG4gICAgaGVhZGVyQnl0ZXNSZWNlaXZlZDogbnVtYmVyO1xuICAgIGlkOiBzdHJpbmc7XG4gICAgaW5zZXJ0ZWRTYW1wbGVzRm9yRGVjZWxlcmF0aW9uOiBudW1iZXI7XG4gICAgaml0dGVyOiBudW1iZXI7XG4gICAgaml0dGVyQnVmZmVyRGVsYXk6IG51bWJlcjtcbiAgICBqaXR0ZXJCdWZmZXJFbWl0dGVkQ291bnQ6IG51bWJlcjtcbiAgICBqaXR0ZXJCdWZmZXJNaW5pbXVtRGVsYXk6IG51bWJlcjtcbiAgICBqaXR0ZXJCdWZmZXJUYXJnZXREZWxheTogbnVtYmVyO1xuICAgIGtpbmQ6IHN0cmluZztcbiAgICBsYXN0UGFja2V0UmVjZWl2ZWRUaW1lc3RhbXA6IG51bWJlcjtcbiAgICBtZWRpYVR5cGU6IHN0cmluZztcbiAgICBtaWQ6IHN0cmluZztcbiAgICBwYWNrZXRzRGlzY2FyZGVkOiBudW1iZXI7XG4gICAgcGFja2V0c0xvc3Q6IG51bWJlcjtcbiAgICBwYWNrZXRzUmVjZWl2ZWQ6IG51bWJlcjtcbiAgICByZW1vdmVkU2FtcGxlc0ZvckFjY2VsZXJhdGlvbjogbnVtYmVyO1xuICAgIHNpbGVudENvbmNlYWxlZFNhbXBsZXM6IG51bWJlcjtcbiAgICBzc3JjOiBudW1iZXI7XG4gICAgdGltZXN0YW1wOiBudW1iZXI7XG4gICAgdG90YWxBdWRpb0VuZXJneTogbnVtYmVyO1xuICAgIHRvdGFsU2FtcGxlc0R1cmF0aW9uOiBudW1iZXI7XG4gICAgdG90YWxTYW1wbGVzUmVjZWl2ZWQ6IG51bWJlcjtcbiAgICB0cmFja0lkZW50aWZpZXI6IHN0cmluZztcbiAgICB0cmFuc3BvcnRJZDogc3RyaW5nO1xuICAgIHR5cGU6IHN0cmluZztcblxuICAgIC8qIGFkZGl0aW9uYWwsIGN1c3RvbSBzdGF0cyAqL1xuICAgIGJpdHJhdGU6IG51bWJlcjtcbn1cblxuLyoqXG4gKiBJbmJvdW5kIFZpZGVvIFN0YXRzIGNvbGxlY3RlZCBmcm9tIHRoZSBSVEMgU3RhdHMgUmVwb3J0XG4gKi9cbmV4cG9ydCBjbGFzcyBJbmJvdW5kVmlkZW9TdGF0cyB7XG4gICAgYnl0ZXNSZWNlaXZlZDogbnVtYmVyO1xuICAgIGNvZGVjSWQ6IHN0cmluZztcbiAgICBmaXJDb3VudDogbnVtYmVyO1xuICAgIGZyYW1lSGVpZ2h0OiBudW1iZXI7XG4gICAgZnJhbWVXaWR0aDogbnVtYmVyO1xuICAgIGZyYW1lc0Fzc2VtYmxlZEZyb21NdWx0aXBsZVBhY2tldHM6IG51bWJlcjtcbiAgICBmcmFtZXNEZWNvZGVkOiBudW1iZXI7XG4gICAgZnJhbWVzRHJvcHBlZDogbnVtYmVyO1xuICAgIGZyYW1lc1BlclNlY29uZDogbnVtYmVyO1xuICAgIGZyYW1lc1JlY2VpdmVkOiBudW1iZXI7XG4gICAgZnJlZXplQ291bnQ6IG51bWJlcjtcbiAgICBnb29nVGltaW5nRnJhbWVJbmZvOiBzdHJpbmc7XG4gICAgaGVhZGVyQnl0ZXNSZWNlaXZlZDogbnVtYmVyO1xuICAgIGlkOiBzdHJpbmc7XG4gICAgaml0dGVyOiBudW1iZXI7XG4gICAgaml0dGVyQnVmZmVyRGVsYXk6IG51bWJlcjtcbiAgICBqaXR0ZXJCdWZmZXJFbWl0dGVkQ291bnQ6IG51bWJlcjtcbiAgICBrZXlGcmFtZXNEZWNvZGVkOiBudW1iZXI7XG4gICAga2luZDogc3RyaW5nO1xuICAgIGxhc3RQYWNrZXRSZWNlaXZlZFRpbWVzdGFtcDogbnVtYmVyO1xuICAgIG1lZGlhVHlwZTogc3RyaW5nO1xuICAgIG1pZDogc3RyaW5nO1xuICAgIG5hY2tDb3VudDogbnVtYmVyO1xuICAgIHBhY2tldHNMb3N0OiBudW1iZXI7XG4gICAgcGFja2V0c1JlY2VpdmVkOiBudW1iZXI7XG4gICAgcGF1c2VDb3VudDogbnVtYmVyO1xuICAgIHBsaUNvdW50OiBudW1iZXI7XG4gICAgc3NyYzogbnVtYmVyO1xuICAgIHRpbWVzdGFtcDogbnVtYmVyO1xuICAgIHRvdGFsQXNzZW1ibHlUaW1lOiBudW1iZXI7XG4gICAgdG90YWxEZWNvZGVUaW1lOiBudW1iZXI7XG4gICAgdG90YWxGcmVlemVzRHVyYXRpb246IG51bWJlcjtcbiAgICB0b3RhbEludGVyRnJhbWVEZWxheTogbnVtYmVyO1xuICAgIHRvdGFsUGF1c2VzRHVyYXRpb246IG51bWJlcjtcbiAgICB0b3RhbFByb2Nlc3NpbmdEZWxheTogbnVtYmVyO1xuICAgIHRvdGFsU3F1YXJlZEludGVyRnJhbWVEZWxheTogbnVtYmVyO1xuICAgIHRyYWNrSWRlbnRpZmllcjogc3RyaW5nO1xuICAgIHRyYW5zcG9ydElkOiBzdHJpbmc7XG4gICAgdHlwZTogc3RyaW5nO1xuXG4gICAgLyogYWRkaXRpb25hbCwgY3VzdG9tIHN0YXRzICovXG4gICAgYml0cmF0ZTogbnVtYmVyO1xufVxuXG4vKipcbiAqIEluYm91bmQgU3RhdHMgY29sbGVjdGVkIGZyb20gdGhlIFJUQyBTdGF0cyBSZXBvcnRcbiAqL1xuZXhwb3J0IGNsYXNzIEluYm91bmRSVFBTdGF0cyB7XG4gICAgLyogY29tbW9uIHN0YXRzICovXG4gICAgYnl0ZXNSZWNlaXZlZDogbnVtYmVyO1xuICAgIGNvZGVjSWQ6IHN0cmluZztcbiAgICBoZWFkZXJCeXRlc1JlY2VpdmVkOiBudW1iZXI7XG4gICAgaWQ6IHN0cmluZztcbiAgICBqaXR0ZXI6IG51bWJlcjtcbiAgICBqaXR0ZXJCdWZmZXJEZWxheTogbnVtYmVyO1xuICAgIGppdHRlckJ1ZmZlckVtaXR0ZWRDb3VudDogbnVtYmVyO1xuICAgIGtpbmQ6IHN0cmluZztcbiAgICBsYXN0UGFja2V0UmVjZWl2ZWRUaW1lc3RhbXA6IG51bWJlcjtcbiAgICBtZWRpYVR5cGU6IHN0cmluZztcbiAgICBtaWQ6IHN0cmluZztcbiAgICBwYWNrZXRzTG9zdDogbnVtYmVyO1xuICAgIHBhY2tldHNSZWNlaXZlZDogbnVtYmVyO1xuICAgIHNzcmM6IG51bWJlcjtcbiAgICB0aW1lc3RhbXA6IG51bWJlcjtcbiAgICB0cmFja0lkZW50aWZpZXI6IHN0cmluZztcbiAgICB0cmFuc3BvcnRJZDogc3RyaW5nO1xuICAgIHR5cGU6IHN0cmluZztcblxuICAgIC8qIGF1ZGlvIHNwZWNpZmljIHN0YXRzICovXG4gICAgYXVkaW9MZXZlbDogbnVtYmVyO1xuICAgIGNvbmNlYWxlZFNhbXBsZXM6IG51bWJlcjtcbiAgICBjb25jZWFsbWVudEV2ZW50czogbnVtYmVyO1xuICAgIGZlY1BhY2tldHNEaXNjYXJkZWQ6IG51bWJlcjtcbiAgICBmZWNQYWNrZXRzUmVjZWl2ZWQ6IG51bWJlcjtcbiAgICBpbnNlcnRlZFNhbXBsZXNGb3JEZWNlbGVyYXRpb246IG51bWJlcjtcbiAgICBqaXR0ZXJCdWZmZXJNaW5pbXVtRGVsYXk6IG51bWJlcjtcbiAgICBqaXR0ZXJCdWZmZXJUYXJnZXREZWxheTogbnVtYmVyO1xuICAgIHBhY2tldHNEaXNjYXJkZWQ6IG51bWJlcjtcbiAgICByZW1vdmVkU2FtcGxlc0ZvckFjY2VsZXJhdGlvbjogbnVtYmVyO1xuICAgIHNpbGVudENvbmNlYWxlZFNhbXBsZXM6IG51bWJlcjtcbiAgICB0b3RhbEF1ZGlvRW5lcmd5OiBudW1iZXI7XG4gICAgdG90YWxTYW1wbGVzRHVyYXRpb246IG51bWJlcjtcbiAgICB0b3RhbFNhbXBsZXNSZWNlaXZlZDogbnVtYmVyO1xuXG4gICAgLyogdmlkZW8gc3BlY2lmaWMgc3RhdHMgKi9cbiAgICBmaXJDb3VudDogbnVtYmVyO1xuICAgIGZyYW1lSGVpZ2h0OiBudW1iZXI7XG4gICAgZnJhbWVXaWR0aDogbnVtYmVyO1xuICAgIGZyYW1lc0Fzc2VtYmxlZEZyb21NdWx0aXBsZVBhY2tldHM6IG51bWJlcjtcbiAgICBmcmFtZXNEZWNvZGVkOiBudW1iZXI7XG4gICAgZnJhbWVzRHJvcHBlZDogbnVtYmVyO1xuICAgIGZyYW1lc1BlclNlY29uZDogbnVtYmVyO1xuICAgIGZyYW1lc1JlY2VpdmVkOiBudW1iZXI7XG4gICAgZnJlZXplQ291bnQ6IG51bWJlcjtcbiAgICBnb29nVGltaW5nRnJhbWVJbmZvOiBzdHJpbmc7XG4gICAga2V5RnJhbWVzRGVjb2RlZDogbnVtYmVyO1xuICAgIG5hY2tDb3VudDogbnVtYmVyO1xuICAgIHBhdXNlQ291bnQ6IG51bWJlcjtcbiAgICBwbGlDb3VudDogbnVtYmVyO1xuICAgIHRvdGFsQXNzZW1ibHlUaW1lOiBudW1iZXI7XG4gICAgdG90YWxEZWNvZGVUaW1lOiBudW1iZXI7XG4gICAgdG90YWxGcmVlemVzRHVyYXRpb246IG51bWJlcjtcbiAgICB0b3RhbEludGVyRnJhbWVEZWxheTogbnVtYmVyO1xuICAgIHRvdGFsUGF1c2VzRHVyYXRpb246IG51bWJlcjtcbiAgICB0b3RhbFByb2Nlc3NpbmdEZWxheTogbnVtYmVyO1xuICAgIHRvdGFsU3F1YXJlZEludGVyRnJhbWVEZWxheTogbnVtYmVyO1xufVxuIiwiLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuLyoqXG4gKiBPdXRib3VuZCBWaWRlbyBTdGF0cyBjb2xsZWN0ZWQgZnJvbSB0aGUgUlRDIFN0YXRzIFJlcG9ydFxuICovXG5leHBvcnQgY2xhc3MgT3V0Qm91bmRWaWRlb1N0YXRzIHtcbiAgICBieXRlc1NlbnQ6IG51bWJlcjtcbiAgICBpZDogc3RyaW5nO1xuICAgIGxvY2FsSWQ6IHN0cmluZztcbiAgICBwYWNrZXRzU2VudDogbnVtYmVyO1xuICAgIHJlbW90ZVRpbWVzdGFtcDogbnVtYmVyO1xuICAgIHRpbWVzdGFtcDogbnVtYmVyO1xufVxuXG4vKipcbiAqIE91dGJvdW5kIFN0YXRzIGNvbGxlY3RlZCBmcm9tIHRoZSBSVEMgU3RhdHMgUmVwb3J0XG4gKi9cbmV4cG9ydCBjbGFzcyBPdXRCb3VuZFJUUFN0YXRzIHtcbiAgICBraW5kOiBzdHJpbmc7XG4gICAgYnl0ZXNTZW50OiBudW1iZXI7XG4gICAgaWQ6IHN0cmluZztcbiAgICBsb2NhbElkOiBzdHJpbmc7XG4gICAgcGFja2V0c1NlbnQ6IG51bWJlcjtcbiAgICByZW1vdGVUaW1lc3RhbXA6IG51bWJlcjtcbiAgICB0aW1lc3RhbXA6IG51bWJlcjtcbn1cbiIsIi8vIENvcHlyaWdodCBFcGljIEdhbWVzLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG5cbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJy4uL0xvZ2dlci9Mb2dnZXInO1xuaW1wb3J0IHsgQ29uZmlnLCBPcHRpb25QYXJhbWV0ZXJzLCBGbGFncyB9IGZyb20gJy4uL0NvbmZpZy9Db25maWcnO1xuaW1wb3J0IHsgQWdncmVnYXRlZFN0YXRzIH0gZnJvbSAnLi9BZ2dyZWdhdGVkU3RhdHMnO1xuaW1wb3J0IHsgcGFyc2VSdHBQYXJhbWV0ZXJzLCBzcGxpdFNlY3Rpb25zIH0gZnJvbSAnc2RwJztcblxuLyoqXG4gKiBIYW5kbGVzIHRoZSBQZWVyIENvbm5lY3Rpb25cbiAqL1xuZXhwb3J0IGNsYXNzIFBlZXJDb25uZWN0aW9uQ29udHJvbGxlciB7XG4gICAgcGVlckNvbm5lY3Rpb246IFJUQ1BlZXJDb25uZWN0aW9uO1xuICAgIGFnZ3JlZ2F0ZWRTdGF0czogQWdncmVnYXRlZFN0YXRzO1xuICAgIGNvbmZpZzogQ29uZmlnO1xuICAgIHByZWZlcnJlZENvZGVjOiBzdHJpbmc7XG4gICAgdXBkYXRlQ29kZWNTZWxlY3Rpb246IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgUlRDIFBlZXIgQ29ubmVjdGlvbiBjbGllbnRcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIFBlZXIgY29ubmVjdGlvbiBPcHRpb25zXG4gICAgICogQHBhcmFtIGNvbmZpZyAtIFRoZSBjb25maWcgZm9yIG91ciBQUyBleHBlcmllbmNlLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBvcHRpb25zOiBSVENDb25maWd1cmF0aW9uLFxuICAgICAgICBjb25maWc6IENvbmZpZyxcbiAgICAgICAgcHJlZmVycmVkQ29kZWM6IHN0cmluZ1xuICAgICkge1xuICAgICAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZztcbiAgICAgICAgdGhpcy5jcmVhdGVQZWVyQ29ubmVjdGlvbihvcHRpb25zLCBwcmVmZXJyZWRDb2RlYyk7XG4gICAgfVxuXG4gICAgY3JlYXRlUGVlckNvbm5lY3Rpb24ob3B0aW9uczogUlRDQ29uZmlndXJhdGlvbiwgcHJlZmVycmVkQ29kZWM6IHN0cmluZykge1xuICAgICAgICAvLyBTZXQgdGhlIElDRSB0cmFuc3BvcnQgdG8gcmVsYXkgaWYgVFVSTiBlbmFibGVkXG4gICAgICAgIGlmICh0aGlzLmNvbmZpZy5pc0ZsYWdFbmFibGVkKEZsYWdzLkZvcmNlVFVSTikpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuaWNlVHJhbnNwb3J0UG9saWN5ID0gJ3JlbGF5JztcbiAgICAgICAgICAgIExvZ2dlci5Mb2coXG4gICAgICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcbiAgICAgICAgICAgICAgICAnRm9yY2luZyBUVVJOIHVzYWdlIGJ5IHNldHRpbmcgSUNFIFRyYW5zcG9ydCBQb2xpY3kgaW4gcGVlciBjb25uZWN0aW9uIGNvbmZpZy4nXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gYnVpbGQgYSBuZXcgcGVlciBjb25uZWN0aW9uIHdpdGggdGhlIG9wdGlvbnNcbiAgICAgICAgdGhpcy5wZWVyQ29ubmVjdGlvbiA9IG5ldyBSVENQZWVyQ29ubmVjdGlvbihvcHRpb25zKTtcbiAgICAgICAgdGhpcy5wZWVyQ29ubmVjdGlvbi5vbnNpZ25hbGluZ3N0YXRlY2hhbmdlID0gKGV2OiBFdmVudCkgPT5cbiAgICAgICAgICAgIHRoaXMuaGFuZGxlU2lnbmFsU3RhdGVDaGFuZ2UoZXYpO1xuICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uLm9uaWNlY29ubmVjdGlvbnN0YXRlY2hhbmdlID0gKGV2OiBFdmVudCkgPT5cbiAgICAgICAgICAgIHRoaXMuaGFuZGxlSWNlQ29ubmVjdGlvblN0YXRlQ2hhbmdlKGV2KTtcbiAgICAgICAgdGhpcy5wZWVyQ29ubmVjdGlvbi5vbmljZWdhdGhlcmluZ3N0YXRlY2hhbmdlID0gKGV2OiBFdmVudCkgPT5cbiAgICAgICAgICAgIHRoaXMuaGFuZGxlSWNlR2F0aGVyaW5nU3RhdGVDaGFuZ2UoZXYpO1xuICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uLm9udHJhY2sgPSAoZXY6IFJUQ1RyYWNrRXZlbnQpID0+XG4gICAgICAgICAgICB0aGlzLmhhbmRsZU9uVHJhY2soZXYpO1xuICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uLm9uaWNlY2FuZGlkYXRlID0gKGV2OiBSVENQZWVyQ29ubmVjdGlvbkljZUV2ZW50KSA9PlxuICAgICAgICAgICAgdGhpcy5oYW5kbGVJY2VDYW5kaWRhdGUoZXYpO1xuICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uLm9uZGF0YWNoYW5uZWwgPSAoZXY6IFJUQ0RhdGFDaGFubmVsRXZlbnQpID0+XG4gICAgICAgICAgICB0aGlzLmhhbmRsZURhdGFDaGFubmVsKGV2KTtcbiAgICAgICAgdGhpcy5hZ2dyZWdhdGVkU3RhdHMgPSBuZXcgQWdncmVnYXRlZFN0YXRzKCk7XG4gICAgICAgIHRoaXMucHJlZmVycmVkQ29kZWMgPSBwcmVmZXJyZWRDb2RlYztcbiAgICAgICAgdGhpcy51cGRhdGVDb2RlY1NlbGVjdGlvbiA9IHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGFuIG9mZmVyIGZvciB0aGUgV2ViIFJUQyBoYW5kc2hha2UgYW5kIHNlbmQgdGhlIG9mZmVyIHRvIHRoZSBzaWduYWxpbmcgc2VydmVyIHZpYSB3ZWJzb2NrZXRcbiAgICAgKiBAcGFyYW0gb2ZmZXJPcHRpb25zIC0gUlRDIE9mZmVyIE9wdGlvbnNcbiAgICAgKi9cbiAgICBhc3luYyBjcmVhdGVPZmZlcihvZmZlck9wdGlvbnM6IFJUQ09mZmVyT3B0aW9ucywgY29uZmlnOiBDb25maWcpIHtcbiAgICAgICAgTG9nZ2VyLkxvZyhMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnQ3JlYXRlIE9mZmVyJywgNik7XG5cbiAgICAgICAgY29uc3QgaXNMb2NhbGhvc3RDb25uZWN0aW9uID1cbiAgICAgICAgICAgIGxvY2F0aW9uLmhvc3RuYW1lID09PSAnbG9jYWxob3N0JyB8fFxuICAgICAgICAgICAgbG9jYXRpb24uaG9zdG5hbWUgPT09ICcxMjcuMC4wLjEnO1xuICAgICAgICBjb25zdCBpc0h0dHBzQ29ubmVjdGlvbiA9IGxvY2F0aW9uLnByb3RvY29sID09PSAnaHR0cHM6JztcbiAgICAgICAgbGV0IHVzZU1pYyA9IGNvbmZpZy5pc0ZsYWdFbmFibGVkKEZsYWdzLlVzZU1pYyk7XG4gICAgICAgIGlmICh1c2VNaWMgJiYgIShpc0xvY2FsaG9zdENvbm5lY3Rpb24gfHwgaXNIdHRwc0Nvbm5lY3Rpb24pKSB7XG4gICAgICAgICAgICB1c2VNaWMgPSBmYWxzZTtcbiAgICAgICAgICAgIExvZ2dlci5FcnJvcihcbiAgICAgICAgICAgICAgICBMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLFxuICAgICAgICAgICAgICAgICdNaWNyb3Bob25lIGFjY2VzcyBpbiB0aGUgYnJvd3NlciB3aWxsIG5vdCB3b3JrIGlmIHlvdSBhcmUgbm90IG9uIEhUVFBTIG9yIGxvY2FsaG9zdC4gRGlzYWJsaW5nIG1pYyBhY2Nlc3MuJ1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIExvZ2dlci5FcnJvcihcbiAgICAgICAgICAgICAgICBMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLFxuICAgICAgICAgICAgICAgIFwiRm9yIHRlc3RpbmcgeW91IGNhbiBlbmFibGUgSFRUUCBtaWNyb3Bob25lIGFjY2VzcyBDaHJvbWUgYnkgdmlzaXRpbmcgY2hyb21lOi8vZmxhZ3MvIGFuZCBlbmFibGluZyAndW5zYWZlbHktdHJlYXQtaW5zZWN1cmUtb3JpZ2luLWFzLXNlY3VyZSdcIlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2V0dXBUcmFuc2NlaXZlcnNBc3luYyh1c2VNaWMpLmZpbmFsbHkoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5wZWVyQ29ubmVjdGlvblxuICAgICAgICAgICAgICAgID8uY3JlYXRlT2ZmZXIob2ZmZXJPcHRpb25zKVxuICAgICAgICAgICAgICAgIC50aGVuKChvZmZlcjogUlRDU2Vzc2lvbkRlc2NyaXB0aW9uSW5pdCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3dUZXh0T3ZlcmxheUNvbm5lY3RpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgb2ZmZXIuc2RwID0gdGhpcy5tdW5nZVNEUChvZmZlci5zZHAsIHVzZU1pYyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGVlckNvbm5lY3Rpb24/LnNldExvY2FsRGVzY3JpcHRpb24ob2ZmZXIpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9uU2VuZFdlYlJUQ09mZmVyKG9mZmVyKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5jYXRjaCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvd1RleHRPdmVybGF5U2V0dXBGYWlsdXJlKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICovXG4gICAgYXN5bmMgcmVjZWl2ZU9mZmVyKG9mZmVyOiBSVENTZXNzaW9uRGVzY3JpcHRpb25Jbml0LCBjb25maWc6IENvbmZpZykge1xuICAgICAgICBMb2dnZXIuTG9nKExvZ2dlci5HZXRTdGFja1RyYWNlKCksICdSZWNlaXZlIE9mZmVyJywgNik7XG5cbiAgICAgICAgdGhpcy5wZWVyQ29ubmVjdGlvbj8uc2V0UmVtb3RlRGVzY3JpcHRpb24ob2ZmZXIpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgaXNMb2NhbGhvc3RDb25uZWN0aW9uID1cbiAgICAgICAgICAgICAgICBsb2NhdGlvbi5ob3N0bmFtZSA9PT0gJ2xvY2FsaG9zdCcgfHxcbiAgICAgICAgICAgICAgICBsb2NhdGlvbi5ob3N0bmFtZSA9PT0gJzEyNy4wLjAuMSc7XG4gICAgICAgICAgICBjb25zdCBpc0h0dHBzQ29ubmVjdGlvbiA9IGxvY2F0aW9uLnByb3RvY29sID09PSAnaHR0cHM6JztcbiAgICAgICAgICAgIGxldCB1c2VNaWMgPSBjb25maWcuaXNGbGFnRW5hYmxlZChGbGFncy5Vc2VNaWMpO1xuICAgICAgICAgICAgaWYgKHVzZU1pYyAmJiAhKGlzTG9jYWxob3N0Q29ubmVjdGlvbiB8fCBpc0h0dHBzQ29ubmVjdGlvbikpIHtcbiAgICAgICAgICAgICAgICB1c2VNaWMgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBMb2dnZXIuRXJyb3IoXG4gICAgICAgICAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXG4gICAgICAgICAgICAgICAgICAgICdNaWNyb3Bob25lIGFjY2VzcyBpbiB0aGUgYnJvd3NlciB3aWxsIG5vdCB3b3JrIGlmIHlvdSBhcmUgbm90IG9uIEhUVFBTIG9yIGxvY2FsaG9zdC4gRGlzYWJsaW5nIG1pYyBhY2Nlc3MuJ1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgTG9nZ2VyLkVycm9yKFxuICAgICAgICAgICAgICAgICAgICBMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLFxuICAgICAgICAgICAgICAgICAgICBcIkZvciB0ZXN0aW5nIHlvdSBjYW4gZW5hYmxlIEhUVFAgbWljcm9waG9uZSBhY2Nlc3MgQ2hyb21lIGJ5IHZpc2l0aW5nIGNocm9tZTovL2ZsYWdzLyBhbmQgZW5hYmxpbmcgJ3Vuc2FmZWx5LXRyZWF0LWluc2VjdXJlLW9yaWdpbi1hcy1zZWN1cmUnXCJcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnNldHVwVHJhbnNjZWl2ZXJzQXN5bmModXNlTWljKS5maW5hbGx5KCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uXG4gICAgICAgICAgICAgICAgICAgID8uY3JlYXRlQW5zd2VyKClcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oKEFuc3dlcjogUlRDU2Vzc2lvbkRlc2NyaXB0aW9uSW5pdCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgQW5zd2VyLnNkcCA9IHRoaXMubXVuZ2VTRFAoQW5zd2VyLnNkcCwgdXNlTWljKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBlZXJDb25uZWN0aW9uPy5zZXRMb2NhbERlc2NyaXB0aW9uKEFuc3dlcik7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25TZW5kV2ViUlRDQW5zd2VyKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGVlckNvbm5lY3Rpb24/LmN1cnJlbnRMb2NhbERlc2NyaXB0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuY2F0Y2goKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgTG9nZ2VyLkVycm9yKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NyZWF0ZUFuc3dlcigpIGZhaWxlZCdcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIFVnbHkgc3ludGF4LCBidXQgdGhpcyBhY2hpZXZlcyB0aGUgaW50ZXJzZWN0aW9uIG9mIHRoZSBicm93c2VyIHN1cHBvcnRlZCBsaXN0IGFuZCB0aGUgVUUgc3VwcG9ydGVkIGxpc3RcbiAgICAgICAgdGhpcy5jb25maWcuc2V0T3B0aW9uU2V0dGluZ09wdGlvbnMoXG4gICAgICAgICAgICBPcHRpb25QYXJhbWV0ZXJzLlByZWZlcnJlZENvZGVjLFxuICAgICAgICAgICAgdGhpcy5wYXJzZUF2YWlsYWJsZUNvZGVjcyhvZmZlcikuZmlsdGVyKCh2YWx1ZSkgPT5cbiAgICAgICAgICAgICAgICB0aGlzLmNvbmZpZ1xuICAgICAgICAgICAgICAgICAgICAuZ2V0U2V0dGluZ09wdGlvbihPcHRpb25QYXJhbWV0ZXJzLlByZWZlcnJlZENvZGVjKVxuICAgICAgICAgICAgICAgICAgICAub3B0aW9ucy5pbmNsdWRlcyh2YWx1ZSlcbiAgICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIFJlbW90ZSBEZXNjcmlwdG9yIGZyb20gdGhlIHNpZ25hbGluZyBzZXJ2ZXIgdG8gdGhlIFJUQyBQZWVyIENvbm5lY3Rpb25cbiAgICAgKiBAcGFyYW0gYW5zd2VyIC0gUlRDIFNlc3Npb24gRGVzY3JpcHRvciBmcm9tIHRoZSBTaWduYWxpbmcgU2VydmVyXG4gICAgICovXG4gICAgcmVjZWl2ZUFuc3dlcihhbnN3ZXI6IFJUQ1Nlc3Npb25EZXNjcmlwdGlvbkluaXQpIHtcbiAgICAgICAgdGhpcy5wZWVyQ29ubmVjdGlvbj8uc2V0UmVtb3RlRGVzY3JpcHRpb24oYW5zd2VyKTtcbiAgICAgICAgLy8gVWdseSBzeW50YXgsIGJ1dCB0aGlzIGFjaGlldmVzIHRoZSBpbnRlcnNlY3Rpb24gb2YgdGhlIGJyb3dzZXIgc3VwcG9ydGVkIGxpc3QgYW5kIHRoZSBVRSBzdXBwb3J0ZWQgbGlzdFxuICAgICAgICB0aGlzLmNvbmZpZy5zZXRPcHRpb25TZXR0aW5nT3B0aW9ucyhcbiAgICAgICAgICAgIE9wdGlvblBhcmFtZXRlcnMuUHJlZmVycmVkQ29kZWMsXG4gICAgICAgICAgICB0aGlzLnBhcnNlQXZhaWxhYmxlQ29kZWNzKGFuc3dlcikuZmlsdGVyKCh2YWx1ZSkgPT5cbiAgICAgICAgICAgICAgICB0aGlzLmNvbmZpZ1xuICAgICAgICAgICAgICAgICAgICAuZ2V0U2V0dGluZ09wdGlvbihPcHRpb25QYXJhbWV0ZXJzLlByZWZlcnJlZENvZGVjKVxuICAgICAgICAgICAgICAgICAgICAub3B0aW9ucy5pbmNsdWRlcyh2YWx1ZSlcbiAgICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZSBBZ2dyZWdhdGVkIFN0YXRzIGFuZCB0aGVuIGZpcmUgYSBvblZpZGVvIFN0YXRzIGV2ZW50XG4gICAgICovXG4gICAgZ2VuZXJhdGVTdGF0cygpIHtcbiAgICAgICAgdGhpcy5wZWVyQ29ubmVjdGlvbj8uZ2V0U3RhdHMobnVsbCkudGhlbigoU3RhdHNEYXRhOiBSVENTdGF0c1JlcG9ydCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5hZ2dyZWdhdGVkU3RhdHMucHJvY2Vzc1N0YXRzKFN0YXRzRGF0YSk7XG4gICAgICAgICAgICB0aGlzLm9uVmlkZW9TdGF0cyh0aGlzLmFnZ3JlZ2F0ZWRTdGF0cyk7XG5cbiAgICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgcHJlZmVycmVkIGNvZGVjIHNlbGVjdGlvbiBiYXNlZCBvbiB3aGF0IHdhcyBhY3R1YWxseSBuZWdvdGlhdGVkXG4gICAgICAgICAgICBpZiAodGhpcy51cGRhdGVDb2RlY1NlbGVjdGlvbikge1xuICAgICAgICAgICAgICAgIHRoaXMuY29uZmlnLnNldE9wdGlvblNldHRpbmdWYWx1ZShcbiAgICAgICAgICAgICAgICAgICAgT3B0aW9uUGFyYW1ldGVycy5QcmVmZXJyZWRDb2RlYyxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZ2dyZWdhdGVkU3RhdHMuY29kZWNzLmdldChcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWdncmVnYXRlZFN0YXRzLmluYm91bmRWaWRlb1N0YXRzLmNvZGVjSWRcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENsb3NlIFRoZSBQZWVyIENvbm5lY3Rpb25cbiAgICAgKi9cbiAgICBjbG9zZSgpIHtcbiAgICAgICAgaWYgKHRoaXMucGVlckNvbm5lY3Rpb24pIHtcbiAgICAgICAgICAgIHRoaXMucGVlckNvbm5lY3Rpb24uY2xvc2UoKTtcbiAgICAgICAgICAgIHRoaXMucGVlckNvbm5lY3Rpb24gPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTW9kaWZ5IHRoZSBTZXNzaW9uIERlc2NyaXB0b3JcbiAgICAgKiBAcGFyYW0gc2RwIC0gU2Vzc2lvbiBEZXNjcmlwdG9yIGFzIGEgc3RyaW5nXG4gICAgICogQHBhcmFtIHVzZU1pYyAtIElzIHRoZSBtaWNyb3Bob25lIGluIHVzZVxuICAgICAqIEByZXR1cm5zIEEgbW9kaWZpZWQgU2Vzc2lvbiBEZXNjcmlwdG9yXG4gICAgICovXG4gICAgbXVuZ2VTRFAoc2RwOiBzdHJpbmcsIHVzZU1pYzogYm9vbGVhbikge1xuICAgICAgICBjb25zdCBtdW5nZWRTRFAgPSBzZHA7XG4gICAgICAgIG11bmdlZFNEUC5yZXBsYWNlKFxuICAgICAgICAgICAgLyhhPWZtdHA6XFxkKyAuKmxldmVsLWFzeW1tZXRyeS1hbGxvd2VkPS4qKVxcclxcbi9nbSxcbiAgICAgICAgICAgICckMTt4LWdvb2dsZS1zdGFydC1iaXRyYXRlPTEwMDAwO3gtZ29vZ2xlLW1heC1iaXRyYXRlPTEwMDAwMFxcclxcbidcbiAgICAgICAgKTtcblxuICAgICAgICBsZXQgYXVkaW9TRFAgPSAnJztcblxuICAgICAgICAvLyBzZXQgbWF4IGJpdHJhdGUgdG8gaGlnaGVzdCBiaXRyYXRlIE9wdXMgc3VwcG9ydHNcbiAgICAgICAgYXVkaW9TRFAgKz0gJ21heGF2ZXJhZ2ViaXRyYXRlPTUxMDAwMDsnO1xuXG4gICAgICAgIGlmICh1c2VNaWMpIHtcbiAgICAgICAgICAgIC8vIHNldCB0aGUgbWF4IGNhcHR1cmUgcmF0ZSB0byA0OGtoeiAoc28gd2UgY2FuIHNlbmQgaGlnaCBxdWFsaXR5IGF1ZGlvIGZyb20gbWljKVxuICAgICAgICAgICAgYXVkaW9TRFAgKz0gJ3Nwcm9wLW1heGNhcHR1cmVyYXRlPTQ4MDAwOyc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBGb3JjZSBtb25vIG9yIHN0ZXJlbyBiYXNlZCBvbiB3aGV0aGVyID9mb3JjZU1vbm8gd2FzIHBhc3NlZCBvciBub3RcbiAgICAgICAgYXVkaW9TRFAgKz0gdGhpcy5jb25maWcuaXNGbGFnRW5hYmxlZChGbGFncy5Gb3JjZU1vbm9BdWRpbylcbiAgICAgICAgICAgID8gJ3N0ZXJlbz0wOydcbiAgICAgICAgICAgIDogJ3N0ZXJlbz0xOyc7XG5cbiAgICAgICAgLy8gZW5hYmxlIGluLWJhbmQgZm9yd2FyZCBlcnJvciBjb3JyZWN0aW9uIGZvciBvcHVzIGF1ZGlvXG4gICAgICAgIGF1ZGlvU0RQICs9ICd1c2VpbmJhbmRmZWM9MSc7XG5cbiAgICAgICAgLy8gV2UgdXNlIHRoZSBsaW5lICd1c2VpbmJhbmRmZWM9MScgKHdoaWNoIE9wdXMgdXNlcykgdG8gc2V0IG91ciBPcHVzIHNwZWNpZmljIGF1ZGlvIHBhcmFtZXRlcnMuXG4gICAgICAgIG11bmdlZFNEUC5yZXBsYWNlKCd1c2VpbmJhbmRmZWM9MScsIGF1ZGlvU0RQKTtcblxuICAgICAgICByZXR1cm4gbXVuZ2VkU0RQO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFdoZW4gYSBJY2UgQ2FuZGlkYXRlIGlzIHJlY2VpdmVkIGFkZCB0byB0aGUgUlRDIFBlZXIgQ29ubmVjdGlvblxuICAgICAqIEBwYXJhbSBpY2VDYW5kaWRhdGUgLSBSVEMgSWNlIENhbmRpZGF0ZSBmcm9tIHRoZSBTaWduYWxpbmcgU2VydmVyXG4gICAgICovXG4gICAgaGFuZGxlT25JY2UoaWNlQ2FuZGlkYXRlOiBSVENJY2VDYW5kaWRhdGUpIHtcbiAgICAgICAgTG9nZ2VyLkxvZyhMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAncGVlcmNvbm5lY3Rpb24gaGFuZGxlT25JY2UnLCA2KTtcblxuICAgICAgICAvLyAvLyBpZiBmb3JjaW5nIFRVUk4sIHJlamVjdCBhbnkgY2FuZGlkYXRlcyBub3QgcmVsYXlcbiAgICAgICAgaWYgKHRoaXMuY29uZmlnLmlzRmxhZ0VuYWJsZWQoRmxhZ3MuRm9yY2VUVVJOKSkge1xuICAgICAgICAgICAgLy8gY2hlY2sgaWYgbm8gcmVsYXkgYWRkcmVzcyBpcyBmb3VuZCwgaWYgc28sIHdlIGFyZSBhc3N1bWluZyBpdCBtZWFucyBubyBUVVJOIHNlcnZlclxuICAgICAgICAgICAgaWYgKGljZUNhbmRpZGF0ZS5jYW5kaWRhdGUuaW5kZXhPZigncmVsYXknKSA8IDApIHtcbiAgICAgICAgICAgICAgICBMb2dnZXIuSW5mbyhcbiAgICAgICAgICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcbiAgICAgICAgICAgICAgICAgICAgYERyb3BwaW5nIGNhbmRpZGF0ZSBiZWNhdXNlIGl0IHdhcyBub3QgVFVSTiByZWxheS4gfCBUeXBlPSAke2ljZUNhbmRpZGF0ZS50eXBlfSB8IFByb3RvY29sPSAke2ljZUNhbmRpZGF0ZS5wcm90b2NvbH0gfCBBZGRyZXNzPSR7aWNlQ2FuZGlkYXRlLmFkZHJlc3N9IHwgUG9ydD0ke2ljZUNhbmRpZGF0ZS5wb3J0fSB8YCxcbiAgICAgICAgICAgICAgICAgICAgNlxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5wZWVyQ29ubmVjdGlvbj8uYWRkSWNlQ2FuZGlkYXRlKGljZUNhbmRpZGF0ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogV2hlbiB0aGUgUlRDIFBlZXIgQ29ubmVjdGlvbiBTaWduYWxpbmcgc2VydmVyIHN0YXRlIENoYW5nZXNcbiAgICAgKiBAcGFyYW0gc3RhdGUgLSBTaWduYWxpbmcgU2VydmVyIFN0YXRlIENoYW5nZSBFdmVudFxuICAgICAqL1xuICAgIGhhbmRsZVNpZ25hbFN0YXRlQ2hhbmdlKHN0YXRlOiBFdmVudCkge1xuICAgICAgICBMb2dnZXIuTG9nKFxuICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcbiAgICAgICAgICAgICdzaWduYWxpbmcgc3RhdGUgY2hhbmdlOiAnICsgc3RhdGUsXG4gICAgICAgICAgICA2XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGFuZGxlIHdoZW4gdGhlIEljZSBDb25uZWN0aW9uIFN0YXRlIENoYW5nZXNcbiAgICAgKiBAcGFyYW0gc3RhdGUgLSBJY2UgQ29ubmVjdGlvbiBTdGF0ZVxuICAgICAqL1xuICAgIGhhbmRsZUljZUNvbm5lY3Rpb25TdGF0ZUNoYW5nZShzdGF0ZTogRXZlbnQpIHtcbiAgICAgICAgTG9nZ2VyLkxvZyhcbiAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXG4gICAgICAgICAgICAnaWNlIGNvbm5lY3Rpb24gc3RhdGUgY2hhbmdlOiAnICsgc3RhdGUsXG4gICAgICAgICAgICA2XG4gICAgICAgICk7XG4gICAgICAgIHRoaXMub25JY2VDb25uZWN0aW9uU3RhdGVDaGFuZ2Uoc3RhdGUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhhbmRsZSB3aGVuIHRoZSBJY2UgR2F0aGVyaW5nIFN0YXRlIENoYW5nZXNcbiAgICAgKiBAcGFyYW0gc3RhdGUgLSBJY2UgR2F0aGVyaW5nIFN0YXRlIENoYW5nZVxuICAgICAqL1xuICAgIGhhbmRsZUljZUdhdGhlcmluZ1N0YXRlQ2hhbmdlKHN0YXRlOiBFdmVudCkge1xuICAgICAgICBMb2dnZXIuTG9nKFxuICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcbiAgICAgICAgICAgICdpY2UgZ2F0aGVyaW5nIHN0YXRlIGNoYW5nZTogJyArIEpTT04uc3RyaW5naWZ5KHN0YXRlKSxcbiAgICAgICAgICAgIDZcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBY3RpdmF0ZXMgdGhlIG9uVHJhY2sgbWV0aG9kXG4gICAgICogQHBhcmFtIGV2ZW50IC0gVGhlIHdlYlJ0YyB0cmFjayBldmVudFxuICAgICAqL1xuICAgIGhhbmRsZU9uVHJhY2soZXZlbnQ6IFJUQ1RyYWNrRXZlbnQpIHtcbiAgICAgICAgdGhpcy5vblRyYWNrKGV2ZW50KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBY3RpdmF0ZXMgdGhlIG9uUGVlckljZUNhbmRpZGF0ZVxuICAgICAqIEBwYXJhbSBldmVudCAtIFRoZSBwZWVyIGljZSBjYW5kaWRhdGVcbiAgICAgKi9cbiAgICBoYW5kbGVJY2VDYW5kaWRhdGUoZXZlbnQ6IFJUQ1BlZXJDb25uZWN0aW9uSWNlRXZlbnQpIHtcbiAgICAgICAgdGhpcy5vblBlZXJJY2VDYW5kaWRhdGUoZXZlbnQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFjdGl2YXRlcyB0aGUgb25EYXRhQ2hhbm5lbFxuICAgICAqIEBwYXJhbSBldmVudCAtIFRoZSBwZWVyJ3MgZGF0YSBjaGFubmVsXG4gICAgICovXG4gICAgaGFuZGxlRGF0YUNoYW5uZWwoZXZlbnQ6IFJUQ0RhdGFDaGFubmVsRXZlbnQpIHtcbiAgICAgICAgdGhpcy5vbkRhdGFDaGFubmVsKGV2ZW50KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBbiBvdmVycmlkZSBtZXRob2QgZm9yIG9uVHJhY2sgZm9yIHVzZSBvdXRzaWRlIG9mIHRoZSBQZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXJcbiAgICAgKiBAcGFyYW0gdHJhY2tFdmVudCAtIFRoZSB3ZWJSdGMgdHJhY2sgZXZlbnRcbiAgICAgKi9cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG4gICAgb25UcmFjayh0cmFja0V2ZW50OiBSVENUcmFja0V2ZW50KSB7XG4gICAgICAgIC8vIERlZmF1bHQgRnVuY3Rpb25hbGl0eTogRG8gTm90aGluZ1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFuIG92ZXJyaWRlIG1ldGhvZCBmb3Igb25JY2VDb25uZWN0aW9uU3RhdGVDaGFuZ2UgZm9yIHVzZSBvdXRzaWRlIG9mIHRoZSBQZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXJcbiAgICAgKiBAcGFyYW0gZXZlbnQgLSBUaGUgd2ViUnRjIGljZWNvbm5lY3Rpb25zdGF0ZWNoYW5nZSBldmVudFxuICAgICAqL1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcbiAgICBvbkljZUNvbm5lY3Rpb25TdGF0ZUNoYW5nZShldmVudDogRXZlbnQpIHtcbiAgICAgICAgLy8gRGVmYXVsdCBGdW5jdGlvbmFsaXR5OiBEbyBOb3RoaW5nXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQW4gb3ZlcnJpZGUgbWV0aG9kIGZvciBvblBlZXJJY2VDYW5kaWRhdGUgZm9yIHVzZSBvdXRzaWRlIG9mIHRoZSBQZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXJcbiAgICAgKiBAcGFyYW0gcGVlckNvbm5lY3Rpb25JY2VFdmVudCAtIFRoZSBwZWVyIGljZSBjYW5kaWRhdGVcbiAgICAgKi9cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG4gICAgb25QZWVySWNlQ2FuZGlkYXRlKHBlZXJDb25uZWN0aW9uSWNlRXZlbnQ6IFJUQ1BlZXJDb25uZWN0aW9uSWNlRXZlbnQpIHtcbiAgICAgICAgLy8gRGVmYXVsdCBGdW5jdGlvbmFsaXR5OiBEbyBOb3RoaW5nXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQW4gb3ZlcnJpZGUgbWV0aG9kIGZvciBvbkRhdGFDaGFubmVsIGZvciB1c2Ugb3V0c2lkZSBvZiB0aGUgUGVlckNvbm5lY3Rpb25Db250cm9sbGVyXG4gICAgICogQHBhcmFtIGRhdGFjaGFubmVsRXZlbnQgLSBUaGUgcGVlcidzIGRhdGEgY2hhbm5lbFxuICAgICAqL1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcbiAgICBvbkRhdGFDaGFubmVsKGRhdGFjaGFubmVsRXZlbnQ6IFJUQ0RhdGFDaGFubmVsRXZlbnQpIHtcbiAgICAgICAgLy8gRGVmYXVsdCBGdW5jdGlvbmFsaXR5OiBEbyBOb3RoaW5nXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0dXAgdHJhY2tzIG9uIHRoZSBSVEMgUGVlciBDb25uZWN0aW9uXG4gICAgICogQHBhcmFtIHVzZU1pYyAtIGlzIG1pYyBpbiB1c2VcbiAgICAgKi9cbiAgICBhc3luYyBzZXR1cFRyYW5zY2VpdmVyc0FzeW5jKHVzZU1pYzogYm9vbGVhbikge1xuICAgICAgICBjb25zdCBoYXNUcmFuc2NlaXZlcnMgPVxuICAgICAgICAgICAgdGhpcy5wZWVyQ29ubmVjdGlvbj8uZ2V0VHJhbnNjZWl2ZXJzKCkubGVuZ3RoID4gMDtcblxuICAgICAgICAvLyBTZXR1cCBhIHRyYW5zY2VpdmVyIGZvciBnZXR0aW5nIFVFIHZpZGVvXG4gICAgICAgIHRoaXMucGVlckNvbm5lY3Rpb24/LmFkZFRyYW5zY2VpdmVyKCd2aWRlbycsIHsgZGlyZWN0aW9uOiAncmVjdm9ubHknIH0pO1xuXG4gICAgICAgIC8vIFdlIGNhbiBvbmx5IHNldCBwcmVmZXJyZWMgY29kZWMgb24gQ2hyb21lXG4gICAgICAgIGlmIChSVENSdHBSZWNlaXZlci5nZXRDYXBhYmlsaXRpZXMgJiYgdGhpcy5wcmVmZXJyZWRDb2RlYyAhPSAnJykge1xuICAgICAgICAgICAgZm9yIChjb25zdCB0cmFuc2NlaXZlciBvZiB0aGlzLnBlZXJDb25uZWN0aW9uPy5nZXRUcmFuc2NlaXZlcnMoKSA/PyBbXSkge1xuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNjZWl2ZXIgJiZcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNjZWl2ZXIucmVjZWl2ZXIgJiZcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNjZWl2ZXIucmVjZWl2ZXIudHJhY2sgJiZcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNjZWl2ZXIucmVjZWl2ZXIudHJhY2sua2luZCA9PT0gJ3ZpZGVvJ1xuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwcmVmZXJyZWRSVFBDb2RlYyA9IHRoaXMucHJlZmVycmVkQ29kZWMuc3BsaXQoJyAnKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29kZWNzID0gW1xuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbWVUeXBlOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAndmlkZW8vJyArIHByZWZlcnJlZFJUUENvZGVjWzBdIC8qIE5hbWUgKi8sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xvY2tSYXRlOiA5MDAwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZHBGbXRwTGluZTogcHJlZmVycmVkUlRQQ29kZWNbMV0gLyogc2RwRm10cExpbmUgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBwcmVmZXJyZWRSVFBDb2RlY1sxXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICcnXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF07XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb25maWdcbiAgICAgICAgICAgICAgICAgICAgICAgIC5nZXRTZXR0aW5nT3B0aW9uKE9wdGlvblBhcmFtZXRlcnMuUHJlZmVycmVkQ29kZWMpXG4gICAgICAgICAgICAgICAgICAgICAgICAub3B0aW9ucy5maWx0ZXIoKG9wdGlvbikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlbW92ZSB0aGUgcHJlZmVycmVkIGNvZGVjIGZyb20gdGhlIGxpc3Qgb2YgcG9zc2libGUgY29kZWNzIGFzIHdlJ3ZlIHNldCBpdCBhbHJlYWR5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9wdGlvbiAhPSB0aGlzLnByZWZlcnJlZENvZGVjO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5mb3JFYWNoKChvcHRpb24pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBbW1lbmQgdGhlIHJlc3Qgb2YgdGhlIGJyb3dzZXJzIHN1cHBvcnRlZCBjb2RlY3NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhbHRDb2RlYyA9IG9wdGlvbi5zcGxpdCgnICcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVjcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWltZVR5cGU6ICd2aWRlby8nICsgYWx0Q29kZWNbMF0gLyogTmFtZSAqLyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xvY2tSYXRlOiA5MDAwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2RwRm10cExpbmU6IGFsdENvZGVjWzFdIC8qIHNkcEZtdHBMaW5lICovXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGFsdENvZGVjWzFdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICcnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGNvZGVjIG9mIGNvZGVjcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvZGVjLnNkcEZtdHBMaW5lID09PSAnJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIGNhbid0IGR5bmFtaWNhbGx5IGFkZCBtZW1iZXJzIHRvIHRoZSBjb2RlYywgc28gaW5zdGVhZCByZW1vdmUgdGhlIGZpZWxkIGlmIGl0J3MgZW1wdHlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgY29kZWMuc2RwRm10cExpbmU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB0cmFuc2NlaXZlci5zZXRDb2RlY1ByZWZlcmVuY2VzKGNvZGVjcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2V0dXAgYSB0cmFuc2NlaXZlciBmb3Igc2VuZGluZyBtaWMgYXVkaW8gdG8gVUUgYW5kIHJlY2VpdmluZyBhdWRpbyBmcm9tIFVFXG4gICAgICAgIGlmICghdXNlTWljKSB7XG4gICAgICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uPy5hZGRUcmFuc2NlaXZlcignYXVkaW8nLCB7XG4gICAgICAgICAgICAgICAgZGlyZWN0aW9uOiAncmVjdm9ubHknXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHNldCB0aGUgYXVkaW8gb3B0aW9ucyBiYXNlZCBvbiBtaWMgdXNhZ2VcbiAgICAgICAgICAgIGNvbnN0IGF1ZGlvT3B0aW9ucyA9IHVzZU1pY1xuICAgICAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgICAgICAgIGF1dG9HYWluQ29udHJvbDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgY2hhbm5lbENvdW50OiAxLFxuICAgICAgICAgICAgICAgICAgICAgIGVjaG9DYW5jZWxsYXRpb246IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgIGxhdGVuY3k6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgbm9pc2VTdXBwcmVzc2lvbjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgc2FtcGxlUmF0ZTogNDgwMDAsXG4gICAgICAgICAgICAgICAgICAgICAgc2FtcGxlU2l6ZTogMTYsXG4gICAgICAgICAgICAgICAgICAgICAgdm9sdW1lOiAxLjBcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICA6IGZhbHNlO1xuXG4gICAgICAgICAgICAvLyBzZXQgdGhlIG1lZGlhIHNlbmQgb3B0aW9uc1xuICAgICAgICAgICAgY29uc3QgbWVkaWFTZW5kT3B0aW9uczogTWVkaWFTdHJlYW1Db25zdHJhaW50cyA9IHtcbiAgICAgICAgICAgICAgICB2aWRlbzogZmFsc2UsXG4gICAgICAgICAgICAgICAgYXVkaW86IGF1ZGlvT3B0aW9uc1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLy8gTm90ZSB1c2luZyBtaWMgb24gYW5kcm9pZCBjaHJvbWUgcmVxdWlyZXMgU1NMIG9yIGNocm9tZTovL2ZsYWdzLyBcInVuc2FmZWx5LXRyZWF0LWluc2VjdXJlLW9yaWdpbi1hcy1zZWN1cmVcIlxuICAgICAgICAgICAgY29uc3Qgc3RyZWFtID0gYXdhaXQgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEoXG4gICAgICAgICAgICAgICAgbWVkaWFTZW5kT3B0aW9uc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGlmIChzdHJlYW0pIHtcbiAgICAgICAgICAgICAgICBpZiAoaGFzVHJhbnNjZWl2ZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdHJhbnNjZWl2ZXIgb2YgdGhpcy5wZWVyQ29ubmVjdGlvbj8uZ2V0VHJhbnNjZWl2ZXJzKCkgPz8gW10pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2NlaXZlciAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zY2VpdmVyLnJlY2VpdmVyICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNjZWl2ZXIucmVjZWl2ZXIudHJhY2sgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2NlaXZlci5yZWNlaXZlci50cmFjay5raW5kID09PSAnYXVkaW8nXG4gICAgICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHRyYWNrIG9mIHN0cmVhbS5nZXRUcmFja3MoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHJhY2sua2luZCAmJiB0cmFjay5raW5kID09ICdhdWRpbycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zY2VpdmVyLnNlbmRlci5yZXBsYWNlVHJhY2sodHJhY2spO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNjZWl2ZXIuZGlyZWN0aW9uID0gJ3NlbmRyZWN2JztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdHJhY2sgb2Ygc3RyZWFtLmdldFRyYWNrcygpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHJhY2sua2luZCAmJiB0cmFjay5raW5kID09ICdhdWRpbycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uPy5hZGRUcmFuc2NlaXZlcih0cmFjaywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3Rpb246ICdzZW5kcmVjdidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wZWVyQ29ubmVjdGlvbj8uYWRkVHJhbnNjZWl2ZXIoJ2F1ZGlvJywge1xuICAgICAgICAgICAgICAgICAgICBkaXJlY3Rpb246ICdyZWN2b25seSdcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFuZCBvdmVycmlkZSBldmVudCBmb3Igd2hlbiB0aGUgdmlkZW8gc3RhdHMgYXJlIGZpcmVkXG4gICAgICogQHBhcmFtIGV2ZW50IC0gQWdncmVnYXRlZCBTdGF0c1xuICAgICAqL1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcbiAgICBvblZpZGVvU3RhdHMoZXZlbnQ6IEFnZ3JlZ2F0ZWRTdGF0cykge1xuICAgICAgICAvLyBEZWZhdWx0IEZ1bmN0aW9uYWxpdHk6IERvIE5vdGhpbmdcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFdmVudCB0byBzZW5kIHRoZSBSVEMgb2ZmZXIgdG8gdGhlIFNpZ25hbGluZyBzZXJ2ZXJcbiAgICAgKiBAcGFyYW0gb2ZmZXIgLSBSVEMgT2ZmZXJcbiAgICAgKi9cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG4gICAgb25TZW5kV2ViUlRDT2ZmZXIob2ZmZXI6IFJUQ1Nlc3Npb25EZXNjcmlwdGlvbkluaXQpIHtcbiAgICAgICAgLy8gRGVmYXVsdCBGdW5jdGlvbmFsaXR5OiBEbyBOb3RoaW5nXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXZlbnQgdG8gc2VuZCB0aGUgUlRDIEFuc3dlciB0byB0aGUgU2lnbmFsaW5nIHNlcnZlclxuICAgICAqIEBwYXJhbSBhbnN3ZXIgLSBSVEMgQW5zd2VyXG4gICAgICovXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuICAgIG9uU2VuZFdlYlJUQ0Fuc3dlcihhbnN3ZXI6IFJUQ1Nlc3Npb25EZXNjcmlwdGlvbkluaXQpIHtcbiAgICAgICAgLy8gRGVmYXVsdCBGdW5jdGlvbmFsaXR5OiBEbyBOb3RoaW5nXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQW4gb3ZlcnJpZGUgZm9yIHNob3dpbmcgdGhlIFBlZXIgY29ubmVjdGlvbiBjb25uZWN0aW5nIE92ZXJsYXlcbiAgICAgKi9cbiAgICBzaG93VGV4dE92ZXJsYXlDb25uZWN0aW5nKCkge1xuICAgICAgICAvLyBEZWZhdWx0IEZ1bmN0aW9uYWxpdHk6IERvIE5vdGhpbmdcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBbiBvdmVycmlkZSBmb3Igc2hvd2luZyB0aGUgUGVlciBjb25uZWN0aW9uIEZhaWxlZCBvdmVybGF5XG4gICAgICovXG4gICAgc2hvd1RleHRPdmVybGF5U2V0dXBGYWlsdXJlKCkge1xuICAgICAgICAvLyBEZWZhdWx0IEZ1bmN0aW9uYWxpdHk6IERvIE5vdGhpbmdcbiAgICB9XG5cbiAgICBwYXJzZUF2YWlsYWJsZUNvZGVjcyhcbiAgICAgICAgcnRjU2Vzc2lvbkRlc2NyaXB0aW9uOiBSVENTZXNzaW9uRGVzY3JpcHRpb25Jbml0XG4gICAgKTogQXJyYXk8c3RyaW5nPiB7XG4gICAgICAgIC8vIE5vIHBvaW50IGluIHVwZGF0aW5nIHRoZSBhdmFpbGFibGUgY29kZWNzIGlmIG9uIEZGXG4gICAgICAgIGlmICghUlRDUnRwUmVjZWl2ZXIuZ2V0Q2FwYWJpbGl0aWVzKVxuICAgICAgICAgICAgcmV0dXJuIFsnT25seSBhdmFpbGFibGUgb24gQ2hyb21lJ107XG5cbiAgICAgICAgY29uc3QgdWVTdXBwb3J0ZWRDb2RlY3M6IEFycmF5PHN0cmluZz4gPSBbXTtcbiAgICAgICAgY29uc3Qgc2VjdGlvbnMgPSBzcGxpdFNlY3Rpb25zKHJ0Y1Nlc3Npb25EZXNjcmlwdGlvbi5zZHApO1xuICAgICAgICAvLyBkaXNjYXJkIHRoZSBzZXNzaW9uIGluZm9ybWF0aW9uIGFzIHdlIG9ubHkgd2FudCBtZWRpYSByZWxhdGVkIGluZm9cbiAgICAgICAgc2VjdGlvbnMuc2hpZnQoKTtcbiAgICAgICAgc2VjdGlvbnMuZm9yRWFjaCgobWVkaWFTZWN0aW9uKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IGNvZGVjcyB9ID0gcGFyc2VSdHBQYXJhbWV0ZXJzKG1lZGlhU2VjdGlvbik7XG4gICAgICAgICAgICAvLyBGaWx0ZXIgb25seSBmb3IgVlBYIC8gSDI2WCAvIEFWMVxuICAgICAgICAgICAgY29uc3QgbWF0Y2hlciA9IC8oVlBcXGR8SDI2XFxkfEFWMSkuKi87XG4gICAgICAgICAgICBjb2RlY3MuZm9yRWFjaCgoYykgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0ciA9XG4gICAgICAgICAgICAgICAgICAgIGMubmFtZSArXG4gICAgICAgICAgICAgICAgICAgICcgJyArXG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKGMucGFyYW1ldGVycyB8fCB7fSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoKHApID0+IHAgKyAnPScgKyBjLnBhcmFtZXRlcnNbcF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAuam9pbignOycpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gbWF0Y2hlci5leGVjKHN0cik7XG4gICAgICAgICAgICAgICAgaWYgKG1hdGNoICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjLm5hbWUgPT0gJ1ZQOScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFVFIGFuc3dlcnMgZG9uJ3Qgc3BlY2lmeSBwcm9maWxlIGJ1dCB3ZSBrbm93IHdlIHdhbnQgcHJvZmlsZSAwXG4gICAgICAgICAgICAgICAgICAgICAgICBjLnBhcmFtZXRlcnMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3Byb2ZpbGUtaWQnOiAnMCdcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29kZWNTdHI6IHN0cmluZyA9XG4gICAgICAgICAgICAgICAgICAgICAgICBjLm5hbWUgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJyAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKGMucGFyYW1ldGVycyB8fCB7fSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAubWFwKChwKSA9PiBwICsgJz0nICsgYy5wYXJhbWV0ZXJzW3BdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5qb2luKCc7Jyk7XG4gICAgICAgICAgICAgICAgICAgIHVlU3VwcG9ydGVkQ29kZWNzLnB1c2goY29kZWNTdHIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gdWVTdXBwb3J0ZWRDb2RlY3M7XG4gICAgfVxufVxuIiwiLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuLyoqXG4gKiBTZXNzaW9uIHN0YXRpc3RpY3NcbiAqL1xuZXhwb3J0IGNsYXNzIFNlc3Npb25TdGF0cyB7XG4gICAgcnVuVGltZTogc3RyaW5nO1xuICAgIGNvbnRyb2xzU3RyZWFtSW5wdXQ6IHN0cmluZztcbiAgICB2aWRlb0VuY29kZXJBdmdRUDogbnVtYmVyO1xufVxuIiwiLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuLyoqXG4gKiBDbGFzcyB0byBob2xkIHRoZSBzdHJlYW0gc3RhdHMgZGF0YSBjb21pbmcgaW4gZnJvbSB3ZWJSdGNcbiAqL1xuZXhwb3J0IGNsYXNzIFN0cmVhbVN0YXRzIHtcbiAgICBpZDogc3RyaW5nO1xuICAgIHN0cmVhbUlkZW50aWZpZXI6IHN0cmluZztcbiAgICB0aW1lc3RhbXA6IG51bWJlcjtcbiAgICB0cmFja0lkczogc3RyaW5nW107XG59XG4iLCIvLyBDb3B5cmlnaHQgRXBpYyBHYW1lcywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXG5pbXBvcnQgeyBDb25maWcsIE9wdGlvblBhcmFtZXRlcnMgfSBmcm9tICcuLi9Db25maWcvQ29uZmlnJztcbmltcG9ydCB7IExhdGVuY3lUZXN0UmVzdWx0cyB9IGZyb20gJy4uL0RhdGFDaGFubmVsL0xhdGVuY3lUZXN0UmVzdWx0cyc7XG5pbXBvcnQgeyBBZ2dyZWdhdGVkU3RhdHMgfSBmcm9tICcuLi9QZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIvQWdncmVnYXRlZFN0YXRzJztcbmltcG9ydCB7IFdlYlJ0Y1BsYXllckNvbnRyb2xsZXIgfSBmcm9tICcuLi9XZWJSdGNQbGF5ZXIvV2ViUnRjUGxheWVyQ29udHJvbGxlcic7XG5pbXBvcnQgeyBGbGFncywgTnVtZXJpY1BhcmFtZXRlcnMgfSBmcm9tICcuLi9Db25maWcvQ29uZmlnJztcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJy4uL0xvZ2dlci9Mb2dnZXInO1xuaW1wb3J0IHsgSW5pdGlhbFNldHRpbmdzIH0gZnJvbSAnLi4vRGF0YUNoYW5uZWwvSW5pdGlhbFNldHRpbmdzJztcbmltcG9ydCB7IE9uU2NyZWVuS2V5Ym9hcmQgfSBmcm9tICcuLi9VSS9PblNjcmVlbktleWJvYXJkJztcbmltcG9ydCB7XG4gICAgRXZlbnRFbWl0dGVyLFxuICAgIEluaXRpYWxTZXR0aW5nc0V2ZW50LFxuICAgIExhdGVuY3lUZXN0UmVzdWx0RXZlbnQsXG4gICAgUGl4ZWxTdHJlYW1pbmdFdmVudCxcbiAgICBTdGF0c1JlY2VpdmVkRXZlbnQsXG4gICAgU3RyZWFtTG9hZGluZ0V2ZW50LFxuICAgIFN0cmVhbVByZUNvbm5lY3RFdmVudCxcbiAgICBTdHJlYW1SZWNvbm5lY3RFdmVudCxcbiAgICBTdHJlYW1QcmVEaXNjb25uZWN0RXZlbnQsXG4gICAgVmlkZW9FbmNvZGVyQXZnUVBFdmVudCxcbiAgICBWaWRlb0luaXRpYWxpemVkRXZlbnQsXG4gICAgV2ViUnRjQXV0b0Nvbm5lY3RFdmVudCxcbiAgICBXZWJSdGNDb25uZWN0ZWRFdmVudCxcbiAgICBXZWJSdGNDb25uZWN0aW5nRXZlbnQsXG4gICAgV2ViUnRjRGlzY29ubmVjdGVkRXZlbnQsXG4gICAgV2ViUnRjRmFpbGVkRXZlbnQsXG4gICAgV2ViUnRjU2RwRXZlbnRcbn0gZnJvbSAnLi4vVXRpbC9FdmVudEVtaXR0ZXInO1xuaW1wb3J0IHsgTWVzc2FnZU9uU2NyZWVuS2V5Ym9hcmQgfSBmcm9tICcuLi9XZWJTb2NrZXRzL01lc3NhZ2VSZWNlaXZlJztcbmltcG9ydCB7IFdlYlhSQ29udHJvbGxlciB9IGZyb20gJy4uL1dlYlhSL1dlYlhSQ29udHJvbGxlcic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGl4ZWxTdHJlYW1pbmdPdmVycmlkZXMge1xuICAgIC8qKiBUaGUgRE9NIGVsbWVudCB3aGVyZSBQaXhlbCBTdHJlYW1pbmcgdmlkZW8gYW5kIHVzZXIgaW5wdXQgZXZlbnQgaGFuZGxlcnMgYXJlIGF0dGFjaGVkIHRvLlxuICAgICAqIFlvdSBjYW4gZ2l2ZSBhbiBleGlzdGluZyBET00gZWxlbWVudCBoZXJlLiBJZiBub3QgZ2l2ZW4sIHRoZSBsaWJyYXJ5IHdpbGwgY3JlYXRlIGEgbmV3IGRpdiBlbGVtZW50XG4gICAgICogdGhhdCBpcyBub3QgYXR0YWNoZWQgYW55d2hlcmUuIEluIHRoaXMgY2FzZSB5b3UgY2FuIGxhdGVyIGdldCBhY2Nlc3MgdG8gdGhpcyBuZXcgZWxlbWVudCBhbmRcbiAgICAgKiBhdHRhY2ggaXQgdG8geW91ciB3ZWIgcGFnZS4gKi9cbiAgICB2aWRlb0VsZW1lbnRQYXJlbnQ/OiBIVE1MRWxlbWVudDtcbn1cblxuLyoqXG4gKiBUaGUga2V5IGNsYXNzIGZvciB0aGUgYnJvd3NlciBzaWRlIG9mIGEgUGl4ZWwgU3RyZWFtaW5nIGFwcGxpY2F0aW9uLCBpdCBpbmNsdWRlczpcbiAqIFdlYlJUQyBoYW5kbGluZywgWFIgc3VwcG9ydCwgaW5wdXQgaGFuZGxpbmcsIGFuZCBlbWl0dGVycyBmb3IgbGlmZXRpbWUgYW5kIHN0YXRlIGNoYW5nZSBldmVudHMuXG4gKiBVc2VycyBhcmUgZW5jb3VyYWdlZCB0byB1c2UgdGhpcyBjbGFzcyBhcyBpcywgdGhyb3VnaCBjb21wb3NpdGlvbiwgb3IgZXh0ZW5kIGl0LiBJbiBhbnkgY2FzZSwgXG4gKiB0aGlzIHdpbGwgbGlrZWx5IGJlIHRoZSBjb3JlIG9mIHlvdXIgUGl4ZWwgU3RyZWFtaW5nIGV4cGVyaWVuY2UgaW4gdGVybXMgb2YgZnVuY3Rpb25hbGl0eS5cbiAqL1xuZXhwb3J0IGNsYXNzIFBpeGVsU3RyZWFtaW5nIHtcbiAgICBwcm90ZWN0ZWQgX3dlYlJ0Y0NvbnRyb2xsZXI6IFdlYlJ0Y1BsYXllckNvbnRyb2xsZXI7XG4gICAgcHJvdGVjdGVkIF93ZWJYckNvbnRyb2xsZXI6IFdlYlhSQ29udHJvbGxlcjtcbiAgICAvKipcbiAgICAgKiBDb25maWd1cmF0aW9uIG9iamVjdC4gWW91IGNhbiByZWFkIG9yIG1vZGlmeSBjb25maWcgdGhyb3VnaCB0aGlzIG9iamVjdC4gV2hlbmV2ZXJcbiAgICAgKiB0aGUgY29uZmlndXJhdGlvbiBpcyBjaGFuZ2VkLCB0aGUgbGlicmFyeSB3aWxsIGVtaXQgYSBgc2V0dGluZ3NDaGFuZ2VkYCBldmVudC5cbiAgICAgKi9cbiAgICBwdWJsaWMgY29uZmlnOiBDb25maWc7XG5cbiAgICBwcml2YXRlIF92aWRlb0VsZW1lbnRQYXJlbnQ6IEhUTUxFbGVtZW50O1xuXG4gICAgX3Nob3dBY3Rpb25PckVycm9yT25EaXNjb25uZWN0ID0gdHJ1ZTtcbiAgICBwcml2YXRlIGFsbG93Q29uc29sZUNvbW1hbmRzID0gZmFsc2U7XG5cbiAgICBwcml2YXRlIG9uU2NyZWVuS2V5Ym9hcmRIZWxwZXI6IE9uU2NyZWVuS2V5Ym9hcmQ7XG5cbiAgICBwcml2YXRlIF92aWRlb1N0YXJ0VGltZTogbnVtYmVyO1xuICAgIHByaXZhdGUgX2lucHV0Q29udHJvbGxlcjogYm9vbGVhbjtcblxuICAgIHByaXZhdGUgX2V2ZW50RW1pdHRlcjogRXZlbnRFbWl0dGVyO1xuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIGNvbmZpZyAtIEEgbmV3bHkgaW5zdGFudGlhdGVkIGNvbmZpZyBvYmplY3RcbiAgICAgKiBAcGFyYW0gb3ZlcnJpZGVzIC0gUGFyYW1ldGVycyB0byBvdmVycmlkZSBkZWZhdWx0IGJlaGF2aW91clxuICAgICAqIHJldHVybnMgdGhlIGJhc2UgUGl4ZWwgc3RyZWFtaW5nIG9iamVjdFxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGNvbmZpZzogQ29uZmlnLCBvdmVycmlkZXM/OiBQaXhlbFN0cmVhbWluZ092ZXJyaWRlcykge1xuICAgICAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZztcblxuICAgICAgICBpZiAob3ZlcnJpZGVzPy52aWRlb0VsZW1lbnRQYXJlbnQpIHtcbiAgICAgICAgICAgIHRoaXMuX3ZpZGVvRWxlbWVudFBhcmVudCA9IG92ZXJyaWRlcy52aWRlb0VsZW1lbnRQYXJlbnQ7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9ldmVudEVtaXR0ZXIgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgICAgICAgdGhpcy5jb25maWd1cmVTZXR0aW5ncygpO1xuXG4gICAgICAgIC8vIHNldHVwIFdlYlJUQ1xuICAgICAgICB0aGlzLnNldFdlYlJ0Y1BsYXllckNvbnRyb2xsZXIoXG4gICAgICAgICAgICBuZXcgV2ViUnRjUGxheWVyQ29udHJvbGxlcih0aGlzLmNvbmZpZywgdGhpcylcbiAgICAgICAgKTtcblxuICAgICAgICAvLyBPbnNjcmVlbiBrZXlib2FyZFxuICAgICAgICB0aGlzLm9uU2NyZWVuS2V5Ym9hcmRIZWxwZXIgPSBuZXcgT25TY3JlZW5LZXlib2FyZChcbiAgICAgICAgICAgIHRoaXMudmlkZW9FbGVtZW50UGFyZW50XG4gICAgICAgICk7XG4gICAgICAgIHRoaXMub25TY3JlZW5LZXlib2FyZEhlbHBlci51bnF1YW50aXplQW5kRGVub3JtYWxpemVVbnNpZ25lZCA9IChcbiAgICAgICAgICAgIHg6IG51bWJlcixcbiAgICAgICAgICAgIHk6IG51bWJlclxuICAgICAgICApID0+XG4gICAgICAgICAgICB0aGlzLl93ZWJSdGNDb250cm9sbGVyLnJlcXVlc3RVbnF1YW50aXplZEFuZERlbm9ybWFsaXplVW5zaWduZWQoXG4gICAgICAgICAgICAgICAgeCxcbiAgICAgICAgICAgICAgICB5XG4gICAgICAgICAgICApO1xuICAgICAgICB0aGlzLl9hY3RpdmF0ZU9uU2NyZWVuS2V5Ym9hcmQgPSAoY29tbWFuZDogTWVzc2FnZU9uU2NyZWVuS2V5Ym9hcmQpID0+XG4gICAgICAgICAgICB0aGlzLm9uU2NyZWVuS2V5Ym9hcmRIZWxwZXIuc2hvd09uU2NyZWVuS2V5Ym9hcmQoY29tbWFuZCk7XG5cbiAgICAgICAgdGhpcy5fd2ViWHJDb250cm9sbGVyID0gbmV3IFdlYlhSQ29udHJvbGxlcih0aGlzLl93ZWJSdGNDb250cm9sbGVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBlbGVtZW50IHRoYXQgY29udGFpbnMgdGhlIHZpZGVvIHN0cmVhbSBlbGVtZW50LlxuICAgICAqL1xuICAgIHB1YmxpYyBnZXQgdmlkZW9FbGVtZW50UGFyZW50KCk6IEhUTUxFbGVtZW50IHtcbiAgICAgICAgaWYgKCF0aGlzLl92aWRlb0VsZW1lbnRQYXJlbnQpIHtcbiAgICAgICAgICAgIHRoaXMuX3ZpZGVvRWxlbWVudFBhcmVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgdGhpcy5fdmlkZW9FbGVtZW50UGFyZW50LmlkID0gJ3ZpZGVvRWxlbWVudFBhcmVudCc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZpZGVvRWxlbWVudFBhcmVudDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb25maWd1cmUgdGhlIHNldHRpbmdzIHdpdGggb24gY2hhbmdlIGxpc3RlbmVycyBhbmQgYW55IGFkZGl0aW9uYWwgcGVyIGV4cGVyaWVuY2Ugc2V0dGluZ3MuXG4gICAgICovXG4gICAgcHJpdmF0ZSBjb25maWd1cmVTZXR0aW5ncygpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5jb25maWcuX2FkZE9uU2V0dGluZ0NoYW5nZWRMaXN0ZW5lcihcbiAgICAgICAgICAgIEZsYWdzLklzUXVhbGl0eUNvbnRyb2xsZXIsXG4gICAgICAgICAgICAod2FudHNRdWFsaXR5Q29udHJvbGxlcjogYm9vbGVhbikgPT4ge1xuICAgICAgICAgICAgICAgIC8vIElmIHRoZSBzZXR0aW5nIGhhcyBiZWVuIHNldCB0byB0cnVlIChlaXRoZXIgcHJvZ3JhbWF0aWNhbGx5IG9yIHRoZSB1c2VyIGhhcyBmbGlja2VkIHRoZSB0b2dnbGUpXG4gICAgICAgICAgICAgICAgLy8gYW5kIHdlIGFyZW4ndCBjdXJyZW50bHkgcXVhbGl0eSBjb250cm9sbGVyLCBzZW5kIHRoZSByZXF1ZXN0XG4gICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICB3YW50c1F1YWxpdHlDb250cm9sbGVyID09PSB0cnVlICYmXG4gICAgICAgICAgICAgICAgICAgICF0aGlzLl93ZWJSdGNDb250cm9sbGVyLmlzUXVhbGl0eUNvbnRyb2xsZXJcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fd2ViUnRjQ29udHJvbGxlci5zZW5kUmVxdWVzdFF1YWxpdHlDb250cm9sT3duZXJzaGlwKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuXG4gICAgICAgIHRoaXMuY29uZmlnLl9hZGRPblNldHRpbmdDaGFuZ2VkTGlzdGVuZXIoXG4gICAgICAgICAgICBGbGFncy5BRktEZXRlY3Rpb24sXG4gICAgICAgICAgICAoaXNBRktFbmFibGVkOiBib29sZWFuKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fd2ViUnRjQ29udHJvbGxlci5zZXRBZmtFbmFibGVkKGlzQUZLRW5hYmxlZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG5cbiAgICAgICAgdGhpcy5jb25maWcuX2FkZE9uU2V0dGluZ0NoYW5nZWRMaXN0ZW5lcihcbiAgICAgICAgICAgIEZsYWdzLk1hdGNoVmlld3BvcnRSZXNvbHV0aW9uLFxuICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuX3dlYlJ0Y0NvbnRyb2xsZXIudmlkZW9QbGF5ZXIudXBkYXRlVmlkZW9TdHJlYW1TaXplKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG5cbiAgICAgICAgdGhpcy5jb25maWcuX2FkZE9uU2V0dGluZ0NoYW5nZWRMaXN0ZW5lcihcbiAgICAgICAgICAgIEZsYWdzLkhvdmVyaW5nTW91c2VNb2RlLFxuICAgICAgICAgICAgKGlzSG92ZXJpbmdNb3VzZTogYm9vbGVhbikgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuY29uZmlnLnNldEZsYWdMYWJlbChcbiAgICAgICAgICAgICAgICAgICAgRmxhZ3MuSG92ZXJpbmdNb3VzZU1vZGUsXG4gICAgICAgICAgICAgICAgICAgIGBDb250cm9sIFNjaGVtZTogJHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzSG92ZXJpbmdNb3VzZSA/ICdIb3ZlcmluZycgOiAnTG9ja2VkJ1xuICAgICAgICAgICAgICAgICAgICB9IE1vdXNlYFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgdGhpcy5fd2ViUnRjQ29udHJvbGxlci5zZXRNb3VzZUlucHV0RW5hYmxlZCh0aGlzLmNvbmZpZy5pc0ZsYWdFbmFibGVkKEZsYWdzLk1vdXNlSW5wdXQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcblxuICAgICAgICAvLyB1c2VyIGlucHV0XG4gICAgICAgIHRoaXMuY29uZmlnLl9hZGRPblNldHRpbmdDaGFuZ2VkTGlzdGVuZXIoXG4gICAgICAgICAgICBGbGFncy5LZXlib2FyZElucHV0LFxuICAgICAgICAgICAgKGlzRW5hYmxlZDogYm9vbGVhbikgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuX3dlYlJ0Y0NvbnRyb2xsZXIuc2V0S2V5Ym9hcmRJbnB1dEVuYWJsZWQoaXNFbmFibGVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLmNvbmZpZy5fYWRkT25TZXR0aW5nQ2hhbmdlZExpc3RlbmVyKFxuICAgICAgICAgICAgRmxhZ3MuTW91c2VJbnB1dCxcbiAgICAgICAgICAgIChpc0VuYWJsZWQ6IGJvb2xlYW4pID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLl93ZWJSdGNDb250cm9sbGVyLnNldE1vdXNlSW5wdXRFbmFibGVkKGlzRW5hYmxlZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG5cbiAgICAgICAgdGhpcy5jb25maWcuX2FkZE9uU2V0dGluZ0NoYW5nZWRMaXN0ZW5lcihcbiAgICAgICAgICAgIEZsYWdzLlRvdWNoSW5wdXQsXG4gICAgICAgICAgICAoaXNFbmFibGVkOiBib29sZWFuKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fd2ViUnRjQ29udHJvbGxlci5zZXRUb3VjaElucHV0RW5hYmxlZChpc0VuYWJsZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuXG4gICAgICAgIHRoaXMuY29uZmlnLl9hZGRPblNldHRpbmdDaGFuZ2VkTGlzdGVuZXIoXG4gICAgICAgICAgICBGbGFncy5HYW1lcGFkSW5wdXQsXG4gICAgICAgICAgICAoaXNFbmFibGVkOiBib29sZWFuKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fd2ViUnRjQ29udHJvbGxlci5zZXRHYW1lUGFkSW5wdXRFbmFibGVkKGlzRW5hYmxlZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG5cbiAgICAgICAgLy8gZW5jb2RlciBzZXR0aW5nc1xuICAgICAgICB0aGlzLmNvbmZpZy5fYWRkT25OdW1lcmljU2V0dGluZ0NoYW5nZWRMaXN0ZW5lcihcbiAgICAgICAgICAgIE51bWVyaWNQYXJhbWV0ZXJzLk1pblFQLFxuICAgICAgICAgICAgKG5ld1ZhbHVlOiBudW1iZXIpID0+IHtcbiAgICAgICAgICAgICAgICBMb2dnZXIuTG9nKFxuICAgICAgICAgICAgICAgICAgICBMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLFxuICAgICAgICAgICAgICAgICAgICAnLS0tLS0tLS0gIFNlbmRpbmcgTWluUVAgIC0tLS0tLS0tJyxcbiAgICAgICAgICAgICAgICAgICAgN1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgdGhpcy5fd2ViUnRjQ29udHJvbGxlci5zZW5kRW5jb2Rlck1pblFQKG5ld1ZhbHVlKTtcbiAgICAgICAgICAgICAgICBMb2dnZXIuTG9nKFxuICAgICAgICAgICAgICAgICAgICBMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLFxuICAgICAgICAgICAgICAgICAgICAnLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLScsXG4gICAgICAgICAgICAgICAgICAgIDdcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuXG4gICAgICAgIHRoaXMuY29uZmlnLl9hZGRPbk51bWVyaWNTZXR0aW5nQ2hhbmdlZExpc3RlbmVyKFxuICAgICAgICAgICAgTnVtZXJpY1BhcmFtZXRlcnMuTWF4UVAsXG4gICAgICAgICAgICAobmV3VmFsdWU6IG51bWJlcikgPT4ge1xuICAgICAgICAgICAgICAgIExvZ2dlci5Mb2coXG4gICAgICAgICAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXG4gICAgICAgICAgICAgICAgICAgICctLS0tLS0tLSAgU2VuZGluZyBlbmNvZGVyIHNldHRpbmdzICAtLS0tLS0tLScsXG4gICAgICAgICAgICAgICAgICAgIDdcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHRoaXMuX3dlYlJ0Y0NvbnRyb2xsZXIuc2VuZEVuY29kZXJNYXhRUChuZXdWYWx1ZSk7XG4gICAgICAgICAgICAgICAgTG9nZ2VyLkxvZyhcbiAgICAgICAgICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcbiAgICAgICAgICAgICAgICAgICAgJy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0nLFxuICAgICAgICAgICAgICAgICAgICA3XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcblxuICAgICAgICAvLyBXZWJSVEMgc2V0dGluZ3NcbiAgICAgICAgdGhpcy5jb25maWcuX2FkZE9uTnVtZXJpY1NldHRpbmdDaGFuZ2VkTGlzdGVuZXIoXG4gICAgICAgICAgICBOdW1lcmljUGFyYW1ldGVycy5XZWJSVENNaW5CaXRyYXRlLFxuICAgICAgICAgICAgKG5ld1ZhbHVlOiBudW1iZXIpID0+IHtcbiAgICAgICAgICAgICAgICBMb2dnZXIuTG9nKFxuICAgICAgICAgICAgICAgICAgICBMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLFxuICAgICAgICAgICAgICAgICAgICAnLS0tLS0tLS0gIFNlbmRpbmcgd2ViIHJ0YyBzZXR0aW5ncyAgLS0tLS0tLS0nLFxuICAgICAgICAgICAgICAgICAgICA3XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB0aGlzLl93ZWJSdGNDb250cm9sbGVyLnNlbmRXZWJSVENNaW5CaXRyYXRlKG5ld1ZhbHVlICogMTAwMCAvKiBrYnBzIHRvIGJwcyAqLyk7XG4gICAgICAgICAgICAgICAgTG9nZ2VyLkxvZyhcbiAgICAgICAgICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcbiAgICAgICAgICAgICAgICAgICAgJy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0nLFxuICAgICAgICAgICAgICAgICAgICA3XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLmNvbmZpZy5fYWRkT25OdW1lcmljU2V0dGluZ0NoYW5nZWRMaXN0ZW5lcihcbiAgICAgICAgICAgIE51bWVyaWNQYXJhbWV0ZXJzLldlYlJUQ01heEJpdHJhdGUsXG4gICAgICAgICAgICAobmV3VmFsdWU6IG51bWJlcikgPT4ge1xuICAgICAgICAgICAgICAgIExvZ2dlci5Mb2coXG4gICAgICAgICAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXG4gICAgICAgICAgICAgICAgICAgICctLS0tLS0tLSAgU2VuZGluZyB3ZWIgcnRjIHNldHRpbmdzICAtLS0tLS0tLScsXG4gICAgICAgICAgICAgICAgICAgIDdcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHRoaXMuX3dlYlJ0Y0NvbnRyb2xsZXIuc2VuZFdlYlJUQ01heEJpdHJhdGUobmV3VmFsdWUgKiAxMDAwIC8qIGticHMgdG8gYnBzICovKTtcbiAgICAgICAgICAgICAgICBMb2dnZXIuTG9nKFxuICAgICAgICAgICAgICAgICAgICBMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLFxuICAgICAgICAgICAgICAgICAgICAnLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLScsXG4gICAgICAgICAgICAgICAgICAgIDdcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuXG4gICAgICAgIHRoaXMuY29uZmlnLl9hZGRPbk51bWVyaWNTZXR0aW5nQ2hhbmdlZExpc3RlbmVyKFxuICAgICAgICAgICAgTnVtZXJpY1BhcmFtZXRlcnMuV2ViUlRDRlBTLFxuICAgICAgICAgICAgKG5ld1ZhbHVlOiBudW1iZXIpID0+IHtcbiAgICAgICAgICAgICAgICBMb2dnZXIuTG9nKFxuICAgICAgICAgICAgICAgICAgICBMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLFxuICAgICAgICAgICAgICAgICAgICAnLS0tLS0tLS0gIFNlbmRpbmcgd2ViIHJ0YyBzZXR0aW5ncyAgLS0tLS0tLS0nLFxuICAgICAgICAgICAgICAgICAgICA3XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB0aGlzLl93ZWJSdGNDb250cm9sbGVyLnNlbmRXZWJSVENGcHMobmV3VmFsdWUpO1xuICAgICAgICAgICAgICAgIExvZ2dlci5Mb2coXG4gICAgICAgICAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXG4gICAgICAgICAgICAgICAgICAgICctLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tJyxcbiAgICAgICAgICAgICAgICAgICAgN1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG5cbiAgICAgICAgdGhpcy5jb25maWcuX2FkZE9uT3B0aW9uU2V0dGluZ0NoYW5nZWRMaXN0ZW5lcihcbiAgICAgICAgICAgIE9wdGlvblBhcmFtZXRlcnMuUHJlZmVycmVkQ29kZWMsXG4gICAgICAgICAgICAobmV3VmFsdWU6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl93ZWJSdGNDb250cm9sbGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3dlYlJ0Y0NvbnRyb2xsZXIuc2V0UHJlZmVycmVkQ29kZWMobmV3VmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLmNvbmZpZy5fcmVnaXN0ZXJPbkNoYW5nZUV2ZW50cyh0aGlzLl9ldmVudEVtaXR0ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFjdGl2YXRlIHRoZSBvbiBzY3JlZW4ga2V5Ym9hcmQgd2hlbiByZWNlaXZpbmcgdGhlIGNvbW1hbmQgZnJvbSB0aGUgc3RyZWFtZXJcbiAgICAgKiBAcGFyYW0gY29tbWFuZCAtIHRoZSBrZXlib2FyZCBjb21tYW5kXG4gICAgICovXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuICAgIF9hY3RpdmF0ZU9uU2NyZWVuS2V5Ym9hcmQoY29tbWFuZDogTWVzc2FnZU9uU2NyZWVuS2V5Ym9hcmQpOiB2b2lkIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNZXRob2Qgbm90IGltcGxlbWVudGVkLicpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldCB0aGUgaW5wdXQgY29udHJvbCBvd25lcnNoaXBcbiAgICAgKiBAcGFyYW0gaW5wdXRDb250cm9sT3duZXJzaGlwIC0gZG9lcyB0aGUgdXNlciBoYXZlIGlucHV0IGNvbnRyb2wgb3duZXJzaGlwXG4gICAgICovXG4gICAgX29uSW5wdXRDb250cm9sT3duZXJzaGlwKGlucHV0Q29udHJvbE93bmVyc2hpcDogYm9vbGVhbik6IHZvaWQge1xuICAgICAgICB0aGlzLl9pbnB1dENvbnRyb2xsZXIgPSBpbnB1dENvbnRyb2xPd25lcnNoaXA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5zdGFudGlhdGUgdGhlIFdlYlJUQ1BsYXllckNvbnRyb2xsZXIgaW50ZXJmYWNlIHRvIHByb3ZpZGUgV2ViUlRDUGxheWVyQ29udHJvbGxlciBmdW5jdGlvbmFsaXR5IHdpdGhpbiB0aGlzIGNsYXNzIGFuZCBzZXQgdXAgYW55dGhpbmcgdGhhdCByZXF1aXJlcyBpdFxuICAgICAqIEBwYXJhbSB3ZWJSdGNQbGF5ZXJDb250cm9sbGVyIC0gYSBXZWJSdGNQbGF5ZXJDb250cm9sbGVyIGNvbnRyb2xsZXIgaW5zdGFuY2VcbiAgICAgKi9cbiAgICBwcml2YXRlIHNldFdlYlJ0Y1BsYXllckNvbnRyb2xsZXIoXG4gICAgICAgIHdlYlJ0Y1BsYXllckNvbnRyb2xsZXI6IFdlYlJ0Y1BsYXllckNvbnRyb2xsZXJcbiAgICApIHtcbiAgICAgICAgdGhpcy5fd2ViUnRjQ29udHJvbGxlciA9IHdlYlJ0Y1BsYXllckNvbnRyb2xsZXI7XG5cbiAgICAgICAgdGhpcy5fd2ViUnRjQ29udHJvbGxlci5zZXRQcmVmZXJyZWRDb2RlYyhcbiAgICAgICAgICAgIHRoaXMuY29uZmlnLmdldFNldHRpbmdPcHRpb24oT3B0aW9uUGFyYW1ldGVycy5QcmVmZXJyZWRDb2RlYylcbiAgICAgICAgICAgICAgICAuc2VsZWN0ZWRcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5fd2ViUnRjQ29udHJvbGxlci5yZXNpemVQbGF5ZXJTdHlsZSgpO1xuXG4gICAgICAgIC8vIGNvbm5lY3QgaWYgYXV0byBjb25uZWN0IGZsYWcgaXMgZW5hYmxlZFxuICAgICAgICB0aGlzLmNoZWNrRm9yQXV0b0Nvbm5lY3QoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb25uZWN0IHRvIHNpZ25hbGluZyBzZXJ2ZXIuXG4gICAgICovXG4gICAgcHVibGljIGNvbm5lY3QoKSB7XG4gICAgICAgIHRoaXMuX2V2ZW50RW1pdHRlci5kaXNwYXRjaEV2ZW50KG5ldyBTdHJlYW1QcmVDb25uZWN0RXZlbnQoKSk7XG4gICAgICAgIHRoaXMuX3dlYlJ0Y0NvbnRyb2xsZXIuY29ubmVjdFRvU2lnbmFsbGluZ1NlcnZlcigpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlY29ubmVjdHMgdG8gdGhlIHNpZ25hbGluZyBzZXJ2ZXIuIElmIGNvbm5lY3Rpb24gaXMgdXAsIGRpc2Nvbm5lY3RzIGZpcnN0XG4gICAgICogYmVmb3JlIGVzdGFibGlzaGluZyBhIG5ldyBjb25uZWN0aW9uXG4gICAgICovXG4gICAgcHVibGljIHJlY29ubmVjdCgpIHtcbiAgICAgICAgdGhpcy5fZXZlbnRFbWl0dGVyLmRpc3BhdGNoRXZlbnQobmV3IFN0cmVhbVJlY29ubmVjdEV2ZW50KCkpO1xuICAgICAgICB0aGlzLl93ZWJSdGNDb250cm9sbGVyLnJlc3RhcnRTdHJlYW1BdXRvbWF0aWNhbGx5KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGlzY29ubmVjdCBmcm9tIHRoZSBzaWduYWxpbmcgc2VydmVyIGFuZCBjbG9zZSBvcGVuIHBlZXIgY29ubmVjdGlvbnMuXG4gICAgICovXG4gICAgcHVibGljIGRpc2Nvbm5lY3QoKSB7XG4gICAgICAgIHRoaXMuX2V2ZW50RW1pdHRlci5kaXNwYXRjaEV2ZW50KG5ldyBTdHJlYW1QcmVEaXNjb25uZWN0RXZlbnQoKSk7XG4gICAgICAgIHRoaXMuX3dlYlJ0Y0NvbnRyb2xsZXIuY2xvc2UoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQbGF5IHRoZSBzdHJlYW0uIENhbiBiZSBjYWxsZWQgb25seSBhZnRlciBhIHBlZXIgY29ubmVjdGlvbiBoYXMgYmVlbiBlc3RhYmxpc2hlZC5cbiAgICAgKi9cbiAgICBwdWJsaWMgcGxheSgpIHtcbiAgICAgICAgdGhpcy5fb25TdHJlYW1Mb2FkaW5nKCk7XG4gICAgICAgIHRoaXMuX3dlYlJ0Y0NvbnRyb2xsZXIucGxheVN0cmVhbSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEF1dG8gY29ubmVjdCBpZiBBdXRvQ29ubmVjdCBmbGFnIGlzIGVuYWJsZWRcbiAgICAgKi9cbiAgICBwcml2YXRlIGNoZWNrRm9yQXV0b0Nvbm5lY3QoKSB7XG4gICAgICAgIC8vIHNldCB1cCBpZiB0aGUgYXV0byBwbGF5IHdpbGwgYmUgdXNlZCBvciByZWd1bGFyIGNsaWNrIHRvIHN0YXJ0XG4gICAgICAgIGlmICh0aGlzLmNvbmZpZy5pc0ZsYWdFbmFibGVkKEZsYWdzLkF1dG9Db25uZWN0KSkge1xuICAgICAgICAgICAgLy8gaWYgYXV0b3BsYXlpbmcgc2hvdyBhbiBpbmZvIG92ZXJsYXkgd2hpbGUgd2hpbGUgd2FpdGluZyBmb3IgdGhlIGNvbm5lY3Rpb24gdG8gYmVnaW5cbiAgICAgICAgICAgIHRoaXMuX29uV2ViUnRjQXV0b0Nvbm5lY3QoKTtcbiAgICAgICAgICAgIHRoaXMuX3dlYlJ0Y0NvbnRyb2xsZXIuY29ubmVjdFRvU2lnbmFsbGluZ1NlcnZlcigpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRW1pdCBhbiBldmVudCBvbiBhdXRvIGNvbm5lY3RpbmdcbiAgICAgKi9cbiAgICBfb25XZWJSdGNBdXRvQ29ubmVjdCgpIHtcbiAgICAgICAgdGhpcy5fZXZlbnRFbWl0dGVyLmRpc3BhdGNoRXZlbnQobmV3IFdlYlJ0Y0F1dG9Db25uZWN0RXZlbnQoKSk7XG4gICAgICAgIHRoaXMuX3Nob3dBY3Rpb25PckVycm9yT25EaXNjb25uZWN0ID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXQgdXAgZnVuY3Rpb25hbGl0eSB0byBoYXBwZW4gd2hlbiByZWNlaXZpbmcgYSB3ZWJSVEMgYW5zd2VyXG4gICAgICovXG4gICAgX29uV2ViUnRjU2RwKCkge1xuICAgICAgICB0aGlzLl9ldmVudEVtaXR0ZXIuZGlzcGF0Y2hFdmVudChuZXcgV2ViUnRjU2RwRXZlbnQoKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRW1pdHMgYSBTdHJlYW1Mb2FkaW5nIGV2ZW50XG4gICAgICovXG4gICAgX29uU3RyZWFtTG9hZGluZygpIHtcbiAgICAgICAgdGhpcy5fZXZlbnRFbWl0dGVyLmRpc3BhdGNoRXZlbnQobmV3IFN0cmVhbUxvYWRpbmdFdmVudCgpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFdmVudCBmaXJlZCB3aGVuIHRoZSB2aWRlbyBpcyBkaXNjb25uZWN0ZWQgLSBlbWl0cyBnaXZlbiBldmVudFN0cmluZyBvciBhbiBvdmVycmlkZVxuICAgICAqIG1lc3NhZ2UgZnJvbSB3ZWJSdGNDb250cm9sbGVyIGlmIG9uZSBoYXMgYmVlbiBzZXRcbiAgICAgKiBAcGFyYW0gZXZlbnRTdHJpbmcgLSB0aGUgZXZlbnQgdGV4dCB0aGF0IHdpbGwgYmUgZW1pdHRlZFxuICAgICAqL1xuICAgIF9vbkRpc2Nvbm5lY3QoZXZlbnRTdHJpbmc6IHN0cmluZykge1xuICAgICAgICAvLyBpZiB3ZSBoYXZlIG92ZXJyaWRkZW4gdGhlIGRlZmF1bHQgZGlzY29ubmVjdGlvbiBtZXNzYWdlLCBhc3NpZ24gdGhlIG5ldyB2YWx1ZSBoZXJlXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIHRoaXMuX3dlYlJ0Y0NvbnRyb2xsZXIuZ2V0RGlzY29ubmVjdE1lc3NhZ2VPdmVycmlkZSgpICE9ICcnICYmXG4gICAgICAgICAgICB0aGlzLl93ZWJSdGNDb250cm9sbGVyLmdldERpc2Nvbm5lY3RNZXNzYWdlT3ZlcnJpZGUoKSAhPT1cbiAgICAgICAgICAgICAgICB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIHRoaXMuX3dlYlJ0Y0NvbnRyb2xsZXIuZ2V0RGlzY29ubmVjdE1lc3NhZ2VPdmVycmlkZSgpICE9IG51bGxcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBldmVudFN0cmluZyA9IHRoaXMuX3dlYlJ0Y0NvbnRyb2xsZXIuZ2V0RGlzY29ubmVjdE1lc3NhZ2VPdmVycmlkZSgpO1xuICAgICAgICAgICAgdGhpcy5fd2ViUnRjQ29udHJvbGxlci5zZXREaXNjb25uZWN0TWVzc2FnZU92ZXJyaWRlKCcnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2V2ZW50RW1pdHRlci5kaXNwYXRjaEV2ZW50KFxuICAgICAgICAgICAgbmV3IFdlYlJ0Y0Rpc2Nvbm5lY3RlZEV2ZW50KHtcbiAgICAgICAgICAgICAgICBldmVudFN0cmluZyxcbiAgICAgICAgICAgICAgICBzaG93QWN0aW9uT3JFcnJvck9uRGlzY29ubmVjdDpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2hvd0FjdGlvbk9yRXJyb3JPbkRpc2Nvbm5lY3RcbiAgICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgICAgIGlmICh0aGlzLl9zaG93QWN0aW9uT3JFcnJvck9uRGlzY29ubmVjdCA9PSBmYWxzZSkge1xuICAgICAgICAgICAgdGhpcy5fc2hvd0FjdGlvbk9yRXJyb3JPbkRpc2Nvbm5lY3QgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGFuZGxlcyB3aGVuIFdlYiBSdGMgaXMgY29ubmVjdGluZ1xuICAgICAqL1xuICAgIF9vbldlYlJ0Y0Nvbm5lY3RpbmcoKSB7XG4gICAgICAgIHRoaXMuX2V2ZW50RW1pdHRlci5kaXNwYXRjaEV2ZW50KG5ldyBXZWJSdGNDb25uZWN0aW5nRXZlbnQoKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGFuZGxlcyB3aGVuIFdlYiBSdGMgaGFzIGNvbm5lY3RlZFxuICAgICAqL1xuICAgIF9vbldlYlJ0Y0Nvbm5lY3RlZCgpIHtcbiAgICAgICAgdGhpcy5fZXZlbnRFbWl0dGVyLmRpc3BhdGNoRXZlbnQobmV3IFdlYlJ0Y0Nvbm5lY3RlZEV2ZW50KCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhhbmRsZXMgd2hlbiBXZWIgUnRjIGZhaWxzIHRvIGNvbm5lY3RcbiAgICAgKi9cbiAgICBfb25XZWJSdGNGYWlsZWQoKSB7XG4gICAgICAgIHRoaXMuX2V2ZW50RW1pdHRlci5kaXNwYXRjaEV2ZW50KG5ldyBXZWJSdGNGYWlsZWRFdmVudCgpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIYW5kbGUgd2hlbiB0aGUgVmlkZW8gaGFzIGJlZW4gSW5pdGlhbGl6ZWRcbiAgICAgKi9cbiAgICBfb25WaWRlb0luaXRpYWxpemVkKCkge1xuICAgICAgICB0aGlzLl9ldmVudEVtaXR0ZXIuZGlzcGF0Y2hFdmVudChuZXcgVmlkZW9Jbml0aWFsaXplZEV2ZW50KCkpO1xuICAgICAgICB0aGlzLl92aWRlb1N0YXJ0VGltZSA9IERhdGUubm93KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0IHVwIGZ1bmN0aW9uYWxpdHkgdG8gaGFwcGVuIHdoZW4gcmVjZWl2aW5nIGxhdGVuY3kgdGVzdCByZXN1bHRzXG4gICAgICogQHBhcmFtIGxhdGVuY3kgLSBsYXRlbmN5IHRlc3QgcmVzdWx0cyBvYmplY3RcbiAgICAgKi9cbiAgICBfb25MYXRlbmN5VGVzdFJlc3VsdChsYXRlbmN5VGltaW5nczogTGF0ZW5jeVRlc3RSZXN1bHRzKSB7XG4gICAgICAgIHRoaXMuX2V2ZW50RW1pdHRlci5kaXNwYXRjaEV2ZW50KFxuICAgICAgICAgICAgbmV3IExhdGVuY3lUZXN0UmVzdWx0RXZlbnQoeyBsYXRlbmN5VGltaW5ncyB9KVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldCB1cCBmdW5jdGlvbmFsaXR5IHRvIGhhcHBlbiB3aGVuIHJlY2VpdmluZyB2aWRlbyBzdGF0aXN0aWNzXG4gICAgICogQHBhcmFtIHZpZGVvU3RhdHMgLSB2aWRlbyBzdGF0aXN0aWNzIGFzIGEgYWdncmVnYXRlIHN0YXRzIG9iamVjdFxuICAgICAqL1xuICAgIF9vblZpZGVvU3RhdHModmlkZW9TdGF0czogQWdncmVnYXRlZFN0YXRzKSB7XG4gICAgICAgIC8vIER1cmF0aW9uXG4gICAgICAgIGlmICghdGhpcy5fdmlkZW9TdGFydFRpbWUgfHwgdGhpcy5fdmlkZW9TdGFydFRpbWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5fdmlkZW9TdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgICB9XG4gICAgICAgIHZpZGVvU3RhdHMuaGFuZGxlU2Vzc2lvblN0YXRpc3RpY3MoXG4gICAgICAgICAgICB0aGlzLl92aWRlb1N0YXJ0VGltZSxcbiAgICAgICAgICAgIHRoaXMuX2lucHV0Q29udHJvbGxlcixcbiAgICAgICAgICAgIHRoaXMuX3dlYlJ0Y0NvbnRyb2xsZXIudmlkZW9BdmdRcFxuICAgICAgICApO1xuXG4gICAgICAgIHRoaXMuX2V2ZW50RW1pdHRlci5kaXNwYXRjaEV2ZW50KFxuICAgICAgICAgICAgbmV3IFN0YXRzUmVjZWl2ZWRFdmVudCh7IGFnZ3JlZ2F0ZWRTdGF0czogdmlkZW9TdGF0cyB9KVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldCB1cCBmdW5jdGlvbmFsaXR5IHRvIGhhcHBlbiB3aGVuIGNhbGN1bGF0aW5nIHRoZSBhdmVyYWdlIHZpZGVvIGVuY29kZXIgcXBcbiAgICAgKiBAcGFyYW0gUVAgLSB0aGUgcXVhbGl0eSBudW1iZXIgb2YgdGhlIHN0cmVhbVxuICAgICAqL1xuICAgIF9vblZpZGVvRW5jb2RlckF2Z1FQKFFQOiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5fZXZlbnRFbWl0dGVyLmRpc3BhdGNoRXZlbnQoXG4gICAgICAgICAgICBuZXcgVmlkZW9FbmNvZGVyQXZnUVBFdmVudCh7IGF2Z1FQOiBRUCB9KVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldCB1cCBmdW5jdGlvbmFsaXR5IHRvIGhhcHBlbiB3aGVuIHJlY2VpdmluZyBhbmQgaGFuZGxpbmcgaW5pdGlhbCBzZXR0aW5ncyBmb3IgdGhlIFVFIGFwcFxuICAgICAqIEBwYXJhbSBzZXR0aW5ncyAtIGluaXRpYWwgVUUgYXBwIHNldHRpbmdzXG4gICAgICovXG4gICAgX29uSW5pdGlhbFNldHRpbmdzKHNldHRpbmdzOiBJbml0aWFsU2V0dGluZ3MpIHtcbiAgICAgICAgdGhpcy5fZXZlbnRFbWl0dGVyLmRpc3BhdGNoRXZlbnQoXG4gICAgICAgICAgICBuZXcgSW5pdGlhbFNldHRpbmdzRXZlbnQoeyBzZXR0aW5ncyB9KVxuICAgICAgICApO1xuICAgICAgICBpZiAoc2V0dGluZ3MuUGl4ZWxTdHJlYW1pbmdTZXR0aW5ncykge1xuICAgICAgICAgICAgdGhpcy5hbGxvd0NvbnNvbGVDb21tYW5kcyA9XG4gICAgICAgICAgICAgICAgc2V0dGluZ3MuUGl4ZWxTdHJlYW1pbmdTZXR0aW5ncy5BbGxvd1BpeGVsU3RyZWFtaW5nQ29tbWFuZHMgPz8gZmFsc2U7XG4gICAgICAgICAgICBpZiAodGhpcy5hbGxvd0NvbnNvbGVDb21tYW5kcyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBMb2dnZXIuSW5mbyhcbiAgICAgICAgICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcbiAgICAgICAgICAgICAgICAgICAgJy1BbGxvd1BpeGVsU3RyZWFtaW5nQ29tbWFuZHM9ZmFsc2UsIHNlbmRpbmcgYXJiaXRyYXJ5IGNvbnNvbGUgY29tbWFuZHMgZnJvbSBicm93c2VyIHRvIFVFIGlzIGRpc2FibGVkLidcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdXNlVXJsUGFyYW1zID0gdGhpcy5jb25maWcudXNlVXJsUGFyYW1zO1xuICAgICAgICBjb25zdCB1cmxQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpO1xuICAgICAgICBpZiAoc2V0dGluZ3MuRW5jb2RlclNldHRpbmdzKSB7XG4gICAgICAgICAgICB0aGlzLmNvbmZpZy5zZXROdW1lcmljU2V0dGluZyhcbiAgICAgICAgICAgICAgICBOdW1lcmljUGFyYW1ldGVycy5NaW5RUCxcbiAgICAgICAgICAgICAgICAvLyBJZiBhIHNldHRpbmcgaXMgc2V0IGluIHRoZSBVUkwsIG1ha2Ugc3VyZSB3ZSByZXNwZWN0IHRoYXQgdmFsdWUgYXMgb3Bwb3NlZCB0byB3aGF0IHRoZSBhcHBsaWNhdGlvbiBzZW5kcyB1c1xuICAgICAgICAgICAgICAgICh1c2VVcmxQYXJhbXMgJiYgdXJsUGFyYW1zLmhhcyhOdW1lcmljUGFyYW1ldGVycy5NaW5RUCkpIFxuICAgICAgICAgICAgICAgICAgICA/IE51bWJlci5wYXJzZUludCh1cmxQYXJhbXMuZ2V0KE51bWVyaWNQYXJhbWV0ZXJzLk1pblFQKSkgXG4gICAgICAgICAgICAgICAgICAgIDogc2V0dGluZ3MuRW5jb2RlclNldHRpbmdzLk1pblFQXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuY29uZmlnLnNldE51bWVyaWNTZXR0aW5nKFxuICAgICAgICAgICAgICAgIE51bWVyaWNQYXJhbWV0ZXJzLk1heFFQLFxuICAgICAgICAgICAgICAgICh1c2VVcmxQYXJhbXMgJiYgdXJsUGFyYW1zLmhhcyhOdW1lcmljUGFyYW1ldGVycy5NYXhRUCkpIFxuICAgICAgICAgICAgICAgICAgICA/IE51bWJlci5wYXJzZUludCh1cmxQYXJhbXMuZ2V0KE51bWVyaWNQYXJhbWV0ZXJzLk1heFFQKSkgXG4gICAgICAgICAgICAgICAgICAgIDogc2V0dGluZ3MuRW5jb2RlclNldHRpbmdzLk1heFFQXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZXR0aW5ncy5XZWJSVENTZXR0aW5ncykge1xuICAgICAgICAgICAgdGhpcy5jb25maWcuc2V0TnVtZXJpY1NldHRpbmcoXG4gICAgICAgICAgICAgICAgTnVtZXJpY1BhcmFtZXRlcnMuV2ViUlRDTWluQml0cmF0ZSxcbiAgICAgICAgICAgICAgICAodXNlVXJsUGFyYW1zICYmIHVybFBhcmFtcy5oYXMoTnVtZXJpY1BhcmFtZXRlcnMuV2ViUlRDTWluQml0cmF0ZSkpIFxuICAgICAgICAgICAgICAgICAgICA/IE51bWJlci5wYXJzZUludCh1cmxQYXJhbXMuZ2V0KE51bWVyaWNQYXJhbWV0ZXJzLldlYlJUQ01pbkJpdHJhdGUpKSAvIDEwMDAgLyogYnBzIHRvIGticHMgKi9cbiAgICAgICAgICAgICAgICAgICAgOiBzZXR0aW5ncy5XZWJSVENTZXR0aW5ncy5NaW5CaXRyYXRlIC8gMTAwMCAvKiBicHMgdG8ga2JwcyAqL1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMuY29uZmlnLnNldE51bWVyaWNTZXR0aW5nKFxuICAgICAgICAgICAgICAgIE51bWVyaWNQYXJhbWV0ZXJzLldlYlJUQ01heEJpdHJhdGUsXG4gICAgICAgICAgICAgICAgKHVzZVVybFBhcmFtcyAmJiB1cmxQYXJhbXMuaGFzKE51bWVyaWNQYXJhbWV0ZXJzLldlYlJUQ01heEJpdHJhdGUpKSBcbiAgICAgICAgICAgICAgICAgICAgPyBOdW1iZXIucGFyc2VJbnQodXJsUGFyYW1zLmdldChOdW1lcmljUGFyYW1ldGVycy5XZWJSVENNYXhCaXRyYXRlKSkgLyAxMDAwIC8qIGJwcyB0byBrYnBzICovXG4gICAgICAgICAgICAgICAgICAgIDogc2V0dGluZ3MuV2ViUlRDU2V0dGluZ3MuTWF4Qml0cmF0ZSAvIDEwMDAgLyogYnBzIHRvIGticHMgKi9cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aGlzLmNvbmZpZy5zZXROdW1lcmljU2V0dGluZyhcbiAgICAgICAgICAgICAgICBOdW1lcmljUGFyYW1ldGVycy5XZWJSVENGUFMsXG4gICAgICAgICAgICAgICAgKHVzZVVybFBhcmFtcyAmJiB1cmxQYXJhbXMuaGFzKE51bWVyaWNQYXJhbWV0ZXJzLldlYlJUQ0ZQUykpIFxuICAgICAgICAgICAgICAgICAgICA/IE51bWJlci5wYXJzZUludCh1cmxQYXJhbXMuZ2V0KE51bWVyaWNQYXJhbWV0ZXJzLldlYlJUQ0ZQUykpXG4gICAgICAgICAgICAgICAgICAgIDogc2V0dGluZ3MuV2ViUlRDU2V0dGluZ3MuRlBTXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0IHVwIGZ1bmN0aW9uYWxpdHkgdG8gaGFwcGVuIHdoZW4gc2V0dGluZyBxdWFsaXR5IGNvbnRyb2wgb3duZXJzaGlwIG9mIGEgc3RyZWFtXG4gICAgICogQHBhcmFtIGhhc1F1YWxpdHlPd25lcnNoaXAgLSBkb2VzIHRoaXMgdXNlciBoYXZlIHF1YWxpdHkgb3duZXJzaGlwIG9mIHRoZSBzdHJlYW0gdHJ1ZSAvIGZhbHNlXG4gICAgICovXG4gICAgX29uUXVhbGl0eUNvbnRyb2xPd25lcnNoaXAoaGFzUXVhbGl0eU93bmVyc2hpcDogYm9vbGVhbikge1xuICAgICAgICB0aGlzLmNvbmZpZy5zZXRGbGFnRW5hYmxlZChcbiAgICAgICAgICAgIEZsYWdzLklzUXVhbGl0eUNvbnRyb2xsZXIsXG4gICAgICAgICAgICBoYXNRdWFsaXR5T3duZXJzaGlwXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVxdWVzdCBhIGNvbm5lY3Rpb24gbGF0ZW5jeSB0ZXN0LlxuICAgICAqIE5PVEU6IFRoZXJlIGFyZSBwbGFucyB0byByZWZhY3RvciBhbGwgcmVxdWVzdCogZnVuY3Rpb25zLiBFeHBlY3QgY2hhbmdlcyBpZiB5b3UgdXNlIHRoaXMhXG4gICAgICogQHJldHVybnNcbiAgICAgKi9cbiAgICBwdWJsaWMgcmVxdWVzdExhdGVuY3lUZXN0KCkge1xuICAgICAgICBpZiAoIXRoaXMuX3dlYlJ0Y0NvbnRyb2xsZXIudmlkZW9QbGF5ZXIuaXNWaWRlb1JlYWR5KCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl93ZWJSdGNDb250cm9sbGVyLnNlbmRMYXRlbmN5VGVzdCgpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXF1ZXN0IGZvciB0aGUgVUUgYXBwbGljYXRpb24gdG8gc2hvdyBGUFMgY291bnRlci5cbiAgICAgKiBOT1RFOiBUaGVyZSBhcmUgcGxhbnMgdG8gcmVmYWN0b3IgYWxsIHJlcXVlc3QqIGZ1bmN0aW9ucy4gRXhwZWN0IGNoYW5nZXMgaWYgeW91IHVzZSB0aGlzIVxuICAgICAqIEByZXR1cm5zXG4gICAgICovXG4gICAgcHVibGljIHJlcXVlc3RTaG93RnBzKCkge1xuICAgICAgICBpZiAoIXRoaXMuX3dlYlJ0Y0NvbnRyb2xsZXIudmlkZW9QbGF5ZXIuaXNWaWRlb1JlYWR5KCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl93ZWJSdGNDb250cm9sbGVyLnNlbmRTaG93RnBzKCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlcXVlc3QgZm9yIGEgbmV3IElGcmFtZSBmcm9tIHRoZSBVRSBhcHBsaWNhdGlvbi5cbiAgICAgKiBOT1RFOiBUaGVyZSBhcmUgcGxhbnMgdG8gcmVmYWN0b3IgYWxsIHJlcXVlc3QqIGZ1bmN0aW9ucy4gRXhwZWN0IGNoYW5nZXMgaWYgeW91IHVzZSB0aGlzIVxuICAgICAqIEByZXR1cm5zXG4gICAgICovXG4gICAgcHVibGljIHJlcXVlc3RJZnJhbWUoKSB7XG4gICAgICAgIGlmICghdGhpcy5fd2ViUnRjQ29udHJvbGxlci52aWRlb1BsYXllci5pc1ZpZGVvUmVhZHkoKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3dlYlJ0Y0NvbnRyb2xsZXIuc2VuZElmcmFtZVJlcXVlc3QoKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2VuZCBkYXRhIHRvIFVFIGFwcGxpY2F0aW9uLiBUaGUgZGF0YSB3aWxsIGJlIHJ1biB0aHJvdWdoIEpTT04uc3RyaW5naWZ5KCkgc28gZS5nLiBzdHJpbmdzXG4gICAgICogYW5kIGFueSBzZXJpYWxpemFibGUgcGxhaW4gSlNPTiBvYmplY3RzIHdpdGggbm8gcmVjdXJyZW5jZSBjYW4gYmUgc2VudC5cbiAgICAgKiBAcmV0dXJucyB0cnVlIGlmIHN1Y2NlZWRlZCwgZmFsc2UgaWYgcmVqZWN0ZWRcbiAgICAgKi9cbiAgICBwdWJsaWMgZW1pdFVJSW50ZXJhY3Rpb24oZGVzY3JpcHRvcjogb2JqZWN0IHwgc3RyaW5nKSB7XG4gICAgICAgIGlmICghdGhpcy5fd2ViUnRjQ29udHJvbGxlci52aWRlb1BsYXllci5pc1ZpZGVvUmVhZHkoKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3dlYlJ0Y0NvbnRyb2xsZXIuZW1pdFVJSW50ZXJhY3Rpb24oZGVzY3JpcHRvcik7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNlbmQgYSBjb21tYW5kIHRvIFVFIGFwcGxpY2F0aW9uLiBCbG9ja3MgQ29uc29sZUNvbW1hbmQgZGVzY3JpcHRvcnMgdW5sZXNzIFVFXG4gICAgICogaGFzIHNpZ25hbGVkIHRoYXQgaXQgYWxsb3dzIGNvbnNvbGUgY29tbWFuZHMuXG4gICAgICogQHJldHVybnMgdHJ1ZSBpZiBzdWNjZWVkZWQsIGZhbHNlIGlmIHJlamVjdGVkXG4gICAgICovXG4gICAgcHVibGljIGVtaXRDb21tYW5kKGRlc2NyaXB0b3I6IG9iamVjdCkge1xuICAgICAgICBpZiAoIXRoaXMuX3dlYlJ0Y0NvbnRyb2xsZXIudmlkZW9QbGF5ZXIuaXNWaWRlb1JlYWR5KCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuYWxsb3dDb25zb2xlQ29tbWFuZHMgJiYgJ0NvbnNvbGVDb21tYW5kJyBpbiBkZXNjcmlwdG9yKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fd2ViUnRjQ29udHJvbGxlci5lbWl0Q29tbWFuZChkZXNjcmlwdG9yKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2VuZCBhIGNvbnNvbGUgY29tbWFuZCB0byBVRSBhcHBsaWNhdGlvbi4gT25seSBhbGxvd2VkIGlmIFVFIGhhcyBzaWduYWxlZCB0aGF0IGl0IGFsbG93c1xuICAgICAqIGNvbnNvbGUgY29tbWFuZHMuXG4gICAgICogQHJldHVybnMgdHJ1ZSBpZiBzdWNjZWVkZWQsIGZhbHNlIGlmIHJlamVjdGVkXG4gICAgICovXG4gICAgcHVibGljIGVtaXRDb25zb2xlQ29tbWFuZChjb21tYW5kOiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKCF0aGlzLmFsbG93Q29uc29sZUNvbW1hbmRzIHx8ICF0aGlzLl93ZWJSdGNDb250cm9sbGVyLnZpZGVvUGxheWVyLmlzVmlkZW9SZWFkeSgpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fd2ViUnRjQ29udHJvbGxlci5lbWl0Q29uc29sZUNvbW1hbmQoY29tbWFuZCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZCBhIFVFIC0+IGJyb3dzZXIgcmVzcG9uc2UgZXZlbnQgbGlzdGVuZXJcbiAgICAgKiBAcGFyYW0gbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSByZXNwb25zZSBoYW5kbGVyXG4gICAgICogQHBhcmFtIGxpc3RlbmVyIC0gVGhlIG1ldGhvZCB0byBiZSBhY3RpdmF0ZWQgd2hlbiBhIG1lc3NhZ2UgaXMgcmVjZWl2ZWRcbiAgICAgKi9cbiAgICBwdWJsaWMgYWRkUmVzcG9uc2VFdmVudExpc3RlbmVyKFxuICAgICAgICBuYW1lOiBzdHJpbmcsXG4gICAgICAgIGxpc3RlbmVyOiAocmVzcG9uc2U6IHN0cmluZykgPT4gdm9pZFxuICAgICkge1xuICAgICAgICB0aGlzLl93ZWJSdGNDb250cm9sbGVyLnJlc3BvbnNlQ29udHJvbGxlci5hZGRSZXNwb25zZUV2ZW50TGlzdGVuZXIobmFtZSwgbGlzdGVuZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBhIFVFIC0+IGJyb3dzZXIgcmVzcG9uc2UgZXZlbnQgbGlzdGVuZXJcbiAgICAgKiBAcGFyYW0gbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSByZXNwb25zZSBoYW5kbGVyXG4gICAgICovXG4gICAgcHVibGljIHJlbW92ZVJlc3BvbnNlRXZlbnRMaXN0ZW5lcihuYW1lOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5fd2ViUnRjQ29udHJvbGxlci5yZXNwb25zZUNvbnRyb2xsZXIucmVtb3ZlUmVzcG9uc2VFdmVudExpc3RlbmVyKG5hbWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERpc3BhdGNoIGEgbmV3IGV2ZW50LlxuICAgICAqIEBwYXJhbSBlIGV2ZW50XG4gICAgICogQHJldHVybnNcbiAgICAgKi9cbiAgICBwdWJsaWMgZGlzcGF0Y2hFdmVudChlOiBQaXhlbFN0cmVhbWluZ0V2ZW50KTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9ldmVudEVtaXR0ZXIuZGlzcGF0Y2hFdmVudChlKTtcbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXIgYW4gZXZlbnQgaGFuZGxlci5cbiAgICAgKiBAcGFyYW0gdHlwZSBldmVudCBuYW1lXG4gICAgICogQHBhcmFtIGxpc3RlbmVyIGV2ZW50IGhhbmRsZXIgZnVuY3Rpb25cbiAgICAgKi9cbiAgICBwdWJsaWMgYWRkRXZlbnRMaXN0ZW5lcjxcbiAgICAgICAgVCBleHRlbmRzIFBpeGVsU3RyZWFtaW5nRXZlbnRbJ3R5cGUnXSxcbiAgICAgICAgRSBleHRlbmRzIFBpeGVsU3RyZWFtaW5nRXZlbnQgJiB7IHR5cGU6IFQgfVxuICAgID4odHlwZTogVCwgbGlzdGVuZXI6IChlOiBFdmVudCAmIEUpID0+IHZvaWQpIHtcbiAgICAgICAgdGhpcy5fZXZlbnRFbWl0dGVyLmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBhbiBldmVudCBoYW5kbGVyLlxuICAgICAqIEBwYXJhbSB0eXBlIGV2ZW50IG5hbWVcbiAgICAgKiBAcGFyYW0gbGlzdGVuZXIgZXZlbnQgaGFuZGxlciBmdW5jdGlvblxuICAgICAqL1xuICAgIHB1YmxpYyByZW1vdmVFdmVudExpc3RlbmVyPFxuICAgICAgICBUIGV4dGVuZHMgUGl4ZWxTdHJlYW1pbmdFdmVudFsndHlwZSddLFxuICAgICAgICBFIGV4dGVuZHMgUGl4ZWxTdHJlYW1pbmdFdmVudCAmIHsgdHlwZTogVCB9XG4gICAgPih0eXBlOiBULCBsaXN0ZW5lcjogKGU6IEV2ZW50ICYgRSkgPT4gdm9pZCkge1xuICAgICAgICB0aGlzLl9ldmVudEVtaXR0ZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRW5hYmxlL2Rpc2FibGUgWFIgbW9kZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgdG9nZ2xlWFIoKSB7XG4gICAgICAgIHRoaXMud2ViWHJDb250cm9sbGVyLnhyQ2xpY2tlZCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBhc3MgaW4gYSBmdW5jdGlvbiB0byBnZW5lcmF0ZSBhIHNpZ25hbGxpbmcgc2VydmVyIFVSTC5cbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWZ1bCBpZiB5b3UgbmVlZCB0byBwcm9ncmFtbWF0aWNhbGx5IGNvbnN0cnVjdCB5b3VyIHNpZ25hbGxpbmcgc2VydmVyIFVSTC5cbiAgICAgKiBAcGFyYW0gc2lnbmFsbGluZ1VybEJ1aWxkZXJGdW5jIEEgZnVuY3Rpb24gdGhhdCBnZW5lcmF0ZXMgYSBzaWduYWxsaW5nIHNlcnZlciB1cmwuXG4gICAgICovXG4gICAgcHVibGljIHNldFNpZ25hbGxpbmdVcmxCdWlsZGVyKHNpZ25hbGxpbmdVcmxCdWlsZGVyRnVuYzogKCk9PnN0cmluZykge1xuICAgICAgICB0aGlzLl93ZWJSdGNDb250cm9sbGVyLnNpZ25hbGxpbmdVcmxCdWlsZGVyID0gc2lnbmFsbGluZ1VybEJ1aWxkZXJGdW5jO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFB1YmxpYyBnZXR0ZXIgZm9yIHRoZSB3ZWJzb2NrZXQgY29udHJvbGxlci4gQWNjZXNzIHRvIHRoaXMgcHJvcGVydHkgYWxsb3dzIHlvdSB0byBzZW5kXG4gICAgICogY3VzdG9tIHdlYnNvY2tldCBtZXNzYWdlcy5cbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0IHdlYlNvY2tldENvbnRyb2xsZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl93ZWJSdGNDb250cm9sbGVyLndlYlNvY2tldENvbnRyb2xsZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUHVibGljIGdldHRlciBmb3IgdGhlIHdlYlhyQ29udHJvbGxlciBjb250cm9sbGVyLiBVc2VkIGZvciBhbGwgWFIgZmVhdHVyZXMuXG4gICAgICovXG4gICAgcHVibGljIGdldCB3ZWJYckNvbnRyb2xsZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl93ZWJYckNvbnRyb2xsZXI7XG4gICAgfVxufVxuIiwiLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuaW1wb3J0IHsgVW5xdWFudGl6ZWREZW5vcm1hbGl6ZWRVbnNpZ25lZENvb3JkIH0gZnJvbSAnLi4vVXRpbC9Db29yZGluYXRlQ29udmVydGVyJztcbmltcG9ydCB7IE1lc3NhZ2VPblNjcmVlbktleWJvYXJkIH0gZnJvbSAnLi4vV2ViU29ja2V0cy9NZXNzYWdlUmVjZWl2ZSc7XG5cbi8qKlxuICogQ2xhc3MgZm9yIGhhbmRsaW5nIG9uIHNjcmVlbiBrZXlib2FyZCB1c2FnZVxuICovXG5leHBvcnQgY2xhc3MgT25TY3JlZW5LZXlib2FyZCB7XG4gICAgLy8gSWYgdGhlIHVzZXIgZm9jdXNlcyBvbiBhIFVFIGlucHV0IHdpZGdldCB0aGVuIHdlIHNob3cgdGhlbSBhIGJ1dHRvbiB0byBvcGVuXG4gICAgLy8gdGhlIG9uLXNjcmVlbiBrZXlib2FyZC4gSmF2YVNjcmlwdCBzZWN1cml0eSBtZWFucyB3ZSBjYW4gb25seSBzaG93IHRoZVxuICAgIC8vIG9uLXNjcmVlbiBrZXlib2FyZCBpbiByZXNwb25zZSB0byBhIHVzZXIgaW50ZXJhY3Rpb24uXG4gICAgZWRpdFRleHRCdXR0b246IEhUTUxCdXR0b25FbGVtZW50O1xuXG4gICAgLy8gQSBoaWRkZW4gaW5wdXQgdGV4dCBib3ggd2hpY2ggaXMgdXNlZCBvbmx5IGZvciBmb2N1c2luZyBhbmQgb3BlbmluZyB0aGVcbiAgICAvLyBvbi1zY3JlZW4ga2V5Ym9hcmQuXG4gICAgaGlkZGVuSW5wdXQ6IEhUTUxJbnB1dEVsZW1lbnQ7XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSB2aWRlb0VsZW1lbnRQYXJlbnQgVGhlIGRpdiBlbGVtZW50IHRoZSB2aWRlbyBwbGF5ZXIgaXMgaW5qZWN0ZWQgaW50b1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHZpZGVvRWxlbWVudFBhcmVudDogSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgdGhpcy5lZGl0VGV4dEJ1dHRvbiA9IG51bGw7XG4gICAgICAgIHRoaXMuaGlkZGVuSW5wdXQgPSBudWxsO1xuXG4gICAgICAgIGlmICgnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlT25TY3JlZW5LZXlib2FyZEhlbHBlcnModmlkZW9FbGVtZW50UGFyZW50KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFuIG92ZXJyaWRlIGZvciB1bnF1YW50aXplQW5kRGVub3JtYWxpemVVbnNpZ25lZFxuICAgICAqIEBwYXJhbSB4IHRoZSB4IGF4aXMgcG9pbnRcbiAgICAgKiBAcGFyYW0geSB0aGUgeSBheGlzIHBvaW50XG4gICAgICogQHJldHVybnMgdW5xdWFudGl6ZUFuZERlbm9ybWFsaXplVW5zaWduZWQgb2JqZWN0XG4gICAgICovXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuICAgIHVucXVhbnRpemVBbmREZW5vcm1hbGl6ZVVuc2lnbmVkKFxuICAgICAgICB4OiBudW1iZXIsXG4gICAgICAgIHk6IG51bWJlclxuICAgICk6IFVucXVhbnRpemVkRGVub3JtYWxpemVkVW5zaWduZWRDb29yZCB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgb24gc2NyZWVuIGtleWJvYXJkIGhlbHBlcnNcbiAgICAgKiBAcGFyYW0gdmlkZW9FbGVtZW50UGFyZW50IFRoZSBkaXYgZWxlbWVudCB0aGUgdmlkZW8gcGxheWVyIGkgaW5qZWN0ZWQgaW50b1xuICAgICAqL1xuICAgIGNyZWF0ZU9uU2NyZWVuS2V5Ym9hcmRIZWxwZXJzKHZpZGVvRWxlbWVudFBhcmVudDogSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmhpZGRlbklucHV0KSB7XG4gICAgICAgICAgICB0aGlzLmhpZGRlbklucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgICAgICAgICAgIHRoaXMuaGlkZGVuSW5wdXQuaWQgPSAnaGlkZGVuSW5wdXQnO1xuICAgICAgICAgICAgdGhpcy5oaWRkZW5JbnB1dC5tYXhMZW5ndGggPSAwO1xuICAgICAgICAgICAgdmlkZW9FbGVtZW50UGFyZW50LmFwcGVuZENoaWxkKHRoaXMuaGlkZGVuSW5wdXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLmVkaXRUZXh0QnV0dG9uKSB7XG4gICAgICAgICAgICB0aGlzLmVkaXRUZXh0QnV0dG9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XG4gICAgICAgICAgICB0aGlzLmVkaXRUZXh0QnV0dG9uLmlkID0gJ2VkaXRUZXh0QnV0dG9uJztcbiAgICAgICAgICAgIHRoaXMuZWRpdFRleHRCdXR0b24uaW5uZXJIVE1MID0gJ2VkaXQgdGV4dCc7XG4gICAgICAgICAgICB2aWRlb0VsZW1lbnRQYXJlbnQuYXBwZW5kQ2hpbGQodGhpcy5lZGl0VGV4dEJ1dHRvbik7XG5cbiAgICAgICAgICAgIC8vIEhpZGUgdGhlICdlZGl0IHRleHQnIGJ1dHRvbi5cbiAgICAgICAgICAgIHRoaXMuZWRpdFRleHRCdXR0b24uY2xhc3NMaXN0LmFkZCgnaGlkZGVuU3RhdGUnKTtcblxuICAgICAgICAgICAgdGhpcy5lZGl0VGV4dEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIChldmVudDogRXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAvLyBTaG93IHRoZSBvbi1zY3JlZW4ga2V5Ym9hcmQuXG4gICAgICAgICAgICAgICAgdGhpcy5oaWRkZW5JbnB1dC5mb2N1cygpO1xuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNob3dzIHRoZSBvbiBzY3JlZW4ga2V5Ym9hcmRcbiAgICAgKiBAcGFyYW0gY29tbWFuZCB0aGUgY29tbWFuZCByZWNlaXZlZCB2aWEgdGhlIGRhdGEgY2hhbm5lbCBjb250YWluaW5nIGtleWJvYXJkIHBvc2l0aW9uc1xuICAgICAqL1xuICAgIHNob3dPblNjcmVlbktleWJvYXJkKGNvbW1hbmQ6IE1lc3NhZ2VPblNjcmVlbktleWJvYXJkKSB7XG4gICAgICAgIGlmIChjb21tYW5kLnNob3dPblNjcmVlbktleWJvYXJkKSB7XG4gICAgICAgICAgICAvLyBTaG93IHRoZSAnZWRpdCB0ZXh0JyBidXR0b24uXG4gICAgICAgICAgICB0aGlzLmVkaXRUZXh0QnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlblN0YXRlJyk7XG4gICAgICAgICAgICAvLyBQbGFjZSB0aGUgJ2VkaXQgdGV4dCcgYnV0dG9uIG5lYXIgdGhlIFVFIGlucHV0IHdpZGdldC5cbiAgICAgICAgICAgIGNvbnN0IHBvcyA9IHRoaXMudW5xdWFudGl6ZUFuZERlbm9ybWFsaXplVW5zaWduZWQoXG4gICAgICAgICAgICAgICAgY29tbWFuZC54LFxuICAgICAgICAgICAgICAgIGNvbW1hbmQueVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMuZWRpdFRleHRCdXR0b24uc3R5bGUudG9wID0gcG9zLnkudG9TdHJpbmcoKSArICdweCc7XG4gICAgICAgICAgICB0aGlzLmVkaXRUZXh0QnV0dG9uLnN0eWxlLmxlZnQgPSAocG9zLnggLSA0MCkudG9TdHJpbmcoKSArICdweCc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBIaWRlIHRoZSAnZWRpdCB0ZXh0JyBidXR0b24uXG4gICAgICAgICAgICB0aGlzLmVkaXRUZXh0QnV0dG9uLmNsYXNzTGlzdC5hZGQoJ2hpZGRlblN0YXRlJyk7XG4gICAgICAgICAgICAvLyBIaWRlIHRoZSBvbi1zY3JlZW4ga2V5Ym9hcmQuXG4gICAgICAgICAgICB0aGlzLmhpZGRlbklucHV0LmJsdXIoKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIi8vIENvcHlyaWdodCBFcGljIEdhbWVzLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG5cbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJy4uL0xvZ2dlci9Mb2dnZXInO1xuXG5leHBvcnQgY2xhc3MgUmVzcG9uc2VDb250cm9sbGVyIHtcbiAgICByZXNwb25zZUV2ZW50TGlzdGVuZXJzOiBNYXA8c3RyaW5nLCAocmVzcG9uc2U6IHN0cmluZykgPT4gdm9pZD4gPSBuZXcgTWFwKCk7XG5cbiAgICAvKipcbiAgICAgKiBBZGQgYSByZXNwb25zZSBldmVudCBsaXN0ZW5lciB0byB0aGUgcmVzcG9uc2UgbWFwXG4gICAgICogQHBhcmFtIG5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgcmVzcG9uc2VcbiAgICAgKiBAcGFyYW0gbGlzdGVuZXIgLSBUaGUgbWV0aG9kIHRvIGJlIGFjdGl2YXRlZCB3aGVuIHRoZSByZXNwb25zZSBpcyBzZWxlY3RlZFxuICAgICAqL1xuICAgIGFkZFJlc3BvbnNlRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgbmFtZTogc3RyaW5nLFxuICAgICAgICBsaXN0ZW5lcjogKHJlc3BvbnNlOiBzdHJpbmcpID0+IHZvaWRcbiAgICApIHtcbiAgICAgICAgdGhpcy5yZXNwb25zZUV2ZW50TGlzdGVuZXJzLnNldChuYW1lLCBsaXN0ZW5lcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGEgcmVzcG9uc2UgZXZlbnQgbGlzdGVuZXIgdG8gdGhlIHJlc3BvbnNlIG1hcFxuICAgICAqIEBwYXJhbSBuYW1lIC0gVGhlIG5hbWUgb2YgdGhlIHJlc3BvbnNlXG4gICAgICovXG4gICAgcmVtb3ZlUmVzcG9uc2VFdmVudExpc3RlbmVyKG5hbWU6IHN0cmluZykge1xuICAgICAgICB0aGlzLnJlc3BvbnNlRXZlbnRMaXN0ZW5lcnMuZGVsZXRlKG5hbWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhhbmRsZSBhIHJlc3BvbnNlIHdoZW4gcmVjZWl2aW5nIG9uZSBmb3JtIHRoZSBzdHJlYW1lclxuICAgICAqIEBwYXJhbSBtZXNzYWdlIC0gRGF0YSByZWNlaXZlZCBmcm9tIHRoZSBkYXRhIGNoYW5uZWwgd2l0aCB0aGUgY29tbWFuZCBpbiBxdWVzdGlvblxuICAgICAqL1xuICAgIG9uUmVzcG9uc2UobWVzc2FnZTogQXJyYXlCdWZmZXIpIHtcbiAgICAgICAgTG9nZ2VyLkxvZyhcbiAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXG4gICAgICAgICAgICAnRGF0YUNoYW5uZWxSZWNlaXZlTWVzc2FnZVR5cGUuUmVzcG9uc2UnLFxuICAgICAgICAgICAgNlxuICAgICAgICApO1xuICAgICAgICBjb25zdCByZXNwb25zZXMgPSBuZXcgVGV4dERlY29kZXIoJ3V0Zi0xNicpLmRlY29kZShtZXNzYWdlLnNsaWNlKDEpKTtcblxuICAgICAgICBMb2dnZXIuTG9nKExvZ2dlci5HZXRTdGFja1RyYWNlKCksIHJlc3BvbnNlcywgNik7XG4gICAgICAgIHRoaXMucmVzcG9uc2VFdmVudExpc3RlbmVycy5mb3JFYWNoKFxuICAgICAgICAgICAgKGxpc3RlbmVyOiAocmVzcG9uc2U6IHN0cmluZykgPT4gdm9pZCkgPT4ge1xuICAgICAgICAgICAgICAgIGxpc3RlbmVyKHJlc3BvbnNlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxufVxuIiwiLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuaW1wb3J0IHsgRGF0YUNoYW5uZWxTZW5kZXIgfSBmcm9tICcuLi9EYXRhQ2hhbm5lbC9EYXRhQ2hhbm5lbFNlbmRlcic7XG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tICcuLi9Mb2dnZXIvTG9nZ2VyJztcbmltcG9ydCB7IFN0cmVhbU1lc3NhZ2VDb250cm9sbGVyIH0gZnJvbSAnLi9TdHJlYW1NZXNzYWdlQ29udHJvbGxlcic7XG5cbmV4cG9ydCBjbGFzcyBTZW5kRGVzY3JpcHRvckNvbnRyb2xsZXIge1xuICAgIHRvU3RyZWFtZXJNZXNzYWdlc01hcFByb3ZpZGVyOiBTdHJlYW1NZXNzYWdlQ29udHJvbGxlcjtcbiAgICBkYXRhQ2hhbm5lbFNlbmRlcjogRGF0YUNoYW5uZWxTZW5kZXI7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgZGF0YUNoYW5uZWxTZW5kZXI6IERhdGFDaGFubmVsU2VuZGVyLFxuICAgICAgICB0b1N0cmVhbWVyTWVzc2FnZXNNYXBQcm92aWRlcjogU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXJcbiAgICApIHtcbiAgICAgICAgdGhpcy5kYXRhQ2hhbm5lbFNlbmRlciA9IGRhdGFDaGFubmVsU2VuZGVyO1xuICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlc01hcFByb3ZpZGVyID0gdG9TdHJlYW1lck1lc3NhZ2VzTWFwUHJvdmlkZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2VuZCBhIExhdGVuY3kgVGVzdCB0byB0aGUgVUUgSW5zdGFuY2VcbiAgICAgKiBAcGFyYW0gZGVzY3JpcHRvciAtIHRoZSBkZXNjcmlwdG9yIGZvciBhIGxhdGVuY3kgdGVzdFxuICAgICAqL1xuICAgIHNlbmRMYXRlbmN5VGVzdChkZXNjcmlwdG9yOiBvYmplY3QpIHtcbiAgICAgICAgdGhpcy5zZW5kRGVzY3JpcHRvcignTGF0ZW5jeVRlc3QnLCBkZXNjcmlwdG9yKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZW5kIGEgTGF0ZW5jeSBUZXN0IHRvIHRoZSBVRSBJbnN0YW5jZVxuICAgICAqIEBwYXJhbSBkZXNjcmlwdG9yIC0gdGhlIGRlc2NyaXB0b3IgZm9yIGEgY29tbWFuZFxuICAgICAqL1xuICAgIGVtaXRDb21tYW5kKGRlc2NyaXB0b3I6IG9iamVjdCkge1xuICAgICAgICB0aGlzLnNlbmREZXNjcmlwdG9yKCdDb21tYW5kJywgZGVzY3JpcHRvcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2VuZCBhIExhdGVuY3kgVGVzdCB0byB0aGUgVUUgSW5zdGFuY2VcbiAgICAgKiBAcGFyYW0gZGVzY3JpcHRvciAtIHRoZSBkZXNjcmlwdG9yIGZvciBhIFVJIEludGVyYWN0aW9uXG4gICAgICovXG4gICAgZW1pdFVJSW50ZXJhY3Rpb24oZGVzY3JpcHRvcjogb2JqZWN0IHwgc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuc2VuZERlc2NyaXB0b3IoJ1VJSW50ZXJhY3Rpb24nLCBkZXNjcmlwdG9yKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZW5kIGEgRGVzY3JpcHRvciB0byB0aGUgVUUgSW5zdGFuY2VzXG4gICAgICogQHBhcmFtIG1lc3NhZ2VUeXBlIC0gVUUgTWVzc2FnZSBUeXBlXG4gICAgICogQHBhcmFtIGRlc2NyaXB0b3IgLSBEZXNjcmlwdG9yIE1lc3NhZ2UgYXMgSlNPTlxuICAgICAqL1xuICAgIHNlbmREZXNjcmlwdG9yKG1lc3NhZ2VUeXBlOiBzdHJpbmcsIGRlc2NyaXB0b3I6IG9iamVjdCB8IHN0cmluZykge1xuICAgICAgICAvLyBDb252ZXJ0IHRoZSBkZXNjcmlwdG9yIG9iamVjdCBpbnRvIGEgSlNPTiBzdHJpbmcuXG4gICAgICAgIGNvbnN0IGRlc2NyaXB0b3JBc1N0cmluZyA9IEpTT04uc3RyaW5naWZ5KGRlc2NyaXB0b3IpO1xuICAgICAgICBjb25zdCB0b1N0cmVhbWVyTWVzc2FnZXMgPVxuICAgICAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXNNYXBQcm92aWRlci50b1N0cmVhbWVyTWVzc2FnZXM7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2VGb3JtYXQgPSB0b1N0cmVhbWVyTWVzc2FnZXMuZ2V0RnJvbUtleShtZXNzYWdlVHlwZSk7XG4gICAgICAgIGlmIChtZXNzYWdlRm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIExvZ2dlci5FcnJvcihcbiAgICAgICAgICAgICAgICBMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLFxuICAgICAgICAgICAgICAgIGBBdHRlbXB0ZWQgdG8gZW1pdCBkZXNjcmlwdG9yIHdpdGggbWVzc2FnZSB0eXBlOiAke21lc3NhZ2VUeXBlfSwgYnV0IHRoZSBmcm9udGVuZCBoYXNuJ3QgYmVlbiBjb25maWd1cmVkIHRvIHNlbmQgc3VjaCBhIG1lc3NhZ2UuIENoZWNrIHlvdSd2ZSBhZGRlZCB0aGUgbWVzc2FnZSB0eXBlIGluIHlvdXIgY3BwYFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIExvZ2dlci5Mb2coTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ1NlbmRpbmc6ICcgKyBkZXNjcmlwdG9yLCA2KTtcbiAgICAgICAgLy8gQWRkIHRoZSBVVEYtMTYgSlNPTiBzdHJpbmcgdG8gdGhlIGFycmF5IGJ5dGUgYnVmZmVyLCBnb2luZyB0d28gYnl0ZXMgYXRcbiAgICAgICAgLy8gYSB0aW1lLlxuICAgICAgICBjb25zdCBkYXRhID0gbmV3IERhdGFWaWV3KFxuICAgICAgICAgICAgbmV3IEFycmF5QnVmZmVyKDEgKyAyICsgMiAqIGRlc2NyaXB0b3JBc1N0cmluZy5sZW5ndGgpXG4gICAgICAgICk7XG4gICAgICAgIGxldCBieXRlSWR4ID0gMDtcbiAgICAgICAgZGF0YS5zZXRVaW50OChieXRlSWR4LCBtZXNzYWdlRm9ybWF0LmlkKTtcbiAgICAgICAgYnl0ZUlkeCsrO1xuICAgICAgICBkYXRhLnNldFVpbnQxNihieXRlSWR4LCBkZXNjcmlwdG9yQXNTdHJpbmcubGVuZ3RoLCB0cnVlKTtcbiAgICAgICAgYnl0ZUlkeCArPSAyO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRlc2NyaXB0b3JBc1N0cmluZy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgZGF0YS5zZXRVaW50MTYoYnl0ZUlkeCwgZGVzY3JpcHRvckFzU3RyaW5nLmNoYXJDb2RlQXQoaSksIHRydWUpO1xuICAgICAgICAgICAgYnl0ZUlkeCArPSAyO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLmRhdGFDaGFubmVsU2VuZGVyLmNhblNlbmQoKSkge1xuICAgICAgICAgICAgTG9nZ2VyLkluZm8oXG4gICAgICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcbiAgICAgICAgICAgICAgICBgRGF0YSBjaGFubmVsIGNhbm5vdCBzZW5kIHlldCwgc2tpcHBpbmcgc2VuZGluZyBkZXNjcmlwdG9yIG1lc3NhZ2U6ICR7bWVzc2FnZVR5cGV9IC0gJHtkZXNjcmlwdG9yQXNTdHJpbmd9YFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZGF0YUNoYW5uZWxTZW5kZXIuc2VuZERhdGEoZGF0YS5idWZmZXIpO1xuICAgIH1cbn1cbiIsIi8vIENvcHlyaWdodCBFcGljIEdhbWVzLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG5cbmltcG9ydCB7IERhdGFDaGFubmVsU2VuZGVyIH0gZnJvbSAnLi4vRGF0YUNoYW5uZWwvRGF0YUNoYW5uZWxTZW5kZXInO1xuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSAnLi4vTG9nZ2VyL0xvZ2dlcic7XG5pbXBvcnQgeyBTdHJlYW1NZXNzYWdlQ29udHJvbGxlciB9IGZyb20gJy4vU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXInO1xuXG5leHBvcnQgY2xhc3MgU2VuZE1lc3NhZ2VDb250cm9sbGVyIHtcbiAgICB0b1N0cmVhbWVyTWVzc2FnZXNNYXBQcm92aWRlcjogU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXI7XG4gICAgZGF0YUNoYW5uZWxTZW5kZXI6IERhdGFDaGFubmVsU2VuZGVyO1xuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIGRhdGFDaGFubmVsU2VuZGVyIC0gRGF0YSBjaGFubmVsIGluc3RhbmNlXG4gICAgICogQHBhcmFtIHRvU3RyZWFtZXJNZXNzYWdlc01hcFByb3ZpZGVyIC0gU3RyZWFtIE1lc3NhZ2VzIGluc3RhbmNlXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIGRhdGFDaGFubmVsU2VuZGVyOiBEYXRhQ2hhbm5lbFNlbmRlcixcbiAgICAgICAgdG9TdHJlYW1lck1lc3NhZ2VzTWFwUHJvdmlkZXI6IFN0cmVhbU1lc3NhZ2VDb250cm9sbGVyXG4gICAgKSB7XG4gICAgICAgIHRoaXMuZGF0YUNoYW5uZWxTZW5kZXIgPSBkYXRhQ2hhbm5lbFNlbmRlcjtcbiAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXNNYXBQcm92aWRlciA9IHRvU3RyZWFtZXJNZXNzYWdlc01hcFByb3ZpZGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNlbmQgYSBtZXNzYWdlIHRvIHRoZSBzdHJlYW1lciB0aHJvdWdoIHRoZSBkYXRhIGNoYW5uZWxcbiAgICAgKiBAcGFyYW0gbWVzc2FnZVR5cGUgLSB0aGUgdHlwZSBvZiBtZXNzYWdlIHdlIGFyZSBzZW5kaW5nXG4gICAgICogQHBhcmFtIG1lc3NhZ2VEYXRhIC0gdGhlIG1lc3NhZ2UgZGF0YSB3ZSBhcmUgc2VuZGluZyBvdmVyIHRoZSBkYXRhIGNoYW5uZWxcbiAgICAgKiBAcmV0dXJucyAtIG5pbFxuICAgICAqL1xuICAgIHNlbmRNZXNzYWdlVG9TdHJlYW1lcihtZXNzYWdlVHlwZTogc3RyaW5nLCBtZXNzYWdlRGF0YT86IEFycmF5PG51bWJlcj4pIHtcbiAgICAgICAgaWYgKG1lc3NhZ2VEYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG1lc3NhZ2VEYXRhID0gW107XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB0b1N0cmVhbWVyTWVzc2FnZXMgPVxuICAgICAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXNNYXBQcm92aWRlci50b1N0cmVhbWVyTWVzc2FnZXM7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2VGb3JtYXQgPSB0b1N0cmVhbWVyTWVzc2FnZXMuZ2V0RnJvbUtleShtZXNzYWdlVHlwZSk7XG4gICAgICAgIGlmIChtZXNzYWdlRm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIExvZ2dlci5FcnJvcihcbiAgICAgICAgICAgICAgICBMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLFxuICAgICAgICAgICAgICAgIGBBdHRlbXB0ZWQgdG8gc2VuZCBhIG1lc3NhZ2UgdG8gdGhlIHN0cmVhbWVyIHdpdGggbWVzc2FnZSB0eXBlOiAke21lc3NhZ2VUeXBlfSwgYnV0IHRoZSBmcm9udGVuZCBoYXNuJ3QgYmVlbiBjb25maWd1cmVkIHRvIHNlbmQgc3VjaCBhIG1lc3NhZ2UuIENoZWNrIHlvdSd2ZSBhZGRlZCB0aGUgbWVzc2FnZSB0eXBlIGluIHlvdXIgY3BwYFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGRhdGEgPSBuZXcgRGF0YVZpZXcoXG4gICAgICAgICAgICBuZXcgQXJyYXlCdWZmZXIobWVzc2FnZUZvcm1hdC5ieXRlTGVuZ3RoICsgMSlcbiAgICAgICAgKTtcbiAgICAgICAgZGF0YS5zZXRVaW50OCgwLCBtZXNzYWdlRm9ybWF0LmlkKTtcbiAgICAgICAgbGV0IGJ5dGVPZmZzZXQgPSAxO1xuXG4gICAgICAgIG1lc3NhZ2VEYXRhLmZvckVhY2goKGVsZW1lbnQ6IG51bWJlciwgaWR4OiBudW1iZXIpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHR5cGUgPSBtZXNzYWdlRm9ybWF0LnN0cnVjdHVyZVtpZHhdO1xuICAgICAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAndWludDgnOlxuICAgICAgICAgICAgICAgICAgICBkYXRhLnNldFVpbnQ4KGJ5dGVPZmZzZXQsIGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICBieXRlT2Zmc2V0ICs9IDE7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAndWludDE2JzpcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5zZXRVaW50MTYoYnl0ZU9mZnNldCwgZWxlbWVudCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGJ5dGVPZmZzZXQgKz0gMjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlICdpbnQxNic6XG4gICAgICAgICAgICAgICAgICAgIGRhdGEuc2V0SW50MTYoYnl0ZU9mZnNldCwgZWxlbWVudCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGJ5dGVPZmZzZXQgKz0gMjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlICdmbG9hdCc6XG4gICAgICAgICAgICAgICAgICAgIGRhdGEuc2V0RmxvYXQzMihieXRlT2Zmc2V0LCBlbGVtZW50LCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgYnl0ZU9mZnNldCArPSA0O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgJ2RvdWJsZSc6XG4gICAgICAgICAgICAgICAgICAgIGRhdGEuc2V0RmxvYXQ2NChieXRlT2Zmc2V0LCBlbGVtZW50LCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgYnl0ZU9mZnNldCArPSA4O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKCF0aGlzLmRhdGFDaGFubmVsU2VuZGVyLmNhblNlbmQoKSkge1xuICAgICAgICAgICAgTG9nZ2VyLkluZm8oXG4gICAgICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcbiAgICAgICAgICAgICAgICBgRGF0YSBjaGFubmVsIGNhbm5vdCBzZW5kIHlldCwgc2tpcHBpbmcgc2VuZGluZyBtZXNzYWdlOiAke21lc3NhZ2VUeXBlfSAtICR7bmV3IFVpbnQ4QXJyYXkoXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuYnVmZmVyXG4gICAgICAgICAgICAgICAgKX1gXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5kYXRhQ2hhbm5lbFNlbmRlci5zZW5kRGF0YShkYXRhLmJ1ZmZlcik7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCIvLyBDb3B5cmlnaHQgRXBpYyBHYW1lcywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXG5pbXBvcnQgeyBUd29XYXlNYXAgfSBmcm9tICcuL1R3b1dheU1hcCc7XG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tICcuLi9Mb2dnZXIvTG9nZ2VyJztcblxuZXhwb3J0IGNsYXNzIFRvU3RyZWFtZXJNZXNzYWdlIHtcbiAgICBpZDogbnVtYmVyO1xuICAgIGJ5dGVMZW5ndGg6IG51bWJlcjtcbiAgICBzdHJ1Y3R1cmU/OiBBcnJheTxzdHJpbmc+O1xufVxuXG5leHBvcnQgY2xhc3MgU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIge1xuICAgIHRvU3RyZWFtZXJIYW5kbGVyczogTWFwPFxuICAgICAgICBzdHJpbmcsXG4gICAgICAgIChtZXNzYWdlRGF0YT86IEFycmF5PG51bWJlcj4gfCB1bmRlZmluZWQpID0+IHZvaWRcbiAgICA+O1xuICAgIGZyb21TdHJlYW1lckhhbmRsZXJzOiBNYXA8XG4gICAgICAgIHN0cmluZyxcbiAgICAgICAgKG1lc3NhZ2VUeXBlOiBzdHJpbmcsIG1lc3NhZ2VEYXRhPzogQXJyYXlCdWZmZXIgfCB1bmRlZmluZWQpID0+IHZvaWRcbiAgICA+O1xuICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVHlwZSAgICAgIEZvcm1hdFxuICAgIHRvU3RyZWFtZXJNZXNzYWdlczogVHdvV2F5TWFwPHN0cmluZywgVG9TdHJlYW1lck1lc3NhZ2U+O1xuICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVHlwZSAgICAgSURcbiAgICBmcm9tU3RyZWFtZXJNZXNzYWdlczogVHdvV2F5TWFwPHN0cmluZywgbnVtYmVyPjtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnRvU3RyZWFtZXJIYW5kbGVycyA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy5mcm9tU3RyZWFtZXJIYW5kbGVycyA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXMgPSBuZXcgVHdvV2F5TWFwKCk7XG4gICAgICAgIHRoaXMuZnJvbVN0cmVhbWVyTWVzc2FnZXMgPSBuZXcgVHdvV2F5TWFwKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUG9wdWxhdGUgdGhlIERlZmF1bHQgbWVzc2FnZSBwcm90b2NvbFxuICAgICAqL1xuICAgIHBvcHVsYXRlRGVmYXVsdFByb3RvY29sKCkge1xuICAgICAgICAvKlxuICAgICAgICAgKiBDb250cm9sIE1lc3NhZ2VzLiBSYW5nZSA9IDAuLjQ5LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXMuYWRkKCdJRnJhbWVSZXF1ZXN0Jywge1xuICAgICAgICAgICAgaWQ6IDAsXG4gICAgICAgICAgICBieXRlTGVuZ3RoOiAwLFxuICAgICAgICAgICAgc3RydWN0dXJlOiBbXVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXMuYWRkKCdSZXF1ZXN0UXVhbGl0eUNvbnRyb2wnLCB7XG4gICAgICAgICAgICBpZDogMSxcbiAgICAgICAgICAgIGJ5dGVMZW5ndGg6IDAsXG4gICAgICAgICAgICBzdHJ1Y3R1cmU6IFtdXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlcy5hZGQoJ0Zwc1JlcXVlc3QnLCB7XG4gICAgICAgICAgICBpZDogMixcbiAgICAgICAgICAgIGJ5dGVMZW5ndGg6IDAsXG4gICAgICAgICAgICBzdHJ1Y3R1cmU6IFtdXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlcy5hZGQoJ0F2ZXJhZ2VCaXRyYXRlUmVxdWVzdCcsIHtcbiAgICAgICAgICAgIGlkOiAzLFxuICAgICAgICAgICAgYnl0ZUxlbmd0aDogMCxcbiAgICAgICAgICAgIHN0cnVjdHVyZTogW11cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzLmFkZCgnU3RhcnRTdHJlYW1pbmcnLCB7XG4gICAgICAgICAgICBpZDogNCxcbiAgICAgICAgICAgIGJ5dGVMZW5ndGg6IDAsXG4gICAgICAgICAgICBzdHJ1Y3R1cmU6IFtdXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlcy5hZGQoJ1N0b3BTdHJlYW1pbmcnLCB7XG4gICAgICAgICAgICBpZDogNSxcbiAgICAgICAgICAgIGJ5dGVMZW5ndGg6IDAsXG4gICAgICAgICAgICBzdHJ1Y3R1cmU6IFtdXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlcy5hZGQoJ0xhdGVuY3lUZXN0Jywge1xuICAgICAgICAgICAgaWQ6IDYsXG4gICAgICAgICAgICBieXRlTGVuZ3RoOiAwLFxuICAgICAgICAgICAgc3RydWN0dXJlOiBbXVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXMuYWRkKCdSZXF1ZXN0SW5pdGlhbFNldHRpbmdzJywge1xuICAgICAgICAgICAgaWQ6IDcsXG4gICAgICAgICAgICBieXRlTGVuZ3RoOiAwLFxuICAgICAgICAgICAgc3RydWN0dXJlOiBbXVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXMuYWRkKCdUZXN0RWNobycsIHtcbiAgICAgICAgICAgIGlkOiA4LFxuICAgICAgICAgICAgYnl0ZUxlbmd0aDogMCxcbiAgICAgICAgICAgIHN0cnVjdHVyZTogW11cbiAgICAgICAgfSk7XG4gICAgICAgIC8qXG4gICAgICAgICAqIElucHV0IE1lc3NhZ2VzLiBSYW5nZSA9IDUwLi44OS5cbiAgICAgICAgICovXG4gICAgICAgIC8vIEdlbmVyaWMgSW5wdXQgTWVzc2FnZXMuIFJhbmdlID0gNTAuLjU5LlxuICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlcy5hZGQoJ1VJSW50ZXJhY3Rpb24nLCB7XG4gICAgICAgICAgICBpZDogNTAsXG4gICAgICAgICAgICBieXRlTGVuZ3RoOiAwLFxuICAgICAgICAgICAgc3RydWN0dXJlOiBbXVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXMuYWRkKCdDb21tYW5kJywge1xuICAgICAgICAgICAgaWQ6IDUxLFxuICAgICAgICAgICAgYnl0ZUxlbmd0aDogMCxcbiAgICAgICAgICAgIHN0cnVjdHVyZTogW11cbiAgICAgICAgfSk7XG4gICAgICAgIC8vIEtleWJvYXJkIElucHV0IE1lc3NhZ2UuIFJhbmdlID0gNjAuLjY5LlxuICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlcy5hZGQoJ0tleURvd24nLCB7XG4gICAgICAgICAgICBpZDogNjAsXG4gICAgICAgICAgICBieXRlTGVuZ3RoOiAyLFxuICAgICAgICAgICAgLy8gICAgICAgICAgICBrZXlDb2RlICBpc1JlcGVhdFxuICAgICAgICAgICAgc3RydWN0dXJlOiBbJ3VpbnQ4JywgJ3VpbnQ4J11cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzLmFkZCgnS2V5VXAnLCB7XG4gICAgICAgICAgICBpZDogNjEsXG4gICAgICAgICAgICBieXRlTGVuZ3RoOiAxLFxuICAgICAgICAgICAgLy8gICAgICAgICAgICBrZXlDb2RlXG4gICAgICAgICAgICBzdHJ1Y3R1cmU6IFsndWludDgnXVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXMuYWRkKCdLZXlQcmVzcycsIHtcbiAgICAgICAgICAgIGlkOiA2MixcbiAgICAgICAgICAgIGJ5dGVMZW5ndGg6IDIsXG4gICAgICAgICAgICAvLyAgICAgICAgICAgIGNoYXJjb2RlXG4gICAgICAgICAgICBzdHJ1Y3R1cmU6IFsndWludDE2J11cbiAgICAgICAgfSk7XG4gICAgICAgIC8vIE1vdXNlIElucHV0IE1lc3NhZ2VzLiBSYW5nZSA9IDcwLi43OS5cbiAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXMuYWRkKCdNb3VzZUVudGVyJywge1xuICAgICAgICAgICAgaWQ6IDcwLFxuICAgICAgICAgICAgYnl0ZUxlbmd0aDogMCxcbiAgICAgICAgICAgIHN0cnVjdHVyZTogW11cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzLmFkZCgnTW91c2VMZWF2ZScsIHtcbiAgICAgICAgICAgIGlkOiA3MSxcbiAgICAgICAgICAgIGJ5dGVMZW5ndGg6IDAsXG4gICAgICAgICAgICBzdHJ1Y3R1cmU6IFtdXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlcy5hZGQoJ01vdXNlRG93bicsIHtcbiAgICAgICAgICAgIGlkOiA3MixcbiAgICAgICAgICAgIGJ5dGVMZW5ndGg6IDUsXG4gICAgICAgICAgICAvLyAgICAgICAgICAgICAgYnV0dG9uICAgICB4ICAgICAgICAgeVxuICAgICAgICAgICAgc3RydWN0dXJlOiBbJ3VpbnQ4JywgJ3VpbnQxNicsICd1aW50MTYnXVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXMuYWRkKCdNb3VzZVVwJywge1xuICAgICAgICAgICAgaWQ6IDczLFxuICAgICAgICAgICAgYnl0ZUxlbmd0aDogNSxcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgICBidXR0b24gICAgIHggICAgICAgICB5XG4gICAgICAgICAgICBzdHJ1Y3R1cmU6IFsndWludDgnLCAndWludDE2JywgJ3VpbnQxNiddXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlcy5hZGQoJ01vdXNlTW92ZScsIHtcbiAgICAgICAgICAgIGlkOiA3NCxcbiAgICAgICAgICAgIGJ5dGVMZW5ndGg6IDgsXG4gICAgICAgICAgICAvLyAgICAgICAgICAgICAgeCAgICAgICAgICAgeSAgICAgIGRlbHRhWCAgICBkZWx0YVlcbiAgICAgICAgICAgIHN0cnVjdHVyZTogWyd1aW50MTYnLCAndWludDE2JywgJ2ludDE2JywgJ2ludDE2J11cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzLmFkZCgnTW91c2VXaGVlbCcsIHtcbiAgICAgICAgICAgIGlkOiA3NSxcbiAgICAgICAgICAgIGJ5dGVMZW5ndGg6IDYsXG4gICAgICAgICAgICAvLyAgICAgICAgICAgICAgZGVsdGEgICAgICAgeCAgICAgICAgeVxuICAgICAgICAgICAgc3RydWN0dXJlOiBbJ2ludDE2JywgJ3VpbnQxNicsICd1aW50MTYnXVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXMuYWRkKCdNb3VzZURvdWJsZScsIHtcbiAgICAgICAgICAgIGlkOiA3NixcbiAgICAgICAgICAgIGJ5dGVMZW5ndGg6IDUsXG4gICAgICAgICAgICAvLyAgICAgICAgICAgICAgYnV0dG9uICAgICB4ICAgICAgICAgeVxuICAgICAgICAgICAgc3RydWN0dXJlOiBbJ3VpbnQ4JywgJ3VpbnQxNicsICd1aW50MTYnXVxuICAgICAgICB9KTtcbiAgICAgICAgLy8gVG91Y2ggSW5wdXQgTWVzc2FnZXMuIFJhbmdlID0gODAuLjg5LlxuICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlcy5hZGQoJ1RvdWNoU3RhcnQnLCB7XG4gICAgICAgICAgICBpZDogODAsXG4gICAgICAgICAgICBieXRlTGVuZ3RoOiA4LFxuICAgICAgICAgICAgLy8gICAgICAgICAgbnVtdG91Y2hlcygxKSAgIHggICAgICAgeSAgICAgICAgaWR4ICAgICBmb3JjZSAgICAgdmFsaWRcbiAgICAgICAgICAgIHN0cnVjdHVyZTogWyd1aW50OCcsICd1aW50MTYnLCAndWludDE2JywgJ3VpbnQ4JywgJ3VpbnQ4JywgJ3VpbnQ4J11cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzLmFkZCgnVG91Y2hFbmQnLCB7XG4gICAgICAgICAgICBpZDogODEsXG4gICAgICAgICAgICBieXRlTGVuZ3RoOiA4LFxuICAgICAgICAgICAgLy8gICAgICAgICAgbnVtdG91Y2hlcygxKSAgIHggICAgICAgeSAgICAgICAgaWR4ICAgICBmb3JjZSAgICAgdmFsaWRcbiAgICAgICAgICAgIHN0cnVjdHVyZTogWyd1aW50OCcsICd1aW50MTYnLCAndWludDE2JywgJ3VpbnQ4JywgJ3VpbnQ4JywgJ3VpbnQ4J11cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzLmFkZCgnVG91Y2hNb3ZlJywge1xuICAgICAgICAgICAgaWQ6IDgyLFxuICAgICAgICAgICAgYnl0ZUxlbmd0aDogOCxcbiAgICAgICAgICAgIC8vICAgICAgICAgIG51bXRvdWNoZXMoMSkgICB4ICAgICAgIHkgICAgICAgaWR4ICAgICAgZm9yY2UgICAgIHZhbGlkXG4gICAgICAgICAgICBzdHJ1Y3R1cmU6IFsndWludDgnLCAndWludDE2JywgJ3VpbnQxNicsICd1aW50OCcsICd1aW50OCcsICd1aW50OCddXG4gICAgICAgIH0pO1xuICAgICAgICAvLyBHYW1lcGFkIElucHV0IE1lc3NhZ2VzLiBSYW5nZSA9IDkwLi45OVxuICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlcy5hZGQoJ0dhbWVwYWRDb25uZWN0ZWQnLCB7XG4gICAgICAgICAgICBpZDogOTMsXG4gICAgICAgICAgICBieXRlTGVuZ3RoOiAwLFxuICAgICAgICAgICAgc3RydWN0dXJlOiBbXVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXMuYWRkKCdHYW1lcGFkQnV0dG9uUHJlc3NlZCcsIHtcbiAgICAgICAgICAgIGlkOiA5MCxcbiAgICAgICAgICAgIGJ5dGVMZW5ndGg6IDMsXG4gICAgICAgICAgICAvLyAgICAgICAgICAgIGN0cmxlcklkICAgYnV0dG9uICBpc1JlcGVhdFxuICAgICAgICAgICAgc3RydWN0dXJlOiBbJ3VpbnQ4JywgJ3VpbnQ4JywgJ3VpbnQ4J11cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzLmFkZCgnR2FtZXBhZEJ1dHRvblJlbGVhc2VkJywge1xuICAgICAgICAgICAgaWQ6IDkxLFxuICAgICAgICAgICAgYnl0ZUxlbmd0aDogMyxcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgY3RybGVySWQgICBidXR0b24gIGlzUmVwZWF0KDApXG4gICAgICAgICAgICBzdHJ1Y3R1cmU6IFsndWludDgnLCAndWludDgnLCAndWludDgnXVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXMuYWRkKCdHYW1lcGFkQW5hbG9nJywge1xuICAgICAgICAgICAgaWQ6IDkyLFxuICAgICAgICAgICAgYnl0ZUxlbmd0aDogMTAsXG4gICAgICAgICAgICAvLyAgICAgICAgICAgIGN0cmxlcklkICAgYnV0dG9uICBhbmFsb2dWYWx1ZVxuICAgICAgICAgICAgc3RydWN0dXJlOiBbJ3VpbnQ4JywgJ3VpbnQ4JywgJ2RvdWJsZSddXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlcy5hZGQoJ0dhbWVwYWREaXNjb25uZWN0ZWQnLCB7XG4gICAgICAgICAgICBpZDogOTQsXG4gICAgICAgICAgICBieXRlTGVuZ3RoOiAxLFxuICAgICAgICAgICAgLy8gICAgICAgICAgY3RybGVySWRcbiAgICAgICAgICAgIHN0cnVjdHVyZTogWyd1aW50OCddXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuZnJvbVN0cmVhbWVyTWVzc2FnZXMuYWRkKCdRdWFsaXR5Q29udHJvbE93bmVyc2hpcCcsIDApO1xuICAgICAgICB0aGlzLmZyb21TdHJlYW1lck1lc3NhZ2VzLmFkZCgnUmVzcG9uc2UnLCAxKTtcbiAgICAgICAgdGhpcy5mcm9tU3RyZWFtZXJNZXNzYWdlcy5hZGQoJ0NvbW1hbmQnLCAyKTtcbiAgICAgICAgdGhpcy5mcm9tU3RyZWFtZXJNZXNzYWdlcy5hZGQoJ0ZyZWV6ZUZyYW1lJywgMyk7XG4gICAgICAgIHRoaXMuZnJvbVN0cmVhbWVyTWVzc2FnZXMuYWRkKCdVbmZyZWV6ZUZyYW1lJywgNCk7XG4gICAgICAgIHRoaXMuZnJvbVN0cmVhbWVyTWVzc2FnZXMuYWRkKCdWaWRlb0VuY29kZXJBdmdRUCcsIDUpO1xuICAgICAgICB0aGlzLmZyb21TdHJlYW1lck1lc3NhZ2VzLmFkZCgnTGF0ZW5jeVRlc3QnLCA2KTtcbiAgICAgICAgdGhpcy5mcm9tU3RyZWFtZXJNZXNzYWdlcy5hZGQoJ0luaXRpYWxTZXR0aW5ncycsIDcpO1xuICAgICAgICB0aGlzLmZyb21TdHJlYW1lck1lc3NhZ2VzLmFkZCgnRmlsZUV4dGVuc2lvbicsIDgpO1xuICAgICAgICB0aGlzLmZyb21TdHJlYW1lck1lc3NhZ2VzLmFkZCgnRmlsZU1pbWVUeXBlJywgOSk7XG4gICAgICAgIHRoaXMuZnJvbVN0cmVhbWVyTWVzc2FnZXMuYWRkKCdGaWxlQ29udGVudHMnLCAxMCk7XG4gICAgICAgIHRoaXMuZnJvbVN0cmVhbWVyTWVzc2FnZXMuYWRkKCdUZXN0RWNobycsIDExKTtcbiAgICAgICAgdGhpcy5mcm9tU3RyZWFtZXJNZXNzYWdlcy5hZGQoJ0lucHV0Q29udHJvbE93bmVyc2hpcCcsIDEyKTtcbiAgICAgICAgdGhpcy5mcm9tU3RyZWFtZXJNZXNzYWdlcy5hZGQoJ0dhbWVwYWRSZXNwb25zZScsIDEzKTtcbiAgICAgICAgdGhpcy5mcm9tU3RyZWFtZXJNZXNzYWdlcy5hZGQoJ1Byb3RvY29sJywgMjU1KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWdpc3RlciBhIG1lc3NhZ2UgaGFuZGxlclxuICAgICAqIEBwYXJhbSBtZXNzYWdlRGlyZWN0aW9uIC0gdGhlIGRpcmVjdGlvbiBvZiB0aGUgbWVzc2FnZTsgdG9TdHJlYW1lciBvciBmcm9tU3RyZWFtZXJcbiAgICAgKiBAcGFyYW0gbWVzc2FnZVR5cGUgLSB0aGUgdHlwZSBvZiB0aGUgbWVzc2FnZVxuICAgICAqIEBwYXJhbSBtZXNzYWdlSGFuZGxlciAtIHRoZSBmdW5jdGlvbiBvciBtZXRob2QgdG8gYmUgZXhlY3V0ZWQgd2hlbiB0aGlzIGhhbmRsZXIgaXMgY2FsbGVkXG4gICAgICovXG4gICAgcmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihcbiAgICAgICAgbWVzc2FnZURpcmVjdGlvbjogTWVzc2FnZURpcmVjdGlvbixcbiAgICAgICAgbWVzc2FnZVR5cGU6IHN0cmluZyxcbiAgICAgICAgbWVzc2FnZUhhbmRsZXI6IChtZXNzYWdlRGF0YT86IHVua25vd24gfCB1bmRlZmluZWQpID0+IHZvaWRcbiAgICApIHtcbiAgICAgICAgc3dpdGNoIChtZXNzYWdlRGlyZWN0aW9uKSB7XG4gICAgICAgICAgICBjYXNlIE1lc3NhZ2VEaXJlY3Rpb24uVG9TdHJlYW1lcjpcbiAgICAgICAgICAgICAgICB0aGlzLnRvU3RyZWFtZXJIYW5kbGVycy5zZXQobWVzc2FnZVR5cGUsIG1lc3NhZ2VIYW5kbGVyKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgTWVzc2FnZURpcmVjdGlvbi5Gcm9tU3RyZWFtZXI6XG4gICAgICAgICAgICAgICAgdGhpcy5mcm9tU3RyZWFtZXJIYW5kbGVycy5zZXQobWVzc2FnZVR5cGUsIG1lc3NhZ2VIYW5kbGVyKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgTG9nZ2VyLkxvZyhcbiAgICAgICAgICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcbiAgICAgICAgICAgICAgICAgICAgYFVua25vd24gbWVzc2FnZSBkaXJlY3Rpb24gJHttZXNzYWdlRGlyZWN0aW9ufWBcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vKipcbiAqIFRoZSBlbnVtIGZvciBtZXNzYWdlIGRpcmVjdGlvbnNcbiAqL1xuZXhwb3J0IGVudW0gTWVzc2FnZURpcmVjdGlvbiB7XG4gICAgVG9TdHJlYW1lciA9IDAsXG4gICAgRnJvbVN0cmVhbWVyID0gMVxufVxuIiwiLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuaW1wb3J0IHsgU2VuZE1lc3NhZ2VDb250cm9sbGVyIH0gZnJvbSAnLi9TZW5kTWVzc2FnZUNvbnRyb2xsZXInO1xuXG5leHBvcnQgY2xhc3MgVG9TdHJlYW1lck1lc3NhZ2VzQ29udHJvbGxlciB7XG4gICAgc2VuZE1lc3NhZ2VDb250cm9sbGVyOiBTZW5kTWVzc2FnZUNvbnRyb2xsZXI7XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gc2VuZE1lc3NhZ2VDb250cm9sbGVyIC0gU3RyZWFtIG1lc3NhZ2UgY29udHJvbGxlciBpbnN0YW5jZVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHNlbmRNZXNzYWdlQ29udHJvbGxlcjogU2VuZE1lc3NhZ2VDb250cm9sbGVyKSB7XG4gICAgICAgIHRoaXMuc2VuZE1lc3NhZ2VDb250cm9sbGVyID0gc2VuZE1lc3NhZ2VDb250cm9sbGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNlbmQgUmVxdWVzdCB0byBUYWtlIFF1YWxpdHkgQ29udHJvbCB0byB0aGUgVUUgSW5zdGFuY2VcbiAgICAgKi9cbiAgICBTZW5kUmVxdWVzdFF1YWxpdHlDb250cm9sKCkge1xuICAgICAgICB0aGlzLnNlbmRNZXNzYWdlQ29udHJvbGxlci5zZW5kTWVzc2FnZVRvU3RyZWFtZXIoXG4gICAgICAgICAgICAnUmVxdWVzdFF1YWxpdHlDb250cm9sJ1xuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNlbmQgTWF4IEZQUyBSZXF1ZXN0IHRvIHRoZSBVRSBJbnN0YW5jZVxuICAgICAqL1xuICAgIFNlbmRNYXhGcHNSZXF1ZXN0KCkge1xuICAgICAgICB0aGlzLnNlbmRNZXNzYWdlQ29udHJvbGxlci5zZW5kTWVzc2FnZVRvU3RyZWFtZXIoJ0Zwc1JlcXVlc3QnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZW5kIEF2ZXJhZ2UgQml0cmF0ZSBSZXF1ZXN0IHRvIHRoZSBVRSBJbnN0YW5jZVxuICAgICAqL1xuICAgIFNlbmRBdmVyYWdlQml0cmF0ZVJlcXVlc3QoKSB7XG4gICAgICAgIHRoaXMuc2VuZE1lc3NhZ2VDb250cm9sbGVyLnNlbmRNZXNzYWdlVG9TdHJlYW1lcihcbiAgICAgICAgICAgICdBdmVyYWdlQml0cmF0ZVJlcXVlc3QnXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2VuZCBhIFN0YXJ0IFN0cmVhbWluZyBNZXNzYWdlIHRvIHRoZSBVRSBJbnN0YW5jZVxuICAgICAqL1xuICAgIFNlbmRTdGFydFN0cmVhbWluZygpIHtcbiAgICAgICAgdGhpcy5zZW5kTWVzc2FnZUNvbnRyb2xsZXIuc2VuZE1lc3NhZ2VUb1N0cmVhbWVyKCdTdGFydFN0cmVhbWluZycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNlbmQgYSBTdG9wIFN0cmVhbWluZyBNZXNzYWdlIHRvIHRoZSBVRSBJbnN0YW5jZVxuICAgICAqL1xuICAgIFNlbmRTdG9wU3RyZWFtaW5nKCkge1xuICAgICAgICB0aGlzLnNlbmRNZXNzYWdlQ29udHJvbGxlci5zZW5kTWVzc2FnZVRvU3RyZWFtZXIoJ1N0b3BTdHJlYW1pbmcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZW5kIGEgUmVxdWVzdCBJbml0aWFsIFNldHRpbmdzIHRvIHRoZSBVRSBJbnN0YW5jZVxuICAgICAqL1xuICAgIFNlbmRSZXF1ZXN0SW5pdGlhbFNldHRpbmdzKCkge1xuICAgICAgICB0aGlzLnNlbmRNZXNzYWdlQ29udHJvbGxlci5zZW5kTWVzc2FnZVRvU3RyZWFtZXIoXG4gICAgICAgICAgICAnUmVxdWVzdEluaXRpYWxTZXR0aW5ncydcbiAgICAgICAgKTtcbiAgICB9XG59XG4iLCIvLyBDb3B5cmlnaHQgRXBpYyBHYW1lcywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXG5leHBvcnQgY2xhc3MgVHdvV2F5TWFwPEtleVR5cGUsIFZhbHVlVHlwZT4ge1xuICAgIG1hcDogTWFwPEtleVR5cGUsIFZhbHVlVHlwZT47XG4gICAgcmV2ZXJzZU1hcDogTWFwPFZhbHVlVHlwZSwgS2V5VHlwZT47XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gbWFwIC0gYW4gb3B0aW9uYWwgbWFwIG9mIHBhcmFtZXRlcnNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5tYXAgPSBuZXcgTWFwKCk7XG4gICAgICAgIHRoaXMucmV2ZXJzZU1hcCA9IG5ldyBNYXAoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIHZhbHVlIGZyb20gdGhlIG1hcCBieSBrZXlcbiAgICAgKiBAcGFyYW0ga2V5IC0gdGhlIGtleSB3ZSBhcmUgc2VhcmNoaW5nIGJ5XG4gICAgICogQHJldHVybnMgLSB0aGUgdmFsdWUgYXNzb2NpYXRlZCB3aXRoIHRoZSBrZXlcbiAgICAgKi9cbiAgICBnZXRGcm9tS2V5KGtleTogS2V5VHlwZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5tYXAuZ2V0KGtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSByZXZlcnNlIGtleSBmcm9tIHRoZSBtYXAgYnkgc2VhcmNoaW5nIGJ5IHZhbHVlXG4gICAgICogQHBhcmFtIHZhbHVlIC0gdGhlIGtleSB3ZSBhcmUgc2VhcmNoaW5nIGJ5XG4gICAgICogQHJldHVybnMgLSB0aGV5IGtleSBhc3NvY2lhdGVkIHdpdGggdGhlIHZhbHVlXG4gICAgICovXG4gICAgZ2V0RnJvbVZhbHVlKHZhbHVlOiBWYWx1ZVR5cGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmV2ZXJzZU1hcC5nZXQodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZCBhIGtleSBhbmQgdmFsdWUgdG8gYm90aCB0aGUgbWFwIGFuZCByZXZlcnNlIG1hcFxuICAgICAqIEBwYXJhbSBrZXkgLSB0aGUgaW5kZXhpbmcga2V5XG4gICAgICogQHBhcmFtIHZhbHVlIC0gdGhlIHZhbHVlIGFzc29jaWF0ZWQgd2l0aCB0aGUga2V5XG4gICAgICovXG4gICAgYWRkKGtleTogS2V5VHlwZSwgdmFsdWU6IFZhbHVlVHlwZSkge1xuICAgICAgICB0aGlzLm1hcC5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgIHRoaXMucmV2ZXJzZU1hcC5zZXQodmFsdWUsIGtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGEga2V5IGFuZCB2YWx1ZSBmcm9tIGJvdGggdGhlIG1hcCBhbmQgcmV2ZXJzZSBtYXBcbiAgICAgKiBAcGFyYW0ga2V5IC0gdGhlIGluZGV4aW5nIGtleVxuICAgICAqIEBwYXJhbSB2YWx1ZSAtIHRoZSB2YWx1ZSBhc3NvY2lhdGVkIHdpdGggdGhlIGtleVxuICAgICAqL1xuICAgIHJlbW92ZShrZXk6IEtleVR5cGUsIHZhbHVlOiBWYWx1ZVR5cGUpIHtcbiAgICAgICAgdGhpcy5tYXAuZGVsZXRlKGtleSk7XG4gICAgICAgIHRoaXMucmV2ZXJzZU1hcC5kZWxldGUodmFsdWUpO1xuICAgIH1cbn1cbiIsIi8vIENvcHlyaWdodCBFcGljIEdhbWVzLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG5cbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJy4uL0xvZ2dlci9Mb2dnZXInO1xuaW1wb3J0IHsgVmlkZW9QbGF5ZXIgfSBmcm9tICcuLi9WaWRlb1BsYXllci9WaWRlb1BsYXllcic7XG5cbi8qKlxuICogQ29udmVydHMgY29vcmRpbmF0ZXMgZnJvbSBlbGVtZW50IHJlbGF0aXZlIGNvb3JkaW5hdGVzIHRvIHZhbHVlcyBub3JtYWxpemVkIHdpdGhpbiB0aGUgdmFsdWUgcmFuZ2Ugb2YgYSBzaG9ydCAoYW5kIGJhY2sgYWdhaW4pXG4gKi9cbmV4cG9ydCBjbGFzcyBDb29yZGluYXRlQ29udmVydGVyIHtcbiAgICB2aWRlb0VsZW1lbnRQcm92aWRlcjogVmlkZW9QbGF5ZXI7XG4gICAgdmlkZW9FbGVtZW50UGFyZW50OiBIVE1MRWxlbWVudDtcbiAgICB2aWRlb0VsZW1lbnQ6IEhUTUxWaWRlb0VsZW1lbnQ7XG4gICAgcmF0aW86IG51bWJlcjtcblxuICAgIG5vcm1hbGl6ZUFuZFF1YW50aXplVW5zaWduZWRGdW5jOiAoXG4gICAgICAgIHg6IG51bWJlcixcbiAgICAgICAgeTogbnVtYmVyXG4gICAgKSA9PiBOb3JtYWxpemVkUXVhbnRpemVkVW5zaWduZWRDb29yZDtcbiAgICBub3JtYWxpemVBbmRRdWFudGl6ZVNpZ25lZEZ1bmM6IChcbiAgICAgICAgeDogbnVtYmVyLFxuICAgICAgICB5OiBudW1iZXJcbiAgICApID0+IE5vcm1hbGl6ZWRRdWFudGl6ZWRTaWduZWRDb29yZDtcbiAgICBkZW5vcm1hbGl6ZUFuZFVucXVhbnRpemVVbnNpZ25lZEZ1bmM6IChcbiAgICAgICAgeDogbnVtYmVyLFxuICAgICAgICB5OiBudW1iZXJcbiAgICApID0+IFVucXVhbnRpemVkRGVub3JtYWxpemVkVW5zaWduZWRDb29yZDtcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB2aWRlb0VsZW1lbnRQcm92aWRlciAtIHRoZSBkaXYgZWxlbWVudCB0aGF0IHRoZSB2aWRlbyBwbGF5ZXIgd2lsbCBiZSBpbmplY3RlZCBpbnRvXG4gICAgICovXG4gICAgY29uc3RydWN0b3IodmlkZW9FbGVtZW50UHJvdmlkZXI6IFZpZGVvUGxheWVyKSB7XG4gICAgICAgIHRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIgPSB2aWRlb0VsZW1lbnRQcm92aWRlcjtcbiAgICAgICAgdGhpcy5ub3JtYWxpemVBbmRRdWFudGl6ZVVuc2lnbmVkRnVuYyA9ICgpID0+IHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgICAnTm9ybWFsaXplIGFuZCBxdWFudGl6ZSB1bnNpZ25lZCwgbWV0aG9kIG5vdCBpbXBsZW1lbnRlZC4nXG4gICAgICAgICAgICApO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLm5vcm1hbGl6ZUFuZFF1YW50aXplU2lnbmVkRnVuYyA9ICgpID0+IHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgICAnTm9ybWFsaXplIGFuZCB1bnF1YW50aXplIHNpZ25lZCwgbWV0aG9kIG5vdCBpbXBsZW1lbnRlZC4nXG4gICAgICAgICAgICApO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmRlbm9ybWFsaXplQW5kVW5xdWFudGl6ZVVuc2lnbmVkRnVuYyA9ICgpID0+IHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgICAnRGVub3JtYWxpemUgYW5kIHVucXVhbnRpemUgdW5zaWduZWQsIG1ldGhvZCBub3QgaW1wbGVtZW50ZWQuJ1xuICAgICAgICAgICAgKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgc3VyZmFjZSBtZXRob2QgZm9yIHNldHRlck5vcm1hbGl6ZUFuZFF1YW50aXplVW5zaWduZWRcbiAgICAgKiBAcGFyYW0geCAtIHggYXhpcyBwb2ludFxuICAgICAqIEBwYXJhbSB5IC0geSBheGlzIHBvaW50XG4gICAgICovXG4gICAgbm9ybWFsaXplQW5kUXVhbnRpemVVbnNpZ25lZChcbiAgICAgICAgeDogbnVtYmVyLFxuICAgICAgICB5OiBudW1iZXJcbiAgICApOiBOb3JtYWxpemVkUXVhbnRpemVkVW5zaWduZWRDb29yZCB7XG4gICAgICAgIHJldHVybiB0aGlzLm5vcm1hbGl6ZUFuZFF1YW50aXplVW5zaWduZWRGdW5jKHgsIHkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBzdXJmYWNlIG1ldGhvZCBmb3Igc2V0dGVyVW5xdWFudGl6ZUFuZERlbm9ybWFsaXplVW5zaWduZWRcbiAgICAgKiBAcGFyYW0geCAtIHggYXhpcyBwb2ludFxuICAgICAqIEBwYXJhbSB5IC0geSBheGlzIHBvaW50XG4gICAgICovXG4gICAgdW5xdWFudGl6ZUFuZERlbm9ybWFsaXplVW5zaWduZWQoXG4gICAgICAgIHg6IG51bWJlcixcbiAgICAgICAgeTogbnVtYmVyXG4gICAgKTogVW5xdWFudGl6ZWREZW5vcm1hbGl6ZWRVbnNpZ25lZENvb3JkIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVub3JtYWxpemVBbmRVbnF1YW50aXplVW5zaWduZWRGdW5jKHgsIHkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBzdXJmYWNlIG1ldGhvZCBmb3Igc2V0dGVyTm9ybWFsaXplQW5kUXVhbnRpemVTaWduZWRcbiAgICAgKiBAcGFyYW0geCAtIHggYXhpcyBwb2ludFxuICAgICAqIEBwYXJhbSB5IC0geSBheGlzIHBvaW50XG4gICAgICovXG4gICAgbm9ybWFsaXplQW5kUXVhbnRpemVTaWduZWQoXG4gICAgICAgIHg6IG51bWJlcixcbiAgICAgICAgeTogbnVtYmVyXG4gICAgKTogTm9ybWFsaXplZFF1YW50aXplZFNpZ25lZENvb3JkIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubm9ybWFsaXplQW5kUXVhbnRpemVTaWduZWRGdW5jKHgsIHkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHNldCB1cCB0aGUgTm9ybWFsaXplIEFuZCBRdWFudGl6ZSBtZXRob2RzIGJhc2VkIG9uIHRoZSBhc3BlY3QgcmF0aW8gYW5kIHRoZSB2aWRlbyBwbGF5ZXIgcmF0aW9cbiAgICAgKi9cbiAgICBzZXR1cE5vcm1hbGl6ZUFuZFF1YW50aXplKCkge1xuICAgICAgICB0aGlzLnZpZGVvRWxlbWVudFBhcmVudCA9XG4gICAgICAgICAgICB0aGlzLnZpZGVvRWxlbWVudFByb3ZpZGVyLmdldFZpZGVvUGFyZW50RWxlbWVudCgpO1xuICAgICAgICB0aGlzLnZpZGVvRWxlbWVudCA9IHRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIuZ2V0VmlkZW9FbGVtZW50KCk7XG5cbiAgICAgICAgaWYgKHRoaXMudmlkZW9FbGVtZW50UGFyZW50ICYmIHRoaXMudmlkZW9FbGVtZW50KSB7XG4gICAgICAgICAgICBjb25zdCBwbGF5ZXJBc3BlY3RSYXRpbyA9XG4gICAgICAgICAgICAgICAgdGhpcy52aWRlb0VsZW1lbnRQYXJlbnQuY2xpZW50SGVpZ2h0IC9cbiAgICAgICAgICAgICAgICB0aGlzLnZpZGVvRWxlbWVudFBhcmVudC5jbGllbnRXaWR0aDtcbiAgICAgICAgICAgIGNvbnN0IHZpZGVvQXNwZWN0UmF0aW8gPVxuICAgICAgICAgICAgICAgIHRoaXMudmlkZW9FbGVtZW50LnZpZGVvSGVpZ2h0IC8gdGhpcy52aWRlb0VsZW1lbnQudmlkZW9XaWR0aDtcbiAgICAgICAgICAgIGlmIChwbGF5ZXJBc3BlY3RSYXRpbyA+IHZpZGVvQXNwZWN0UmF0aW8pIHtcbiAgICAgICAgICAgICAgICBMb2dnZXIuTG9nKFxuICAgICAgICAgICAgICAgICAgICBMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLFxuICAgICAgICAgICAgICAgICAgICAnU2V0dXAgTm9ybWFsaXplIGFuZCBRdWFudGl6ZSBmb3IgcGxheWVyQXNwZWN0UmF0aW8gPiB2aWRlb0FzcGVjdFJhdGlvJyxcbiAgICAgICAgICAgICAgICAgICAgNlxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgdGhpcy5yYXRpbyA9IHBsYXllckFzcGVjdFJhdGlvIC8gdmlkZW9Bc3BlY3RSYXRpbztcbiAgICAgICAgICAgICAgICB0aGlzLm5vcm1hbGl6ZUFuZFF1YW50aXplVW5zaWduZWRGdW5jID0gKFxuICAgICAgICAgICAgICAgICAgICB4OiBudW1iZXIsXG4gICAgICAgICAgICAgICAgICAgIHk6IG51bWJlclxuICAgICAgICAgICAgICAgICkgPT4gdGhpcy5ub3JtYWxpemVBbmRRdWFudGl6ZVVuc2lnbmVkUGxheWVyQmlnZ2VyKHgsIHkpO1xuICAgICAgICAgICAgICAgIHRoaXMubm9ybWFsaXplQW5kUXVhbnRpemVTaWduZWRGdW5jID0gKHg6IG51bWJlciwgeTogbnVtYmVyKSA9PlxuICAgICAgICAgICAgICAgICAgICB0aGlzLm5vcm1hbGl6ZUFuZFF1YW50aXplU2lnbmVkUGxheWVyQmlnZ2VyKHgsIHkpO1xuICAgICAgICAgICAgICAgIHRoaXMuZGVub3JtYWxpemVBbmRVbnF1YW50aXplVW5zaWduZWRGdW5jID0gKFxuICAgICAgICAgICAgICAgICAgICB4OiBudW1iZXIsXG4gICAgICAgICAgICAgICAgICAgIHk6IG51bWJlclxuICAgICAgICAgICAgICAgICkgPT4gdGhpcy5kZW5vcm1hbGl6ZUFuZFVucXVhbnRpemVVbnNpZ25lZFBsYXllckJpZ2dlcih4LCB5KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgTG9nZ2VyLkxvZyhcbiAgICAgICAgICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcbiAgICAgICAgICAgICAgICAgICAgJ1NldHVwIE5vcm1hbGl6ZSBhbmQgUXVhbnRpemUgZm9yIHBsYXllckFzcGVjdFJhdGlvIDw9IHZpZGVvQXNwZWN0UmF0aW8nLFxuICAgICAgICAgICAgICAgICAgICA2XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB0aGlzLnJhdGlvID0gdmlkZW9Bc3BlY3RSYXRpbyAvIHBsYXllckFzcGVjdFJhdGlvO1xuICAgICAgICAgICAgICAgIHRoaXMubm9ybWFsaXplQW5kUXVhbnRpemVVbnNpZ25lZEZ1bmMgPSAoXG4gICAgICAgICAgICAgICAgICAgIHg6IG51bWJlcixcbiAgICAgICAgICAgICAgICAgICAgeTogbnVtYmVyXG4gICAgICAgICAgICAgICAgKSA9PiB0aGlzLm5vcm1hbGl6ZUFuZFF1YW50aXplVW5zaWduZWRQbGF5ZXJTbWFsbGVyKHgsIHkpO1xuICAgICAgICAgICAgICAgIHRoaXMubm9ybWFsaXplQW5kUXVhbnRpemVTaWduZWRGdW5jID0gKHg6IG51bWJlciwgeTogbnVtYmVyKSA9PlxuICAgICAgICAgICAgICAgICAgICB0aGlzLm5vcm1hbGl6ZUFuZFF1YW50aXplU2lnbmVkUGxheWVyU21hbGxlcih4LCB5KTtcbiAgICAgICAgICAgICAgICB0aGlzLmRlbm9ybWFsaXplQW5kVW5xdWFudGl6ZVVuc2lnbmVkRnVuYyA9IChcbiAgICAgICAgICAgICAgICAgICAgeDogbnVtYmVyLFxuICAgICAgICAgICAgICAgICAgICB5OiBudW1iZXJcbiAgICAgICAgICAgICAgICApID0+IHRoaXMuZGVub3JtYWxpemVBbmRVbnF1YW50aXplVW5zaWduZWRQbGF5ZXJTbWFsbGVyKHgsIHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogbm9ybWFsaXplQW5kUXVhbnRpemVVbnNpZ25lZCBmb3IgcGxheWVyQXNwZWN0UmF0aW8gPiB2aWRlb0FzcGVjdFJhdGlvXG4gICAgICogQHBhcmFtIHggLSB4IGF4aXMgcG9pbnRcbiAgICAgKiBAcGFyYW0geSAtIHkgYXhpcyBwb2ludFxuICAgICAqL1xuICAgIG5vcm1hbGl6ZUFuZFF1YW50aXplVW5zaWduZWRQbGF5ZXJCaWdnZXIoXG4gICAgICAgIHg6IG51bWJlcixcbiAgICAgICAgeTogbnVtYmVyXG4gICAgKTogTm9ybWFsaXplZFF1YW50aXplZFVuc2lnbmVkQ29vcmQge1xuICAgICAgICBjb25zdCBub3JtYWxpemVkWCA9IHggLyB0aGlzLnZpZGVvRWxlbWVudFBhcmVudC5jbGllbnRXaWR0aDtcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplZFkgPVxuICAgICAgICAgICAgdGhpcy5yYXRpbyAqICh5IC8gdGhpcy52aWRlb0VsZW1lbnRQYXJlbnQuY2xpZW50SGVpZ2h0IC0gMC41KSArIDAuNTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgbm9ybWFsaXplZFggPCAwLjAgfHxcbiAgICAgICAgICAgIG5vcm1hbGl6ZWRYID4gMS4wIHx8XG4gICAgICAgICAgICBub3JtYWxpemVkWSA8IDAuMCB8fFxuICAgICAgICAgICAgbm9ybWFsaXplZFkgPiAxLjBcbiAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IE5vcm1hbGl6ZWRRdWFudGl6ZWRVbnNpZ25lZENvb3JkKGZhbHNlLCA2NTUzNSwgNjU1MzUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBOb3JtYWxpemVkUXVhbnRpemVkVW5zaWduZWRDb29yZChcbiAgICAgICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgICAgIG5vcm1hbGl6ZWRYICogNjU1MzYsXG4gICAgICAgICAgICAgICAgbm9ybWFsaXplZFkgKiA2NTUzNlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHVucXVhbnRpemVBbmREZW5vcm1hbGl6ZVVuc2lnbmVkIGZvciBwbGF5ZXJBc3BlY3RSYXRpbyA+IHZpZGVvQXNwZWN0UmF0aW9cbiAgICAgKiBAcGFyYW0geCAtIHggYXhpcyBwb2ludFxuICAgICAqIEBwYXJhbSB5IC0geSBheGlzIHBvaW50XG4gICAgICovXG4gICAgZGVub3JtYWxpemVBbmRVbnF1YW50aXplVW5zaWduZWRQbGF5ZXJCaWdnZXIoeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplZFggPSB4IC8gNjU1MzY7XG4gICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRZID0gKHkgLyA2NTUzNiAtIDAuNSkgLyB0aGlzLnJhdGlvICsgMC41O1xuICAgICAgICByZXR1cm4gbmV3IFVucXVhbnRpemVkRGVub3JtYWxpemVkVW5zaWduZWRDb29yZChcbiAgICAgICAgICAgIG5vcm1hbGl6ZWRYICogdGhpcy52aWRlb0VsZW1lbnRQYXJlbnQuY2xpZW50V2lkdGgsXG4gICAgICAgICAgICBub3JtYWxpemVkWSAqIHRoaXMudmlkZW9FbGVtZW50UGFyZW50LmNsaWVudEhlaWdodFxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIG5vcm1hbGl6ZUFuZFF1YW50aXplU2lnbmVkIGZvciBwbGF5ZXJBc3BlY3RSYXRpbyA+IHZpZGVvQXNwZWN0UmF0aW9cbiAgICAgKiBAcGFyYW0geCAtIHggYXhpcyBwb2ludFxuICAgICAqIEBwYXJhbSB5IC0geSBheGlzIHBvaW50XG4gICAgICovXG4gICAgbm9ybWFsaXplQW5kUXVhbnRpemVTaWduZWRQbGF5ZXJCaWdnZXIoeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplZFggPSB4IC8gKDAuNSAqIHRoaXMudmlkZW9FbGVtZW50UGFyZW50LmNsaWVudFdpZHRoKTtcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplZFkgPVxuICAgICAgICAgICAgKHRoaXMucmF0aW8gKiB5KSAvICgwLjUgKiB0aGlzLnZpZGVvRWxlbWVudFBhcmVudC5jbGllbnRIZWlnaHQpO1xuICAgICAgICByZXR1cm4gbmV3IE5vcm1hbGl6ZWRRdWFudGl6ZWRTaWduZWRDb29yZChcbiAgICAgICAgICAgIG5vcm1hbGl6ZWRYICogMzI3NjcsXG4gICAgICAgICAgICBub3JtYWxpemVkWSAqIDMyNzY3XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogbm9ybWFsaXplQW5kUXVhbnRpemVVbnNpZ25lZCBmb3IgcGxheWVyQXNwZWN0UmF0aW8gPD0gdmlkZW9Bc3BlY3RSYXRpb1xuICAgICAqIEBwYXJhbSB4IC0geCBheGlzIHBvaW50XG4gICAgICogQHBhcmFtIHkgLSB5IGF4aXMgcG9pbnRcbiAgICAgKi9cbiAgICBub3JtYWxpemVBbmRRdWFudGl6ZVVuc2lnbmVkUGxheWVyU21hbGxlcih4OiBudW1iZXIsIHk6IG51bWJlcikge1xuICAgICAgICBjb25zdCBub3JtYWxpemVkWCA9XG4gICAgICAgICAgICB0aGlzLnJhdGlvICogKHggLyB0aGlzLnZpZGVvRWxlbWVudFBhcmVudC5jbGllbnRXaWR0aCAtIDAuNSkgKyAwLjU7XG4gICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRZID0geSAvIHRoaXMudmlkZW9FbGVtZW50UGFyZW50LmNsaWVudEhlaWdodDtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgbm9ybWFsaXplZFggPCAwLjAgfHxcbiAgICAgICAgICAgIG5vcm1hbGl6ZWRYID4gMS4wIHx8XG4gICAgICAgICAgICBub3JtYWxpemVkWSA8IDAuMCB8fFxuICAgICAgICAgICAgbm9ybWFsaXplZFkgPiAxLjBcbiAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IE5vcm1hbGl6ZWRRdWFudGl6ZWRVbnNpZ25lZENvb3JkKGZhbHNlLCA2NTUzNSwgNjU1MzUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBOb3JtYWxpemVkUXVhbnRpemVkVW5zaWduZWRDb29yZChcbiAgICAgICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICAgICAgIG5vcm1hbGl6ZWRYICogNjU1MzYsXG4gICAgICAgICAgICAgICAgbm9ybWFsaXplZFkgKiA2NTUzNlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHVucXVhbnRpemVBbmREZW5vcm1hbGl6ZVVuc2lnbmVkIGZvciBwbGF5ZXJBc3BlY3RSYXRpbyA8PSB2aWRlb0FzcGVjdFJhdGlvXG4gICAgICogQHBhcmFtIHggLSB4IGF4aXMgcG9pbnRcbiAgICAgKiBAcGFyYW0geSAtIHkgYXhpcyBwb2ludFxuICAgICAqL1xuICAgIGRlbm9ybWFsaXplQW5kVW5xdWFudGl6ZVVuc2lnbmVkUGxheWVyU21hbGxlcih4OiBudW1iZXIsIHk6IG51bWJlcikge1xuICAgICAgICBjb25zdCBub3JtYWxpemVkWCA9ICh4IC8gNjU1MzYgLSAwLjUpIC8gdGhpcy5yYXRpbyArIDAuNTtcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplZFkgPSB5IC8gNjU1MzY7XG4gICAgICAgIHJldHVybiBuZXcgVW5xdWFudGl6ZWREZW5vcm1hbGl6ZWRVbnNpZ25lZENvb3JkKFxuICAgICAgICAgICAgbm9ybWFsaXplZFggKiB0aGlzLnZpZGVvRWxlbWVudFBhcmVudC5jbGllbnRXaWR0aCxcbiAgICAgICAgICAgIG5vcm1hbGl6ZWRZICogdGhpcy52aWRlb0VsZW1lbnRQYXJlbnQuY2xpZW50SGVpZ2h0XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogbm9ybWFsaXplQW5kUXVhbnRpemVTaWduZWQgZm9yIHBsYXllckFzcGVjdFJhdGlvIDw9IHZpZGVvQXNwZWN0UmF0aW9cbiAgICAgKiBAcGFyYW0geCAtIHggYXhpcyBwb2ludFxuICAgICAqIEBwYXJhbSB5IC0geSBheGlzIHBvaW50XG4gICAgICovXG4gICAgbm9ybWFsaXplQW5kUXVhbnRpemVTaWduZWRQbGF5ZXJTbWFsbGVyKHg6IG51bWJlciwgeTogbnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRYID1cbiAgICAgICAgICAgICh0aGlzLnJhdGlvICogeCkgLyAoMC41ICogdGhpcy52aWRlb0VsZW1lbnRQYXJlbnQuY2xpZW50V2lkdGgpO1xuICAgICAgICBjb25zdCBub3JtYWxpemVkWSA9IHkgLyAoMC41ICogdGhpcy52aWRlb0VsZW1lbnRQYXJlbnQuY2xpZW50SGVpZ2h0KTtcbiAgICAgICAgcmV0dXJuIG5ldyBOb3JtYWxpemVkUXVhbnRpemVkU2lnbmVkQ29vcmQoXG4gICAgICAgICAgICBub3JtYWxpemVkWCAqIDMyNzY3LFxuICAgICAgICAgICAgbm9ybWFsaXplZFkgKiAzMjc2N1xuICAgICAgICApO1xuICAgIH1cbn1cblxuLyoqXG4gKiBBIGNsYXNzIGZvciBOb3JtYWxpemVBbmRRdWFudGl6ZVVuc2lnbmVkIG9iamVjdHNcbiAqL1xuZXhwb3J0IGNsYXNzIE5vcm1hbGl6ZWRRdWFudGl6ZWRVbnNpZ25lZENvb3JkIHtcbiAgICBpblJhbmdlOiBib29sZWFuO1xuICAgIHg6IG51bWJlcjtcbiAgICB5OiBudW1iZXI7XG5cbiAgICBjb25zdHJ1Y3RvcihpblJhbmdlOiBib29sZWFuLCB4OiBudW1iZXIsIHk6IG51bWJlcikge1xuICAgICAgICB0aGlzLmluUmFuZ2UgPSBpblJhbmdlO1xuICAgICAgICB0aGlzLnggPSB4O1xuICAgICAgICB0aGlzLnkgPSB5O1xuICAgIH1cbn1cblxuLyoqXG4gKiBBIGNsYXNzIGZvciBVbnF1YW50aXplZEFuZERlbm9ybWFsaXplVW5zaWduZWQgb2JqZWN0c1xuICovXG5leHBvcnQgY2xhc3MgVW5xdWFudGl6ZWREZW5vcm1hbGl6ZWRVbnNpZ25lZENvb3JkIHtcbiAgICB4OiBudW1iZXI7XG4gICAgeTogbnVtYmVyO1xuXG4gICAgY29uc3RydWN0b3IoeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy54ID0geDtcbiAgICAgICAgdGhpcy55ID0geTtcbiAgICB9XG59XG5cbi8qKlxuICogQSBjbGFzcyBmb3IgTm9ybWFsaXplZFF1YW50aXplZFNpZ25lZENvb3JkIG9iamVjdHNcbiAqL1xuZXhwb3J0IGNsYXNzIE5vcm1hbGl6ZWRRdWFudGl6ZWRTaWduZWRDb29yZCB7XG4gICAgeDogbnVtYmVyO1xuICAgIHk6IG51bWJlcjtcblxuICAgIGNvbnN0cnVjdG9yKHg6IG51bWJlciwgeTogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMueCA9IHg7XG4gICAgICAgIHRoaXMueSA9IHk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHtcbiAgICBGbGFnc0lkcyxcbiAgICBOdW1lcmljUGFyYW1ldGVyc0lkcyxcbiAgICBPcHRpb25QYXJhbWV0ZXJzSWRzLFxuICAgIFRleHRQYXJhbWV0ZXJzSWRzXG59IGZyb20gJy4uL0NvbmZpZy9Db25maWcnO1xuaW1wb3J0IHsgTGF0ZW5jeVRlc3RSZXN1bHRzIH0gZnJvbSAnLi4vRGF0YUNoYW5uZWwvTGF0ZW5jeVRlc3RSZXN1bHRzJztcbmltcG9ydCB7IEFnZ3JlZ2F0ZWRTdGF0cyB9IGZyb20gJy4uL1BlZXJDb25uZWN0aW9uQ29udHJvbGxlci9BZ2dyZWdhdGVkU3RhdHMnO1xuaW1wb3J0IHsgSW5pdGlhbFNldHRpbmdzIH0gZnJvbSAnLi4vcGl4ZWxzdHJlYW1pbmdmcm9udGVuZCc7XG5pbXBvcnQgeyBNZXNzYWdlU3RyZWFtZXJMaXN0IH0gZnJvbSAnLi4vV2ViU29ja2V0cy9NZXNzYWdlUmVjZWl2ZSc7XG5pbXBvcnQgeyBTZXR0aW5nRmxhZyB9IGZyb20gJy4uL0NvbmZpZy9TZXR0aW5nRmxhZyc7XG5pbXBvcnQgeyBTZXR0aW5nTnVtYmVyIH0gZnJvbSAnLi4vQ29uZmlnL1NldHRpbmdOdW1iZXInO1xuaW1wb3J0IHsgU2V0dGluZ1RleHQgfSBmcm9tICcuLi9Db25maWcvU2V0dGluZ1RleHQnO1xuaW1wb3J0IHsgU2V0dGluZ09wdGlvbiB9IGZyb20gJy4uL0NvbmZpZy9TZXR0aW5nT3B0aW9uJztcblxuLyoqXG4gKiBBbiBldmVudCB0aGF0IGlzIGVtaXR0ZWQgd2hlbiBBRksgZGlzY29ubmVjdCBpcyBhYm91dCB0byBoYXBwZW4uXG4gKiBDYW4gYmUgY2FuY2VsbGVkIGJ5IGNhbGxpbmcgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uIHByb3ZpZGVkIGFzIHBhcnQgb2YgdGhlIGV2ZW50LlxuICovXG5leHBvcnQgY2xhc3MgQWZrV2FybmluZ0FjdGl2YXRlRXZlbnQgZXh0ZW5kcyBFdmVudCB7XG4gICAgcmVhZG9ubHkgdHlwZTogJ2Fma1dhcm5pbmdBY3RpdmF0ZSc7XG4gICAgcmVhZG9ubHkgZGF0YToge1xuICAgICAgICAvKiogSG93IG1hbnkgc2Vjb25kcyB1bnRpbCB0aGUgc2Vzc2lvbiBpcyBkaXNjb25uZWN0ZWQgKi9cbiAgICAgICAgY291bnREb3duOiBudW1iZXI7XG4gICAgICAgIC8qKiBDYWxsYmFjayBmdW5jdGlvbiB0aGF0IG5lZWRzIHRvIGJlIGNhbGxlZCBpZiB5b3Ugd2lzaCB0byBjYW5jZWwgdGhlIEFGSyBkaXNjb25uZWN0IHRpbWVvdXQuICovXG4gICAgICAgIGRpc21pc3NBZms6ICgpID0+IHZvaWQ7XG4gICAgfTtcbiAgICBjb25zdHJ1Y3RvcihkYXRhOiBBZmtXYXJuaW5nQWN0aXZhdGVFdmVudFsnZGF0YSddKSB7XG4gICAgICAgIHN1cGVyKCdhZmtXYXJuaW5nQWN0aXZhdGUnKTtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICB9XG59XG5cbi8qKlxuICogQW4gZXZlbnQgdGhhdCBpcyBlbWl0dGVkIHdoZW4gdGhlIEFGSyBkaXNjb25uZWN0IGNvdW50ZG93biBpcyB1cGRhdGVkLlxuICovXG5leHBvcnQgY2xhc3MgQWZrV2FybmluZ1VwZGF0ZUV2ZW50IGV4dGVuZHMgRXZlbnQge1xuICAgIHJlYWRvbmx5IHR5cGU6ICdhZmtXYXJuaW5nVXBkYXRlJztcbiAgICByZWFkb25seSBkYXRhOiB7XG4gICAgICAgIC8qKiBIb3cgbWFueSBzZWNvbmRzIHVudGlsIHRoZSBzZXNzaW9uIGlzIGRpc2Nvbm5lY3RlZCAqL1xuICAgICAgICBjb3VudERvd246IG51bWJlclxuICAgIH07XG4gICAgY29uc3RydWN0b3IoZGF0YTogQWZrV2FybmluZ1VwZGF0ZUV2ZW50WydkYXRhJ10pIHtcbiAgICAgICAgc3VwZXIoJ2Fma1dhcm5pbmdVcGRhdGUnKTtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICB9XG59XG5cbi8qKlxuICogQW4gZXZlbnQgdGhhdCBpcyBlbWl0dGVkIHdoZW4gQUZLIHdhcm5pbmcgaXMgZGVhY3RpdmF0ZWQuXG4gKi9cbmV4cG9ydCBjbGFzcyBBZmtXYXJuaW5nRGVhY3RpdmF0ZUV2ZW50IGV4dGVuZHMgRXZlbnQge1xuICAgIHJlYWRvbmx5IHR5cGU6ICdhZmtXYXJuaW5nRGVhY3RpdmF0ZSc7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCdhZmtXYXJuaW5nRGVhY3RpdmF0ZScpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBBbiBldmVudCB0aGF0IGlzIGVtaXR0ZWQgd2hlbiBBRksgY291bnRkb3duIHJlYWNoZXMgMCBhbmQgdGhlIHVzZXIgaXMgZGlzY29ubmVjdGVkLlxuICovXG5leHBvcnQgY2xhc3MgQWZrVGltZWRPdXRFdmVudCBleHRlbmRzIEV2ZW50IHtcbiAgICByZWFkb25seSB0eXBlOiAnYWZrVGltZWRPdXQnO1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcignYWZrVGltZWRPdXQnKTtcbiAgICB9XG59XG5cbi8qKlxuICogQW4gZXZlbnQgdGhhdCBpcyBlbWl0dGVkIHdoZW4gd2UgcmVjZWl2ZSBuZXcgdmlkZW8gcXVhbGl0eSB2YWx1ZS5cbiAqL1xuZXhwb3J0IGNsYXNzIFZpZGVvRW5jb2RlckF2Z1FQRXZlbnQgZXh0ZW5kcyBFdmVudCB7XG4gICAgcmVhZG9ubHkgdHlwZTogJ3ZpZGVvRW5jb2RlckF2Z1FQJztcbiAgICByZWFkb25seSBkYXRhOiB7XG4gICAgICAgIC8qKiBBdmVyYWdlIHZpZGVvIHF1YWxpdHkgdmFsdWUgKi9cbiAgICAgICAgYXZnUVA6IG51bWJlclxuICAgIH07XG4gICAgY29uc3RydWN0b3IoZGF0YTogVmlkZW9FbmNvZGVyQXZnUVBFdmVudFsnZGF0YSddKSB7XG4gICAgICAgIHN1cGVyKCd2aWRlb0VuY29kZXJBdmdRUCcpO1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgIH1cbn1cblxuLyoqXG4gKiBBbiBldmVudCB0aGF0IGlzIGVtaXR0ZWQgYWZ0ZXIgYSBXZWJSdGMgY29ubmVjdGlvbiBoYXMgYmVlbiBuZWdvdGlhdGVkLiBcbiAqL1xuZXhwb3J0IGNsYXNzIFdlYlJ0Y1NkcEV2ZW50IGV4dGVuZHMgRXZlbnQge1xuICAgIHJlYWRvbmx5IHR5cGU6ICd3ZWJSdGNTZHAnO1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcignd2ViUnRjU2RwJyk7XG4gICAgfVxufVxuXG4vKipcbiAqIEFuIGV2ZW50IHRoYXQgaXMgZW1pdHRlZCB3aGVuIGF1dG8gY29ubmVjdGluZy5cbiAqL1xuZXhwb3J0IGNsYXNzIFdlYlJ0Y0F1dG9Db25uZWN0RXZlbnQgZXh0ZW5kcyBFdmVudCB7XG4gICAgcmVhZG9ubHkgdHlwZTogJ3dlYlJ0Y0F1dG9Db25uZWN0JztcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoJ3dlYlJ0Y0F1dG9Db25uZWN0Jyk7XG4gICAgfVxufVxuXG4vKipcbiAqIEFuIGV2ZW50IHRoYXQgaXMgZW1pdHRlZCB3aGVuIHNlbmRpbmcgYSBXZWJSdGMgb2ZmZXIuXG4gKi9cbmV4cG9ydCBjbGFzcyBXZWJSdGNDb25uZWN0aW5nRXZlbnQgZXh0ZW5kcyBFdmVudCB7XG4gICAgcmVhZG9ubHkgdHlwZTogJ3dlYlJ0Y0Nvbm5lY3RpbmcnO1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcignd2ViUnRjQ29ubmVjdGluZycpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBBbiBldmVudCB0aGF0IGlzIGVtaXR0ZWQgd2hlbiBXZWJSdGMgY29ubmVjdGlvbiBoYXMgYmVlbiBlc3RhYmxpc2hlZC5cbiAqL1xuZXhwb3J0IGNsYXNzIFdlYlJ0Y0Nvbm5lY3RlZEV2ZW50IGV4dGVuZHMgRXZlbnQge1xuICAgIHJlYWRvbmx5IHR5cGU6ICd3ZWJSdGNDb25uZWN0ZWQnO1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcignd2ViUnRjQ29ubmVjdGVkJyk7XG4gICAgfVxufVxuXG4vKipcbiAqIEFuIGV2ZW50IHRoYXQgaXMgZW1pdHRlZCBpZiBXZWJSdGMgY29ubmVjdGlvbiBoYXMgZmFpbGVkLlxuICovXG5leHBvcnQgY2xhc3MgV2ViUnRjRmFpbGVkRXZlbnQgZXh0ZW5kcyBFdmVudCB7XG4gICAgcmVhZG9ubHkgdHlwZTogJ3dlYlJ0Y0ZhaWxlZCc7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCd3ZWJSdGNGYWlsZWQnKTtcbiAgICB9XG59XG5cbi8qKlxuICogQW4gZXZlbnQgdGhhdCBpcyBlbWl0dGVkIGlmIFdlYlJ0YyBjb25uZWN0aW9uIGlzIGRpc2Nvbm5lY3RlZC5cbiAqL1xuZXhwb3J0IGNsYXNzIFdlYlJ0Y0Rpc2Nvbm5lY3RlZEV2ZW50IGV4dGVuZHMgRXZlbnQge1xuICAgIHJlYWRvbmx5IHR5cGU6ICd3ZWJSdGNEaXNjb25uZWN0ZWQnO1xuICAgIHJlYWRvbmx5IGRhdGE6IHtcbiAgICAgICAgLyoqIE1lc3NhZ2UgZGVzY3JpYmluZyB0aGUgZGlzY29ubmVjdCByZWFzb24gKi9cbiAgICAgICAgZXZlbnRTdHJpbmc6IHN0cmluZztcbiAgICAgICAgLyoqIHRydWUgaWYgdGhlIHVzZXIgaXMgYWJsZSB0byByZWNvbm5lY3QsIGZhbHNlIGlmIGRpc2Nvbm5lY3RlZCBiZWNhdXNlIG9mIHVucmVjb3ZlcmFibGUgcmVhc29ucyBsaWtlIG5vdCBhYmxlIHRvIGNvbm5lY3QgdG8gdGhlIHNpZ25hbGluZyBzZXJ2ZXIgKi9cbiAgICAgICAgc2hvd0FjdGlvbk9yRXJyb3JPbkRpc2Nvbm5lY3Q6IGJvb2xlYW47XG4gICAgfTtcbiAgICBjb25zdHJ1Y3RvcihkYXRhOiBXZWJSdGNEaXNjb25uZWN0ZWRFdmVudFsnZGF0YSddKSB7XG4gICAgICAgIHN1cGVyKCd3ZWJSdGNEaXNjb25uZWN0ZWQnKTtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICB9XG59XG5cbi8qKlxuICogQW4gZXZlbnQgdGhhdCBpcyBlbWl0dGVkIHdoZW4gUlRDRGF0YUNoYW5uZWwgaXMgb3BlbmVkLlxuICovXG5leHBvcnQgY2xhc3MgRGF0YUNoYW5uZWxPcGVuRXZlbnQgZXh0ZW5kcyBFdmVudCB7XG4gICAgcmVhZG9ubHkgdHlwZTogJ2RhdGFDaGFubmVsT3Blbic7XG4gICAgcmVhZG9ubHkgZGF0YToge1xuICAgICAgICAvKiogRGF0YSBjaGFubmVsIGxhYmVsLiBPbmUgb2YgJ2RhdGFjaGFubmVsJywgJ3NlbmQtZGF0YWNoYW5uZWwnLCAncmVjdi1kYXRhY2hhbm5lbCcgKi9cbiAgICAgICAgbGFiZWw6IHN0cmluZztcbiAgICAgICAgLyoqIFJUQ0RhdGFDaGFubmVsIG9uT3BlbiBldmVudCAqL1xuICAgICAgICBldmVudDogRXZlbnRcbiAgICB9O1xuICAgIGNvbnN0cnVjdG9yKGRhdGE6IERhdGFDaGFubmVsT3BlbkV2ZW50WydkYXRhJ10pIHtcbiAgICAgICAgc3VwZXIoJ2RhdGFDaGFubmVsT3BlbicpO1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgIH1cbn1cblxuLyoqXG4gKiBBbiBldmVudCB0aGF0IGlzIGVtaXR0ZWQgd2hlbiBSVENEYXRhQ2hhbm5lbCBpcyBjbG9zZWQuXG4gKi9cbmV4cG9ydCBjbGFzcyBEYXRhQ2hhbm5lbENsb3NlRXZlbnQgZXh0ZW5kcyBFdmVudCB7XG4gICAgcmVhZG9ubHkgdHlwZTogJ2RhdGFDaGFubmVsQ2xvc2UnO1xuICAgIHJlYWRvbmx5IGRhdGE6IHtcbiAgICAgICAgLyoqIERhdGEgY2hhbm5lbCBsYWJlbC4gT25lIG9mICdkYXRhY2hhbm5lbCcsICdzZW5kLWRhdGFjaGFubmVsJywgJ3JlY3YtZGF0YWNoYW5uZWwnICovXG4gICAgICAgIGxhYmVsOiBzdHJpbmc7XG4gICAgICAgIC8qKiBSVENEYXRhQ2hhbm5lbCBvbkNsb3NlIGV2ZW50ICovXG4gICAgICAgIGV2ZW50OiBFdmVudFxuICAgIH07XG4gICAgY29uc3RydWN0b3IoZGF0YTogRGF0YUNoYW5uZWxDbG9zZUV2ZW50WydkYXRhJ10pIHtcbiAgICAgICAgc3VwZXIoJ2RhdGFDaGFubmVsQ2xvc2UnKTtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICB9XG59XG5cbi8qKlxuICogQW4gZXZlbnQgdGhhdCBpcyBlbWl0dGVkIG9uIFJUQ0RhdGFDaGFubmVsIGVycm9ycy5cbiAqL1xuZXhwb3J0IGNsYXNzIERhdGFDaGFubmVsRXJyb3JFdmVudCBleHRlbmRzIEV2ZW50IHtcbiAgICByZWFkb25seSB0eXBlOiAnZGF0YUNoYW5uZWxFcnJvcic7XG4gICAgcmVhZG9ubHkgZGF0YToge1xuICAgICAgICAvKiogRGF0YSBjaGFubmVsIGxhYmVsLiBPbmUgb2YgJ2RhdGFjaGFubmVsJywgJ3NlbmQtZGF0YWNoYW5uZWwnLCAncmVjdi1kYXRhY2hhbm5lbCcgKi9cbiAgICAgICAgbGFiZWw6IHN0cmluZztcbiAgICAgICAgLyoqIFJUQ0RhdGFDaGFubmVsIG9uRXJyb3IgZXZlbnQgKi9cbiAgICAgICAgZXZlbnQ6IEV2ZW50XG4gICAgfTtcbiAgICBjb25zdHJ1Y3RvcihkYXRhOiBEYXRhQ2hhbm5lbEVycm9yRXZlbnRbJ2RhdGEnXSkge1xuICAgICAgICBzdXBlcignZGF0YUNoYW5uZWxFcnJvcicpO1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgIH1cbn1cblxuLyoqXG4gKiBBbiBldmVudCB0aGF0IGlzIGVtaXR0ZWQgd2hlbiB0aGUgdmlkZW8gc3RyZWFtIGhhcyBiZWVuIGluaXRpYWxpemVkLlxuICovXG5leHBvcnQgY2xhc3MgVmlkZW9Jbml0aWFsaXplZEV2ZW50IGV4dGVuZHMgRXZlbnQge1xuICAgIHJlYWRvbmx5IHR5cGU6ICd2aWRlb0luaXRpYWxpemVkJztcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoJ3ZpZGVvSW5pdGlhbGl6ZWQnKTtcbiAgICB9XG59XG5cbi8qKlxuICogQW4gZXZlbnQgdGhhdCBpcyBlbWl0dGVkIHdoZW4gdmlkZW8gc3RyZWFtIGxvYWRpbmcgc3RhcnRzLlxuICovXG5leHBvcnQgY2xhc3MgU3RyZWFtTG9hZGluZ0V2ZW50IGV4dGVuZHMgRXZlbnQge1xuICAgIHJlYWRvbmx5IHR5cGU6ICdzdHJlYW1Mb2FkaW5nJztcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoJ3N0cmVhbUxvYWRpbmcnKTtcbiAgICB9XG59XG5cbi8qKlxuICogQW4gZXZlbnQgdGhhdCBpcyBlbWl0dGVkIHdoZW4gdmlkZW8gc3RyZWFtIGxvYWRpbmcgaGFzIGZpbmlzaGVkLlxuICovXG5leHBvcnQgY2xhc3MgU3RyZWFtUHJlQ29ubmVjdEV2ZW50IGV4dGVuZHMgRXZlbnQge1xuICAgIHJlYWRvbmx5IHR5cGU6ICdzdHJlYW1Db25uZWN0JztcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoJ3N0cmVhbUNvbm5lY3QnKTtcbiAgICB9XG59XG5cbi8qKlxuICogQW4gZXZlbnQgdGhhdCBpcyBlbWl0dGVkIHdoZW4gdmlkZW8gc3RyZWFtIGhhcyBzdG9wcGVkLlxuICovXG5leHBvcnQgY2xhc3MgU3RyZWFtUHJlRGlzY29ubmVjdEV2ZW50IGV4dGVuZHMgRXZlbnQge1xuICAgIHJlYWRvbmx5IHR5cGU6ICdzdHJlYW1EaXNjb25uZWN0JztcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoJ3N0cmVhbURpc2Nvbm5lY3QnKTtcbiAgICB9XG59XG5cbi8qKlxuICogQW4gZXZlbnQgdGhhdCBpcyBlbWl0dGVkIHdoZW4gdmlkZW8gc3RyZWFtIGlzIHJlY29ubmVjdGluZy5cbiAqL1xuZXhwb3J0IGNsYXNzIFN0cmVhbVJlY29ubmVjdEV2ZW50IGV4dGVuZHMgRXZlbnQge1xuICAgIHJlYWRvbmx5IHR5cGU6ICdzdHJlYW1SZWNvbm5lY3QnO1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcignc3RyZWFtUmVjb25uZWN0Jyk7XG4gICAgfVxufVxuXG4vKipcbiAqIEFuIGV2ZW50IHRoYXQgaXMgZW1pdHRlZCBpZiB0aGVyZSBhcmUgZXJyb3JzIGxvYWRpbmcgdGhlIHZpZGVvIHN0cmVhbS5cbiAqL1xuZXhwb3J0IGNsYXNzIFBsYXlTdHJlYW1FcnJvckV2ZW50IGV4dGVuZHMgRXZlbnQge1xuICAgIHJlYWRvbmx5IHR5cGU6ICdwbGF5U3RyZWFtRXJyb3InO1xuICAgIHJlYWRvbmx5IGRhdGE6IHtcbiAgICAgICAgLyoqIEVycm9yIG1lc3NhZ2UgKi9cbiAgICAgICAgbWVzc2FnZTogc3RyaW5nXG4gICAgfTtcbiAgICBjb25zdHJ1Y3RvcihkYXRhOiBQbGF5U3RyZWFtRXJyb3JFdmVudFsnZGF0YSddKSB7XG4gICAgICAgIHN1cGVyKCdwbGF5U3RyZWFtRXJyb3InKTtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICB9XG59XG5cbi8qKlxuICogQW4gZXZlbnQgdGhhdCBpcyBlbWl0dGVkIGJlZm9yZSB0cnlpbmcgdG8gc3RhcnQgdmlkZW8gcGxheWJhY2suXG4gKi9cbmV4cG9ydCBjbGFzcyBQbGF5U3RyZWFtRXZlbnQgZXh0ZW5kcyBFdmVudCB7XG4gICAgcmVhZG9ubHkgdHlwZTogJ3BsYXlTdHJlYW0nO1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigncGxheVN0cmVhbScpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBBbiBldmVudCB0aGF0IGlzIGVtaXR0ZWQgaWYgdGhlIGJyb3dzZXIgcmVqZWN0cyB2aWRlbyBwbGF5YmFjay4gQ2FuIGhhcHBlbiBmb3IgZXhhbXBsZSBpZlxuICogdmlkZW8gYXV0by1wbGF5IHdpdGhvdXQgdXNlciBpbnRlcmFjdGlvbiBpcyByZWZ1c2VkIGJ5IHRoZSBicm93c2VyLlxuICovXG5leHBvcnQgY2xhc3MgUGxheVN0cmVhbVJlamVjdGVkRXZlbnQgZXh0ZW5kcyBFdmVudCB7XG4gICAgcmVhZG9ubHkgdHlwZTogJ3BsYXlTdHJlYW1SZWplY3RlZCc7XG4gICAgcmVhZG9ubHkgZGF0YToge1xuICAgICAgICAvKiogUmVqZWN0aW9uIHJlYXNvbiAqL1xuICAgICAgICByZWFzb246IHVua25vd25cbiAgICB9O1xuICAgIGNvbnN0cnVjdG9yKGRhdGE6IFBsYXlTdHJlYW1SZWplY3RlZEV2ZW50WydkYXRhJ10pIHtcbiAgICAgICAgc3VwZXIoJ3BsYXlTdHJlYW1SZWplY3RlZCcpO1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgIH1cbn1cblxuLyoqXG4gKiBBbiBldmVudCB0aGF0IGlzIGVtaXR0ZWQgd2hlbiByZWNlaXZpbmcgYSBmdWxsIEZyZWV6ZUZyYW1lIGltYWdlIGZyb20gVUUuXG4gKi9cbmV4cG9ydCBjbGFzcyBMb2FkRnJlZXplRnJhbWVFdmVudCBleHRlbmRzIEV2ZW50IHtcbiAgICByZWFkb25seSB0eXBlOiAnbG9hZEZyZWV6ZUZyYW1lJztcbiAgICByZWFkb25seSBkYXRhOiB7XG4gICAgICAgIC8qKiB0cnVlIGlmIHNob3VsZCBzaG93IGNsaWNrLXRvLXBsYXkgb3ZlcmxheSwgbm90IHRoZSBmcmVlemUgZnJhbWUgY29udGVudHMgKi9cbiAgICAgICAgc2hvdWxkU2hvd1BsYXlPdmVybGF5OiBib29sZWFuO1xuICAgICAgICAvKiogdHJ1ZSBpZiB0aGUgcmVjZWl2ZWQgaW1hZ2UgaXMgdmFsaWQgKi9cbiAgICAgICAgaXNWYWxpZDogYm9vbGVhbjtcbiAgICAgICAgLyoqIEltYWdlIGRhdGEuIENhbiBiZSBlLmcuIGRpc3BsYXllZCBieSBlbmNvZGluZyBhcyBhIGRhdGEgdXJsLiAqL1xuICAgICAgICBqcGVnRGF0YT86IFVpbnQ4QXJyYXk7XG4gICAgfTtcbiAgICBjb25zdHJ1Y3RvcihkYXRhOiBMb2FkRnJlZXplRnJhbWVFdmVudFsnZGF0YSddKSB7XG4gICAgICAgIHN1cGVyKCdsb2FkRnJlZXplRnJhbWUnKTtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICB9XG59XG5cbi8qKlxuICogQW4gZXZlbnQgdGhhdCBpcyBlbWl0dGVkIHdoZW4gcmVjZWl2aW5nIFVuZnJlZXplRnJhbWUgbWVzc2FnZSBmcm9tIFVFIGFuZCB2aWRlbyBwbGF5YmFjayBpcyBhYm91dCB0byBiZSByZXN1bWVkLlxuICovXG5leHBvcnQgY2xhc3MgSGlkZUZyZWV6ZUZyYW1lRXZlbnQgZXh0ZW5kcyBFdmVudCB7XG4gICAgcmVhZG9ubHkgdHlwZTogJ2hpZGVGcmVlemVGcmFtZSc7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCdoaWRlRnJlZXplRnJhbWUnKTtcbiAgICB9XG59XG5cbi8qKlxuICogQW4gZXZlbnQgdGhhdCBpcyBlbWl0dGVkIHdoZW4gcmVjZWl2aW5nIFdlYlJUQyBzdGF0aXN0aWNzLlxuICovXG5leHBvcnQgY2xhc3MgU3RhdHNSZWNlaXZlZEV2ZW50IGV4dGVuZHMgRXZlbnQge1xuICAgIHJlYWRvbmx5IHR5cGU6ICdzdGF0c1JlY2VpdmVkJztcbiAgICByZWFkb25seSBkYXRhOiB7XG4gICAgICAgIC8qKiBTdGF0aXN0aWNzIG9iamVjdCAqL1xuICAgICAgICBhZ2dyZWdhdGVkU3RhdHM6IEFnZ3JlZ2F0ZWRTdGF0c1xuICAgIH07XG4gICAgY29uc3RydWN0b3IoZGF0YTogU3RhdHNSZWNlaXZlZEV2ZW50WydkYXRhJ10pIHtcbiAgICAgICAgc3VwZXIoJ3N0YXRzUmVjZWl2ZWQnKTtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICB9XG59XG5cbi8qKlxuICogQW4gZXZlbnQgdGhhdCBpcyBlbWl0dGVkIHdoZW4gc3RyZWFtZXIgbGlzdCBjaGFuZ2VzLlxuICovXG5leHBvcnQgY2xhc3MgU3RyZWFtZXJMaXN0TWVzc2FnZUV2ZW50IGV4dGVuZHMgRXZlbnQge1xuICAgIHJlYWRvbmx5IHR5cGU6ICdzdHJlYW1lckxpc3RNZXNzYWdlJztcbiAgICByZWFkb25seSBkYXRhOiB7XG4gICAgICAgIC8qKiBTdHJlYW1lciBsaXN0IG1lc3NhZ2UgY29udGFpbmluZyBhbiBhcnJheSBvZiBzdHJlYW1lciBpZHMgKi9cbiAgICAgICAgbWVzc2FnZVN0cmVhbWVyTGlzdDogTWVzc2FnZVN0cmVhbWVyTGlzdDtcbiAgICAgICAgLyoqIEF1dG8tc2VsZWN0ZWQgc3RyZWFtZXIgZnJvbSB0aGUgbGlzdCwgb3IgbnVsbCBpZiB1bmFibGUgdG8gYXV0by1zZWxlY3QgYW5kIHVzZXIgc2hvdWxkIGJlIHByb21wdGVkIHRvIHNlbGVjdCAqL1xuICAgICAgICBhdXRvU2VsZWN0ZWRTdHJlYW1lcklkOiBzdHJpbmcgfCBudWxsO1xuICAgIH07XG4gICAgY29uc3RydWN0b3IoZGF0YTogU3RyZWFtZXJMaXN0TWVzc2FnZUV2ZW50WydkYXRhJ10pIHtcbiAgICAgICAgc3VwZXIoJ3N0cmVhbWVyTGlzdE1lc3NhZ2UnKTtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICB9XG59XG5cbi8qKlxuICogQW4gZXZlbnQgdGhhdCBpcyBlbWl0dGVkIHdoZW4gcmVjZWl2aW5nIGxhdGVuY3kgdGVzdCByZXN1bHRzLlxuICovXG5leHBvcnQgY2xhc3MgTGF0ZW5jeVRlc3RSZXN1bHRFdmVudCBleHRlbmRzIEV2ZW50IHtcbiAgICByZWFkb25seSB0eXBlOiAnbGF0ZW5jeVRlc3RSZXN1bHQnO1xuICAgIHJlYWRvbmx5IGRhdGE6IHtcbiAgICAgICAgLyoqIExhdGVuY3kgdGVzdCByZXN1bHQgb2JqZWN0ICovXG4gICAgICAgIGxhdGVuY3lUaW1pbmdzOiBMYXRlbmN5VGVzdFJlc3VsdHNcbiAgICB9O1xuICAgIGNvbnN0cnVjdG9yKGRhdGE6IExhdGVuY3lUZXN0UmVzdWx0RXZlbnRbJ2RhdGEnXSkge1xuICAgICAgICBzdXBlcignbGF0ZW5jeVRlc3RSZXN1bHQnKTtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICB9XG59XG5cbi8qKlxuICogQW4gZXZlbnQgdGhhdCBpcyBlbWl0dGVkIHdoZW4gcmVjZWl2aW5nIGluaXRpYWwgc2V0dGluZ3MgZnJvbSBVRS5cbiAqL1xuZXhwb3J0IGNsYXNzIEluaXRpYWxTZXR0aW5nc0V2ZW50IGV4dGVuZHMgRXZlbnQge1xuICAgIHJlYWRvbmx5IHR5cGU6ICdpbml0aWFsU2V0dGluZ3MnO1xuICAgIHJlYWRvbmx5IGRhdGE6IHtcbiAgICAgICAgLyoqIEluaXRpYWwgc2V0dGluZ3MgZnJvbSBVRSAqL1xuICAgICAgICBzZXR0aW5nczogSW5pdGlhbFNldHRpbmdzXG4gICAgfTtcbiAgICBjb25zdHJ1Y3RvcihkYXRhOiBJbml0aWFsU2V0dGluZ3NFdmVudFsnZGF0YSddKSB7XG4gICAgICAgIHN1cGVyKCdpbml0aWFsU2V0dGluZ3MnKTtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICB9XG59XG5cbmV4cG9ydCB0eXBlIFNldHRpbmdzRGF0YSA9XG4gICAgfCB7XG4gICAgICAgICAgLyoqIEZsYWcgaWQgKi9cbiAgICAgICAgICBpZDogRmxhZ3NJZHM7XG4gICAgICAgICAgdHlwZTogJ2ZsYWcnO1xuICAgICAgICAgIC8qKiBGbGFnIHZhbHVlICovXG4gICAgICAgICAgdmFsdWU6IGJvb2xlYW47XG4gICAgICAgICAgLyoqIFNldHRpbmdGbGFnIG9iamVjdCAqL1xuICAgICAgICAgIHRhcmdldDogU2V0dGluZ0ZsYWc7XG4gICAgICB9XG4gICAgfCB7XG4gICAgICAgICAgLyoqIE51bWVyaWMgc2V0dGluZyBpZCAqL1xuICAgICAgICAgIGlkOiBOdW1lcmljUGFyYW1ldGVyc0lkcztcbiAgICAgICAgICB0eXBlOiAnbnVtYmVyJztcbiAgICAgICAgICAvKiogTnVtZXJpYyBzZXR0aW5nIHZhbHVlICovXG4gICAgICAgICAgdmFsdWU6IG51bWJlcjtcbiAgICAgICAgICAvKiogU2V0dGluZ051bWJlciBvYmplY3QgKi9cbiAgICAgICAgICB0YXJnZXQ6IFNldHRpbmdOdW1iZXI7XG4gICAgICB9XG4gICAgfCB7XG4gICAgICAgICAgLyoqIFRleHQgc2V0dGluZyBpZCAqL1xuICAgICAgICAgIGlkOiBUZXh0UGFyYW1ldGVyc0lkcztcbiAgICAgICAgICB0eXBlOiAndGV4dCc7XG4gICAgICAgICAgLyoqIFRleHQgc2V0dGluZyB2YWx1ZSAqL1xuICAgICAgICAgIHZhbHVlOiBzdHJpbmc7XG4gICAgICAgICAgLyoqIFNldHRpbmdUZXh0IG9iamVjdCAqL1xuICAgICAgICAgIHRhcmdldDogU2V0dGluZ1RleHQ7XG4gICAgICB9XG4gICAgfCB7XG4gICAgICAgICAgLyoqIE9wdGlvbiBzZXR0aW5nIGlkICovXG4gICAgICAgICAgaWQ6IE9wdGlvblBhcmFtZXRlcnNJZHM7XG4gICAgICAgICAgdHlwZTogJ29wdGlvbic7XG4gICAgICAgICAgLyoqIE9wdGlvbiBzZXR0aW5nIHNlbGVjdGVkIHZhbHVlICovXG4gICAgICAgICAgdmFsdWU6IHN0cmluZztcbiAgICAgICAgICAvKiogU2V0dGluZ09wdGlvbiBvYmplY3QgKi9cbiAgICAgICAgICB0YXJnZXQ6IFNldHRpbmdPcHRpb247XG4gICAgICB9O1xuXG4vKipcbiAqIEFuIGV2ZW50IHRoYXQgaXMgZW1pdHRlZCB3aGVuIFBpeGVsU3RyZWFtaW5nIHNldHRpbmdzIGNoYW5nZS5cbiAqL1xuZXhwb3J0IGNsYXNzIFNldHRpbmdzQ2hhbmdlZEV2ZW50IGV4dGVuZHMgRXZlbnQge1xuICAgIHJlYWRvbmx5IHR5cGU6ICdzZXR0aW5nc0NoYW5nZWQnO1xuICAgIHJlYWRvbmx5IGRhdGE6IFNldHRpbmdzRGF0YTtcbiAgICBjb25zdHJ1Y3RvcihkYXRhOiBTZXR0aW5nc0NoYW5nZWRFdmVudFsnZGF0YSddKSB7XG4gICAgICAgIHN1cGVyKCdzZXR0aW5nc0NoYW5nZWQnKTtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICB9XG59XG5cbi8qKlxuICogRXZlbnQgZW1pdHRlZCB3aGVuIGFuIFhSIFNlc3Npb24gc3RhcnRzXG4gKi9cbmV4cG9ydCBjbGFzcyBYclNlc3Npb25TdGFydGVkRXZlbnQgZXh0ZW5kcyBFdmVudCB7XG4gICAgcmVhZG9ubHkgdHlwZTogJ3hyU2Vzc2lvblN0YXJ0ZWQnO1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigneHJTZXNzaW9uU3RhcnRlZCcpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBFdmVudCBlbWl0dGVkIHdoZW4gYW4gWFIgU2Vzc2lvbiBlbmRzXG4gKi9cbmV4cG9ydCBjbGFzcyBYclNlc3Npb25FbmRlZEV2ZW50IGV4dGVuZHMgRXZlbnQge1xuICAgIHJlYWRvbmx5IHR5cGU6ICd4clNlc3Npb25FbmRlZCc7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCd4clNlc3Npb25FbmRlZCcpO1xuICAgIH1cbn1cblxuZXhwb3J0IHR5cGUgWHJGcmFtZURhdGEgPSB7XG4gICAgLyoqIFRoZSBmcmFtZSB0aW1lc3RhbXAgICovXG4gICAgdGltZTogRE9NSGlnaFJlc1RpbWVTdGFtcDtcbiAgICAvKiogVGhlIFhSRnJhbWUgKi9cbiAgICBmcmFtZTogWFJGcmFtZTtcbn07XG5cbi8qKlxuICogRXZlbnQgZW1pdHRlZCB3aGVuIGFuIFhSIEZyYW1lIGlzIGNvbXBsZXRlXG4gKi9cbmV4cG9ydCBjbGFzcyBYckZyYW1lRXZlbnQgZXh0ZW5kcyBFdmVudCB7XG4gICAgcmVhZG9ubHkgdHlwZTogJ3hyRnJhbWUnO1xuICAgIHJlYWRvbmx5IGRhdGE6IFhyRnJhbWVEYXRhXG4gICAgY29uc3RydWN0b3IoZGF0YTogWHJGcmFtZUV2ZW50WydkYXRhJ10pIHtcbiAgICAgICAgc3VwZXIoJ3hyRnJhbWUnKTtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICB9XG59XG5cbmV4cG9ydCB0eXBlIFBpeGVsU3RyZWFtaW5nRXZlbnQgPVxuICAgIHwgQWZrV2FybmluZ0FjdGl2YXRlRXZlbnRcbiAgICB8IEFma1dhcm5pbmdVcGRhdGVFdmVudFxuICAgIHwgQWZrV2FybmluZ0RlYWN0aXZhdGVFdmVudFxuICAgIHwgQWZrVGltZWRPdXRFdmVudFxuICAgIHwgVmlkZW9FbmNvZGVyQXZnUVBFdmVudFxuICAgIHwgV2ViUnRjU2RwRXZlbnRcbiAgICB8IFdlYlJ0Y0F1dG9Db25uZWN0RXZlbnRcbiAgICB8IFdlYlJ0Y0Nvbm5lY3RpbmdFdmVudFxuICAgIHwgV2ViUnRjQ29ubmVjdGVkRXZlbnRcbiAgICB8IFdlYlJ0Y0ZhaWxlZEV2ZW50XG4gICAgfCBXZWJSdGNEaXNjb25uZWN0ZWRFdmVudFxuICAgIHwgRGF0YUNoYW5uZWxPcGVuRXZlbnRcbiAgICB8IERhdGFDaGFubmVsQ2xvc2VFdmVudFxuICAgIHwgRGF0YUNoYW5uZWxFcnJvckV2ZW50XG4gICAgfCBWaWRlb0luaXRpYWxpemVkRXZlbnRcbiAgICB8IFN0cmVhbUxvYWRpbmdFdmVudFxuICAgIHwgU3RyZWFtUHJlQ29ubmVjdEV2ZW50XG4gICAgfCBTdHJlYW1SZWNvbm5lY3RFdmVudFxuICAgIHwgU3RyZWFtUHJlRGlzY29ubmVjdEV2ZW50XG4gICAgfCBQbGF5U3RyZWFtRXJyb3JFdmVudFxuICAgIHwgUGxheVN0cmVhbUV2ZW50XG4gICAgfCBQbGF5U3RyZWFtUmVqZWN0ZWRFdmVudFxuICAgIHwgTG9hZEZyZWV6ZUZyYW1lRXZlbnRcbiAgICB8IEhpZGVGcmVlemVGcmFtZUV2ZW50XG4gICAgfCBTdGF0c1JlY2VpdmVkRXZlbnRcbiAgICB8IFN0cmVhbWVyTGlzdE1lc3NhZ2VFdmVudFxuICAgIHwgTGF0ZW5jeVRlc3RSZXN1bHRFdmVudFxuICAgIHwgSW5pdGlhbFNldHRpbmdzRXZlbnRcbiAgICB8IFNldHRpbmdzQ2hhbmdlZEV2ZW50XG4gICAgfCBYclNlc3Npb25TdGFydGVkRXZlbnRcbiAgICB8IFhyU2Vzc2lvbkVuZGVkRXZlbnRcbiAgICB8IFhyRnJhbWVFdmVudDtcblxuZXhwb3J0IGNsYXNzIEV2ZW50RW1pdHRlciBleHRlbmRzIEV2ZW50VGFyZ2V0IHtcbiAgICAvKipcbiAgICAgKiBEaXNwYXRjaCBhIG5ldyBldmVudC5cbiAgICAgKiBAcGFyYW0gZSBldmVudFxuICAgICAqIEByZXR1cm5zXG4gICAgICovXG4gICAgcHVibGljIGRpc3BhdGNoRXZlbnQoZTogUGl4ZWxTdHJlYW1pbmdFdmVudCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gc3VwZXIuZGlzcGF0Y2hFdmVudChlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWdpc3RlciBhbiBldmVudCBoYW5kbGVyLlxuICAgICAqIEBwYXJhbSB0eXBlIGV2ZW50IG5hbWVcbiAgICAgKiBAcGFyYW0gbGlzdGVuZXIgZXZlbnQgaGFuZGxlciBmdW5jdGlvblxuICAgICAqL1xuICAgIHB1YmxpYyBhZGRFdmVudExpc3RlbmVyPFxuICAgICAgICBUIGV4dGVuZHMgUGl4ZWxTdHJlYW1pbmdFdmVudFsndHlwZSddLFxuICAgICAgICBFIGV4dGVuZHMgUGl4ZWxTdHJlYW1pbmdFdmVudCAmIHsgdHlwZTogVCB9XG4gICAgPih0eXBlOiBULCBsaXN0ZW5lcjogKGU6IEV2ZW50ICYgRSkgPT4gdm9pZCkge1xuICAgICAgICBzdXBlci5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYW4gZXZlbnQgaGFuZGxlci5cbiAgICAgKiBAcGFyYW0gdHlwZSBldmVudCBuYW1lXG4gICAgICogQHBhcmFtIGxpc3RlbmVyIGV2ZW50IGhhbmRsZXIgZnVuY3Rpb25cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVtb3ZlRXZlbnRMaXN0ZW5lcjxcbiAgICAgICAgVCBleHRlbmRzIFBpeGVsU3RyZWFtaW5nRXZlbnRbJ3R5cGUnXSxcbiAgICAgICAgRSBleHRlbmRzIFBpeGVsU3RyZWFtaW5nRXZlbnQgJiB7IHR5cGU6IFQgfVxuICAgID4odHlwZTogVCwgbGlzdGVuZXI6IChlOiBFdmVudCAmIEUpID0+IHZvaWQpIHtcbiAgICAgICAgc3VwZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcik7XG4gICAgfVxufVxuIiwiLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuZXhwb3J0IHR5cGUgVW5yZWdpc3RlckZ1bmN0aW9uID0gKCkgPT4gdm9pZDtcblxuZXhwb3J0IGNsYXNzIEV2ZW50TGlzdGVuZXJUcmFja2VyIHtcbiAgICBwcml2YXRlIHVucmVnaXN0ZXJDYWxsYmFja3M6IFVucmVnaXN0ZXJGdW5jdGlvbltdO1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMudW5yZWdpc3RlckNhbGxiYWNrcyA9IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZCBhIG5ldyBjYWxsYmFjayB0aGF0IGlzIGV4ZWN1dGVkIHdoZW4gdW5yZWdpc3RlckFsbCBpcyBjYWxsZWQuXG4gICAgICogQHBhcmFtIGNhbGxiYWNrIFxuICAgICAqL1xuICAgIGFkZFVucmVnaXN0ZXJDYWxsYmFjayhjYWxsYmFjazogVW5yZWdpc3RlckZ1bmN0aW9uKSB7XG4gICAgICAgIHRoaXMudW5yZWdpc3RlckNhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFeGVjdXRlIGFsbCBjYWxsYmFja3MgYW5kIGNsZWFyIHRoZSBsaXN0LlxuICAgICAqL1xuICAgIHVucmVnaXN0ZXJBbGwoKSB7XG4gICAgICAgIGZvciAoY29uc3QgY2FsbGJhY2sgb2YgdGhpcy51bnJlZ2lzdGVyQ2FsbGJhY2tzKSB7XG4gICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudW5yZWdpc3RlckNhbGxiYWNrcyA9IFtdO1xuICAgIH1cbn1cbiIsIi8vIENvcHlyaWdodCBFcGljIEdhbWVzLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG5cbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJy4uL0xvZ2dlci9Mb2dnZXInO1xuXG4vKipcbiAqIFV0aWxpdHkgZnVuY3Rpb24gZm9yIHBvcHVsYXRlIGZpbGUgaW5mb3JtYXRpb24gZnJvbSBieXRlIGJ1ZmZlcnMuXG4gKi9cbmV4cG9ydCBjbGFzcyBGaWxlVXRpbCB7XG4gICAgLyoqXG4gICAgICogUHJvY2Vzc2VzIGEgZmlsZXMgZXh0ZW5zaW9uIHdoZW4gcmVjZWl2ZWQgb3ZlciBkYXRhIGNoYW5uZWxcbiAgICAgKiBAcGFyYW0gdmlldyAtIHRoZSBmaWxlIGV4dGVuc2lvbiBkYXRhXG4gICAgICovXG4gICAgc3RhdGljIHNldEV4dGVuc2lvbkZyb21CeXRlcyh2aWV3OiBVaW50OEFycmF5LCBmaWxlOiBGaWxlVGVtcGxhdGUpIHtcbiAgICAgICAgLy8gUmVzZXQgZmlsZSBpZiB3ZSBnb3QgYSBmaWxlIG1lc3NhZ2UgYW5kIHdlIGFyZSBub3QgXCJyZWNlaXZpbmdcIiBpdCB5ZXRcbiAgICAgICAgaWYgKCFmaWxlLnJlY2VpdmluZykge1xuICAgICAgICAgICAgZmlsZS5taW1ldHlwZSA9ICcnO1xuICAgICAgICAgICAgZmlsZS5leHRlbnNpb24gPSAnJztcbiAgICAgICAgICAgIGZpbGUucmVjZWl2aW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIGZpbGUudmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGZpbGUuc2l6ZSA9IDA7XG4gICAgICAgICAgICBmaWxlLmRhdGEgPSBbXTtcbiAgICAgICAgICAgIGZpbGUudGltZXN0YW1wU3RhcnQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAgICAgICAgIExvZ2dlci5Mb2coXG4gICAgICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcbiAgICAgICAgICAgICAgICAnUmVjZWl2ZWQgZmlyc3QgY2h1bmsgb2YgZmlsZScsXG4gICAgICAgICAgICAgICAgNlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGV4dGVuc2lvbkFzU3RyaW5nID0gbmV3IFRleHREZWNvZGVyKCd1dGYtMTYnKS5kZWNvZGUoXG4gICAgICAgICAgICB2aWV3LnNsaWNlKDEpXG4gICAgICAgICk7XG4gICAgICAgIExvZ2dlci5Mb2coTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgZXh0ZW5zaW9uQXNTdHJpbmcsIDYpO1xuICAgICAgICBmaWxlLmV4dGVuc2lvbiA9IGV4dGVuc2lvbkFzU3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFByb2Nlc3NlcyBhIGZpbGVzIG1pbWUgdHlwZSB3aGVuIHJlY2VpdmVkIG92ZXIgZGF0YSBjaGFubmVsXG4gICAgICogQHBhcmFtIHZpZXcgLSB0aGUgZmlsZSBtaW1lIHR5cGUgZGF0YVxuICAgICAqL1xuICAgIHN0YXRpYyBzZXRNaW1lVHlwZUZyb21CeXRlcyh2aWV3OiBVaW50OEFycmF5LCBmaWxlOiBGaWxlVGVtcGxhdGUpIHtcbiAgICAgICAgLy8gUmVzZXQgZmlsZSBpZiB3ZSBnb3QgYSBmaWxlIG1lc3NhZ2UgYW5kIHdlIGFyZSBub3QgXCJyZWNlaXZpbmdcIiBpdCB5ZXRcbiAgICAgICAgaWYgKCFmaWxlLnJlY2VpdmluZykge1xuICAgICAgICAgICAgZmlsZS5taW1ldHlwZSA9ICcnO1xuICAgICAgICAgICAgZmlsZS5leHRlbnNpb24gPSAnJztcbiAgICAgICAgICAgIGZpbGUucmVjZWl2aW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIGZpbGUudmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGZpbGUuc2l6ZSA9IDA7XG4gICAgICAgICAgICBmaWxlLmRhdGEgPSBbXTtcbiAgICAgICAgICAgIGZpbGUudGltZXN0YW1wU3RhcnQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAgICAgICAgIExvZ2dlci5Mb2coXG4gICAgICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcbiAgICAgICAgICAgICAgICAnUmVjZWl2ZWQgZmlyc3QgY2h1bmsgb2YgZmlsZScsXG4gICAgICAgICAgICAgICAgNlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG1pbWVBc1N0cmluZyA9IG5ldyBUZXh0RGVjb2RlcigndXRmLTE2JykuZGVjb2RlKHZpZXcuc2xpY2UoMSkpO1xuICAgICAgICBMb2dnZXIuTG9nKExvZ2dlci5HZXRTdGFja1RyYWNlKCksIG1pbWVBc1N0cmluZywgNik7XG4gICAgICAgIGZpbGUubWltZXR5cGUgPSBtaW1lQXNTdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUHJvY2Vzc2VzIGEgZmlsZXMgY29udGVudHMgd2hlbiByZWNlaXZlZCBvdmVyIGRhdGEgY2hhbm5lbFxuICAgICAqIEBwYXJhbSB2aWV3IC0gdGhlIGZpbGUgY29udGVudHMgZGF0YVxuICAgICAqL1xuICAgIHN0YXRpYyBzZXRDb250ZW50c0Zyb21CeXRlcyh2aWV3OiBVaW50OEFycmF5LCBmaWxlOiBGaWxlVGVtcGxhdGUpIHtcbiAgICAgICAgLy8gSWYgd2UgaGF2ZW4ndCByZWNlaXZlZCB0aGUgaW5pdGlhbCBzZXR1cCBpbnN0cnVjdGlvbnMsIHJldHVyblxuICAgICAgICBpZiAoIWZpbGUucmVjZWl2aW5nKSByZXR1cm47XG5cbiAgICAgICAgLy8gRXh0cmFjdCB0aGUgdG90YWwgc2l6ZSBvZiB0aGUgZmlsZSAoYWNyb3NzIGFsbCBjaHVua3MpXG4gICAgICAgIGZpbGUuc2l6ZSA9IE1hdGguY2VpbChcbiAgICAgICAgICAgIG5ldyBEYXRhVmlldyh2aWV3LnNsaWNlKDEsIDUpLmJ1ZmZlcikuZ2V0SW50MzIoMCwgdHJ1ZSkgL1xuICAgICAgICAgICAgICAgIDE2Mzc5IC8qIFRoZSBtYXhpbXVtIG51bWJlciBvZiBwYXlsb2FkIGJpdHMgcGVyIG1lc3NhZ2UqL1xuICAgICAgICApO1xuXG4gICAgICAgIC8vIEdldCB0aGUgZmlsZSBwYXJ0IG9mIHRoZSBwYXlsb2FkXG4gICAgICAgIGNvbnN0IGZpbGVCeXRlcyA9IHZpZXcuc2xpY2UoMSArIDQpO1xuXG4gICAgICAgIC8vIEFwcGVuZCB0byBleGlzdGluZyBkYXRhIHRoYXQgaG9sZHMgdGhlIGZpbGVcbiAgICAgICAgZmlsZS5kYXRhLnB1c2goZmlsZUJ5dGVzKTtcblxuICAgICAgICAvLyBVbmNvbW1lbnQgZm9yIGRlYnVnXG4gICAgICAgIExvZ2dlci5Mb2coXG4gICAgICAgICAgICBMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLFxuICAgICAgICAgICAgYFJlY2VpdmVkIGZpbGUgY2h1bms6ICR7ZmlsZS5kYXRhLmxlbmd0aH0vJHtmaWxlLnNpemV9YCxcbiAgICAgICAgICAgIDZcbiAgICAgICAgKTtcblxuICAgICAgICBpZiAoZmlsZS5kYXRhLmxlbmd0aCA9PT0gZmlsZS5zaXplKSB7XG4gICAgICAgICAgICBmaWxlLnJlY2VpdmluZyA9IGZhbHNlO1xuICAgICAgICAgICAgZmlsZS52YWxpZCA9IHRydWU7XG4gICAgICAgICAgICBMb2dnZXIuTG9nKExvZ2dlci5HZXRTdGFja1RyYWNlKCksICdSZWNlaXZlZCBjb21wbGV0ZSBmaWxlJywgNik7XG4gICAgICAgICAgICBjb25zdCB0cmFuc2ZlckR1cmF0aW9uID0gbmV3IERhdGUoKS5nZXRUaW1lKCkgLSBmaWxlLnRpbWVzdGFtcFN0YXJ0O1xuICAgICAgICAgICAgY29uc3QgdHJhbnNmZXJCaXRyYXRlID0gTWF0aC5yb3VuZChcbiAgICAgICAgICAgICAgICAoZmlsZS5zaXplICogMTYgKiAxMDI0KSAvIHRyYW5zZmVyRHVyYXRpb25cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBMb2dnZXIuTG9nKFxuICAgICAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXG4gICAgICAgICAgICAgICAgYEF2ZXJhZ2UgdHJhbnNmZXIgYml0cmF0ZTogJHt0cmFuc2ZlckJpdHJhdGV9a2IvcyBvdmVyICR7XG4gICAgICAgICAgICAgICAgICAgIHRyYW5zZmVyRHVyYXRpb24gLyAxMDAwXG4gICAgICAgICAgICAgICAgfSBzZWNvbmRzYCxcbiAgICAgICAgICAgICAgICA2XG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAvLyBGaWxlIHJlY29uc3RydWN0aW9uXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEV4YW1wbGUgY29kZSB0byByZWNvbnN0cnVjdCB0aGUgZmlsZVxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIFRoaXMgY29kZSByZWNvbnN0cnVjdHMgdGhlIHJlY2VpdmVkIGRhdGEgaW50byB0aGUgb3JpZ2luYWwgZmlsZSBiYXNlZCBvbiB0aGUgbWltZSB0eXBlIGFuZCBleHRlbnNpb24gcHJvdmlkZWQgYW5kIHRoZW4gZG93bmxvYWRzIHRoZSByZWNvbnN0cnVjdGVkIGZpbGVcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgY29uc3QgcmVjZWl2ZWQgPSBuZXcgQmxvYihmaWxlLmRhdGEsIHsgdHlwZTogZmlsZS5taW1ldHlwZSB9KTtcbiAgICAgICAgICAgIGNvbnN0IGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgICAgICAgICBhLnNldEF0dHJpYnV0ZSgnaHJlZicsIFVSTC5jcmVhdGVPYmplY3RVUkwocmVjZWl2ZWQpKTtcbiAgICAgICAgICAgIGEuc2V0QXR0cmlidXRlKCdkb3dubG9hZCcsIGB0cmFuc2Zlci4ke2ZpbGUuZXh0ZW5zaW9ufWApO1xuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmQoYSk7XG4gICAgICAgICAgICAvLyBpZiB5b3UgYXJlIHNvIGluY2xpbmVkIHRvIG1ha2UgaXQgYXV0by1kb3dubG9hZCwgZG8gc29tZXRoaW5nIGxpa2U6IGEuY2xpY2soKTtcbiAgICAgICAgICAgIGEucmVtb3ZlKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoZmlsZS5kYXRhLmxlbmd0aCA+IGZpbGUuc2l6ZSkge1xuICAgICAgICAgICAgZmlsZS5yZWNlaXZpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIExvZ2dlci5FcnJvcihcbiAgICAgICAgICAgICAgICBMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLFxuICAgICAgICAgICAgICAgIGBSZWNlaXZlZCBiaWdnZXIgZmlsZSB0aGFuIGFkdmVydGlzZWQ6ICR7ZmlsZS5kYXRhLmxlbmd0aH0vJHtmaWxlLnNpemV9YFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLyoqXG4gKiBBIGNsYXNzIHRoYXQgcmVwcmVzZW50cyBhIHRlbXBsYXRlIGZvciBhIGRvd25sb2FkZWQgZmlsZVxuICovXG5leHBvcnQgY2xhc3MgRmlsZVRlbXBsYXRlIHtcbiAgICBtaW1ldHlwZSA9ICcnO1xuICAgIGV4dGVuc2lvbiA9ICcnO1xuICAgIHJlY2VpdmluZyA9IGZhbHNlO1xuICAgIHNpemUgPSAwO1xuICAgIGRhdGE6IEFycmF5PFVpbnQ4QXJyYXk+ID0gW107XG4gICAgdmFsaWQgPSBmYWxzZTtcbiAgICB0aW1lc3RhbXBTdGFydDogbnVtYmVyO1xufVxuIiwiLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuZXhwb3J0IGNsYXNzIFdlYkdMVXRpbHMge1xuICAgIHN0YXRpYyB2ZXJ0ZXhTaGFkZXIoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIGBcblx0XHRhdHRyaWJ1dGUgdmVjMiBhX3Bvc2l0aW9uO1xuXHRcdGF0dHJpYnV0ZSB2ZWMyIGFfdGV4Q29vcmQ7XG5cblx0XHQvLyBpbnB1dFxuXHRcdHVuaWZvcm0gdmVjMiB1X3Jlc29sdXRpb247XG5cdFx0dW5pZm9ybSB2ZWM0IHVfb2Zmc2V0O1xuXG5cdFx0Ly9cblx0XHR2YXJ5aW5nIHZlYzIgdl90ZXhDb29yZDtcblxuXHRcdHZvaWQgbWFpbigpIHtcblx0XHQgICAvLyBjb252ZXJ0IHRoZSByZWN0YW5nbGUgZnJvbSBwaXhlbHMgdG8gMC4wIHRvIDEuMFxuXHRcdCAgIHZlYzIgemVyb1RvT25lID0gYV9wb3NpdGlvbiAvIHVfcmVzb2x1dGlvbjtcblxuXHRcdCAgIC8vIGNvbnZlcnQgZnJvbSAwLT4xIHRvIDAtPjJcblx0XHQgICB2ZWMyIHplcm9Ub1R3byA9IHplcm9Ub09uZSAqIDIuMDtcblxuXHRcdCAgIC8vIGNvbnZlcnQgZnJvbSAwLT4yIHRvIC0xLT4rMSAoY2xpcHNwYWNlKVxuXHRcdCAgIHZlYzIgY2xpcFNwYWNlID0gemVyb1RvVHdvIC0gMS4wO1xuXG5cdFx0ICAgZ2xfUG9zaXRpb24gPSB2ZWM0KGNsaXBTcGFjZSAqIHZlYzIoMSwgLTEpLCAwLCAxKTtcblx0XHQgICAvLyBwYXNzIHRoZSB0ZXhDb29yZCB0byB0aGUgZnJhZ21lbnQgc2hhZGVyXG5cdFx0ICAgLy8gVGhlIEdQVSB3aWxsIGludGVycG9sYXRlIHRoaXMgdmFsdWUgYmV0d2VlbiBwb2ludHMuXG5cdFx0ICAgdl90ZXhDb29yZCA9IChhX3RleENvb3JkICogdV9vZmZzZXQueHkpICsgdV9vZmZzZXQuenc7XG5cdFx0fVxuXHRcdGA7XG4gICAgfVxuXG4gICAgc3RhdGljIGZyYWdtZW50U2hhZGVyKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBgXG5cdFx0cHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7XG5cblx0XHQvLyBvdXIgdGV4dHVyZVxuXHRcdHVuaWZvcm0gc2FtcGxlcjJEIHVfaW1hZ2U7XG5cblx0XHQvLyB0aGUgdGV4Q29vcmRzIHBhc3NlZCBpbiBmcm9tIHRoZSB2ZXJ0ZXggc2hhZGVyLlxuXHRcdHZhcnlpbmcgdmVjMiB2X3RleENvb3JkO1xuXG5cdFx0dm9pZCBtYWluKCkge1xuXHRcdCAgIGdsX0ZyYWdDb2xvciA9IHRleHR1cmUyRCh1X2ltYWdlLCB2X3RleENvb3JkKTtcblx0XHR9XG5cdFx0YDtcbiAgICB9XG59XG4iLCIvLyBDb3B5cmlnaHQgRXBpYyBHYW1lcywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXG5leHBvcnQgY2xhc3MgV2ViWFJVdGlscyB7XG4gICAgLyoqXG4gICAgICogRGVlcCBjb3BpZXMgYSBnYW1lcGFkJ3MgdmFsdWVzIGJ5IGZpcnN0IGNvbnZlcnRpbmcgaXQgdG8gYSBKU09OIG9iamVjdCBhbmQgdGhlbiBiYWNrIHRvIGEgZ2FtZXBhZFxuICAgICAqXG4gICAgICogQHBhcmFtIGdhbWVwYWQgdGhlIG9yaWdpbmFsIGdhbWVwYWRcbiAgICAgKiBAcmV0dXJucyBhIG5ldyBnYW1lcGFkIG9iamVjdCwgcG9wdWxhdGVkIHdpdGggdGhlIG9yaWdpbmFsIGdhbWVwYWRzIHZhbHVlc1xuICAgICAqL1xuICAgIHN0YXRpYyBkZWVwQ29weUdhbWVwYWQoZ2FtZXBhZDogR2FtZXBhZCk6IEdhbWVwYWQge1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShcbiAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgICBidXR0b25zOiBnYW1lcGFkLmJ1dHRvbnMubWFwKChiKSA9PlxuICAgICAgICAgICAgICAgICAgICBKU09OLnBhcnNlKFxuICAgICAgICAgICAgICAgICAgICAgICAgSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXNzZWQ6IGIucHJlc3NlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3VjaGVkOiBiLnRvdWNoZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIGF4ZXM6IGdhbWVwYWQuYXhlc1xuICAgICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICB9XG59XG4iLCIvLyBDb3B5cmlnaHQgRXBpYyBHYW1lcywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXG5pbXBvcnQgeyBNb3VzZUNvbnRyb2xsZXIgfSBmcm9tICcuLi9JbnB1dHMvTW91c2VDb250cm9sbGVyJztcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJy4uL0xvZ2dlci9Mb2dnZXInO1xuaW1wb3J0IHsgVmlkZW9QbGF5ZXIgfSBmcm9tICcuL1ZpZGVvUGxheWVyJztcblxuLyoqXG4gKiBWaWRlbyBQbGF5ZXIgQ29udHJvbGxlciBoYW5kbGVzIHRoZSBjcmVhdGlvbiBvZiB0aGUgdmlkZW8gSFRNTCBlbGVtZW50IGFuZCBhbGwgaGFuZGxlcnNcbiAqL1xuZXhwb3J0IGNsYXNzIFN0cmVhbUNvbnRyb2xsZXIge1xuICAgIHZpZGVvRWxlbWVudFByb3ZpZGVyOiBWaWRlb1BsYXllcjtcbiAgICBhdWRpb0VsZW1lbnQ6IEhUTUxBdWRpb0VsZW1lbnQ7XG4gICAgbW91c2VDb250cm9sbGVyOiBNb3VzZUNvbnRyb2xsZXI7XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gdmlkZW9FbGVtZW50UHJvdmlkZXIgVmlkZW8gUGxheWVyIGluc3RhbmNlXG4gICAgICovXG4gICAgY29uc3RydWN0b3IodmlkZW9FbGVtZW50UHJvdmlkZXI6IFZpZGVvUGxheWVyKSB7XG4gICAgICAgIHRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIgPSB2aWRlb0VsZW1lbnRQcm92aWRlcjtcbiAgICAgICAgdGhpcy5hdWRpb0VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdBdWRpbycpIGFzIEhUTUxBdWRpb0VsZW1lbnQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGFuZGxlcyB3aGVuIHRoZSBQZWVyIGNvbm5lY3Rpb24gaGFzIGEgdHJhY2sgZXZlbnRcbiAgICAgKiBAcGFyYW0gcnRjVHJhY2tFdmVudCAtIFJUQyBUcmFjayBFdmVudFxuICAgICAqL1xuICAgIGhhbmRsZU9uVHJhY2socnRjVHJhY2tFdmVudDogUlRDVHJhY2tFdmVudCkge1xuICAgICAgICBMb2dnZXIuTG9nKFxuICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcbiAgICAgICAgICAgICdoYW5kbGVPblRyYWNrICcgKyBKU09OLnN0cmluZ2lmeShydGNUcmFja0V2ZW50LnN0cmVhbXMpLFxuICAgICAgICAgICAgNlxuICAgICAgICApO1xuICAgICAgICBjb25zdCB2aWRlb0VsZW1lbnQgPSB0aGlzLnZpZGVvRWxlbWVudFByb3ZpZGVyLmdldFZpZGVvRWxlbWVudCgpO1xuXG4gICAgICAgIGlmIChydGNUcmFja0V2ZW50LnRyYWNrKSB7XG4gICAgICAgICAgICBMb2dnZXIuTG9nKFxuICAgICAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXG4gICAgICAgICAgICAgICAgJ0dvdCB0cmFjayAtICcgK1xuICAgICAgICAgICAgICAgICAgICBydGNUcmFja0V2ZW50LnRyYWNrLmtpbmQgK1xuICAgICAgICAgICAgICAgICAgICAnIGlkPScgK1xuICAgICAgICAgICAgICAgICAgICBydGNUcmFja0V2ZW50LnRyYWNrLmlkICtcbiAgICAgICAgICAgICAgICAgICAgJyByZWFkeVN0YXRlPScgK1xuICAgICAgICAgICAgICAgICAgICBydGNUcmFja0V2ZW50LnRyYWNrLnJlYWR5U3RhdGUsXG4gICAgICAgICAgICAgICAgNlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChydGNUcmFja0V2ZW50LnRyYWNrLmtpbmQgPT0gJ2F1ZGlvJykge1xuICAgICAgICAgICAgdGhpcy5DcmVhdGVBdWRpb1RyYWNrKHJ0Y1RyYWNrRXZlbnQuc3RyZWFtc1swXSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICBydGNUcmFja0V2ZW50LnRyYWNrLmtpbmQgPT0gJ3ZpZGVvJyAmJlxuICAgICAgICAgICAgdmlkZW9FbGVtZW50LnNyY09iamVjdCAhPT0gcnRjVHJhY2tFdmVudC5zdHJlYW1zWzBdXG4gICAgICAgICkge1xuICAgICAgICAgICAgdmlkZW9FbGVtZW50LnNyY09iamVjdCA9IHJ0Y1RyYWNrRXZlbnQuc3RyZWFtc1swXTtcbiAgICAgICAgICAgIExvZ2dlci5Mb2coXG4gICAgICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcbiAgICAgICAgICAgICAgICAnU2V0IHZpZGVvIHNvdXJjZSBmcm9tIHZpZGVvIHRyYWNrIG9udHJhY2suJ1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgdGhlIGF1ZGlvIGRldmljZSB3aGVuIHJlY2VpdmluZyBhbiBSVENUcmFja0V2ZW50IHdpdGggdGhlIGtpbmQgb2YgXCJhdWRpb1wiXG4gICAgICogQHBhcmFtIGF1ZGlvTWVkaWFTdHJlYW0gLSBBdWRpbyBNZWRpYSBzdHJlYW0gdHJhY2tcbiAgICAgKi9cbiAgICBDcmVhdGVBdWRpb1RyYWNrKGF1ZGlvTWVkaWFTdHJlYW06IE1lZGlhU3RyZWFtKSB7XG4gICAgICAgIGNvbnN0IHZpZGVvRWxlbWVudCA9IHRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIuZ2V0VmlkZW9FbGVtZW50KCk7XG5cbiAgICAgICAgLy8gZG8gbm90aGluZyB0aGUgdmlkZW8gaGFzIHRoZSBzYW1lIG1lZGlhIHN0cmVhbSBhcyB0aGUgYXVkaW8gdHJhY2sgd2UgaGF2ZSBoZXJlICh0aGV5IGFyZSBsaW5rZWQpXG4gICAgICAgIGlmICh2aWRlb0VsZW1lbnQuc3JjT2JqZWN0ID09IGF1ZGlvTWVkaWFTdHJlYW0pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyB2aWRlbyBlbGVtZW50IGhhcyBzb21lIG90aGVyIG1lZGlhIHN0cmVhbSB0aGF0IGlzIG5vdCBhc3NvY2lhdGVkIHdpdGggdGhpcyBhdWRpbyB0cmFja1xuICAgICAgICBlbHNlIGlmIChcbiAgICAgICAgICAgIHZpZGVvRWxlbWVudC5zcmNPYmplY3QgJiZcbiAgICAgICAgICAgIHZpZGVvRWxlbWVudC5zcmNPYmplY3QgIT09IGF1ZGlvTWVkaWFTdHJlYW1cbiAgICAgICAgKSB7XG4gICAgICAgICAgICAvLyBjcmVhdGUgYSBuZXcgYXVkaW8gZWxlbWVudFxuICAgICAgICAgICAgdGhpcy5hdWRpb0VsZW1lbnQuc3JjT2JqZWN0ID0gYXVkaW9NZWRpYVN0cmVhbTtcbiAgICAgICAgICAgIExvZ2dlci5Mb2coXG4gICAgICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcbiAgICAgICAgICAgICAgICAnQ3JlYXRlZCBuZXcgYXVkaW8gZWxlbWVudCB0byBwbGF5IHNlcGFyYXRlIGF1ZGlvIHN0cmVhbS4nXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuaW1wb3J0IHsgQ29uZmlnLCBGbGFncyB9IGZyb20gJy4uL0NvbmZpZy9Db25maWcnO1xuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSAnLi4vTG9nZ2VyL0xvZ2dlcic7XG5cbi8qKlxuICogRXh0cmEgdHlwZXMgZm9yIHRoZSBIVE1MRWxlbWVudFxuICovXG5kZWNsYXJlIGdsb2JhbCB7XG4gICAgaW50ZXJmYWNlIEhUTUxFbGVtZW50IHtcbiAgICAgICAgbW96UmVxdWVzdFBvaW50ZXJMb2NrPygpOiB2b2lkO1xuICAgIH1cbn1cblxuLyoqXG4gKiBUaGUgdmlkZW8gcGxheWVyIGh0bWwgZWxlbWVudFxuICovXG5leHBvcnQgY2xhc3MgVmlkZW9QbGF5ZXIge1xuICAgIHByaXZhdGUgY29uZmlnOiBDb25maWc7XG4gICAgcHJpdmF0ZSB2aWRlb0VsZW1lbnQ6IEhUTUxWaWRlb0VsZW1lbnQ7XG4gICAgcHJpdmF0ZSBvcmllbnRhdGlvbkNoYW5nZVRpbWVvdXQ6IG51bWJlcjtcbiAgICBwcml2YXRlIGxhc3RUaW1lUmVzaXplZCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuXG4gICAgb25NYXRjaFZpZXdwb3J0UmVzb2x1dGlvbkNhbGxiYWNrOiAod2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpID0+IHZvaWQ7XG4gICAgb25SZXNpemVQbGF5ZXJDYWxsYmFjazogKCkgPT4gdm9pZDtcbiAgICByZXNpemVUaW1lb3V0SGFuZGxlOiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gdmlkZW9FbGVtZW50UGFyZW50IHRoZSBodG1sIGRpdiB0aGUgdGhlIHZpZGVvIHBsYXllciB3aWxsIGJlIGluamVjdGVkIGludG9cbiAgICAgKiBAcGFyYW0gY29uZmlnIHRoZSBhcHBsaWNhdGlvbnMgY29uZmlndXJhdGlvbi4gV2UncmUgaW50ZXJlc3RlZCBpbiB0aGUgc3RhcnRWaWRlb011dGVkIGZsYWdcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcih2aWRlb0VsZW1lbnRQYXJlbnQ6IEhUTUxFbGVtZW50LCBjb25maWc6IENvbmZpZykge1xuICAgICAgICB0aGlzLnZpZGVvRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3ZpZGVvJyk7XG4gICAgICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuICAgICAgICB0aGlzLnZpZGVvRWxlbWVudC5pZCA9ICdzdHJlYW1pbmdWaWRlbyc7XG4gICAgICAgIHRoaXMudmlkZW9FbGVtZW50LmRpc2FibGVQaWN0dXJlSW5QaWN0dXJlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy52aWRlb0VsZW1lbnQucGxheXNJbmxpbmUgPSB0cnVlO1xuICAgICAgICB0aGlzLnZpZGVvRWxlbWVudC5zdHlsZS53aWR0aCA9ICcxMDAlJztcbiAgICAgICAgdGhpcy52aWRlb0VsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gJzEwMCUnO1xuICAgICAgICB0aGlzLnZpZGVvRWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gICAgICAgIHRoaXMudmlkZW9FbGVtZW50LnN0eWxlLnBvaW50ZXJFdmVudHMgPSAnYWxsJztcbiAgICAgICAgdmlkZW9FbGVtZW50UGFyZW50LmFwcGVuZENoaWxkKHRoaXMudmlkZW9FbGVtZW50KTtcblxuICAgICAgICB0aGlzLm9uUmVzaXplUGxheWVyQ2FsbGJhY2sgPSAoKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgICAgICAgICAnUmVzb2x1dGlvbiBjaGFuZ2VkLCByZXN0eWxpbmcgcGxheWVyLCBkaWQgeW91IGZvcmdldCB0byBvdmVycmlkZSB0aGlzIGZ1bmN0aW9uPydcbiAgICAgICAgICAgICk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMub25NYXRjaFZpZXdwb3J0UmVzb2x1dGlvbkNhbGxiYWNrID0gKCkgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXG4gICAgICAgICAgICAgICAgJ1Jlc29sdXRpb24gY2hhbmdlZCBhbmQgbWF0Y2ggdmlld3BvcnQgcmVzb2x1dGlvbiBpcyB0dXJuZWQgb24sIGRpZCB5b3UgZm9yZ2V0IHRvIG92ZXJyaWRlIHRoaXMgZnVuY3Rpb24/J1xuICAgICAgICAgICAgKTtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBzZXQgcGxheSBmb3IgdmlkZW9cbiAgICAgICAgdGhpcy52aWRlb0VsZW1lbnQub25jbGljayA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLnZpZGVvRWxlbWVudC5wYXVzZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnZpZGVvRWxlbWVudC5wbGF5KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy52aWRlb0VsZW1lbnQub25sb2FkZWRtZXRhZGF0YSA9ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMub25WaWRlb0luaXRpYWxpemVkKCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gc2V0IHJlc2l6ZSBldmVudHMgdG8gdGhlIHdpbmRvd3MgaWYgaXQgaXMgcmVzaXplZCBvciBpdHMgb3JpZW50YXRpb24gaXMgY2hhbmdlZFxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgKCkgPT4gdGhpcy5yZXNpemVQbGF5ZXJTdHlsZSgpLCB0cnVlKTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ29yaWVudGF0aW9uY2hhbmdlJywgKCkgPT5cbiAgICAgICAgICAgIHRoaXMub25PcmllbnRhdGlvbkNoYW5nZSgpXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB1cCB0aGUgdmlkZW8gZWxlbWVudCB3aXRoIGFueSBhcHBsaWNhdGlvbiBjb25maWcgYW5kIHBsYXlzIHRoZSB2aWRlbyBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIEEgcHJvbWlzZSBmb3IgaWYgcGxheWluZyB0aGUgdmlkZW8gd2FzIHN1Y2Nlc3NmdWwgb3Igbm90LlxuICAgICAqL1xuICAgIHBsYXkoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHRoaXMudmlkZW9FbGVtZW50Lm11dGVkID0gdGhpcy5jb25maWcuaXNGbGFnRW5hYmxlZChcbiAgICAgICAgICAgIEZsYWdzLlN0YXJ0VmlkZW9NdXRlZFxuICAgICAgICApO1xuICAgICAgICB0aGlzLnZpZGVvRWxlbWVudC5hdXRvcGxheSA9IHRoaXMuY29uZmlnLmlzRmxhZ0VuYWJsZWQoXG4gICAgICAgICAgICBGbGFncy5BdXRvUGxheVZpZGVvXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiB0aGlzLnZpZGVvRWxlbWVudC5wbGF5KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybnMgVHJ1ZSBpZiB0aGUgdmlkZW8gZWxlbWVudCBpcyBwYXVzZWQuXG4gICAgICovXG4gICAgaXNQYXVzZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLnZpZGVvRWxlbWVudC5wYXVzZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybnMgLSB3aGV0aGVyIHRoZSB2aWRlbyBlbGVtZW50IGlzIHBsYXlpbmcuXG4gICAgICovXG4gICAgaXNWaWRlb1JlYWR5KCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgdGhpcy52aWRlb0VsZW1lbnQucmVhZHlTdGF0ZSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICB0aGlzLnZpZGVvRWxlbWVudC5yZWFkeVN0YXRlID4gMFxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIFRydWUgaWYgdGhlIHZpZGVvIGVsZW1lbnQgaGFzIGEgdmFsaWQgdmlkZW8gc291cmNlIChzcmNPYmplY3QpLlxuICAgICAqL1xuICAgIGhhc1ZpZGVvU291cmNlKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgdGhpcy52aWRlb0VsZW1lbnQuc3JjT2JqZWN0ICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIHRoaXMudmlkZW9FbGVtZW50LnNyY09iamVjdCAhPT0gbnVsbFxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgY3VycmVudCBjb250ZXh0IG9mIHRoZSBodG1sIHZpZGVvIGVsZW1lbnRcbiAgICAgKiBAcmV0dXJucyAtIHRoZSBjdXJyZW50IGNvbnRleHQgb2YgdGhlIHZpZGVvIGVsZW1lbnRcbiAgICAgKi9cbiAgICBnZXRWaWRlb0VsZW1lbnQoKTogSFRNTFZpZGVvRWxlbWVudCB7XG4gICAgICAgIHJldHVybiB0aGlzLnZpZGVvRWxlbWVudDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGN1cnJlbnQgY29udGV4dCBvZiB0aGUgaHRtbCB2aWRlbyBlbGVtZW50cyBwYXJlbnRcbiAgICAgKiBAcmV0dXJucyAtIHRoZSBjdXJyZW50IGNvbnRleHQgb2YgdGhlIHZpZGVvIGVsZW1lbnRzIHBhcmVudFxuICAgICAqL1xuICAgIGdldFZpZGVvUGFyZW50RWxlbWVudCgpOiBIVE1MRWxlbWVudCB7XG4gICAgICAgIHJldHVybiB0aGlzLnZpZGVvRWxlbWVudC5wYXJlbnRFbGVtZW50O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldCB0aGUgVmlkZW8gRWxlbWVudHMgc3JjIG9iamVjdCB0cmFja3MgdG8gZW5hYmxlXG4gICAgICogQHBhcmFtIGVuYWJsZWQgLSBFbmFibGUgVHJhY2tzIG9uIHRoZSBTcmMgT2JqZWN0XG4gICAgICovXG4gICAgc2V0VmlkZW9FbmFibGVkKGVuYWJsZWQ6IGJvb2xlYW4pIHtcbiAgICAgICAgLy8gdGhpcyBpcyBhIHRlbXBvcmFyeSBoYWNrIHVudGlsIHR5cGUgc2NyaXB0cyB2aWRlbyBlbGVtZW50IGlzIHVwZGF0ZWQgdG8gcmVmbGVjdCB0aGUgbmVlZCBmb3IgdHJhY2tzIG9uIGEgaHRtbCB2aWRlbyBlbGVtZW50XG4gICAgICAgIGNvbnN0IHZpZGVvRWxlbWVudCA9IHRoaXMudmlkZW9FbGVtZW50O1xuICAgICAgICAoPE1lZGlhU3RyZWFtPnZpZGVvRWxlbWVudC5zcmNPYmplY3QpXG4gICAgICAgICAgICAuZ2V0VHJhY2tzKClcbiAgICAgICAgICAgIC5mb3JFYWNoKCh0cmFjazogTWVkaWFTdHJlYW1UcmFjaykgPT4gKHRyYWNrLmVuYWJsZWQgPSBlbmFibGVkKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQW4gb3ZlcnJpZGUgZm9yIHdoZW4gdGhlIHZpZGVvIGhhcyBiZWVuIGluaXRpYWxpemVkIHdpdGggYSBzcmNPYmplY3RcbiAgICAgKi9cbiAgICBvblZpZGVvSW5pdGlhbGl6ZWQoKSB7XG4gICAgICAgIC8vIERlZmF1bHQgRnVuY3Rpb25hbGl0eTogRG8gTm90aGluZ1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE9uIHRoZSBvcmllbnRhdGlvbiBjaGFuZ2Ugb2YgYSB3aW5kb3cgY2xlYXIgdGhlIHRpbWVvdXRcbiAgICAgKi9cbiAgICBvbk9yaWVudGF0aW9uQ2hhbmdlKCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5vcmllbnRhdGlvbkNoYW5nZVRpbWVvdXQpO1xuICAgICAgICB0aGlzLm9yaWVudGF0aW9uQ2hhbmdlVGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMucmVzaXplUGxheWVyU3R5bGUoKTtcbiAgICAgICAgfSwgNTAwKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXNpemVzIHRoZSBwbGF5ZXIgc3R5bGUgYmFzZWQgb24gdGhlIHdpbmRvdyBoZWlnaHQgYW5kIHdpZHRoXG4gICAgICogQHJldHVybnMgLSBuaWwgaWYgcmVxdWlyZW1lbnRzIGFyZSBzYXRpc2ZpZWRcbiAgICAgKi9cbiAgICByZXNpemVQbGF5ZXJTdHlsZSgpIHtcbiAgICAgICAgY29uc3QgdmlkZW9FbGVtZW50UGFyZW50ID0gdGhpcy5nZXRWaWRlb1BhcmVudEVsZW1lbnQoKTtcblxuICAgICAgICBpZiAoIXZpZGVvRWxlbWVudFBhcmVudCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy51cGRhdGVWaWRlb1N0cmVhbVNpemUoKTtcblxuICAgICAgICBpZiAodmlkZW9FbGVtZW50UGFyZW50LmNsYXNzTGlzdC5jb250YWlucygnZml4ZWQtc2l6ZScpKSB7XG4gICAgICAgICAgICB0aGlzLm9uUmVzaXplUGxheWVyQ2FsbGJhY2soKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNvbnRyb2xzIGZvciByZXNpemluZyB0aGUgcGxheWVyXG4gICAgICAgIHRoaXMucmVzaXplUGxheWVyU3R5bGVUb0ZpbGxQYXJlbnRFbGVtZW50KCk7XG4gICAgICAgIHRoaXMub25SZXNpemVQbGF5ZXJDYWxsYmFjaygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlc2l6ZXMgdGhlIHBsYXllciBlbGVtZW50IHRvIGZpbGwgdGhlIHBhcmVudCBlbGVtZW50XG4gICAgICovXG4gICAgcmVzaXplUGxheWVyU3R5bGVUb0ZpbGxQYXJlbnRFbGVtZW50KCkge1xuICAgICAgICBjb25zdCB2aWRlb0VsZW1lbnRQYXJlbnQgPSB0aGlzLmdldFZpZGVvUGFyZW50RWxlbWVudCgpO1xuXG4gICAgICAgIC8vVmlkZW8gaXMgbm90IGluaXRpYWxpemVkIHlldCBzbyBzZXQgdmlkZW9FbGVtZW50UGFyZW50IHRvIHNpemUgb2YgcGFyZW50IGVsZW1lbnRcbiAgICAgICAgY29uc3Qgc3R5bGVXaWR0aCA9ICcxMDAlJztcbiAgICAgICAgY29uc3Qgc3R5bGVIZWlnaHQgPSAnMTAwJSc7XG4gICAgICAgIGNvbnN0IHN0eWxlVG9wID0gMDtcbiAgICAgICAgY29uc3Qgc3R5bGVMZWZ0ID0gMDtcbiAgICAgICAgdmlkZW9FbGVtZW50UGFyZW50LnNldEF0dHJpYnV0ZShcbiAgICAgICAgICAgICdzdHlsZScsXG4gICAgICAgICAgICAndG9wOiAnICtcbiAgICAgICAgICAgICAgICBzdHlsZVRvcCArXG4gICAgICAgICAgICAgICAgJ3B4OyBsZWZ0OiAnICtcbiAgICAgICAgICAgICAgICBzdHlsZUxlZnQgK1xuICAgICAgICAgICAgICAgICdweDsgd2lkdGg6ICcgK1xuICAgICAgICAgICAgICAgIHN0eWxlV2lkdGggK1xuICAgICAgICAgICAgICAgICc7IGhlaWdodDogJyArXG4gICAgICAgICAgICAgICAgc3R5bGVIZWlnaHQgK1xuICAgICAgICAgICAgICAgICc7IGN1cnNvcjogZGVmYXVsdDsnXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgdXBkYXRlVmlkZW9TdHJlYW1TaXplKCkge1xuICAgICAgICBpZiAoIXRoaXMuY29uZmlnLmlzRmxhZ0VuYWJsZWQoRmxhZ3MuTWF0Y2hWaWV3cG9ydFJlc29sdXRpb24pKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAgICAgaWYgKG5vdyAtIHRoaXMubGFzdFRpbWVSZXNpemVkID4gMzAwKSB7XG4gICAgICAgICAgICBjb25zdCB2aWRlb0VsZW1lbnRQYXJlbnQgPSB0aGlzLmdldFZpZGVvUGFyZW50RWxlbWVudCgpO1xuICAgICAgICAgICAgaWYgKCF2aWRlb0VsZW1lbnRQYXJlbnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMub25NYXRjaFZpZXdwb3J0UmVzb2x1dGlvbkNhbGxiYWNrKFxuICAgICAgICAgICAgICAgIHZpZGVvRWxlbWVudFBhcmVudC5jbGllbnRXaWR0aCxcbiAgICAgICAgICAgICAgICB2aWRlb0VsZW1lbnRQYXJlbnQuY2xpZW50SGVpZ2h0XG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICB0aGlzLmxhc3RUaW1lUmVzaXplZCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgTG9nZ2VyLkxvZyhcbiAgICAgICAgICAgICAgICBMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLFxuICAgICAgICAgICAgICAgICdSZXNpemluZyB0b28gb2Z0ZW4gLSBza2lwcGluZycsXG4gICAgICAgICAgICAgICAgNlxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnJlc2l6ZVRpbWVvdXRIYW5kbGUpO1xuICAgICAgICAgICAgdGhpcy5yZXNpemVUaW1lb3V0SGFuZGxlID0gd2luZG93LnNldFRpbWVvdXQoXG4gICAgICAgICAgICAgICAgKCkgPT4gdGhpcy51cGRhdGVWaWRlb1N0cmVhbVNpemUoKSxcbiAgICAgICAgICAgICAgICAxMDBcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCIvLyBDb3B5cmlnaHQgRXBpYyBHYW1lcywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXG5pbXBvcnQgeyBXZWJTb2NrZXRDb250cm9sbGVyIH0gZnJvbSAnLi4vV2ViU29ja2V0cy9XZWJTb2NrZXRDb250cm9sbGVyJztcbmltcG9ydCB7IFN0cmVhbUNvbnRyb2xsZXIgfSBmcm9tICcuLi9WaWRlb1BsYXllci9TdHJlYW1Db250cm9sbGVyJztcbmltcG9ydCB7XG4gICAgTWVzc2FnZUFuc3dlcixcbiAgICBNZXNzYWdlT2ZmZXIsXG4gICAgTWVzc2FnZUNvbmZpZyxcbiAgICBNZXNzYWdlU3RyZWFtZXJMaXN0XG59IGZyb20gJy4uL1dlYlNvY2tldHMvTWVzc2FnZVJlY2VpdmUnO1xuaW1wb3J0IHsgRnJlZXplRnJhbWVDb250cm9sbGVyIH0gZnJvbSAnLi4vRnJlZXplRnJhbWUvRnJlZXplRnJhbWVDb250cm9sbGVyJztcbmltcG9ydCB7IEFGS0NvbnRyb2xsZXIgfSBmcm9tICcuLi9BRksvQUZLQ29udHJvbGxlcic7XG5pbXBvcnQgeyBEYXRhQ2hhbm5lbENvbnRyb2xsZXIgfSBmcm9tICcuLi9EYXRhQ2hhbm5lbC9EYXRhQ2hhbm5lbENvbnRyb2xsZXInO1xuaW1wb3J0IHsgUGVlckNvbm5lY3Rpb25Db250cm9sbGVyIH0gZnJvbSAnLi4vUGVlckNvbm5lY3Rpb25Db250cm9sbGVyL1BlZXJDb25uZWN0aW9uQ29udHJvbGxlcic7XG5pbXBvcnQgeyBLZXlib2FyZENvbnRyb2xsZXIgfSBmcm9tICcuLi9JbnB1dHMvS2V5Ym9hcmRDb250cm9sbGVyJztcbmltcG9ydCB7IEFnZ3JlZ2F0ZWRTdGF0cyB9IGZyb20gJy4uL1BlZXJDb25uZWN0aW9uQ29udHJvbGxlci9BZ2dyZWdhdGVkU3RhdHMnO1xuaW1wb3J0IHtcbiAgICBDb25maWcsXG4gICAgRmxhZ3MsXG4gICAgQ29udHJvbFNjaGVtZVR5cGUsXG4gICAgVGV4dFBhcmFtZXRlcnMsXG4gICAgT3B0aW9uUGFyYW1ldGVycyxcbiAgICBOdW1lcmljUGFyYW1ldGVyc1xufSBmcm9tICcuLi9Db25maWcvQ29uZmlnJztcbmltcG9ydCB7XG4gICAgRW5jb2RlclNldHRpbmdzLFxuICAgIEluaXRpYWxTZXR0aW5ncyxcbiAgICBXZWJSVENTZXR0aW5nc1xufSBmcm9tICcuLi9EYXRhQ2hhbm5lbC9Jbml0aWFsU2V0dGluZ3MnO1xuaW1wb3J0IHsgTGF0ZW5jeVRlc3RSZXN1bHRzIH0gZnJvbSAnLi4vRGF0YUNoYW5uZWwvTGF0ZW5jeVRlc3RSZXN1bHRzJztcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJy4uL0xvZ2dlci9Mb2dnZXInO1xuaW1wb3J0IHsgRmlsZVRlbXBsYXRlLCBGaWxlVXRpbCB9IGZyb20gJy4uL1V0aWwvRmlsZVV0aWwnO1xuaW1wb3J0IHsgSW5wdXRDbGFzc2VzRmFjdG9yeSB9IGZyb20gJy4uL0lucHV0cy9JbnB1dENsYXNzZXNGYWN0b3J5JztcbmltcG9ydCB7IFZpZGVvUGxheWVyIH0gZnJvbSAnLi4vVmlkZW9QbGF5ZXIvVmlkZW9QbGF5ZXInO1xuaW1wb3J0IHtcbiAgICBTdHJlYW1NZXNzYWdlQ29udHJvbGxlcixcbiAgICBNZXNzYWdlRGlyZWN0aW9uXG59IGZyb20gJy4uL1VlSW5zdGFuY2VNZXNzYWdlL1N0cmVhbU1lc3NhZ2VDb250cm9sbGVyJztcbmltcG9ydCB7IFJlc3BvbnNlQ29udHJvbGxlciB9IGZyb20gJy4uL1VlSW5zdGFuY2VNZXNzYWdlL1Jlc3BvbnNlQ29udHJvbGxlcic7XG5pbXBvcnQgKiBhcyBNZXNzYWdlUmVjZWl2ZSBmcm9tICcuLi9XZWJTb2NrZXRzL01lc3NhZ2VSZWNlaXZlJztcbmltcG9ydCB7IE1lc3NhZ2VPblNjcmVlbktleWJvYXJkIH0gZnJvbSAnLi4vV2ViU29ja2V0cy9NZXNzYWdlUmVjZWl2ZSc7XG5pbXBvcnQgeyBTZW5kRGVzY3JpcHRvckNvbnRyb2xsZXIgfSBmcm9tICcuLi9VZUluc3RhbmNlTWVzc2FnZS9TZW5kRGVzY3JpcHRvckNvbnRyb2xsZXInO1xuaW1wb3J0IHsgU2VuZE1lc3NhZ2VDb250cm9sbGVyIH0gZnJvbSAnLi4vVWVJbnN0YW5jZU1lc3NhZ2UvU2VuZE1lc3NhZ2VDb250cm9sbGVyJztcbmltcG9ydCB7IFRvU3RyZWFtZXJNZXNzYWdlc0NvbnRyb2xsZXIgfSBmcm9tICcuLi9VZUluc3RhbmNlTWVzc2FnZS9Ub1N0cmVhbWVyTWVzc2FnZXNDb250cm9sbGVyJztcbmltcG9ydCB7IE1vdXNlQ29udHJvbGxlciB9IGZyb20gJy4uL0lucHV0cy9Nb3VzZUNvbnRyb2xsZXInO1xuaW1wb3J0IHsgR2FtZVBhZENvbnRyb2xsZXIgfSBmcm9tICcuLi9JbnB1dHMvR2FtZXBhZENvbnRyb2xsZXInO1xuaW1wb3J0IHsgRGF0YUNoYW5uZWxTZW5kZXIgfSBmcm9tICcuLi9EYXRhQ2hhbm5lbC9EYXRhQ2hhbm5lbFNlbmRlcic7XG5pbXBvcnQge1xuICAgIENvb3JkaW5hdGVDb252ZXJ0ZXIsXG4gICAgVW5xdWFudGl6ZWREZW5vcm1hbGl6ZWRVbnNpZ25lZENvb3JkXG59IGZyb20gJy4uL1V0aWwvQ29vcmRpbmF0ZUNvbnZlcnRlcic7XG5pbXBvcnQgeyBQaXhlbFN0cmVhbWluZyB9IGZyb20gJy4uL1BpeGVsU3RyZWFtaW5nL1BpeGVsU3RyZWFtaW5nJztcbmltcG9ydCB7IElUb3VjaENvbnRyb2xsZXIgfSBmcm9tICcuLi9JbnB1dHMvSVRvdWNoQ29udHJvbGxlcic7XG5pbXBvcnQge1xuICAgIERhdGFDaGFubmVsQ2xvc2VFdmVudCxcbiAgICBEYXRhQ2hhbm5lbEVycm9yRXZlbnQsXG4gICAgRGF0YUNoYW5uZWxPcGVuRXZlbnQsXG4gICAgSGlkZUZyZWV6ZUZyYW1lRXZlbnQsXG4gICAgTG9hZEZyZWV6ZUZyYW1lRXZlbnQsXG4gICAgUGxheVN0cmVhbUVycm9yRXZlbnQsXG4gICAgUGxheVN0cmVhbUV2ZW50LFxuICAgIFBsYXlTdHJlYW1SZWplY3RlZEV2ZW50LFxuICAgIFN0cmVhbWVyTGlzdE1lc3NhZ2VFdmVudFxufSBmcm9tICcuLi9VdGlsL0V2ZW50RW1pdHRlcic7XG4vKipcbiAqIEVudHJ5IHBvaW50IGZvciB0aGUgV2ViUlRDIFBsYXllclxuICovXG5leHBvcnQgY2xhc3MgV2ViUnRjUGxheWVyQ29udHJvbGxlciB7XG4gICAgY29uZmlnOiBDb25maWc7XG4gICAgcmVzcG9uc2VDb250cm9sbGVyOiBSZXNwb25zZUNvbnRyb2xsZXI7XG4gICAgc2RwQ29uc3RyYWludHM6IFJUQ09mZmVyT3B0aW9ucztcbiAgICB3ZWJTb2NrZXRDb250cm9sbGVyOiBXZWJTb2NrZXRDb250cm9sbGVyO1xuICAgIC8vIFRoZSBwcmltYXJ5IGRhdGEgY2hhbm5lbC4gVGhpcyBpcyBiaWRpcmVjdGlvbmFsIHdoZW4gcDJwIGFuZCBzZW5kIG9ubHkgd2hlbiB1c2luZyBhbiBTRlVcbiAgICBzZW5kcmVjdkRhdGFDaGFubmVsQ29udHJvbGxlcjogRGF0YUNoYW5uZWxDb250cm9sbGVyO1xuICAgIC8vIEEgcmVjdiBvbmx5IGRhdGEgY2hhbm5lbCByZXF1aXJlZCB3aGVuIHVzaW5nIGFuIFNGVVxuICAgIHJlY3ZEYXRhQ2hhbm5lbENvbnRyb2xsZXI6IERhdGFDaGFubmVsQ29udHJvbGxlcjtcbiAgICBkYXRhQ2hhbm5lbFNlbmRlcjogRGF0YUNoYW5uZWxTZW5kZXI7XG4gICAgZGF0YWNoYW5uZWxPcHRpb25zOiBSVENEYXRhQ2hhbm5lbEluaXQ7XG4gICAgdmlkZW9QbGF5ZXI6IFZpZGVvUGxheWVyO1xuICAgIHN0cmVhbUNvbnRyb2xsZXI6IFN0cmVhbUNvbnRyb2xsZXI7XG4gICAgcGVlckNvbm5lY3Rpb25Db250cm9sbGVyOiBQZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXI7XG4gICAgaW5wdXRDbGFzc2VzRmFjdG9yeTogSW5wdXRDbGFzc2VzRmFjdG9yeTtcbiAgICBmcmVlemVGcmFtZUNvbnRyb2xsZXI6IEZyZWV6ZUZyYW1lQ29udHJvbGxlcjtcbiAgICBzaG91bGRTaG93UGxheU92ZXJsYXkgPSB0cnVlO1xuICAgIGFma0NvbnRyb2xsZXI6IEFGS0NvbnRyb2xsZXI7XG4gICAgdmlkZW9FbGVtZW50UGFyZW50Q2xpZW50UmVjdDogRE9NUmVjdDtcbiAgICBsYXRlbmN5U3RhcnRUaW1lOiBudW1iZXI7XG4gICAgcGl4ZWxTdHJlYW1pbmc6IFBpeGVsU3RyZWFtaW5nO1xuICAgIHN0cmVhbU1lc3NhZ2VDb250cm9sbGVyOiBTdHJlYW1NZXNzYWdlQ29udHJvbGxlcjtcbiAgICBzZW5kRGVzY3JpcHRvckNvbnRyb2xsZXI6IFNlbmREZXNjcmlwdG9yQ29udHJvbGxlcjtcbiAgICBzZW5kTWVzc2FnZUNvbnRyb2xsZXI6IFNlbmRNZXNzYWdlQ29udHJvbGxlcjtcbiAgICB0b1N0cmVhbWVyTWVzc2FnZXNDb250cm9sbGVyOiBUb1N0cmVhbWVyTWVzc2FnZXNDb250cm9sbGVyO1xuICAgIGtleWJvYXJkQ29udHJvbGxlcjogS2V5Ym9hcmRDb250cm9sbGVyO1xuICAgIG1vdXNlQ29udHJvbGxlcjogTW91c2VDb250cm9sbGVyO1xuICAgIHRvdWNoQ29udHJvbGxlcjogSVRvdWNoQ29udHJvbGxlcjtcbiAgICBnYW1lUGFkQ29udHJvbGxlcjogR2FtZVBhZENvbnRyb2xsZXI7XG4gICAgY29vcmRpbmF0ZUNvbnZlcnRlcjogQ29vcmRpbmF0ZUNvbnZlcnRlcjtcbiAgICBpc1VzaW5nU0ZVOiBib29sZWFuO1xuICAgIGlzUXVhbGl0eUNvbnRyb2xsZXI6IGJvb2xlYW47XG4gICAgc3RhdHNUaW1lckhhbmRsZTogbnVtYmVyO1xuICAgIGZpbGU6IEZpbGVUZW1wbGF0ZTtcbiAgICBwcmVmZXJyZWRDb2RlYzogc3RyaW5nO1xuICAgIHBlZXJDb25maWc6IFJUQ0NvbmZpZ3VyYXRpb247XG4gICAgdmlkZW9BdmdRcDogbnVtYmVyO1xuICAgIHNob3VsZFJlY29ubmVjdDogYm9vbGVhbjtcbiAgICBpc1JlY29ubmVjdGluZzogYm9vbGVhbjtcbiAgICByZWNvbm5lY3RBdHRlbXB0OiBudW1iZXI7XG4gICAgc3Vic2NyaWJlZFN0cmVhbTogc3RyaW5nIHwgbnVsbDtcbiAgICBzaWduYWxsaW5nVXJsQnVpbGRlcjogKCkgPT4gc3RyaW5nO1xuXG4gICAgLy8gaWYgeW91IG92ZXJyaWRlIHRoZSBkaXNjb25uZWN0aW9uIG1lc3NhZ2UgYnkgY2FsbGluZyB0aGUgaW50ZXJmYWNlIG1ldGhvZCBzZXREaXNjb25uZWN0TWVzc2FnZU92ZXJyaWRlXG4gICAgLy8gaXQgd2lsbCB1c2UgdGhpcyBwcm9wZXJ0eSB0byBzdG9yZSB0aGUgb3ZlcnJpZGUgbWVzc2FnZSBzdHJpbmdcbiAgICBkaXNjb25uZWN0TWVzc2FnZU92ZXJyaWRlOiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb25maWcgLSB0aGUgZnJvbnRlbmQgY29uZmlnIG9iamVjdFxuICAgICAqIEBwYXJhbSBwaXhlbFN0cmVhbWluZyAtIHRoZSBQaXhlbFN0cmVhbWluZyBvYmplY3RcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihjb25maWc6IENvbmZpZywgcGl4ZWxTdHJlYW1pbmc6IFBpeGVsU3RyZWFtaW5nKSB7XG4gICAgICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuICAgICAgICB0aGlzLnBpeGVsU3RyZWFtaW5nID0gcGl4ZWxTdHJlYW1pbmc7XG4gICAgICAgIHRoaXMucmVzcG9uc2VDb250cm9sbGVyID0gbmV3IFJlc3BvbnNlQ29udHJvbGxlcigpO1xuICAgICAgICB0aGlzLmZpbGUgPSBuZXcgRmlsZVRlbXBsYXRlKCk7XG5cbiAgICAgICAgdGhpcy5zZHBDb25zdHJhaW50cyA9IHtcbiAgICAgICAgICAgIG9mZmVyVG9SZWNlaXZlQXVkaW86IHRydWUsXG4gICAgICAgICAgICBvZmZlclRvUmVjZWl2ZVZpZGVvOiB0cnVlXG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gc2V0IHVwIHRoZSBhZmsgbG9naWMgY2xhc3MgYW5kIGNvbm5lY3QgdXAgaXRzIG1ldGhvZCBmb3IgY2xvc2luZyB0aGUgc2lnbmFsaW5nIHNlcnZlclxuICAgICAgICB0aGlzLmFma0NvbnRyb2xsZXIgPSBuZXcgQUZLQ29udHJvbGxlcihcbiAgICAgICAgICAgIHRoaXMuY29uZmlnLFxuICAgICAgICAgICAgdGhpcy5waXhlbFN0cmVhbWluZyxcbiAgICAgICAgICAgIHRoaXMub25BZmtUcmlnZ2VyZWQuYmluZCh0aGlzKVxuICAgICAgICApO1xuICAgICAgICB0aGlzLmFma0NvbnRyb2xsZXIub25BRktUaW1lZE91dENhbGxiYWNrID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zZXREaXNjb25uZWN0TWVzc2FnZU92ZXJyaWRlKFxuICAgICAgICAgICAgICAgICdZb3UgaGF2ZSBiZWVuIGRpc2Nvbm5lY3RlZCBkdWUgdG8gaW5hY3Rpdml0eSdcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aGlzLmNsb3NlU2lnbmFsaW5nU2VydmVyKCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5mcmVlemVGcmFtZUNvbnRyb2xsZXIgPSBuZXcgRnJlZXplRnJhbWVDb250cm9sbGVyKFxuICAgICAgICAgICAgdGhpcy5waXhlbFN0cmVhbWluZy52aWRlb0VsZW1lbnRQYXJlbnRcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLnZpZGVvUGxheWVyID0gbmV3IFZpZGVvUGxheWVyKFxuICAgICAgICAgICAgdGhpcy5waXhlbFN0cmVhbWluZy52aWRlb0VsZW1lbnRQYXJlbnQsXG4gICAgICAgICAgICB0aGlzLmNvbmZpZ1xuICAgICAgICApO1xuICAgICAgICB0aGlzLnZpZGVvUGxheWVyLm9uVmlkZW9Jbml0aWFsaXplZCA9ICgpID0+XG4gICAgICAgICAgICB0aGlzLmhhbmRsZVZpZGVvSW5pdGlhbGl6ZWQoKTtcblxuICAgICAgICAvLyBXaGVuIGluIG1hdGNoIHZpZXdwb3J0IHJlc29sdXRpb24gbW9kZSwgd2hlbiB0aGUgYnJvd3NlciB2aWV3cG9ydCBpcyByZXNpemVkIHdlIHNlbmQgYSByZXNpemUgY29tbWFuZCBiYWNrIHRvIFVFLlxuICAgICAgICB0aGlzLnZpZGVvUGxheWVyLm9uTWF0Y2hWaWV3cG9ydFJlc29sdXRpb25DYWxsYmFjayA9IChcbiAgICAgICAgICAgIHdpZHRoOiBudW1iZXIsXG4gICAgICAgICAgICBoZWlnaHQ6IG51bWJlclxuICAgICAgICApID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGRlc2NyaXB0b3IgPSB7XG4gICAgICAgICAgICAgICAgJ1Jlc29sdXRpb24uV2lkdGgnOiB3aWR0aCxcbiAgICAgICAgICAgICAgICAnUmVzb2x1dGlvbi5IZWlnaHQnOiBoZWlnaHRcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHRoaXMuc2VuZERlc2NyaXB0b3JDb250cm9sbGVyLmVtaXRDb21tYW5kKGRlc2NyaXB0b3IpO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIEV2ZXJ5IHRpbWUgdmlkZW8gcGxheWVyIGlzIHJlc2l6ZWQgaW4gYnJvd3NlciB3ZSBuZWVkIHRvIHJlaW5pdGlhbGl6ZSB0aGUgbW91c2UgY29vcmRpbmF0ZSBjb252ZXJzaW9uIGFuZCBmcmVlemUgZnJhbWUgc2l6aW5nIGxvZ2ljLlxuICAgICAgICB0aGlzLnZpZGVvUGxheWVyLm9uUmVzaXplUGxheWVyQ2FsbGJhY2sgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnNldFVwTW91c2VBbmRGcmVlemVGcmFtZSgpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuc3RyZWFtQ29udHJvbGxlciA9IG5ldyBTdHJlYW1Db250cm9sbGVyKHRoaXMudmlkZW9QbGF5ZXIpO1xuXG4gICAgICAgIHRoaXMuY29vcmRpbmF0ZUNvbnZlcnRlciA9IG5ldyBDb29yZGluYXRlQ29udmVydGVyKHRoaXMudmlkZW9QbGF5ZXIpO1xuXG4gICAgICAgIHRoaXMuc2VuZHJlY3ZEYXRhQ2hhbm5lbENvbnRyb2xsZXIgPSBuZXcgRGF0YUNoYW5uZWxDb250cm9sbGVyKCk7XG4gICAgICAgIHRoaXMucmVjdkRhdGFDaGFubmVsQ29udHJvbGxlciA9IG5ldyBEYXRhQ2hhbm5lbENvbnRyb2xsZXIoKTtcbiAgICAgICAgdGhpcy5yZWdpc3RlckRhdGFDaGFubmVsRXZlbnRFbWl0dGVycyhcbiAgICAgICAgICAgIHRoaXMuc2VuZHJlY3ZEYXRhQ2hhbm5lbENvbnRyb2xsZXJcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5yZWdpc3RlckRhdGFDaGFubmVsRXZlbnRFbWl0dGVycyh0aGlzLnJlY3ZEYXRhQ2hhbm5lbENvbnRyb2xsZXIpO1xuICAgICAgICB0aGlzLmRhdGFDaGFubmVsU2VuZGVyID0gbmV3IERhdGFDaGFubmVsU2VuZGVyKFxuICAgICAgICAgICAgdGhpcy5zZW5kcmVjdkRhdGFDaGFubmVsQ29udHJvbGxlclxuICAgICAgICApO1xuICAgICAgICB0aGlzLmRhdGFDaGFubmVsU2VuZGVyLnJlc2V0QWZrV2FybmluZ1RpbWVyT25EYXRhU2VuZCA9ICgpID0+XG4gICAgICAgICAgICB0aGlzLmFma0NvbnRyb2xsZXIucmVzZXRBZmtXYXJuaW5nVGltZXIoKTtcblxuICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyID0gbmV3IFN0cmVhbU1lc3NhZ2VDb250cm9sbGVyKCk7XG5cbiAgICAgICAgLy8gc2V0IHVwIHdlYnNvY2tldCBtZXRob2RzXG4gICAgICAgIHRoaXMud2ViU29ja2V0Q29udHJvbGxlciA9IG5ldyBXZWJTb2NrZXRDb250cm9sbGVyKCk7XG4gICAgICAgIHRoaXMud2ViU29ja2V0Q29udHJvbGxlci5vbkNvbmZpZyA9IChcbiAgICAgICAgICAgIG1lc3NhZ2VDb25maWc6IE1lc3NhZ2VSZWNlaXZlLk1lc3NhZ2VDb25maWdcbiAgICAgICAgKSA9PiB0aGlzLmhhbmRsZU9uQ29uZmlnTWVzc2FnZShtZXNzYWdlQ29uZmlnKTtcbiAgICAgICAgdGhpcy53ZWJTb2NrZXRDb250cm9sbGVyLm9uU3RyZWFtZXJMaXN0ID0gKFxuICAgICAgICAgICAgbWVzc2FnZUxpc3Q6IE1lc3NhZ2VSZWNlaXZlLk1lc3NhZ2VTdHJlYW1lckxpc3RcbiAgICAgICAgKSA9PiB0aGlzLmhhbmRsZVN0cmVhbWVyTGlzdE1lc3NhZ2UobWVzc2FnZUxpc3QpO1xuICAgICAgICB0aGlzLndlYlNvY2tldENvbnRyb2xsZXIub25XZWJTb2NrZXRPbmNsb3NlT3ZlcmxheU1lc3NhZ2UgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIHRoaXMucGl4ZWxTdHJlYW1pbmcuX29uRGlzY29ubmVjdChcbiAgICAgICAgICAgICAgICBgV2Vic29ja2V0IGRpc2Nvbm5lY3QgKCR7ZXZlbnQuY29kZX0pICR7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LnJlYXNvbiAhPSAnJyA/ICctICcgKyBldmVudC5yZWFzb24gOiAnJ1xuICAgICAgICAgICAgICAgIH1gXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgdGhpcy5zZXRWaWRlb0VuY29kZXJBdmdRUCgwKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy53ZWJTb2NrZXRDb250cm9sbGVyLm9uT3Blbi5hZGRFdmVudExpc3RlbmVyKCdvcGVuJywgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgQnJvd3NlclNlbmRzT2ZmZXIgPSB0aGlzLmNvbmZpZy5pc0ZsYWdFbmFibGVkKFxuICAgICAgICAgICAgICAgIEZsYWdzLkJyb3dzZXJTZW5kT2ZmZXJcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpZighQnJvd3NlclNlbmRzT2ZmZXIpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdGhpcy53ZWJTb2NrZXRDb250cm9sbGVyLnJlcXVlc3RTdHJlYW1lckxpc3QoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMud2ViU29ja2V0Q29udHJvbGxlci5vbkNsb3NlLmFkZEV2ZW50TGlzdGVuZXIoJ2Nsb3NlJywgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5hZmtDb250cm9sbGVyLnN0b3BBZmtXYXJuaW5nVGltZXIoKTtcblxuICAgICAgICAgICAgLy8gc3RvcCBzZW5kaW5nIHN0YXRzIG9uIGludGVydmFsIGlmIHdlIGhhdmUgY2xvc2VkIG91ciBjb25uZWN0aW9uXG4gICAgICAgICAgICBpZiAodGhpcy5zdGF0c1RpbWVySGFuZGxlICYmIHRoaXMuc3RhdHNUaW1lckhhbmRsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgd2luZG93LmNsZWFySW50ZXJ2YWwodGhpcy5zdGF0c1RpbWVySGFuZGxlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gdW5yZWdpc3RlciBhbGwgaW5wdXQgZGV2aWNlIGV2ZW50IGhhbmRsZXJzIG9uIGRpc2Nvbm5lY3RcbiAgICAgICAgICAgIHRoaXMuc2V0VG91Y2hJbnB1dEVuYWJsZWQoZmFsc2UpO1xuICAgICAgICAgICAgdGhpcy5zZXRNb3VzZUlucHV0RW5hYmxlZChmYWxzZSk7XG4gICAgICAgICAgICB0aGlzLnNldEtleWJvYXJkSW5wdXRFbmFibGVkKGZhbHNlKTtcbiAgICAgICAgICAgIHRoaXMuc2V0R2FtZVBhZElucHV0RW5hYmxlZChmYWxzZSk7XG5cbiAgICAgICAgICAgIGlmKHRoaXMuc2hvdWxkUmVjb25uZWN0ICYmIHRoaXMuY29uZmlnLmdldE51bWVyaWNTZXR0aW5nVmFsdWUoTnVtZXJpY1BhcmFtZXRlcnMuTWF4UmVjb25uZWN0QXR0ZW1wdHMpID4gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuaXNSZWNvbm5lY3RpbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMucmVjb25uZWN0QXR0ZW1wdCsrO1xuICAgICAgICAgICAgICAgIHRoaXMucmVzdGFydFN0cmVhbUF1dG9tYXRpY2FsbHkoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gc2V0IHVwIHRoZSBmaW5hbCB3ZWJSdGMgcGxheWVyIGNvbnRyb2xsZXIgbWV0aG9kcyBmcm9tIHdpdGhpbiBvdXIgYXBwbGljYXRpb24gc28gYSBjb25uZWN0aW9uIGNhbiBiZSBhY3RpdmF0ZWRcbiAgICAgICAgdGhpcy5zZW5kRGVzY3JpcHRvckNvbnRyb2xsZXIgPSBuZXcgU2VuZERlc2NyaXB0b3JDb250cm9sbGVyKFxuICAgICAgICAgICAgdGhpcy5kYXRhQ2hhbm5lbFNlbmRlcixcbiAgICAgICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXJcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5zZW5kTWVzc2FnZUNvbnRyb2xsZXIgPSBuZXcgU2VuZE1lc3NhZ2VDb250cm9sbGVyKFxuICAgICAgICAgICAgdGhpcy5kYXRhQ2hhbm5lbFNlbmRlcixcbiAgICAgICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXJcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXNDb250cm9sbGVyID0gbmV3IFRvU3RyZWFtZXJNZXNzYWdlc0NvbnRyb2xsZXIoXG4gICAgICAgICAgICB0aGlzLnNlbmRNZXNzYWdlQ29udHJvbGxlclxuICAgICAgICApO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyTWVzc2FnZUhhbmRsZXJzKCk7XG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIucG9wdWxhdGVEZWZhdWx0UHJvdG9jb2woKTtcblxuICAgICAgICB0aGlzLmlucHV0Q2xhc3Nlc0ZhY3RvcnkgPSBuZXcgSW5wdXRDbGFzc2VzRmFjdG9yeShcbiAgICAgICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIsXG4gICAgICAgICAgICB0aGlzLnZpZGVvUGxheWVyLFxuICAgICAgICAgICAgdGhpcy5jb29yZGluYXRlQ29udmVydGVyXG4gICAgICAgICk7XG5cbiAgICAgICAgdGhpcy5pc1VzaW5nU0ZVID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaXNRdWFsaXR5Q29udHJvbGxlciA9IGZhbHNlO1xuICAgICAgICB0aGlzLnByZWZlcnJlZENvZGVjID0gJyc7XG4gICAgICAgIHRoaXMuc2hvdWxkUmVjb25uZWN0ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5pc1JlY29ubmVjdGluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLnJlY29ubmVjdEF0dGVtcHQgPSAwO1xuXG4gICAgICAgIHRoaXMuY29uZmlnLl9hZGRPbk9wdGlvblNldHRpbmdDaGFuZ2VkTGlzdGVuZXIoXG4gICAgICAgICAgICBPcHRpb25QYXJhbWV0ZXJzLlN0cmVhbWVySWQsXG4gICAgICAgICAgICAoc3RyZWFtZXJpZCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmKHN0cmVhbWVyaWQgPT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIGNsb3NlIHRoZSBjdXJyZW50IHBlZXIgY29ubmVjdGlvbiBhbmQgY3JlYXRlIGEgbmV3IG9uZVxuICAgICAgICAgICAgICAgIHRoaXMucGVlckNvbm5lY3Rpb25Db250cm9sbGVyLnBlZXJDb25uZWN0aW9uLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5wZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIuY3JlYXRlUGVlckNvbm5lY3Rpb24oXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGVlckNvbmZpZyxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcmVmZXJyZWRDb2RlY1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgdGhpcy5zdWJzY3JpYmVkU3RyZWFtID0gc3RyZWFtZXJpZDtcbiAgICAgICAgICAgICAgICB0aGlzLndlYlNvY2tldENvbnRyb2xsZXIuc2VuZFN1YnNjcmliZShzdHJlYW1lcmlkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLnNldFZpZGVvRW5jb2RlckF2Z1FQKC0xKTtcblxuICAgICAgICB0aGlzLnNpZ25hbGxpbmdVcmxCdWlsZGVyID0gICgpID0+IHtcbiAgICAgICAgICAgIGxldCBzaWduYWxsaW5nU2VydmVyVXJsID0gdGhpcy5jb25maWcuZ2V0VGV4dFNldHRpbmdWYWx1ZShcbiAgICAgICAgICAgICAgICBUZXh0UGFyYW1ldGVycy5TaWduYWxsaW5nU2VydmVyVXJsXG4gICAgICAgICAgICApO1xuICAgIFxuICAgICAgICAgICAgLy8gSWYgd2UgYXJlIGNvbm5lY3RpbmcgdG8gdGhlIFNGVSBhZGQgYSBzcGVjaWFsIHVybCBwYXJhbWV0ZXIgdG8gdGhlIHVybFxuICAgICAgICAgICAgaWYgKHRoaXMuY29uZmlnLmlzRmxhZ0VuYWJsZWQoRmxhZ3MuQnJvd3NlclNlbmRPZmZlcikpIHtcbiAgICAgICAgICAgICAgICBzaWduYWxsaW5nU2VydmVyVXJsICs9ICc/JyArIEZsYWdzLkJyb3dzZXJTZW5kT2ZmZXIgKyAnPXRydWUnO1xuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgLy8gVGhpcyBjb2RlIGlzIG5vIGxvbmdlciBuZWVkZWQsIGJ1dCBpcyBhIGdvb2QgZXhhbXBsZSBmb3IgaG93IHN1YnNlcXVlbnQgY29uZmlnIGZsYWdzIGNhbiBiZSBhcHBlbmRlZFxuICAgICAgICAgICAgLy8gaWYgKHRoaXMuY29uZmlnLmlzRmxhZ0VuYWJsZWQoRmxhZ3MuQnJvd3NlclNlbmRPZmZlcikpIHtcbiAgICAgICAgICAgIC8vICAgICBzaWduYWxsaW5nU2VydmVyVXJsICs9IChzaWduYWxsaW5nU2VydmVyVXJsLmluY2x1ZGVzKCc/JykgPyAnJicgOiAnPycpICsgRmxhZ3MuQnJvd3NlclNlbmRPZmZlciArICc9dHJ1ZSc7XG4gICAgICAgICAgICAvLyB9XG4gICAgXG4gICAgICAgICAgICByZXR1cm4gc2lnbmFsbGluZ1NlcnZlclVybDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1ha2UgYSByZXF1ZXN0IHRvIFVucXVhbnRpemVkQW5kRGVub3JtYWxpemVVbnNpZ25lZCBjb29yZGluYXRlc1xuICAgICAqIEBwYXJhbSB4IHggYXhpcyBjb29yZGluYXRlXG4gICAgICogQHBhcmFtIHkgeSBheGlzIGNvb3JkaW5hdGVcbiAgICAgKi9cbiAgICByZXF1ZXN0VW5xdWFudGl6ZWRBbmREZW5vcm1hbGl6ZVVuc2lnbmVkKFxuICAgICAgICB4OiBudW1iZXIsXG4gICAgICAgIHk6IG51bWJlclxuICAgICk6IFVucXVhbnRpemVkRGVub3JtYWxpemVkVW5zaWduZWRDb29yZCB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvb3JkaW5hdGVDb252ZXJ0ZXIudW5xdWFudGl6ZUFuZERlbm9ybWFsaXplVW5zaWduZWQoeCwgeSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGFuZGxlcyB3aGVuIGEgbWVzc2FnZSBpcyByZWNlaXZlZFxuICAgICAqIEBwYXJhbSBldmVudCAtIE1lc3NhZ2UgRXZlbnRcbiAgICAgKi9cbiAgICBoYW5kbGVPbk1lc3NhZ2UoZXZlbnQ6IE1lc3NhZ2VFdmVudCkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gbmV3IFVpbnQ4QXJyYXkoZXZlbnQuZGF0YSk7XG4gICAgICAgIExvZ2dlci5Mb2coTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ01lc3NhZ2UgaW5jb21pbmc6JyArIG1lc3NhZ2UsIDYpO1xuXG4gICAgICAgIC8vdHJ5IHtcbiAgICAgICAgY29uc3QgbWVzc2FnZVR5cGUgPVxuICAgICAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5mcm9tU3RyZWFtZXJNZXNzYWdlcy5nZXRGcm9tVmFsdWUoXG4gICAgICAgICAgICAgICAgbWVzc2FnZVswXVxuICAgICAgICAgICAgKTtcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5mcm9tU3RyZWFtZXJIYW5kbGVycy5nZXQobWVzc2FnZVR5cGUpKFxuICAgICAgICAgICAgZXZlbnQuZGF0YVxuICAgICAgICApO1xuICAgICAgICAvL30gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy9Mb2dnZXIuRXJyb3IoTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgYEN1c3RvbSBkYXRhIGNoYW5uZWwgbWVzc2FnZSB3aXRoIG1lc3NhZ2UgdHlwZSB0aGF0IGlzIHVua25vd24gdG8gdGhlIFBpeGVsIFN0cmVhbWluZyBwcm90b2NvbC4gRG9lcyB5b3VyIFBpeGVsU3RyZWFtaW5nUHJvdG9jb2wgbmVlZCB1cGRhdGluZz8gVGhlIG1lc3NhZ2UgdHlwZSB3YXM6ICR7bWVzc2FnZVswXX1gKTtcbiAgICAgICAgLy99XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXIgbWVzc2FnZSBhbGwgaGFuZGxlcnNcbiAgICAgKi9cbiAgICByZWdpc3Rlck1lc3NhZ2VIYW5kbGVycygpIHtcbiAgICAgICAgLy8gRnJvbSBTdHJlYW1lclxuICAgICAgICAvLyBNZXNzYWdlIGV2ZW50cyBmcm9tIHRoZSBzdHJlYW1lciBoYXZlIGEgZGF0YSB0eXBlIG9mIEFycmF5QnVmZmVyIGFzIHdlIGZvcmNlIHRoaXMgdHlwZSBpbiB0aGUgRGF0YWNoYW5uZWxDb250cm9sbGVyXG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIucmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihcbiAgICAgICAgICAgIE1lc3NhZ2VEaXJlY3Rpb24uRnJvbVN0cmVhbWVyLFxuICAgICAgICAgICAgJ1F1YWxpdHlDb250cm9sT3duZXJzaGlwJyxcbiAgICAgICAgICAgIChkYXRhOiBBcnJheUJ1ZmZlcikgPT4gdGhpcy5vblF1YWxpdHlDb250cm9sT3duZXJzaGlwKGRhdGEpXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIucmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihcbiAgICAgICAgICAgIE1lc3NhZ2VEaXJlY3Rpb24uRnJvbVN0cmVhbWVyLFxuICAgICAgICAgICAgJ1Jlc3BvbnNlJyxcbiAgICAgICAgICAgIChkYXRhOiBBcnJheUJ1ZmZlcikgPT4gdGhpcy5yZXNwb25zZUNvbnRyb2xsZXIub25SZXNwb25zZShkYXRhKVxuICAgICAgICApO1xuICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIoXG4gICAgICAgICAgICBNZXNzYWdlRGlyZWN0aW9uLkZyb21TdHJlYW1lcixcbiAgICAgICAgICAgICdDb21tYW5kJyxcbiAgICAgICAgICAgIChkYXRhOiBBcnJheUJ1ZmZlcikgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMub25Db21tYW5kKGRhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIoXG4gICAgICAgICAgICBNZXNzYWdlRGlyZWN0aW9uLkZyb21TdHJlYW1lcixcbiAgICAgICAgICAgICdGcmVlemVGcmFtZScsXG4gICAgICAgICAgICAoZGF0YTogQXJyYXlCdWZmZXIpID0+IHRoaXMub25GcmVlemVGcmFtZU1lc3NhZ2UoZGF0YSlcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKFxuICAgICAgICAgICAgTWVzc2FnZURpcmVjdGlvbi5Gcm9tU3RyZWFtZXIsXG4gICAgICAgICAgICAnVW5mcmVlemVGcmFtZScsXG4gICAgICAgICAgICAoKSA9PiB0aGlzLmludmFsaWRhdGVGcmVlemVGcmFtZUFuZEVuYWJsZVZpZGVvKClcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKFxuICAgICAgICAgICAgTWVzc2FnZURpcmVjdGlvbi5Gcm9tU3RyZWFtZXIsXG4gICAgICAgICAgICAnVmlkZW9FbmNvZGVyQXZnUVAnLFxuICAgICAgICAgICAgKGRhdGE6IEFycmF5QnVmZmVyKSA9PiB0aGlzLmhhbmRsZVZpZGVvRW5jb2RlckF2Z1FQKGRhdGEpXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIucmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihcbiAgICAgICAgICAgIE1lc3NhZ2VEaXJlY3Rpb24uRnJvbVN0cmVhbWVyLFxuICAgICAgICAgICAgJ0xhdGVuY3lUZXN0JyxcbiAgICAgICAgICAgIChkYXRhOiBBcnJheUJ1ZmZlcikgPT4gdGhpcy5oYW5kbGVMYXRlbmN5VGVzdFJlc3VsdChkYXRhKVxuICAgICAgICApO1xuICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIoXG4gICAgICAgICAgICBNZXNzYWdlRGlyZWN0aW9uLkZyb21TdHJlYW1lcixcbiAgICAgICAgICAgICdJbml0aWFsU2V0dGluZ3MnLFxuICAgICAgICAgICAgKGRhdGE6IEFycmF5QnVmZmVyKSA9PiB0aGlzLmhhbmRsZUluaXRpYWxTZXR0aW5ncyhkYXRhKVxuICAgICAgICApO1xuICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIoXG4gICAgICAgICAgICBNZXNzYWdlRGlyZWN0aW9uLkZyb21TdHJlYW1lcixcbiAgICAgICAgICAgICdGaWxlRXh0ZW5zaW9uJyxcbiAgICAgICAgICAgIChkYXRhOiBBcnJheUJ1ZmZlcikgPT4gdGhpcy5vbkZpbGVFeHRlbnNpb24oZGF0YSlcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKFxuICAgICAgICAgICAgTWVzc2FnZURpcmVjdGlvbi5Gcm9tU3RyZWFtZXIsXG4gICAgICAgICAgICAnRmlsZU1pbWVUeXBlJyxcbiAgICAgICAgICAgIChkYXRhOiBBcnJheUJ1ZmZlcikgPT4gdGhpcy5vbkZpbGVNaW1lVHlwZShkYXRhKVxuICAgICAgICApO1xuICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIoXG4gICAgICAgICAgICBNZXNzYWdlRGlyZWN0aW9uLkZyb21TdHJlYW1lcixcbiAgICAgICAgICAgICdGaWxlQ29udGVudHMnLFxuICAgICAgICAgICAgKGRhdGE6IEFycmF5QnVmZmVyKSA9PiB0aGlzLm9uRmlsZUNvbnRlbnRzKGRhdGEpXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIucmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihcbiAgICAgICAgICAgIE1lc3NhZ2VEaXJlY3Rpb24uRnJvbVN0cmVhbWVyLFxuICAgICAgICAgICAgJ1Rlc3RFY2hvJyxcbiAgICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgICAgICAvKiBEbyBub3RoaW5nICovXG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIucmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihcbiAgICAgICAgICAgIE1lc3NhZ2VEaXJlY3Rpb24uRnJvbVN0cmVhbWVyLFxuICAgICAgICAgICAgJ0lucHV0Q29udHJvbE93bmVyc2hpcCcsXG4gICAgICAgICAgICAoZGF0YTogQXJyYXlCdWZmZXIpID0+IHRoaXMub25JbnB1dENvbnRyb2xPd25lcnNoaXAoZGF0YSlcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKFxuICAgICAgICAgICAgTWVzc2FnZURpcmVjdGlvbi5Gcm9tU3RyZWFtZXIsXG4gICAgICAgICAgICAnR2FtZXBhZFJlc3BvbnNlJyxcbiAgICAgICAgICAgIChkYXRhOiBBcnJheUJ1ZmZlcikgPT4gdGhpcy5vbkdhbWVwYWRSZXNwb25zZShkYXRhKVxuICAgICAgICApO1xuICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIoXG4gICAgICAgICAgICBNZXNzYWdlRGlyZWN0aW9uLkZyb21TdHJlYW1lcixcbiAgICAgICAgICAgICdQcm90b2NvbCcsXG4gICAgICAgICAgICAoZGF0YTogQXJyYXlCdWZmZXIpID0+IHRoaXMub25Qcm90b2NvbE1lc3NhZ2UoZGF0YSlcbiAgICAgICAgKTtcblxuICAgICAgICAvLyBUbyBTdHJlYW1lclxuICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIoXG4gICAgICAgICAgICBNZXNzYWdlRGlyZWN0aW9uLlRvU3RyZWFtZXIsXG4gICAgICAgICAgICAnSUZyYW1lUmVxdWVzdCcsXG4gICAgICAgICAgICAoKSA9PlxuICAgICAgICAgICAgICAgIHRoaXMuc2VuZE1lc3NhZ2VDb250cm9sbGVyLnNlbmRNZXNzYWdlVG9TdHJlYW1lcihcbiAgICAgICAgICAgICAgICAgICAgJ0lGcmFtZVJlcXVlc3QnXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIoXG4gICAgICAgICAgICBNZXNzYWdlRGlyZWN0aW9uLlRvU3RyZWFtZXIsXG4gICAgICAgICAgICAnUmVxdWVzdFF1YWxpdHlDb250cm9sJyxcbiAgICAgICAgICAgICgpID0+XG4gICAgICAgICAgICAgICAgdGhpcy5zZW5kTWVzc2FnZUNvbnRyb2xsZXIuc2VuZE1lc3NhZ2VUb1N0cmVhbWVyKFxuICAgICAgICAgICAgICAgICAgICAnUmVxdWVzdFF1YWxpdHlDb250cm9sJ1xuICAgICAgICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKFxuICAgICAgICAgICAgTWVzc2FnZURpcmVjdGlvbi5Ub1N0cmVhbWVyLFxuICAgICAgICAgICAgJ0Zwc1JlcXVlc3QnLFxuICAgICAgICAgICAgKCkgPT4gdGhpcy5zZW5kTWVzc2FnZUNvbnRyb2xsZXIuc2VuZE1lc3NhZ2VUb1N0cmVhbWVyKCdGcHNSZXF1ZXN0JylcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKFxuICAgICAgICAgICAgTWVzc2FnZURpcmVjdGlvbi5Ub1N0cmVhbWVyLFxuICAgICAgICAgICAgJ0F2ZXJhZ2VCaXRyYXRlUmVxdWVzdCcsXG4gICAgICAgICAgICAoKSA9PlxuICAgICAgICAgICAgICAgIHRoaXMuc2VuZE1lc3NhZ2VDb250cm9sbGVyLnNlbmRNZXNzYWdlVG9TdHJlYW1lcihcbiAgICAgICAgICAgICAgICAgICAgJ0F2ZXJhZ2VCaXRyYXRlUmVxdWVzdCdcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIucmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihcbiAgICAgICAgICAgIE1lc3NhZ2VEaXJlY3Rpb24uVG9TdHJlYW1lcixcbiAgICAgICAgICAgICdTdGFydFN0cmVhbWluZycsXG4gICAgICAgICAgICAoKSA9PlxuICAgICAgICAgICAgICAgIHRoaXMuc2VuZE1lc3NhZ2VDb250cm9sbGVyLnNlbmRNZXNzYWdlVG9TdHJlYW1lcihcbiAgICAgICAgICAgICAgICAgICAgJ1N0YXJ0U3RyZWFtaW5nJ1xuICAgICAgICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKFxuICAgICAgICAgICAgTWVzc2FnZURpcmVjdGlvbi5Ub1N0cmVhbWVyLFxuICAgICAgICAgICAgJ1N0b3BTdHJlYW1pbmcnLFxuICAgICAgICAgICAgKCkgPT5cbiAgICAgICAgICAgICAgICB0aGlzLnNlbmRNZXNzYWdlQ29udHJvbGxlci5zZW5kTWVzc2FnZVRvU3RyZWFtZXIoXG4gICAgICAgICAgICAgICAgICAgICdTdG9wU3RyZWFtaW5nJ1xuICAgICAgICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKFxuICAgICAgICAgICAgTWVzc2FnZURpcmVjdGlvbi5Ub1N0cmVhbWVyLFxuICAgICAgICAgICAgJ0xhdGVuY3lUZXN0JyxcbiAgICAgICAgICAgICgpID0+XG4gICAgICAgICAgICAgICAgdGhpcy5zZW5kTWVzc2FnZUNvbnRyb2xsZXIuc2VuZE1lc3NhZ2VUb1N0cmVhbWVyKCdMYXRlbmN5VGVzdCcpXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIucmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihcbiAgICAgICAgICAgIE1lc3NhZ2VEaXJlY3Rpb24uVG9TdHJlYW1lcixcbiAgICAgICAgICAgICdSZXF1ZXN0SW5pdGlhbFNldHRpbmdzJyxcbiAgICAgICAgICAgICgpID0+XG4gICAgICAgICAgICAgICAgdGhpcy5zZW5kTWVzc2FnZUNvbnRyb2xsZXIuc2VuZE1lc3NhZ2VUb1N0cmVhbWVyKFxuICAgICAgICAgICAgICAgICAgICAnUmVxdWVzdEluaXRpYWxTZXR0aW5ncydcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIucmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihcbiAgICAgICAgICAgIE1lc3NhZ2VEaXJlY3Rpb24uVG9TdHJlYW1lcixcbiAgICAgICAgICAgICdUZXN0RWNobycsXG4gICAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICAgICAgLyogRG8gbm90aGluZyAqL1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIoXG4gICAgICAgICAgICBNZXNzYWdlRGlyZWN0aW9uLlRvU3RyZWFtZXIsXG4gICAgICAgICAgICAnVUlJbnRlcmFjdGlvbicsXG4gICAgICAgICAgICAoZGF0YTogb2JqZWN0KSA9PlxuICAgICAgICAgICAgICAgIHRoaXMuc2VuZERlc2NyaXB0b3JDb250cm9sbGVyLmVtaXRVSUludGVyYWN0aW9uKGRhdGEpXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIucmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihcbiAgICAgICAgICAgIE1lc3NhZ2VEaXJlY3Rpb24uVG9TdHJlYW1lcixcbiAgICAgICAgICAgICdDb21tYW5kJyxcbiAgICAgICAgICAgIChkYXRhOiBvYmplY3QpID0+IHRoaXMuc2VuZERlc2NyaXB0b3JDb250cm9sbGVyLmVtaXRDb21tYW5kKGRhdGEpXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIucmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihcbiAgICAgICAgICAgIE1lc3NhZ2VEaXJlY3Rpb24uVG9TdHJlYW1lcixcbiAgICAgICAgICAgICdLZXlEb3duJyxcbiAgICAgICAgICAgIChkYXRhOiBBcnJheTxudW1iZXI+KSA9PlxuICAgICAgICAgICAgICAgIHRoaXMuc2VuZE1lc3NhZ2VDb250cm9sbGVyLnNlbmRNZXNzYWdlVG9TdHJlYW1lcihcbiAgICAgICAgICAgICAgICAgICAgJ0tleURvd24nLFxuICAgICAgICAgICAgICAgICAgICBkYXRhXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIoXG4gICAgICAgICAgICBNZXNzYWdlRGlyZWN0aW9uLlRvU3RyZWFtZXIsXG4gICAgICAgICAgICAnS2V5VXAnLFxuICAgICAgICAgICAgKGRhdGE6IEFycmF5PG51bWJlcj4pID0+XG4gICAgICAgICAgICAgICAgdGhpcy5zZW5kTWVzc2FnZUNvbnRyb2xsZXIuc2VuZE1lc3NhZ2VUb1N0cmVhbWVyKCdLZXlVcCcsIGRhdGEpXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIucmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihcbiAgICAgICAgICAgIE1lc3NhZ2VEaXJlY3Rpb24uVG9TdHJlYW1lcixcbiAgICAgICAgICAgICdLZXlQcmVzcycsXG4gICAgICAgICAgICAoZGF0YTogQXJyYXk8bnVtYmVyPikgPT5cbiAgICAgICAgICAgICAgICB0aGlzLnNlbmRNZXNzYWdlQ29udHJvbGxlci5zZW5kTWVzc2FnZVRvU3RyZWFtZXIoXG4gICAgICAgICAgICAgICAgICAgICdLZXlQcmVzcycsXG4gICAgICAgICAgICAgICAgICAgIGRhdGFcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIucmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihcbiAgICAgICAgICAgIE1lc3NhZ2VEaXJlY3Rpb24uVG9TdHJlYW1lcixcbiAgICAgICAgICAgICdNb3VzZUVudGVyJyxcbiAgICAgICAgICAgIChkYXRhOiBBcnJheTxudW1iZXI+KSA9PlxuICAgICAgICAgICAgICAgIHRoaXMuc2VuZE1lc3NhZ2VDb250cm9sbGVyLnNlbmRNZXNzYWdlVG9TdHJlYW1lcihcbiAgICAgICAgICAgICAgICAgICAgJ01vdXNlRW50ZXInLFxuICAgICAgICAgICAgICAgICAgICBkYXRhXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIoXG4gICAgICAgICAgICBNZXNzYWdlRGlyZWN0aW9uLlRvU3RyZWFtZXIsXG4gICAgICAgICAgICAnTW91c2VMZWF2ZScsXG4gICAgICAgICAgICAoZGF0YTogQXJyYXk8bnVtYmVyPikgPT5cbiAgICAgICAgICAgICAgICB0aGlzLnNlbmRNZXNzYWdlQ29udHJvbGxlci5zZW5kTWVzc2FnZVRvU3RyZWFtZXIoXG4gICAgICAgICAgICAgICAgICAgICdNb3VzZUxlYXZlJyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKFxuICAgICAgICAgICAgTWVzc2FnZURpcmVjdGlvbi5Ub1N0cmVhbWVyLFxuICAgICAgICAgICAgJ01vdXNlRG93bicsXG4gICAgICAgICAgICAoZGF0YTogQXJyYXk8bnVtYmVyPikgPT5cbiAgICAgICAgICAgICAgICB0aGlzLnNlbmRNZXNzYWdlQ29udHJvbGxlci5zZW5kTWVzc2FnZVRvU3RyZWFtZXIoXG4gICAgICAgICAgICAgICAgICAgICdNb3VzZURvd24nLFxuICAgICAgICAgICAgICAgICAgICBkYXRhXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIoXG4gICAgICAgICAgICBNZXNzYWdlRGlyZWN0aW9uLlRvU3RyZWFtZXIsXG4gICAgICAgICAgICAnTW91c2VVcCcsXG4gICAgICAgICAgICAoZGF0YTogQXJyYXk8bnVtYmVyPikgPT5cbiAgICAgICAgICAgICAgICB0aGlzLnNlbmRNZXNzYWdlQ29udHJvbGxlci5zZW5kTWVzc2FnZVRvU3RyZWFtZXIoXG4gICAgICAgICAgICAgICAgICAgICdNb3VzZVVwJyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKFxuICAgICAgICAgICAgTWVzc2FnZURpcmVjdGlvbi5Ub1N0cmVhbWVyLFxuICAgICAgICAgICAgJ01vdXNlTW92ZScsXG4gICAgICAgICAgICAoZGF0YTogQXJyYXk8bnVtYmVyPikgPT5cbiAgICAgICAgICAgICAgICB0aGlzLnNlbmRNZXNzYWdlQ29udHJvbGxlci5zZW5kTWVzc2FnZVRvU3RyZWFtZXIoXG4gICAgICAgICAgICAgICAgICAgICdNb3VzZU1vdmUnLFxuICAgICAgICAgICAgICAgICAgICBkYXRhXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIoXG4gICAgICAgICAgICBNZXNzYWdlRGlyZWN0aW9uLlRvU3RyZWFtZXIsXG4gICAgICAgICAgICAnTW91c2VXaGVlbCcsXG4gICAgICAgICAgICAoZGF0YTogQXJyYXk8bnVtYmVyPikgPT5cbiAgICAgICAgICAgICAgICB0aGlzLnNlbmRNZXNzYWdlQ29udHJvbGxlci5zZW5kTWVzc2FnZVRvU3RyZWFtZXIoXG4gICAgICAgICAgICAgICAgICAgICdNb3VzZVdoZWVsJyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKFxuICAgICAgICAgICAgTWVzc2FnZURpcmVjdGlvbi5Ub1N0cmVhbWVyLFxuICAgICAgICAgICAgJ01vdXNlRG91YmxlJyxcbiAgICAgICAgICAgIChkYXRhOiBBcnJheTxudW1iZXI+KSA9PlxuICAgICAgICAgICAgICAgIHRoaXMuc2VuZE1lc3NhZ2VDb250cm9sbGVyLnNlbmRNZXNzYWdlVG9TdHJlYW1lcihcbiAgICAgICAgICAgICAgICAgICAgJ01vdXNlRG91YmxlJyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKFxuICAgICAgICAgICAgTWVzc2FnZURpcmVjdGlvbi5Ub1N0cmVhbWVyLFxuICAgICAgICAgICAgJ1RvdWNoU3RhcnQnLFxuICAgICAgICAgICAgKGRhdGE6IEFycmF5PG51bWJlcj4pID0+XG4gICAgICAgICAgICAgICAgdGhpcy5zZW5kTWVzc2FnZUNvbnRyb2xsZXIuc2VuZE1lc3NhZ2VUb1N0cmVhbWVyKFxuICAgICAgICAgICAgICAgICAgICAnVG91Y2hTdGFydCcsXG4gICAgICAgICAgICAgICAgICAgIGRhdGFcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIucmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihcbiAgICAgICAgICAgIE1lc3NhZ2VEaXJlY3Rpb24uVG9TdHJlYW1lcixcbiAgICAgICAgICAgICdUb3VjaEVuZCcsXG4gICAgICAgICAgICAoZGF0YTogQXJyYXk8bnVtYmVyPikgPT5cbiAgICAgICAgICAgICAgICB0aGlzLnNlbmRNZXNzYWdlQ29udHJvbGxlci5zZW5kTWVzc2FnZVRvU3RyZWFtZXIoXG4gICAgICAgICAgICAgICAgICAgICdUb3VjaEVuZCcsXG4gICAgICAgICAgICAgICAgICAgIGRhdGFcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIucmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihcbiAgICAgICAgICAgIE1lc3NhZ2VEaXJlY3Rpb24uVG9TdHJlYW1lcixcbiAgICAgICAgICAgICdUb3VjaE1vdmUnLFxuICAgICAgICAgICAgKGRhdGE6IEFycmF5PG51bWJlcj4pID0+XG4gICAgICAgICAgICAgICAgdGhpcy5zZW5kTWVzc2FnZUNvbnRyb2xsZXIuc2VuZE1lc3NhZ2VUb1N0cmVhbWVyKFxuICAgICAgICAgICAgICAgICAgICAnVG91Y2hNb3ZlJyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKFxuICAgICAgICAgICAgTWVzc2FnZURpcmVjdGlvbi5Ub1N0cmVhbWVyLFxuICAgICAgICAgICAgJ0dhbWVwYWRDb25uZWN0ZWQnLFxuICAgICAgICAgICAgKCkgPT5cbiAgICAgICAgICAgICAgICB0aGlzLnNlbmRNZXNzYWdlQ29udHJvbGxlci5zZW5kTWVzc2FnZVRvU3RyZWFtZXIoXG4gICAgICAgICAgICAgICAgICAgICdHYW1lcGFkQ29ubmVjdGVkJ1xuICAgICAgICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKFxuICAgICAgICAgICAgTWVzc2FnZURpcmVjdGlvbi5Ub1N0cmVhbWVyLFxuICAgICAgICAgICAgJ0dhbWVwYWRCdXR0b25QcmVzc2VkJyxcbiAgICAgICAgICAgIChkYXRhOiBBcnJheTxudW1iZXI+KSA9PlxuICAgICAgICAgICAgICAgIHRoaXMuc2VuZE1lc3NhZ2VDb250cm9sbGVyLnNlbmRNZXNzYWdlVG9TdHJlYW1lcihcbiAgICAgICAgICAgICAgICAgICAgJ0dhbWVwYWRCdXR0b25QcmVzc2VkJyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKFxuICAgICAgICAgICAgTWVzc2FnZURpcmVjdGlvbi5Ub1N0cmVhbWVyLFxuICAgICAgICAgICAgJ0dhbWVwYWRCdXR0b25SZWxlYXNlZCcsXG4gICAgICAgICAgICAoZGF0YTogQXJyYXk8bnVtYmVyPikgPT5cbiAgICAgICAgICAgICAgICB0aGlzLnNlbmRNZXNzYWdlQ29udHJvbGxlci5zZW5kTWVzc2FnZVRvU3RyZWFtZXIoXG4gICAgICAgICAgICAgICAgICAgICdHYW1lcGFkQnV0dG9uUmVsZWFzZWQnLFxuICAgICAgICAgICAgICAgICAgICBkYXRhXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIoXG4gICAgICAgICAgICBNZXNzYWdlRGlyZWN0aW9uLlRvU3RyZWFtZXIsXG4gICAgICAgICAgICAnR2FtZXBhZEFuYWxvZycsXG4gICAgICAgICAgICAoZGF0YTogQXJyYXk8bnVtYmVyPikgPT5cbiAgICAgICAgICAgICAgICB0aGlzLnNlbmRNZXNzYWdlQ29udHJvbGxlci5zZW5kTWVzc2FnZVRvU3RyZWFtZXIoXG4gICAgICAgICAgICAgICAgICAgICdHYW1lcGFkQW5hbG9nJyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKFxuICAgICAgICAgICAgTWVzc2FnZURpcmVjdGlvbi5Ub1N0cmVhbWVyLFxuICAgICAgICAgICAgJ0dhbWVwYWREaXNjb25uZWN0ZWQnLFxuICAgICAgICAgICAgKGRhdGE6IEFycmF5PG51bWJlcj4pID0+XG4gICAgICAgICAgICAgICAgdGhpcy5zZW5kTWVzc2FnZUNvbnRyb2xsZXIuc2VuZE1lc3NhZ2VUb1N0cmVhbWVyKFxuICAgICAgICAgICAgICAgICAgICAnR2FtZXBhZERpc2Nvbm5lY3RlZCcsXG4gICAgICAgICAgICAgICAgICAgIGRhdGFcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIucmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihcbiAgICAgICAgICAgIE1lc3NhZ2VEaXJlY3Rpb24uVG9TdHJlYW1lcixcbiAgICAgICAgICAgICdYUkhNRFRyYW5zZm9ybScsXG4gICAgICAgICAgICAoZGF0YTogQXJyYXk8bnVtYmVyPikgPT5cbiAgICAgICAgICAgICAgICB0aGlzLnNlbmRNZXNzYWdlQ29udHJvbGxlci5zZW5kTWVzc2FnZVRvU3RyZWFtZXIoXG4gICAgICAgICAgICAgICAgICAgICdYUkhNRFRyYW5zZm9ybScsXG4gICAgICAgICAgICAgICAgICAgIGRhdGFcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIucmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihcbiAgICAgICAgICAgIE1lc3NhZ2VEaXJlY3Rpb24uVG9TdHJlYW1lcixcbiAgICAgICAgICAgICdYUkNvbnRyb2xsZXJUcmFuc2Zvcm0nLFxuICAgICAgICAgICAgKGRhdGE6IEFycmF5PG51bWJlcj4pID0+XG4gICAgICAgICAgICAgICAgdGhpcy5zZW5kTWVzc2FnZUNvbnRyb2xsZXIuc2VuZE1lc3NhZ2VUb1N0cmVhbWVyKFxuICAgICAgICAgICAgICAgICAgICAnWFJDb250cm9sbGVyVHJhbnNmb3JtJyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKFxuICAgICAgICAgICAgTWVzc2FnZURpcmVjdGlvbi5Ub1N0cmVhbWVyLFxuICAgICAgICAgICAgJ1hSU3lzdGVtJyxcbiAgICAgICAgICAgIChkYXRhOiBBcnJheTxudW1iZXI+KSA9PlxuICAgICAgICAgICAgICAgIHRoaXMuc2VuZE1lc3NhZ2VDb250cm9sbGVyLnNlbmRNZXNzYWdlVG9TdHJlYW1lcihcbiAgICAgICAgICAgICAgICAgICAgJ1hSU3lzdGVtJyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKFxuICAgICAgICAgICAgTWVzc2FnZURpcmVjdGlvbi5Ub1N0cmVhbWVyLFxuICAgICAgICAgICAgJ1hSQnV0dG9uVG91Y2hlZCcsXG4gICAgICAgICAgICAoZGF0YTogQXJyYXk8bnVtYmVyPikgPT5cbiAgICAgICAgICAgICAgICB0aGlzLnNlbmRNZXNzYWdlQ29udHJvbGxlci5zZW5kTWVzc2FnZVRvU3RyZWFtZXIoXG4gICAgICAgICAgICAgICAgICAgICdYUkJ1dHRvblRvdWNoZWQnLFxuICAgICAgICAgICAgICAgICAgICBkYXRhXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIoXG4gICAgICAgICAgICBNZXNzYWdlRGlyZWN0aW9uLlRvU3RyZWFtZXIsXG4gICAgICAgICAgICAnWFJCdXR0b25QcmVzc2VkJyxcbiAgICAgICAgICAgIChkYXRhOiBBcnJheTxudW1iZXI+KSA9PlxuICAgICAgICAgICAgICAgIHRoaXMuc2VuZE1lc3NhZ2VDb250cm9sbGVyLnNlbmRNZXNzYWdlVG9TdHJlYW1lcihcbiAgICAgICAgICAgICAgICAgICAgJ1hSQnV0dG9uUHJlc3NlZCcsXG4gICAgICAgICAgICAgICAgICAgIGRhdGFcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIucmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihcbiAgICAgICAgICAgIE1lc3NhZ2VEaXJlY3Rpb24uVG9TdHJlYW1lcixcbiAgICAgICAgICAgICdYUkJ1dHRvblJlbGVhc2VkJyxcbiAgICAgICAgICAgIChkYXRhOiBBcnJheTxudW1iZXI+KSA9PlxuICAgICAgICAgICAgICAgIHRoaXMuc2VuZE1lc3NhZ2VDb250cm9sbGVyLnNlbmRNZXNzYWdlVG9TdHJlYW1lcihcbiAgICAgICAgICAgICAgICAgICAgJ1hSQnV0dG9uUmVsZWFzZWQnLFxuICAgICAgICAgICAgICAgICAgICBkYXRhXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIoXG4gICAgICAgICAgICBNZXNzYWdlRGlyZWN0aW9uLlRvU3RyZWFtZXIsXG4gICAgICAgICAgICAnWFJBbmFsb2cnLFxuICAgICAgICAgICAgKGRhdGE6IEFycmF5PG51bWJlcj4pID0+XG4gICAgICAgICAgICAgICAgdGhpcy5zZW5kTWVzc2FnZUNvbnRyb2xsZXIuc2VuZE1lc3NhZ2VUb1N0cmVhbWVyKFxuICAgICAgICAgICAgICAgICAgICAnWFJBbmFsb2cnLFxuICAgICAgICAgICAgICAgICAgICBkYXRhXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFjdGl2YXRlIHRoZSBsb2dpYyBhc3NvY2lhdGVkIHdpdGggYSBjb21tYW5kIGZyb20gVUVcbiAgICAgKiBAcGFyYW0gbWVzc2FnZVxuICAgICAqL1xuICAgIG9uQ29tbWFuZChtZXNzYWdlOiBBcnJheUJ1ZmZlcikge1xuICAgICAgICBMb2dnZXIuTG9nKFxuICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcbiAgICAgICAgICAgICdEYXRhQ2hhbm5lbFJlY2VpdmVNZXNzYWdlVHlwZS5Db21tYW5kJyxcbiAgICAgICAgICAgIDZcbiAgICAgICAgKTtcbiAgICAgICAgY29uc3QgY29tbWFuZEFzU3RyaW5nID0gbmV3IFRleHREZWNvZGVyKCd1dGYtMTYnKS5kZWNvZGUoXG4gICAgICAgICAgICBtZXNzYWdlLnNsaWNlKDEpXG4gICAgICAgICk7XG5cbiAgICAgICAgTG9nZ2VyLkxvZyhcbiAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXG4gICAgICAgICAgICAnRGF0YSBDaGFubmVsIENvbW1hbmQ6ICcgKyBjb21tYW5kQXNTdHJpbmcsXG4gICAgICAgICAgICA2XG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IGNvbW1hbmQ6IE1lc3NhZ2VPblNjcmVlbktleWJvYXJkID0gSlNPTi5wYXJzZShjb21tYW5kQXNTdHJpbmcpO1xuICAgICAgICBpZiAoY29tbWFuZC5jb21tYW5kID09PSAnb25TY3JlZW5LZXlib2FyZCcpIHtcbiAgICAgICAgICAgIHRoaXMucGl4ZWxTdHJlYW1pbmcuX2FjdGl2YXRlT25TY3JlZW5LZXlib2FyZChjb21tYW5kKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhhbmRsZXMgYSBwcm90b2NvbCBtZXNzYWdlIHJlY2VpdmVkIGZyb20gdGhlIHN0cmVhbWVyXG4gICAgICogQHBhcmFtIG1lc3NhZ2UgdGhlIG1lc3NhZ2UgZGF0YSBmcm9tIHRoZSBzdHJlYW1lclxuICAgICAqL1xuICAgIG9uUHJvdG9jb2xNZXNzYWdlKG1lc3NhZ2U6IEFycmF5QnVmZmVyKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBwcm90b2NvbFN0cmluZyA9IG5ldyBUZXh0RGVjb2RlcigndXRmLTE2JykuZGVjb2RlKFxuICAgICAgICAgICAgICAgIG1lc3NhZ2Uuc2xpY2UoMSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBjb25zdCBwcm90b2NvbEpTT04gPSBKU09OLnBhcnNlKHByb3RvY29sU3RyaW5nKTtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHByb3RvY29sSlNPTiwgJ0RpcmVjdGlvbicpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBMb2dnZXIuRXJyb3IoXG4gICAgICAgICAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXG4gICAgICAgICAgICAgICAgICAgICdNYWxmb3JtZWQgcHJvdG9jb2wgcmVjZWl2ZWQuIEVuc3VyZSB0aGUgcHJvdG9jb2wgbWVzc2FnZSBjb250YWlucyBhIGRpcmVjdGlvbidcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgZGlyZWN0aW9uID0gcHJvdG9jb2xKU09OLkRpcmVjdGlvbjtcbiAgICAgICAgICAgIGRlbGV0ZSBwcm90b2NvbEpTT04uRGlyZWN0aW9uO1xuICAgICAgICAgICAgTG9nZ2VyLkxvZyhcbiAgICAgICAgICAgICAgICBMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLFxuICAgICAgICAgICAgICAgIGBSZWNlaXZlZCBuZXcgJHtcbiAgICAgICAgICAgICAgICAgICAgZGlyZWN0aW9uID09IE1lc3NhZ2VEaXJlY3Rpb24uRnJvbVN0cmVhbWVyXG4gICAgICAgICAgICAgICAgICAgICAgICA/ICdGcm9tU3RyZWFtZXInXG4gICAgICAgICAgICAgICAgICAgICAgICA6ICdUb1N0cmVhbWVyJ1xuICAgICAgICAgICAgICAgIH0gcHJvdG9jb2wuIFVwZGF0aW5nIGV4aXN0aW5nIHByb3RvY29sLi4uYFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHByb3RvY29sSlNPTikuZm9yRWFjaCgobWVzc2FnZVR5cGUpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBtZXNzYWdlID0gcHJvdG9jb2xKU09OW21lc3NhZ2VUeXBlXTtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGRpcmVjdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIE1lc3NhZ2VEaXJlY3Rpb24uVG9TdHJlYW1lcjpcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIHRoYXQgdGhlIG1lc3NhZ2UgY29udGFpbnMgYWxsIHRoZSByZWxldmFudCBwYXJhbXNcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaWQnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdieXRlTGVuZ3RoJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIExvZ2dlci5FcnJvcihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYFRvU3RyZWFtZXItPiR7bWVzc2FnZVR5cGV9IHByb3RvY29sIGRlZmluaXRpb24gd2FzIG1hbGZvcm1lZCBhcyBpdCBkaWRuJ3QgY29udGFpbiBhdCBsZWFzdCBhbiBpZCBhbmQgYSBieXRlTGVuZ3RoXFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVmaW5pdGlvbiB3YXM6ICR7SlNPTi5zdHJpbmdpZnkoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApfWBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJldHVybiBpbiBhIGZvckVhY2ggaXMgZXF1aXZhbGVudCB0byBhIGNvbnRpbnVlIGluIGEgbm9ybWFsIGZvciBsb29wXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuYnl0ZUxlbmd0aCA+IDAgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnc3RydWN0dXJlJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHdlIHNwZWNpZnkgYSBieXRlbGVuZ3RoLCB3aWxsIG11c3QgaGF2ZSBhIGNvcnJlc3BvbmRpbmcgc3RydWN0dXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgTG9nZ2VyLkVycm9yKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgVG9TdHJlYW1lci0+JHttZXNzYWdlVHlwZX0gcHJvdG9jb2wgZGVmaW5pdGlvbiB3YXMgbWFsZm9ybWVkIGFzIGl0IHNwZWNpZmllZCBhIGJ5dGVMZW5ndGggYnV0IG5vIGFjY29tcGFueWluZyBzdHJ1Y3R1cmVgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZXR1cm4gaW4gYSBmb3JFYWNoIGlzIGVxdWl2YWxlbnQgdG8gYSBjb250aW51ZSBpbiBhIG5vcm1hbCBmb3IgbG9vcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIudG9TdHJlYW1lckhhbmRsZXJzLmdldChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZVR5cGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiB3ZSd2ZSByZWdpc3RlcmVkIGEgaGFuZGxlciBmb3IgdGhpcyBtZXNzYWdlIHR5cGUgd2UgY2FuIGFkZCBpdCB0byBvdXIgc3VwcG9ydGVkIG1lc3NhZ2VzLiBpZSByZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKC4uLilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnRvU3RyZWFtZXJNZXNzYWdlcy5hZGQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VUeXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgTG9nZ2VyLkVycm9yKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgVGhlcmUgd2FzIG5vIHJlZ2lzdGVyZWQgaGFuZGxlciBmb3IgXCIke21lc3NhZ2VUeXBlfVwiIC0gdHJ5IGFkZGluZyBvbmUgdXNpbmcgcmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihNZXNzYWdlRGlyZWN0aW9uLlRvU3RyZWFtZXIsIFwiJHttZXNzYWdlVHlwZX1cIiwgbXlIYW5kbGVyKWBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgTWVzc2FnZURpcmVjdGlvbi5Gcm9tU3RyZWFtZXI6XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBDaGVjayB0aGF0IHRoZSBtZXNzYWdlIGNvbnRhaW5zIGFsbCB0aGUgcmVsZXZhbnQgcGFyYW1zXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtZXNzYWdlLCAnaWQnKVxuICAgICAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgTG9nZ2VyLkVycm9yKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgRnJvbVN0cmVhbWVyLT4ke21lc3NhZ2VUeXBlfSBwcm90b2NvbCBkZWZpbml0aW9uIHdhcyBtYWxmb3JtZWQgYXMgaXQgZGlkbid0IGNvbnRhaW4gYXQgbGVhc3QgYW4gaWRcXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWZpbml0aW9uIHdhczogJHtKU09OLnN0cmluZ2lmeShtZXNzYWdlLCBudWxsLCAyKX1gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZXR1cm4gaW4gYSBmb3JFYWNoIGlzIGVxdWl2YWxlbnQgdG8gYSBjb250aW51ZSBpbiBhIG5vcm1hbCBmb3IgbG9vcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLmZyb21TdHJlYW1lckhhbmRsZXJzLmdldChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZVR5cGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiB3ZSd2ZSByZWdpc3RlcmVkIGEgaGFuZGxlciBmb3IgdGhpcyBtZXNzYWdlIHR5cGUuIGllIHJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIoLi4uKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIuZnJvbVN0cmVhbWVyTWVzc2FnZXMuYWRkKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlVHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5pZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIExvZ2dlci5FcnJvcihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYFRoZXJlIHdhcyBubyByZWdpc3RlcmVkIGhhbmRsZXIgZm9yIFwiJHttZXNzYWdlfVwiIC0gdHJ5IGFkZGluZyBvbmUgdXNpbmcgcmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihNZXNzYWdlRGlyZWN0aW9uLkZyb21TdHJlYW1lciwgXCIke21lc3NhZ2VUeXBlfVwiLCBteUhhbmRsZXIpYFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIExvZ2dlci5FcnJvcihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBVbmtub3duIGRpcmVjdGlvbjogJHtkaXJlY3Rpb259YFxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gT25jZSB0aGUgcHJvdG9jb2wgaGFzIGJlZW4gcmVjZWl2ZWQsIHdlIGNhbiBzZW5kIG91ciBjb250cm9sIG1lc3NhZ2VzXG4gICAgICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlc0NvbnRyb2xsZXIuU2VuZFJlcXVlc3RJbml0aWFsU2V0dGluZ3MoKTtcbiAgICAgICAgICAgIHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzQ29udHJvbGxlci5TZW5kUmVxdWVzdFF1YWxpdHlDb250cm9sKCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIExvZ2dlci5Mb2coTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIYW5kbGVzIGFuIGlucHV0IGNvbnRyb2wgbWVzc2FnZSB3aGVuIGl0IGlzIHJlY2VpdmVkIGZyb20gdGhlIHN0cmVhbWVyXG4gICAgICogQHBhcmFtIG1lc3NhZ2UgVGhlIGlucHV0IGNvbnRyb2wgbWVzc2FnZVxuICAgICAqL1xuICAgIG9uSW5wdXRDb250cm9sT3duZXJzaGlwKG1lc3NhZ2U6IEFycmF5QnVmZmVyKSB7XG4gICAgICAgIGNvbnN0IHZpZXcgPSBuZXcgVWludDhBcnJheShtZXNzYWdlKTtcbiAgICAgICAgTG9nZ2VyLkxvZyhcbiAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXG4gICAgICAgICAgICAnRGF0YUNoYW5uZWxSZWNlaXZlTWVzc2FnZVR5cGUuSW5wdXRDb250cm9sT3duZXJzaGlwJyxcbiAgICAgICAgICAgIDZcbiAgICAgICAgKTtcbiAgICAgICAgY29uc3QgaW5wdXRDb250cm9sT3duZXJzaGlwID0gbmV3IEJvb2xlYW4odmlld1sxXSkudmFsdWVPZigpO1xuICAgICAgICBMb2dnZXIuTG9nKFxuICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcbiAgICAgICAgICAgIGBSZWNlaXZlZCBpbnB1dCBjb250cm9sbGVyIG1lc3NhZ2UgLSB3aWxsIHlvdXIgaW5wdXQgY29udHJvbCB0aGUgc3RyZWFtOiAke2lucHV0Q29udHJvbE93bmVyc2hpcH1gXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMucGl4ZWxTdHJlYW1pbmcuX29uSW5wdXRDb250cm9sT3duZXJzaGlwKGlucHV0Q29udHJvbE93bmVyc2hpcCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHBhcmFtIG1lc3NhZ2UgXG4gICAgICovXG4gICAgb25HYW1lcGFkUmVzcG9uc2UobWVzc2FnZTogQXJyYXlCdWZmZXIpIHtcbiAgICAgICAgY29uc3QgcmVzcG9uc2VTdHJpbmcgPSBuZXcgVGV4dERlY29kZXIoJ3V0Zi0xNicpLmRlY29kZShtZXNzYWdlLnNsaWNlKDEpKTtcbiAgICAgICAgY29uc3QgcmVzcG9uc2VKU09OID0gSlNPTi5wYXJzZShyZXNwb25zZVN0cmluZyk7XG4gICAgICAgIHRoaXMuZ2FtZVBhZENvbnRyb2xsZXIub25HYW1lcGFkUmVzcG9uc2VSZWNlaXZlZChyZXNwb25zZUpTT04uY29udHJvbGxlcklkKTtcbiAgICB9XG5cbiAgICBvbkFma1RyaWdnZXJlZCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5hZmtDb250cm9sbGVyLm9uQWZrQ2xpY2soKTtcblxuICAgICAgICAvLyBpZiB0aGUgc3RyZWFtIGlzIHBhdXNlZCBwbGF5IGl0LCBpZiB3ZSBjYW5cbiAgICAgICAgaWYgKHRoaXMudmlkZW9QbGF5ZXIuaXNQYXVzZWQoKSAmJiB0aGlzLnZpZGVvUGxheWVyLmhhc1ZpZGVvU291cmNlKCkpIHtcbiAgICAgICAgICAgIHRoaXMucGxheVN0cmVhbSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0IHdoZXRoZXIgd2Ugc2hvdWxkIHRpbWVvdXQgd2hlbiBhZmsuXG4gICAgICogQHBhcmFtIGFma0VuYWJsZWQgSWYgdHJ1ZSB3ZSB0aW1lb3V0IHdoZW4gaWRsZSBmb3Igc29tZSBnaXZlbiBhbW91bnQgb2YgdGltZS5cbiAgICAgKi9cbiAgICBzZXRBZmtFbmFibGVkKGFma0VuYWJsZWQ6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICAgICAgaWYgKGFma0VuYWJsZWQpIHtcbiAgICAgICAgICAgIHRoaXMub25BZmtUcmlnZ2VyZWQoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYWZrQ29udHJvbGxlci5zdG9wQWZrV2FybmluZ1RpbWVyKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXN0YXJ0IHRoZSBzdHJlYW0gYXV0b21hdGljYWxseSB3aXRob3V0IHJlZnJlc2hpbmcgdGhlIHBhZ2VcbiAgICAgKi9cbiAgICByZXN0YXJ0U3RyZWFtQXV0b21hdGljYWxseSgpIHtcbiAgICAgICAgLy8gaWYgdGhlcmUgaXMgbm8gd2ViU29ja2V0Q29udHJvbGxlciByZXR1cm4gaW1tZWRpYXRlbHkgb3IgdGhpcyB3aWxsIG5vdCB3b3JrXG4gICAgICAgIGlmICghdGhpcy53ZWJTb2NrZXRDb250cm9sbGVyKSB7XG4gICAgICAgICAgICBMb2dnZXIuTG9nKFxuICAgICAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXG4gICAgICAgICAgICAgICAgJ1RoZSBXZWIgU29ja2V0IENvbnRyb2xsZXIgZG9lcyBub3QgZXhpc3Qgc28gdGhpcyB3aWxsIG5vdCB3b3JrIHJpZ2h0IG5vdy4nXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gaWYgYSB3ZWJzb2NrZXQgb2JqZWN0IGhhcyBub3QgYmVlbiBjcmVhdGVkIGNvbm5lY3Qgbm9ybWFsbHkgd2l0aG91dCBjbG9zaW5nXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgICF0aGlzLndlYlNvY2tldENvbnRyb2xsZXIud2ViU29ja2V0IHx8XG4gICAgICAgICAgICB0aGlzLndlYlNvY2tldENvbnRyb2xsZXIud2ViU29ja2V0LnJlYWR5U3RhdGUgPT09IFdlYlNvY2tldC5DTE9TRURcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBMb2dnZXIuTG9nKFxuICAgICAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXG4gICAgICAgICAgICAgICAgJ0Egd2Vic29ja2V0IGNvbm5lY3Rpb24gaGFzIG5vdCBiZWVuIG1hZGUgeWV0IHNvIHdlIHdpbGwgc3RhcnQgdGhlIHN0cmVhbSdcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aGlzLnBpeGVsU3RyZWFtaW5nLl9vbldlYlJ0Y0F1dG9Db25uZWN0KCk7XG4gICAgICAgICAgICB0aGlzLmNvbm5lY3RUb1NpZ25hbGxpbmdTZXJ2ZXIoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHNldCB0aGUgcmVwbGF5IHN0YXR1cyBzbyB3ZSBnZXQgYSB0ZXh0IG92ZXJsYXkgb3ZlciBhbiBhY3Rpb24gb3ZlcmxheVxuICAgICAgICAgICAgdGhpcy5waXhlbFN0cmVhbWluZy5fc2hvd0FjdGlvbk9yRXJyb3JPbkRpc2Nvbm5lY3QgPSBmYWxzZTtcblxuICAgICAgICAgICAgLy8gc2V0IHRoZSBkaXNjb25uZWN0IG1lc3NhZ2VcbiAgICAgICAgICAgIHRoaXMuc2V0RGlzY29ubmVjdE1lc3NhZ2VPdmVycmlkZSgnUmVzdGFydGluZyBzdHJlYW0uLi4nKTtcblxuICAgICAgICAgICAgLy8gY2xvc2UgdGhlIGNvbm5lY3Rpb25cbiAgICAgICAgICAgIHRoaXMuY2xvc2VTaWduYWxpbmdTZXJ2ZXIoKTtcblxuICAgICAgICAgICAgLy8gd2FpdCBmb3IgdGhlIGNvbm5lY3Rpb24gdG8gY2xvc2UgYW5kIHJlc3RhcnQgdGhlIGNvbm5lY3Rpb25cbiAgICAgICAgICAgIGNvbnN0IGF1dG9Db25uZWN0VGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMucGl4ZWxTdHJlYW1pbmcuX29uV2ViUnRjQXV0b0Nvbm5lY3QoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbm5lY3RUb1NpZ25hbGxpbmdTZXJ2ZXIoKTtcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoYXV0b0Nvbm5lY3RUaW1lb3V0KTtcbiAgICAgICAgICAgIH0sIDMwMDApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTG9hZHMgYSBmcmVlemUgZnJhbWUgaWYgaXQgaXMgcmVxdWlyZWQgb3RoZXJ3aXNlIHNob3dzIHRoZSBwbGF5IG92ZXJsYXlcbiAgICAgKi9cbiAgICBsb2FkRnJlZXplRnJhbWVPclNob3dQbGF5T3ZlcmxheSgpIHtcbiAgICAgICAgdGhpcy5waXhlbFN0cmVhbWluZy5kaXNwYXRjaEV2ZW50KFxuICAgICAgICAgICAgbmV3IExvYWRGcmVlemVGcmFtZUV2ZW50KHtcbiAgICAgICAgICAgICAgICBzaG91bGRTaG93UGxheU92ZXJsYXk6IHRoaXMuc2hvdWxkU2hvd1BsYXlPdmVybGF5LFxuICAgICAgICAgICAgICAgIGlzVmFsaWQ6IHRoaXMuZnJlZXplRnJhbWVDb250cm9sbGVyLnZhbGlkLFxuICAgICAgICAgICAgICAgIGpwZWdEYXRhOiB0aGlzLmZyZWV6ZUZyYW1lQ29udHJvbGxlci5qcGVnXG4gICAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgICAgICBpZiAodGhpcy5zaG91bGRTaG93UGxheU92ZXJsYXkgPT09IHRydWUpIHtcbiAgICAgICAgICAgIExvZ2dlci5Mb2coTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ3Nob3dpbmcgcGxheSBvdmVybGF5Jyk7XG4gICAgICAgICAgICB0aGlzLnJlc2l6ZVBsYXllclN0eWxlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBMb2dnZXIuTG9nKExvZ2dlci5HZXRTdGFja1RyYWNlKCksICdzaG93aW5nIGZyZWV6ZSBmcmFtZScpO1xuICAgICAgICAgICAgdGhpcy5mcmVlemVGcmFtZUNvbnRyb2xsZXIuc2hvd0ZyZWV6ZUZyYW1lKCk7XG4gICAgICAgIH1cbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnZpZGVvUGxheWVyLnNldFZpZGVvRW5hYmxlZChmYWxzZSk7XG4gICAgICAgIH0sIHRoaXMuZnJlZXplRnJhbWVDb250cm9sbGVyLmZyZWV6ZUZyYW1lRGVsYXkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFByb2Nlc3MgdGhlIGZyZWV6ZSBmcmFtZSBhbmQgbG9hZCBpdFxuICAgICAqIEBwYXJhbSBtZXNzYWdlIFRoZSBmcmVlemUgZnJhbWUgZGF0YSBpbiBieXRlc1xuICAgICAqL1xuICAgIG9uRnJlZXplRnJhbWVNZXNzYWdlKG1lc3NhZ2U6IEFycmF5QnVmZmVyKSB7XG4gICAgICAgIExvZ2dlci5Mb2coXG4gICAgICAgICAgICBMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLFxuICAgICAgICAgICAgJ0RhdGFDaGFubmVsUmVjZWl2ZU1lc3NhZ2VUeXBlLkZyZWV6ZUZyYW1lJyxcbiAgICAgICAgICAgIDZcbiAgICAgICAgKTtcbiAgICAgICAgY29uc3QgdmlldyA9IG5ldyBVaW50OEFycmF5KG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLmZyZWV6ZUZyYW1lQ29udHJvbGxlci5wcm9jZXNzRnJlZXplRnJhbWVNZXNzYWdlKHZpZXcsICgpID0+XG4gICAgICAgICAgICB0aGlzLmxvYWRGcmVlemVGcmFtZU9yU2hvd1BsYXlPdmVybGF5KClcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFbmFibGUgdGhlIHZpZGVvIGFmdGVyIGhpZGluZyBhIGZyZWV6ZSBmcmFtZVxuICAgICAqL1xuICAgIGludmFsaWRhdGVGcmVlemVGcmFtZUFuZEVuYWJsZVZpZGVvKCkge1xuICAgICAgICBMb2dnZXIuTG9nKFxuICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcbiAgICAgICAgICAgICdEYXRhQ2hhbm5lbFJlY2VpdmVNZXNzYWdlVHlwZS5GcmVlemVGcmFtZScsXG4gICAgICAgICAgICA2XG4gICAgICAgICk7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5waXhlbFN0cmVhbWluZy5kaXNwYXRjaEV2ZW50KFxuICAgICAgICAgICAgICAgIG5ldyBIaWRlRnJlZXplRnJhbWVFdmVudCgpXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgdGhpcy5mcmVlemVGcmFtZUNvbnRyb2xsZXIuaGlkZUZyZWV6ZUZyYW1lKCk7XG4gICAgICAgIH0sIHRoaXMuZnJlZXplRnJhbWVDb250cm9sbGVyLmZyZWV6ZUZyYW1lRGVsYXkpO1xuICAgICAgICBpZiAodGhpcy52aWRlb1BsYXllci5nZXRWaWRlb0VsZW1lbnQoKSkge1xuICAgICAgICAgICAgdGhpcy52aWRlb1BsYXllci5zZXRWaWRlb0VuYWJsZWQodHJ1ZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQcmVwIGRhdGFjaGFubmVsIGRhdGEgZm9yIHByb2Nlc3NpbmcgZmlsZSBleHRlbnNpb25cbiAgICAgKiBAcGFyYW0gZGF0YSB0aGUgZmlsZSBleHRlbnNpb24gZGF0YVxuICAgICAqL1xuICAgIG9uRmlsZUV4dGVuc2lvbihkYXRhOiBBcnJheUJ1ZmZlcikge1xuICAgICAgICBjb25zdCB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkoZGF0YSk7XG4gICAgICAgIEZpbGVVdGlsLnNldEV4dGVuc2lvbkZyb21CeXRlcyh2aWV3LCB0aGlzLmZpbGUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFByZXAgZGF0YWNoYW5uZWwgZGF0YSBmb3IgcHJvY2Vzc2luZyB0aGUgZmlsZSBtaW1lIHR5cGVcbiAgICAgKiBAcGFyYW0gZGF0YSB0aGUgZmlsZSBtaW1lIHR5cGUgZGF0YVxuICAgICAqL1xuICAgIG9uRmlsZU1pbWVUeXBlKGRhdGE6IEFycmF5QnVmZmVyKSB7XG4gICAgICAgIGNvbnN0IHZpZXcgPSBuZXcgVWludDhBcnJheShkYXRhKTtcbiAgICAgICAgRmlsZVV0aWwuc2V0TWltZVR5cGVGcm9tQnl0ZXModmlldywgdGhpcy5maWxlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQcmVwIGRhdGFjaGFubmVsIGRhdGEgZm9yIHByb2Nlc3NpbmcgdGhlIGZpbGUgY29udGVudHNcbiAgICAgKiBAcGFyYW0gZGF0YSB0aGUgZmlsZSBjb250ZW50cyBkYXRhXG4gICAgICovXG4gICAgb25GaWxlQ29udGVudHMoZGF0YTogQXJyYXlCdWZmZXIpIHtcbiAgICAgICAgY29uc3QgdmlldyA9IG5ldyBVaW50OEFycmF5KGRhdGEpO1xuICAgICAgICBGaWxlVXRpbC5zZXRDb250ZW50c0Zyb21CeXRlcyh2aWV3LCB0aGlzLmZpbGUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBsYXlzIHRoZSBzdHJlYW0gYXVkaW8gYW5kIHZpZGVvIHNvdXJjZSBhbmQgc2V0cyB1cCBvdGhlciBwaWVjZXMgd2hpbGUgdGhlIHN0cmVhbSBzdGFydHNcbiAgICAgKi9cbiAgICBwbGF5U3RyZWFtKCkge1xuICAgICAgICBpZiAoIXRoaXMudmlkZW9QbGF5ZXIuZ2V0VmlkZW9FbGVtZW50KCkpIHtcbiAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPVxuICAgICAgICAgICAgICAgICdDb3VsZCBub3QgcGxheSB2aWRlbyBzdHJlYW0gYmVjYXVzZSB0aGUgdmlkZW8gcGxheWVyIHdhcyBub3QgaW5pdGlhbGl6ZWQgY29ycmVjdGx5Lic7XG4gICAgICAgICAgICB0aGlzLnBpeGVsU3RyZWFtaW5nLmRpc3BhdGNoRXZlbnQoXG4gICAgICAgICAgICAgICAgbmV3IFBsYXlTdHJlYW1FcnJvckV2ZW50KHsgbWVzc2FnZSB9KVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIExvZ2dlci5FcnJvcihMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBtZXNzYWdlKTtcblxuICAgICAgICAgICAgLy8gc2V0IHRoZSBkaXNjb25uZWN0IG1lc3NhZ2VcbiAgICAgICAgICAgIHRoaXMuc2V0RGlzY29ubmVjdE1lc3NhZ2VPdmVycmlkZShcbiAgICAgICAgICAgICAgICAnU3RyZWFtIG5vdCBpbml0aWFsaXplZCBjb3JyZWN0bHknXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAvLyBjbG9zZSB0aGUgY29ubmVjdGlvblxuICAgICAgICAgICAgdGhpcy5jbG9zZVNpZ25hbGluZ1NlcnZlcigpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLnZpZGVvUGxheWVyLmhhc1ZpZGVvU291cmNlKCkpIHtcbiAgICAgICAgICAgIExvZ2dlci5XYXJuaW5nKFxuICAgICAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXG4gICAgICAgICAgICAgICAgJ0Nhbm5vdCBwbGF5IHN0cmVhbSwgdGhlIHZpZGVvIGVsZW1lbnQgaGFzIG5vIHNyY09iamVjdCB0byBwbGF5LidcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNldFRvdWNoSW5wdXRFbmFibGVkKHRoaXMuY29uZmlnLmlzRmxhZ0VuYWJsZWQoRmxhZ3MuVG91Y2hJbnB1dCkpO1xuICAgICAgICB0aGlzLnBpeGVsU3RyZWFtaW5nLmRpc3BhdGNoRXZlbnQobmV3IFBsYXlTdHJlYW1FdmVudCgpKTtcblxuICAgICAgICBpZiAodGhpcy5zdHJlYW1Db250cm9sbGVyLmF1ZGlvRWxlbWVudC5zcmNPYmplY3QpIHtcbiAgICAgICAgICAgIHRoaXMuc3RyZWFtQ29udHJvbGxlci5hdWRpb0VsZW1lbnQubXV0ZWQgPVxuICAgICAgICAgICAgICAgIHRoaXMuY29uZmlnLmlzRmxhZ0VuYWJsZWQoRmxhZ3MuU3RhcnRWaWRlb011dGVkKTtcblxuICAgICAgICAgICAgdGhpcy5zdHJlYW1Db250cm9sbGVyLmF1ZGlvRWxlbWVudFxuICAgICAgICAgICAgICAgIC5wbGF5KClcbiAgICAgICAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGxheVZpZGVvKCk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuY2F0Y2goKG9uUmVqZWN0ZWRSZWFzb24pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgTG9nZ2VyLkxvZyhMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBvblJlamVjdGVkUmVhc29uKTtcbiAgICAgICAgICAgICAgICAgICAgTG9nZ2VyLkxvZyhcbiAgICAgICAgICAgICAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAnQnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IGF1dG9wbGF5aW5nIHZpZGVvIHdpdGhvdXQgaW50ZXJhY3Rpb24gLSB0byByZXNvbHZlIHRoaXMgd2UgYXJlIGdvaW5nIHRvIHNob3cgdGhlIHBsYXkgYnV0dG9uIG92ZXJsYXkuJ1xuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBpeGVsU3RyZWFtaW5nLmRpc3BhdGNoRXZlbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgUGxheVN0cmVhbVJlamVjdGVkRXZlbnQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYXNvbjogb25SZWplY3RlZFJlYXNvblxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucGxheVZpZGVvKCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNob3VsZFNob3dQbGF5T3ZlcmxheSA9IGZhbHNlO1xuICAgICAgICB0aGlzLmZyZWV6ZUZyYW1lQ29udHJvbGxlci5zaG93RnJlZXplRnJhbWUoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQbGF5cyB0aGUgdmlkZW8gc3RyZWFtXG4gICAgICovXG4gICAgcHJpdmF0ZSBwbGF5VmlkZW8oKSB7XG4gICAgICAgIC8vIGhhbmRsZSBwbGF5KCkgd2l0aCBwcm9taXNlIGFzIGl0IGlzIGFuIGFzeW5jaHJvbm91cyBjYWxsXG4gICAgICAgIHRoaXMudmlkZW9QbGF5ZXIucGxheSgpLmNhdGNoKChvblJlamVjdGVkUmVhc29uOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLnN0cmVhbUNvbnRyb2xsZXIuYXVkaW9FbGVtZW50LnNyY09iamVjdCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RyZWFtQ29udHJvbGxlci5hdWRpb0VsZW1lbnQucGF1c2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIExvZ2dlci5Mb2coTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgb25SZWplY3RlZFJlYXNvbik7XG4gICAgICAgICAgICBMb2dnZXIuTG9nKFxuICAgICAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXG4gICAgICAgICAgICAgICAgJ0Jyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBhdXRvcGxheWluZyB2aWRlbyB3aXRob3V0IGludGVyYWN0aW9uIC0gdG8gcmVzb2x2ZSB0aGlzIHdlIGFyZSBnb2luZyB0byBzaG93IHRoZSBwbGF5IGJ1dHRvbiBvdmVybGF5LidcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aGlzLnBpeGVsU3RyZWFtaW5nLmRpc3BhdGNoRXZlbnQoXG4gICAgICAgICAgICAgICAgbmV3IFBsYXlTdHJlYW1SZWplY3RlZEV2ZW50KHsgcmVhc29uOiBvblJlamVjdGVkUmVhc29uIH0pXG4gICAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFbmFibGUgdGhlIHZpZGVvIHRvIHBsYXkgYXV0b21hdGljYWxseSBpZiBlbmFibGVBdXRvcGxheSBpcyB0cnVlXG4gICAgICovXG4gICAgYXV0b1BsYXlWaWRlb09yU2V0VXBQbGF5T3ZlcmxheSgpIHtcbiAgICAgICAgaWYgKHRoaXMuY29uZmlnLmlzRmxhZ0VuYWJsZWQoRmxhZ3MuQXV0b1BsYXlWaWRlbykpIHtcbiAgICAgICAgICAgIC8vIGF0dGVtcHQgdG8gcGxheSB0aGUgdmlkZW9cbiAgICAgICAgICAgIHRoaXMucGxheVN0cmVhbSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVzaXplUGxheWVyU3R5bGUoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb25uZWN0IHRvIHRoZSBTaWduYWxpbmcgc2VydmVyXG4gICAgICovXG4gICAgY29ubmVjdFRvU2lnbmFsbGluZ1NlcnZlcigpIHtcbiAgICAgICAgY29uc3Qgc2lnbmFsbGluZ1VybCA9IHRoaXMuc2lnbmFsbGluZ1VybEJ1aWxkZXIoKTtcbiAgICAgICAgdGhpcy53ZWJTb2NrZXRDb250cm9sbGVyLmNvbm5lY3Qoc2lnbmFsbGluZ1VybCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyB3aWxsIHN0YXJ0IHRoZSBoYW5kc2hha2UgdG8gdGhlIHNpZ25hbGxpbmcgc2VydmVyXG4gICAgICogQHBhcmFtIHBlZXJDb25maWcgIC0gUlRDIENvbmZpZ3VyYXRpb24gT3B0aW9ucyBmcm9tIHRoZSBTaWduYWxpbmcgc2VydmVyXG4gICAgICogQHJlbWFyayBSVEMgUGVlciBDb25uZWN0aW9uIG9uIEljZSBDYW5kaWRhdGUgZXZlbnQgaGF2ZSBpdCBoYW5kbGVkIGJ5IGhhbmRsZSBTZW5kIEljZSBDYW5kaWRhdGVcbiAgICAgKi9cbiAgICBzdGFydFNlc3Npb24ocGVlckNvbmZpZzogUlRDQ29uZmlndXJhdGlvbikge1xuICAgICAgICB0aGlzLnBlZXJDb25maWcgPSBwZWVyQ29uZmlnO1xuICAgICAgICAvLyBjaGVjayBmb3IgZm9yY2luZyB0dXJuXG4gICAgICAgIGlmICh0aGlzLmNvbmZpZy5pc0ZsYWdFbmFibGVkKEZsYWdzLkZvcmNlVFVSTikpIHtcbiAgICAgICAgICAgIC8vIGNoZWNrIGZvciBhIHR1cm4gc2VydmVyXG4gICAgICAgICAgICBjb25zdCBoYXNUdXJuU2VydmVyID0gdGhpcy5jaGVja1R1cm5TZXJ2ZXJBdmFpbGFiaWxpdHkocGVlckNvbmZpZyk7XG5cbiAgICAgICAgICAgIC8vIGNsb3NlIGFuZCBlcnJvciBpZiB0dXJuIGlzIGZvcmNlZCBhbmQgdGhlcmUgaXMgbm8gdHVybiBzZXJ2ZXJcbiAgICAgICAgICAgIGlmICghaGFzVHVyblNlcnZlcikge1xuICAgICAgICAgICAgICAgIExvZ2dlci5JbmZvKFxuICAgICAgICAgICAgICAgICAgICBMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLFxuICAgICAgICAgICAgICAgICAgICAnTm8gdHVybiBzZXJ2ZXIgd2FzIGZvdW5kIGluIHRoZSBQZWVyIENvbm5lY3Rpb24gT3B0aW9ucy4gVFVSTiBjYW5ub3QgYmUgZm9yY2VkLCBjbG9zaW5nIGNvbm5lY3Rpb24uIFBsZWFzZSB1c2UgU1RVTiBpbnN0ZWFkJ1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXREaXNjb25uZWN0TWVzc2FnZU92ZXJyaWRlKFxuICAgICAgICAgICAgICAgICAgICAnVFVSTiBjYW5ub3QgYmUgZm9yY2VkLCBjbG9zaW5nIGNvbm5lY3Rpb24uIFBsZWFzZSB1c2UgU1RVTiBpbnN0ZWFkLidcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHRoaXMuY2xvc2VTaWduYWxpbmdTZXJ2ZXIoKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBzZXQgdXAgdGhlIHBlZXIgY29ubmVjdGlvbiBjb250cm9sbGVyXG4gICAgICAgIHRoaXMucGVlckNvbm5lY3Rpb25Db250cm9sbGVyID0gbmV3IFBlZXJDb25uZWN0aW9uQ29udHJvbGxlcihcbiAgICAgICAgICAgIHRoaXMucGVlckNvbmZpZyxcbiAgICAgICAgICAgIHRoaXMuY29uZmlnLFxuICAgICAgICAgICAgdGhpcy5wcmVmZXJyZWRDb2RlY1xuICAgICAgICApO1xuXG4gICAgICAgIC8vIHNldCB1cCBwZWVyIGNvbm5lY3Rpb24gY29udHJvbGxlciB2aWRlbyBzdGF0c1xuICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uQ29udHJvbGxlci5vblZpZGVvU3RhdHMgPSAoZXZlbnQ6IEFnZ3JlZ2F0ZWRTdGF0cykgPT5cbiAgICAgICAgICAgIHRoaXMuaGFuZGxlVmlkZW9TdGF0cyhldmVudCk7XG5cbiAgICAgICAgLyogV2hlbiB0aGUgUGVlciBDb25uZWN0aW9uIHdhbnRzIHRvIHNlbmQgYW4gb2ZmZXIgaGF2ZSBpdCBoYW5kbGVkICovXG4gICAgICAgIHRoaXMucGVlckNvbm5lY3Rpb25Db250cm9sbGVyLm9uU2VuZFdlYlJUQ09mZmVyID0gKFxuICAgICAgICAgICAgb2ZmZXI6IFJUQ1Nlc3Npb25EZXNjcmlwdGlvbkluaXRcbiAgICAgICAgKSA9PiB0aGlzLmhhbmRsZVNlbmRXZWJSVENPZmZlcihvZmZlcik7XG5cbiAgICAgICAgLyogV2hlbiB0aGUgUGVlciBDb25uZWN0aW9uIHdhbnRzIHRvIHNlbmQgYW4gYW5zd2VyIGhhdmUgaXQgaGFuZGxlZCAqL1xuICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uQ29udHJvbGxlci5vblNlbmRXZWJSVENBbnN3ZXIgPSAoXG4gICAgICAgICAgICBvZmZlcjogUlRDU2Vzc2lvbkRlc2NyaXB0aW9uSW5pdFxuICAgICAgICApID0+IHRoaXMuaGFuZGxlU2VuZFdlYlJUQ0Fuc3dlcihvZmZlcik7XG5cbiAgICAgICAgLyogV2hlbiB0aGUgUGVlciBDb25uZWN0aW9uIGljZSBjYW5kaWRhdGUgaXMgYWRkZWQgaGF2ZSBpdCBoYW5kbGVkICovXG4gICAgICAgIHRoaXMucGVlckNvbm5lY3Rpb25Db250cm9sbGVyLm9uUGVlckljZUNhbmRpZGF0ZSA9IChcbiAgICAgICAgICAgIHBlZXJDb25uZWN0aW9uSWNlRXZlbnQ6IFJUQ1BlZXJDb25uZWN0aW9uSWNlRXZlbnRcbiAgICAgICAgKSA9PiB0aGlzLmhhbmRsZVNlbmRJY2VDYW5kaWRhdGUocGVlckNvbm5lY3Rpb25JY2VFdmVudCk7XG5cbiAgICAgICAgLyogV2hlbiB0aGUgUGVlciBDb25uZWN0aW9uIGhhcyBhIGRhdGEgY2hhbm5lbCBjcmVhdGVkIGZvciBpdCBieSB0aGUgYnJvd3NlciwgaGFuZGxlIGl0ICovXG4gICAgICAgIHRoaXMucGVlckNvbm5lY3Rpb25Db250cm9sbGVyLm9uRGF0YUNoYW5uZWwgPSAoXG4gICAgICAgICAgICBkYXRhY2hhbm5lbEV2ZW50OiBSVENEYXRhQ2hhbm5lbEV2ZW50XG4gICAgICAgICkgPT4gdGhpcy5oYW5kbGVEYXRhQ2hhbm5lbChkYXRhY2hhbm5lbEV2ZW50KTtcblxuICAgICAgICAvLyBzZXQgdXAgd2ViUnRjIHRleHQgb3ZlcmxheXNcbiAgICAgICAgdGhpcy5wZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIuc2hvd1RleHRPdmVybGF5Q29ubmVjdGluZyA9ICgpID0+XG4gICAgICAgICAgICB0aGlzLnBpeGVsU3RyZWFtaW5nLl9vbldlYlJ0Y0Nvbm5lY3RpbmcoKTtcbiAgICAgICAgdGhpcy5wZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIuc2hvd1RleHRPdmVybGF5U2V0dXBGYWlsdXJlID0gKCkgPT5cbiAgICAgICAgICAgIHRoaXMucGl4ZWxTdHJlYW1pbmcuX29uV2ViUnRjRmFpbGVkKCk7XG4gICAgICAgIGxldCB3ZWJSdGNDb25uZWN0ZWRTZW50ID0gZmFsc2U7XG4gICAgICAgIHRoaXMucGVlckNvbm5lY3Rpb25Db250cm9sbGVyLm9uSWNlQ29ubmVjdGlvblN0YXRlQ2hhbmdlID0gKCkgPT4ge1xuICAgICAgICAgICAgLy8gQnJvd3NlcnMgZW1pdCBcImNvbm5lY3RlZFwiIHdoZW4gZ2V0dGluZyBmaXJzdCBjb25uZWN0aW9uIGFuZCBcImNvbXBsZXRlZFwiIHdoZW4gZmluaXNoaW5nXG4gICAgICAgICAgICAvLyBjYW5kaWRhdGUgY2hlY2tpbmcuIEhvd2V2ZXIsIHNvbWV0aW1lcyBicm93c2VycyBjYW4gc2tpcCBcImNvbm5lY3RlZFwiIGFuZCBvbmx5IGVtaXQgXCJjb21wbGV0ZWRcIi5cbiAgICAgICAgICAgIC8vIFRoZXJlZm9yZSBuZWVkIHRvIGNoZWNrIGJvdGggY2FzZXMgYW5kIGVtaXQgb25XZWJSdGNDb25uZWN0ZWQgb25seSBvbmNlIG9uIHRoZSBmaXJzdCBoaXQuXG4gICAgICAgICAgICBpZiAoIXdlYlJ0Y0Nvbm5lY3RlZFNlbnQgJiYgXG4gICAgICAgICAgICAgICAgW1wiY29ubmVjdGVkXCIsIFwiY29tcGxldGVkXCJdLmluY2x1ZGVzKHRoaXMucGVlckNvbm5lY3Rpb25Db250cm9sbGVyLnBlZXJDb25uZWN0aW9uLmljZUNvbm5lY3Rpb25TdGF0ZSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBpeGVsU3RyZWFtaW5nLl9vbldlYlJ0Y0Nvbm5lY3RlZCgpO1xuICAgICAgICAgICAgICAgIHdlYlJ0Y0Nvbm5lY3RlZFNlbnQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIC8qIFJUQyBQZWVyIENvbm5lY3Rpb24gb24gVHJhY2sgZXZlbnQgLT4gaGFuZGxlIG9uIHRyYWNrICovXG4gICAgICAgIHRoaXMucGVlckNvbm5lY3Rpb25Db250cm9sbGVyLm9uVHJhY2sgPSAodHJhY2tFdmVudDogUlRDVHJhY2tFdmVudCkgPT5cbiAgICAgICAgICAgIHRoaXMuc3RyZWFtQ29udHJvbGxlci5oYW5kbGVPblRyYWNrKHRyYWNrRXZlbnQpO1xuXG4gICAgICAgIC8qIFN0YXJ0IHRoZSBIYW5kIHNoYWtlIHByb2Nlc3MgYnkgY3JlYXRpbmcgYW4gT2ZmZXIgKi9cbiAgICAgICAgY29uc3QgQnJvd3NlclNlbmRzT2ZmZXIgPSB0aGlzLmNvbmZpZy5pc0ZsYWdFbmFibGVkKFxuICAgICAgICAgICAgRmxhZ3MuQnJvd3NlclNlbmRPZmZlclxuICAgICAgICApO1xuICAgICAgICBpZiAoQnJvd3NlclNlbmRzT2ZmZXIpIHtcbiAgICAgICAgICAgIC8vIElmIGJyb3dzZXIgaXMgc2VuZGluZyB0aGUgb2ZmZXIsIGNyZWF0ZSBhbiBvZmZlciBhbmQgc2VuZCBpdCB0byB0aGUgc3RyZWFtZXJcbiAgICAgICAgICAgIHRoaXMuc2VuZHJlY3ZEYXRhQ2hhbm5lbENvbnRyb2xsZXIuY3JlYXRlRGF0YUNoYW5uZWwoXG4gICAgICAgICAgICAgICAgdGhpcy5wZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIucGVlckNvbm5lY3Rpb24sXG4gICAgICAgICAgICAgICAgJ2NpcnJ1cycsXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhY2hhbm5lbE9wdGlvbnNcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aGlzLnNlbmRyZWN2RGF0YUNoYW5uZWxDb250cm9sbGVyLmhhbmRsZU9uTWVzc2FnZSA9IChcbiAgICAgICAgICAgICAgICBldjogTWVzc2FnZUV2ZW50PEFycmF5QnVmZmVyPlxuICAgICAgICAgICAgKSA9PiB0aGlzLmhhbmRsZU9uTWVzc2FnZShldik7XG4gICAgICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uQ29udHJvbGxlci5jcmVhdGVPZmZlcihcbiAgICAgICAgICAgICAgICB0aGlzLnNkcENvbnN0cmFpbnRzLFxuICAgICAgICAgICAgICAgIHRoaXMuY29uZmlnXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHRoZSBwZWVyIGNvbm5lY3Rpb24gb3B0aW9ucyBmb3IgYSB0dXJuIHNlcnZlciBhbmQgcmV0dXJucyB0cnVlIG9yIGZhbHNlXG4gICAgICovXG4gICAgY2hlY2tUdXJuU2VydmVyQXZhaWxhYmlsaXR5KG9wdGlvbnM6IFJUQ0NvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgLy8gaWYgaWNlU2VydmVycyBpcyBlbXB0eSByZXR1cm4gZmFsc2UgdGhpcyBzaG91bGQgbm90IGJlIHRoZSBnZW5lcmFsIHVzZSBjYXNlIGJ1dCBpcyBoZXJlIGluY2FzZVxuICAgICAgICBpZiAoIW9wdGlvbnMuaWNlU2VydmVycykge1xuICAgICAgICAgICAgTG9nZ2VyLkluZm8oTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ0EgdHVybiBzZXZlciB3YXMgbm90IGZvdW5kJyk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBsb29wIHRocm91Z2ggdGhlIGljZSBzZXJ2ZXJzIHRvIGNoZWNrIGZvciBhIHR1cm4gdXJsXG4gICAgICAgIGZvciAoY29uc3QgaWNlU2VydmVyIG9mIG9wdGlvbnMuaWNlU2VydmVycykge1xuICAgICAgICAgICAgZm9yIChjb25zdCB1cmwgb2YgaWNlU2VydmVyLnVybHMpIHtcbiAgICAgICAgICAgICAgICBpZiAodXJsLmluY2x1ZGVzKCd0dXJuJykpIHtcbiAgICAgICAgICAgICAgICAgICAgTG9nZ2VyLkxvZyhcbiAgICAgICAgICAgICAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXG4gICAgICAgICAgICAgICAgICAgICAgICBgQSB0dXJuIHNldmVyIHdhcyBmb3VuZCBhdCAke3VybH1gXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIExvZ2dlci5JbmZvKExvZ2dlci5HZXRTdGFja1RyYWNlKCksICdBIHR1cm4gc2V2ZXIgd2FzIG5vdCBmb3VuZCcpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGFuZGxlcyB3aGVuIGEgQ29uZmlnIE1lc3NhZ2UgaXMgcmVjZWl2ZWQgY29udGFpbnMgdGhlIFBlZXIgQ29ubmVjdGlvbiBPcHRpb25zIHJlcXVpcmVkIChTVFVOIGFuZCBUVVJOIFNlcnZlciBJbmZvKVxuICAgICAqIEBwYXJhbSBtZXNzYWdlQ29uZmlnIC0gQ29uZmlnIE1lc3NhZ2UgcmVjZWl2ZWQgZnJvbSB0aGUgc2lnbmFsaW5nIHNlcnZlclxuICAgICAqL1xuICAgIGhhbmRsZU9uQ29uZmlnTWVzc2FnZShtZXNzYWdlQ29uZmlnOiBNZXNzYWdlQ29uZmlnKSB7XG4gICAgICAgIHRoaXMucmVzaXplUGxheWVyU3R5bGUoKTtcblxuICAgICAgICAvLyBUZWxsIHRoZSBXZWJSdGNDb250cm9sbGVyIHRvIHN0YXJ0IGEgc2Vzc2lvbiB3aXRoIHRoZSBwZWVyIG9wdGlvbnMgc2VudCBmcm9tIHRoZSBzaWduYWxpbmcgc2VydmVyXG4gICAgICAgIHRoaXMuc3RhcnRTZXNzaW9uKG1lc3NhZ2VDb25maWcucGVlckNvbm5lY3Rpb25PcHRpb25zKTtcblxuICAgICAgICAvLyBXaGVuIHRoZSBzaWduYWxpbmcgc2VydmVyIHNlbmRzIGEgV2ViUlRDIEFuc3dlciBvdmVyIHRoZSB3ZWJzb2NrZXQgY29ubmVjdGlvbiBoYXZlIHRoZSBXZWJSdGNDb250cm9sbGVyIGhhbmRsZSB0aGUgbWVzc2FnZVxuICAgICAgICB0aGlzLndlYlNvY2tldENvbnRyb2xsZXIub25XZWJSdGNBbnN3ZXIgPSAoXG4gICAgICAgICAgICBtZXNzYWdlQW5zd2VyOiBNZXNzYWdlUmVjZWl2ZS5NZXNzYWdlQW5zd2VyXG4gICAgICAgICkgPT4gdGhpcy5oYW5kbGVXZWJSdGNBbnN3ZXIobWVzc2FnZUFuc3dlcik7XG4gICAgICAgIHRoaXMud2ViU29ja2V0Q29udHJvbGxlci5vbldlYlJ0Y09mZmVyID0gKFxuICAgICAgICAgICAgbWVzc2FnZU9mZmVyOiBNZXNzYWdlUmVjZWl2ZS5NZXNzYWdlT2ZmZXJcbiAgICAgICAgKSA9PiB0aGlzLmhhbmRsZVdlYlJ0Y09mZmVyKG1lc3NhZ2VPZmZlcik7XG4gICAgICAgIHRoaXMud2ViU29ja2V0Q29udHJvbGxlci5vbldlYlJ0Y1BlZXJEYXRhQ2hhbm5lbHMgPSAoXG4gICAgICAgICAgICBtZXNzYWdlRGF0YUNoYW5uZWxzOiBNZXNzYWdlUmVjZWl2ZS5NZXNzYWdlUGVlckRhdGFDaGFubmVsc1xuICAgICAgICApID0+IHRoaXMuaGFuZGxlV2ViUnRjU0ZVUGVlckRhdGFjaGFubmVscyhtZXNzYWdlRGF0YUNoYW5uZWxzKTtcblxuICAgICAgICAvLyBXaGVuIHRoZSBzaWduYWxpbmcgc2VydmVyIHNlbmRzIGEgSWNlQ2FuZGlkYXRlIG92ZXIgdGhlIHdlYnNvY2tldCBjb25uZWN0aW9uIGhhdmUgdGhlIFdlYlJ0Y0NvbnRyb2xsZXIgaGFuZGxlIHRoZSBtZXNzYWdlXG4gICAgICAgIHRoaXMud2ViU29ja2V0Q29udHJvbGxlci5vbkljZUNhbmRpZGF0ZSA9IChcbiAgICAgICAgICAgIGljZUNhbmRpZGF0ZTogUlRDSWNlQ2FuZGlkYXRlSW5pdFxuICAgICAgICApID0+IHRoaXMuaGFuZGxlSWNlQ2FuZGlkYXRlKGljZUNhbmRpZGF0ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGFuZGxlcyB3aGVuIHRoZSBzaWduYWxsaW5nIHNlcnZlciBnaXZlcyB1cyB0aGUgbGlzdCBvZiBzdHJlYW1lciBpZHMuXG4gICAgICovXG4gICAgaGFuZGxlU3RyZWFtZXJMaXN0TWVzc2FnZShtZXNzYWdlU3RyZWFtZXJMaXN0OiBNZXNzYWdlU3RyZWFtZXJMaXN0KSB7XG4gICAgICAgIExvZ2dlci5Mb2coXG4gICAgICAgICAgICBMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLFxuICAgICAgICAgICAgYEdvdCBzdHJlYW1lciBsaXN0ICR7bWVzc2FnZVN0cmVhbWVyTGlzdC5pZHN9YCxcbiAgICAgICAgICAgIDZcbiAgICAgICAgKTtcblxuICAgICAgICBpZih0aGlzLmlzUmVjb25uZWN0aW5nKSB7XG4gICAgICAgICAgICBpZihtZXNzYWdlU3RyZWFtZXJMaXN0Lmlkcy5pbmNsdWRlcyh0aGlzLnN1YnNjcmliZWRTdHJlYW0pKSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgd2UncmUgcmVjb25uZWN0aW5nIGFuZCB0aGUgcHJldmlvdXNseSBzdWJzY3JpYmVkIHN0cmVhbSBoYXMgY29tZSBiYWNrLCByZXN1YnNjcmliZSB0byBpdFxuICAgICAgICAgICAgICAgIHRoaXMuaXNSZWNvbm5lY3RpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlY29ubmVjdEF0dGVtcHQgPSAwO1xuICAgICAgICAgICAgICAgIHRoaXMud2ViU29ja2V0Q29udHJvbGxlci5zZW5kU3Vic2NyaWJlKHRoaXMuc3Vic2NyaWJlZFN0cmVhbSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYodGhpcy5yZWNvbm5lY3RBdHRlbXB0IDwgdGhpcy5jb25maWcuZ2V0TnVtZXJpY1NldHRpbmdWYWx1ZShOdW1lcmljUGFyYW1ldGVycy5NYXhSZWNvbm5lY3RBdHRlbXB0cykpIHtcbiAgICAgICAgICAgICAgICAvLyBPdXIgcHJldmlvdXMgc3RyZWFtIGhhc24ndCBjb21lIGJhY2ssIHdhaXQgMiBzZWNvbmRzIGFuZCByZXF1ZXN0IGFuIHVwZGF0ZWQgc3RyZWFtIGxpc3RcbiAgICAgICAgICAgICAgICB0aGlzLnJlY29ubmVjdEF0dGVtcHQrKztcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy53ZWJTb2NrZXRDb250cm9sbGVyLnJlcXVlc3RTdHJlYW1lckxpc3QoKTtcbiAgICAgICAgICAgICAgICB9LCAyMDAwKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBXZSd2ZSBleGhhdXN0ZWQgb3VyIHJlY29ubmVjdCBhdHRlbXB0cywgcmV0dXJuIHRvIG1haW4gc2NyZWVuXG4gICAgICAgICAgICAgICAgdGhpcy5yZWNvbm5lY3RBdHRlbXB0ID0gMDtcbiAgICAgICAgICAgICAgICB0aGlzLmlzUmVjb25uZWN0aW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5zaG91bGRSZWNvbm5lY3QgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLndlYlNvY2tldENvbnRyb2xsZXIuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB0aGlzLmNvbmZpZy5zZXRPcHRpb25TZXR0aW5nVmFsdWUoXG4gICAgICAgICAgICAgICAgICAgIE9wdGlvblBhcmFtZXRlcnMuU3RyZWFtZXJJZCxcbiAgICAgICAgICAgICAgICAgICAgXCJcIlxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgdGhpcy5jb25maWcuc2V0T3B0aW9uU2V0dGluZ09wdGlvbnMoXG4gICAgICAgICAgICAgICAgICAgIE9wdGlvblBhcmFtZXRlcnMuU3RyZWFtZXJJZCxcbiAgICAgICAgICAgICAgICAgICAgW11cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3Qgc2V0dGluZ09wdGlvbnMgPSBbLi4ubWVzc2FnZVN0cmVhbWVyTGlzdC5pZHNdOyAvLyBjb3B5IHRoZSBvcmlnaW5hbCBtZXNzYWdlU3RyZWFtZXJMaXN0Lmlkc1xuICAgICAgICAgICAgc2V0dGluZ09wdGlvbnMudW5zaGlmdCgnJyk7IC8vIGFkZCBhbiBlbXB0eSBvcHRpb24gYXQgdGhlIHRvcFxuICAgICAgICAgICAgdGhpcy5jb25maWcuc2V0T3B0aW9uU2V0dGluZ09wdGlvbnMoXG4gICAgICAgICAgICAgICAgT3B0aW9uUGFyYW1ldGVycy5TdHJlYW1lcklkLFxuICAgICAgICAgICAgICAgIHNldHRpbmdPcHRpb25zXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBjb25zdCB1cmxQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpO1xuICAgICAgICAgICAgbGV0IGF1dG9TZWxlY3RlZFN0cmVhbWVySWQ6IHN0cmluZyB8IG51bGwgPSBudWxsO1xuICAgICAgICAgICAgaWYgKG1lc3NhZ2VTdHJlYW1lckxpc3QuaWRzLmxlbmd0aCA9PSAxKSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlcmUncyBvbmx5IGEgc2luZ2xlIHN0cmVhbWVyLCBzdWJzY3JpYmUgdG8gaXQgcmVnYXJkbGVzcyBvZiB3aGF0IGlzIGluIHRoZSBVUkxcbiAgICAgICAgICAgICAgICBhdXRvU2VsZWN0ZWRTdHJlYW1lcklkID0gbWVzc2FnZVN0cmVhbWVyTGlzdC5pZHNbMF07XG4gICAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgICAgIHRoaXMuY29uZmlnLmlzRmxhZ0VuYWJsZWQoRmxhZ3MuUHJlZmVyU0ZVKSAmJlxuICAgICAgICAgICAgICAgIG1lc3NhZ2VTdHJlYW1lckxpc3QuaWRzLmluY2x1ZGVzKCdTRlUnKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlIFNGVSB0b2dnbGUgaXMgb24gYW5kIHRoZXJlJ3MgYW4gU0ZVIGNvbm5lY3RlZCwgc3Vic2NyaWJlIHRvIGl0IHJlZ2FyZGxlc3Mgb2Ygd2hhdCBpcyBpbiB0aGUgVVJMXG4gICAgICAgICAgICAgICAgYXV0b1NlbGVjdGVkU3RyZWFtZXJJZCA9ICdTRlUnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgICAgICB1cmxQYXJhbXMuaGFzKE9wdGlvblBhcmFtZXRlcnMuU3RyZWFtZXJJZCkgJiZcbiAgICAgICAgICAgICAgICBtZXNzYWdlU3RyZWFtZXJMaXN0Lmlkcy5pbmNsdWRlcyhcbiAgICAgICAgICAgICAgICAgICAgdXJsUGFyYW1zLmdldChPcHRpb25QYXJhbWV0ZXJzLlN0cmVhbWVySWQpXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlcmUncyBhIHN0cmVhbWVyIElEIGluIHRoZSBVUkwgYW5kIGEgc3RyZWFtZXIgd2l0aCB0aGlzIElEIGlzIGNvbm5lY3RlZCwgc2V0IGl0IGFzIHRoZSBzZWxlY3RlZCBzdHJlYW1lclxuICAgICAgICAgICAgICAgIGF1dG9TZWxlY3RlZFN0cmVhbWVySWQgPSB1cmxQYXJhbXMuZ2V0KE9wdGlvblBhcmFtZXRlcnMuU3RyZWFtZXJJZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYXV0b1NlbGVjdGVkU3RyZWFtZXJJZCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY29uZmlnLnNldE9wdGlvblNldHRpbmdWYWx1ZShcbiAgICAgICAgICAgICAgICAgICAgT3B0aW9uUGFyYW1ldGVycy5TdHJlYW1lcklkLFxuICAgICAgICAgICAgICAgICAgICBhdXRvU2VsZWN0ZWRTdHJlYW1lcklkXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucGl4ZWxTdHJlYW1pbmcuZGlzcGF0Y2hFdmVudChcbiAgICAgICAgICAgICAgICBuZXcgU3RyZWFtZXJMaXN0TWVzc2FnZUV2ZW50KHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZVN0cmVhbWVyTGlzdCxcbiAgICAgICAgICAgICAgICAgICAgYXV0b1NlbGVjdGVkU3RyZWFtZXJJZFxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGFuZGxlIHRoZSBSVEMgQW5zd2VyIGZyb20gdGhlIHNpZ25hbGluZyBzZXJ2ZXJcbiAgICAgKiBAcGFyYW0gQW5zd2VyIC0gQW5zd2VyIFNEUCBmcm9tIHRoZSBwZWVyLlxuICAgICAqL1xuICAgIGhhbmRsZVdlYlJ0Y0Fuc3dlcihBbnN3ZXI6IE1lc3NhZ2VBbnN3ZXIpIHtcbiAgICAgICAgTG9nZ2VyLkxvZyhMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBgR290IGFuc3dlciBzZHAgJHtBbnN3ZXIuc2RwfWAsIDYpO1xuXG4gICAgICAgIGNvbnN0IHNkcEFuc3dlcjogUlRDU2Vzc2lvbkRlc2NyaXB0aW9uSW5pdCA9IHtcbiAgICAgICAgICAgIHNkcDogQW5zd2VyLnNkcCxcbiAgICAgICAgICAgIHR5cGU6ICdhbnN3ZXInXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5wZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIucmVjZWl2ZUFuc3dlcihzZHBBbnN3ZXIpO1xuICAgICAgICB0aGlzLmhhbmRsZVBvc3RXZWJydGNOZWdvdGlhdGlvbigpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhhbmRsZSB0aGUgUlRDIG9mZmVyIGZyb20gYSBXZWJSVEMgcGVlciAocmVjZWl2ZWQgdGhyb3VnaCB0aGUgc2lnbmFsbGluZyBzZXJ2ZXIpLlxuICAgICAqIEBwYXJhbSBPZmZlciAtIE9mZmVyIFNEUCBmcm9tIHRoZSBwZWVyLlxuICAgICAqL1xuICAgIGhhbmRsZVdlYlJ0Y09mZmVyKE9mZmVyOiBNZXNzYWdlT2ZmZXIpIHtcbiAgICAgICAgTG9nZ2VyLkxvZyhMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBgR290IG9mZmVyIHNkcCAke09mZmVyLnNkcH1gLCA2KTtcblxuICAgICAgICB0aGlzLmlzVXNpbmdTRlUgPSBPZmZlci5zZnUgPyBPZmZlci5zZnUgOiBmYWxzZTtcbiAgICAgICAgaWYgKHRoaXMuaXNVc2luZ1NGVSkge1xuICAgICAgICAgICAgLy8gRGlzYWJsZSBuZWdvdGlhdGluZyB3aXRoIHRoZSBzZnUgYXMgdGhlIHNmdSBvbmx5IHN1cHBvcnRzIG9uZSBjb2RlYyBhdCBhIHRpbWVcbiAgICAgICAgICAgIHRoaXMucGVlckNvbm5lY3Rpb25Db250cm9sbGVyLnByZWZlcnJlZENvZGVjID0gJyc7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzZHBPZmZlcjogUlRDU2Vzc2lvbkRlc2NyaXB0aW9uSW5pdCA9IHtcbiAgICAgICAgICAgIHNkcDogT2ZmZXIuc2RwLFxuICAgICAgICAgICAgdHlwZTogJ29mZmVyJ1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMucGVlckNvbm5lY3Rpb25Db250cm9sbGVyLnJlY2VpdmVPZmZlcihzZHBPZmZlciwgdGhpcy5jb25maWcpO1xuICAgICAgICB0aGlzLmhhbmRsZVBvc3RXZWJydGNOZWdvdGlhdGlvbigpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhhbmRsZSB3aGVuIHRoZSBTRlUgcHJvdmlkZXMgdGhlIHBlZXIgd2l0aCBpdHMgZGF0YSBjaGFubmVsc1xuICAgICAqIEBwYXJhbSBEYXRhQ2hhbm5lbHMgLSBUaGUgbWVzc2FnZSBmcm9tIHRoZSBTRlUgY29udGFpbmluZyB0aGUgZGF0YSBjaGFubmVscyBpZHNcbiAgICAgKi9cbiAgICBoYW5kbGVXZWJSdGNTRlVQZWVyRGF0YWNoYW5uZWxzKFxuICAgICAgICBEYXRhQ2hhbm5lbHM6IE1lc3NhZ2VSZWNlaXZlLk1lc3NhZ2VQZWVyRGF0YUNoYW5uZWxzXG4gICAgKSB7XG4gICAgICAgIGNvbnN0IFNlbmRPcHRpb25zOiBSVENEYXRhQ2hhbm5lbEluaXQgPSB7XG4gICAgICAgICAgICBvcmRlcmVkOiB0cnVlLFxuICAgICAgICAgICAgbmVnb3RpYXRlZDogdHJ1ZSxcbiAgICAgICAgICAgIGlkOiBEYXRhQ2hhbm5lbHMuc2VuZFN0cmVhbUlkXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgdW5pZGlyZWN0aW9uYWwgPVxuICAgICAgICAgICAgRGF0YUNoYW5uZWxzLnNlbmRTdHJlYW1JZCAhPSBEYXRhQ2hhbm5lbHMucmVjdlN0cmVhbUlkO1xuXG4gICAgICAgIHRoaXMuc2VuZHJlY3ZEYXRhQ2hhbm5lbENvbnRyb2xsZXIuY3JlYXRlRGF0YUNoYW5uZWwoXG4gICAgICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uQ29udHJvbGxlci5wZWVyQ29ubmVjdGlvbixcbiAgICAgICAgICAgIHVuaWRpcmVjdGlvbmFsID8gJ3NlbmQtZGF0YWNoYW5uZWwnIDogJ2RhdGFjaGFubmVsJyxcbiAgICAgICAgICAgIFNlbmRPcHRpb25zXG4gICAgICAgICk7XG5cbiAgICAgICAgaWYgKHVuaWRpcmVjdGlvbmFsKSB7XG4gICAgICAgICAgICBjb25zdCBSZWN2T3B0aW9uczogUlRDRGF0YUNoYW5uZWxJbml0ID0ge1xuICAgICAgICAgICAgICAgIG9yZGVyZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgbmVnb3RpYXRlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBpZDogRGF0YUNoYW5uZWxzLnJlY3ZTdHJlYW1JZFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdGhpcy5yZWN2RGF0YUNoYW5uZWxDb250cm9sbGVyLmNyZWF0ZURhdGFDaGFubmVsKFxuICAgICAgICAgICAgICAgIHRoaXMucGVlckNvbm5lY3Rpb25Db250cm9sbGVyLnBlZXJDb25uZWN0aW9uLFxuICAgICAgICAgICAgICAgICdyZWN2LWRhdGFjaGFubmVsJyxcbiAgICAgICAgICAgICAgICBSZWN2T3B0aW9uc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMucmVjdkRhdGFDaGFubmVsQ29udHJvbGxlci5oYW5kbGVPbk9wZW4gPSAoKSA9PlxuICAgICAgICAgICAgICAgIHRoaXMud2ViU29ja2V0Q29udHJvbGxlci5zZW5kU0ZVUmVjdkRhdGFDaGFubmVsUmVhZHkoKTtcbiAgICAgICAgICAgIC8vIElmIHdlJ3JlIHVuaS1kaXJlY3Rpb25hbCwgb25seSB0aGUgcmVjdiBkYXRhIGNoYW5uZWwgc2hvdWxkIGhhbmRsZSBpbmNvbWluZyBtZXNzYWdlc1xuICAgICAgICAgICAgdGhpcy5yZWN2RGF0YUNoYW5uZWxDb250cm9sbGVyLmhhbmRsZU9uTWVzc2FnZSA9IChcbiAgICAgICAgICAgICAgICBldjogTWVzc2FnZUV2ZW50XG4gICAgICAgICAgICApID0+IHRoaXMuaGFuZGxlT25NZXNzYWdlKGV2KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGVsc2Ugb3VyIHByaW1hcnkgZGF0YWNoYW5uZWwgaXMgc2VuZC9yZWN2IHNvIGl0IGNhbiBoYW5kbGUgaW5jb21pbmcgbWVzc2FnZXNcbiAgICAgICAgICAgIHRoaXMuc2VuZHJlY3ZEYXRhQ2hhbm5lbENvbnRyb2xsZXIuaGFuZGxlT25NZXNzYWdlID0gKFxuICAgICAgICAgICAgICAgIGV2OiBNZXNzYWdlRXZlbnRcbiAgICAgICAgICAgICkgPT4gdGhpcy5oYW5kbGVPbk1lc3NhZ2UoZXYpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaGFuZGxlUG9zdFdlYnJ0Y05lZ290aWF0aW9uKCkge1xuICAgICAgICAvLyBzdGFydCB0aGUgYWZrIHdhcm5pbmcgdGltZXIgYXMgUFMgaXMgbm93IHJ1bm5pbmdcbiAgICAgICAgdGhpcy5hZmtDb250cm9sbGVyLnN0YXJ0QWZrV2FybmluZ1RpbWVyKCk7XG4gICAgICAgIC8vIHNob3cgdGhlIG92ZXJsYXkgdGhhdCB3ZSBoYXZlIG5lZ290aWF0ZWQgYSBjb25uZWN0aW9uXG4gICAgICAgIHRoaXMucGl4ZWxTdHJlYW1pbmcuX29uV2ViUnRjU2RwKCk7XG5cbiAgICAgICAgaWYgKHRoaXMuc3RhdHNUaW1lckhhbmRsZSAmJiB0aGlzLnN0YXRzVGltZXJIYW5kbGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgd2luZG93LmNsZWFySW50ZXJ2YWwodGhpcy5zdGF0c1RpbWVySGFuZGxlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc3RhdHNUaW1lckhhbmRsZSA9IHdpbmRvdy5zZXRJbnRlcnZhbCgoKSA9PiB0aGlzLmdldFN0YXRzKCksIDEwMDApO1xuXG4gICAgICAgIC8qICAqL1xuICAgICAgICB0aGlzLnNldE1vdXNlSW5wdXRFbmFibGVkKHRoaXMuY29uZmlnLmlzRmxhZ0VuYWJsZWQoRmxhZ3MuTW91c2VJbnB1dCkpO1xuICAgICAgICB0aGlzLnNldEtleWJvYXJkSW5wdXRFbmFibGVkKHRoaXMuY29uZmlnLmlzRmxhZ0VuYWJsZWQoRmxhZ3MuS2V5Ym9hcmRJbnB1dCkpO1xuICAgICAgICB0aGlzLnNldEdhbWVQYWRJbnB1dEVuYWJsZWQodGhpcy5jb25maWcuaXNGbGFnRW5hYmxlZChGbGFncy5HYW1lcGFkSW5wdXQpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBXaGVuIGFuIGljZSBDYW5kaWRhdGUgaXMgcmVjZWl2ZWQgZnJvbSB0aGUgU2lnbmFsaW5nIHNlcnZlciBhZGQgaXQgdG8gdGhlIFBlZXIgQ29ubmVjdGlvbiBDbGllbnRcbiAgICAgKiBAcGFyYW0gaWNlQ2FuZGlkYXRlIC0gSWNlIENhbmRpZGF0ZSBmcm9tIFNlcnZlclxuICAgICAqL1xuICAgIGhhbmRsZUljZUNhbmRpZGF0ZShpY2VDYW5kaWRhdGU6IFJUQ0ljZUNhbmRpZGF0ZUluaXQpIHtcbiAgICAgICAgTG9nZ2VyLkxvZyhcbiAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXG4gICAgICAgICAgICAnV2ViIFJUQyBDb250cm9sbGVyOiBvbldlYlJ0Y0ljZScsXG4gICAgICAgICAgICA2XG4gICAgICAgICk7XG5cbiAgICAgICAgY29uc3QgY2FuZGlkYXRlID0gbmV3IFJUQ0ljZUNhbmRpZGF0ZShpY2VDYW5kaWRhdGUpO1xuICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uQ29udHJvbGxlci5oYW5kbGVPbkljZShjYW5kaWRhdGUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNlbmQgdGhlIGljZSBDYW5kaWRhdGUgdG8gdGhlIHNpZ25hbGluZyBzZXJ2ZXIgdmlhIHdlYnNvY2tldFxuICAgICAqIEBwYXJhbSBpY2VFdmVudCAtIFJUQyBQZWVyIENvbm5lY3Rpb25JY2VFdmVudCkge1xuICAgICAqL1xuICAgIGhhbmRsZVNlbmRJY2VDYW5kaWRhdGUoaWNlRXZlbnQ6IFJUQ1BlZXJDb25uZWN0aW9uSWNlRXZlbnQpIHtcbiAgICAgICAgTG9nZ2VyLkxvZyhMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnT25JY2VDYW5kaWRhdGUnLCA2KTtcbiAgICAgICAgaWYgKGljZUV2ZW50LmNhbmRpZGF0ZSAmJiBpY2VFdmVudC5jYW5kaWRhdGUuY2FuZGlkYXRlKSB7XG4gICAgICAgICAgICB0aGlzLndlYlNvY2tldENvbnRyb2xsZXIuc2VuZEljZUNhbmRpZGF0ZShpY2VFdmVudC5jYW5kaWRhdGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2VuZCB0aGUgaWNlIENhbmRpZGF0ZSB0byB0aGUgc2lnbmFsaW5nIHNlcnZlciB2aWEgd2Vic29ja2V0XG4gICAgICogQHBhcmFtIGljZUV2ZW50IC0gUlRDIFBlZXIgQ29ubmVjdGlvbkljZUV2ZW50KSB7XG4gICAgICovXG4gICAgaGFuZGxlRGF0YUNoYW5uZWwoZGF0YWNoYW5uZWxFdmVudDogUlRDRGF0YUNoYW5uZWxFdmVudCkge1xuICAgICAgICBMb2dnZXIuTG9nKFxuICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcbiAgICAgICAgICAgICdEYXRhIGNoYW5uZWwgY3JlYXRlZCBmb3IgdXMgYnkgYnJvd3NlciBhcyB3ZSBhcmUgYSByZWNlaXZpbmcgcGVlci4nLFxuICAgICAgICAgICAgNlxuICAgICAgICApO1xuICAgICAgICB0aGlzLnNlbmRyZWN2RGF0YUNoYW5uZWxDb250cm9sbGVyLmRhdGFDaGFubmVsID1cbiAgICAgICAgICAgIGRhdGFjaGFubmVsRXZlbnQuY2hhbm5lbDtcbiAgICAgICAgLy8gRGF0YSBjaGFubmVsIHdhcyBjcmVhdGVkIGZvciB1cywgc28gd2UganVzdCBuZWVkIHRvIHNldHVwIGl0cyBjYWxsYmFja3MgYW5kIGFycmF5IHR5cGVcbiAgICAgICAgdGhpcy5zZW5kcmVjdkRhdGFDaGFubmVsQ29udHJvbGxlci5zZXR1cERhdGFDaGFubmVsKCk7XG4gICAgICAgIHRoaXMuc2VuZHJlY3ZEYXRhQ2hhbm5lbENvbnRyb2xsZXIuaGFuZGxlT25NZXNzYWdlID0gKFxuICAgICAgICAgICAgZXY6IE1lc3NhZ2VFdmVudDxBcnJheUJ1ZmZlcj5cbiAgICAgICAgKSA9PiB0aGlzLmhhbmRsZU9uTWVzc2FnZShldik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2VuZCB0aGUgUlRDIE9mZmVyIFNlc3Npb24gdG8gdGhlIFNpZ25hbGluZyBzZXJ2ZXIgdmlhIHdlYnNvY2tldFxuICAgICAqIEBwYXJhbSBvZmZlciAtIFJUQyBTZXNzaW9uIERlc2NyaXB0aW9uXG4gICAgICovXG4gICAgaGFuZGxlU2VuZFdlYlJUQ09mZmVyKG9mZmVyOiBSVENTZXNzaW9uRGVzY3JpcHRpb25Jbml0KSB7XG4gICAgICAgIExvZ2dlci5Mb2coXG4gICAgICAgICAgICBMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLFxuICAgICAgICAgICAgJ1NlbmRpbmcgdGhlIG9mZmVyIHRvIHRoZSBTZXJ2ZXInLFxuICAgICAgICAgICAgNlxuICAgICAgICApO1xuICAgICAgICB0aGlzLndlYlNvY2tldENvbnRyb2xsZXIuc2VuZFdlYlJ0Y09mZmVyKG9mZmVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZW5kIHRoZSBSVEMgT2ZmZXIgU2Vzc2lvbiB0byB0aGUgU2lnbmFsaW5nIHNlcnZlciB2aWEgd2Vic29ja2V0XG4gICAgICogQHBhcmFtIGFuc3dlciAtIFJUQyBTZXNzaW9uIERlc2NyaXB0aW9uXG4gICAgICovXG4gICAgaGFuZGxlU2VuZFdlYlJUQ0Fuc3dlcihhbnN3ZXI6IFJUQ1Nlc3Npb25EZXNjcmlwdGlvbkluaXQpIHtcbiAgICAgICAgTG9nZ2VyLkxvZyhcbiAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXG4gICAgICAgICAgICAnU2VuZGluZyB0aGUgYW5zd2VyIHRvIHRoZSBTZXJ2ZXInLFxuICAgICAgICAgICAgNlxuICAgICAgICApO1xuICAgICAgICB0aGlzLndlYlNvY2tldENvbnRyb2xsZXIuc2VuZFdlYlJ0Y0Fuc3dlcihhbnN3ZXIpO1xuXG4gICAgICAgIGlmICh0aGlzLmlzVXNpbmdTRlUpIHtcbiAgICAgICAgICAgIHRoaXMud2ViU29ja2V0Q29udHJvbGxlci5zZW5kV2ViUnRjRGF0YWNoYW5uZWxSZXF1ZXN0KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIGZyZWV6ZSBmcmFtZSBvdmVybGF5IHRvIHRoZSBwbGF5ZXIgZGl2XG4gICAgICovXG4gICAgc2V0VXBNb3VzZUFuZEZyZWV6ZUZyYW1lKCkge1xuICAgICAgICAvLyBDYWxjdWxhdGluZyBhbmQgbm9ybWFsaXppbmcgcG9zaXRpb25zIGRlcGVuZHMgb24gdGhlIHdpZHRoIGFuZCBoZWlnaHQgb2YgdGhlIHBsYXllci5cbiAgICAgICAgdGhpcy52aWRlb0VsZW1lbnRQYXJlbnRDbGllbnRSZWN0ID0gdGhpcy52aWRlb1BsYXllclxuICAgICAgICAgICAgLmdldFZpZGVvUGFyZW50RWxlbWVudCgpXG4gICAgICAgICAgICAuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIHRoaXMuY29vcmRpbmF0ZUNvbnZlcnRlci5zZXR1cE5vcm1hbGl6ZUFuZFF1YW50aXplKCk7XG4gICAgICAgIHRoaXMuZnJlZXplRnJhbWVDb250cm9sbGVyLmZyZWV6ZUZyYW1lLnJlc2l6ZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENsb3NlIHRoZSBDb25uZWN0aW9uIHRvIHRoZSBzaWduYWxpbmcgc2VydmVyXG4gICAgICovXG4gICAgY2xvc2VTaWduYWxpbmdTZXJ2ZXIoKSB7XG4gICAgICAgIC8vIFdlIGV4cGxpY2l0bHkgY2FsbGVkIGNsb3NlLCB0aGVyZWZvcmUgd2UgZG9uJ3Qgd2FudCB0byB0cmlnZ2VyIGF1dG8gcmVjb25uZWN0XG4gICAgICAgIHRoaXMuc2hvdWxkUmVjb25uZWN0ID0gZmFsc2U7XG4gICAgICAgIHRoaXMud2ViU29ja2V0Q29udHJvbGxlcj8uY2xvc2UoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDbG9zZSB0aGUgcGVlciBjb25uZWN0aW9uXG4gICAgICovXG4gICAgY2xvc2VQZWVyQ29ubmVjdGlvbigpIHtcbiAgICAgICAgdGhpcy5wZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXI/LmNsb3NlKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2xvc2UgYWxsIGNvbm5lY3Rpb25zXG4gICAgICovXG4gICAgY2xvc2UoKSB7XG4gICAgICAgIHRoaXMuY2xvc2VTaWduYWxpbmdTZXJ2ZXIoKTtcbiAgICAgICAgdGhpcy5jbG9zZVBlZXJDb25uZWN0aW9uKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmlyZXMgYSBWaWRlbyBTdGF0cyBFdmVudCBpbiB0aGUgUlRDIFBlZXIgQ29ubmVjdGlvblxuICAgICAqL1xuICAgIGdldFN0YXRzKCkge1xuICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uQ29udHJvbGxlci5nZW5lcmF0ZVN0YXRzKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2VuZCBhIExhdGVuY3kgVGVzdCBSZXF1ZXN0IHRvIHRoZSBVRSBJbnN0YW5jZVxuICAgICAqL1xuICAgIHNlbmRMYXRlbmN5VGVzdCgpIHtcbiAgICAgICAgdGhpcy5sYXRlbmN5U3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICAgICAgdGhpcy5zZW5kRGVzY3JpcHRvckNvbnRyb2xsZXIuc2VuZExhdGVuY3lUZXN0KHtcbiAgICAgICAgICAgIFN0YXJ0VGltZTogdGhpcy5sYXRlbmN5U3RhcnRUaW1lXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNlbmQgdGhlIE1pblFQIGVuY29kZXIgc2V0dGluZyB0byB0aGUgVUUgSW5zdGFuY2UuXG4gICAgICogQHBhcmFtIG1pblFQIC0gVGhlIGxvd2VyIGJvdW5kIGZvciBRUCB3aGVuIGVuY29kaW5nXG4gICAgICogdmFsaWQgdmFsdWVzIGFyZSAoMS01MSkgd2hlcmU6XG4gICAgICogMSA9IEJlc3QgcXVhbGl0eSBidXQgaGlnaGVzdCBiaXRyYXRlLlxuICAgICAqIDUxID0gV29yc3QgcXVhbGl0eSBidXQgbG93ZXN0IGJpdHJhdGUuXG4gICAgICogQnkgZGVmYXVsdCB0aGUgbWluUVAgaXMgMSBtZWFuaW5nIHRoZSBlbmNvZGVyIGlzIGZyZWVcbiAgICAgKiB0byBhaW0gZm9yIHRoZSBiZXN0IHF1YWxpdHkgaXQgY2FuIG9uIHRoZSBnaXZlbiBuZXR3b3JrIGxpbmsuXG4gICAgICovXG4gICAgc2VuZEVuY29kZXJNaW5RUChtaW5RUDogbnVtYmVyKSB7XG4gICAgICAgIExvZ2dlci5Mb2coTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgYE1pblFQPSR7bWluUVB9XFxuYCwgNik7XG5cbiAgICAgICAgaWYgKG1pblFQICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuc2VuZERlc2NyaXB0b3JDb250cm9sbGVyLmVtaXRDb21tYW5kKHtcbiAgICAgICAgICAgICAgICAnRW5jb2Rlci5NaW5RUCc6IG1pblFQXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNlbmQgdGhlIE1heFFQIGVuY29kZXIgc2V0dGluZyB0byB0aGUgVUUgSW5zdGFuY2UuXG4gICAgICogQHBhcmFtIG1heFFQIC0gVGhlIHVwcGVyIGJvdW5kIGZvciBRUCB3aGVuIGVuY29kaW5nXG4gICAgICogdmFsaWQgdmFsdWVzIGFyZSAoMS01MSkgd2hlcmU6XG4gICAgICogMSA9IEJlc3QgcXVhbGl0eSBidXQgaGlnaGVzdCBiaXRyYXRlLlxuICAgICAqIDUxID0gV29yc3QgcXVhbGl0eSBidXQgbG93ZXN0IGJpdHJhdGUuXG4gICAgICogQnkgZGVmYXVsdCB0aGUgbWF4UVAgaXMgNTEgbWVhbmluZyB0aGUgZW5jb2RlciBpcyBmcmVlXG4gICAgICogdG8gZHJvcCBxdWFsaXR5IGFzIGxvdyBhcyBuZWVkZWQgb24gdGhlIGdpdmVuIG5ldHdvcmsgbGluay5cbiAgICAgKi9cbiAgICAgc2VuZEVuY29kZXJNYXhRUChtYXhRUDogbnVtYmVyKSB7XG4gICAgICAgIExvZ2dlci5Mb2coTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgYE1heFFQPSR7bWF4UVB9XFxuYCwgNik7XG5cbiAgICAgICAgaWYgKG1heFFQICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuc2VuZERlc2NyaXB0b3JDb250cm9sbGVyLmVtaXRDb21tYW5kKHtcbiAgICAgICAgICAgICAgICAnRW5jb2Rlci5NYXhRUCc6IG1heFFQXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNlbmQgdGhlIHsgV2ViUlRDLk1pbkJpdHJhdGU6IFNvbWVOdW1iZXIgfX0gY29tbWFuZCB0byBVRSB0byBzZXQgXG4gICAgICogdGhlIG1pbmltdW0gYml0cmF0ZSB0aGF0IHdlIGFsbG93IFdlYlJUQyB0byB1c2UgXG4gICAgICogKG5vdGUgc2V0dGluZyB0aGlzIHRvbyBoaWdoIGluIHBvb3IgbmV0d29ya3MgY2FuIGJlIHByb2JsZW1hdGljKS5cbiAgICAgKiBAcGFyYW0gbWluQml0cmF0ZSAtIFRoZSBtaW5pbXVtIGJpdHJhdGUgd2Ugd291bGQgbGlrZSBXZWJSVEMgdG8gbm90IGZhbGwgYmVsb3cuXG4gICAgICovXG4gICAgc2VuZFdlYlJUQ01pbkJpdHJhdGUobWluQml0cmF0ZTogbnVtYmVyKSB7XG4gICAgICAgIExvZ2dlci5Mb2coTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgYFdlYlJUQyBNaW4gQml0cmF0ZT0ke21pbkJpdHJhdGV9YCwgNik7XG4gICAgICAgIGlmIChtaW5CaXRyYXRlICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuc2VuZERlc2NyaXB0b3JDb250cm9sbGVyLmVtaXRDb21tYW5kKHtcbiAgICAgICAgICAgICAgICAnV2ViUlRDLk1pbkJpdHJhdGUnOiBtaW5CaXRyYXRlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNlbmQgdGhlIHsgV2ViUlRDLk1heEJpdHJhdGU6IFNvbWVOdW1iZXIgfX0gY29tbWFuZCB0byBVRSB0byBzZXQgXG4gICAgICogdGhlIG1pbmltdW0gYml0cmF0ZSB0aGF0IHdlIGFsbG93IFdlYlJUQyB0byB1c2UgXG4gICAgICogKG5vdGUgc2V0dGluZyB0aGlzIHRvbyBsb3cgY291bGQgcmVzdWx0IGluIGJsb2NreSB2aWRlbykuXG4gICAgICogQHBhcmFtIG1pbkJpdHJhdGUgLSBUaGUgbWluaW11bSBiaXRyYXRlIHdlIHdvdWxkIGxpa2UgV2ViUlRDIHRvIG5vdCBmYWxsIGJlbG93LlxuICAgICAqL1xuICAgICBzZW5kV2ViUlRDTWF4Qml0cmF0ZShtYXhCaXRyYXRlOiBudW1iZXIpIHtcbiAgICAgICAgTG9nZ2VyLkxvZyhMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBgV2ViUlRDIE1heCBCaXRyYXRlPSR7bWF4Qml0cmF0ZX1gLCA2KTtcbiAgICAgICAgaWYgKG1heEJpdHJhdGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5zZW5kRGVzY3JpcHRvckNvbnRyb2xsZXIuZW1pdENvbW1hbmQoe1xuICAgICAgICAgICAgICAgICdXZWJSVEMuTWF4Qml0cmF0ZSc6IG1heEJpdHJhdGVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2VuZCB0aGUgeyBXZWJSVEMuRnBzOiBTb21lTnVtYmVyIH19IFVFIDUuMCtcbiAgICAgKiBhbmQgeyBXZWJSVEMuTWF4RnBzIH0gVUUgNC4yNyBjb21tYW5kIHRvIHNldCBcbiAgICAgKiB0aGUgbWF4aW11bSBmcHMgd2Ugd291bGQgbGlrZSBXZWJSVEMgdG8gc3RyZWFtIGF0LiBcbiAgICAgKiBAcGFyYW0gZnBzIC0gVGhlIG1heGltdW0gc3RyZWFtIGZwcy5cbiAgICAgKi9cbiAgICAgc2VuZFdlYlJUQ0ZwcyhmcHM6IG51bWJlcikge1xuICAgICAgICBMb2dnZXIuTG9nKExvZ2dlci5HZXRTdGFja1RyYWNlKCksIGBXZWJSVEMgRlBTPSR7ZnBzfWAsIDYpO1xuICAgICAgICBpZiAoZnBzICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuc2VuZERlc2NyaXB0b3JDb250cm9sbGVyLmVtaXRDb21tYW5kKHsnV2ViUlRDLkZwcyc6IGZwc30pO1xuICAgICAgICAgICAgdGhpcy5zZW5kRGVzY3JpcHRvckNvbnRyb2xsZXIuZW1pdENvbW1hbmQoeydXZWJSVEMuTWF4RnBzJzogZnBzfSk7IC8qIFRPRE86IFJlbW92ZSB3aGVuIFVFIDQuMjcgdW5zdXBwb3J0ZWQuICovXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZW5kcyB0aGUgVUkgRGVzY3JpcHRvciBgc3RhdCBmcHNgIHRvIHRoZSBVRSBJbnN0YW5jZVxuICAgICAqL1xuICAgIHNlbmRTaG93RnBzKCk6IHZvaWQge1xuICAgICAgICBMb2dnZXIuTG9nKFxuICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcbiAgICAgICAgICAgICctLS0tICAgU2VuZGluZyBzaG93IHN0YXQgdG8gVUUgICAtLS0tJyxcbiAgICAgICAgICAgIDZcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5zZW5kRGVzY3JpcHRvckNvbnRyb2xsZXIuZW1pdENvbW1hbmQoeyAnc3RhdC5mcHMnOiAnJyB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZW5kIGFuIElmcmFtZSByZXF1ZXN0IHRvIHRoZSBzdHJlYW1lclxuICAgICAqL1xuICAgIHNlbmRJZnJhbWVSZXF1ZXN0KCk6IHZvaWQge1xuICAgICAgICBMb2dnZXIuTG9nKFxuICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcbiAgICAgICAgICAgICctLS0tICAgU2VuZGluZyBSZXF1ZXN0IGZvciBhbiBJRnJhbWUgIC0tLS0nLFxuICAgICAgICAgICAgNlxuICAgICAgICApO1xuICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnRvU3RyZWFtZXJIYW5kbGVycy5nZXQoJ0lGcmFtZVJlcXVlc3QnKSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNlbmQgYSBVSUludGVyYWN0aW9uIG1lc3NhZ2VcbiAgICAgKi9cbiAgICBlbWl0VUlJbnRlcmFjdGlvbihkZXNjcmlwdG9yOiBvYmplY3QgfCBzdHJpbmcpIHtcbiAgICAgICAgTG9nZ2VyLkxvZyhcbiAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXG4gICAgICAgICAgICAnLS0tLSAgIFNlbmRpbmcgY3VzdG9tIFVJSW50ZXJhY3Rpb24gbWVzc2FnZSAgIC0tLS0nLFxuICAgICAgICAgICAgNlxuICAgICAgICApO1xuICAgICAgICB0aGlzLnNlbmREZXNjcmlwdG9yQ29udHJvbGxlci5lbWl0VUlJbnRlcmFjdGlvbihkZXNjcmlwdG9yKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZW5kIGEgQ29tbWFuZCBtZXNzYWdlXG4gICAgICovXG4gICAgZW1pdENvbW1hbmQoZGVzY3JpcHRvcjogb2JqZWN0KSB7XG4gICAgICAgIExvZ2dlci5Mb2coXG4gICAgICAgICAgICBMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLFxuICAgICAgICAgICAgJy0tLS0gICBTZW5kaW5nIGN1c3RvbSBDb21tYW5kIG1lc3NhZ2UgICAtLS0tJyxcbiAgICAgICAgICAgIDZcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5zZW5kRGVzY3JpcHRvckNvbnRyb2xsZXIuZW1pdENvbW1hbmQoZGVzY3JpcHRvcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2VuZCBhIGNvbnNvbGUgY29tbWFuZCBtZXNzYWdlXG4gICAgICovXG4gICAgZW1pdENvbnNvbGVDb21tYW5kKGNvbW1hbmQ6IHN0cmluZykge1xuICAgICAgICBMb2dnZXIuTG9nKFxuICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcbiAgICAgICAgICAgICctLS0tICAgU2VuZGluZyBjdXN0b20gQ29tbWFuZDpDb25zb2xlQ29tbWFuZCBtZXNzYWdlICAgLS0tLScsXG4gICAgICAgICAgICA2XG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuc2VuZERlc2NyaXB0b3JDb250cm9sbGVyLmVtaXRDb21tYW5kKHtcbiAgICAgICAgICAgIENvbnNvbGVDb21tYW5kOiBjb21tYW5kLFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZW5kcyBhIHJlcXVlc3QgdG8gdGhlIFVFIEluc3RhbmNlIHRvIGhhdmUgb3duZXJzaGlwIG9mIFF1YWxpdHlcbiAgICAgKi9cbiAgICBzZW5kUmVxdWVzdFF1YWxpdHlDb250cm9sT3duZXJzaGlwKCk6IHZvaWQge1xuICAgICAgICBMb2dnZXIuTG9nKFxuICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcbiAgICAgICAgICAgICctLS0tICAgU2VuZGluZyBSZXF1ZXN0IHRvIENvbnRyb2wgUXVhbGl0eSAgLS0tLScsXG4gICAgICAgICAgICA2XG4gICAgICAgICk7XG4gICAgICAgIHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzQ29udHJvbGxlci5TZW5kUmVxdWVzdFF1YWxpdHlDb250cm9sKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGFuZGxlcyB3aGVuIGEgTGF0ZW5jeSBUZXN0IFJlc3VsdCBhcmUgcmVjZWl2ZWQgZnJvbSB0aGUgVUUgSW5zdGFuY2VcbiAgICAgKiBAcGFyYW0gbWVzc2FnZSAtIExhdGVuY3kgVGVzdCBUaW1pbmdzXG4gICAgICovXG4gICAgaGFuZGxlTGF0ZW5jeVRlc3RSZXN1bHQobWVzc2FnZTogQXJyYXlCdWZmZXIpIHtcbiAgICAgICAgTG9nZ2VyLkxvZyhcbiAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXG4gICAgICAgICAgICAnRGF0YUNoYW5uZWxSZWNlaXZlTWVzc2FnZVR5cGUubGF0ZW5jeVRlc3QnLFxuICAgICAgICAgICAgNlxuICAgICAgICApO1xuICAgICAgICBjb25zdCBsYXRlbmN5QXNTdHJpbmcgPSBuZXcgVGV4dERlY29kZXIoJ3V0Zi0xNicpLmRlY29kZShcbiAgICAgICAgICAgIG1lc3NhZ2Uuc2xpY2UoMSlcbiAgICAgICAgKTtcbiAgICAgICAgY29uc3QgbGF0ZW5jeVRlc3RSZXN1bHRzOiBMYXRlbmN5VGVzdFJlc3VsdHMgPSBuZXcgTGF0ZW5jeVRlc3RSZXN1bHRzKCk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24obGF0ZW5jeVRlc3RSZXN1bHRzLCBKU09OLnBhcnNlKGxhdGVuY3lBc1N0cmluZykpO1xuICAgICAgICBsYXRlbmN5VGVzdFJlc3VsdHMucHJvY2Vzc0ZpZWxkcygpO1xuXG4gICAgICAgIGxhdGVuY3lUZXN0UmVzdWx0cy50ZXN0U3RhcnRUaW1lTXMgPSB0aGlzLmxhdGVuY3lTdGFydFRpbWU7XG4gICAgICAgIGxhdGVuY3lUZXN0UmVzdWx0cy5icm93c2VyUmVjZWlwdFRpbWVNcyA9IERhdGUubm93KCk7XG5cbiAgICAgICAgbGF0ZW5jeVRlc3RSZXN1bHRzLmxhdGVuY3lFeGNsdWRpbmdEZWNvZGUgPSB+fihcbiAgICAgICAgICAgIGxhdGVuY3lUZXN0UmVzdWx0cy5icm93c2VyUmVjZWlwdFRpbWVNcyAtXG4gICAgICAgICAgICBsYXRlbmN5VGVzdFJlc3VsdHMudGVzdFN0YXJ0VGltZU1zXG4gICAgICAgICk7XG4gICAgICAgIGxhdGVuY3lUZXN0UmVzdWx0cy50ZXN0RHVyYXRpb24gPSB+fihcbiAgICAgICAgICAgIGxhdGVuY3lUZXN0UmVzdWx0cy5UcmFuc21pc3Npb25UaW1lTXMgLVxuICAgICAgICAgICAgbGF0ZW5jeVRlc3RSZXN1bHRzLlJlY2VpcHRUaW1lTXNcbiAgICAgICAgKTtcbiAgICAgICAgbGF0ZW5jeVRlc3RSZXN1bHRzLm5ldHdvcmtMYXRlbmN5ID0gfn4oXG4gICAgICAgICAgICBsYXRlbmN5VGVzdFJlc3VsdHMubGF0ZW5jeUV4Y2x1ZGluZ0RlY29kZSAtXG4gICAgICAgICAgICBsYXRlbmN5VGVzdFJlc3VsdHMudGVzdER1cmF0aW9uXG4gICAgICAgICk7XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgbGF0ZW5jeVRlc3RSZXN1bHRzLmZyYW1lRGlzcGxheURlbHRhVGltZU1zICYmXG4gICAgICAgICAgICBsYXRlbmN5VGVzdFJlc3VsdHMuYnJvd3NlclJlY2VpcHRUaW1lTXNcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBsYXRlbmN5VGVzdFJlc3VsdHMuZW5kVG9FbmRMYXRlbmN5ID1cbiAgICAgICAgICAgICAgICB+fihsYXRlbmN5VGVzdFJlc3VsdHMuZnJhbWVEaXNwbGF5RGVsdGFUaW1lTXMgK1xuICAgICAgICAgICAgICAgICAgICBsYXRlbmN5VGVzdFJlc3VsdHMubmV0d29ya0xhdGVuY3ksXG4gICAgICAgICAgICAgICAgK2xhdGVuY3lUZXN0UmVzdWx0cy5DYXB0dXJlVG9TZW5kTXMpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucGl4ZWxTdHJlYW1pbmcuX29uTGF0ZW5jeVRlc3RSZXN1bHQobGF0ZW5jeVRlc3RSZXN1bHRzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIYW5kbGVzIHdoZW4gdGhlIEVuY29kZXIgYW5kIFdlYiBSVEMgU2V0dGluZ3MgYXJlIHJlY2VpdmVkIGZyb20gdGhlIFVFIEluc3RhbmNlXG4gICAgICogQHBhcmFtIG1lc3NhZ2UgLSBJbml0aWFsIEVuY29kZXIgYW5kIFdlYiBSVEMgU2V0dGluZ3NcbiAgICAgKi9cbiAgICBoYW5kbGVJbml0aWFsU2V0dGluZ3MobWVzc2FnZTogQXJyYXlCdWZmZXIpIHtcbiAgICAgICAgTG9nZ2VyLkxvZyhcbiAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXG4gICAgICAgICAgICAnRGF0YUNoYW5uZWxSZWNlaXZlTWVzc2FnZVR5cGUuSW5pdGlhbFNldHRpbmdzJyxcbiAgICAgICAgICAgIDZcbiAgICAgICAgKTtcbiAgICAgICAgY29uc3QgcGF5bG9hZEFzU3RyaW5nID0gbmV3IFRleHREZWNvZGVyKCd1dGYtMTYnKS5kZWNvZGUoXG4gICAgICAgICAgICBtZXNzYWdlLnNsaWNlKDEpXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IHBhcnNlZEluaXRpYWxTZXR0aW5ncyA9IEpTT04ucGFyc2UocGF5bG9hZEFzU3RyaW5nKTtcblxuICAgICAgICBjb25zdCBpbml0aWFsU2V0dGluZ3M6IEluaXRpYWxTZXR0aW5ncyA9IG5ldyBJbml0aWFsU2V0dGluZ3MoKTtcblxuICAgICAgICBpZiAocGFyc2VkSW5pdGlhbFNldHRpbmdzLkVuY29kZXIpIHtcbiAgICAgICAgICAgIGluaXRpYWxTZXR0aW5ncy5FbmNvZGVyU2V0dGluZ3MgPSBwYXJzZWRJbml0aWFsU2V0dGluZ3MuRW5jb2RlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwYXJzZWRJbml0aWFsU2V0dGluZ3MuV2ViUlRDKSB7XG4gICAgICAgICAgICBpbml0aWFsU2V0dGluZ3MuV2ViUlRDU2V0dGluZ3MgPSBwYXJzZWRJbml0aWFsU2V0dGluZ3MuV2ViUlRDO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBhcnNlZEluaXRpYWxTZXR0aW5ncy5QaXhlbFN0cmVhbWluZykge1xuICAgICAgICAgICAgaW5pdGlhbFNldHRpbmdzLlBpeGVsU3RyZWFtaW5nU2V0dGluZ3MgPVxuICAgICAgICAgICAgICAgIHBhcnNlZEluaXRpYWxTZXR0aW5ncy5QaXhlbFN0cmVhbWluZztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwYXJzZWRJbml0aWFsU2V0dGluZ3MuQ29uZmlnT3B0aW9ucyAmJiBwYXJzZWRJbml0aWFsU2V0dGluZ3MuQ29uZmlnT3B0aW9ucy5EZWZhdWx0VG9Ib3ZlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmNvbmZpZy5zZXRGbGFnRW5hYmxlZChcbiAgICAgICAgICAgICAgICBGbGFncy5Ib3ZlcmluZ01vdXNlTW9kZSxcbiAgICAgICAgICAgICAgICAhIXBhcnNlZEluaXRpYWxTZXR0aW5ncy5Db25maWdPcHRpb25zLkRlZmF1bHRUb0hvdmVyXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgaW5pdGlhbFNldHRpbmdzLnVlQ29tcGF0aWJsZSgpO1xuICAgICAgICBMb2dnZXIuTG9nKExvZ2dlci5HZXRTdGFja1RyYWNlKCksIHBheWxvYWRBc1N0cmluZywgNik7XG5cbiAgICAgICAgdGhpcy5waXhlbFN0cmVhbWluZy5fb25Jbml0aWFsU2V0dGluZ3MoaW5pdGlhbFNldHRpbmdzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIYW5kbGVzIHdoZW4gdGhlIFF1YW50aXphdGlvbiBQYXJhbWV0ZXIgYXJlIHJlY2VpdmVkIGZyb20gdGhlIFVFIEluc3RhbmNlXG4gICAgICogQHBhcmFtIG1lc3NhZ2UgLSBFbmNvZGVycyBRdWFudGl6YXRpb24gUGFyYW1ldGVyXG4gICAgICovXG4gICAgaGFuZGxlVmlkZW9FbmNvZGVyQXZnUVAobWVzc2FnZTogQXJyYXlCdWZmZXIpIHtcbiAgICAgICAgTG9nZ2VyLkxvZyhcbiAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXG4gICAgICAgICAgICAnRGF0YUNoYW5uZWxSZWNlaXZlTWVzc2FnZVR5cGUuVmlkZW9FbmNvZGVyQXZnUVAnLFxuICAgICAgICAgICAgNlxuICAgICAgICApO1xuICAgICAgICBjb25zdCBBdmdRUCA9IE51bWJlcihcbiAgICAgICAgICAgIG5ldyBUZXh0RGVjb2RlcigndXRmLTE2JykuZGVjb2RlKG1lc3NhZ2Uuc2xpY2UoMSkpXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuc2V0VmlkZW9FbmNvZGVyQXZnUVAoQXZnUVApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhhbmRsZXMgd2hlbiB0aGUgdmlkZW8gZWxlbWVudCBoYXMgYmVlbiBsb2FkZWQgd2l0aCBhIHNyY09iamVjdFxuICAgICAqL1xuICAgIGhhbmRsZVZpZGVvSW5pdGlhbGl6ZWQoKSB7XG4gICAgICAgIHRoaXMucGl4ZWxTdHJlYW1pbmcuX29uVmlkZW9Jbml0aWFsaXplZCgpO1xuXG4gICAgICAgIC8vIGVpdGhlciBhdXRvcGxheSB0aGUgdmlkZW8gb3Igc2V0IHVwIHRoZSBwbGF5IG92ZXJsYXlcbiAgICAgICAgdGhpcy5hdXRvUGxheVZpZGVvT3JTZXRVcFBsYXlPdmVybGF5KCk7XG4gICAgICAgIHRoaXMucmVzaXplUGxheWVyU3R5bGUoKTtcbiAgICAgICAgdGhpcy52aWRlb1BsYXllci51cGRhdGVWaWRlb1N0cmVhbVNpemUoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGbGFnIHNldCBpZiB0aGUgdXNlciBoYXMgUXVhbGl0eSBPd25lcnNoaXBcbiAgICAgKiBAcGFyYW0gbWVzc2FnZSAtIERvZXMgdGhlIGN1cnJlbnQgY2xpZW50IGhhdmUgUXVhbGl0eSBPd25lcnNoaXBcbiAgICAgKi9cbiAgICBvblF1YWxpdHlDb250cm9sT3duZXJzaGlwKG1lc3NhZ2U6IEFycmF5QnVmZmVyKSB7XG4gICAgICAgIGNvbnN0IHZpZXcgPSBuZXcgVWludDhBcnJheShtZXNzYWdlKTtcbiAgICAgICAgTG9nZ2VyLkxvZyhcbiAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXG4gICAgICAgICAgICAnRGF0YUNoYW5uZWxSZWNlaXZlTWVzc2FnZVR5cGUuUXVhbGl0eUNvbnRyb2xPd25lcnNoaXAnLFxuICAgICAgICAgICAgNlxuICAgICAgICApO1xuICAgICAgICB0aGlzLmlzUXVhbGl0eUNvbnRyb2xsZXIgPSBuZXcgQm9vbGVhbih2aWV3WzFdKS52YWx1ZU9mKCk7XG4gICAgICAgIExvZ2dlci5Mb2coXG4gICAgICAgICAgICBMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLFxuICAgICAgICAgICAgYFJlY2VpdmVkIHF1YWxpdHkgY29udHJvbGxlciBtZXNzYWdlLCB3aWxsIGNvbnRyb2wgcXVhbGl0eTogJHt0aGlzLmlzUXVhbGl0eUNvbnRyb2xsZXJ9YFxuICAgICAgICApO1xuICAgICAgICB0aGlzLnBpeGVsU3RyZWFtaW5nLl9vblF1YWxpdHlDb250cm9sT3duZXJzaGlwKFxuICAgICAgICAgICAgdGhpcy5pc1F1YWxpdHlDb250cm9sbGVyXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGFuZGxlcyB3aGVuIHRoZSBBZ2dyZWdhdGVkIHN0YXRzIGFyZSBDb2xsZWN0ZWRcbiAgICAgKiBAcGFyYW0gc3RhdHMgLSBBZ2dyZWdhdGVkIFN0YXRzXG4gICAgICovXG4gICAgaGFuZGxlVmlkZW9TdGF0cyhzdGF0czogQWdncmVnYXRlZFN0YXRzKSB7XG4gICAgICAgIHRoaXMucGl4ZWxTdHJlYW1pbmcuX29uVmlkZW9TdGF0cyhzdGF0cyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVG8gUmVzaXplIHRoZSBWaWRlbyBQbGF5ZXIgZWxlbWVudFxuICAgICAqL1xuICAgIHJlc2l6ZVBsYXllclN0eWxlKCk6IHZvaWQge1xuICAgICAgICB0aGlzLnZpZGVvUGxheWVyLnJlc2l6ZVBsYXllclN0eWxlKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBvdmVycmlkZGVuIGRpc2Nvbm5lY3QgbWVzc2FnZVxuICAgICAqL1xuICAgIGdldERpc2Nvbm5lY3RNZXNzYWdlT3ZlcnJpZGUoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlzY29ubmVjdE1lc3NhZ2VPdmVycmlkZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIG92ZXJyaWRlIGZvciB0aGUgZGlzY29ubmVjdCBtZXNzYWdlXG4gICAgICovXG4gICAgc2V0RGlzY29ubmVjdE1lc3NhZ2VPdmVycmlkZShtZXNzYWdlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5kaXNjb25uZWN0TWVzc2FnZU92ZXJyaWRlID0gbWVzc2FnZTtcbiAgICB9XG5cbiAgICBzZXRQcmVmZXJyZWRDb2RlYyhjb2RlYzogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMucHJlZmVycmVkQ29kZWMgPSBjb2RlYztcbiAgICAgICAgaWYgKHRoaXMucGVlckNvbm5lY3Rpb25Db250cm9sbGVyKSB7XG4gICAgICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uQ29udHJvbGxlci5wcmVmZXJyZWRDb2RlYyA9IGNvZGVjO1xuICAgICAgICAgICAgdGhpcy5wZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIudXBkYXRlQ29kZWNTZWxlY3Rpb24gPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNldFZpZGVvRW5jb2RlckF2Z1FQKGF2Z1FQOiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy52aWRlb0F2Z1FwID0gYXZnUVA7XG4gICAgICAgIHRoaXMucGl4ZWxTdHJlYW1pbmcuX29uVmlkZW9FbmNvZGVyQXZnUVAodGhpcy52aWRlb0F2Z1FwKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBlbmFibGVzL2Rpc2FibGVzIGtleWJvYXJkIGV2ZW50IGxpc3RlbmVyc1xuICAgICAqL1xuICAgIHNldEtleWJvYXJkSW5wdXRFbmFibGVkKGlzRW5hYmxlZDogYm9vbGVhbikge1xuICAgICAgICB0aGlzLmtleWJvYXJkQ29udHJvbGxlcj8udW5yZWdpc3RlcktleUJvYXJkRXZlbnRzKCk7XG4gICAgICAgIGlmIChpc0VuYWJsZWQpIHtcbiAgICAgICAgICAgIHRoaXMua2V5Ym9hcmRDb250cm9sbGVyID0gdGhpcy5pbnB1dENsYXNzZXNGYWN0b3J5LnJlZ2lzdGVyS2V5Qm9hcmQoXG4gICAgICAgICAgICAgICAgdGhpcy5jb25maWdcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBlbmFibGVzL2Rpc2FibGVzIG1vdXNlIGV2ZW50IGxpc3RlbmVyc1xuICAgICAqL1xuICAgIHNldE1vdXNlSW5wdXRFbmFibGVkKGlzRW5hYmxlZDogYm9vbGVhbikge1xuICAgICAgICB0aGlzLm1vdXNlQ29udHJvbGxlcj8udW5yZWdpc3Rlck1vdXNlRXZlbnRzKCk7XG4gICAgICAgIGlmIChpc0VuYWJsZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IG1vdXNlTW9kZSA9IHRoaXMuY29uZmlnLmlzRmxhZ0VuYWJsZWQoRmxhZ3MuSG92ZXJpbmdNb3VzZU1vZGUpXG4gICAgICAgICAgICA/IENvbnRyb2xTY2hlbWVUeXBlLkhvdmVyaW5nTW91c2VcbiAgICAgICAgICAgIDogQ29udHJvbFNjaGVtZVR5cGUuTG9ja2VkTW91c2U7XG4gICAgICAgICAgICB0aGlzLm1vdXNlQ29udHJvbGxlciA9XG4gICAgICAgICAgICB0aGlzLmlucHV0Q2xhc3Nlc0ZhY3RvcnkucmVnaXN0ZXJNb3VzZShtb3VzZU1vZGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZW5hYmxlcy9kaXNhYmxlcyB0b3VjaCBldmVudCBsaXN0ZW5lcnNcbiAgICAgKi9cbiAgICBzZXRUb3VjaElucHV0RW5hYmxlZChpc0VuYWJsZWQ6IGJvb2xlYW4pIHtcbiAgICAgICAgdGhpcy50b3VjaENvbnRyb2xsZXI/LnVucmVnaXN0ZXJUb3VjaEV2ZW50cygpO1xuICAgICAgICBpZiAoaXNFbmFibGVkKSB7XG4gICAgICAgICAgICB0aGlzLnRvdWNoQ29udHJvbGxlciA9IHRoaXMuaW5wdXRDbGFzc2VzRmFjdG9yeS5yZWdpc3RlclRvdWNoKFxuICAgICAgICAgICAgICAgIHRoaXMuY29uZmlnLmlzRmxhZ0VuYWJsZWQoRmxhZ3MuRmFrZU1vdXNlV2l0aFRvdWNoZXMpLFxuICAgICAgICAgICAgICAgIHRoaXMudmlkZW9FbGVtZW50UGFyZW50Q2xpZW50UmVjdFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGVuYWJsZXMvZGlzYWJsZXMgZ2FtZSBwYWQgZXZlbnQgbGlzdGVuZXJzXG4gICAgICovXG4gICAgc2V0R2FtZVBhZElucHV0RW5hYmxlZChpc0VuYWJsZWQ6IGJvb2xlYW4pIHtcbiAgICAgICAgdGhpcy5nYW1lUGFkQ29udHJvbGxlcj8udW5yZWdpc3RlckdhbWVQYWRFdmVudHMoKTtcbiAgICAgICAgaWYgKGlzRW5hYmxlZCkge1xuICAgICAgICAgICAgdGhpcy5nYW1lUGFkQ29udHJvbGxlciA9IHRoaXMuaW5wdXRDbGFzc2VzRmFjdG9yeS5yZWdpc3RlckdhbWVQYWQoKTtcbiAgICAgICAgICAgIHRoaXMuZ2FtZVBhZENvbnRyb2xsZXIub25HYW1lcGFkQ29ubmVjdGVkID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIudG9TdHJlYW1lckhhbmRsZXJzLmdldCgnR2FtZXBhZENvbm5lY3RlZCcpKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmdhbWVQYWRDb250cm9sbGVyLm9uR2FtZXBhZERpc2Nvbm5lY3RlZCA9IChjb250cm9sbGVySWR4OiBudW1iZXIpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnRvU3RyZWFtZXJIYW5kbGVycy5nZXQoJ0dhbWVwYWREaXNjb25uZWN0ZWQnKShbY29udHJvbGxlcklkeF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVnaXN0ZXJEYXRhQ2hhbm5lbEV2ZW50RW1pdHRlcnMoZGF0YUNoYW5uZWw6IERhdGFDaGFubmVsQ29udHJvbGxlcikge1xuICAgICAgICBkYXRhQ2hhbm5lbC5vbk9wZW4gPSAobGFiZWwsIGV2ZW50KSA9PlxuICAgICAgICAgICAgdGhpcy5waXhlbFN0cmVhbWluZy5kaXNwYXRjaEV2ZW50KFxuICAgICAgICAgICAgICAgIG5ldyBEYXRhQ2hhbm5lbE9wZW5FdmVudCh7IGxhYmVsLCBldmVudCB9KVxuICAgICAgICAgICAgKTtcbiAgICAgICAgZGF0YUNoYW5uZWwub25DbG9zZSA9IChsYWJlbCwgZXZlbnQpID0+XG4gICAgICAgICAgICB0aGlzLnBpeGVsU3RyZWFtaW5nLmRpc3BhdGNoRXZlbnQoXG4gICAgICAgICAgICAgICAgbmV3IERhdGFDaGFubmVsQ2xvc2VFdmVudCh7IGxhYmVsLCBldmVudCB9KVxuICAgICAgICAgICAgKTtcbiAgICAgICAgZGF0YUNoYW5uZWwub25FcnJvciA9IChsYWJlbCwgZXZlbnQpID0+XG4gICAgICAgICAgICB0aGlzLnBpeGVsU3RyZWFtaW5nLmRpc3BhdGNoRXZlbnQoXG4gICAgICAgICAgICAgICAgbmV3IERhdGFDaGFubmVsRXJyb3JFdmVudCh7IGxhYmVsLCBldmVudCB9KVxuICAgICAgICAgICAgKTtcbiAgICB9XG59XG4iLCIvLyBDb3B5cmlnaHQgRXBpYyBHYW1lcywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXG4vKipcbiAqIFRoZSBUeXBlcyBvZiBNZXNzYWdlcyB0aGF0IHdpbGwgYmUgcmVjZWl2ZWRcbiAqL1xuZXhwb3J0IGVudW0gTWVzc2FnZVJlY3ZUeXBlcyB7XG4gICAgQ09ORklHID0gJ2NvbmZpZycsXG4gICAgU1RSRUFNRVJfTElTVCA9ICdzdHJlYW1lckxpc3QnLFxuICAgIFBMQVlFUl9DT1VOVCA9ICdwbGF5ZXJDb3VudCcsXG4gICAgT0ZGRVIgPSAnb2ZmZXInLFxuICAgIEFOU1dFUiA9ICdhbnN3ZXInLFxuICAgIElDRV9DQU5ESURBVEUgPSAnaWNlQ2FuZGlkYXRlJyxcbiAgICBQRUVSX0RBVEFfQ0hBTk5FTFMgPSAncGVlckRhdGFDaGFubmVscycsXG4gICAgUElORyA9ICdwaW5nJyxcbiAgICBXQVJOSU5HID0gJ3dhcm5pbmcnXG59XG5cbi8qKlxuICogQ29uY3JldGUgUmVjZWl2ZWQgTWVzc2FnZSB3cmFwcGVyXG4gKi9cbmV4cG9ydCBjbGFzcyBNZXNzYWdlUmVjdiB7XG4gICAgdHlwZTogc3RyaW5nO1xuICAgIGlkOiBzdHJpbmc7XG59XG5cbi8qKlxuICogQXV0aGVudGljYXRpb24gUmVxdWlyZWQgTWVzc2FnZSB3cmFwcGVyXG4gKi9cbmV4cG9ydCBjbGFzcyBNZXNzYWdlQXV0aFJlcXVpcmVkIGV4dGVuZHMgTWVzc2FnZVJlY3Yge31cblxuLyoqXG4gKiBDb25maWcgTWVzc2FnZSBXcmFwcGVyXG4gKi9cbmV4cG9ydCBjbGFzcyBNZXNzYWdlQ29uZmlnIGV4dGVuZHMgTWVzc2FnZVJlY3Yge1xuICAgIHBlZXJDb25uZWN0aW9uT3B0aW9uczogUlRDQ29uZmlndXJhdGlvbjtcbn1cblxuLyoqXG4gKiBTdHJlYW1lciBMaXN0IE1lc3NhZ2UgV3JhcHBlclxuICovXG5leHBvcnQgY2xhc3MgTWVzc2FnZVN0cmVhbWVyTGlzdCBleHRlbmRzIE1lc3NhZ2VSZWN2IHtcbiAgICBpZHM6IHN0cmluZ1tdO1xufVxuXG4vKipcbiAqIFBsYXllciBDb3VudCBNZXNzYWdlIHdyYXBwZXJcbiAqL1xuZXhwb3J0IGNsYXNzIE1lc3NhZ2VQbGF5ZXJDb3VudCBleHRlbmRzIE1lc3NhZ2VSZWN2IHtcbiAgICBjb3VudDogbnVtYmVyO1xufVxuXG4vKipcbiAqIFdlYiBSVEMgb2ZmZXIgQW5zd2VyIE1lc3NhZ2Ugd3JhcHBlclxuICovXG5leHBvcnQgY2xhc3MgTWVzc2FnZUFuc3dlciBleHRlbmRzIE1lc3NhZ2VSZWN2IHtcbiAgICBzZHA6IHN0cmluZztcbn1cblxuLyoqXG4gKiBXZWJSVEMgc2RwIG9mZmVyIE1lc3NhZ2Ugd3JhcHBlci5cbiAqL1xuZXhwb3J0IGNsYXNzIE1lc3NhZ2VPZmZlciBleHRlbmRzIE1lc3NhZ2VSZWN2IHtcbiAgICBzZHA6IHN0cmluZztcbiAgICBzZnU/OiBib29sZWFuO1xuICAgIGRlZmF1bHRUb0hvdmVyPzogc3RyaW5nO1xufVxuXG4vKipcbiAqIEljZSBDYW5kaWRhdGUgTWVzc2FnZSB3cmFwcGVyXG4gKi9cbmV4cG9ydCBjbGFzcyBNZXNzYWdlSWNlQ2FuZGlkYXRlIGV4dGVuZHMgTWVzc2FnZVJlY3Yge1xuICAgIGNhbmRpZGF0ZTogUlRDSWNlQ2FuZGlkYXRlSW5pdDtcbn1cblxuLyoqXG4gKiBQZWVyIERhdGEgQ2hhbm5lbHMgTWVzc2FnZSB3cmFwcGVyXG4gKi9cbmV4cG9ydCBjbGFzcyBNZXNzYWdlUGVlckRhdGFDaGFubmVscyBleHRlbmRzIE1lc3NhZ2VSZWN2IHtcbiAgICByZWN2U3RyZWFtSWQ6IG51bWJlcjtcbiAgICBzZW5kU3RyZWFtSWQ6IG51bWJlcjtcbiAgICB0eXBlOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjbGFzcyBNZXNzYWdlT25TY3JlZW5LZXlib2FyZCB7XG4gICAgY29tbWFuZDogc3RyaW5nO1xuICAgIHNob3dPblNjcmVlbktleWJvYXJkOiBib29sZWFuO1xuICAgIHg6IG51bWJlcjtcbiAgICB5OiBudW1iZXI7XG59XG4iLCIvLyBDb3B5cmlnaHQgRXBpYyBHYW1lcywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tICcuLi9Mb2dnZXIvTG9nZ2VyJztcblxuLyoqXG4gKiBUaGUgU2VuZCBUeXBlcyB0aGF0IGFyZSBwdXNoZWQgZnJvbSB0aGUgc2lnbmFsaW5nIHNlcnZlclxuICovXG5leHBvcnQgZW51bSBNZXNzYWdlU2VuZFR5cGVzIHtcbiAgICBMSVNUX1NUUkVBTUVSUyA9ICdsaXN0U3RyZWFtZXJzJyxcbiAgICBTVUJTQ1JJQkUgPSAnc3Vic2NyaWJlJyxcbiAgICBVTlNVQlNDUklCRSA9ICd1bnN1YnNjcmliZScsXG4gICAgSUNFX0NBTkRJREFURSA9ICdpY2VDYW5kaWRhdGUnLFxuICAgIE9GRkVSID0gJ29mZmVyJyxcbiAgICBBTlNXRVIgPSAnYW5zd2VyJyxcbiAgICBEQVRBQ0hBTk5FTFJFUVVFU1QgPSAnZGF0YUNoYW5uZWxSZXF1ZXN0JyxcbiAgICBTRlVSRUNWREFUQUNIQU5ORUxSRUFEWSA9ICdwZWVyRGF0YUNoYW5uZWxzUmVhZHknLFxuICAgIFBPTkcgPSAncG9uZydcbn1cblxuLyoqXG4gKiBBIFdyYXBwZXIgZm9yIHRoZSBtZXNzYWdlIHRvIHNlbmQgdG8gdGhlIHNpZ25hbGluZyBzZXJ2ZXJcbiAqL1xuZXhwb3J0IGNsYXNzIE1lc3NhZ2VTZW5kIGltcGxlbWVudHMgU2VuZCB7XG4gICAgdHlwZTogc3RyaW5nO1xuICAgIHBlZXJDb25uZWN0aW9uT3B0aW9uczogb2JqZWN0O1xuXG4gICAgLyoqXG4gICAgICogVHVybnMgdGhlIHdyYXBwZXIgaW50byBhIEpTT04gU3RyaW5nXG4gICAgICogQHJldHVybnMgLSBKU09OIFN0cmluZyBvZiB0aGUgTWVzc2FnZSB0byBzZW5kXG4gICAgICovXG4gICAgcGF5bG9hZCgpIHtcbiAgICAgICAgTG9nZ2VyLkxvZyhcbiAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXG4gICAgICAgICAgICAnU2VuZGluZyA9PiBcXG4nICsgSlNPTi5zdHJpbmdpZnkodGhpcywgdW5kZWZpbmVkLCA0KSxcbiAgICAgICAgICAgIDZcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHRoaXMpO1xuICAgIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBTZW5kIHtcbiAgICAvKipcbiAgICAgKiBUdXJucyB0aGUgd3JhcHBlciBpbnRvIGEgSlNPTiBTdHJpbmdcbiAgICAgKiBAcmV0dXJucyAtIEpTT04gU3RyaW5nIG9mIHRoZSBNZXNzYWdlIHRvIHNlbmRcbiAgICAgKi9cbiAgICBwYXlsb2FkOiAoKSA9PiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjbGFzcyBNZXNzYWdlTGlzdFN0cmVhbWVycyBleHRlbmRzIE1lc3NhZ2VTZW5kIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy50eXBlID0gTWVzc2FnZVNlbmRUeXBlcy5MSVNUX1NUUkVBTUVSUztcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBNZXNzYWdlU3Vic2NyaWJlIGV4dGVuZHMgTWVzc2FnZVNlbmQge1xuICAgIHN0cmVhbWVySWQ6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKHN0cmVhbWVyaWQ6IHN0cmluZykge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnR5cGUgPSBNZXNzYWdlU2VuZFR5cGVzLlNVQlNDUklCRTtcbiAgICAgICAgdGhpcy5zdHJlYW1lcklkID0gc3RyZWFtZXJpZDtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBNZXNzYWdlVW5zdWJzY3JpYmUgZXh0ZW5kcyBNZXNzYWdlU2VuZCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMudHlwZSA9IE1lc3NhZ2VTZW5kVHlwZXMuVU5TVUJTQ1JJQkU7XG4gICAgfVxufVxuXG4vKipcbiAqIEluc3RhbmNlIFJlcXVlc3QgTWVzc2FnZSBXcmFwcGVyXG4gKi9cbmV4cG9ydCBjbGFzcyBNZXNzYWdlUG9uZyBleHRlbmRzIE1lc3NhZ2VTZW5kIHtcbiAgICB0aW1lOiBudW1iZXI7XG5cbiAgICBjb25zdHJ1Y3Rvcih0aW1lOiBudW1iZXIpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy50eXBlID0gTWVzc2FnZVNlbmRUeXBlcy5QT05HO1xuICAgICAgICB0aGlzLnRpbWUgPSB0aW1lO1xuICAgIH1cbn1cblxuLyoqXG4gKiAgV2ViIFJUQyBPZmZlciBtZXNzYWdlIHdyYXBwZXJcbiAqL1xuZXhwb3J0IGNsYXNzIE1lc3NhZ2VXZWJSVENPZmZlciBleHRlbmRzIE1lc3NhZ2VTZW5kIHtcbiAgICBzZHA6IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSBvZmZlciAtIEdlbmVyYXRlZCBXZWIgUlRDIE9mZmVyXG4gICAgICovXG4gICAgY29uc3RydWN0b3Iob2ZmZXI/OiBSVENTZXNzaW9uRGVzY3JpcHRpb25Jbml0KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMudHlwZSA9IE1lc3NhZ2VTZW5kVHlwZXMuT0ZGRVI7XG5cbiAgICAgICAgaWYgKG9mZmVyKSB7XG4gICAgICAgICAgICB0aGlzLnR5cGUgPSBvZmZlci50eXBlIGFzIE1lc3NhZ2VTZW5kVHlwZXM7XG4gICAgICAgICAgICB0aGlzLnNkcCA9IG9mZmVyLnNkcDtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLyoqXG4gKiAgV2ViIFJUQyBBbnN3ZXIgbWVzc2FnZSB3cmFwcGVyXG4gKi9cbmV4cG9ydCBjbGFzcyBNZXNzYWdlV2ViUlRDQW5zd2VyIGV4dGVuZHMgTWVzc2FnZVNlbmQge1xuICAgIHNkcDogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIGFuc3dlciAtIEdlbmVyYXRlZCBXZWIgUlRDIE9mZmVyXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoYW5zd2VyPzogUlRDU2Vzc2lvbkRlc2NyaXB0aW9uSW5pdCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnR5cGUgPSBNZXNzYWdlU2VuZFR5cGVzLkFOU1dFUjtcblxuICAgICAgICBpZiAoYW5zd2VyKSB7XG4gICAgICAgICAgICB0aGlzLnR5cGUgPSBhbnN3ZXIudHlwZSBhcyBNZXNzYWdlU2VuZFR5cGVzO1xuICAgICAgICAgICAgdGhpcy5zZHAgPSBhbnN3ZXIuc2RwO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vKipcbiAqICBXZWIgUlRDIERhdGEgY2hhbm5lbCByZXF1ZXN0IG1lc3NhZ2Ugd3JhcHBlclxuICovXG5leHBvcnQgY2xhc3MgTWVzc2FnZVdlYlJUQ0RhdGFjaGFubmVsUmVxdWVzdCBleHRlbmRzIE1lc3NhZ2VTZW5kIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy50eXBlID0gTWVzc2FnZVNlbmRUeXBlcy5EQVRBQ0hBTk5FTFJFUVVFU1Q7XG4gICAgfVxufVxuXG4vKipcbiAqICBXZWIgUlRDIFNGVSBEYXRhIGNoYW5uZWwgcmVhZHkgbWVzc2FnZSB3cmFwcGVyXG4gKi9cbmV4cG9ydCBjbGFzcyBNZXNzYWdlU0ZVUmVjdkRhdGFDaGFubmVsUmVhZHkgZXh0ZW5kcyBNZXNzYWdlU2VuZCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMudHlwZSA9IE1lc3NhZ2VTZW5kVHlwZXMuU0ZVUkVDVkRBVEFDSEFOTkVMUkVBRFk7XG4gICAgfVxufVxuXG4vKipcbiAqIFJUQyBJY2UgQ2FuZGlkYXRlIFdyYXBwZXJcbiAqL1xuZXhwb3J0IGNsYXNzIE1lc3NhZ2VJY2VDYW5kaWRhdGUgaW1wbGVtZW50cyBTZW5kIHtcbiAgICBjYW5kaWRhdGU6IFJUQ0ljZUNhbmRpZGF0ZTtcbiAgICB0eXBlOiBNZXNzYWdlU2VuZFR5cGVzO1xuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIGNhbmRpZGF0ZSAtIFJUQyBJY2UgQ2FuZGlkYXRlXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoY2FuZGlkYXRlOiBSVENJY2VDYW5kaWRhdGUpIHtcbiAgICAgICAgdGhpcy50eXBlID0gTWVzc2FnZVNlbmRUeXBlcy5JQ0VfQ0FORElEQVRFO1xuICAgICAgICB0aGlzLmNhbmRpZGF0ZSA9IGNhbmRpZGF0ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUdXJucyB0aGUgd3JhcHBlciBpbnRvIGEgSlNPTiBTdHJpbmdcbiAgICAgKiBAcmV0dXJucyAtIEpTT04gU3RyaW5nIG9mIHRoZSBNZXNzYWdlIHRvIHNlbmRcbiAgICAgKi9cbiAgICBwYXlsb2FkKCkge1xuICAgICAgICBMb2dnZXIuTG9nKFxuICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcbiAgICAgICAgICAgICdTZW5kaW5nID0+IFxcbicgKyBKU09OLnN0cmluZ2lmeSh0aGlzLCB1bmRlZmluZWQsIDQpLFxuICAgICAgICAgICAgNlxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodGhpcyk7XG4gICAgfVxufVxuIiwiLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSAnLi4vTG9nZ2VyL0xvZ2dlcic7XG5pbXBvcnQgeyBXZWJTb2NrZXRDb250cm9sbGVyIH0gZnJvbSAnLi9XZWJTb2NrZXRDb250cm9sbGVyJztcbmltcG9ydCB7XG4gICAgTWVzc2FnZVJlY3ZUeXBlcyxcbiAgICBNZXNzYWdlQ29uZmlnLFxuICAgIE1lc3NhZ2VTdHJlYW1lckxpc3QsXG4gICAgTWVzc2FnZVBsYXllckNvdW50LFxuICAgIE1lc3NhZ2VBbnN3ZXIsXG4gICAgTWVzc2FnZU9mZmVyLFxuICAgIE1lc3NhZ2VJY2VDYW5kaWRhdGUsXG4gICAgTWVzc2FnZVBlZXJEYXRhQ2hhbm5lbHNcbn0gZnJvbSAnLi9NZXNzYWdlUmVjZWl2ZSc7XG5pbXBvcnQgeyBNZXNzYWdlUG9uZyB9IGZyb20gJy4vTWVzc2FnZVNlbmQnO1xuXG4vKipcbiAqIFNpZ25hbGxpbmcgcHJvdG9jb2wgZm9yIGhhbmRsaW5nIG1lc3NhZ2VzIGZyb20gdGhlIHNpZ25hbGxpbmcgc2VydmVyLlxuICovXG5leHBvcnQgY2xhc3MgU2lnbmFsbGluZ1Byb3RvY29sIHtcbiAgICBwcml2YXRlIEZyb21VRU1lc3NhZ2VIYW5kbGVyczogTWFwPHN0cmluZywgKHBheWxvYWQ6IHN0cmluZykgPT4gdm9pZD47XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5Gcm9tVUVNZXNzYWdlSGFuZGxlcnMgPSBuZXcgTWFwPFxuICAgICAgICAgICAgc3RyaW5nLFxuICAgICAgICAgICAgKHBheWxvYWQ6IHN0cmluZykgPT4gdm9pZFxuICAgICAgICA+KCk7XG4gICAgfVxuXG4gICAgYWRkTWVzc2FnZUhhbmRsZXIoXG4gICAgICAgIG1lc3NhZ2VJZDogc3RyaW5nLFxuICAgICAgICBtZXNzYWdlSGFuZGxlcjogKHBheWxvYWQ6IHN0cmluZykgPT4gdm9pZFxuICAgICkge1xuICAgICAgICB0aGlzLkZyb21VRU1lc3NhZ2VIYW5kbGVycy5zZXQobWVzc2FnZUlkLCBtZXNzYWdlSGFuZGxlcik7XG4gICAgfVxuXG4gICAgaGFuZGxlTWVzc2FnZShtZXNzYWdlSWQ6IHN0cmluZywgbWVzc2FnZURhdGE6IHN0cmluZykge1xuICAgICAgICBpZiAodGhpcy5Gcm9tVUVNZXNzYWdlSGFuZGxlcnMuaGFzKG1lc3NhZ2VJZCkpIHtcbiAgICAgICAgICAgIHRoaXMuRnJvbVVFTWVzc2FnZUhhbmRsZXJzLmdldChtZXNzYWdlSWQpKG1lc3NhZ2VEYXRhKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIExvZ2dlci5FcnJvcihcbiAgICAgICAgICAgICAgICBMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLFxuICAgICAgICAgICAgICAgIGBNZXNzYWdlIHR5cGUgb2YgJHttZXNzYWdlSWR9IGRvZXMgbm90IGhhdmUgYSBtZXNzYWdlIGhhbmRsZXIgcmVnaXN0ZXJlZCBvbiB0aGUgZnJvbnRlbmQgLSBpZ25vcmluZyBtZXNzYWdlLmBcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXR1cCBhbnkgZGVmYXVsdCBzaWduYWxsaW5nIG1lc3NhZ2UgaGFuZGxpbmcsIHRoZXNlIGNhbiBiZSBvdmVycmlkZGVuIG9yIGFkZGl0aW9uYWwgaGFuZGxlcnMgYWRkZWQgd2l0aCBgYWRkTWVzc2FnZUhhbmRsZXJgLlxuICAgICAqIEBwYXJhbSB3ZWJzb2NrZXRDb250cm9sbGVyIFRoZSBjb250cm9sbGVyIHRvIHNldHVwIHRoZXNlIGhhbmRsZXJzIG9uLlxuICAgICAqL1xuICAgIHN0YXRpYyBzZXR1cERlZmF1bHRIYW5kbGVycyh3ZWJzb2NrZXRDb250cm9sbGVyOiBXZWJTb2NrZXRDb250cm9sbGVyKSB7XG4gICAgICAgIC8vIFBJTkdcbiAgICAgICAgd2Vic29ja2V0Q29udHJvbGxlci5zaWduYWxsaW5nUHJvdG9jb2wuYWRkTWVzc2FnZUhhbmRsZXIoXG4gICAgICAgICAgICBNZXNzYWdlUmVjdlR5cGVzLlBJTkcsXG4gICAgICAgICAgICAocGluZ1BheWxvYWQ6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgIC8vIHNlbmQgb3VyIHBvbmcgcGF5bG9hZCBiYWNrIHRvIHRoZSBzaWduYWxsaW5nIHNlcnZlclxuICAgICAgICAgICAgICAgIGNvbnN0IHBvbmdQYXlsb2FkID0gbmV3IE1lc3NhZ2VQb25nKFxuICAgICAgICAgICAgICAgICAgICBuZXcgRGF0ZSgpLmdldFRpbWUoKVxuICAgICAgICAgICAgICAgICkucGF5bG9hZCgpO1xuICAgICAgICAgICAgICAgIExvZ2dlci5Mb2coXG4gICAgICAgICAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXG4gICAgICAgICAgICAgICAgICAgIE1lc3NhZ2VSZWN2VHlwZXMuUElORyArICc6ICcgKyBwaW5nUGF5bG9hZCxcbiAgICAgICAgICAgICAgICAgICAgNlxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgd2Vic29ja2V0Q29udHJvbGxlci53ZWJTb2NrZXQuc2VuZChwb25nUGF5bG9hZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG5cbiAgICAgICAgLy8gQ09ORklHXG4gICAgICAgIHdlYnNvY2tldENvbnRyb2xsZXIuc2lnbmFsbGluZ1Byb3RvY29sLmFkZE1lc3NhZ2VIYW5kbGVyKFxuICAgICAgICAgICAgTWVzc2FnZVJlY3ZUeXBlcy5DT05GSUcsXG4gICAgICAgICAgICAoY29uZmlnUGF5bG9hZDogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICAgICAgTG9nZ2VyLkxvZyhMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBNZXNzYWdlUmVjdlR5cGVzLkNPTkZJRywgNik7XG4gICAgICAgICAgICAgICAgY29uc3QgY29uZmlnOiBNZXNzYWdlQ29uZmlnID0gSlNPTi5wYXJzZShjb25maWdQYXlsb2FkKTtcbiAgICAgICAgICAgICAgICB3ZWJzb2NrZXRDb250cm9sbGVyLm9uQ29uZmlnKGNvbmZpZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG5cbiAgICAgICAgLy8gU1RSRUFNRVJfTElTVFxuICAgICAgICB3ZWJzb2NrZXRDb250cm9sbGVyLnNpZ25hbGxpbmdQcm90b2NvbC5hZGRNZXNzYWdlSGFuZGxlcihcbiAgICAgICAgICAgIE1lc3NhZ2VSZWN2VHlwZXMuU1RSRUFNRVJfTElTVCxcbiAgICAgICAgICAgIChsaXN0UGF5bG9hZDogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICAgICAgTG9nZ2VyLkxvZyhcbiAgICAgICAgICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcbiAgICAgICAgICAgICAgICAgICAgTWVzc2FnZVJlY3ZUeXBlcy5TVFJFQU1FUl9MSVNULFxuICAgICAgICAgICAgICAgICAgICA2XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBjb25zdCBzdHJlYW1lckxpc3Q6IE1lc3NhZ2VTdHJlYW1lckxpc3QgPVxuICAgICAgICAgICAgICAgICAgICBKU09OLnBhcnNlKGxpc3RQYXlsb2FkKTtcbiAgICAgICAgICAgICAgICB3ZWJzb2NrZXRDb250cm9sbGVyLm9uU3RyZWFtZXJMaXN0KHN0cmVhbWVyTGlzdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG5cbiAgICAgICAgLy8gUExBWUVSX0NPVU5UXG4gICAgICAgIHdlYnNvY2tldENvbnRyb2xsZXIuc2lnbmFsbGluZ1Byb3RvY29sLmFkZE1lc3NhZ2VIYW5kbGVyKFxuICAgICAgICAgICAgTWVzc2FnZVJlY3ZUeXBlcy5QTEFZRVJfQ09VTlQsXG4gICAgICAgICAgICAocGxheWVyQ291bnRQYXlsb2FkOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgICAgICBMb2dnZXIuTG9nKFxuICAgICAgICAgICAgICAgICAgICBMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLFxuICAgICAgICAgICAgICAgICAgICBNZXNzYWdlUmVjdlR5cGVzLlBMQVlFUl9DT1VOVCxcbiAgICAgICAgICAgICAgICAgICAgNlxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgY29uc3QgcGxheWVyQ291bnQ6IE1lc3NhZ2VQbGF5ZXJDb3VudCA9XG4gICAgICAgICAgICAgICAgICAgIEpTT04ucGFyc2UocGxheWVyQ291bnRQYXlsb2FkKTtcbiAgICAgICAgICAgICAgICBMb2dnZXIuTG9nKFxuICAgICAgICAgICAgICAgICAgICBMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLFxuICAgICAgICAgICAgICAgICAgICAnUGxheWVyIENvdW50OiAnICsgcGxheWVyQ291bnQuY291bnQsXG4gICAgICAgICAgICAgICAgICAgIDZcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuXG4gICAgICAgIC8vIEFOU1dFUlxuICAgICAgICB3ZWJzb2NrZXRDb250cm9sbGVyLnNpZ25hbGxpbmdQcm90b2NvbC5hZGRNZXNzYWdlSGFuZGxlcihcbiAgICAgICAgICAgIE1lc3NhZ2VSZWN2VHlwZXMuQU5TV0VSLFxuICAgICAgICAgICAgKGFuc3dlclBheWxvYWQ6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgIC8vIHNlbmQgb3VyIHBvbmcgcGF5bG9hZCBiYWNrIHRvIHRoZSBzaWduYWxsaW5nIHNlcnZlclxuICAgICAgICAgICAgICAgIExvZ2dlci5Mb2coTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgTWVzc2FnZVJlY3ZUeXBlcy5BTlNXRVIsIDYpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGFuc3dlcjogTWVzc2FnZUFuc3dlciA9IEpTT04ucGFyc2UoYW5zd2VyUGF5bG9hZCk7XG4gICAgICAgICAgICAgICAgd2Vic29ja2V0Q29udHJvbGxlci5vbldlYlJ0Y0Fuc3dlcihhbnN3ZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuXG4gICAgICAgIC8vIE9GRkVSXG4gICAgICAgIHdlYnNvY2tldENvbnRyb2xsZXIuc2lnbmFsbGluZ1Byb3RvY29sLmFkZE1lc3NhZ2VIYW5kbGVyKFxuICAgICAgICAgICAgTWVzc2FnZVJlY3ZUeXBlcy5PRkZFUixcbiAgICAgICAgICAgIChvZmZlclBheWxvYWQ6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgIC8vIHNlbmQgb3VyIHBvbmcgcGF5bG9hZCBiYWNrIHRvIHRoZSBzaWduYWxsaW5nIHNlcnZlclxuICAgICAgICAgICAgICAgIExvZ2dlci5Mb2coTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgTWVzc2FnZVJlY3ZUeXBlcy5PRkZFUiwgNik7XG4gICAgICAgICAgICAgICAgY29uc3Qgb2ZmZXI6IE1lc3NhZ2VPZmZlciA9IEpTT04ucGFyc2Uob2ZmZXJQYXlsb2FkKTtcbiAgICAgICAgICAgICAgICB3ZWJzb2NrZXRDb250cm9sbGVyLm9uV2ViUnRjT2ZmZXIob2ZmZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuXG4gICAgICAgIC8vIElDRSBDQU5ESURBVEVcbiAgICAgICAgd2Vic29ja2V0Q29udHJvbGxlci5zaWduYWxsaW5nUHJvdG9jb2wuYWRkTWVzc2FnZUhhbmRsZXIoXG4gICAgICAgICAgICBNZXNzYWdlUmVjdlR5cGVzLklDRV9DQU5ESURBVEUsXG4gICAgICAgICAgICAoaWNlQ2FuZGlkYXRlUGF5bG9hZDogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gc2VuZCBvdXIgcG9uZyBwYXlsb2FkIGJhY2sgdG8gdGhlIHNpZ25hbGxpbmcgc2VydmVyXG4gICAgICAgICAgICAgICAgTG9nZ2VyLkxvZyhcbiAgICAgICAgICAgICAgICAgICAgTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSxcbiAgICAgICAgICAgICAgICAgICAgTWVzc2FnZVJlY3ZUeXBlcy5JQ0VfQ0FORElEQVRFLFxuICAgICAgICAgICAgICAgICAgICA2XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBjb25zdCBpY2VDYW5kaWRhdGU6IE1lc3NhZ2VJY2VDYW5kaWRhdGUgPVxuICAgICAgICAgICAgICAgICAgICBKU09OLnBhcnNlKGljZUNhbmRpZGF0ZVBheWxvYWQpO1xuICAgICAgICAgICAgICAgIHdlYnNvY2tldENvbnRyb2xsZXIub25JY2VDYW5kaWRhdGUoaWNlQ2FuZGlkYXRlLmNhbmRpZGF0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG5cbiAgICAgICAgLy8gV0FSTklOR1xuICAgICAgICB3ZWJzb2NrZXRDb250cm9sbGVyLnNpZ25hbGxpbmdQcm90b2NvbC5hZGRNZXNzYWdlSGFuZGxlcihcbiAgICAgICAgICAgIE1lc3NhZ2VSZWN2VHlwZXMuV0FSTklORyxcbiAgICAgICAgICAgICh3YXJuaW5nUGF5bG9hZDogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICAgICAgTG9nZ2VyLldhcm5pbmcoXG4gICAgICAgICAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXG4gICAgICAgICAgICAgICAgICAgIGBXYXJuaW5nIHJlY2VpdmVkOiAke3dhcm5pbmdQYXlsb2FkfWBcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuXG4gICAgICAgIC8vIFBFRVIgREFUQSBDSEFOTkVMU1xuICAgICAgICB3ZWJzb2NrZXRDb250cm9sbGVyLnNpZ25hbGxpbmdQcm90b2NvbC5hZGRNZXNzYWdlSGFuZGxlcihcbiAgICAgICAgICAgIE1lc3NhZ2VSZWN2VHlwZXMuUEVFUl9EQVRBX0NIQU5ORUxTLFxuICAgICAgICAgICAgKHBlZXJEYXRhQ2hhbm5lbHNQYXlsb2FkOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgICAgICBMb2dnZXIuTG9nKFxuICAgICAgICAgICAgICAgICAgICBMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLFxuICAgICAgICAgICAgICAgICAgICBNZXNzYWdlUmVjdlR5cGVzLlBFRVJfREFUQV9DSEFOTkVMUyxcbiAgICAgICAgICAgICAgICAgICAgNlxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgY29uc3QgcGVlckRhdGFDaGFubmVsczogTWVzc2FnZVBlZXJEYXRhQ2hhbm5lbHMgPSBKU09OLnBhcnNlKFxuICAgICAgICAgICAgICAgICAgICBwZWVyRGF0YUNoYW5uZWxzUGF5bG9hZFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgd2Vic29ja2V0Q29udHJvbGxlci5vbldlYlJ0Y1BlZXJEYXRhQ2hhbm5lbHMocGVlckRhdGFDaGFubmVscyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxufVxuIiwiLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cblxuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSAnLi4vTG9nZ2VyL0xvZ2dlcic7XG5pbXBvcnQgKiBhcyBNZXNzYWdlUmVjZWl2ZSBmcm9tICcuL01lc3NhZ2VSZWNlaXZlJztcbmltcG9ydCAqIGFzIE1lc3NhZ2VTZW5kIGZyb20gJy4vTWVzc2FnZVNlbmQnO1xuaW1wb3J0IHsgU2lnbmFsbGluZ1Byb3RvY29sIH0gZnJvbSAnLi9TaWduYWxsaW5nUHJvdG9jb2wnO1xuXG4vLyBkZWNsYXJlIHRoZSBuZXcgbWV0aG9kIGZvciB0aGUgd2Vic29ja2V0IGludGVyZmFjZVxuZGVjbGFyZSBnbG9iYWwge1xuICAgIGludGVyZmFjZSBXZWJTb2NrZXQge1xuICAgICAgICBvbm1lc3NhZ2ViaW5hcnk/KGV2ZW50PzogTWVzc2FnZUV2ZW50KTogdm9pZDtcbiAgICB9XG59XG5cbi8qKlxuICogVGhlIGNvbnRyb2xsZXIgZm9yIHRoZSBXZWJTb2NrZXQgYW5kIGFsbCBhc3NvY2lhdGVkIG1ldGhvZHNcbiAqL1xuZXhwb3J0IGNsYXNzIFdlYlNvY2tldENvbnRyb2xsZXIge1xuICAgIFdTX09QRU5fU1RBVEUgPSAxO1xuICAgIHdlYlNvY2tldDogV2ViU29ja2V0O1xuICAgIG9uT3BlbjogRXZlbnRUYXJnZXQ7XG4gICAgb25DbG9zZTogRXZlbnRUYXJnZXQ7XG4gICAgc2lnbmFsbGluZ1Byb3RvY29sOiBTaWduYWxsaW5nUHJvdG9jb2w7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5vbk9wZW4gPSBuZXcgRXZlbnRUYXJnZXQoKTtcbiAgICAgICAgdGhpcy5vbkNsb3NlID0gbmV3IEV2ZW50VGFyZ2V0KCk7XG4gICAgICAgIHRoaXMuc2lnbmFsbGluZ1Byb3RvY29sID0gbmV3IFNpZ25hbGxpbmdQcm90b2NvbCgpO1xuICAgICAgICBTaWduYWxsaW5nUHJvdG9jb2wuc2V0dXBEZWZhdWx0SGFuZGxlcnModGhpcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29ubmVjdCB0byB0aGUgc2lnbmFsaW5nIHNlcnZlclxuICAgICAqIEBwYXJhbSBjb25uZWN0aW9uVVJMIC0gVGhlIEFkZHJlc3Mgb2YgdGhlIHNpZ25hbGluZyBzZXJ2ZXJcbiAgICAgKiBAcmV0dXJucyAtIElmIHRoZXJlIGlzIGEgY29ubmVjdGlvblxuICAgICAqL1xuICAgIGNvbm5lY3QoY29ubmVjdGlvblVSTDogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIExvZ2dlci5Mb2coTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgY29ubmVjdGlvblVSTCwgNik7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLndlYlNvY2tldCA9IG5ldyBXZWJTb2NrZXQoY29ubmVjdGlvblVSTCk7XG4gICAgICAgICAgICB0aGlzLndlYlNvY2tldC5vbm9wZW4gPSAoZXZlbnQpID0+IHRoaXMuaGFuZGxlT25PcGVuKGV2ZW50KTtcbiAgICAgICAgICAgIHRoaXMud2ViU29ja2V0Lm9uZXJyb3IgPSAoKSA9PiB0aGlzLmhhbmRsZU9uRXJyb3IoKTtcbiAgICAgICAgICAgIHRoaXMud2ViU29ja2V0Lm9uY2xvc2UgPSAoZXZlbnQpID0+IHRoaXMuaGFuZGxlT25DbG9zZShldmVudCk7XG4gICAgICAgICAgICB0aGlzLndlYlNvY2tldC5vbm1lc3NhZ2UgPSAoZXZlbnQpID0+IHRoaXMuaGFuZGxlT25NZXNzYWdlKGV2ZW50KTtcbiAgICAgICAgICAgIHRoaXMud2ViU29ja2V0Lm9ubWVzc2FnZWJpbmFyeSA9IChldmVudCkgPT5cbiAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZU9uTWVzc2FnZUJpbmFyeShldmVudCk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIExvZ2dlci5FcnJvcihlcnJvciwgZXJyb3IpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGFuZGxlcyB3aGF0IGhhcHBlbnMgd2hlbiBhIG1lc3NhZ2UgaXMgcmVjZWl2ZWQgaW4gYmluYXJ5IGZvcm1cbiAgICAgKiBAcGFyYW0gZXZlbnQgLSBNZXNzYWdlIFJlY2VpdmVkXG4gICAgICovXG4gICAgaGFuZGxlT25NZXNzYWdlQmluYXJ5KGV2ZW50OiBNZXNzYWdlRXZlbnQpIHtcbiAgICAgICAgLy8gaWYgdGhlIGV2ZW50IGlzIGVtcHR5IHJldHVyblxuICAgICAgICBpZiAoIWV2ZW50IHx8ICFldmVudC5kYXRhKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBoYW5kbGUgdGhlIGJpbmFyeSBhbmQgdGhlbiBoYW5kbGUgdGhlIG1lc3NhZ2VcbiAgICAgICAgZXZlbnQuZGF0YVxuICAgICAgICAgICAgLnRleHQoKVxuICAgICAgICAgICAgLnRoZW4oKG1lc3NhZ2VTdHJpbmc6IHVua25vd24pID0+IHtcbiAgICAgICAgICAgICAgICAvLyBidWlsZCBhIG5ldyBtZXNzYWdlXG4gICAgICAgICAgICAgICAgY29uc3QgY29uc3RydWN0ZWRNZXNzYWdlID0gbmV3IE1lc3NhZ2VFdmVudChcbiAgICAgICAgICAgICAgICAgICAgJ21lc3NhZ2VGcm9tQmluYXJ5JyxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogbWVzc2FnZVN0cmluZ1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgIC8vIHNlbmQgdGhlIG5ldyBzdHJpbmdpZmllZCBldmVudCBiYWNrIGludG8gYG9ubWVzc2FnZWBcbiAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZU9uTWVzc2FnZShjb25zdHJ1Y3RlZE1lc3NhZ2UpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5jYXRjaCgoZXJyb3I6IEVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgTG9nZ2VyLkVycm9yKFxuICAgICAgICAgICAgICAgICAgICBMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLFxuICAgICAgICAgICAgICAgICAgICBgRmFpbGVkIHRvIHBhcnNlIGJpbmFyeSBibG9iIGZyb20gd2Vic29ja2V0LCByZWFzb246ICR7ZXJyb3J9YFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIYW5kbGVzIHdoYXQgaGFwcGVucyB3aGVuIGEgbWVzc2FnZSBpcyByZWNlaXZlZFxuICAgICAqIEBwYXJhbSBldmVudCAtIE1lc3NhZ2UgUmVjZWl2ZWRcbiAgICAgKi9cbiAgICBoYW5kbGVPbk1lc3NhZ2UoZXZlbnQ6IE1lc3NhZ2VFdmVudCkge1xuICAgICAgICAvLyBDaGVjayBpZiB3ZWJzb2NrZXQgbWVzc2FnZSBpcyBiaW5hcnksIGlmIHNvLCBzdHJpbmdpZnkgaXQuXG4gICAgICAgIGlmIChldmVudC5kYXRhICYmIGV2ZW50LmRhdGEgaW5zdGFuY2VvZiBCbG9iKSB7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZU9uTWVzc2FnZUJpbmFyeShldmVudCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBtZXNzYWdlOiBNZXNzYWdlUmVjZWl2ZS5NZXNzYWdlUmVjdiA9IEpTT04ucGFyc2UoZXZlbnQuZGF0YSk7XG4gICAgICAgIExvZ2dlci5Mb2coXG4gICAgICAgICAgICBMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLFxuICAgICAgICAgICAgJ3JlY2VpdmVkID0+IFxcbicgK1xuICAgICAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KEpTT04ucGFyc2UoZXZlbnQuZGF0YSksIHVuZGVmaW5lZCwgNCksXG4gICAgICAgICAgICA2XG4gICAgICAgICk7XG5cbiAgICAgICAgLy8gU2VuZCB0byBvdXIgc2lnbmFsbGluZyBwcm90b2NvbCB0byBoYW5kbGUgdGhlIGluY29taW5nIG1lc3NhZ2VcbiAgICAgICAgdGhpcy5zaWduYWxsaW5nUHJvdG9jb2wuaGFuZGxlTWVzc2FnZShtZXNzYWdlLnR5cGUsIGV2ZW50LmRhdGEpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhhbmRsZXMgd2hlbiB0aGUgV2Vic29ja2V0IGlzIG9wZW5lZFxuICAgICAqIEBwYXJhbSBldmVudCAtIE5vdCBVc2VkXG4gICAgICovXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuICAgIGhhbmRsZU9uT3BlbihldmVudDogRXZlbnQpIHtcbiAgICAgICAgTG9nZ2VyLkxvZyhcbiAgICAgICAgICAgIExvZ2dlci5HZXRTdGFja1RyYWNlKCksXG4gICAgICAgICAgICAnQ29ubmVjdGVkIHRvIHRoZSBzaWduYWxsaW5nIHNlcnZlciB2aWEgV2ViU29ja2V0JyxcbiAgICAgICAgICAgIDZcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5vbk9wZW4uZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ29wZW4nKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGFuZGxlcyB3aGVuIHRoZXJlIGlzIGFuIGVycm9yIG9uIHRoZSB3ZWJzb2NrZXRcbiAgICAgKiBAcGFyYW0gZXZlbnQgLSBFcnJvciBQYXlsb2FkXG4gICAgICovXG4gICAgaGFuZGxlT25FcnJvcigpIHtcbiAgICAgICAgTG9nZ2VyLkVycm9yKExvZ2dlci5HZXRTdGFja1RyYWNlKCksICdXZWJTb2NrZXQgZXJyb3InKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIYW5kbGVzIHdoZW4gdGhlIFdlYnNvY2tldCBpcyBjbG9zZWRcbiAgICAgKiBAcGFyYW0gZXZlbnQgLSBDbG9zZSBFdmVudFxuICAgICAqL1xuICAgIGhhbmRsZU9uQ2xvc2UoZXZlbnQ6IENsb3NlRXZlbnQpIHtcbiAgICAgICAgdGhpcy5vbldlYlNvY2tldE9uY2xvc2VPdmVybGF5TWVzc2FnZShldmVudCk7XG4gICAgICAgIExvZ2dlci5Mb2coXG4gICAgICAgICAgICBMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLFxuICAgICAgICAgICAgJ0Rpc2Nvbm5lY3RlZCB0byB0aGUgc2lnbmFsbGluZyBzZXJ2ZXIgdmlhIFdlYlNvY2tldDogJyArXG4gICAgICAgICAgICAgICAgSlNPTi5zdHJpbmdpZnkoZXZlbnQuY29kZSkgK1xuICAgICAgICAgICAgICAgICcgLSAnICtcbiAgICAgICAgICAgICAgICBldmVudC5yZWFzb25cbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5vbkNsb3NlLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCdjbG9zZScpKTtcbiAgICB9XG5cbiAgICByZXF1ZXN0U3RyZWFtZXJMaXN0KCkge1xuICAgICAgICBjb25zdCBwYXlsb2FkID0gbmV3IE1lc3NhZ2VTZW5kLk1lc3NhZ2VMaXN0U3RyZWFtZXJzKCk7XG4gICAgICAgIHRoaXMud2ViU29ja2V0LnNlbmQocGF5bG9hZC5wYXlsb2FkKCkpO1xuICAgIH1cblxuICAgIHNlbmRTdWJzY3JpYmUoc3RyZWFtZXJpZDogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IHBheWxvYWQgPSBuZXcgTWVzc2FnZVNlbmQuTWVzc2FnZVN1YnNjcmliZShzdHJlYW1lcmlkKTtcbiAgICAgICAgdGhpcy53ZWJTb2NrZXQuc2VuZChwYXlsb2FkLnBheWxvYWQoKSk7XG4gICAgfVxuXG4gICAgc2VuZFVuc3Vic2NyaWJlKCkge1xuICAgICAgICBjb25zdCBwYXlsb2FkID0gbmV3IE1lc3NhZ2VTZW5kLk1lc3NhZ2VVbnN1YnNjcmliZSgpO1xuICAgICAgICB0aGlzLndlYlNvY2tldC5zZW5kKHBheWxvYWQucGF5bG9hZCgpKTtcbiAgICB9XG5cbiAgICBzZW5kV2ViUnRjT2ZmZXIob2ZmZXI6IFJUQ1Nlc3Npb25EZXNjcmlwdGlvbkluaXQpIHtcbiAgICAgICAgY29uc3QgcGF5bG9hZCA9IG5ldyBNZXNzYWdlU2VuZC5NZXNzYWdlV2ViUlRDT2ZmZXIob2ZmZXIpO1xuICAgICAgICB0aGlzLndlYlNvY2tldC5zZW5kKHBheWxvYWQucGF5bG9hZCgpKTtcbiAgICB9XG5cbiAgICBzZW5kV2ViUnRjQW5zd2VyKGFuc3dlcjogUlRDU2Vzc2lvbkRlc2NyaXB0aW9uSW5pdCkge1xuICAgICAgICBjb25zdCBwYXlsb2FkID0gbmV3IE1lc3NhZ2VTZW5kLk1lc3NhZ2VXZWJSVENBbnN3ZXIoYW5zd2VyKTtcbiAgICAgICAgdGhpcy53ZWJTb2NrZXQuc2VuZChwYXlsb2FkLnBheWxvYWQoKSk7XG4gICAgfVxuXG4gICAgc2VuZFdlYlJ0Y0RhdGFjaGFubmVsUmVxdWVzdCgpIHtcbiAgICAgICAgY29uc3QgcGF5bG9hZCA9IG5ldyBNZXNzYWdlU2VuZC5NZXNzYWdlV2ViUlRDRGF0YWNoYW5uZWxSZXF1ZXN0KCk7XG4gICAgICAgIHRoaXMud2ViU29ja2V0LnNlbmQocGF5bG9hZC5wYXlsb2FkKCkpO1xuICAgIH1cblxuICAgIHNlbmRTRlVSZWN2RGF0YUNoYW5uZWxSZWFkeSgpIHtcbiAgICAgICAgY29uc3QgcGF5bG9hZCA9IG5ldyBNZXNzYWdlU2VuZC5NZXNzYWdlU0ZVUmVjdkRhdGFDaGFubmVsUmVhZHkoKTtcbiAgICAgICAgdGhpcy53ZWJTb2NrZXQuc2VuZChwYXlsb2FkLnBheWxvYWQoKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2VuZHMgYW4gUlRDIEljZSBDYW5kaWRhdGUgdG8gdGhlIFNlcnZlclxuICAgICAqIEBwYXJhbSBjYW5kaWRhdGUgLSBSVEMgSWNlIENhbmRpZGF0ZVxuICAgICAqL1xuICAgIHNlbmRJY2VDYW5kaWRhdGUoY2FuZGlkYXRlOiBSVENJY2VDYW5kaWRhdGUpIHtcbiAgICAgICAgTG9nZ2VyLkxvZyhMb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnU2VuZGluZyBJY2UgQ2FuZGlkYXRlJyk7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIHRoaXMud2ViU29ja2V0ICYmXG4gICAgICAgICAgICB0aGlzLndlYlNvY2tldC5yZWFkeVN0YXRlID09PSB0aGlzLldTX09QRU5fU1RBVEVcbiAgICAgICAgKSB7XG4gICAgICAgICAgICAvL3dzLnNlbmQoSlNPTi5zdHJpbmdpZnkoeyB0eXBlOiAnaWNlQ2FuZGlkYXRlJywgY2FuZGlkYXRlOiBjYW5kaWRhdGUgfSkpO1xuICAgICAgICAgICAgY29uc3QgSWNlQ2FuZGlkYXRlID0gbmV3IE1lc3NhZ2VTZW5kLk1lc3NhZ2VJY2VDYW5kaWRhdGUoY2FuZGlkYXRlKTtcblxuICAgICAgICAgICAgdGhpcy53ZWJTb2NrZXQuc2VuZChJY2VDYW5kaWRhdGUucGF5bG9hZCgpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENsb3NlcyB0aGUgV2Vic29ja2V0IGNvbm5lY3Rpb25cbiAgICAgKi9cbiAgICBjbG9zZSgpIHtcbiAgICAgICAgdGhpcy53ZWJTb2NrZXQ/LmNsb3NlKCk7XG4gICAgfVxuXG4gICAgLyoqIEV2ZW50IHVzZWQgZm9yIERpc3BsYXlpbmcgd2Vic29ja2V0IGNsb3NlZCBtZXNzYWdlcyAqL1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnMsIEB0eXBlc2NyaXB0LWVzbGludC9uby1lbXB0eS1mdW5jdGlvblxuICAgIG9uV2ViU29ja2V0T25jbG9zZU92ZXJsYXlNZXNzYWdlKGV2ZW50OiBDbG9zZUV2ZW50KSB7fVxuXG4gICAgLyoqXG4gICAgICogVGhlIE1lc3NhZ2UgQ29udGFpbnMgdGhlIHBheWxvYWQgb2YgdGhlIHBlZXIgY29ubmVjdGlvbiBvcHRpb25zIHVzZWQgZm9yIHRoZSBSVEMgUGVlciBoYW5kIHNoYWtlXG4gICAgICogQHBhcmFtIG1lc3NhZ2VDb25maWcgLSBDb25maWcgTWVzc2FnZSByZWNlaXZlZCBmcm9tIGhlIHNpZ25hbGluZyBzZXJ2ZXJcbiAgICAgKi9cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzLCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZW1wdHktZnVuY3Rpb25cbiAgICBvbkNvbmZpZyhtZXNzYWdlQ29uZmlnOiBNZXNzYWdlUmVjZWl2ZS5NZXNzYWdlQ29uZmlnKSB7fVxuXG4gICAgLyoqXG4gICAgICogVGhlIE1lc3NhZ2UgQ29udGFpbnMgdGhlIHBheWxvYWQgb2YgdGhlIHBlZXIgY29ubmVjdGlvbiBvcHRpb25zIHVzZWQgZm9yIHRoZSBSVEMgUGVlciBoYW5kIHNoYWtlXG4gICAgICogQHBhcmFtIG1lc3NhZ2VDb25maWcgLSBDb25maWcgTWVzc2FnZSByZWNlaXZlZCBmcm9tIGhlIHNpZ25hbGluZyBzZXJ2ZXJcbiAgICAgKi9cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzLCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZW1wdHktZnVuY3Rpb25cbiAgICBvblN0cmVhbWVyTGlzdChtZXNzYWdlU3RyZWFtZXJMaXN0OiBNZXNzYWdlUmVjZWl2ZS5NZXNzYWdlU3RyZWFtZXJMaXN0KSB7fVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIGljZUNhbmRpZGF0ZSAtIEljZSBDYW5kaWRhdGUgc2VudCBmcm9tIHRoZSBTaWduYWxpbmcgc2VydmVyIHNlcnZlcidzIFJUQyBoYW5kIHNoYWtlXG4gICAgICovXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFycywgQHR5cGVzY3JpcHQtZXNsaW50L25vLWVtcHR5LWZ1bmN0aW9uXG4gICAgb25JY2VDYW5kaWRhdGUoaWNlQ2FuZGlkYXRlOiBSVENJY2VDYW5kaWRhdGVJbml0KSB7fVxuXG4gICAgLyoqXG4gICAgICogRXZlbnQgaXMgZmlyZWQgd2hlbiB0aGUgd2Vic29ja2V0IHJlY2VpdmVzIHRoZSBhbnN3ZXIgZm9yIHRoZSBSVEMgcGVlciBDb25uZWN0aW9uXG4gICAgICogQHBhcmFtIG1lc3NhZ2VBbnN3ZXIgLSBUaGUgUlRDIEFuc3dlciBwYXlsb2FkIGZyb20gdGhlIHNpZ25hbGluZyBzZXJ2ZXJcbiAgICAgKi9cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzLCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZW1wdHktZnVuY3Rpb25cbiAgICBvbldlYlJ0Y0Fuc3dlcihtZXNzYWdlQW5zd2VyOiBNZXNzYWdlUmVjZWl2ZS5NZXNzYWdlQW5zd2VyKSB7fVxuXG4gICAgLyoqXG4gICAgICogRXZlbnQgaXMgZmlyZWQgd2hlbiB0aGUgd2Vic29ja2V0IHJlY2VpdmVzIHRoZSBvZmZlciBmb3IgdGhlIFJUQyBwZWVyIENvbm5lY3Rpb25cbiAgICAgKiBAcGFyYW0gbWVzc2FnZU9mZmVyIC0gVGhlIHNkcCBvZmZlclxuICAgICAqL1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnMsIEB0eXBlc2NyaXB0LWVzbGludC9uby1lbXB0eS1mdW5jdGlvblxuICAgIG9uV2ViUnRjT2ZmZXIobWVzc2FnZU9mZmVyOiBNZXNzYWdlUmVjZWl2ZS5NZXNzYWdlT2ZmZXIpIHt9XG5cbiAgICAvKipcbiAgICAgKiBFdmVudCBpcyBmaXJlZCB3aGVuIHRoZSB3ZWJzb2NrZXQgcmVjZWl2ZXMgdGhlIGRhdGEgY2hhbm5lbHMgZm9yIHRoZSBSVEMgcGVlciBDb25uZWN0aW9uIGZyb20gdGhlIFNGVVxuICAgICAqIEBwYXJhbSBtZXNzYWdlRGF0YUNoYW5uZWxzIC0gVGhlIGRhdGEgY2hhbm5lbHMgZGV0YWlsc1xuICAgICAqL1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnMsIEB0eXBlc2NyaXB0LWVzbGludC9uby1lbXB0eS1mdW5jdGlvblxuICAgIG9uV2ViUnRjUGVlckRhdGFDaGFubmVscyhcbiAgICAgICAgbWVzc2FnZURhdGFDaGFubmVsczogTWVzc2FnZVJlY2VpdmUuTWVzc2FnZVBlZXJEYXRhQ2hhbm5lbHNcbiAgICApIHt9XG59XG4iLCIvLyBDb3B5cmlnaHQgRXBpYyBHYW1lcywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tICcuLi9Mb2dnZXIvTG9nZ2VyJztcbmltcG9ydCB7IFdlYlJ0Y1BsYXllckNvbnRyb2xsZXIgfSBmcm9tICcuLi9XZWJSdGNQbGF5ZXIvV2ViUnRjUGxheWVyQ29udHJvbGxlcic7XG5pbXBvcnQgeyBXZWJHTFV0aWxzIH0gZnJvbSAnLi4vVXRpbC9XZWJHTFV0aWxzJztcbmltcG9ydCB7IENvbnRyb2xsZXIgfSBmcm9tICcuLi9JbnB1dHMvR2FtZXBhZFR5cGVzJztcbmltcG9ydCB7IFhSR2FtZXBhZENvbnRyb2xsZXIgfSBmcm9tICcuLi9JbnB1dHMvWFJHYW1lcGFkQ29udHJvbGxlcic7XG5pbXBvcnQgeyBYckZyYW1lRXZlbnQgfSBmcm9tICcuLi9VdGlsL0V2ZW50RW1pdHRlcidcbmltcG9ydCB7IEZsYWdzIH0gZnJvbSAnLi4vcGl4ZWxzdHJlYW1pbmdmcm9udGVuZCc7XG5cbmV4cG9ydCBjbGFzcyBXZWJYUkNvbnRyb2xsZXIge1xuICAgIHByaXZhdGUgeHJTZXNzaW9uOiBYUlNlc3Npb247XG4gICAgcHJpdmF0ZSB4clJlZlNwYWNlOiBYUlJlZmVyZW5jZVNwYWNlO1xuICAgIHByaXZhdGUgZ2w6IFdlYkdMMlJlbmRlcmluZ0NvbnRleHQ7XG5cbiAgICBwcml2YXRlIHBvc2l0aW9uTG9jYXRpb246IG51bWJlcjtcbiAgICBwcml2YXRlIHRleGNvb3JkTG9jYXRpb246IG51bWJlcjtcbiAgICBwcml2YXRlIHJlc29sdXRpb25Mb2NhdGlvbjogV2ViR0xVbmlmb3JtTG9jYXRpb247XG4gICAgcHJpdmF0ZSBvZmZzZXRMb2NhdGlvbjogV2ViR0xVbmlmb3JtTG9jYXRpb247XG5cbiAgICBwcml2YXRlIHBvc2l0aW9uQnVmZmVyOiBXZWJHTEJ1ZmZlcjtcbiAgICBwcml2YXRlIHRleGNvb3JkQnVmZmVyOiBXZWJHTEJ1ZmZlcjtcblxuICAgIHByaXZhdGUgd2ViUnRjQ29udHJvbGxlcjogV2ViUnRjUGxheWVyQ29udHJvbGxlcjtcbiAgICBwcml2YXRlIHhyR2FtZXBhZENvbnRyb2xsZXI6IFhSR2FtZXBhZENvbnRyb2xsZXI7XG4gICAgcHJpdmF0ZSB4ckNvbnRyb2xsZXJzOiBBcnJheTxDb250cm9sbGVyPjtcblxuICAgIG9uU2Vzc2lvblN0YXJ0ZWQ6IEV2ZW50VGFyZ2V0O1xuICAgIG9uU2Vzc2lvbkVuZGVkOiBFdmVudFRhcmdldDtcbiAgICBvbkZyYW1lOiBFdmVudFRhcmdldDtcblxuICAgIGNvbnN0cnVjdG9yKHdlYlJ0Y1BsYXllckNvbnRyb2xsZXI6IFdlYlJ0Y1BsYXllckNvbnRyb2xsZXIpIHtcbiAgICAgICAgdGhpcy54clNlc3Npb24gPSBudWxsO1xuICAgICAgICB0aGlzLndlYlJ0Y0NvbnRyb2xsZXIgPSB3ZWJSdGNQbGF5ZXJDb250cm9sbGVyO1xuICAgICAgICB0aGlzLnhyQ29udHJvbGxlcnMgPSBbXTtcbiAgICAgICAgdGhpcy54ckdhbWVwYWRDb250cm9sbGVyID0gbmV3IFhSR2FtZXBhZENvbnRyb2xsZXIoXG4gICAgICAgICAgICB0aGlzLndlYlJ0Y0NvbnRyb2xsZXIuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXJcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5vblNlc3Npb25FbmRlZCA9IG5ldyBFdmVudFRhcmdldCgpO1xuICAgICAgICB0aGlzLm9uU2Vzc2lvblN0YXJ0ZWQgPSBuZXcgRXZlbnRUYXJnZXQoKTtcbiAgICAgICAgdGhpcy5vbkZyYW1lID0gbmV3IEV2ZW50VGFyZ2V0KCk7XG4gICAgfVxuXG4gICAgcHVibGljIHhyQ2xpY2tlZCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLnhyU2Vzc2lvbikge1xuICAgICAgICAgICAgbmF2aWdhdG9yLnhyXG4gICAgICAgICAgICAgICAgLnJlcXVlc3RTZXNzaW9uKCdpbW1lcnNpdmUtdnInKVxuICAgICAgICAgICAgICAgIC50aGVuKChzZXNzaW9uOiBYUlNlc3Npb24pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vblhyU2Vzc2lvblN0YXJ0ZWQoc2Vzc2lvbik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnhyU2Vzc2lvbi5lbmQoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9uWHJTZXNzaW9uRW5kZWQoKSB7XG4gICAgICAgIExvZ2dlci5Mb2coTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ1hSIFNlc3Npb24gZW5kZWQnKTtcbiAgICAgICAgdGhpcy54clNlc3Npb24gPSBudWxsO1xuICAgICAgICB0aGlzLm9uU2Vzc2lvbkVuZGVkLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCd4clNlc3Npb25FbmRlZCcpKTtcbiAgICB9XG5cbiAgICBvblhyU2Vzc2lvblN0YXJ0ZWQoc2Vzc2lvbjogWFJTZXNzaW9uKSB7XG4gICAgICAgIExvZ2dlci5Mb2coTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ1hSIFNlc3Npb24gc3RhcnRlZCcpO1xuXG4gICAgICAgIHRoaXMueHJTZXNzaW9uID0gc2Vzc2lvbjtcbiAgICAgICAgdGhpcy54clNlc3Npb24uYWRkRXZlbnRMaXN0ZW5lcignZW5kJywgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5vblhyU2Vzc2lvbkVuZGVkKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICAgICAgICB0aGlzLmdsID0gY2FudmFzLmdldENvbnRleHQoJ3dlYmdsMicsIHtcbiAgICAgICAgICAgIHhyQ29tcGF0aWJsZTogdHJ1ZVxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnhyU2Vzc2lvbi51cGRhdGVSZW5kZXJTdGF0ZSh7XG4gICAgICAgICAgICBiYXNlTGF5ZXI6IG5ldyBYUldlYkdMTGF5ZXIodGhpcy54clNlc3Npb24sIHRoaXMuZ2wpXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIHNldHVwIHZlcnRleCBzaGFkZXJcbiAgICAgICAgY29uc3QgdmVydGV4U2hhZGVyID0gdGhpcy5nbC5jcmVhdGVTaGFkZXIodGhpcy5nbC5WRVJURVhfU0hBREVSKTtcbiAgICAgICAgdGhpcy5nbC5zaGFkZXJTb3VyY2UodmVydGV4U2hhZGVyLCBXZWJHTFV0aWxzLnZlcnRleFNoYWRlcigpKTtcbiAgICAgICAgdGhpcy5nbC5jb21waWxlU2hhZGVyKHZlcnRleFNoYWRlcik7XG5cbiAgICAgICAgLy8gc2V0dXAgZnJhZ21lbnQgc2hhZGVyXG4gICAgICAgIGNvbnN0IGZyYWdtZW50U2hhZGVyID0gdGhpcy5nbC5jcmVhdGVTaGFkZXIodGhpcy5nbC5GUkFHTUVOVF9TSEFERVIpO1xuICAgICAgICB0aGlzLmdsLnNoYWRlclNvdXJjZShmcmFnbWVudFNoYWRlciwgV2ViR0xVdGlscy5mcmFnbWVudFNoYWRlcigpKTtcbiAgICAgICAgdGhpcy5nbC5jb21waWxlU2hhZGVyKGZyYWdtZW50U2hhZGVyKTtcblxuICAgICAgICAvLyBzZXR1cCBHTFNMIHByb2dyYW1cbiAgICAgICAgY29uc3Qgc2hhZGVyUHJvZ3JhbSA9IHRoaXMuZ2wuY3JlYXRlUHJvZ3JhbSgpO1xuICAgICAgICB0aGlzLmdsLmF0dGFjaFNoYWRlcihzaGFkZXJQcm9ncmFtLCB2ZXJ0ZXhTaGFkZXIpO1xuICAgICAgICB0aGlzLmdsLmF0dGFjaFNoYWRlcihzaGFkZXJQcm9ncmFtLCBmcmFnbWVudFNoYWRlcik7XG4gICAgICAgIHRoaXMuZ2wubGlua1Byb2dyYW0oc2hhZGVyUHJvZ3JhbSk7XG4gICAgICAgIHRoaXMuZ2wudXNlUHJvZ3JhbShzaGFkZXJQcm9ncmFtKTtcblxuICAgICAgICAvLyBsb29rIHVwIHdoZXJlIHZlcnRleCBkYXRhIG5lZWRzIHRvIGdvXG4gICAgICAgIHRoaXMucG9zaXRpb25Mb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0QXR0cmliTG9jYXRpb24oXG4gICAgICAgICAgICBzaGFkZXJQcm9ncmFtLFxuICAgICAgICAgICAgJ2FfcG9zaXRpb24nXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMudGV4Y29vcmRMb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0QXR0cmliTG9jYXRpb24oXG4gICAgICAgICAgICBzaGFkZXJQcm9ncmFtLFxuICAgICAgICAgICAgJ2FfdGV4Q29vcmQnXG4gICAgICAgICk7XG4gICAgICAgIC8vIENyZWF0ZSBhIGJ1ZmZlciB0byBwdXQgdGhyZWUgMmQgY2xpcCBzcGFjZSBwb2ludHMgaW5cbiAgICAgICAgdGhpcy5wb3NpdGlvbkJ1ZmZlciA9IHRoaXMuZ2wuY3JlYXRlQnVmZmVyKCk7XG4gICAgICAgIC8vIEJpbmQgaXQgdG8gQVJSQVlfQlVGRkVSICh0aGluayBvZiBpdCBhcyBBUlJBWV9CVUZGRVIgPSBwb3NpdGlvbkJ1ZmZlcilcbiAgICAgICAgdGhpcy5nbC5iaW5kQnVmZmVyKHRoaXMuZ2wuQVJSQVlfQlVGRkVSLCB0aGlzLnBvc2l0aW9uQnVmZmVyKTtcblxuICAgICAgICAvLyBUdXJuIG9uIHRoZSBwb3NpdGlvbiBhdHRyaWJ1dGVcbiAgICAgICAgdGhpcy5nbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSh0aGlzLnBvc2l0aW9uTG9jYXRpb24pO1xuICAgICAgICAvLyBDcmVhdGUgYSB0ZXh0dXJlLlxuICAgICAgICBjb25zdCB0ZXh0dXJlID0gdGhpcy5nbC5jcmVhdGVUZXh0dXJlKCk7XG4gICAgICAgIHRoaXMuZ2wuYmluZFRleHR1cmUodGhpcy5nbC5URVhUVVJFXzJELCB0ZXh0dXJlKTtcbiAgICAgICAgLy8gU2V0IHRoZSBwYXJhbWV0ZXJzIHNvIHdlIGNhbiByZW5kZXIgYW55IHNpemUgaW1hZ2UuXG4gICAgICAgIHRoaXMuZ2wudGV4UGFyYW1ldGVyaShcbiAgICAgICAgICAgIHRoaXMuZ2wuVEVYVFVSRV8yRCxcbiAgICAgICAgICAgIHRoaXMuZ2wuVEVYVFVSRV9XUkFQX1MsXG4gICAgICAgICAgICB0aGlzLmdsLkNMQU1QX1RPX0VER0VcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5nbC50ZXhQYXJhbWV0ZXJpKFxuICAgICAgICAgICAgdGhpcy5nbC5URVhUVVJFXzJELFxuICAgICAgICAgICAgdGhpcy5nbC5URVhUVVJFX1dSQVBfVCxcbiAgICAgICAgICAgIHRoaXMuZ2wuQ0xBTVBfVE9fRURHRVxuICAgICAgICApO1xuICAgICAgICB0aGlzLmdsLnRleFBhcmFtZXRlcmkoXG4gICAgICAgICAgICB0aGlzLmdsLlRFWFRVUkVfMkQsXG4gICAgICAgICAgICB0aGlzLmdsLlRFWFRVUkVfTUlOX0ZJTFRFUixcbiAgICAgICAgICAgIHRoaXMuZ2wuTkVBUkVTVFxuICAgICAgICApO1xuICAgICAgICB0aGlzLmdsLnRleFBhcmFtZXRlcmkoXG4gICAgICAgICAgICB0aGlzLmdsLlRFWFRVUkVfMkQsXG4gICAgICAgICAgICB0aGlzLmdsLlRFWFRVUkVfTUFHX0ZJTFRFUixcbiAgICAgICAgICAgIHRoaXMuZ2wuTkVBUkVTVFxuICAgICAgICApO1xuXG4gICAgICAgIHRoaXMudGV4Y29vcmRCdWZmZXIgPSB0aGlzLmdsLmNyZWF0ZUJ1ZmZlcigpO1xuICAgICAgICAvLyBsb29rdXAgdW5pZm9ybXNcbiAgICAgICAgdGhpcy5yZXNvbHV0aW9uTG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihcbiAgICAgICAgICAgIHNoYWRlclByb2dyYW0sXG4gICAgICAgICAgICAndV9yZXNvbHV0aW9uJ1xuICAgICAgICApO1xuICAgICAgICB0aGlzLm9mZnNldExvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oXG4gICAgICAgICAgICBzaGFkZXJQcm9ncmFtLFxuICAgICAgICAgICAgJ3Vfb2Zmc2V0J1xuICAgICAgICApO1xuXG4gICAgICAgIHNlc3Npb24ucmVxdWVzdFJlZmVyZW5jZVNwYWNlKCdsb2NhbCcpLnRoZW4oKHJlZlNwYWNlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnhyUmVmU3BhY2UgPSByZWZTcGFjZTtcbiAgICAgICAgICAgIHRoaXMueHJTZXNzaW9uLnJlcXVlc3RBbmltYXRpb25GcmFtZShcbiAgICAgICAgICAgICAgICAodGltZTogRE9NSGlnaFJlc1RpbWVTdGFtcCwgZnJhbWU6IFhSRnJhbWUpID0+XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25YckZyYW1lKHRpbWUsIGZyYW1lKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5vblNlc3Npb25TdGFydGVkLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCd4clNlc3Npb25TdGFydGVkJykpO1xuICAgIH1cblxuICAgIG9uWHJGcmFtZSh0aW1lOiBET01IaWdoUmVzVGltZVN0YW1wLCBmcmFtZTogWFJGcmFtZSkge1xuICAgICAgICBjb25zdCBwb3NlID0gZnJhbWUuZ2V0Vmlld2VyUG9zZSh0aGlzLnhyUmVmU3BhY2UpO1xuICAgICAgICBpZiAocG9zZSkge1xuICAgICAgICAgICAgY29uc3QgbWF0cml4ID0gcG9zZS50cmFuc2Zvcm0ubWF0cml4O1xuICAgICAgICAgICAgY29uc3QgbWF0ID0gW107XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDE2OyBpKyspIHtcbiAgICAgICAgICAgICAgICBtYXRbaV0gPSBuZXcgRmxvYXQzMkFycmF5KFttYXRyaXhbaV1dKVswXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gcHJldHRpZXItaWdub3JlXG4gICAgICAgICAgICB0aGlzLndlYlJ0Y0NvbnRyb2xsZXIuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIudG9TdHJlYW1lckhhbmRsZXJzLmdldCgnWFJITURUcmFuc2Zvcm0nKShbXG4gICAgICAgICAgICAgICAgbWF0WzBdLCBtYXRbNF0sIG1hdFs4XSwgbWF0WzEyXSxcbiAgICAgICAgICAgICAgICBtYXRbMV0sIG1hdFs1XSwgbWF0WzldLCBtYXRbMTNdLCBcbiAgICAgICAgICAgICAgICBtYXRbMl0sIG1hdFs2XSwgbWF0WzEwXSwgbWF0WzE0XSwgXG4gICAgICAgICAgICAgICAgbWF0WzNdLCBtYXRbN10sIG1hdFsxMV0sIG1hdFsxNV1cbiAgICAgICAgICAgIF0pO1xuXG4gICAgICAgICAgICBjb25zdCBnbExheWVyID0gdGhpcy54clNlc3Npb24ucmVuZGVyU3RhdGUuYmFzZUxheWVyO1xuICAgICAgICAgICAgLy8gSWYgd2UgZG8gaGF2ZSBhIHZhbGlkIHBvc2UsIGJpbmQgdGhlIFdlYkdMIGxheWVyJ3MgZnJhbWVidWZmZXIsXG4gICAgICAgICAgICAvLyB3aGljaCBpcyB3aGVyZSBhbnkgY29udGVudCB0byBiZSBkaXNwbGF5ZWQgb24gdGhlIFhSRGV2aWNlIG11c3QgYmVcbiAgICAgICAgICAgIC8vIHJlbmRlcmVkLlxuICAgICAgICAgICAgdGhpcy5nbC5iaW5kRnJhbWVidWZmZXIodGhpcy5nbC5GUkFNRUJVRkZFUiwgZ2xMYXllci5mcmFtZWJ1ZmZlcik7XG5cbiAgICAgICAgICAgIC8vIFVwbG9hZCB0aGUgaW1hZ2UgaW50byB0aGUgdGV4dHVyZS4gV2ViR0wga25vd3MgaG93IHRvIGV4dHJhY3QgdGhlIGN1cnJlbnQgZnJhbWUgZnJvbSB0aGUgdmlkZW8gZWxlbWVudFxuICAgICAgICAgICAgdGhpcy5nbC50ZXhJbWFnZTJEKFxuICAgICAgICAgICAgICAgIHRoaXMuZ2wuVEVYVFVSRV8yRCxcbiAgICAgICAgICAgICAgICAwLFxuICAgICAgICAgICAgICAgIHRoaXMuZ2wuUkdCQSxcbiAgICAgICAgICAgICAgICB0aGlzLmdsLlJHQkEsXG4gICAgICAgICAgICAgICAgdGhpcy5nbC5VTlNJR05FRF9CWVRFLFxuICAgICAgICAgICAgICAgIHRoaXMud2ViUnRjQ29udHJvbGxlci52aWRlb1BsYXllci5nZXRWaWRlb0VsZW1lbnQoKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyKHRoaXMud2ViUnRjQ29udHJvbGxlci52aWRlb1BsYXllci5nZXRWaWRlb0VsZW1lbnQoKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy53ZWJSdGNDb250cm9sbGVyLmNvbmZpZy5pc0ZsYWdFbmFibGVkKEZsYWdzLlhSQ29udHJvbGxlcklucHV0KSkge1xuICAgICAgICAgICAgdGhpcy54clNlc3Npb24uaW5wdXRTb3VyY2VzLmZvckVhY2goXG4gICAgICAgICAgICAgICAgKHNvdXJjZTogWFJJbnB1dFNvdXJjZSwgaW5kZXg6IG51bWJlciwgYXJyYXk6IFhSSW5wdXRTb3VyY2VbXSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnhyR2FtZXBhZENvbnRyb2xsZXIudXBkYXRlU3RhdHVzKFxuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZnJhbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnhyUmVmU3BhY2VcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHRoaXNcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnhyU2Vzc2lvbi5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoXG4gICAgICAgICAgICAodGltZTogRE9NSGlnaFJlc1RpbWVTdGFtcCwgZnJhbWU6IFhSRnJhbWUpID0+XG4gICAgICAgICAgICAgICAgdGhpcy5vblhyRnJhbWUodGltZSwgZnJhbWUpXG4gICAgICAgICk7XG5cbiAgICAgICAgdGhpcy5vbkZyYW1lLmRpc3BhdGNoRXZlbnQobmV3IFhyRnJhbWVFdmVudCh7XG4gICAgICAgICAgICB0aW1lLFxuICAgICAgICAgICAgZnJhbWVcbiAgICAgICAgfSkpO1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVuZGVyKHZpZGVvRWxlbWVudDogSFRNTFZpZGVvRWxlbWVudCkge1xuICAgICAgICBpZiAoIXRoaXMuZ2wpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGdsTGF5ZXIgPSB0aGlzLnhyU2Vzc2lvbi5yZW5kZXJTdGF0ZS5iYXNlTGF5ZXI7XG4gICAgICAgIHRoaXMuZ2wudmlld3BvcnQoXG4gICAgICAgICAgICAwLFxuICAgICAgICAgICAgMCxcbiAgICAgICAgICAgIGdsTGF5ZXIuZnJhbWVidWZmZXJXaWR0aCxcbiAgICAgICAgICAgIGdsTGF5ZXIuZnJhbWVidWZmZXJIZWlnaHRcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5nbC51bmlmb3JtNGYodGhpcy5vZmZzZXRMb2NhdGlvbiwgMS4wLCAxLjAsIDAuMCwgMC4wKTtcblxuICAgICAgICAvLyBTZXQgcmVjdGFuZ2xlXG4gICAgICAgIC8vIHByZXR0aWVyLWlnbm9yZVxuICAgICAgICB0aGlzLmdsLmJ1ZmZlckRhdGEoXG4gICAgICAgICAgICB0aGlzLmdsLkFSUkFZX0JVRkZFUixcbiAgICAgICAgICAgIG5ldyBGbG9hdDMyQXJyYXkoW1xuICAgICAgICAgICAgICAgIDAsIDAsIFxuICAgICAgICAgICAgICAgIHZpZGVvRWxlbWVudC52aWRlb1dpZHRoLCAwLFxuICAgICAgICAgICAgICAgIDAsIHZpZGVvRWxlbWVudC52aWRlb0hlaWdodCwgXG4gICAgICAgICAgICAgICAgMCwgdmlkZW9FbGVtZW50LnZpZGVvSGVpZ2h0LFxuICAgICAgICAgICAgICAgIHZpZGVvRWxlbWVudC52aWRlb1dpZHRoLCAwLFxuICAgICAgICAgICAgICAgIHZpZGVvRWxlbWVudC52aWRlb1dpZHRoLCB2aWRlb0VsZW1lbnQudmlkZW9IZWlnaHRcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgdGhpcy5nbC5TVEFUSUNfRFJBV1xuICAgICAgICApO1xuXG4gICAgICAgIC8vIFByb3ZpZGUgdGV4dHVyZSBjb29yZGluYXRlcyBmb3IgdGhlIHJlY3RhbmdsZVxuICAgICAgICB0aGlzLmdsLmJpbmRCdWZmZXIodGhpcy5nbC5BUlJBWV9CVUZGRVIsIHRoaXMudGV4Y29vcmRCdWZmZXIpO1xuICAgICAgICB0aGlzLmdsLmJ1ZmZlckRhdGEoXG4gICAgICAgICAgICB0aGlzLmdsLkFSUkFZX0JVRkZFUixcbiAgICAgICAgICAgIG5ldyBGbG9hdDMyQXJyYXkoW1xuICAgICAgICAgICAgICAgIDAuMCwgMC4wLCAxLjAsIDAuMCwgMC4wLCAxLjAsIDAuMCwgMS4wLCAxLjAsIDAuMCwgMS4wLCAxLjBcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgdGhpcy5nbC5TVEFUSUNfRFJBV1xuICAgICAgICApO1xuXG4gICAgICAgIGxldCBzaXplOyAvLyBjb21wb25lbnRzIHBlciBpdGVyYXRpb25cbiAgICAgICAgbGV0IHR5cGU7IC8vIHRoZSBkYXRhIHR5cGVcbiAgICAgICAgbGV0IG5vcm1hbGl6ZTsgLy8gbm9ybWFsaXplIHRoZSBkYXRhXG4gICAgICAgIGxldCBzdHJpZGU7IC8vIDAgPSBtb3ZlIGZvcndhcmQgc2l6ZSAqIHNpemVvZih0eXBlKSBlYWNoIGl0ZXJhdGlvbiB0byBnZXQgdGhlIG5leHQgcG9zaXRpb25cbiAgICAgICAgbGV0IG9mZnNldDsgLy8gc3RhcnQgcG9zaXRpb24gb2YgdGhlIGJ1ZmZlclxuXG4gICAgICAgIC8vIEJpbmQgdGhlIHBvc2l0aW9uIGJ1ZmZlci5cbiAgICAgICAgdGhpcy5nbC5iaW5kQnVmZmVyKHRoaXMuZ2wuQVJSQVlfQlVGRkVSLCB0aGlzLnBvc2l0aW9uQnVmZmVyKTtcbiAgICAgICAgLy8gVGVsbCB0aGUgcG9zaXRpb24gYXR0cmlidXRlIGhvdyB0byBnZXQgZGF0YSBvdXQgb2YgcG9zaXRpb25CdWZmZXIgKEFSUkFZX0JVRkZFUilcbiAgICAgICAgc2l6ZSA9IDI7IC8vIDIgY29tcG9uZW50cyBwZXIgaXRlcmF0aW9uXG4gICAgICAgIHR5cGUgPSB0aGlzLmdsLkZMT0FUOyAvLyB0aGUgZGF0YSBpcyAzMmJpdCBmbG9hdHNcbiAgICAgICAgbm9ybWFsaXplID0gZmFsc2U7IC8vIGRvbid0IG5vcm1hbGl6ZSB0aGUgZGF0YVxuICAgICAgICBzdHJpZGUgPSAwOyAvLyAwID0gbW92ZSBmb3J3YXJkIHNpemUgKiBzaXplb2YodHlwZSkgZWFjaCBpdGVyYXRpb24gdG8gZ2V0IHRoZSBuZXh0IHBvc2l0aW9uXG4gICAgICAgIG9mZnNldCA9IDA7IC8vIHN0YXJ0IGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIGJ1ZmZlclxuICAgICAgICB0aGlzLmdsLnZlcnRleEF0dHJpYlBvaW50ZXIoXG4gICAgICAgICAgICB0aGlzLnBvc2l0aW9uTG9jYXRpb24sXG4gICAgICAgICAgICBzaXplLFxuICAgICAgICAgICAgdHlwZSxcbiAgICAgICAgICAgIG5vcm1hbGl6ZSxcbiAgICAgICAgICAgIHN0cmlkZSxcbiAgICAgICAgICAgIG9mZnNldFxuICAgICAgICApO1xuICAgICAgICAvLyBUdXJuIG9uIHRoZSB0ZXhjb29yZCBhdHRyaWJ1dGVcbiAgICAgICAgdGhpcy5nbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSh0aGlzLnRleGNvb3JkTG9jYXRpb24pO1xuICAgICAgICAvLyBiaW5kIHRoZSB0ZXhjb29yZCBidWZmZXIuXG4gICAgICAgIHRoaXMuZ2wuYmluZEJ1ZmZlcih0aGlzLmdsLkFSUkFZX0JVRkZFUiwgdGhpcy50ZXhjb29yZEJ1ZmZlcik7XG4gICAgICAgIC8vIFRlbGwgdGhlIHRleGNvb3JkIGF0dHJpYnV0ZSBob3cgdG8gZ2V0IGRhdGEgb3V0IG9mIHRleGNvb3JkQnVmZmVyIChBUlJBWV9CVUZGRVIpXG4gICAgICAgIHNpemUgPSAyOyAvLyAyIGNvbXBvbmVudHMgcGVyIGl0ZXJhdGlvblxuICAgICAgICB0eXBlID0gdGhpcy5nbC5GTE9BVDsgLy8gdGhlIGRhdGEgaXMgMzJiaXQgZmxvYXRzXG4gICAgICAgIG5vcm1hbGl6ZSA9IGZhbHNlOyAvLyBkb24ndCBub3JtYWxpemUgdGhlIGRhdGFcbiAgICAgICAgc3RyaWRlID0gMDsgLy8gMCA9IG1vdmUgZm9yd2FyZCBzaXplICogc2l6ZW9mKHR5cGUpIGVhY2ggaXRlcmF0aW9uIHRvIGdldCB0aGUgbmV4dCBwb3NpdGlvblxuICAgICAgICBvZmZzZXQgPSAwOyAvLyBzdGFydCBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBidWZmZXJcbiAgICAgICAgdGhpcy5nbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKFxuICAgICAgICAgICAgdGhpcy50ZXhjb29yZExvY2F0aW9uLFxuICAgICAgICAgICAgc2l6ZSxcbiAgICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgICBub3JtYWxpemUsXG4gICAgICAgICAgICBzdHJpZGUsXG4gICAgICAgICAgICBvZmZzZXRcbiAgICAgICAgKTtcbiAgICAgICAgLy8gc2V0IHRoZSByZXNvbHV0aW9uXG4gICAgICAgIHRoaXMuZ2wudW5pZm9ybTJmKFxuICAgICAgICAgICAgdGhpcy5yZXNvbHV0aW9uTG9jYXRpb24sXG4gICAgICAgICAgICB2aWRlb0VsZW1lbnQudmlkZW9XaWR0aCxcbiAgICAgICAgICAgIHZpZGVvRWxlbWVudC52aWRlb0hlaWdodFxuICAgICAgICApO1xuICAgICAgICAvLyBkcmF3IHRoZSByZWN0YW5nbGUuXG4gICAgICAgIGNvbnN0IHByaW1pdGl2ZVR5cGUgPSB0aGlzLmdsLlRSSUFOR0xFUztcbiAgICAgICAgY29uc3QgY291bnQgPSA2O1xuICAgICAgICBvZmZzZXQgPSAwO1xuICAgICAgICB0aGlzLmdsLmRyYXdBcnJheXMocHJpbWl0aXZlVHlwZSwgb2Zmc2V0LCBjb3VudCk7XG4gICAgfVxuXG4gICAgc3RhdGljIGlzU2Vzc2lvblN1cHBvcnRlZChtb2RlOiBYUlNlc3Npb25Nb2RlKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgICAgIGlmIChuYXZpZ2F0b3IueHIpIHtcbiAgICAgICAgICAgIHJldHVybiBuYXZpZ2F0b3IueHIuaXNTZXNzaW9uU3VwcG9ydGVkKG1vZGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlPGJvb2xlYW4+KCgpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsInZhciB4ID0geSA9PiB7IHZhciB4ID0ge307IF9fd2VicGFja19yZXF1aXJlX18uZCh4LCB5KTsgcmV0dXJuIHg7IH1cbnZhciB5ID0geCA9PiAoKSA9PiB4XG5tb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfc2RwX187IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCIvLyBDb3B5cmlnaHQgRXBpYyBHYW1lcywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuXG5leHBvcnQgeyBXZWJSdGNQbGF5ZXJDb250cm9sbGVyIH0gZnJvbSAnLi9XZWJSdGNQbGF5ZXIvV2ViUnRjUGxheWVyQ29udHJvbGxlcic7XG5leHBvcnQgeyBXZWJYUkNvbnRyb2xsZXIgfSBmcm9tICcuL1dlYlhSL1dlYlhSQ29udHJvbGxlcic7XG5leHBvcnQge1xuICAgIENvbmZpZyxcbiAgICBDb250cm9sU2NoZW1lVHlwZSxcbiAgICBGbGFncyxcbiAgICBOdW1lcmljUGFyYW1ldGVycyxcbiAgICBUZXh0UGFyYW1ldGVycyxcbiAgICBPcHRpb25QYXJhbWV0ZXJzLFxuICAgIEZsYWdzSWRzLFxuICAgIE51bWVyaWNQYXJhbWV0ZXJzSWRzLFxuICAgIFRleHRQYXJhbWV0ZXJzSWRzLFxuICAgIE9wdGlvblBhcmFtZXRlcnNJZHMsXG4gICAgQWxsU2V0dGluZ3Ncbn0gZnJvbSAnLi9Db25maWcvQ29uZmlnJztcbmV4cG9ydCB7IFNldHRpbmdCYXNlIH0gZnJvbSAnLi9Db25maWcvU2V0dGluZ0Jhc2UnO1xuZXhwb3J0IHsgU2V0dGluZ0ZsYWcgfSBmcm9tICcuL0NvbmZpZy9TZXR0aW5nRmxhZyc7XG5leHBvcnQgeyBTZXR0aW5nTnVtYmVyIH0gZnJvbSAnLi9Db25maWcvU2V0dGluZ051bWJlcic7XG5leHBvcnQgeyBTZXR0aW5nT3B0aW9uIH0gZnJvbSAnLi9Db25maWcvU2V0dGluZ09wdGlvbic7XG5leHBvcnQgeyBTZXR0aW5nVGV4dCB9IGZyb20gJy4vQ29uZmlnL1NldHRpbmdUZXh0JztcbmV4cG9ydCB7IFBpeGVsU3RyZWFtaW5nIH0gZnJvbSAnLi9QaXhlbFN0cmVhbWluZy9QaXhlbFN0cmVhbWluZyc7XG5cbmV4cG9ydCB7IEFGS0NvbnRyb2xsZXIgYXMgQWZrTG9naWMgfSBmcm9tICcuL0FGSy9BRktDb250cm9sbGVyJztcblxuZXhwb3J0IHsgTGF0ZW5jeVRlc3RSZXN1bHRzIH0gZnJvbSAnLi9EYXRhQ2hhbm5lbC9MYXRlbmN5VGVzdFJlc3VsdHMnO1xuZXhwb3J0IHtcbiAgICBFbmNvZGVyU2V0dGluZ3MsXG4gICAgSW5pdGlhbFNldHRpbmdzLFxuICAgIFdlYlJUQ1NldHRpbmdzXG59IGZyb20gJy4vRGF0YUNoYW5uZWwvSW5pdGlhbFNldHRpbmdzJztcbmV4cG9ydCB7IEFnZ3JlZ2F0ZWRTdGF0cyB9IGZyb20gJy4vUGVlckNvbm5lY3Rpb25Db250cm9sbGVyL0FnZ3JlZ2F0ZWRTdGF0cyc7XG5leHBvcnQgeyBMb2dnZXIgfSBmcm9tICcuL0xvZ2dlci9Mb2dnZXInO1xuZXhwb3J0IHsgVW5xdWFudGl6ZWREZW5vcm1hbGl6ZWRVbnNpZ25lZENvb3JkIGFzIFVucXVhbnRpemVkQW5kRGVub3JtYWxpemVVbnNpZ25lZCB9IGZyb20gJy4vVXRpbC9Db29yZGluYXRlQ29udmVydGVyJztcbmV4cG9ydCB7IE1lc3NhZ2VTZW5kIH0gZnJvbSAnLi9XZWJTb2NrZXRzL01lc3NhZ2VTZW5kJztcbmV4cG9ydCB7IE1lc3NhZ2VSZWN2LCBNZXNzYWdlU3RyZWFtZXJMaXN0IH0gZnJvbSAnLi9XZWJTb2NrZXRzL01lc3NhZ2VSZWNlaXZlJztcbmV4cG9ydCB7IFdlYlNvY2tldENvbnRyb2xsZXIgfSBmcm9tICcuL1dlYlNvY2tldHMvV2ViU29ja2V0Q29udHJvbGxlcic7XG5leHBvcnQgeyBTaWduYWxsaW5nUHJvdG9jb2wgfSBmcm9tICcuL1dlYlNvY2tldHMvU2lnbmFsbGluZ1Byb3RvY29sJztcblxuZXhwb3J0IHsgQ2FuZGlkYXRlUGFpclN0YXRzIH0gZnJvbSAnLi9QZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIvQ2FuZGlkYXRlUGFpclN0YXRzJztcbmV4cG9ydCB7IENhbmRpZGF0ZVN0YXQgfSBmcm9tICcuL1BlZXJDb25uZWN0aW9uQ29udHJvbGxlci9DYW5kaWRhdGVTdGF0JztcbmV4cG9ydCB7IERhdGFDaGFubmVsU3RhdHMgfSBmcm9tICcuL1BlZXJDb25uZWN0aW9uQ29udHJvbGxlci9EYXRhQ2hhbm5lbFN0YXRzJztcbmV4cG9ydCB7XG4gICAgSW5ib3VuZEF1ZGlvU3RhdHMsXG4gICAgSW5ib3VuZFZpZGVvU3RhdHNcbn0gZnJvbSAnLi9QZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIvSW5ib3VuZFJUUFN0YXRzJztcbmV4cG9ydCB7IE91dEJvdW5kVmlkZW9TdGF0cyB9IGZyb20gJy4vUGVlckNvbm5lY3Rpb25Db250cm9sbGVyL091dEJvdW5kUlRQU3RhdHMnO1xuZXhwb3J0ICogZnJvbSAnLi9VdGlsL0V2ZW50RW1pdHRlcic7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=

/***/ }),

/***/ "../../library/node_modules/sdp/sdp.js":
/*!*********************************************!*\
  !*** ../../library/node_modules/sdp/sdp.js ***!
  \*********************************************/
/***/ ((module) => {

/* eslint-env node */


// SDP helpers.
const SDPUtils = {};

// Generate an alphanumeric identifier for cname or mids.
// TODO: use UUIDs instead? https://gist.github.com/jed/982883
SDPUtils.generateIdentifier = function() {
  return Math.random().toString(36).substring(2, 12);
};

// The RTCP CNAME used by all peerconnections from the same JS.
SDPUtils.localCName = SDPUtils.generateIdentifier();

// Splits SDP into lines, dealing with both CRLF and LF.
SDPUtils.splitLines = function(blob) {
  return blob.trim().split('\n').map(line => line.trim());
};
// Splits SDP into sessionpart and mediasections. Ensures CRLF.
SDPUtils.splitSections = function(blob) {
  const parts = blob.split('\nm=');
  return parts.map((part, index) => (index > 0 ?
    'm=' + part : part).trim() + '\r\n');
};

// Returns the session description.
SDPUtils.getDescription = function(blob) {
  const sections = SDPUtils.splitSections(blob);
  return sections && sections[0];
};

// Returns the individual media sections.
SDPUtils.getMediaSections = function(blob) {
  const sections = SDPUtils.splitSections(blob);
  sections.shift();
  return sections;
};

// Returns lines that start with a certain prefix.
SDPUtils.matchPrefix = function(blob, prefix) {
  return SDPUtils.splitLines(blob).filter(line => line.indexOf(prefix) === 0);
};

// Parses an ICE candidate line. Sample input:
// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8
// rport 55996"
// Input can be prefixed with a=.
SDPUtils.parseCandidate = function(line) {
  let parts;
  // Parse both variants.
  if (line.indexOf('a=candidate:') === 0) {
    parts = line.substring(12).split(' ');
  } else {
    parts = line.substring(10).split(' ');
  }

  const candidate = {
    foundation: parts[0],
    component: {1: 'rtp', 2: 'rtcp'}[parts[1]] || parts[1],
    protocol: parts[2].toLowerCase(),
    priority: parseInt(parts[3], 10),
    ip: parts[4],
    address: parts[4], // address is an alias for ip.
    port: parseInt(parts[5], 10),
    // skip parts[6] == 'typ'
    type: parts[7],
  };

  for (let i = 8; i < parts.length; i += 2) {
    switch (parts[i]) {
      case 'raddr':
        candidate.relatedAddress = parts[i + 1];
        break;
      case 'rport':
        candidate.relatedPort = parseInt(parts[i + 1], 10);
        break;
      case 'tcptype':
        candidate.tcpType = parts[i + 1];
        break;
      case 'ufrag':
        candidate.ufrag = parts[i + 1]; // for backward compatibility.
        candidate.usernameFragment = parts[i + 1];
        break;
      default: // extension handling, in particular ufrag. Don't overwrite.
        if (candidate[parts[i]] === undefined) {
          candidate[parts[i]] = parts[i + 1];
        }
        break;
    }
  }
  return candidate;
};

// Translates a candidate object into SDP candidate attribute.
// This does not include the a= prefix!
SDPUtils.writeCandidate = function(candidate) {
  const sdp = [];
  sdp.push(candidate.foundation);

  const component = candidate.component;
  if (component === 'rtp') {
    sdp.push(1);
  } else if (component === 'rtcp') {
    sdp.push(2);
  } else {
    sdp.push(component);
  }
  sdp.push(candidate.protocol.toUpperCase());
  sdp.push(candidate.priority);
  sdp.push(candidate.address || candidate.ip);
  sdp.push(candidate.port);

  const type = candidate.type;
  sdp.push('typ');
  sdp.push(type);
  if (type !== 'host' && candidate.relatedAddress &&
      candidate.relatedPort) {
    sdp.push('raddr');
    sdp.push(candidate.relatedAddress);
    sdp.push('rport');
    sdp.push(candidate.relatedPort);
  }
  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {
    sdp.push('tcptype');
    sdp.push(candidate.tcpType);
  }
  if (candidate.usernameFragment || candidate.ufrag) {
    sdp.push('ufrag');
    sdp.push(candidate.usernameFragment || candidate.ufrag);
  }
  return 'candidate:' + sdp.join(' ');
};

// Parses an ice-options line, returns an array of option tags.
// Sample input:
// a=ice-options:foo bar
SDPUtils.parseIceOptions = function(line) {
  return line.substring(14).split(' ');
};

// Parses a rtpmap line, returns RTCRtpCoddecParameters. Sample input:
// a=rtpmap:111 opus/48000/2
SDPUtils.parseRtpMap = function(line) {
  let parts = line.substring(9).split(' ');
  const parsed = {
    payloadType: parseInt(parts.shift(), 10), // was: id
  };

  parts = parts[0].split('/');

  parsed.name = parts[0];
  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate
  parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1;
  // legacy alias, got renamed back to channels in ORTC.
  parsed.numChannels = parsed.channels;
  return parsed;
};

// Generates a rtpmap line from RTCRtpCodecCapability or
// RTCRtpCodecParameters.
SDPUtils.writeRtpMap = function(codec) {
  let pt = codec.payloadType;
  if (codec.preferredPayloadType !== undefined) {
    pt = codec.preferredPayloadType;
  }
  const channels = codec.channels || codec.numChannels || 1;
  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate +
      (channels !== 1 ? '/' + channels : '') + '\r\n';
};

// Parses a extmap line (headerextension from RFC 5285). Sample input:
// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset
// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset
SDPUtils.parseExtmap = function(line) {
  const parts = line.substring(9).split(' ');
  return {
    id: parseInt(parts[0], 10),
    direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',
    uri: parts[1],
    attributes: parts.slice(2).join(' '),
  };
};

// Generates an extmap line from RTCRtpHeaderExtensionParameters or
// RTCRtpHeaderExtension.
SDPUtils.writeExtmap = function(headerExtension) {
  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) +
      (headerExtension.direction && headerExtension.direction !== 'sendrecv'
        ? '/' + headerExtension.direction
        : '') +
      ' ' + headerExtension.uri +
      (headerExtension.attributes ? ' ' + headerExtension.attributes : '') +
      '\r\n';
};

// Parses a fmtp line, returns dictionary. Sample input:
// a=fmtp:96 vbr=on;cng=on
// Also deals with vbr=on; cng=on
SDPUtils.parseFmtp = function(line) {
  const parsed = {};
  let kv;
  const parts = line.substring(line.indexOf(' ') + 1).split(';');
  for (let j = 0; j < parts.length; j++) {
    kv = parts[j].trim().split('=');
    parsed[kv[0].trim()] = kv[1];
  }
  return parsed;
};

// Generates a fmtp line from RTCRtpCodecCapability or RTCRtpCodecParameters.
SDPUtils.writeFmtp = function(codec) {
  let line = '';
  let pt = codec.payloadType;
  if (codec.preferredPayloadType !== undefined) {
    pt = codec.preferredPayloadType;
  }
  if (codec.parameters && Object.keys(codec.parameters).length) {
    const params = [];
    Object.keys(codec.parameters).forEach(param => {
      if (codec.parameters[param] !== undefined) {
        params.push(param + '=' + codec.parameters[param]);
      } else {
        params.push(param);
      }
    });
    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\r\n';
  }
  return line;
};

// Parses a rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:
// a=rtcp-fb:98 nack rpsi
SDPUtils.parseRtcpFb = function(line) {
  const parts = line.substring(line.indexOf(' ') + 1).split(' ');
  return {
    type: parts.shift(),
    parameter: parts.join(' '),
  };
};

// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.
SDPUtils.writeRtcpFb = function(codec) {
  let lines = '';
  let pt = codec.payloadType;
  if (codec.preferredPayloadType !== undefined) {
    pt = codec.preferredPayloadType;
  }
  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {
    // FIXME: special handling for trr-int?
    codec.rtcpFeedback.forEach(fb => {
      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type +
      (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') +
          '\r\n';
    });
  }
  return lines;
};

// Parses a RFC 5576 ssrc media attribute. Sample input:
// a=ssrc:3735928559 cname:something
SDPUtils.parseSsrcMedia = function(line) {
  const sp = line.indexOf(' ');
  const parts = {
    ssrc: parseInt(line.substring(7, sp), 10),
  };
  const colon = line.indexOf(':', sp);
  if (colon > -1) {
    parts.attribute = line.substring(sp + 1, colon);
    parts.value = line.substring(colon + 1);
  } else {
    parts.attribute = line.substring(sp + 1);
  }
  return parts;
};

// Parse a ssrc-group line (see RFC 5576). Sample input:
// a=ssrc-group:semantics 12 34
SDPUtils.parseSsrcGroup = function(line) {
  const parts = line.substring(13).split(' ');
  return {
    semantics: parts.shift(),
    ssrcs: parts.map(ssrc => parseInt(ssrc, 10)),
  };
};

// Extracts the MID (RFC 5888) from a media section.
// Returns the MID or undefined if no mid line was found.
SDPUtils.getMid = function(mediaSection) {
  const mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];
  if (mid) {
    return mid.substring(6);
  }
};

// Parses a fingerprint line for DTLS-SRTP.
SDPUtils.parseFingerprint = function(line) {
  const parts = line.substring(14).split(' ');
  return {
    algorithm: parts[0].toLowerCase(), // algorithm is case-sensitive in Edge.
    value: parts[1].toUpperCase(), // the definition is upper-case in RFC 4572.
  };
};

// Extracts DTLS parameters from SDP media section or sessionpart.
// FIXME: for consistency with other functions this should only
//   get the fingerprint line as input. See also getIceParameters.
SDPUtils.getDtlsParameters = function(mediaSection, sessionpart) {
  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart,
    'a=fingerprint:');
  // Note: a=setup line is ignored since we use the 'auto' role in Edge.
  return {
    role: 'auto',
    fingerprints: lines.map(SDPUtils.parseFingerprint),
  };
};

// Serializes DTLS parameters to SDP.
SDPUtils.writeDtlsParameters = function(params, setupType) {
  let sdp = 'a=setup:' + setupType + '\r\n';
  params.fingerprints.forEach(fp => {
    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\r\n';
  });
  return sdp;
};

// Parses a=crypto lines into
//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#dictionary-rtcsrtpsdesparameters-members
SDPUtils.parseCryptoLine = function(line) {
  const parts = line.substring(9).split(' ');
  return {
    tag: parseInt(parts[0], 10),
    cryptoSuite: parts[1],
    keyParams: parts[2],
    sessionParams: parts.slice(3),
  };
};

SDPUtils.writeCryptoLine = function(parameters) {
  return 'a=crypto:' + parameters.tag + ' ' +
    parameters.cryptoSuite + ' ' +
    (typeof parameters.keyParams === 'object'
      ? SDPUtils.writeCryptoKeyParams(parameters.keyParams)
      : parameters.keyParams) +
    (parameters.sessionParams ? ' ' + parameters.sessionParams.join(' ') : '') +
    '\r\n';
};

// Parses the crypto key parameters into
//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#rtcsrtpkeyparam*
SDPUtils.parseCryptoKeyParams = function(keyParams) {
  if (keyParams.indexOf('inline:') !== 0) {
    return null;
  }
  const parts = keyParams.substring(7).split('|');
  return {
    keyMethod: 'inline',
    keySalt: parts[0],
    lifeTime: parts[1],
    mkiValue: parts[2] ? parts[2].split(':')[0] : undefined,
    mkiLength: parts[2] ? parts[2].split(':')[1] : undefined,
  };
};

SDPUtils.writeCryptoKeyParams = function(keyParams) {
  return keyParams.keyMethod + ':'
    + keyParams.keySalt +
    (keyParams.lifeTime ? '|' + keyParams.lifeTime : '') +
    (keyParams.mkiValue && keyParams.mkiLength
      ? '|' + keyParams.mkiValue + ':' + keyParams.mkiLength
      : '');
};

// Extracts all SDES parameters.
SDPUtils.getCryptoParameters = function(mediaSection, sessionpart) {
  const lines = SDPUtils.matchPrefix(mediaSection + sessionpart,
    'a=crypto:');
  return lines.map(SDPUtils.parseCryptoLine);
};

// Parses ICE information from SDP media section or sessionpart.
// FIXME: for consistency with other functions this should only
//   get the ice-ufrag and ice-pwd lines as input.
SDPUtils.getIceParameters = function(mediaSection, sessionpart) {
  const ufrag = SDPUtils.matchPrefix(mediaSection + sessionpart,
    'a=ice-ufrag:')[0];
  const pwd = SDPUtils.matchPrefix(mediaSection + sessionpart,
    'a=ice-pwd:')[0];
  if (!(ufrag && pwd)) {
    return null;
  }
  return {
    usernameFragment: ufrag.substring(12),
    password: pwd.substring(10),
  };
};

// Serializes ICE parameters to SDP.
SDPUtils.writeIceParameters = function(params) {
  let sdp = 'a=ice-ufrag:' + params.usernameFragment + '\r\n' +
      'a=ice-pwd:' + params.password + '\r\n';
  if (params.iceLite) {
    sdp += 'a=ice-lite\r\n';
  }
  return sdp;
};

// Parses the SDP media section and returns RTCRtpParameters.
SDPUtils.parseRtpParameters = function(mediaSection) {
  const description = {
    codecs: [],
    headerExtensions: [],
    fecMechanisms: [],
    rtcp: [],
  };
  const lines = SDPUtils.splitLines(mediaSection);
  const mline = lines[0].split(' ');
  for (let i = 3; i < mline.length; i++) { // find all codecs from mline[3..]
    const pt = mline[i];
    const rtpmapline = SDPUtils.matchPrefix(
      mediaSection, 'a=rtpmap:' + pt + ' ')[0];
    if (rtpmapline) {
      const codec = SDPUtils.parseRtpMap(rtpmapline);
      const fmtps = SDPUtils.matchPrefix(
        mediaSection, 'a=fmtp:' + pt + ' ');
      // Only the first a=fmtp:<pt> is considered.
      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};
      codec.rtcpFeedback = SDPUtils.matchPrefix(
        mediaSection, 'a=rtcp-fb:' + pt + ' ')
        .map(SDPUtils.parseRtcpFb);
      description.codecs.push(codec);
      // parse FEC mechanisms from rtpmap lines.
      switch (codec.name.toUpperCase()) {
        case 'RED':
        case 'ULPFEC':
          description.fecMechanisms.push(codec.name.toUpperCase());
          break;
        default: // only RED and ULPFEC are recognized as FEC mechanisms.
          break;
      }
    }
  }
  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(line => {
    description.headerExtensions.push(SDPUtils.parseExtmap(line));
  });
  const wildcardRtcpFb = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-fb:* ')
    .map(SDPUtils.parseRtcpFb);
  description.codecs.forEach(codec => {
    wildcardRtcpFb.forEach(fb=> {
      const duplicate = codec.rtcpFeedback.find(existingFeedback => {
        return existingFeedback.type === fb.type &&
          existingFeedback.parameter === fb.parameter;
      });
      if (!duplicate) {
        codec.rtcpFeedback.push(fb);
      }
    });
  });
  // FIXME: parse rtcp.
  return description;
};

// Generates parts of the SDP media section describing the capabilities /
// parameters.
SDPUtils.writeRtpDescription = function(kind, caps) {
  let sdp = '';

  // Build the mline.
  sdp += 'm=' + kind + ' ';
  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.
  sdp += ' UDP/TLS/RTP/SAVPF ';
  sdp += caps.codecs.map(codec => {
    if (codec.preferredPayloadType !== undefined) {
      return codec.preferredPayloadType;
    }
    return codec.payloadType;
  }).join(' ') + '\r\n';

  sdp += 'c=IN IP4 0.0.0.0\r\n';
  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\r\n';

  // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.
  caps.codecs.forEach(codec => {
    sdp += SDPUtils.writeRtpMap(codec);
    sdp += SDPUtils.writeFmtp(codec);
    sdp += SDPUtils.writeRtcpFb(codec);
  });
  let maxptime = 0;
  caps.codecs.forEach(codec => {
    if (codec.maxptime > maxptime) {
      maxptime = codec.maxptime;
    }
  });
  if (maxptime > 0) {
    sdp += 'a=maxptime:' + maxptime + '\r\n';
  }

  if (caps.headerExtensions) {
    caps.headerExtensions.forEach(extension => {
      sdp += SDPUtils.writeExtmap(extension);
    });
  }
  // FIXME: write fecMechanisms.
  return sdp;
};

// Parses the SDP media section and returns an array of
// RTCRtpEncodingParameters.
SDPUtils.parseRtpEncodingParameters = function(mediaSection) {
  const encodingParameters = [];
  const description = SDPUtils.parseRtpParameters(mediaSection);
  const hasRed = description.fecMechanisms.indexOf('RED') !== -1;
  const hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;

  // filter a=ssrc:... cname:, ignore PlanB-msid
  const ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')
    .map(line => SDPUtils.parseSsrcMedia(line))
    .filter(parts => parts.attribute === 'cname');
  const primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;
  let secondarySsrc;

  const flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID')
    .map(line => {
      const parts = line.substring(17).split(' ');
      return parts.map(part => parseInt(part, 10));
    });
  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {
    secondarySsrc = flows[0][1];
  }

  description.codecs.forEach(codec => {
    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {
      let encParam = {
        ssrc: primarySsrc,
        codecPayloadType: parseInt(codec.parameters.apt, 10),
      };
      if (primarySsrc && secondarySsrc) {
        encParam.rtx = {ssrc: secondarySsrc};
      }
      encodingParameters.push(encParam);
      if (hasRed) {
        encParam = JSON.parse(JSON.stringify(encParam));
        encParam.fec = {
          ssrc: primarySsrc,
          mechanism: hasUlpfec ? 'red+ulpfec' : 'red',
        };
        encodingParameters.push(encParam);
      }
    }
  });
  if (encodingParameters.length === 0 && primarySsrc) {
    encodingParameters.push({
      ssrc: primarySsrc,
    });
  }

  // we support both b=AS and b=TIAS but interpret AS as TIAS.
  let bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');
  if (bandwidth.length) {
    if (bandwidth[0].indexOf('b=TIAS:') === 0) {
      bandwidth = parseInt(bandwidth[0].substring(7), 10);
    } else if (bandwidth[0].indexOf('b=AS:') === 0) {
      // use formula from JSEP to convert b=AS to TIAS value.
      bandwidth = parseInt(bandwidth[0].substring(5), 10) * 1000 * 0.95
          - (50 * 40 * 8);
    } else {
      bandwidth = undefined;
    }
    encodingParameters.forEach(params => {
      params.maxBitrate = bandwidth;
    });
  }
  return encodingParameters;
};

// parses http://draft.ortc.org/#rtcrtcpparameters*
SDPUtils.parseRtcpParameters = function(mediaSection) {
  const rtcpParameters = {};

  // Gets the first SSRC. Note that with RTX there might be multiple
  // SSRCs.
  const remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')
    .map(line => SDPUtils.parseSsrcMedia(line))
    .filter(obj => obj.attribute === 'cname')[0];
  if (remoteSsrc) {
    rtcpParameters.cname = remoteSsrc.value;
    rtcpParameters.ssrc = remoteSsrc.ssrc;
  }

  // Edge uses the compound attribute instead of reducedSize
  // compound is !reducedSize
  const rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');
  rtcpParameters.reducedSize = rsize.length > 0;
  rtcpParameters.compound = rsize.length === 0;

  // parses the rtcp-mux attrіbute.
  // Note that Edge does not support unmuxed RTCP.
  const mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');
  rtcpParameters.mux = mux.length > 0;

  return rtcpParameters;
};

SDPUtils.writeRtcpParameters = function(rtcpParameters) {
  let sdp = '';
  if (rtcpParameters.reducedSize) {
    sdp += 'a=rtcp-rsize\r\n';
  }
  if (rtcpParameters.mux) {
    sdp += 'a=rtcp-mux\r\n';
  }
  if (rtcpParameters.ssrc !== undefined && rtcpParameters.cname) {
    sdp += 'a=ssrc:' + rtcpParameters.ssrc +
      ' cname:' + rtcpParameters.cname + '\r\n';
  }
  return sdp;
};


// parses either a=msid: or a=ssrc:... msid lines and returns
// the id of the MediaStream and MediaStreamTrack.
SDPUtils.parseMsid = function(mediaSection) {
  let parts;
  const spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');
  if (spec.length === 1) {
    parts = spec[0].substring(7).split(' ');
    return {stream: parts[0], track: parts[1]};
  }
  const planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')
    .map(line => SDPUtils.parseSsrcMedia(line))
    .filter(msidParts => msidParts.attribute === 'msid');
  if (planB.length > 0) {
    parts = planB[0].value.split(' ');
    return {stream: parts[0], track: parts[1]};
  }
};

// SCTP
// parses draft-ietf-mmusic-sctp-sdp-26 first and falls back
// to draft-ietf-mmusic-sctp-sdp-05
SDPUtils.parseSctpDescription = function(mediaSection) {
  const mline = SDPUtils.parseMLine(mediaSection);
  const maxSizeLine = SDPUtils.matchPrefix(mediaSection, 'a=max-message-size:');
  let maxMessageSize;
  if (maxSizeLine.length > 0) {
    maxMessageSize = parseInt(maxSizeLine[0].substring(19), 10);
  }
  if (isNaN(maxMessageSize)) {
    maxMessageSize = 65536;
  }
  const sctpPort = SDPUtils.matchPrefix(mediaSection, 'a=sctp-port:');
  if (sctpPort.length > 0) {
    return {
      port: parseInt(sctpPort[0].substring(12), 10),
      protocol: mline.fmt,
      maxMessageSize,
    };
  }
  const sctpMapLines = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:');
  if (sctpMapLines.length > 0) {
    const parts = sctpMapLines[0]
      .substring(10)
      .split(' ');
    return {
      port: parseInt(parts[0], 10),
      protocol: parts[1],
      maxMessageSize,
    };
  }
};

// SCTP
// outputs the draft-ietf-mmusic-sctp-sdp-26 version that all browsers
// support by now receiving in this format, unless we originally parsed
// as the draft-ietf-mmusic-sctp-sdp-05 format (indicated by the m-line
// protocol of DTLS/SCTP -- without UDP/ or TCP/)
SDPUtils.writeSctpDescription = function(media, sctp) {
  let output = [];
  if (media.protocol !== 'DTLS/SCTP') {
    output = [
      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.protocol + '\r\n',
      'c=IN IP4 0.0.0.0\r\n',
      'a=sctp-port:' + sctp.port + '\r\n',
    ];
  } else {
    output = [
      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.port + '\r\n',
      'c=IN IP4 0.0.0.0\r\n',
      'a=sctpmap:' + sctp.port + ' ' + sctp.protocol + ' 65535\r\n',
    ];
  }
  if (sctp.maxMessageSize !== undefined) {
    output.push('a=max-message-size:' + sctp.maxMessageSize + '\r\n');
  }
  return output.join('');
};

// Generate a session ID for SDP.
// https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1
// recommends using a cryptographically random +ve 64-bit value
// but right now this should be acceptable and within the right range
SDPUtils.generateSessionId = function() {
  return Math.random().toString().substr(2, 22);
};

// Write boiler plate for start of SDP
// sessId argument is optional - if not supplied it will
// be generated randomly
// sessVersion is optional and defaults to 2
// sessUser is optional and defaults to 'thisisadapterortc'
SDPUtils.writeSessionBoilerplate = function(sessId, sessVer, sessUser) {
  let sessionId;
  const version = sessVer !== undefined ? sessVer : 2;
  if (sessId) {
    sessionId = sessId;
  } else {
    sessionId = SDPUtils.generateSessionId();
  }
  const user = sessUser || 'thisisadapterortc';
  // FIXME: sess-id should be an NTP timestamp.
  return 'v=0\r\n' +
      'o=' + user + ' ' + sessionId + ' ' + version +
        ' IN IP4 127.0.0.1\r\n' +
      's=-\r\n' +
      't=0 0\r\n';
};

// Gets the direction from the mediaSection or the sessionpart.
SDPUtils.getDirection = function(mediaSection, sessionpart) {
  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.
  const lines = SDPUtils.splitLines(mediaSection);
  for (let i = 0; i < lines.length; i++) {
    switch (lines[i]) {
      case 'a=sendrecv':
      case 'a=sendonly':
      case 'a=recvonly':
      case 'a=inactive':
        return lines[i].substring(2);
      default:
        // FIXME: What should happen here?
    }
  }
  if (sessionpart) {
    return SDPUtils.getDirection(sessionpart);
  }
  return 'sendrecv';
};

SDPUtils.getKind = function(mediaSection) {
  const lines = SDPUtils.splitLines(mediaSection);
  const mline = lines[0].split(' ');
  return mline[0].substring(2);
};

SDPUtils.isRejected = function(mediaSection) {
  return mediaSection.split(' ', 2)[1] === '0';
};

SDPUtils.parseMLine = function(mediaSection) {
  const lines = SDPUtils.splitLines(mediaSection);
  const parts = lines[0].substring(2).split(' ');
  return {
    kind: parts[0],
    port: parseInt(parts[1], 10),
    protocol: parts[2],
    fmt: parts.slice(3).join(' '),
  };
};

SDPUtils.parseOLine = function(mediaSection) {
  const line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];
  const parts = line.substring(2).split(' ');
  return {
    username: parts[0],
    sessionId: parts[1],
    sessionVersion: parseInt(parts[2], 10),
    netType: parts[3],
    addressType: parts[4],
    address: parts[5],
  };
};

// a very naive interpretation of a valid SDP.
SDPUtils.isValidSDP = function(blob) {
  if (typeof blob !== 'string' || blob.length === 0) {
    return false;
  }
  const lines = SDPUtils.splitLines(blob);
  for (let i = 0; i < lines.length; i++) {
    if (lines[i].length < 2 || lines[i].charAt(1) !== '=') {
      return false;
    }
    // TODO: check the modifier a bit more.
  }
  return true;
};

// Expose public methods.
if (true) {
  module.exports = SDPUtils;
}


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!***********************!*\
  !*** ./src/uiless.ts ***!
  \***********************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _epicgames_ps_lib_pixelstreamingfrontend_ue5_2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @epicgames-ps/lib-pixelstreamingfrontend-ue5.2 */ "../../library/dist/lib-pixelstreamingfrontend.esm.js");
// Copyright Epic Games, Inc. All Rights Reserved.

document.body.onload = function () {
    // Example of how to set the logger level
    // Logger.SetLoggerVerbosity(10);
    // Create a config object
    var config = new _epicgames_ps_lib_pixelstreamingfrontend_ue5_2__WEBPACK_IMPORTED_MODULE_0__.Config({
        initialSettings: {
            AutoPlayVideo: true,
            AutoConnect: true,
            ss: "ws://localhost:80",
            StartVideoMuted: true,
        }
    });
    // Create a PixelStreaming instance and attach the video element to an existing parent div
    var pixelStreaming = new _epicgames_ps_lib_pixelstreamingfrontend_ue5_2__WEBPACK_IMPORTED_MODULE_0__.PixelStreaming(config, { videoElementParent: document.getElementById("videoParentElement") });
    // If browser denies autoplay, show "Click to play" and register a click-to-play handler
    pixelStreaming.addEventListener("playStreamRejected", function () {
        var clickToPlay = document.getElementById("clickToPlayElement");
        clickToPlay.className = "visible";
        clickToPlay.onclick = function () {
            pixelStreaming.play();
            clickToPlay.className = "";
            clickToPlay.onclick = undefined;
        };
    });
};

})();

/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtDQUErQyx5Q0FBeUM7QUFDeEYsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBFQUEwRSxHQUFHO0FBQzdFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwRUFBMEUsR0FBRztBQUM3RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwRUFBMEUsR0FBRztBQUM3RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3S0FBd0ssSUFBSTtBQUM1SztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2S0FBNkssSUFBSTtBQUNqTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2S0FBNkssSUFBSTtBQUNqTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2S0FBNkssSUFBSTtBQUNqTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrS0FBK0ssSUFBSTtBQUNuTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsOENBQThDOzs7QUFHL0MsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRCxnQ0FBbUI7O0FBRXpFLGdDQUFtQjtBQUNuQixxQkFBcUIsZ0NBQW1CO0FBQ3hDO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRCxnQ0FBbUI7O0FBRXpFLGdDQUFtQjtBQUNuQixxQkFBcUIsZ0NBQW1CO0FBQ3hDO0FBQ0Esc0JBQXNCO0FBQ3RCLHFFQUFxRSxnQ0FBbUI7QUFDeEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QztBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQztBQUMxQyxxQkFBcUIsa0JBQWtCLEdBQUcsVUFBVTtBQUNwRCxxQkFBcUIsa0JBQWtCO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNELGdDQUFtQjs7QUFFekUsZ0NBQW1CO0FBQ25CLHFCQUFxQixnQ0FBbUI7QUFDeEM7QUFDQSxzQkFBc0I7QUFDdEIscUVBQXFFLGdDQUFtQjtBQUN4RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQztBQUMxQyxxQkFBcUIsa0JBQWtCLEdBQUcsVUFBVTtBQUNwRCxxQkFBcUIsa0JBQWtCO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNELGdDQUFtQjs7QUFFekUsZ0NBQW1CO0FBQ25CLHFCQUFxQixnQ0FBbUI7QUFDeEM7QUFDQSxzQkFBc0I7QUFDdEIscUVBQXFFLGdDQUFtQjtBQUN4RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEM7QUFDMUMscUJBQXFCLGtCQUFrQixHQUFHLFVBQVU7QUFDcEQscUJBQXFCLGtCQUFrQjtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFFQUFxRSxxQkFBcUI7QUFDMUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNELGdDQUFtQjs7QUFFekUsZ0NBQW1CO0FBQ25CLHFCQUFxQixnQ0FBbUI7QUFDeEM7QUFDQSxzQkFBc0I7QUFDdEIscUVBQXFFLGdDQUFtQjtBQUN4RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEM7QUFDMUMscUJBQXFCLGtCQUFrQixHQUFHLFVBQVU7QUFDcEQscUJBQXFCLGtCQUFrQjtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRCxnQ0FBbUI7O0FBRXpFLGdDQUFtQjtBQUNuQixxQkFBcUIsZ0NBQW1CO0FBQ3hDO0FBQ0Esc0JBQXNCO0FBQ3RCLHVFQUF1RSxnQ0FBbUI7QUFDMUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvSkFBb0osV0FBVztBQUMvSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9KQUFvSixXQUFXO0FBQy9KO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvSkFBb0osV0FBVyxhQUFhLE1BQU07QUFDbEw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvSkFBb0osV0FBVyxXQUFXLE1BQU07QUFDaEw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNELGdDQUFtQjs7QUFFekUsZ0NBQW1CO0FBQ25CLHFCQUFxQixnQ0FBbUI7QUFDeEM7QUFDQSxzQkFBc0I7QUFDdEIsdUVBQXVFLGdDQUFtQjtBQUMxRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3SkFBd0oscUJBQXFCO0FBQzdLO0FBQ0E7QUFDQTtBQUNBLDRKQUE0SixxQkFBcUI7QUFDakw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNELGdDQUFtQjs7QUFFekUsZ0NBQW1CO0FBQ25CLHFCQUFxQixnQ0FBbUI7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0QsZ0NBQW1COztBQUV6RSxnQ0FBbUI7QUFDbkIscUJBQXFCLGdDQUFtQjtBQUN4QztBQUNBLHNCQUFzQjtBQUN0Qix1RUFBdUUsZ0NBQW1CO0FBQzFGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrSkFBK0osdUJBQXVCLEtBQUsscUJBQXFCO0FBQ2hOO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0tBQXdLLHdCQUF3QixLQUFLLHNCQUFzQjtBQUMzTjtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNELGdDQUFtQjs7QUFFekUsZ0NBQW1CO0FBQ25CLHFCQUFxQixnQ0FBbUI7QUFDeEM7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlEO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNELGdDQUFtQjs7QUFFekUsZ0NBQW1CO0FBQ25CLHFCQUFxQixnQ0FBbUI7QUFDeEM7QUFDQSxzQkFBc0I7QUFDdEIsdUVBQXVFLGdDQUFtQjtBQUMxRixxRUFBcUUsZ0NBQW1CO0FBQ3hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnTEFBZ0wsaUJBQWlCLEdBQUcsVUFBVTtBQUM5TTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUtBQXlLLFVBQVU7QUFDbkw7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwTEFBMEwsaUJBQWlCLEdBQUcsVUFBVTtBQUN4TjtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNELGdDQUFtQjs7QUFFekUsZ0NBQW1CO0FBQ25CLHFCQUFxQixnQ0FBbUI7QUFDeEM7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QixzRUFBc0UsZ0NBQW1CO0FBQ3pGLG1GQUFtRixnQ0FBbUI7QUFDdEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdFQUFnRSxnQkFBZ0I7QUFDaEYsNERBQTRELGdCQUFnQjtBQUM1RSw4REFBOEQsZ0JBQWdCO0FBQzlFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixzQ0FBc0M7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLCtCQUErQjtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNELGdDQUFtQjs7QUFFekUsZ0NBQW1CO0FBQ25CLHFCQUFxQixnQ0FBbUI7QUFDeEM7QUFDQTtBQUNBLHNCQUFzQjtBQUN0Qix1RUFBdUUsZ0NBQW1CO0FBQzFGLG1GQUFtRixnQ0FBbUI7QUFDdEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNGQUFzRixTQUFTO0FBQy9GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHFCQUFxQjtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0Qiw0Q0FBNEM7QUFDeEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsOEJBQThCO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLHNDQUFzQzs7O0FBR3ZDLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0QsZ0NBQW1COztBQUV6RSxnQ0FBbUI7QUFDbkIscUJBQXFCLGdDQUFtQjtBQUN4QztBQUNBLHNCQUFzQjtBQUN0Qix1RUFBdUUsZ0NBQW1CO0FBQzFGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRCxnQ0FBbUI7O0FBRXpFLGdDQUFtQjtBQUNuQixxQkFBcUIsZ0NBQW1CO0FBQ3hDO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEIsNkVBQTZFLGdDQUFtQjtBQUNoRyw0RUFBNEUsZ0NBQW1CO0FBQy9GLHlFQUF5RSxnQ0FBbUI7QUFDNUYseUVBQXlFLGdDQUFtQjtBQUM1RiwyRUFBMkUsZ0NBQW1CO0FBQzlGLHVFQUF1RSxnQ0FBbUI7QUFDMUYsdUVBQXVFLGdDQUFtQjtBQUMxRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0QsZ0NBQW1COztBQUV6RSxnQ0FBbUI7QUFDbkIscUJBQXFCLGdDQUFtQjtBQUN4QztBQUNBLHNCQUFzQjtBQUN0Qix5RUFBeUUsZ0NBQW1CO0FBQzVGLHVFQUF1RSxnQ0FBbUI7QUFDMUYsdUVBQXVFLGdDQUFtQjtBQUMxRixtRkFBbUYsZ0NBQW1CO0FBQ3RHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtJQUErSSxRQUFRLGFBQWEscUJBQXFCO0FBQ3pMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2SUFBNkksUUFBUTtBQUNySjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0pBQWdKLFNBQVM7QUFDeko7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUtBQW1LLFlBQVk7QUFDL0s7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRCxpQ0FBbUI7O0FBRXpFLGlDQUFtQjtBQUNuQixxQkFBcUIsaUNBQW1CO0FBQ3hDO0FBQ0Esc0JBQXNCO0FBQ3RCLHVFQUF1RSxpQ0FBbUI7QUFDMUYsbUZBQW1GLGlDQUFtQjtBQUN0RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNELGlDQUFtQjs7QUFFekUsaUNBQW1CO0FBQ25CLHFCQUFxQixpQ0FBbUI7QUFDeEM7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCLGlDQUFpQztBQUNqQyxpQ0FBaUM7QUFDakMsOEJBQThCO0FBQzlCLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQztBQUNwQyxzQ0FBc0M7QUFDdEMsc0NBQXNDO0FBQ3RDLG1DQUFtQztBQUNuQyxtQ0FBbUM7OztBQUduQyxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNELGlDQUFtQjs7QUFFekUsaUNBQW1CO0FBQ25CLHFCQUFxQixpQ0FBbUI7QUFDeEM7QUFDQSxzQkFBc0I7QUFDdEIsc0VBQXNFLGlDQUFtQjtBQUN6Rix1RUFBdUUsaUNBQW1CO0FBQzFGLDJFQUEyRSxpQ0FBbUI7QUFDOUYsNkVBQTZFLGlDQUFtQjtBQUNoRyxtRkFBbUYsaUNBQW1CO0FBQ3RHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUpBQW1KLFFBQVEsV0FBVyxFQUFFLElBQUksRUFBRTtBQUM5SztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1KQUFtSixRQUFRLFNBQVMsRUFBRSxJQUFJLEVBQUU7QUFDNUs7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRCxpQ0FBbUI7O0FBRXpFLGlDQUFtQjtBQUNuQixxQkFBcUIsaUNBQW1CO0FBQ3hDO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRCxpQ0FBbUI7O0FBRXpFLGlDQUFtQjtBQUNuQixxQkFBcUIsaUNBQW1CO0FBQ3hDO0FBQ0Esc0JBQXNCO0FBQ3RCLHVFQUF1RSxpQ0FBbUI7QUFDMUYsbUZBQW1GLGlDQUFtQjtBQUN0RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtFQUErRSxnQkFBZ0I7QUFDL0YsMkVBQTJFLGdCQUFnQjtBQUMzRiw2RUFBNkUsZ0JBQWdCO0FBQzdGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxRUFBcUUsZ0JBQWdCO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHNDQUFzQztBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHNDQUFzQztBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixvQkFBb0I7QUFDNUMsa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBLDJJQUEySSxxQ0FBcUMsSUFBSSxFQUFFLElBQUksRUFBRTtBQUM1TDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0QsaUNBQW1COztBQUV6RSxpQ0FBbUI7QUFDbkIscUJBQXFCLGlDQUFtQjtBQUN4QztBQUNBLHNCQUFzQjtBQUN0Qix5RUFBeUUsaUNBQW1CO0FBQzVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLFFBQVE7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0Qiw4QkFBOEI7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLDJCQUEyQjtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0QsaUNBQW1COztBQUV6RSxpQ0FBbUI7QUFDbkIscUJBQXFCLGlDQUFtQjtBQUN4QztBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsUUFBUSxZQUFZLE1BQU07QUFDM0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtELFFBQVE7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1EQUFtRCxRQUFRLFlBQVksTUFBTTtBQUM3RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0RBQXdELE1BQU0sU0FBUyxRQUFRO0FBQy9FO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNELGlDQUFtQjs7QUFFekUsaUNBQW1CO0FBQ25CLHFCQUFxQixpQ0FBbUI7QUFDeEM7QUFDQSxzQkFBc0I7QUFDdEIseUVBQXlFLGlDQUFtQjtBQUM1RiwwRUFBMEUsaUNBQW1CO0FBQzdGLHVFQUF1RSxpQ0FBbUI7QUFDMUYsNEVBQTRFLGlDQUFtQjtBQUMvRiwwRUFBMEUsaUNBQW1CO0FBQzdGLHNFQUFzRSxpQ0FBbUI7QUFDekYscUVBQXFFLGlDQUFtQjtBQUN4Rix1RUFBdUUsaUNBQW1CO0FBQzFGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRDtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0Q7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0EsbUNBQW1DLEVBQUUsdUJBQXVCLGlCQUFpQixPQUFPO0FBQ3BGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRCxpQ0FBbUI7O0FBRXpFLGlDQUFtQjtBQUNuQixxQkFBcUIsaUNBQW1CO0FBQ3hDO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRCxpQ0FBbUI7O0FBRXpFLGlDQUFtQjtBQUNuQixxQkFBcUIsaUNBQW1CO0FBQ3hDO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRCxpQ0FBbUI7O0FBRXpFLGlDQUFtQjtBQUNuQixxQkFBcUIsaUNBQW1CO0FBQ3hDO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRCxpQ0FBbUI7O0FBRXpFLGlDQUFtQjtBQUNuQixxQkFBcUIsaUNBQW1CO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRCxpQ0FBbUI7O0FBRXpFLGlDQUFtQjtBQUNuQixxQkFBcUIsaUNBQW1CO0FBQ3hDO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRCxpQ0FBbUI7O0FBRXpFLGlDQUFtQjtBQUNuQixxQkFBcUIsaUNB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O0FBQ1Q7QUFDQSw2SEFBNkgseUNBQXlDO0FBQ3RLO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0hBQXNILGdCQUFnQjtBQUN0STtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0hBQWtILDZCQUE2QjtBQUMvSTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzSEFBc0gsV0FBVztBQUNqSTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9IQUFvSCxVQUFVO0FBQzlIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRCxpQ0FBbUI7O0FBRXpFLGlDQUFtQjtBQUNuQixxQkFBcUIsaUNBQW1CO0FBQ3hDO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNELGlDQUFtQjs7QUFFekUsaUNBQW1CO0FBQ25CLHFCQUFxQixpQ0FBbUI7QUFDeEM7QUFDQSxzQkFBc0I7QUFDdEIsdUVBQXVFLGlDQUFtQjtBQUMxRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBOzs7QUFHQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNELGlDQUFtQjs7QUFFekUsaUNBQW1CO0FBQ25CLHFCQUFxQixpQ0FBbUI7QUFDeEM7QUFDQSxzQkFBc0I7QUFDdEIsdUVBQXVFLGlDQUFtQjtBQUMxRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0TEFBNEwsWUFBWTtBQUN4TTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QiwrQkFBK0I7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4TUFBOE0sYUFBYSxJQUFJLG1CQUFtQjtBQUNsUDtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNELGlDQUFtQjs7QUFFekUsaUNBQW1CO0FBQ25CLHFCQUFxQixpQ0FBbUI7QUFDeEM7QUFDQSxzQkFBc0I7QUFDdEIsdUVBQXVFLGlDQUFtQjtBQUMxRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyTUFBMk0sWUFBWTtBQUN2TjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsbU1BQW1NLGFBQWEsSUFBSSw0QkFBNEI7QUFDaFA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0QsaUNBQW1COztBQUV6RSxpQ0FBbUI7QUFDbkIscUJBQXFCLGlDQUFtQjtBQUN4QztBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEIsbUVBQW1FLGlDQUFtQjtBQUN0Rix1RUFBdUUsaUNBQW1CO0FBQzFGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtEQUErRDtBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3S0FBd0ssaUJBQWlCO0FBQ3pMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyw0Q0FBNEM7OztBQUc3QyxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNELGlDQUFtQjs7QUFFekUsaUNBQW1CO0FBQ25CLHFCQUFxQixpQ0FBbUI7QUFDeEM7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNELGlDQUFtQjs7QUFFekUsaUNBQW1CO0FBQ25CLHFCQUFxQixpQ0FBbUI7QUFDeEM7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRCxpQ0FBbUI7O0FBRXpFLGlDQUFtQjtBQUNuQixxQkFBcUIsaUNBQW1CO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCLHVFQUF1RSxpQ0FBbUI7QUFDMUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNELGlDQUFtQjs7QUFFekUsaUNBQW1CO0FBQ25CLHFCQUFxQixpQ0FBbUI7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRCxpQ0FBbUI7O0FBRXpFLGlDQUFtQjtBQUNuQixxQkFBcUIsaUNBQW1CO0FBQ3hDO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtB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QjtBQUMxRix1RUFBdUUsaUNBQW1CO0FBQzFGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsZUFBZTtBQUNmO0FBQ0EsZUFBZSxnQkFBZ0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNELGlDQUFtQjs7QUFFekUsaUNBQW1CO0FBQ25CLHFCQUFxQixpQ0FBbUI7QUFDeEM7QUFDQSxzQkFBc0I7QUFDdEIseUZBQXlGLGlDQUFtQjtBQUM1RyxzRkFBc0YsaUNBQW1CO0FBQ3pHLDJGQUEyRixpQ0FBbUI7QUFDOUcsMkVBQTJFLGlDQUFtQjtBQUM5RiwyRkFBMkYsaUNBQW1CO0FBQzlHLDRHQUE0RyxpQ0FBbUI7QUFDL0gsd0VBQXdFLGlDQUFtQjtBQUMzRixzRkFBc0YsaUNBQW1CO0FBQ3pHLHlGQUF5RixpQ0FBbUI7QUFDNUcsd0VBQXdFLGlDQUFtQjtBQUMzRix1RUFBdUUsaUNBQW1CO0FBQzFGLHFGQUFxRixpQ0FBbUI7QUFDeEcsaUZBQWlGLGlDQUFtQjtBQUNwRyxtR0FBbUcsaUNBQW1CO0FBQ3RILDhGQUE4RixpQ0FBbUI7QUFDakgscUdBQXFHLGlDQUFtQjtBQUN4SCxrR0FBa0csaUNBQW1CO0FBQ3JILHlHQUF5RyxpQ0FBbUI7QUFDNUgsdUZBQXVGLGlDQUFtQjtBQUMxRyxrRkFBa0YsaUNBQW1CO0FBQ3JHLDRFQUE0RSxpQ0FBbUI7QUFDL0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1RUFBdUUsV0FBVyxJQUFJLDhDQUE4QztBQUNwSTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaLHVOQUF1TixXQUFXO0FBQ2xPO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlKQUF5SjtBQUN6SjtBQUNBLGdDQUFnQztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBLQUEwSyxhQUFhO0FBQ3ZMLDZEQUE2RCxpQ0FBaUM7QUFDOUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEtBQTBLLGFBQWE7QUFDdkw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1NQUFtTSxZQUFZLGdGQUFnRixZQUFZO0FBQzNTO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0S0FBNEssYUFBYTtBQUN6TCw4Q0FBOEMsaUNBQWlDO0FBQy9FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtTUFBbU0sUUFBUSxrRkFBa0YsWUFBWTtBQUN6UztBQUNBO0FBQ0E7QUFDQSw2S0FBNkssVUFBVTtBQUN2TDtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdOQUFnTixzQkFBc0I7QUFDdE87QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEhBQTBILFNBQVM7QUFDbkk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2SEFBNkgsMEJBQTBCO0FBQ3ZKLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4S0FBOEssSUFBSTtBQUNsTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEpBQTBKLHdCQUF3QjtBQUNsTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUVBQWlFO0FBQ2pFLHdDQUF3QztBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUpBQXVKLFdBQVc7QUFDbEs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0pBQXNKLFVBQVU7QUFDaEs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhJQUE4SSxNQUFNO0FBQ3BKO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4SUFBOEksTUFBTTtBQUNwSjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLGlDQUFpQztBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FB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QUFtQjtBQUMvRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsZ01BQWdNLE1BQU07QUFDdE0sU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1Qyw0Q0FBNEM7QUFDbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtB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QUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsaURBQWlEO0FBQ2pEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0Isa0JBQWtCLE9BQU87QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixrQkFBa0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0Isa0JBQWtCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsSUFBSSxJQUEwQjtBQUM5QjtBQUNBOzs7Ozs7O1VDaHlCQTtVQUNBOztVQUVBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBOztVQUVBO1VBQ0E7O1VBRUE7VUFDQTtVQUNBOzs7OztXQ3RCQTtXQUNBO1dBQ0E7V0FDQTtXQUNBO1dBQ0EsaUNBQWlDLFdBQVc7V0FDNUM7V0FDQTs7Ozs7V0NQQTtXQUNBO1dBQ0E7V0FDQTtXQUNBLHlDQUF5Qyx3Q0FBd0M7V0FDakY7V0FDQTtXQUNBOzs7OztXQ1BBOzs7OztXQ0FBO1dBQ0E7V0FDQTtXQUNBLHVEQUF1RCxpQkFBaUI7V0FDeEU7V0FDQSxnREFBZ0QsYUFBYTtXQUM3RDs7Ozs7Ozs7Ozs7O0FDTkE7QUFDd0Y7QUFDeEY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsa0ZBQU07QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsNkJBQTZCLDBGQUFjLFdBQVcsbUVBQW1FO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCIsInNvdXJjZXMiOlsid2VicGFjazovL2VwaWNnYW1lcy1mcm9udGVuZC93ZWJwYWNrL3VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24iLCJ3ZWJwYWNrOi8vZXBpY2dhbWVzLWZyb250ZW5kLy4uLy4uL2xpYnJhcnkvZGlzdC9saWItcGl4ZWxzdHJlYW1pbmdmcm9udGVuZC5lc20uanMiLCJ3ZWJwYWNrOi8vZXBpY2dhbWVzLWZyb250ZW5kLy4uLy4uL2xpYnJhcnkvbm9kZV9tb2R1bGVzL3NkcC9zZHAuanMiLCJ3ZWJwYWNrOi8vZXBpY2dhbWVzLWZyb250ZW5kL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2VwaWNnYW1lcy1mcm9udGVuZC93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9lcGljZ2FtZXMtZnJvbnRlbmQvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL2VwaWNnYW1lcy1mcm9udGVuZC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL2VwaWNnYW1lcy1mcm9udGVuZC93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL2VwaWNnYW1lcy1mcm9udGVuZC8uL3NyYy91aWxlc3MudHMiXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW10sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wiZXBpY2dhbWVzLWZyb250ZW5kXCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcImVwaWNnYW1lcy1mcm9udGVuZFwiXSA9IGZhY3RvcnkoKTtcbn0pKHRoaXMsICgpID0+IHtcbnJldHVybiAiLCJpbXBvcnQgKiBhcyBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX3NkcF9fIGZyb20gXCJzZHBcIjtcbi8qKioqKiovIHZhciBfX3dlYnBhY2tfbW9kdWxlc19fID0gKHtcblxuLyoqKi8gXCIuL3NyYy9BRksvQUZLQ29udHJvbGxlci50c1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9BRksvQUZLQ29udHJvbGxlci50cyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJBRktDb250cm9sbGVyXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIEFGS0NvbnRyb2xsZXIpXG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfQ29uZmlnX0NvbmZpZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vQ29uZmlnL0NvbmZpZyAqLyBcIi4vc3JjL0NvbmZpZy9Db25maWcudHNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL0xvZ2dlci9Mb2dnZXIgKi8gXCIuL3NyYy9Mb2dnZXIvTG9nZ2VyLnRzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9VdGlsX0V2ZW50RW1pdHRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vVXRpbC9FdmVudEVtaXR0ZXIgKi8gXCIuL3NyYy9VdGlsL0V2ZW50RW1pdHRlci50c1wiKTtcbi8vIENvcHlyaWdodCBFcGljIEdhbWVzLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcblxyXG5cclxuXHJcbmNsYXNzIEFGS0NvbnRyb2xsZXIge1xyXG4gICAgY29uc3RydWN0b3IoY29uZmlnLCBwaXhlbFN0cmVhbWluZywgb25EaXNtaXNzQWZrKSB7XHJcbiAgICAgICAgLy8gdGltZSBvdXQgbG9naWMgZGV0YWlsc1xyXG4gICAgICAgIHRoaXMuY2xvc2VUaW1lb3V0ID0gMTA7XHJcbiAgICAgICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmNvdW50ZG93bkFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMud2FyblRpbWVyID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIHRoaXMuY291bnREb3duID0gMDtcclxuICAgICAgICB0aGlzLmNvdW50RG93blRpbWVyID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xyXG4gICAgICAgIHRoaXMucGl4ZWxTdHJlYW1pbmcgPSBwaXhlbFN0cmVhbWluZztcclxuICAgICAgICB0aGlzLm9uRGlzbWlzc0FmayA9IG9uRGlzbWlzc0FmaztcclxuICAgICAgICB0aGlzLm9uQUZLVGltZWRPdXRDYWxsYmFjayA9ICgpID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ0FGSyB0aW1lZCBvdXQsIGRpZCB5b3Ugd2FudCB0byBvdmVycmlkZSB0aGlzIGNhbGxiYWNrPycpO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFRoZSBtZXRob2RzIHRoYXQgb2NjdXIgd2hlbiBhbiBhZmsgZXZlbnQgbGlzdGVuZXIgaXMgY2xpY2tlZFxyXG4gICAgICovXHJcbiAgICBvbkFma0NsaWNrKCkge1xyXG4gICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5jb3VudERvd25UaW1lcik7XHJcbiAgICAgICAgaWYgKHRoaXMuYWN0aXZlIHx8IHRoaXMuY291bnRkb3duQWN0aXZlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhcnRBZmtXYXJuaW5nVGltZXIoKTtcclxuICAgICAgICAgICAgdGhpcy5waXhlbFN0cmVhbWluZy5kaXNwYXRjaEV2ZW50KG5ldyBfVXRpbF9FdmVudEVtaXR0ZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5BZmtXYXJuaW5nRGVhY3RpdmF0ZUV2ZW50KCkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogU3RhcnQgdGhlIHdhcm5pbmcgdGltZXIgaWYgYSB0aW1lb3V0IGlzIHNldCBncmVhdGVyIHRoYXQgMCBzZWNvbmRzXHJcbiAgICAgKi9cclxuICAgIHN0YXJ0QWZrV2FybmluZ1RpbWVyKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmNvbmZpZy5nZXROdW1lcmljU2V0dGluZ1ZhbHVlKF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uTnVtZXJpY1BhcmFtZXRlcnMuQUZLVGltZW91dFNlY3MpID4gMCAmJlxyXG4gICAgICAgICAgICB0aGlzLmNvbmZpZy5pc0ZsYWdFbmFibGVkKF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uRmxhZ3MuQUZLRGV0ZWN0aW9uKSkge1xyXG4gICAgICAgICAgICB0aGlzLmFjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnJlc2V0QWZrV2FybmluZ1RpbWVyKCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFN0b3AgdGhlIGFmayB3YXJuaW5nIHRpbWVyXHJcbiAgICAgKi9cclxuICAgIHN0b3BBZmtXYXJuaW5nVGltZXIoKSB7XHJcbiAgICAgICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmNvdW50ZG93bkFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLndhcm5UaW1lcik7XHJcbiAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLmNvdW50RG93blRpbWVyKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUGF1c2UgdGhlIHRpbWVyIHdoaWNoIHdoZW4gZWxhcHNlZCB3aWxsIHdhcm4gdGhlIHVzZXIgdGhleSBhcmUgaW5hY3RpdmUuXHJcbiAgICAgKi9cclxuICAgIHBhdXNlQWZrV2FybmluZ1RpbWVyKCkge1xyXG4gICAgICAgIHRoaXMuYWN0aXZlID0gZmFsc2U7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIElmIHRoZSB1c2VyIGludGVyYWN0cyB0aGVuIHJlc2V0IHRoZSB3YXJuaW5nIHRpbWVyLlxyXG4gICAgICovXHJcbiAgICByZXNldEFma1dhcm5pbmdUaW1lcigpIHtcclxuICAgICAgICBpZiAodGhpcy5hY3RpdmUgJiYgdGhpcy5jb25maWcuaXNGbGFnRW5hYmxlZChfQ29uZmlnX0NvbmZpZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLkZsYWdzLkFGS0RldGVjdGlvbikpIHtcclxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMud2FyblRpbWVyKTtcclxuICAgICAgICAgICAgdGhpcy53YXJuVGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHRoaXMuYWN0aXZhdGVBZmtFdmVudCgpLCB0aGlzLmNvbmZpZy5nZXROdW1lcmljU2V0dGluZ1ZhbHVlKF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uTnVtZXJpY1BhcmFtZXRlcnMuQUZLVGltZW91dFNlY3MpICogMTAwMCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTaG93IHRoZSBBRksgb3ZlcmxheSBhbmQgYmVnaW4gdGhlIGNvdW50RG93blxyXG4gICAgICovXHJcbiAgICBhY3RpdmF0ZUFma0V2ZW50KCkge1xyXG4gICAgICAgIC8vIFBhdXNlIHRoZSB0aW1lciB3aGlsZSB0aGUgdXNlciBpcyBsb29raW5nIGF0IHRoZSBpbmFjdGl2aXR5IHdhcm5pbmcgb3ZlcmxheVxyXG4gICAgICAgIHRoaXMucGF1c2VBZmtXYXJuaW5nVGltZXIoKTtcclxuICAgICAgICAvLyBpbnN0YW50aWF0ZSBhIG5ldyBvdmVybGF5XHJcbiAgICAgICAgdGhpcy5waXhlbFN0cmVhbWluZy5kaXNwYXRjaEV2ZW50KG5ldyBfVXRpbF9FdmVudEVtaXR0ZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5BZmtXYXJuaW5nQWN0aXZhdGVFdmVudCh7XHJcbiAgICAgICAgICAgIGNvdW50RG93bjogdGhpcy5jb3VudERvd24sXHJcbiAgICAgICAgICAgIGRpc21pc3NBZms6IHRoaXMub25EaXNtaXNzQWZrXHJcbiAgICAgICAgfSkpO1xyXG4gICAgICAgIC8vIHVwZGF0ZSBvdXIgY291bnREb3duIHRpbWVyIGFuZCBvdmVybGF5IGNvbnRlbnRzXHJcbiAgICAgICAgdGhpcy5jb3VudERvd24gPSB0aGlzLmNsb3NlVGltZW91dDtcclxuICAgICAgICB0aGlzLmNvdW50ZG93bkFjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5waXhlbFN0cmVhbWluZy5kaXNwYXRjaEV2ZW50KG5ldyBfVXRpbF9FdmVudEVtaXR0ZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5BZmtXYXJuaW5nVXBkYXRlRXZlbnQoeyBjb3VudERvd246IHRoaXMuY291bnREb3duIH0pKTtcclxuICAgICAgICAvLyBpZiB3ZSBhcmUgaW4gbG9ja2VkIG1vdXNlIGV4aXQgcG9pbnRlcmxvY2tcclxuICAgICAgICBpZiAoIXRoaXMuY29uZmlnLmlzRmxhZ0VuYWJsZWQoX0NvbmZpZ19Db25maWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5GbGFncy5Ib3ZlcmluZ01vdXNlTW9kZSkpIHtcclxuICAgICAgICAgICAgLy8gbWlub3IgaGFjayB0byBhbGxldmlhdGUgaW9zIG5vdCBzdXBwb3J0aW5nIHBvaW50ZXJsb2NrXHJcbiAgICAgICAgICAgIGlmIChkb2N1bWVudC5leGl0UG9pbnRlckxvY2spIHtcclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmV4aXRQb2ludGVyTG9jaygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHJlc2V0IG91ciBjb3VudERvd24gaW50ZXJ2YWwgYWNjb3JkaW5nbHlcclxuICAgICAgICB0aGlzLmNvdW50RG93blRpbWVyID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmNvdW50RG93bi0tO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5jb3VudERvd24gPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgLy8gVGhlIHVzZXIgZmFpbGVkIHRvIGNsaWNrIHNvIGhpZGUgdGhlIG92ZXJsYXkgYW5kIGRpc2Nvbm5lY3QgdGhlbS5cclxuICAgICAgICAgICAgICAgIHRoaXMucGl4ZWxTdHJlYW1pbmcuZGlzcGF0Y2hFdmVudChuZXcgX1V0aWxfRXZlbnRFbWl0dGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uQWZrVGltZWRPdXRFdmVudCgpKTtcclxuICAgICAgICAgICAgICAgIHRoaXMub25BRktUaW1lZE91dENhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnWW91IGhhdmUgYmVlbiBkaXNjb25uZWN0ZWQgZHVlIHRvIGluYWN0aXZpdHknKTtcclxuICAgICAgICAgICAgICAgIC8vIHN3aXRjaCBvZmYgdGhlIGFmayBmZWF0dXJlIGFzIHN0cmVhbSBoYXMgY2xvc2VkXHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0b3BBZmtXYXJuaW5nVGltZXIoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucGl4ZWxTdHJlYW1pbmcuZGlzcGF0Y2hFdmVudChuZXcgX1V0aWxfRXZlbnRFbWl0dGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uQWZrV2FybmluZ1VwZGF0ZUV2ZW50KHsgY291bnREb3duOiB0aGlzLmNvdW50RG93biB9KSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCAxMDAwKTtcclxuICAgIH1cclxufVxyXG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvQ29uZmlnL0NvbmZpZy50c1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL0NvbmZpZy9Db25maWcudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJDb25maWdcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gQ29uZmlnKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJDb250cm9sU2NoZW1lVHlwZVwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBDb250cm9sU2NoZW1lVHlwZSksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiRmxhZ3NcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gRmxhZ3MpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIk51bWVyaWNQYXJhbWV0ZXJzXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIE51bWVyaWNQYXJhbWV0ZXJzKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJPcHRpb25QYXJhbWV0ZXJzXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIE9wdGlvblBhcmFtZXRlcnMpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIlRleHRQYXJhbWV0ZXJzXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIFRleHRQYXJhbWV0ZXJzKVxuLyogaGFybW9ueSBleHBvcnQgKi8gfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL0xvZ2dlci9Mb2dnZXIgKi8gXCIuL3NyYy9Mb2dnZXIvTG9nZ2VyLnRzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9TZXR0aW5nRmxhZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9TZXR0aW5nRmxhZyAqLyBcIi4vc3JjL0NvbmZpZy9TZXR0aW5nRmxhZy50c1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfU2V0dGluZ051bWJlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9TZXR0aW5nTnVtYmVyICovIFwiLi9zcmMvQ29uZmlnL1NldHRpbmdOdW1iZXIudHNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX1NldHRpbmdUZXh0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL1NldHRpbmdUZXh0ICovIFwiLi9zcmMvQ29uZmlnL1NldHRpbmdUZXh0LnRzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9TZXR0aW5nT3B0aW9uX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL1NldHRpbmdPcHRpb24gKi8gXCIuL3NyYy9Db25maWcvU2V0dGluZ09wdGlvbi50c1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfVXRpbF9FdmVudEVtaXR0ZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL1V0aWwvRXZlbnRFbWl0dGVyICovIFwiLi9zcmMvVXRpbC9FdmVudEVtaXR0ZXIudHNcIik7XG4vLyBDb3B5cmlnaHQgRXBpYyBHYW1lcywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4vKipcclxuICogQSBjb2xsZWN0aW9uIG9mIGZsYWdzIHRoYXQgY2FuIGJlIHRvZ2dsZWQgYW5kIGFyZSBjb3JlIHRvIGFsbCBQaXhlbCBTdHJlYW1pbmcgZXhwZXJpZW5jZXMuXHJcbiAqIFRoZXNlIGFyZSB1c2VkIGluIHRoZSBgQ29uZmlnLkZsYWdzYCBtYXAuXHJcbiAqL1xyXG5jbGFzcyBGbGFncyB7XHJcbn1cclxuRmxhZ3MuQXV0b0Nvbm5lY3QgPSAnQXV0b0Nvbm5lY3QnO1xyXG5GbGFncy5BdXRvUGxheVZpZGVvID0gJ0F1dG9QbGF5VmlkZW8nO1xyXG5GbGFncy5BRktEZXRlY3Rpb24gPSAnVGltZW91dElmSWRsZSc7XHJcbkZsYWdzLkJyb3dzZXJTZW5kT2ZmZXIgPSAnT2ZmZXJUb1JlY2VpdmUnO1xyXG5GbGFncy5Ib3ZlcmluZ01vdXNlTW9kZSA9ICdIb3ZlcmluZ01vdXNlJztcclxuRmxhZ3MuRm9yY2VNb25vQXVkaW8gPSAnRm9yY2VNb25vQXVkaW8nO1xyXG5GbGFncy5Gb3JjZVRVUk4gPSAnRm9yY2VUVVJOJztcclxuRmxhZ3MuRmFrZU1vdXNlV2l0aFRvdWNoZXMgPSAnRmFrZU1vdXNlV2l0aFRvdWNoZXMnO1xyXG5GbGFncy5Jc1F1YWxpdHlDb250cm9sbGVyID0gJ0NvbnRyb2xzUXVhbGl0eSc7XHJcbkZsYWdzLk1hdGNoVmlld3BvcnRSZXNvbHV0aW9uID0gJ01hdGNoVmlld3BvcnRSZXMnO1xyXG5GbGFncy5QcmVmZXJTRlUgPSAncHJlZmVyU0ZVJztcclxuRmxhZ3MuU3RhcnRWaWRlb011dGVkID0gJ1N0YXJ0VmlkZW9NdXRlZCc7XHJcbkZsYWdzLlN1cHByZXNzQnJvd3NlcktleXMgPSAnU3VwcHJlc3NCcm93c2VyS2V5cyc7XHJcbkZsYWdzLlVzZU1pYyA9ICdVc2VNaWMnO1xyXG5GbGFncy5LZXlib2FyZElucHV0ID0gJ0tleWJvYXJkSW5wdXQnO1xyXG5GbGFncy5Nb3VzZUlucHV0ID0gJ01vdXNlSW5wdXQnO1xyXG5GbGFncy5Ub3VjaElucHV0ID0gJ1RvdWNoSW5wdXQnO1xyXG5GbGFncy5HYW1lcGFkSW5wdXQgPSAnR2FtZXBhZElucHV0JztcclxuRmxhZ3MuWFJDb250cm9sbGVySW5wdXQgPSAnWFJDb250cm9sbGVySW5wdXQnO1xyXG5jb25zdCBpc0ZsYWdJZCA9IChpZCkgPT4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoRmxhZ3MpLnNvbWUoKG5hbWUpID0+IEZsYWdzW25hbWVdID09PSBpZCk7XHJcbi8qKlxyXG4gKiBBIGNvbGxlY3Rpb24gb2YgbnVtZXJpYyBwYXJhbWV0ZXJzIHRoYXQgYXJlIGNvcmUgdG8gYWxsIFBpeGVsIFN0cmVhbWluZyBleHBlcmllbmNlcy5cclxuICpcclxuICovXHJcbmNsYXNzIE51bWVyaWNQYXJhbWV0ZXJzIHtcclxufVxyXG5OdW1lcmljUGFyYW1ldGVycy5BRktUaW1lb3V0U2VjcyA9ICdBRktUaW1lb3V0JztcclxuTnVtZXJpY1BhcmFtZXRlcnMuTWluUVAgPSAnTWluUVAnO1xyXG5OdW1lcmljUGFyYW1ldGVycy5NYXhRUCA9ICdNYXhRUCc7XHJcbk51bWVyaWNQYXJhbWV0ZXJzLldlYlJUQ0ZQUyA9ICdXZWJSVENGUFMnO1xyXG5OdW1lcmljUGFyYW1ldGVycy5XZWJSVENNaW5CaXRyYXRlID0gJ1dlYlJUQ01pbkJpdHJhdGUnO1xyXG5OdW1lcmljUGFyYW1ldGVycy5XZWJSVENNYXhCaXRyYXRlID0gJ1dlYlJUQ01heEJpdHJhdGUnO1xyXG5OdW1lcmljUGFyYW1ldGVycy5NYXhSZWNvbm5lY3RBdHRlbXB0cyA9ICdNYXhSZWNvbm5lY3RBdHRlbXB0cyc7XHJcbmNvbnN0IGlzTnVtZXJpY0lkID0gKGlkKSA9PiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhOdW1lcmljUGFyYW1ldGVycykuc29tZSgobmFtZSkgPT4gTnVtZXJpY1BhcmFtZXRlcnNbbmFtZV0gPT09IGlkKTtcclxuLyoqXHJcbiAqIEEgY29sbGVjdGlvbiBvZiB0ZXh0dWFsIHBhcmFtZXRlcnMgdGhhdCBhcmUgY29yZSB0byBhbGwgUGl4ZWwgU3RyZWFtaW5nIGV4cGVyaWVuY2VzLlxyXG4gKlxyXG4gKi9cclxuY2xhc3MgVGV4dFBhcmFtZXRlcnMge1xyXG59XHJcblRleHRQYXJhbWV0ZXJzLlNpZ25hbGxpbmdTZXJ2ZXJVcmwgPSAnc3MnO1xyXG5jb25zdCBpc1RleHRJZCA9IChpZCkgPT4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoVGV4dFBhcmFtZXRlcnMpLnNvbWUoKG5hbWUpID0+IFRleHRQYXJhbWV0ZXJzW25hbWVdID09PSBpZCk7XHJcbi8qKlxyXG4gKiBBIGNvbGxlY3Rpb24gb2YgZW51bSBiYXNlZCBwYXJhbWV0ZXJzIHRoYXQgYXJlIGNvcmUgdG8gYWxsIFBpeGVsIFN0cmVhbWluZyBleHBlcmllbmNlcy5cclxuICpcclxuICovXHJcbmNsYXNzIE9wdGlvblBhcmFtZXRlcnMge1xyXG59XHJcbk9wdGlvblBhcmFtZXRlcnMuUHJlZmVycmVkQ29kZWMgPSAnUHJlZmVycmVkQ29kZWMnO1xyXG5PcHRpb25QYXJhbWV0ZXJzLlN0cmVhbWVySWQgPSAnU3RyZWFtZXJJZCc7XHJcbmNvbnN0IGlzT3B0aW9uSWQgPSAoaWQpID0+IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE9wdGlvblBhcmFtZXRlcnMpLnNvbWUoKG5hbWUpID0+IE9wdGlvblBhcmFtZXRlcnNbbmFtZV0gPT09IGlkKTtcclxuY2xhc3MgQ29uZmlnIHtcclxuICAgIC8vIC0tLS0tLS0tLS0tLSBTZXR0aW5ncyAtLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgY29uc3RydWN0b3IoY29uZmlnID0ge30pIHtcclxuICAgICAgICAvKiBBIG1hcCBvZiBmbGFncyB0aGF0IGNhbiBiZSB0b2dnbGVkIC0gb3B0aW9ucyB0aGF0IGNhbiBiZSBzZXQgaW4gdGhlIGFwcGxpY2F0aW9uIC0gZS5nLiBVc2UgTWljPyAqL1xyXG4gICAgICAgIHRoaXMuZmxhZ3MgPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgLyogQSBtYXAgb2YgbnVtZXJpY2FsIHNldHRpbmdzIC0gb3B0aW9ucyB0aGF0IGNhbiBiZSBpbiB0aGUgYXBwbGljYXRpb24gLSBlLmcuIE1pbkJpdHJhdGUgKi9cclxuICAgICAgICB0aGlzLm51bWVyaWNQYXJhbWV0ZXJzID0gbmV3IE1hcCgpO1xyXG4gICAgICAgIC8qIEEgbWFwIG9mIHRleHQgc2V0dGluZ3MgLSBlLmcuIHNpZ25hbGxpbmcgc2VydmVyIHVybCAqL1xyXG4gICAgICAgIHRoaXMudGV4dFBhcmFtZXRlcnMgPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgLyogQSBtYXAgb2YgZW51bSBiYXNlZCBzZXR0aW5ncyAtIGUuZy4gcHJlZmVycmVkIGNvZGVjICovXHJcbiAgICAgICAgdGhpcy5vcHRpb25QYXJhbWV0ZXJzID0gbmV3IE1hcCgpO1xyXG4gICAgICAgIGNvbnN0IHsgaW5pdGlhbFNldHRpbmdzLCB1c2VVcmxQYXJhbXMgfSA9IGNvbmZpZztcclxuICAgICAgICB0aGlzLl91c2VVcmxQYXJhbXMgPSAhIXVzZVVybFBhcmFtcztcclxuICAgICAgICB0aGlzLnBvcHVsYXRlRGVmYXVsdFNldHRpbmdzKHRoaXMuX3VzZVVybFBhcmFtcyk7XHJcbiAgICAgICAgaWYgKGluaXRpYWxTZXR0aW5ncykge1xyXG4gICAgICAgICAgICB0aGlzLnNldFNldHRpbmdzKGluaXRpYWxTZXR0aW5ncyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBUcnVlIGlmIHJlYWRpbmcgY29uZmlndXJhdGlvbiBpbml0aWFsIHZhbHVlcyBmcm9tIFVSTCBwYXJhbWV0ZXJzLCBhbmRcclxuICAgICAqIHBlcnNpc3RpbmcgY2hhbmdlcyBpbiBVUkwgd2hlbiBjaGFuZ2VkLlxyXG4gICAgICovXHJcbiAgICBnZXQgdXNlVXJsUGFyYW1zKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl91c2VVcmxQYXJhbXM7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFBvcHVsYXRlIHRoZSBkZWZhdWx0IHNldHRpbmdzIGZvciBhIFBpeGVsIFN0cmVhbWluZyBhcHBsaWNhdGlvblxyXG4gICAgICovXHJcbiAgICBwb3B1bGF0ZURlZmF1bHRTZXR0aW5ncyh1c2VVcmxQYXJhbXMpIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUZXh0IFBhcmFtZXRlcnNcclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLnRleHRQYXJhbWV0ZXJzLnNldChUZXh0UGFyYW1ldGVycy5TaWduYWxsaW5nU2VydmVyVXJsLCBuZXcgX1NldHRpbmdUZXh0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uU2V0dGluZ1RleHQoVGV4dFBhcmFtZXRlcnMuU2lnbmFsbGluZ1NlcnZlclVybCwgJ1NpZ25hbGxpbmcgdXJsJywgJ1VybCBvZiB0aGUgc2lnbmFsbGluZyBzZXJ2ZXInLCAobG9jYXRpb24ucHJvdG9jb2wgPT09ICdodHRwczonID8gJ3dzczovLycgOiAnd3M6Ly8nKSArXHJcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZSArXHJcbiAgICAgICAgICAgIC8vIGZvciByZWFkYWJpbGl0eSwgd2Ugb21pdCB0aGUgcG9ydCBpZiBpdCdzIDgwXHJcbiAgICAgICAgICAgICh3aW5kb3cubG9jYXRpb24ucG9ydCA9PT0gJzgwJyB8fFxyXG4gICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLnBvcnQgPT09ICcnXHJcbiAgICAgICAgICAgICAgICA/ICcnXHJcbiAgICAgICAgICAgICAgICA6IGA6JHt3aW5kb3cubG9jYXRpb24ucG9ydH1gKSwgdXNlVXJsUGFyYW1zKSk7XHJcbiAgICAgICAgdGhpcy5vcHRpb25QYXJhbWV0ZXJzLnNldChPcHRpb25QYXJhbWV0ZXJzLlN0cmVhbWVySWQsIG5ldyBfU2V0dGluZ09wdGlvbl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLlNldHRpbmdPcHRpb24oT3B0aW9uUGFyYW1ldGVycy5TdHJlYW1lcklkLCAnU3RyZWFtZXIgSUQnLCAnVGhlIElEIG9mIHRoZSBzdHJlYW1lciB0byBzdHJlYW0uJywgJycsIFtdLCB1c2VVcmxQYXJhbXMpKTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBFbnVtIFBhcmFtZXRlcnNcclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLm9wdGlvblBhcmFtZXRlcnMuc2V0KE9wdGlvblBhcmFtZXRlcnMuUHJlZmVycmVkQ29kZWMsIG5ldyBfU2V0dGluZ09wdGlvbl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLlNldHRpbmdPcHRpb24oT3B0aW9uUGFyYW1ldGVycy5QcmVmZXJyZWRDb2RlYywgJ1ByZWZlcnJlZCBDb2RlYycsICdUaGUgcHJlZmVycmVkIGNvZGVjIHRvIGJlIHVzZWQgZHVyaW5nIGNvZGVjIG5lZ290aWF0aW9uJywgJ0gyNjQgbGV2ZWwtYXN5bW1ldHJ5LWFsbG93ZWQ9MTtwYWNrZXRpemF0aW9uLW1vZGU9MTtwcm9maWxlLWxldmVsLWlkPTQyZTAxZicsIChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGJyb3dzZXJTdXBwb3J0ZWRDb2RlY3MgPSBbXTtcclxuICAgICAgICAgICAgLy8gVHJ5IGdldCB0aGUgaW5mbyBuZWVkZWQgZnJvbSB0aGUgUlRDUnRwUmVjZWl2ZXIuIFRoaXMgaXMgb25seSBhdmFpbGFibGUgb24gY2hyb21lXHJcbiAgICAgICAgICAgIGlmICghUlRDUnRwUmVjZWl2ZXIuZ2V0Q2FwYWJpbGl0aWVzKSB7XHJcbiAgICAgICAgICAgICAgICBicm93c2VyU3VwcG9ydGVkQ29kZWNzLnB1c2goJ09ubHkgYXZhaWxhYmxlIG9uIENocm9tZScpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGJyb3dzZXJTdXBwb3J0ZWRDb2RlY3M7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgbWF0Y2hlciA9IC8oVlBcXGR8SDI2XFxkfEFWMSkuKi87XHJcbiAgICAgICAgICAgIGNvbnN0IGNvZGVjcyA9IFJUQ1J0cFJlY2VpdmVyLmdldENhcGFiaWxpdGllcygndmlkZW8nKS5jb2RlY3M7XHJcbiAgICAgICAgICAgIGNvZGVjcy5mb3JFYWNoKChjb2RlYykgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc3RyID0gY29kZWMubWltZVR5cGUuc3BsaXQoJy8nKVsxXSArXHJcbiAgICAgICAgICAgICAgICAgICAgJyAnICtcclxuICAgICAgICAgICAgICAgICAgICAoY29kZWMuc2RwRm10cExpbmUgfHwgJycpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF0Y2ggPSBtYXRjaGVyLmV4ZWMoc3RyKTtcclxuICAgICAgICAgICAgICAgIGlmIChtYXRjaCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGJyb3dzZXJTdXBwb3J0ZWRDb2RlY3MucHVzaChzdHIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIGJyb3dzZXJTdXBwb3J0ZWRDb2RlY3M7XHJcbiAgICAgICAgfSkoKSwgdXNlVXJsUGFyYW1zKSk7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQm9vbGVhbiBwYXJhbWV0ZXJzXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5mbGFncy5zZXQoRmxhZ3MuQXV0b0Nvbm5lY3QsIG5ldyBfU2V0dGluZ0ZsYWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5TZXR0aW5nRmxhZyhGbGFncy5BdXRvQ29ubmVjdCwgJ0F1dG8gY29ubmVjdCB0byBzdHJlYW0nLCAnV2hldGhlciB3ZSBzaG91bGQgYXR0ZW1wdCB0byBhdXRvIGNvbm5lY3QgdG8gdGhlIHNpZ25hbGxpbmcgc2VydmVyIG9yIHNob3cgYSBjbGljayB0byBzdGFydCBwcm9tcHQuJywgZmFsc2UsIHVzZVVybFBhcmFtcykpO1xyXG4gICAgICAgIHRoaXMuZmxhZ3Muc2V0KEZsYWdzLkF1dG9QbGF5VmlkZW8sIG5ldyBfU2V0dGluZ0ZsYWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5TZXR0aW5nRmxhZyhGbGFncy5BdXRvUGxheVZpZGVvLCAnQXV0byBwbGF5IHZpZGVvJywgJ1doZW4gdmlkZW8gaXMgcmVhZHkgYXV0b21hdGljYWxseSBzdGFydCBwbGF5aW5nIGl0IGFzIG9wcG9zZWQgdG8gc2hvd2luZyBhIHBsYXkgYnV0dG9uLicsIHRydWUsIHVzZVVybFBhcmFtcykpO1xyXG4gICAgICAgIHRoaXMuZmxhZ3Muc2V0KEZsYWdzLkJyb3dzZXJTZW5kT2ZmZXIsIG5ldyBfU2V0dGluZ0ZsYWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5TZXR0aW5nRmxhZyhGbGFncy5Ccm93c2VyU2VuZE9mZmVyLCAnQnJvd3NlciBzZW5kIG9mZmVyJywgJ0Jyb3dzZXIgd2lsbCBpbml0aWF0ZSB0aGUgV2ViUlRDIGhhbmRzaGFrZSBieSBzZW5kaW5nIHRoZSBvZmZlciB0byB0aGUgc3RyZWFtZXInLCBmYWxzZSwgdXNlVXJsUGFyYW1zKSk7XHJcbiAgICAgICAgdGhpcy5mbGFncy5zZXQoRmxhZ3MuVXNlTWljLCBuZXcgX1NldHRpbmdGbGFnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18uU2V0dGluZ0ZsYWcoRmxhZ3MuVXNlTWljLCAnVXNlIG1pY3JvcGhvbmUnLCAnTWFrZSBicm93c2VyIHJlcXVlc3QgbWljcm9waG9uZSBhY2Nlc3MgYW5kIG9wZW4gYW4gaW5wdXQgYXVkaW8gdHJhY2suJywgZmFsc2UsIHVzZVVybFBhcmFtcykpO1xyXG4gICAgICAgIHRoaXMuZmxhZ3Muc2V0KEZsYWdzLlN0YXJ0VmlkZW9NdXRlZCwgbmV3IF9TZXR0aW5nRmxhZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLlNldHRpbmdGbGFnKEZsYWdzLlN0YXJ0VmlkZW9NdXRlZCwgJ1N0YXJ0IHZpZGVvIG11dGVkJywgJ1ZpZGVvIHdpbGwgc3RhcnQgbXV0ZWQgaWYgdHJ1ZS4nLCBmYWxzZSwgdXNlVXJsUGFyYW1zKSk7XHJcbiAgICAgICAgdGhpcy5mbGFncy5zZXQoRmxhZ3MuU3VwcHJlc3NCcm93c2VyS2V5cywgbmV3IF9TZXR0aW5nRmxhZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLlNldHRpbmdGbGFnKEZsYWdzLlN1cHByZXNzQnJvd3NlcktleXMsICdTdXBwcmVzcyBicm93c2VyIGtleXMnLCAnU3VwcHJlc3MgY2VydGFpbiBicm93c2VyIGtleXMgdGhhdCB3ZSB1c2UgaW4gVUUsIGZvciBleGFtcGxlIEY1IHRvIHNob3cgc2hhZGVyIGNvbXBsZXhpdHkgaW5zdGVhZCBvZiByZWZyZXNoIHRoZSBwYWdlLicsIHRydWUsIHVzZVVybFBhcmFtcykpO1xyXG4gICAgICAgIHRoaXMuZmxhZ3Muc2V0KEZsYWdzLlByZWZlclNGVSwgbmV3IF9TZXR0aW5nRmxhZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLlNldHRpbmdGbGFnKEZsYWdzLlByZWZlclNGVSwgJ1ByZWZlciBTRlUnLCAnVHJ5IHRvIGNvbm5lY3QgdG8gdGhlIFNGVSBpbnN0ZWFkIG9mIFAyUC4nLCBmYWxzZSwgdXNlVXJsUGFyYW1zKSk7XHJcbiAgICAgICAgdGhpcy5mbGFncy5zZXQoRmxhZ3MuSXNRdWFsaXR5Q29udHJvbGxlciwgbmV3IF9TZXR0aW5nRmxhZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLlNldHRpbmdGbGFnKEZsYWdzLklzUXVhbGl0eUNvbnRyb2xsZXIsICdJcyBxdWFsaXR5IGNvbnRyb2xsZXI/JywgJ1RydWUgaWYgdGhpcyBwZWVyIGNvbnRyb2xzIHN0cmVhbSBxdWFsaXR5JywgdHJ1ZSwgdXNlVXJsUGFyYW1zKSk7XHJcbiAgICAgICAgdGhpcy5mbGFncy5zZXQoRmxhZ3MuRm9yY2VNb25vQXVkaW8sIG5ldyBfU2V0dGluZ0ZsYWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5TZXR0aW5nRmxhZyhGbGFncy5Gb3JjZU1vbm9BdWRpbywgJ0ZvcmNlIG1vbm8gYXVkaW8nLCAnRm9yY2UgYnJvd3NlciB0byByZXF1ZXN0IG1vbm8gYXVkaW8gaW4gdGhlIFNEUCcsIGZhbHNlLCB1c2VVcmxQYXJhbXMpKTtcclxuICAgICAgICB0aGlzLmZsYWdzLnNldChGbGFncy5Gb3JjZVRVUk4sIG5ldyBfU2V0dGluZ0ZsYWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5TZXR0aW5nRmxhZyhGbGFncy5Gb3JjZVRVUk4sICdGb3JjZSBUVVJOJywgJ09ubHkgZ2VuZXJhdGUgVFVSTi9SZWxheWVkIElDRSBjYW5kaWRhdGVzLicsIGZhbHNlLCB1c2VVcmxQYXJhbXMpKTtcclxuICAgICAgICB0aGlzLmZsYWdzLnNldChGbGFncy5BRktEZXRlY3Rpb24sIG5ldyBfU2V0dGluZ0ZsYWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5TZXR0aW5nRmxhZyhGbGFncy5BRktEZXRlY3Rpb24sICdBRksgaWYgaWRsZScsICdUaW1lb3V0IHRoZSBleHBlcmllbmNlIGlmIHVzZXIgaXMgQUZLIGZvciBhIHBlcmlvZC4nLCBmYWxzZSwgdXNlVXJsUGFyYW1zKSk7XHJcbiAgICAgICAgdGhpcy5mbGFncy5zZXQoRmxhZ3MuTWF0Y2hWaWV3cG9ydFJlc29sdXRpb24sIG5ldyBfU2V0dGluZ0ZsYWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5TZXR0aW5nRmxhZyhGbGFncy5NYXRjaFZpZXdwb3J0UmVzb2x1dGlvbiwgJ01hdGNoIHZpZXdwb3J0IHJlc29sdXRpb24nLCAnUGl4ZWwgU3RyZWFtaW5nIHdpbGwgYmUgaW5zdHJ1Y3RlZCB0byBkeW5hbWljYWxseSByZXNpemUgdGhlIHZpZGVvIHN0cmVhbSB0byBtYXRjaCB0aGUgc2l6ZSBvZiB0aGUgdmlkZW8gZWxlbWVudC4nLCBmYWxzZSwgdXNlVXJsUGFyYW1zKSk7XHJcbiAgICAgICAgdGhpcy5mbGFncy5zZXQoRmxhZ3MuSG92ZXJpbmdNb3VzZU1vZGUsIG5ldyBfU2V0dGluZ0ZsYWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5TZXR0aW5nRmxhZyhGbGFncy5Ib3ZlcmluZ01vdXNlTW9kZSwgJ0NvbnRyb2wgU2NoZW1lOiBMb2NrZWQgTW91c2UnLCAnRWl0aGVyIGxvY2tlZCBtb3VzZSwgd2hlcmUgdGhlIHBvaW50ZXIgaXMgY29uc3VtZWQgYnkgdGhlIHZpZGVvIGFuZCBsb2NrZWQgdG8gaXQsIG9yIGhvdmVyaW5nIG1vdXNlLCB3aGVyZSB0aGUgbW91c2UgaXMgbm90IGNvbnN1bWVkLicsIGZhbHNlLCB1c2VVcmxQYXJhbXMsIChpc0hvdmVyaW5nTW91c2UsIHNldHRpbmcpID0+IHtcclxuICAgICAgICAgICAgc2V0dGluZy5sYWJlbCA9IGBDb250cm9sIFNjaGVtZTogJHtpc0hvdmVyaW5nTW91c2UgPyAnSG92ZXJpbmcnIDogJ0xvY2tlZCd9IE1vdXNlYDtcclxuICAgICAgICB9KSk7XHJcbiAgICAgICAgdGhpcy5mbGFncy5zZXQoRmxhZ3MuRmFrZU1vdXNlV2l0aFRvdWNoZXMsIG5ldyBfU2V0dGluZ0ZsYWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5TZXR0aW5nRmxhZyhGbGFncy5GYWtlTW91c2VXaXRoVG91Y2hlcywgJ0Zha2UgbW91c2Ugd2l0aCB0b3VjaGVzJywgJ0Egc2luZ2xlIGZpbmdlciB0b3VjaCBpcyBjb252ZXJ0ZWQgaW50byBhIG1vdXNlIGV2ZW50LiBUaGlzIGFsbG93cyBhIG5vbi10b3VjaCBhcHBsaWNhdGlvbiB0byBiZSBjb250cm9sbGVkIHBhcnRpYWxseSB2aWEgYSB0b3VjaCBkZXZpY2UuJywgZmFsc2UsIHVzZVVybFBhcmFtcykpO1xyXG4gICAgICAgIHRoaXMuZmxhZ3Muc2V0KEZsYWdzLktleWJvYXJkSW5wdXQsIG5ldyBfU2V0dGluZ0ZsYWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5TZXR0aW5nRmxhZyhGbGFncy5LZXlib2FyZElucHV0LCAnS2V5Ym9hcmQgaW5wdXQnLCAnSWYgZW5hYmxlZCwgc2VuZCBrZXlib2FyZCBldmVudHMgdG8gc3RyZWFtZXInLCB0cnVlLCB1c2VVcmxQYXJhbXMpKTtcclxuICAgICAgICB0aGlzLmZsYWdzLnNldChGbGFncy5Nb3VzZUlucHV0LCBuZXcgX1NldHRpbmdGbGFnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18uU2V0dGluZ0ZsYWcoRmxhZ3MuTW91c2VJbnB1dCwgJ01vdXNlIGlucHV0JywgJ0lmIGVuYWJsZWQsIHNlbmQgbW91c2UgZXZlbnRzIHRvIHN0cmVhbWVyJywgdHJ1ZSwgdXNlVXJsUGFyYW1zKSk7XHJcbiAgICAgICAgdGhpcy5mbGFncy5zZXQoRmxhZ3MuVG91Y2hJbnB1dCwgbmV3IF9TZXR0aW5nRmxhZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLlNldHRpbmdGbGFnKEZsYWdzLlRvdWNoSW5wdXQsICdUb3VjaCBpbnB1dCcsICdJZiBlbmFibGVkLCBzZW5kIHRvdWNoIGV2ZW50cyB0byBzdHJlYW1lcicsIHRydWUsIHVzZVVybFBhcmFtcykpO1xyXG4gICAgICAgIHRoaXMuZmxhZ3Muc2V0KEZsYWdzLkdhbWVwYWRJbnB1dCwgbmV3IF9TZXR0aW5nRmxhZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLlNldHRpbmdGbGFnKEZsYWdzLkdhbWVwYWRJbnB1dCwgJ0dhbWVwYWQgaW5wdXQnLCAnSWYgZW5hYmxlZCwgc2VuZCBnYW1lcGFkIGV2ZW50cyB0byBzdHJlYW1lcicsIHRydWUsIHVzZVVybFBhcmFtcykpO1xyXG4gICAgICAgIHRoaXMuZmxhZ3Muc2V0KEZsYWdzLlhSQ29udHJvbGxlcklucHV0LCBuZXcgX1NldHRpbmdGbGFnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18uU2V0dGluZ0ZsYWcoRmxhZ3MuWFJDb250cm9sbGVySW5wdXQsICdYUiBjb250cm9sbGVyIGlucHV0JywgJ0lmIGVuYWJsZWQsIHNlbmQgWFIgY29udHJvbGxlciBldmVudHMgdG8gc3RyZWFtZXInLCB0cnVlLCB1c2VVcmxQYXJhbXMpKTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBOdW1lcmljIHBhcmFtZXRlcnNcclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLm51bWVyaWNQYXJhbWV0ZXJzLnNldChOdW1lcmljUGFyYW1ldGVycy5BRktUaW1lb3V0U2VjcywgbmV3IF9TZXR0aW5nTnVtYmVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18uU2V0dGluZ051bWJlcihOdW1lcmljUGFyYW1ldGVycy5BRktUaW1lb3V0U2VjcywgJ0FGSyB0aW1lb3V0JywgJ1RoZSB0aW1lIChpbiBzZWNvbmRzKSBpdCB0YWtlcyBmb3IgdGhlIGFwcGxpY2F0aW9uIHRvIHRpbWUgb3V0IGlmIEFGSyB0aW1lb3V0IGlzIGVuYWJsZWQuJywgMCAvKm1pbiovLCA2MDAgLyptYXgqLywgMTIwIC8qdmFsdWUqLywgdXNlVXJsUGFyYW1zKSk7XHJcbiAgICAgICAgdGhpcy5udW1lcmljUGFyYW1ldGVycy5zZXQoTnVtZXJpY1BhcmFtZXRlcnMuTWF4UmVjb25uZWN0QXR0ZW1wdHMsIG5ldyBfU2V0dGluZ051bWJlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fLlNldHRpbmdOdW1iZXIoTnVtZXJpY1BhcmFtZXRlcnMuTWF4UmVjb25uZWN0QXR0ZW1wdHMsICdNYXggUmVjb25uZWN0cycsICdNYXhpbXVtIG51bWJlciBvZiByZWNvbm5lY3RzIHRoZSBhcHBsaWNhdGlvbiB3aWxsIGF0dGVtcHQgd2hlbiBhIHN0cmVhbWVyIGRpc2Nvbm5lY3RzLicsIDAgLyptaW4qLywgOTk5IC8qbWF4Ki8sIDMgLyp2YWx1ZSovLCB1c2VVcmxQYXJhbXMpKTtcclxuICAgICAgICB0aGlzLm51bWVyaWNQYXJhbWV0ZXJzLnNldChOdW1lcmljUGFyYW1ldGVycy5NaW5RUCwgbmV3IF9TZXR0aW5nTnVtYmVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18uU2V0dGluZ051bWJlcihOdW1lcmljUGFyYW1ldGVycy5NaW5RUCwgJ01pbiBRUCcsICdUaGUgbG93ZXIgYm91bmQgZm9yIHRoZSBxdWFudGl6YXRpb24gcGFyYW1ldGVyIChRUCkgb2YgdGhlIGVuY29kZXIuIDAgPSBCZXN0IHF1YWxpdHksIDUxID0gd29yc3QgcXVhbGl0eS4nLCAwIC8qbWluKi8sIDUxIC8qbWF4Ki8sIDAgLyp2YWx1ZSovLCB1c2VVcmxQYXJhbXMpKTtcclxuICAgICAgICB0aGlzLm51bWVyaWNQYXJhbWV0ZXJzLnNldChOdW1lcmljUGFyYW1ldGVycy5NYXhRUCwgbmV3IF9TZXR0aW5nTnVtYmVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18uU2V0dGluZ051bWJlcihOdW1lcmljUGFyYW1ldGVycy5NYXhRUCwgJ01heCBRUCcsICdUaGUgdXBwZXIgYm91bmQgZm9yIHRoZSBxdWFudGl6YXRpb24gcGFyYW1ldGVyIChRUCkgb2YgdGhlIGVuY29kZXIuIDAgPSBCZXN0IHF1YWxpdHksIDUxID0gd29yc3QgcXVhbGl0eS4nLCAwIC8qbWluKi8sIDUxIC8qbWF4Ki8sIDUxIC8qdmFsdWUqLywgdXNlVXJsUGFyYW1zKSk7XHJcbiAgICAgICAgdGhpcy5udW1lcmljUGFyYW1ldGVycy5zZXQoTnVtZXJpY1BhcmFtZXRlcnMuV2ViUlRDRlBTLCBuZXcgX1NldHRpbmdOdW1iZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXy5TZXR0aW5nTnVtYmVyKE51bWVyaWNQYXJhbWV0ZXJzLldlYlJUQ0ZQUywgJ01heCBGUFMnLCAnVGhlIG1heGltdW0gRlBTIHRoYXQgV2ViUlRDIHdpbGwgdHJ5IHRvIHRyYW5zbWl0IGZyYW1lcyBhdC4nLCAxIC8qbWluKi8sIDk5OSAvKm1heCovLCA2MCAvKnZhbHVlKi8sIHVzZVVybFBhcmFtcykpO1xyXG4gICAgICAgIHRoaXMubnVtZXJpY1BhcmFtZXRlcnMuc2V0KE51bWVyaWNQYXJhbWV0ZXJzLldlYlJUQ01pbkJpdHJhdGUsIG5ldyBfU2V0dGluZ051bWJlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fLlNldHRpbmdOdW1iZXIoTnVtZXJpY1BhcmFtZXRlcnMuV2ViUlRDTWluQml0cmF0ZSwgJ01pbiBCaXRyYXRlIChrYnBzKScsICdUaGUgbWluaW11bSBiaXRyYXRlIHRoYXQgV2ViUlRDIHNob3VsZCB1c2UuJywgMCAvKm1pbiovLCA1MDAwMDAgLyptYXgqLywgMCAvKnZhbHVlKi8sIHVzZVVybFBhcmFtcykpO1xyXG4gICAgICAgIHRoaXMubnVtZXJpY1BhcmFtZXRlcnMuc2V0KE51bWVyaWNQYXJhbWV0ZXJzLldlYlJUQ01heEJpdHJhdGUsIG5ldyBfU2V0dGluZ051bWJlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fLlNldHRpbmdOdW1iZXIoTnVtZXJpY1BhcmFtZXRlcnMuV2ViUlRDTWF4Qml0cmF0ZSwgJ01heCBCaXRyYXRlIChrYnBzKScsICdUaGUgbWF4aW11bSBiaXRyYXRlIHRoYXQgV2ViUlRDIHNob3VsZCB1c2UuJywgMCAvKm1pbiovLCA1MDAwMDAgLyptYXgqLywgMCAvKnZhbHVlKi8sIHVzZVVybFBhcmFtcykpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBBZGQgYSBjYWxsYmFjayB0byBmaXJlIHdoZW4gdGhlIG51bWVyaWMgc2V0dGluZyBpcyB0b2dnbGVkLlxyXG4gICAgICogQHBhcmFtIGlkIFRoZSBpZCBvZiB0aGUgZmxhZy5cclxuICAgICAqIEBwYXJhbSBvbkNoYW5nZWRMaXN0ZW5lciBUaGUgY2FsbGJhY2sgdG8gZmlyZSB3aGVuIHRoZSBudW1lcmljIHZhbHVlIGNoYW5nZXMuXHJcbiAgICAgKi9cclxuICAgIF9hZGRPbk51bWVyaWNTZXR0aW5nQ2hhbmdlZExpc3RlbmVyKGlkLCBvbkNoYW5nZWRMaXN0ZW5lcikge1xyXG4gICAgICAgIGlmICh0aGlzLm51bWVyaWNQYXJhbWV0ZXJzLmhhcyhpZCkpIHtcclxuICAgICAgICAgICAgdGhpcy5udW1lcmljUGFyYW1ldGVyc1xyXG4gICAgICAgICAgICAgICAgLmdldChpZClcclxuICAgICAgICAgICAgICAgIC5hZGRPbkNoYW5nZWRMaXN0ZW5lcihvbkNoYW5nZWRMaXN0ZW5lcik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgX2FkZE9uT3B0aW9uU2V0dGluZ0NoYW5nZWRMaXN0ZW5lcihpZCwgb25DaGFuZ2VkTGlzdGVuZXIpIHtcclxuICAgICAgICBpZiAodGhpcy5vcHRpb25QYXJhbWV0ZXJzLmhhcyhpZCkpIHtcclxuICAgICAgICAgICAgdGhpcy5vcHRpb25QYXJhbWV0ZXJzXHJcbiAgICAgICAgICAgICAgICAuZ2V0KGlkKVxyXG4gICAgICAgICAgICAgICAgLmFkZE9uQ2hhbmdlZExpc3RlbmVyKG9uQ2hhbmdlZExpc3RlbmVyKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSBpZCBUaGUgaWQgb2YgdGhlIG51bWVyaWMgc2V0dGluZyB3ZSBhcmUgaW50ZXJlc3RlZCBpbiBnZXR0aW5nIGEgdmFsdWUgZm9yLlxyXG4gICAgICogQHJldHVybnMgVGhlIG51bWVyaWMgdmFsdWUgc3RvcmVkIGluIHRoZSBwYXJhbWV0ZXIgd2l0aCB0aGUgcGFzc2VkIGlkLlxyXG4gICAgICovXHJcbiAgICBnZXROdW1lcmljU2V0dGluZ1ZhbHVlKGlkKSB7XHJcbiAgICAgICAgaWYgKHRoaXMubnVtZXJpY1BhcmFtZXRlcnMuaGFzKGlkKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5udW1lcmljUGFyYW1ldGVycy5nZXQoaWQpLm51bWJlcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVGhlcmUgaXMgbm8gbnVtZXJpYyBzZXR0aW5nIHdpdGggdGhlIGlkIG9mICR7aWR9YCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0gaWQgVGhlIGlkIG9mIHRoZSB0ZXh0IHNldHRpbmcgd2UgYXJlIGludGVyZXN0ZWQgaW4gZ2V0dGluZyBhIHZhbHVlIGZvci5cclxuICAgICAqIEByZXR1cm5zIFRoZSB0ZXh0IHZhbHVlIHN0b3JlZCBpbiB0aGUgcGFyYW1ldGVyIHdpdGggdGhlIHBhc3NlZCBpZC5cclxuICAgICAqL1xyXG4gICAgZ2V0VGV4dFNldHRpbmdWYWx1ZShpZCkge1xyXG4gICAgICAgIGlmICh0aGlzLnRleHRQYXJhbWV0ZXJzLmhhcyhpZCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMudGV4dFBhcmFtZXRlcnMuZ2V0KGlkKS52YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVGhlcmUgaXMgbm8gbnVtZXJpYyBzZXR0aW5nIHdpdGggdGhlIGlkIG9mICR7aWR9YCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgbnVtYmVyIGluIHRoZSBzZXR0aW5nLlxyXG4gICAgICogQHBhcmFtIGlkIFRoZSBpZCBvZiB0aGUgbnVtZXJpYyBzZXR0aW5nIHdlIGFyZSBpbnRlcmVzdGVkIGluLlxyXG4gICAgICogQHBhcmFtIHZhbHVlIFRoZSBudW1lcmljIHZhbHVlIHRvIHNldC5cclxuICAgICAqL1xyXG4gICAgc2V0TnVtZXJpY1NldHRpbmcoaWQsIHZhbHVlKSB7XHJcbiAgICAgICAgaWYgKHRoaXMubnVtZXJpY1BhcmFtZXRlcnMuaGFzKGlkKSkge1xyXG4gICAgICAgICAgICB0aGlzLm51bWVyaWNQYXJhbWV0ZXJzLmdldChpZCkubnVtYmVyID0gdmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFRoZXJlIGlzIG5vIG51bWVyaWMgc2V0dGluZyB3aXRoIHRoZSBpZCBvZiAke2lkfWApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQWRkIGEgY2FsbGJhY2sgdG8gZmlyZSB3aGVuIHRoZSBmbGFnIGlzIHRvZ2dsZWQuXHJcbiAgICAgKiBAcGFyYW0gaWQgVGhlIGlkIG9mIHRoZSBmbGFnLlxyXG4gICAgICogQHBhcmFtIG9uQ2hhbmdlTGlzdGVuZXIgVGhlIGNhbGxiYWNrIHRvIGZpcmUgd2hlbiB0aGUgdmFsdWUgY2hhbmdlcy5cclxuICAgICAqL1xyXG4gICAgX2FkZE9uU2V0dGluZ0NoYW5nZWRMaXN0ZW5lcihpZCwgb25DaGFuZ2VMaXN0ZW5lcikge1xyXG4gICAgICAgIGlmICh0aGlzLmZsYWdzLmhhcyhpZCkpIHtcclxuICAgICAgICAgICAgdGhpcy5mbGFncy5nZXQoaWQpLm9uQ2hhbmdlID0gb25DaGFuZ2VMaXN0ZW5lcjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEFkZCBhIGNhbGxiYWNrIHRvIGZpcmUgd2hlbiB0aGUgdGV4dCBpcyBjaGFuZ2VkLlxyXG4gICAgICogQHBhcmFtIGlkIFRoZSBpZCBvZiB0aGUgZmxhZy5cclxuICAgICAqIEBwYXJhbSBvbkNoYW5nZUxpc3RlbmVyIFRoZSBjYWxsYmFjayB0byBmaXJlIHdoZW4gdGhlIHZhbHVlIGNoYW5nZXMuXHJcbiAgICAgKi9cclxuICAgIF9hZGRPblRleHRTZXR0aW5nQ2hhbmdlZExpc3RlbmVyKGlkLCBvbkNoYW5nZUxpc3RlbmVyKSB7XHJcbiAgICAgICAgaWYgKHRoaXMudGV4dFBhcmFtZXRlcnMuaGFzKGlkKSkge1xyXG4gICAgICAgICAgICB0aGlzLnRleHRQYXJhbWV0ZXJzLmdldChpZCkub25DaGFuZ2UgPSBvbkNoYW5nZUxpc3RlbmVyO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogR2V0IHRoZSBvcHRpb24gd2hpY2ggaGFzIHRoZSBnaXZlbiBpZC5cclxuICAgICAqIEBwYXJhbSBpZCBUaGUgaWQgb2YgdGhlIG9wdGlvbi5cclxuICAgICAqIEByZXR1cm5zIFRoZSBTZXR0aW5nT3B0aW9uIG9iamVjdCBtYXRjaGluZyBpZFxyXG4gICAgICovXHJcbiAgICBnZXRTZXR0aW5nT3B0aW9uKGlkKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9uUGFyYW1ldGVycy5nZXQoaWQpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgdGhlIHZhbHVlIG9mIHRoZSBjb25maWd1cmF0aW9uIGZsYWcgd2hpY2ggaGFzIHRoZSBnaXZlbiBpZC5cclxuICAgICAqIEBwYXJhbSBpZCBUaGUgdW5pcXVlIGlkIGZvciB0aGUgZmxhZy5cclxuICAgICAqIEByZXR1cm5zIFRydWUgaWYgdGhlIGZsYWcgaXMgZW5hYmxlZC5cclxuICAgICAqL1xyXG4gICAgaXNGbGFnRW5hYmxlZChpZCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmZsYWdzLmdldChpZCkuZmxhZztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogU2V0IGZsYWcgdG8gYmUgZW5hYmxlZC9kaXNhYmxlZC5cclxuICAgICAqIEBwYXJhbSBpZCBUaGUgaWQgb2YgdGhlIGZsYWcgdG8gdG9nZ2xlLlxyXG4gICAgICogQHBhcmFtIGZsYWdFbmFibGVkIFRydWUgaWYgdGhlIGZsYWcgc2hvdWxkIGJlIGVuYWJsZWQuXHJcbiAgICAgKi9cclxuICAgIHNldEZsYWdFbmFibGVkKGlkLCBmbGFnRW5hYmxlZCkge1xyXG4gICAgICAgIGlmICghdGhpcy5mbGFncy5oYXMoaWQpKSB7XHJcbiAgICAgICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18uTG9nZ2VyLldhcm5pbmcoX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBgQ2Fubm90IHRvZ2dsZSBmbGFnIGNhbGxlZCAke2lkfSAtIGl0IGRvZXMgbm90IGV4aXN0IGluIHRoZSBDb25maWcuZmxhZ3MgbWFwLmApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5mbGFncy5nZXQoaWQpLmZsYWcgPSBmbGFnRW5hYmxlZDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFNldCB0aGUgdGV4dCBzZXR0aW5nLlxyXG4gICAgICogQHBhcmFtIGlkIFRoZSBpZCBvZiB0aGUgc2V0dGluZ1xyXG4gICAgICogQHBhcmFtIHNldHRpbmdWYWx1ZSBUaGUgdmFsdWUgdG8gc2V0IGluIHRoZSBzZXR0aW5nLlxyXG4gICAgICovXHJcbiAgICBzZXRUZXh0U2V0dGluZyhpZCwgc2V0dGluZ1ZhbHVlKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnRleHRQYXJhbWV0ZXJzLmhhcyhpZCkpIHtcclxuICAgICAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXy5Mb2dnZXIuV2FybmluZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksIGBDYW5ub3Qgc2V0IHRleHQgc2V0dGluZyBjYWxsZWQgJHtpZH0gLSBpdCBkb2VzIG5vdCBleGlzdCBpbiB0aGUgQ29uZmlnLnRleHRQYXJhbWV0ZXJzIG1hcC5gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMudGV4dFBhcmFtZXRlcnMuZ2V0KGlkKS50ZXh0ID0gc2V0dGluZ1ZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogU2V0IHRoZSBvcHRpb24gc2V0dGluZyBsaXN0IG9mIG9wdGlvbnMuXHJcbiAgICAgKiBAcGFyYW0gaWQgVGhlIGlkIG9mIHRoZSBzZXR0aW5nXHJcbiAgICAgKiBAcGFyYW0gc2V0dGluZ09wdGlvbnMgVGhlIHZhbHVlcyB0aGUgc2V0dGluZyBjb3VsZCB0YWtlXHJcbiAgICAgKi9cclxuICAgIHNldE9wdGlvblNldHRpbmdPcHRpb25zKGlkLCBzZXR0aW5nT3B0aW9ucykge1xyXG4gICAgICAgIGlmICghdGhpcy5vcHRpb25QYXJhbWV0ZXJzLmhhcyhpZCkpIHtcclxuICAgICAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXy5Mb2dnZXIuV2FybmluZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksIGBDYW5ub3Qgc2V0IHRleHQgc2V0dGluZyBjYWxsZWQgJHtpZH0gLSBpdCBkb2VzIG5vdCBleGlzdCBpbiB0aGUgQ29uZmlnLm9wdGlvblBhcmFtZXRlcnMgbWFwLmApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5vcHRpb25QYXJhbWV0ZXJzLmdldChpZCkub3B0aW9ucyA9IHNldHRpbmdPcHRpb25zO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogU2V0IG9wdGlvbiBlbnVtIHNldHRpbmdzIHNlbGVjdGVkIG9wdGlvbi5cclxuICAgICAqIEBwYXJhbSBpZCBUaGUgaWQgb2YgdGhlIHNldHRpbmdcclxuICAgICAqIEBwYXJhbSBzZXR0aW5nT3B0aW9ucyBUaGUgdmFsdWUgdG8gc2VsZWN0IG91dCBvZiBhbGwgdGhlIG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgc2V0T3B0aW9uU2V0dGluZ1ZhbHVlKGlkLCBzZXR0aW5nVmFsdWUpIHtcclxuICAgICAgICBpZiAoIXRoaXMub3B0aW9uUGFyYW1ldGVycy5oYXMoaWQpKSB7XHJcbiAgICAgICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18uTG9nZ2VyLldhcm5pbmcoX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBgQ2Fubm90IHNldCB0ZXh0IHNldHRpbmcgY2FsbGVkICR7aWR9IC0gaXQgZG9lcyBub3QgZXhpc3QgaW4gdGhlIENvbmZpZy5lbnVtUGFyYW1ldGVycyBtYXAuYCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLm9wdGlvblBhcmFtZXRlcnMuZ2V0KGlkKS5zZWxlY3RlZCA9IHNldHRpbmdWYWx1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFNldCB0aGUgbGFiZWwgZm9yIHRoZSBmbGFnLlxyXG4gICAgICogQHBhcmFtIGlkIFRoZSBpZCBvZiB0aGUgZmxhZy5cclxuICAgICAqIEBwYXJhbSBsYWJlbCBUaGUgbmV3IGxhYmVsIHRvIHVzZSBmb3IgdGhlIGZsYWcuXHJcbiAgICAgKi9cclxuICAgIHNldEZsYWdMYWJlbChpZCwgbGFiZWwpIHtcclxuICAgICAgICBpZiAoIXRoaXMuZmxhZ3MuaGFzKGlkKSkge1xyXG4gICAgICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fLkxvZ2dlci5XYXJuaW5nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgYENhbm5vdCBzZXQgbGFiZWwgZm9yIGZsYWcgY2FsbGVkICR7aWR9IC0gaXQgZG9lcyBub3QgZXhpc3QgaW4gdGhlIENvbmZpZy5mbGFncyBtYXAuYCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmZsYWdzLmdldChpZCkubGFiZWwgPSBsYWJlbDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFNldCBhIHN1YnNldCBvZiBhbGwgc2V0dGluZ3MgaW4gb25lIGZ1bmN0aW9uIGNhbGwuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHNldHRpbmdzIEEgKHBhcnRpYWwpIGxpc3Qgb2Ygc2V0dGluZ3MgdG8gc2V0XHJcbiAgICAgKi9cclxuICAgIHNldFNldHRpbmdzKHNldHRpbmdzKSB7XHJcbiAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMoc2V0dGluZ3MpKSB7XHJcbiAgICAgICAgICAgIGlmIChpc0ZsYWdJZChrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldEZsYWdFbmFibGVkKGtleSwgc2V0dGluZ3Nba2V5XSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoaXNOdW1lcmljSWQoa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXROdW1lcmljU2V0dGluZyhrZXksIHNldHRpbmdzW2tleV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGlzVGV4dElkKGtleSkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0VGV4dFNldHRpbmcoa2V5LCBzZXR0aW5nc1trZXldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChpc09wdGlvbklkKGtleSkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0T3B0aW9uU2V0dGluZ1ZhbHVlKGtleSwgc2V0dGluZ3Nba2V5XSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEdldCBhbGwgc2V0dGluZ3NcclxuICAgICAqIEByZXR1cm5zIEFsbCBzZXR0aW5nIHZhbHVlcyBhcyBhbiBvYmplY3Qgd2l0aCBzZXR0aW5nIGlkcyBhcyBrZXlzXHJcbiAgICAgKi9cclxuICAgIGdldFNldHRpbmdzKCkge1xyXG4gICAgICAgIGNvbnN0IHNldHRpbmdzID0ge307XHJcbiAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgdGhpcy5mbGFncy5lbnRyaWVzKCkpIHtcclxuICAgICAgICAgICAgc2V0dGluZ3Nba2V5XSA9IHZhbHVlLmZsYWc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIHRoaXMubnVtZXJpY1BhcmFtZXRlcnMuZW50cmllcygpKSB7XHJcbiAgICAgICAgICAgIHNldHRpbmdzW2tleV0gPSB2YWx1ZS5udW1iZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIHRoaXMudGV4dFBhcmFtZXRlcnMuZW50cmllcygpKSB7XHJcbiAgICAgICAgICAgIHNldHRpbmdzW2tleV0gPSB2YWx1ZS50ZXh0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiB0aGlzLm9wdGlvblBhcmFtZXRlcnMuZW50cmllcygpKSB7XHJcbiAgICAgICAgICAgIHNldHRpbmdzW2tleV0gPSB2YWx1ZS5zZWxlY3RlZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHNldHRpbmdzO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgYWxsIEZsYWcgc2V0dGluZ3MgYXMgYW4gYXJyYXkuXHJcbiAgICAgKiBAcmV0dXJucyBBbGwgU2V0dGluZ0ZsYWcgb2JqZWN0c1xyXG4gICAgICovXHJcbiAgICBnZXRGbGFncygpIHtcclxuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLmZsYWdzLnZhbHVlcygpKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogR2V0IGFsbCBUZXh0IHNldHRpbmdzIGFzIGFuIGFycmF5LlxyXG4gICAgICogQHJldHVybnMgQWxsIFNldHRpbmdUZXh0IG9iamVjdHNcclxuICAgICAqL1xyXG4gICAgZ2V0VGV4dFNldHRpbmdzKCkge1xyXG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMudGV4dFBhcmFtZXRlcnMudmFsdWVzKCkpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgYWxsIE51bWJlciBzZXR0aW5ncyBhcyBhbiBhcnJheS5cclxuICAgICAqIEByZXR1cm5zIEFsbCBTZXR0aW5nTnVtYmVyIG9iamVjdHNcclxuICAgICAqL1xyXG4gICAgZ2V0TnVtZXJpY1NldHRpbmdzKCkge1xyXG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMubnVtZXJpY1BhcmFtZXRlcnMudmFsdWVzKCkpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgYWxsIE9wdGlvbiBzZXR0aW5ncyBhcyBhbiBhcnJheS5cclxuICAgICAqIEByZXR1cm5zIEFsbCBTZXR0aW5nT3B0aW9uIG9iamVjdHNcclxuICAgICAqL1xyXG4gICAgZ2V0T3B0aW9uU2V0dGluZ3MoKSB7XHJcbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5vcHRpb25QYXJhbWV0ZXJzLnZhbHVlcygpKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogRW1pdCBldmVudHMgd2hlbiBzZXR0aW5ncyBjaGFuZ2UuXHJcbiAgICAgKiBAcGFyYW0gZXZlbnRFbWl0dGVyXHJcbiAgICAgKi9cclxuICAgIF9yZWdpc3Rlck9uQ2hhbmdlRXZlbnRzKGV2ZW50RW1pdHRlcikge1xyXG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIHRoaXMuZmxhZ3Mua2V5cygpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGZsYWcgPSB0aGlzLmZsYWdzLmdldChrZXkpO1xyXG4gICAgICAgICAgICBpZiAoZmxhZykge1xyXG4gICAgICAgICAgICAgICAgZmxhZy5vbkNoYW5nZUVtaXQgPSAobmV3VmFsdWUpID0+IGV2ZW50RW1pdHRlci5kaXNwYXRjaEV2ZW50KG5ldyBfVXRpbF9FdmVudEVtaXR0ZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfXy5TZXR0aW5nc0NoYW5nZWRFdmVudCh7XHJcbiAgICAgICAgICAgICAgICAgICAgaWQ6IGZsYWcuaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2ZsYWcnLFxyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBuZXdWYWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IGZsYWdcclxuICAgICAgICAgICAgICAgIH0pKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiB0aGlzLm51bWVyaWNQYXJhbWV0ZXJzLmtleXMoKSkge1xyXG4gICAgICAgICAgICBjb25zdCBudW1iZXIgPSB0aGlzLm51bWVyaWNQYXJhbWV0ZXJzLmdldChrZXkpO1xyXG4gICAgICAgICAgICBpZiAobnVtYmVyKSB7XHJcbiAgICAgICAgICAgICAgICBudW1iZXIub25DaGFuZ2VFbWl0ID0gKG5ld1ZhbHVlKSA9PiBldmVudEVtaXR0ZXIuZGlzcGF0Y2hFdmVudChuZXcgX1V0aWxfRXZlbnRFbWl0dGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X18uU2V0dGluZ3NDaGFuZ2VkRXZlbnQoe1xyXG4gICAgICAgICAgICAgICAgICAgIGlkOiBudW1iZXIuaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ251bWJlcicsXHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IG5ld1ZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldDogbnVtYmVyXHJcbiAgICAgICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgdGhpcy50ZXh0UGFyYW1ldGVycy5rZXlzKCkpIHtcclxuICAgICAgICAgICAgY29uc3QgdGV4dCA9IHRoaXMudGV4dFBhcmFtZXRlcnMuZ2V0KGtleSk7XHJcbiAgICAgICAgICAgIGlmICh0ZXh0KSB7XHJcbiAgICAgICAgICAgICAgICB0ZXh0Lm9uQ2hhbmdlRW1pdCA9IChuZXdWYWx1ZSkgPT4gZXZlbnRFbWl0dGVyLmRpc3BhdGNoRXZlbnQobmV3IF9VdGlsX0V2ZW50RW1pdHRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fLlNldHRpbmdzQ2hhbmdlZEV2ZW50KHtcclxuICAgICAgICAgICAgICAgICAgICBpZDogdGV4dC5pZCxcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiAndGV4dCcsXHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IG5ld1ZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldDogdGV4dFxyXG4gICAgICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIHRoaXMub3B0aW9uUGFyYW1ldGVycy5rZXlzKCkpIHtcclxuICAgICAgICAgICAgY29uc3Qgb3B0aW9uID0gdGhpcy5vcHRpb25QYXJhbWV0ZXJzLmdldChrZXkpO1xyXG4gICAgICAgICAgICBpZiAob3B0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICBvcHRpb24ub25DaGFuZ2VFbWl0ID0gKG5ld1ZhbHVlKSA9PiBldmVudEVtaXR0ZXIuZGlzcGF0Y2hFdmVudChuZXcgX1V0aWxfRXZlbnRFbWl0dGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X18uU2V0dGluZ3NDaGFuZ2VkRXZlbnQoe1xyXG4gICAgICAgICAgICAgICAgICAgIGlkOiBvcHRpb24uaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ29wdGlvbicsXHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IG5ld1ZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldDogb3B0aW9uXHJcbiAgICAgICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIFRoZSBlbnVtIGFzc29jaWF0ZWQgd2l0aCB0aGUgbW91c2UgYmVpbmcgbG9ja2VkIG9yIGhvdmVyaW5nXHJcbiAqL1xyXG52YXIgQ29udHJvbFNjaGVtZVR5cGU7XHJcbihmdW5jdGlvbiAoQ29udHJvbFNjaGVtZVR5cGUpIHtcclxuICAgIENvbnRyb2xTY2hlbWVUeXBlW0NvbnRyb2xTY2hlbWVUeXBlW1wiTG9ja2VkTW91c2VcIl0gPSAwXSA9IFwiTG9ja2VkTW91c2VcIjtcclxuICAgIENvbnRyb2xTY2hlbWVUeXBlW0NvbnRyb2xTY2hlbWVUeXBlW1wiSG92ZXJpbmdNb3VzZVwiXSA9IDFdID0gXCJIb3ZlcmluZ01vdXNlXCI7XHJcbn0pKENvbnRyb2xTY2hlbWVUeXBlIHx8IChDb250cm9sU2NoZW1lVHlwZSA9IHt9KSk7XHJcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9Db25maWcvU2V0dGluZ0Jhc2UudHNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL0NvbmZpZy9TZXR0aW5nQmFzZS50cyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiU2V0dGluZ0Jhc2VcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gU2V0dGluZ0Jhc2UpXG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcbi8vIENvcHlyaWdodCBFcGljIEdhbWVzLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcbi8qKlxyXG4gKiBCYXNlIGNsYXNzIGZvciBhIHNldHRpbmcgdGhhdCBoYXMgYSB0ZXh0IGxhYmVsIGFuZCBhbiBhcmJpdHJhcnkgc2V0dGluZyB2YWx1ZSBpdCBzdG9yZXMuXHJcbiAqL1xyXG5jbGFzcyBTZXR0aW5nQmFzZSB7XHJcbiAgICBjb25zdHJ1Y3RvcihpZCwgbGFiZWwsIGRlc2NyaXB0aW9uLCBkZWZhdWx0U2V0dGluZ1ZhbHVlLCBcclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZW1wdHktZnVuY3Rpb25cclxuICAgIGRlZmF1bHRPbkNoYW5nZUxpc3RlbmVyID0gKCkgPT4geyB9KSB7XHJcbiAgICAgICAgdGhpcy5vbkNoYW5nZSA9IGRlZmF1bHRPbkNoYW5nZUxpc3RlbmVyO1xyXG4gICAgICAgIHRoaXMub25DaGFuZ2VFbWl0ID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAvKiBEbyBub3RoaW5nLCB0byBiZSBvdmVycmlkZGVuLiAqL1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xyXG4gICAgICAgIHRoaXMuZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcclxuICAgICAgICB0aGlzLmxhYmVsID0gbGFiZWw7XHJcbiAgICAgICAgdGhpcy52YWx1ZSA9IGRlZmF1bHRTZXR0aW5nVmFsdWU7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFNldCB0aGUgbGFiZWwgdGV4dCBmb3IgdGhlIHNldHRpbmcuXHJcbiAgICAgKiBAcGFyYW0gbGFiZWwgc2V0dGluZyBsYWJlbC5cclxuICAgICAqL1xyXG4gICAgc2V0IGxhYmVsKGluTGFiZWwpIHtcclxuICAgICAgICB0aGlzLl9sYWJlbCA9IGluTGFiZWw7XHJcbiAgICAgICAgdGhpcy5vbkNoYW5nZUVtaXQodGhpcy5fdmFsdWUpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAcmV0dXJucyBUaGUgbGFiZWwgdGV4dCBmb3IgdGhlIHNldHRpbmcuXHJcbiAgICAgKi9cclxuICAgIGdldCBsYWJlbCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fbGFiZWw7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEByZXR1cm4gVGhlIHNldHRpbmcncyB2YWx1ZS5cclxuICAgICAqL1xyXG4gICAgZ2V0IHZhbHVlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl92YWx1ZTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVXBkYXRlIHRoZSBzZXR0aW5nJ3Mgc3RvcmVkIHZhbHVlLlxyXG4gICAgICogQHBhcmFtIGluVmFsdWUgVGhlIG5ldyB2YWx1ZSBmb3IgdGhlIHNldHRpbmcuXHJcbiAgICAgKi9cclxuICAgIHNldCB2YWx1ZShpblZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5fdmFsdWUgPSBpblZhbHVlO1xyXG4gICAgICAgIHRoaXMub25DaGFuZ2UodGhpcy5fdmFsdWUsIHRoaXMpO1xyXG4gICAgICAgIHRoaXMub25DaGFuZ2VFbWl0KHRoaXMuX3ZhbHVlKTtcclxuICAgIH1cclxufVxyXG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvQ29uZmlnL1NldHRpbmdGbGFnLnRzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9Db25maWcvU2V0dGluZ0ZsYWcudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywge1xuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIlNldHRpbmdGbGFnXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIFNldHRpbmdGbGFnKVxuLyogaGFybW9ueSBleHBvcnQgKi8gfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX1NldHRpbmdCYXNlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL1NldHRpbmdCYXNlICovIFwiLi9zcmMvQ29uZmlnL1NldHRpbmdCYXNlLnRzXCIpO1xuLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuXHJcbi8qKlxyXG4gKiBBIGJvb2xlYW4gZmxhZyBzZXR0aW5nIG9iamVjdCB3aXRoIGEgdGV4dCBsYWJlbC5cclxuICovXHJcbmNsYXNzIFNldHRpbmdGbGFnIGV4dGVuZHMgX1NldHRpbmdCYXNlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uU2V0dGluZ0Jhc2Uge1xyXG4gICAgY29uc3RydWN0b3IoaWQsIGxhYmVsLCBkZXNjcmlwdGlvbiwgZGVmYXVsdEZsYWdWYWx1ZSwgdXNlVXJsUGFyYW1zLCBcclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZW1wdHktZnVuY3Rpb25cclxuICAgIGRlZmF1bHRPbkNoYW5nZUxpc3RlbmVyID0gKCkgPT4geyB9KSB7XHJcbiAgICAgICAgc3VwZXIoaWQsIGxhYmVsLCBkZXNjcmlwdGlvbiwgZGVmYXVsdEZsYWdWYWx1ZSwgZGVmYXVsdE9uQ2hhbmdlTGlzdGVuZXIpO1xyXG4gICAgICAgIGNvbnN0IHVybFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMod2luZG93LmxvY2F0aW9uLnNlYXJjaCk7XHJcbiAgICAgICAgaWYgKCF1c2VVcmxQYXJhbXMgfHwgIXVybFBhcmFtcy5oYXModGhpcy5pZCkpIHtcclxuICAgICAgICAgICAgdGhpcy5mbGFnID0gZGVmYXVsdEZsYWdWYWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIHBhcnNlIGZsYWcgZnJvbSB1cmwgcGFyYW1ldGVyc1xyXG4gICAgICAgICAgICBjb25zdCB1cmxQYXJhbUZsYWcgPSB0aGlzLmdldFVybFBhcmFtRmxhZygpO1xyXG4gICAgICAgICAgICB0aGlzLmZsYWcgPSB1cmxQYXJhbUZsYWc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMudXNlVXJsUGFyYW1zID0gdXNlVXJsUGFyYW1zO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBQYXJzZSB0aGUgZmxhZyB2YWx1ZSBmcm9tIHRoZSB1cmwgcGFyYW1ldGVycy5cclxuICAgICAqIEByZXR1cm5zIFRydWUgaWYgdGhlIHVybCBwYXJhbWV0ZXJzIGNvbnRhaW5zIC8/aWQsIGJ1dCBGYWxzZSBpZiAvP2lkPWZhbHNlXHJcbiAgICAgKi9cclxuICAgIGdldFVybFBhcmFtRmxhZygpIHtcclxuICAgICAgICBjb25zdCB1cmxQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpO1xyXG4gICAgICAgIGlmICh1cmxQYXJhbXMuaGFzKHRoaXMuaWQpKSB7XHJcbiAgICAgICAgICAgIGlmICh1cmxQYXJhbXMuZ2V0KHRoaXMuaWQpID09PSAnZmFsc2UnIHx8XHJcbiAgICAgICAgICAgICAgICB1cmxQYXJhbXMuZ2V0KHRoaXMuaWQpID09PSAnRmFsc2UnKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUGVyc2lzdCB0aGUgc2V0dGluZyB2YWx1ZSBpbiBVUkwuXHJcbiAgICAgKi9cclxuICAgIHVwZGF0ZVVSTFBhcmFtcygpIHtcclxuICAgICAgICBpZiAodGhpcy51c2VVcmxQYXJhbXMpIHtcclxuICAgICAgICAgICAgLy8gc2V0IHVybCBwYXJhbXNcclxuICAgICAgICAgICAgY29uc3QgdXJsUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh3aW5kb3cubG9jYXRpb24uc2VhcmNoKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuZmxhZyA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgdXJsUGFyYW1zLnNldCh0aGlzLmlkLCAndHJ1ZScpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdXJsUGFyYW1zLnNldCh0aGlzLmlkLCAnZmFsc2UnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUoe30sICcnLCB1cmxQYXJhbXMudG9TdHJpbmcoKSAhPT0gJydcclxuICAgICAgICAgICAgICAgID8gYCR7bG9jYXRpb24ucGF0aG5hbWV9PyR7dXJsUGFyYW1zfWBcclxuICAgICAgICAgICAgICAgIDogYCR7bG9jYXRpb24ucGF0aG5hbWV9YCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBFbmFibGVzIHRoaXMgZmxhZy5cclxuICAgICAqL1xyXG4gICAgZW5hYmxlKCkge1xyXG4gICAgICAgIHRoaXMuZmxhZyA9IHRydWU7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEByZXR1cm4gVGhlIHNldHRpbmcncyB2YWx1ZS5cclxuICAgICAqL1xyXG4gICAgZ2V0IGZsYWcoKSB7XHJcbiAgICAgICAgcmV0dXJuICEhdGhpcy52YWx1ZTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVXBkYXRlIHRoZSBzZXR0aW5nJ3Mgc3RvcmVkIHZhbHVlLlxyXG4gICAgICogQHBhcmFtIGluVmFsdWUgVGhlIG5ldyB2YWx1ZSBmb3IgdGhlIHNldHRpbmcuXHJcbiAgICAgKi9cclxuICAgIHNldCBmbGFnKGluVmFsdWUpIHtcclxuICAgICAgICB0aGlzLnZhbHVlID0gaW5WYWx1ZTtcclxuICAgIH1cclxufVxyXG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvQ29uZmlnL1NldHRpbmdOdW1iZXIudHNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvQ29uZmlnL1NldHRpbmdOdW1iZXIudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiU2V0dGluZ051bWJlclwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBTZXR0aW5nTnVtYmVyKVxuLyogaGFybW9ueSBleHBvcnQgKi8gfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX1NldHRpbmdCYXNlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL1NldHRpbmdCYXNlICovIFwiLi9zcmMvQ29uZmlnL1NldHRpbmdCYXNlLnRzXCIpO1xuLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuXHJcbi8qKlxyXG4gKiBBIG51bWJlciBzZXR0aW5nIG9iamVjdCB3aXRoIGEgdGV4dCBsYWJlbC4gTWluIGFuZCBtYXggbGltaXQgdGhlIHJhbmdlIG9mIGFsbG93ZWQgdmFsdWVzLlxyXG4gKi9cclxuY2xhc3MgU2V0dGluZ051bWJlciBleHRlbmRzIF9TZXR0aW5nQmFzZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLlNldHRpbmdCYXNlIHtcclxuICAgIGNvbnN0cnVjdG9yKGlkLCBsYWJlbCwgZGVzY3JpcHRpb24sIG1pbiwgbWF4LCBkZWZhdWx0TnVtYmVyLCB1c2VVcmxQYXJhbXMsIFxyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1lbXB0eS1mdW5jdGlvblxyXG4gICAgZGVmYXVsdE9uQ2hhbmdlTGlzdGVuZXIgPSAoKSA9PiB7IH0pIHtcclxuICAgICAgICBzdXBlcihpZCwgbGFiZWwsIGRlc2NyaXB0aW9uLCBkZWZhdWx0TnVtYmVyLCBkZWZhdWx0T25DaGFuZ2VMaXN0ZW5lcik7XHJcbiAgICAgICAgdGhpcy5fbWluID0gbWluO1xyXG4gICAgICAgIHRoaXMuX21heCA9IG1heDtcclxuICAgICAgICAvLyBhdHRlbXB0IHRvIHJlYWQgdGhlIG51bWJlciBmcm9tIHRoZSB1cmwgcGFyYW1zXHJcbiAgICAgICAgY29uc3QgdXJsUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh3aW5kb3cubG9jYXRpb24uc2VhcmNoKTtcclxuICAgICAgICBpZiAoIXVzZVVybFBhcmFtcyB8fCAhdXJsUGFyYW1zLmhhcyh0aGlzLmlkKSkge1xyXG4gICAgICAgICAgICB0aGlzLm51bWJlciA9IGRlZmF1bHROdW1iZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBwYXJzZWRWYWx1ZSA9IE51bWJlci5wYXJzZUludCh1cmxQYXJhbXMuZ2V0KHRoaXMuaWQpKTtcclxuICAgICAgICAgICAgdGhpcy5udW1iZXIgPSBOdW1iZXIuaXNOYU4ocGFyc2VkVmFsdWUpXHJcbiAgICAgICAgICAgICAgICA/IGRlZmF1bHROdW1iZXJcclxuICAgICAgICAgICAgICAgIDogcGFyc2VkVmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMudXNlVXJsUGFyYW1zID0gdXNlVXJsUGFyYW1zO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBQZXJzaXN0IHRoZSBzZXR0aW5nIHZhbHVlIGluIFVSTC5cclxuICAgICAqL1xyXG4gICAgdXBkYXRlVVJMUGFyYW1zKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnVzZVVybFBhcmFtcykge1xyXG4gICAgICAgICAgICAvLyBzZXQgdXJsIHBhcmFtcyBsaWtlID9pZD1udW1iZXJcclxuICAgICAgICAgICAgY29uc3QgdXJsUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh3aW5kb3cubG9jYXRpb24uc2VhcmNoKTtcclxuICAgICAgICAgICAgdXJsUGFyYW1zLnNldCh0aGlzLmlkLCB0aGlzLm51bWJlci50b1N0cmluZygpKTtcclxuICAgICAgICAgICAgd2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKHt9LCAnJywgdXJsUGFyYW1zLnRvU3RyaW5nKCkgIT09ICcnXHJcbiAgICAgICAgICAgICAgICA/IGAke2xvY2F0aW9uLnBhdGhuYW1lfT8ke3VybFBhcmFtc31gXHJcbiAgICAgICAgICAgICAgICA6IGAke2xvY2F0aW9uLnBhdGhuYW1lfWApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogU2V0IHRoZSBudW1iZXIgdmFsdWUgKHdpbGwgYmUgY2xhbXBlZCB3aXRoaW4gcmFuZ2UpLlxyXG4gICAgICovXHJcbiAgICBzZXQgbnVtYmVyKG5ld051bWJlcikge1xyXG4gICAgICAgIHRoaXMudmFsdWUgPSB0aGlzLmNsYW1wKG5ld051bWJlcik7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEByZXR1cm5zIFRoZSBudW1iZXIgc3RvcmVkLlxyXG4gICAgICovXHJcbiAgICBnZXQgbnVtYmVyKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDbGFtcHMgYSBudW1iZXIgYmV0d2VlbiB0aGUgbWluIGFuZCBtYXggdmFsdWVzIChpbmNsdXNpdmUpLlxyXG4gICAgICogQHBhcmFtIGluTnVtYmVyIFRoZSBudW1iZXIgdG8gY2xhbXAuXHJcbiAgICAgKiBAcmV0dXJucyBUaGUgY2xhbXBlZCBudW1iZXIuXHJcbiAgICAgKi9cclxuICAgIGNsYW1wKGluTnVtYmVyKSB7XHJcbiAgICAgICAgcmV0dXJuIE1hdGgubWF4KE1hdGgubWluKHRoaXMuX21heCwgaW5OdW1iZXIpLCB0aGlzLl9taW4pO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSBtaW5pbXVtIHZhbHVlXHJcbiAgICAgKiBAcmV0dXJucyBUaGUgbWluaW11bSB2YWx1ZVxyXG4gICAgICovXHJcbiAgICBnZXQgbWluKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9taW47XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhlIG1heGltdW0gdmFsdWVcclxuICAgICAqIEByZXR1cm5zIFRoZSBtYXhpbXVtIHZhbHVlXHJcbiAgICAgKi9cclxuICAgIGdldCBtYXgoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX21heDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQWRkIGEgY2hhbmdlIGxpc3RlbmVyIHRvIHRoZSBudW1iZXIgb2JqZWN0LlxyXG4gICAgICovXHJcbiAgICBhZGRPbkNoYW5nZWRMaXN0ZW5lcihvbkNoYW5nZWRGdW5jKSB7XHJcbiAgICAgICAgdGhpcy5vbkNoYW5nZSA9IG9uQ2hhbmdlZEZ1bmM7XHJcbiAgICB9XHJcbn1cclxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL0NvbmZpZy9TZXR0aW5nT3B0aW9uLnRzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL0NvbmZpZy9TZXR0aW5nT3B0aW9uLnRzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywge1xuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIlNldHRpbmdPcHRpb25cIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gU2V0dGluZ09wdGlvbilcbi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9TZXR0aW5nQmFzZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9TZXR0aW5nQmFzZSAqLyBcIi4vc3JjL0NvbmZpZy9TZXR0aW5nQmFzZS50c1wiKTtcbi8vIENvcHlyaWdodCBFcGljIEdhbWVzLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcblxyXG4vKipcclxuICogQW4gT3B0aW9uIHNldHRpbmcgb2JqZWN0IHdpdGggYSB0ZXh0IGxhYmVsLiBBbGxvd3MgeW91IHRvIHNwZWNpZnkgYW4gYXJyYXkgb2Ygb3B0aW9ucyBhbmQgc2VsZWN0IG9uZSBvZiB0aGVtLlxyXG4gKi9cclxuY2xhc3MgU2V0dGluZ09wdGlvbiBleHRlbmRzIF9TZXR0aW5nQmFzZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLlNldHRpbmdCYXNlIHtcclxuICAgIGNvbnN0cnVjdG9yKGlkLCBsYWJlbCwgZGVzY3JpcHRpb24sIGRlZmF1bHRUZXh0VmFsdWUsIG9wdGlvbnMsIHVzZVVybFBhcmFtcywgXHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWVtcHR5LWZ1bmN0aW9uXHJcbiAgICBkZWZhdWx0T25DaGFuZ2VMaXN0ZW5lciA9ICgpID0+IHsgfSkge1xyXG4gICAgICAgIHN1cGVyKGlkLCBsYWJlbCwgZGVzY3JpcHRpb24sIFtkZWZhdWx0VGV4dFZhbHVlLCBkZWZhdWx0VGV4dFZhbHVlXSwgZGVmYXVsdE9uQ2hhbmdlTGlzdGVuZXIpO1xyXG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XHJcbiAgICAgICAgY29uc3QgdXJsUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh3aW5kb3cubG9jYXRpb24uc2VhcmNoKTtcclxuICAgICAgICBjb25zdCBzdHJpbmdUb01hdGNoID0gdXNlVXJsUGFyYW1zICYmIHVybFBhcmFtcy5oYXModGhpcy5pZClcclxuICAgICAgICAgICAgPyB0aGlzLmdldFVybFBhcmFtVGV4dCgpXHJcbiAgICAgICAgICAgIDogZGVmYXVsdFRleHRWYWx1ZTtcclxuICAgICAgICB0aGlzLnNlbGVjdGVkID0gc3RyaW5nVG9NYXRjaDtcclxuICAgICAgICB0aGlzLnVzZVVybFBhcmFtcyA9IHVzZVVybFBhcmFtcztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUGFyc2UgdGhlIHRleHQgdmFsdWUgZnJvbSB0aGUgdXJsIHBhcmFtZXRlcnMuXHJcbiAgICAgKiBAcmV0dXJucyBUaGUgdGV4dCB2YWx1ZSBwYXJzZWQgZnJvbSB0aGUgdXJsIGlmIHRoZSB1cmwgcGFyYW1ldGVycyBjb250YWlucyAvP2lkPXZhbHVlLCBidXQgZW1wdHkgc3RyaW5nIGlmIGp1c3QgLz9pZCBvciBubyB1cmwgcGFyYW0gZm91bmQuXHJcbiAgICAgKi9cclxuICAgIGdldFVybFBhcmFtVGV4dCgpIHtcclxuICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgY29uc3QgdXJsUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh3aW5kb3cubG9jYXRpb24uc2VhcmNoKTtcclxuICAgICAgICBpZiAodXJsUGFyYW1zLmhhcyh0aGlzLmlkKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gKF9hID0gdXJsUGFyYW1zLmdldCh0aGlzLmlkKSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogJyc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAnJztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUGVyc2lzdCB0aGUgc2V0dGluZyB2YWx1ZSBpbiBVUkwuXHJcbiAgICAgKi9cclxuICAgIHVwZGF0ZVVSTFBhcmFtcygpIHtcclxuICAgICAgICBpZiAodGhpcy51c2VVcmxQYXJhbXMpIHtcclxuICAgICAgICAgICAgLy8gc2V0IHVybCBwYXJhbXNcclxuICAgICAgICAgICAgY29uc3QgdXJsUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh3aW5kb3cubG9jYXRpb24uc2VhcmNoKTtcclxuICAgICAgICAgICAgdXJsUGFyYW1zLnNldCh0aGlzLmlkLCB0aGlzLnNlbGVjdGVkKTtcclxuICAgICAgICAgICAgd2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKHt9LCAnJywgdXJsUGFyYW1zLnRvU3RyaW5nKCkgIT09ICcnXHJcbiAgICAgICAgICAgICAgICA/IGAke2xvY2F0aW9uLnBhdGhuYW1lfT8ke3VybFBhcmFtc31gXHJcbiAgICAgICAgICAgICAgICA6IGAke2xvY2F0aW9uLnBhdGhuYW1lfWApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQWRkIGEgY2hhbmdlIGxpc3RlbmVyIHRvIHRoZSBzZWxlY3QgZWxlbWVudC5cclxuICAgICAqL1xyXG4gICAgYWRkT25DaGFuZ2VkTGlzdGVuZXIob25DaGFuZ2VkRnVuYykge1xyXG4gICAgICAgIHRoaXMub25DaGFuZ2UgPSBvbkNoYW5nZWRGdW5jO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAcmV0dXJucyBBbGwgYXZhaWxhYmxlIG9wdGlvbnMgYXMgYW4gYXJyYXlcclxuICAgICAqL1xyXG4gICAgZ2V0IG9wdGlvbnMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX29wdGlvbnM7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFNldCBvcHRpb25zXHJcbiAgICAgKiBAcGFyYW0gdmFsdWVzIEFycmF5IG9mIG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgc2V0IG9wdGlvbnModmFsdWVzKSB7XHJcbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9IHZhbHVlcztcclxuICAgICAgICB0aGlzLm9uQ2hhbmdlRW1pdCh0aGlzLnNlbGVjdGVkKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQHJldHVybnMgU2VsZWN0ZWQgb3B0aW9uIGFzIGEgc3RyaW5nXHJcbiAgICAgKi9cclxuICAgIGdldCBzZWxlY3RlZCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogU2V0IHNlbGVjdGVkIG9wdGlvbiBpZiBpdCBtYXRjaGVzIG9uZSBvZiB0aGUgYXZhaWxhYmxlIG9wdGlvbnNcclxuICAgICAqIEBwYXJhbSB2YWx1ZSBTZWxlY3RlZCBvcHRpb25cclxuICAgICAqL1xyXG4gICAgc2V0IHNlbGVjdGVkKHZhbHVlKSB7XHJcbiAgICAgICAgLy8gQSB1c2VyIG1heSBub3Qgc3BlY2lmeSB0aGUgZnVsbCBwb3NzaWJsZSB2YWx1ZSBzbyB3ZSBpbnN0ZWFkIHVzZSB0aGUgY2xvc2VzdCBtYXRjaC5cclxuICAgICAgICAvLyBlZyA/eHh4PUgyNjQgd291bGQgc2VsZWN0ICdIMjY0IGxldmVsLWFzeW1tZXRyeS1hbGxvd2VkPTE7cGFja2V0aXphdGlvbi1tb2RlPTE7cHJvZmlsZS1sZXZlbC1pZD00MjAwMWYnXHJcbiAgICAgICAgY29uc3QgZmlsdGVyZWRMaXN0ID0gdGhpcy5vcHRpb25zLmZpbHRlcigob3B0aW9uKSA9PiBvcHRpb24uaW5kZXhPZih2YWx1ZSkgIT09IC0xKTtcclxuICAgICAgICBpZiAoZmlsdGVyZWRMaXN0Lmxlbmd0aCkge1xyXG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gZmlsdGVyZWRMaXN0WzBdO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvQ29uZmlnL1NldHRpbmdUZXh0LnRzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9Db25maWcvU2V0dGluZ1RleHQudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywge1xuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIlNldHRpbmdUZXh0XCI6ICgpID0+ICgvKiBiaW5kaW5nICovIFNldHRpbmdUZXh0KVxuLyogaGFybW9ueSBleHBvcnQgKi8gfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX1NldHRpbmdCYXNlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL1NldHRpbmdCYXNlICovIFwiLi9zcmMvQ29uZmlnL1NldHRpbmdCYXNlLnRzXCIpO1xuLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuXHJcbi8qKlxyXG4gKiBBIHRleHQgc2V0dGluZyBvYmplY3Qgd2l0aCBhIHRleHQgbGFiZWwuXHJcbiAqL1xyXG5jbGFzcyBTZXR0aW5nVGV4dCBleHRlbmRzIF9TZXR0aW5nQmFzZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLlNldHRpbmdCYXNlIHtcclxuICAgIGNvbnN0cnVjdG9yKGlkLCBsYWJlbCwgZGVzY3JpcHRpb24sIGRlZmF1bHRUZXh0VmFsdWUsIHVzZVVybFBhcmFtcywgXHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWVtcHR5LWZ1bmN0aW9uXHJcbiAgICBkZWZhdWx0T25DaGFuZ2VMaXN0ZW5lciA9ICgpID0+IHsgfSkge1xyXG4gICAgICAgIHN1cGVyKGlkLCBsYWJlbCwgZGVzY3JpcHRpb24sIGRlZmF1bHRUZXh0VmFsdWUsIGRlZmF1bHRPbkNoYW5nZUxpc3RlbmVyKTtcclxuICAgICAgICBjb25zdCB1cmxQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpO1xyXG4gICAgICAgIGlmICghdXNlVXJsUGFyYW1zIHx8ICF1cmxQYXJhbXMuaGFzKHRoaXMuaWQpKSB7XHJcbiAgICAgICAgICAgIHRoaXMudGV4dCA9IGRlZmF1bHRUZXh0VmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBwYXJzZSBmbGFnIGZyb20gdXJsIHBhcmFtZXRlcnNcclxuICAgICAgICAgICAgY29uc3QgdXJsUGFyYW1GbGFnID0gdGhpcy5nZXRVcmxQYXJhbVRleHQoKTtcclxuICAgICAgICAgICAgdGhpcy50ZXh0ID0gdXJsUGFyYW1GbGFnO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnVzZVVybFBhcmFtcyA9IHVzZVVybFBhcmFtcztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUGFyc2UgdGhlIHRleHQgdmFsdWUgZnJvbSB0aGUgdXJsIHBhcmFtZXRlcnMuXHJcbiAgICAgKiBAcmV0dXJucyBUaGUgdGV4dCB2YWx1ZSBwYXJzZWQgZnJvbSB0aGUgdXJsIGlmIHRoZSB1cmwgcGFyYW1ldGVycyBjb250YWlucyAvP2lkPXZhbHVlLCBidXQgZW1wdHkgc3RyaW5nIGlmIGp1c3QgLz9pZCBvciBubyB1cmwgcGFyYW0gZm91bmQuXHJcbiAgICAgKi9cclxuICAgIGdldFVybFBhcmFtVGV4dCgpIHtcclxuICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgY29uc3QgdXJsUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh3aW5kb3cubG9jYXRpb24uc2VhcmNoKTtcclxuICAgICAgICBpZiAodXJsUGFyYW1zLmhhcyh0aGlzLmlkKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gKF9hID0gdXJsUGFyYW1zLmdldCh0aGlzLmlkKSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogJyc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAnJztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUGVyc2lzdCB0aGUgc2V0dGluZyB2YWx1ZSBpbiBVUkwuXHJcbiAgICAgKi9cclxuICAgIHVwZGF0ZVVSTFBhcmFtcygpIHtcclxuICAgICAgICBpZiAodGhpcy51c2VVcmxQYXJhbXMpIHtcclxuICAgICAgICAgICAgLy8gc2V0IHVybCBwYXJhbXNcclxuICAgICAgICAgICAgY29uc3QgdXJsUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh3aW5kb3cubG9jYXRpb24uc2VhcmNoKTtcclxuICAgICAgICAgICAgdXJsUGFyYW1zLnNldCh0aGlzLmlkLCB0aGlzLnRleHQpO1xyXG4gICAgICAgICAgICB3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUoe30sICcnLCB1cmxQYXJhbXMudG9TdHJpbmcoKSAhPT0gJydcclxuICAgICAgICAgICAgICAgID8gYCR7bG9jYXRpb24ucGF0aG5hbWV9PyR7dXJsUGFyYW1zfWBcclxuICAgICAgICAgICAgICAgIDogYCR7bG9jYXRpb24ucGF0aG5hbWV9YCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAcmV0dXJuIFRoZSBzZXR0aW5nJ3MgdmFsdWUuXHJcbiAgICAgKi9cclxuICAgIGdldCB0ZXh0KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBVcGRhdGUgdGhlIHNldHRpbmcncyBzdG9yZWQgdmFsdWUuXHJcbiAgICAgKiBAcGFyYW0gaW5WYWx1ZSBUaGUgbmV3IHZhbHVlIGZvciB0aGUgc2V0dGluZy5cclxuICAgICAqL1xyXG4gICAgc2V0IHRleHQoaW5WYWx1ZSkge1xyXG4gICAgICAgIHRoaXMudmFsdWUgPSBpblZhbHVlO1xyXG4gICAgfVxyXG59XHJcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9EYXRhQ2hhbm5lbC9EYXRhQ2hhbm5lbENvbnRyb2xsZXIudHNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL0RhdGFDaGFubmVsL0RhdGFDaGFubmVsQ29udHJvbGxlci50cyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiRGF0YUNoYW5uZWxDb250cm9sbGVyXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIERhdGFDaGFubmVsQ29udHJvbGxlcilcbi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9Mb2dnZXIvTG9nZ2VyICovIFwiLi9zcmMvTG9nZ2VyL0xvZ2dlci50c1wiKTtcbi8vIENvcHlyaWdodCBFcGljIEdhbWVzLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcblxyXG4vKipcclxuICogSGFuZGxlcyB0aGUgU2VuZGluZyBhbmQgUmVjZWl2aW5nIG9mIG1lc3NhZ2VzIHRvIHRoZSBVRSBJbnN0YW5jZSB2aWEgdGhlIERhdGEgQ2hhbm5lbFxyXG4gKi9cclxuY2xhc3MgRGF0YUNoYW5uZWxDb250cm9sbGVyIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuaXNSZWNlaXZpbmdGcmVlemVGcmFtZSA9IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiByZXR1cm4gdGhlIGN1cnJlbnQgc3RhdGUgb2YgYSBkYXRhY2hhbm5lbCBjb250cm9sbGVyIGluc3RhbmNlXHJcbiAgICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCBEYXRhQ2hhbm5lbENvbnRyb2xsZXIgaW5zdGFuY2VcclxuICAgICAqL1xyXG4gICAgZ2V0RGF0YUNoYW5uZWxJbnN0YW5jZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVG8gQ3JlYXRlIGFuZCBTZXQgdXAgYSBEYXRhIENoYW5uZWxcclxuICAgICAqIEBwYXJhbSBwZWVyQ29ubmVjdGlvbiAtIFRoZSBSVEMgUGVlciBDb25uZWN0aW9uXHJcbiAgICAgKiBAcGFyYW0gbGFiZWwgLSBMYWJlbCBvZiB0aGUgRGF0YSBDaGFubmVsXHJcbiAgICAgKiBAcGFyYW0gZGF0YWNoYW5uZWxPcHRpb25zIC0gT3B0aW9uYWwgUlRDIERhdGFDaGFubmVsIG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgY3JlYXRlRGF0YUNoYW5uZWwocGVlckNvbm5lY3Rpb24sIGxhYmVsLCBkYXRhY2hhbm5lbE9wdGlvbnMpIHtcclxuICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uID0gcGVlckNvbm5lY3Rpb247XHJcbiAgICAgICAgdGhpcy5sYWJlbCA9IGxhYmVsO1xyXG4gICAgICAgIHRoaXMuZGF0YWNoYW5uZWxPcHRpb25zID0gZGF0YWNoYW5uZWxPcHRpb25zO1xyXG4gICAgICAgIGlmIChkYXRhY2hhbm5lbE9wdGlvbnMgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLmRhdGFjaGFubmVsT3B0aW9ucyA9IHt9O1xyXG4gICAgICAgICAgICB0aGlzLmRhdGFjaGFubmVsT3B0aW9ucy5vcmRlcmVkID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5kYXRhQ2hhbm5lbCA9IHRoaXMucGVlckNvbm5lY3Rpb24uY3JlYXRlRGF0YUNoYW5uZWwodGhpcy5sYWJlbCwgdGhpcy5kYXRhY2hhbm5lbE9wdGlvbnMpO1xyXG4gICAgICAgIHRoaXMuc2V0dXBEYXRhQ2hhbm5lbCgpO1xyXG4gICAgfVxyXG4gICAgc2V0dXBEYXRhQ2hhbm5lbCgpIHtcclxuICAgICAgICAvL1dlIFdhbnQgYW4gQXJyYXkgQnVmZmVyIG5vdCBhIGJsb2JcclxuICAgICAgICB0aGlzLmRhdGFDaGFubmVsLmJpbmFyeVR5cGUgPSAnYXJyYXlidWZmZXInO1xyXG4gICAgICAgIHRoaXMuZGF0YUNoYW5uZWwub25vcGVuID0gKGV2KSA9PiB0aGlzLmhhbmRsZU9uT3Blbihldik7XHJcbiAgICAgICAgdGhpcy5kYXRhQ2hhbm5lbC5vbmNsb3NlID0gKGV2KSA9PiB0aGlzLmhhbmRsZU9uQ2xvc2UoZXYpO1xyXG4gICAgICAgIHRoaXMuZGF0YUNoYW5uZWwub25tZXNzYWdlID0gKGV2KSA9PiB0aGlzLmhhbmRsZU9uTWVzc2FnZShldik7XHJcbiAgICAgICAgdGhpcy5kYXRhQ2hhbm5lbC5vbmVycm9yID0gKGV2KSA9PiB0aGlzLmhhbmRsZU9uRXJyb3IoZXYpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBIYW5kbGVzIHdoZW4gdGhlIERhdGEgQ2hhbm5lbCBpcyBvcGVuZWRcclxuICAgICAqL1xyXG4gICAgaGFuZGxlT25PcGVuKGV2KSB7XHJcbiAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksIGBEYXRhIENoYW5uZWwgKCR7dGhpcy5sYWJlbH0pIG9wZW5lZC5gLCA3KTtcclxuICAgICAgICB0aGlzLm9uT3BlbigoX2EgPSB0aGlzLmRhdGFDaGFubmVsKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubGFiZWwsIGV2KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlcyB3aGVuIHRoZSBEYXRhIENoYW5uZWwgaXMgY2xvc2VkXHJcbiAgICAgKi9cclxuICAgIGhhbmRsZU9uQ2xvc2UoZXYpIHtcclxuICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgYERhdGEgQ2hhbm5lbCAoJHt0aGlzLmxhYmVsfSkgY2xvc2VkLmAsIDcpO1xyXG4gICAgICAgIHRoaXMub25DbG9zZSgoX2EgPSB0aGlzLmRhdGFDaGFubmVsKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubGFiZWwsIGV2KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlcyB3aGVuIGEgbWVzc2FnZSBpcyByZWNlaXZlZFxyXG4gICAgICogQHBhcmFtIGV2ZW50IC0gTWVzc2FnZSBFdmVudFxyXG4gICAgICovXHJcbiAgICBoYW5kbGVPbk1lc3NhZ2UoZXZlbnQpIHtcclxuICAgICAgICAvLyBIaWdoZXIgbG9nIGxldmVsIHRvIHByZXZlbnQgbG9nIHNwYW0gd2l0aCBtZXNzYWdlcyByZWNlaXZlZFxyXG4gICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksIGBEYXRhIENoYW5uZWwgKCR7dGhpcy5sYWJlbH0pIG1lc3NhZ2U6ICR7ZXZlbnR9YCwgOCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEhhbmRsZXMgd2hlbiBhbiBlcnJvciBpcyB0aHJvd25cclxuICAgICAqIEBwYXJhbSBldmVudCAtIEVycm9yIEV2ZW50XHJcbiAgICAgKi9cclxuICAgIGhhbmRsZU9uRXJyb3IoZXZlbnQpIHtcclxuICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgYERhdGEgQ2hhbm5lbCAoJHt0aGlzLmxhYmVsfSkgZXJyb3I6ICR7ZXZlbnR9YCwgNyk7XHJcbiAgICAgICAgdGhpcy5vbkVycm9yKChfYSA9IHRoaXMuZGF0YUNoYW5uZWwpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5sYWJlbCwgZXZlbnQpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBPdmVycmlkZSB0byByZWdpc3RlciBvbk9wZW4gaGFuZGxlclxyXG4gICAgICogQHBhcmFtIGxhYmVsIERhdGEgY2hhbm5lbCBsYWJlbCAoXCJkYXRhY2hhbm5lbFwiLCBcInNlbmQtZGF0YWNoYW5uZWxcIiwgXCJyZWN2LWRhdGFjaGFubmVsXCIpXHJcbiAgICAgKiBAcGFyYW0gZXYgZXZlbnRcclxuICAgICAqL1xyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xyXG4gICAgb25PcGVuKGxhYmVsLCBldikge1xyXG4gICAgICAgIC8vIGVtcHR5IGRlZmF1bHQgaW1wbGVtZW50YXRpb25cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogT3ZlcnJpZGUgdG8gcmVnaXN0ZXIgb25DbG9zZSBoYW5kbGVyXHJcbiAgICAgKiBAcGFyYW0gbGFiZWwgRGF0YSBjaGFubmVsIGxhYmVsIChcImRhdGFjaGFubmVsXCIsIFwic2VuZC1kYXRhY2hhbm5lbFwiLCBcInJlY3YtZGF0YWNoYW5uZWxcIilcclxuICAgICAqIEBwYXJhbSBldiBldmVudFxyXG4gICAgICovXHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXHJcbiAgICBvbkNsb3NlKGxhYmVsLCBldikge1xyXG4gICAgICAgIC8vIGVtcHR5IGRlZmF1bHQgaW1wbGVtZW50YXRpb25cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogT3ZlcnJpZGUgdG8gcmVnaXN0ZXIgb25FcnJvciBoYW5kbGVyXHJcbiAgICAgKiBAcGFyYW0gbGFiZWwgRGF0YSBjaGFubmVsIGxhYmVsIChcImRhdGFjaGFubmVsXCIsIFwic2VuZC1kYXRhY2hhbm5lbFwiLCBcInJlY3YtZGF0YWNoYW5uZWxcIilcclxuICAgICAqIEBwYXJhbSBldiBldmVudFxyXG4gICAgICovXHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXHJcbiAgICBvbkVycm9yKGxhYmVsLCBldikge1xyXG4gICAgICAgIC8vIGVtcHR5IGRlZmF1bHQgaW1wbGVtZW50YXRpb25cclxuICAgIH1cclxufVxyXG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvRGF0YUNoYW5uZWwvRGF0YUNoYW5uZWxTZW5kZXIudHNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvRGF0YUNoYW5uZWwvRGF0YUNoYW5uZWxTZW5kZXIudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiRGF0YUNoYW5uZWxTZW5kZXJcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gRGF0YUNoYW5uZWxTZW5kZXIpXG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vTG9nZ2VyL0xvZ2dlciAqLyBcIi4vc3JjL0xvZ2dlci9Mb2dnZXIudHNcIik7XG4vLyBDb3B5cmlnaHQgRXBpYyBHYW1lcywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG5cclxuLyoqXHJcbiAqIEEgY2xhc3MgZm9yIHNlbmRpbmcgZGF0YSBjaGFubmVsIG1lc3NhZ2VzXHJcbiAqL1xyXG5jbGFzcyBEYXRhQ2hhbm5lbFNlbmRlciB7XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSBkYXRhQ2hhbm5lbFByb3ZpZGVyIC0gRGF0YSBjaGFubmVsIG9iamVjdCB0eXBlXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKGRhdGFDaGFubmVsUHJvdmlkZXIpIHtcclxuICAgICAgICB0aGlzLmRhdGFDaGFubmVsUHJvdmlkZXIgPSBkYXRhQ2hhbm5lbFByb3ZpZGVyO1xyXG4gICAgfVxyXG4gICAgY2FuU2VuZCgpIHtcclxuICAgICAgICByZXR1cm4gKHRoaXMuZGF0YUNoYW5uZWxQcm92aWRlci5nZXREYXRhQ2hhbm5lbEluc3RhbmNlKCkuZGF0YUNoYW5uZWwgIT09XHJcbiAgICAgICAgICAgIHVuZGVmaW5lZCAmJlxyXG4gICAgICAgICAgICB0aGlzLmRhdGFDaGFubmVsUHJvdmlkZXIuZ2V0RGF0YUNoYW5uZWxJbnN0YW5jZSgpLmRhdGFDaGFubmVsXHJcbiAgICAgICAgICAgICAgICAucmVhZHlTdGF0ZSA9PSAnb3BlbicpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTZW5kIERhdGEgb3ZlciB0aGUgRGF0YSBjaGFubmVsIHRvIHRoZSBVRSBJbnN0YW5jZVxyXG4gICAgICogQHBhcmFtIGRhdGEgLSBNZXNzYWdlIERhdGEgQXJyYXkgQnVmZmVyXHJcbiAgICAgKi9cclxuICAgIHNlbmREYXRhKGRhdGEpIHtcclxuICAgICAgICAvLyByZXNldCB0aGUgYWZrIGluYWN0aXZpdHlcclxuICAgICAgICBjb25zdCBkYXRhQ2hhbm5lbEluc3RhbmNlID0gdGhpcy5kYXRhQ2hhbm5lbFByb3ZpZGVyLmdldERhdGFDaGFubmVsSW5zdGFuY2UoKTtcclxuICAgICAgICBpZiAoZGF0YUNoYW5uZWxJbnN0YW5jZS5kYXRhQ2hhbm5lbC5yZWFkeVN0YXRlID09ICdvcGVuJykge1xyXG4gICAgICAgICAgICBkYXRhQ2hhbm5lbEluc3RhbmNlLmRhdGFDaGFubmVsLnNlbmQoZGF0YSk7XHJcbiAgICAgICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksIGBNZXNzYWdlIFNlbnQ6ICR7bmV3IFVpbnQ4QXJyYXkoZGF0YSl9YCwgNik7XHJcbiAgICAgICAgICAgIHRoaXMucmVzZXRBZmtXYXJuaW5nVGltZXJPbkRhdGFTZW5kKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkxvZ2dlci5FcnJvcihfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksIGBNZXNzYWdlIEZhaWxlZDogJHtuZXcgVWludDhBcnJheShkYXRhKX1gKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEFuIG92ZXJyaWRlIG1ldGhvZCBmb3IgcmVzZXR0aW5nIHRoZSBBZmsgd2FybmluZyB0aW1lciB3aGVuIGRhdGEgaXMgc2VudCBvdmVyIHRoZSBkYXRhIGNoYW5uZWxcclxuICAgICAqL1xyXG4gICAgcmVzZXRBZmtXYXJuaW5nVGltZXJPbkRhdGFTZW5kKCkge1xyXG4gICAgICAgIC8vIEJhc2UgRnVuY3Rpb25hbGl0eTogRG8gTm90aGluZ1xyXG4gICAgfVxyXG59XHJcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9EYXRhQ2hhbm5lbC9Jbml0aWFsU2V0dGluZ3MudHNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL0RhdGFDaGFubmVsL0luaXRpYWxTZXR0aW5ncy50cyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiRW5jb2RlclNldHRpbmdzXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIEVuY29kZXJTZXR0aW5ncyksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiSW5pdGlhbFNldHRpbmdzXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIEluaXRpYWxTZXR0aW5ncyksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiUGl4ZWxTdHJlYW1pbmdTZXR0aW5nc1wiOiAoKSA9PiAoLyogYmluZGluZyAqLyBQaXhlbFN0cmVhbWluZ1NldHRpbmdzKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJXZWJSVENTZXR0aW5nc1wiOiAoKSA9PiAoLyogYmluZGluZyAqLyBXZWJSVENTZXR0aW5ncylcbi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pO1xuLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuLyoqXHJcbiAqIExhdGVuY3kgVGVzdCBSZXN1bHRzIERhdGFcclxuICovXHJcbmNsYXNzIEluaXRpYWxTZXR0aW5ncyB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLlBpeGVsU3RyZWFtaW5nU2V0dGluZ3MgPSBuZXcgUGl4ZWxTdHJlYW1pbmdTZXR0aW5ncygpO1xyXG4gICAgICAgIHRoaXMuRW5jb2RlclNldHRpbmdzID0gbmV3IEVuY29kZXJTZXR0aW5ncygpO1xyXG4gICAgICAgIHRoaXMuV2ViUlRDU2V0dGluZ3MgPSBuZXcgV2ViUlRDU2V0dGluZ3MoKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ2hlY2tzIGZvciBjb21wYXRpYmlsaXR5IHdpdGggdGhlIEZQUyBhbmQgTWF4RlBTIHN0YXRzIGJldHdlZW4gNC4yNyBhbmQgNVxyXG4gICAgICovXHJcbiAgICB1ZUNvbXBhdGlibGUoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuV2ViUlRDU2V0dGluZ3MuTWF4RlBTICE9IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5XZWJSVENTZXR0aW5ncy5GUFMgPSB0aGlzLldlYlJUQ1NldHRpbmdzLk1heEZQUztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIEEgY2xhc3MgZm9yIGhhbmRsaW5nIFBpeGVsIFN0cmVhbWluZyBkZXRhaWxzXHJcbiAqL1xyXG5jbGFzcyBQaXhlbFN0cmVhbWluZ1NldHRpbmdzIHtcclxufVxyXG4vKipcclxuICogQSBjbGFzcyBmb3IgaGFuZGxpbmcgZW5jb2RlciBzdGF0c1xyXG4gKi9cclxuY2xhc3MgRW5jb2RlclNldHRpbmdzIHtcclxufVxyXG4vKipcclxuICogQSBjbGFzcyBmb3IgaGFuZGxpbmcgd2ViIHJ0YyBzdGF0c1xyXG4gKi9cclxuY2xhc3MgV2ViUlRDU2V0dGluZ3Mge1xyXG59XHJcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9EYXRhQ2hhbm5lbC9MYXRlbmN5VGVzdFJlc3VsdHMudHNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL0RhdGFDaGFubmVsL0xhdGVuY3lUZXN0UmVzdWx0cy50cyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiTGF0ZW5jeVRlc3RSZXN1bHRzXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIExhdGVuY3lUZXN0UmVzdWx0cylcbi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9Mb2dnZXIvTG9nZ2VyICovIFwiLi9zcmMvTG9nZ2VyL0xvZ2dlci50c1wiKTtcbi8vIENvcHlyaWdodCBFcGljIEdhbWVzLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcblxyXG4vKipcclxuICogTGF0ZW5jeSBUZXN0IFJlc3VsdHMgRGF0YVxyXG4gKi9cclxuY2xhc3MgTGF0ZW5jeVRlc3RSZXN1bHRzIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIC8vRmllbGRzIFNldCBmcm9tIHRoZSBsYXRlbmN5IHBheWxvYWQgcmVnYXJkbGVzcyBvZiB2ZXJzaW9uXHJcbiAgICAgICAgdGhpcy5SZWNlaXB0VGltZU1zID0gbnVsbDtcclxuICAgICAgICB0aGlzLlRyYW5zbWlzc2lvblRpbWVNcyA9IG51bGw7XHJcbiAgICAgICAgLy9GaWVsZHMgU2V0IGZyb20gdGhlIGxhdGVuY3kgcGF5bG9hZCBmcm9tIDQuMjcuMlxyXG4gICAgICAgIHRoaXMuUHJlQ2FwdHVyZVRpbWVNcyA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5Qb3N0Q2FwdHVyZVRpbWVNcyA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5QcmVFbmNvZGVUaW1lTXMgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuUG9zdEVuY29kZVRpbWVNcyA9IG51bGw7XHJcbiAgICAgICAgLy9GaWVsZHMgU2V0IGZyb20gdGhlIGxhdGVuY3kgcGF5bG9hZCBmcm9tIDUuMFxyXG4gICAgICAgIHRoaXMuRW5jb2RlTXMgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuQ2FwdHVyZVRvU2VuZE1zID0gbnVsbDtcclxuICAgICAgICAvL0ZpZWxkcyBTZXQgd2hlbiBwcm9jZXNzZWRcclxuICAgICAgICB0aGlzLnRlc3RTdGFydFRpbWVNcyA9IDA7XHJcbiAgICAgICAgdGhpcy5icm93c2VyUmVjZWlwdFRpbWVNcyA9IDA7XHJcbiAgICAgICAgLy9GaWVsZHMgc2V0IGZyb20gY2FsY3VsYXRpb25zXHJcbiAgICAgICAgdGhpcy5sYXRlbmN5RXhjbHVkaW5nRGVjb2RlID0gMDtcclxuICAgICAgICB0aGlzLnRlc3REdXJhdGlvbiA9IDA7XHJcbiAgICAgICAgLy91ZUxhdGVuY3k6IG51bWJlciA9IDA7XHJcbiAgICAgICAgdGhpcy5uZXR3b3JrTGF0ZW5jeSA9IDA7XHJcbiAgICAgICAgdGhpcy5icm93c2VyU2VuZExhdGVuY3kgPSAwO1xyXG4gICAgICAgIHRoaXMuZnJhbWVEaXNwbGF5RGVsdGFUaW1lTXMgPSAwO1xyXG4gICAgICAgIHRoaXMuZW5kVG9FbmRMYXRlbmN5ID0gMDtcclxuICAgICAgICAvL3VlUGl4ZWxTdHJlYW1MYXRlbmN5OiBudW1iZXIgPSAwO1xyXG4gICAgICAgIHRoaXMuZW5jb2RlTGF0ZW5jeSA9IDA7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFNldHMgdGhlIERlbHRhIFRpbWUgTWlsbGlzZWNvbmRzXHJcbiAgICAgKiBAcGFyYW0gRGVsdGFUaW1lTXMgLSBEZWx0YSBUaW1lIE1pbGxpc2Vjb25kc1xyXG4gICAgICovXHJcbiAgICBzZXRGcmFtZURpc3BsYXlEZWx0YVRpbWUoRGVsdGFUaW1lTXMpIHtcclxuICAgICAgICBpZiAodGhpcy5mcmFtZURpc3BsYXlEZWx0YVRpbWVNcyA9PSAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZnJhbWVEaXNwbGF5RGVsdGFUaW1lTXMgPSBNYXRoLnJvdW5kKERlbHRhVGltZU1zKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFByb2Nlc3MgdGhlIGVuY29kZXIgdGltZXMgYW5kIHNldCB0aGVtXHJcbiAgICAgKi9cclxuICAgIHByb2Nlc3NGaWVsZHMoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuRW5jb2RlTXMgPT0gbnVsbCAmJlxyXG4gICAgICAgICAgICAodGhpcy5QcmVFbmNvZGVUaW1lTXMgIT0gbnVsbCB8fCB0aGlzLlBvc3RFbmNvZGVUaW1lTXMgIT0gbnVsbCkpIHtcclxuICAgICAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgYFNldHRpbmcgRW5jb2RlIE1zIFxcbiAke3RoaXMuUG9zdEVuY29kZVRpbWVNc30gXFxuICR7dGhpcy5QcmVFbmNvZGVUaW1lTXN9YCwgNik7XHJcbiAgICAgICAgICAgIHRoaXMuRW5jb2RlTXMgPSB0aGlzLlBvc3RFbmNvZGVUaW1lTXMgLSB0aGlzLlByZUVuY29kZVRpbWVNcztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuQ2FwdHVyZVRvU2VuZE1zID09IG51bGwgJiZcclxuICAgICAgICAgICAgKHRoaXMuUHJlQ2FwdHVyZVRpbWVNcyAhPSBudWxsIHx8IHRoaXMuUG9zdENhcHR1cmVUaW1lTXMgIT0gbnVsbCkpIHtcclxuICAgICAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgYFNldHRpbmcgQ2FwdHVyZVRvU2VuZE1zIE1zIFxcbiAke3RoaXMuUG9zdENhcHR1cmVUaW1lTXN9IFxcbiAke3RoaXMuUHJlQ2FwdHVyZVRpbWVNc31gLCA2KTtcclxuICAgICAgICAgICAgdGhpcy5DYXB0dXJlVG9TZW5kTXMgPVxyXG4gICAgICAgICAgICAgICAgdGhpcy5Qb3N0Q2FwdHVyZVRpbWVNcyAtIHRoaXMuUHJlQ2FwdHVyZVRpbWVNcztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL0ZyZWV6ZUZyYW1lL0ZyZWV6ZUZyYW1lLnRzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL0ZyZWV6ZUZyYW1lL0ZyZWV6ZUZyYW1lLnRzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywge1xuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIkZyZWV6ZUZyYW1lXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIEZyZWV6ZUZyYW1lKVxuLyogaGFybW9ueSBleHBvcnQgKi8gfSk7XG4vLyBDb3B5cmlnaHQgRXBpYyBHYW1lcywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG4vKipcclxuICogQSBjbGFzcyBmb3IgbWFuYWdpbmcgdGhlIGZyZWV6ZSBmcmFtZSBvYmplY3RcclxuICovXHJcbmNsYXNzIEZyZWV6ZUZyYW1lIHtcclxuICAgIC8qKlxyXG4gICAgICogQ29uc3RydWN0IGEgZnJlZXplIGZyYW1lXHJcbiAgICAgKiBAcGFyYW0gcm9vdERpdiB0aGUgZGl2IHRoYXQgYSBmcmVlemUgZnJhbWUgZWxlbWVudCB3aWxsIGJlIGluamVjdGVkIGludG9cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3Iocm9vdERpdikge1xyXG4gICAgICAgIHRoaXMuZnJlZXplRnJhbWVIZWlnaHQgPSAwO1xyXG4gICAgICAgIHRoaXMuZnJlZXplRnJhbWVXaWR0aCA9IDA7XHJcbiAgICAgICAgdGhpcy5yb290RGl2ID0gcm9vdERpdjtcclxuICAgICAgICAvLyBjcmVhdGUgdGhlIG92ZXJsYXlcclxuICAgICAgICB0aGlzLnJvb3RFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgdGhpcy5yb290RWxlbWVudC5pZCA9ICdmcmVlemVGcmFtZSc7XHJcbiAgICAgICAgdGhpcy5yb290RWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgIHRoaXMucm9vdEVsZW1lbnQuc3R5bGUucG9pbnRlckV2ZW50cyA9ICdub25lJztcclxuICAgICAgICB0aGlzLnJvb3RFbGVtZW50LnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcclxuICAgICAgICB0aGlzLnJvb3RFbGVtZW50LnN0eWxlLnpJbmRleCA9ICcyMCc7XHJcbiAgICAgICAgLy8gY3JlYXRlIHRoZSBpbWFnZSBwbGFjZSBob2xkZXJcclxuICAgICAgICB0aGlzLmltYWdlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xyXG4gICAgICAgIHRoaXMuaW1hZ2VFbGVtZW50LnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcclxuICAgICAgICAvLyBhcHBlbmQgdGhlIGltYWdlIGludG8gdGhlIHJvb3QgZWxlbWVudCBhbmQgYXBwZW5kIHRoZSBlbGVtZW50IHRvIHRoZSByb290IGRpdlxyXG4gICAgICAgIHRoaXMucm9vdEVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5pbWFnZUVsZW1lbnQpO1xyXG4gICAgICAgIHRoaXMucm9vdERpdi5hcHBlbmRDaGlsZCh0aGlzLnJvb3RFbGVtZW50KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogU2V0IHRoZSBmcmVlemUgZnJhbWUgZWxlbWVudCBmb3Igc2hvd2luZ1xyXG4gICAgICovXHJcbiAgICBzZXRFbGVtZW50Rm9yU2hvdygpIHtcclxuICAgICAgICB0aGlzLnJvb3RFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgdGhlIGZyZWV6ZSBmcmFtZSBlbGVtZW50IGZvciBoaWRpbmdcclxuICAgICAqL1xyXG4gICAgc2V0RWxlbWVudEZvckhpZGUoKSB7XHJcbiAgICAgICAgdGhpcy5yb290RWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBVcGRhdGUgdGhlIGZyZWV6ZSBmcmFtZXMgaW1hZ2Ugc291cmNlXHJcbiAgICAgKiBAcGFyYW0ganBlZyAtIHRoZSBmcmVlemUgZnJhbWUgaW1hZ2UgYXMgYSBieXRlIGFycmF5IGRhdGFcclxuICAgICAqL1xyXG4gICAgdXBkYXRlSW1hZ2VFbGVtZW50U291cmNlKGpwZWcpIHtcclxuICAgICAgICBjb25zdCBiYXNlNjQgPSBidG9hKGpwZWcucmVkdWNlKChkYXRhLCBieXRlKSA9PiBkYXRhICsgU3RyaW5nLmZyb21DaGFyQ29kZShieXRlKSwgJycpKTtcclxuICAgICAgICB0aGlzLmltYWdlRWxlbWVudC5zcmMgPSAnZGF0YTppbWFnZS9qcGVnO2Jhc2U2NCwnICsgYmFzZTY0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgdGhlIGRpbWVuc2lvbnMgZm9yIHRoZSBmcmVlemUgZnJhbWUgZnJvbSB0aGUgZWxlbWVudCBhbmQgcmVzaXplIGl0XHJcbiAgICAgKi9cclxuICAgIHNldERpbWVuc2lvbnNGcm9tRWxlbWVudEFuZFJlc2l6ZSgpIHtcclxuICAgICAgICB0aGlzLmZyZWV6ZUZyYW1lSGVpZ2h0ID0gdGhpcy5pbWFnZUVsZW1lbnQubmF0dXJhbEhlaWdodDtcclxuICAgICAgICB0aGlzLmZyZWV6ZUZyYW1lV2lkdGggPSB0aGlzLmltYWdlRWxlbWVudC5uYXR1cmFsV2lkdGg7XHJcbiAgICAgICAgdGhpcy5yZXNpemUoKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmVzaXplIGEgZnJlZXplIGZyYW1lIGVsZW1lbnRcclxuICAgICAqL1xyXG4gICAgcmVzaXplKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmZyZWV6ZUZyYW1lV2lkdGggIT09IDAgJiYgdGhpcy5mcmVlemVGcmFtZUhlaWdodCAhPT0gMCkge1xyXG4gICAgICAgICAgICBsZXQgZGlzcGxheVdpZHRoID0gMDtcclxuICAgICAgICAgICAgbGV0IGRpc3BsYXlIZWlnaHQgPSAwO1xyXG4gICAgICAgICAgICBsZXQgZGlzcGxheVRvcCA9IDA7XHJcbiAgICAgICAgICAgIGxldCBkaXNwbGF5TGVmdCA9IDA7XHJcbiAgICAgICAgICAgIGNvbnN0IHBhcmVudEFzcGVjdFJhdGlvID0gdGhpcy5yb290RGl2LmNsaWVudFdpZHRoIC8gdGhpcy5yb290RGl2LmNsaWVudEhlaWdodDtcclxuICAgICAgICAgICAgY29uc3QgdmlkZW9Bc3BlY3RSYXRpbyA9IHRoaXMuZnJlZXplRnJhbWVXaWR0aCAvIHRoaXMuZnJlZXplRnJhbWVIZWlnaHQ7XHJcbiAgICAgICAgICAgIGlmIChwYXJlbnRBc3BlY3RSYXRpbyA8IHZpZGVvQXNwZWN0UmF0aW8pIHtcclxuICAgICAgICAgICAgICAgIGRpc3BsYXlXaWR0aCA9IHRoaXMucm9vdERpdi5jbGllbnRXaWR0aDtcclxuICAgICAgICAgICAgICAgIGRpc3BsYXlIZWlnaHQgPSBNYXRoLmZsb29yKHRoaXMucm9vdERpdi5jbGllbnRXaWR0aCAvIHZpZGVvQXNwZWN0UmF0aW8pO1xyXG4gICAgICAgICAgICAgICAgZGlzcGxheVRvcCA9IE1hdGguZmxvb3IoKHRoaXMucm9vdERpdi5jbGllbnRIZWlnaHQgLSBkaXNwbGF5SGVpZ2h0KSAqIDAuNSk7XHJcbiAgICAgICAgICAgICAgICBkaXNwbGF5TGVmdCA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBkaXNwbGF5V2lkdGggPSBNYXRoLmZsb29yKHRoaXMucm9vdERpdi5jbGllbnRIZWlnaHQgKiB2aWRlb0FzcGVjdFJhdGlvKTtcclxuICAgICAgICAgICAgICAgIGRpc3BsYXlIZWlnaHQgPSB0aGlzLnJvb3REaXYuY2xpZW50SGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgZGlzcGxheVRvcCA9IDA7XHJcbiAgICAgICAgICAgICAgICBkaXNwbGF5TGVmdCA9IE1hdGguZmxvb3IoKHRoaXMucm9vdERpdi5jbGllbnRXaWR0aCAtIGRpc3BsYXlXaWR0aCkgKiAwLjUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMucm9vdEVsZW1lbnQuc3R5bGUud2lkdGggPSB0aGlzLnJvb3REaXYub2Zmc2V0V2lkdGggKyAncHgnO1xyXG4gICAgICAgICAgICB0aGlzLnJvb3RFbGVtZW50LnN0eWxlLmhlaWdodCA9IHRoaXMucm9vdERpdi5vZmZzZXRIZWlnaHQgKyAncHgnO1xyXG4gICAgICAgICAgICB0aGlzLnJvb3RFbGVtZW50LnN0eWxlLmxlZnQgPSAwICsgJ3B4JztcclxuICAgICAgICAgICAgdGhpcy5yb290RWxlbWVudC5zdHlsZS50b3AgPSAwICsgJ3B4JztcclxuICAgICAgICAgICAgdGhpcy5pbWFnZUVsZW1lbnQuc3R5bGUud2lkdGggPSBkaXNwbGF5V2lkdGggKyAncHgnO1xyXG4gICAgICAgICAgICB0aGlzLmltYWdlRWxlbWVudC5zdHlsZS5oZWlnaHQgPSBkaXNwbGF5SGVpZ2h0ICsgJ3B4JztcclxuICAgICAgICAgICAgdGhpcy5pbWFnZUVsZW1lbnQuc3R5bGUubGVmdCA9IGRpc3BsYXlMZWZ0ICsgJ3B4JztcclxuICAgICAgICAgICAgdGhpcy5pbWFnZUVsZW1lbnQuc3R5bGUudG9wID0gZGlzcGxheVRvcCArICdweCc7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9GcmVlemVGcmFtZS9GcmVlemVGcmFtZUNvbnRyb2xsZXIudHNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL0ZyZWV6ZUZyYW1lL0ZyZWV6ZUZyYW1lQ29udHJvbGxlci50cyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiRnJlZXplRnJhbWVDb250cm9sbGVyXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIEZyZWV6ZUZyYW1lQ29udHJvbGxlcilcbi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9Mb2dnZXIvTG9nZ2VyICovIFwiLi9zcmMvTG9nZ2VyL0xvZ2dlci50c1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfRnJlZXplRnJhbWVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vRnJlZXplRnJhbWUgKi8gXCIuL3NyYy9GcmVlemVGcmFtZS9GcmVlemVGcmFtZS50c1wiKTtcbi8vIENvcHlyaWdodCBFcGljIEdhbWVzLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcblxyXG5cclxuLyoqXHJcbiAqIEEgY2xhc3MgZm9yIGNvbnRyb2xsaW5nIGZyZWV6ZSBmcmFtZSBmdW5jdGlvbmFsaXR5XHJcbiAqL1xyXG5jbGFzcyBGcmVlemVGcmFtZUNvbnRyb2xsZXIge1xyXG4gICAgLyoqXHJcbiAgICAgKiBDb25zdHJ1Y3QgYSBmcmVlemUgZnJhbWUgY29udHJvbGxlclxyXG4gICAgICogQHBhcmFtIHJvb3REaXYgLSB0aGUgZGl2IHRoYXQgYSBmcmVlemUgZnJhbWUgZWxlbWVudCB3aWxsIGJlIGluamVjdGVkIGludG9cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3Iocm9vdERpdikge1xyXG4gICAgICAgIHRoaXMucmVjZWl2aW5nID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5zaXplID0gMDtcclxuICAgICAgICB0aGlzLmpwZWcgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgdGhpcy52YWxpZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuZnJlZXplRnJhbWVEZWxheSA9IDUwO1xyXG4gICAgICAgIHRoaXMuZnJlZXplRnJhbWUgPSBuZXcgX0ZyZWV6ZUZyYW1lX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uRnJlZXplRnJhbWUocm9vdERpdik7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFNob3cgdGhlIGZyZWV6ZSBmcmFtZSBpZiBpdCBpcyB2YWxpZFxyXG4gICAgICovXHJcbiAgICBzaG93RnJlZXplRnJhbWUoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMudmFsaWQpIHtcclxuICAgICAgICAgICAgdGhpcy5mcmVlemVGcmFtZS5zZXRFbGVtZW50Rm9yU2hvdygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogSGlkZSB0aGUgZnJlZXplIGZyYW1lIGFuZCBzZXQgdGhlIHZhbGlkaXR5IHRvIGZhbHNlXHJcbiAgICAgKi9cclxuICAgIGhpZGVGcmVlemVGcmFtZSgpIHtcclxuICAgICAgICB0aGlzLnZhbGlkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5mcmVlemVGcmFtZS5zZXRFbGVtZW50Rm9ySGlkZSgpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBVcGRhdGUgdGhlIGZyZWV6ZSBmcmFtZXMgaW1hZ2Ugc291cmNlIGFuZCBsb2FkIGl0XHJcbiAgICAgKiBAcGFyYW0ganBlZyAtIHRoZSBmcmVlemUgZnJhbWUgaW1hZ2UgYXMgYSBieXRlIGFycmF5IGRhdGFcclxuICAgICAqIEBwYXJhbSBvbkxvYWRDYWxsQmFjayAtIGEgY2FsbCBiYWNrIGZvciBtYW5hZ2luZyBpZiB0aGUgcGxheSBvdmVybGF5IG5lZWRzIHRvIGJlIHNob3duIG9yIG5vdFxyXG4gICAgICovXHJcbiAgICB1cGRhdGVGcmVlemVGcmFtZUFuZFNob3coanBlZywgb25Mb2FkQ2FsbEJhY2spIHtcclxuICAgICAgICB0aGlzLmZyZWV6ZUZyYW1lLnVwZGF0ZUltYWdlRWxlbWVudFNvdXJjZShqcGVnKTtcclxuICAgICAgICB0aGlzLmZyZWV6ZUZyYW1lLmltYWdlRWxlbWVudC5vbmxvYWQgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuZnJlZXplRnJhbWUuc2V0RGltZW5zaW9uc0Zyb21FbGVtZW50QW5kUmVzaXplKCk7XHJcbiAgICAgICAgICAgIG9uTG9hZENhbGxCYWNrKCk7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUHJvY2VzcyB0aGUgbmV3IGZyZWV6ZSBmcmFtZSBpbWFnZSBhbmQgdXBkYXRlIGl0XHJcbiAgICAgKiBAcGFyYW0gdmlldyAtIHRoZSBmcmVlemUgZnJhbWUgaW1hZ2UgYXMgYSBieXRlIGFycmF5IGRhdGFcclxuICAgICAqIEBwYXJhbSBvbkxvYWRDYWxsQmFjayAtIGEgY2FsbCBiYWNrIGZvciBtYW5hZ2luZyBpZiB0aGUgcGxheSBvdmVybGF5IG5lZWRzIHRvIGJlIHNob3duIG9yIG5vdFxyXG4gICAgICovXHJcbiAgICBwcm9jZXNzRnJlZXplRnJhbWVNZXNzYWdlKHZpZXcsIG9uTG9hZENhbGxCYWNrKSB7XHJcbiAgICAgICAgLy8gUmVzZXQgZnJlZXplIGZyYW1lIGlmIHdlIGdvdCBhIGZyZWV6ZSBmcmFtZSBtZXNzYWdlIGFuZCB3ZSBhcmUgbm90IFwicmVjZWl2aW5nXCIgeWV0LlxyXG4gICAgICAgIGlmICghdGhpcy5yZWNlaXZpbmcpIHtcclxuICAgICAgICAgICAgdGhpcy5yZWNlaXZpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLnZhbGlkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuc2l6ZSA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMuanBlZyA9IHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gRXh0cmFjdCB0b3RhbCBzaXplIG9mIGZyZWV6ZSBmcmFtZSAoYWNyb3NzIGFsbCBjaHVua3MpXHJcbiAgICAgICAgdGhpcy5zaXplID0gbmV3IERhdGFWaWV3KHZpZXcuc2xpY2UoMSwgNSkuYnVmZmVyKS5nZXRJbnQzMigwLCB0cnVlKTtcclxuICAgICAgICAvLyBHZXQgdGhlIGpwZWcgcGFydCBvZiB0aGUgcGF5bG9hZFxyXG4gICAgICAgIGNvbnN0IGpwZWdCeXRlcyA9IHZpZXcuc2xpY2UoMSArIDQpO1xyXG4gICAgICAgIC8vIEFwcGVuZCB0byBleGlzdGluZyBqcGVnIHRoYXQgaG9sZHMgdGhlIGZyZWV6ZSBmcmFtZVxyXG4gICAgICAgIGlmICh0aGlzLmpwZWcpIHtcclxuICAgICAgICAgICAgY29uc3QganBlZyA9IG5ldyBVaW50OEFycmF5KHRoaXMuanBlZy5sZW5ndGggKyBqcGVnQnl0ZXMubGVuZ3RoKTtcclxuICAgICAgICAgICAganBlZy5zZXQodGhpcy5qcGVnLCAwKTtcclxuICAgICAgICAgICAganBlZy5zZXQoanBlZ0J5dGVzLCB0aGlzLmpwZWcubGVuZ3RoKTtcclxuICAgICAgICAgICAgdGhpcy5qcGVnID0ganBlZztcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gTm8gZXhpc3RpbmcgZnJlZXplIGZyYW1lIGpwZWcsIG1ha2Ugb25lXHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuanBlZyA9IGpwZWdCeXRlcztcclxuICAgICAgICAgICAgdGhpcy5yZWNlaXZpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBgcmVjZWl2ZWQgZmlyc3QgY2h1bmsgb2YgZnJlZXplIGZyYW1lOiAke3RoaXMuanBlZy5sZW5ndGh9LyR7dGhpcy5zaXplfWAsIDYpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBGaW5pc2hlZCByZWNlaXZpbmcgZnJlZXplIGZyYW1lLCB3ZSBjYW4gc2hvdyBpdCBub3dcclxuICAgICAgICBpZiAodGhpcy5qcGVnLmxlbmd0aCA9PT0gdGhpcy5zaXplKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVjZWl2aW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMudmFsaWQgPSB0cnVlO1xyXG4gICAgICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBgcmVjZWl2ZWQgY29tcGxldGUgZnJlZXplIGZyYW1lICR7dGhpcy5zaXplfWAsIDYpO1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUZyZWV6ZUZyYW1lQW5kU2hvdyh0aGlzLmpwZWcsIG9uTG9hZENhbGxCYWNrKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gV2UgcmVjZWl2ZWQgbW9yZSBkYXRhIHRoYW4gdGhlIGZyZWV6ZSBmcmFtZSBwYXlsb2FkIG1lc3NhZ2UgaW5kaWNhdGUgKHRoaXMgaXMgYW4gZXJyb3IpXHJcbiAgICAgICAgZWxzZSBpZiAodGhpcy5qcGVnLmxlbmd0aCA+IHRoaXMuc2l6ZSkge1xyXG4gICAgICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLkxvZ2dlci5FcnJvcihfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksIGByZWNlaXZlZCBiaWdnZXIgZnJlZXplIGZyYW1lIHRoYW4gYWR2ZXJ0aXNlZDogJHt0aGlzLmpwZWcubGVuZ3RofS8ke3RoaXMuc2l6ZX1gKTtcclxuICAgICAgICAgICAgdGhpcy5qcGVnID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICB0aGlzLnJlY2VpdmluZyA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvSW5wdXRzL0Zha2VUb3VjaENvbnRyb2xsZXIudHNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvSW5wdXRzL0Zha2VUb3VjaENvbnRyb2xsZXIudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiRmFrZVRvdWNoQ29udHJvbGxlclwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBGYWtlVG91Y2hDb250cm9sbGVyKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJGYWtlVG91Y2hGaW5nZXJcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gRmFrZVRvdWNoRmluZ2VyKVxuLyogaGFybW9ueSBleHBvcnQgKi8gfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX01vdXNlQnV0dG9uc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9Nb3VzZUJ1dHRvbnMgKi8gXCIuL3NyYy9JbnB1dHMvTW91c2VCdXR0b25zLnRzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9VdGlsX0V2ZW50TGlzdGVuZXJUcmFja2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9VdGlsL0V2ZW50TGlzdGVuZXJUcmFja2VyICovIFwiLi9zcmMvVXRpbC9FdmVudExpc3RlbmVyVHJhY2tlci50c1wiKTtcbi8vIENvcHlyaWdodCBFcGljIEdhbWVzLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcblxyXG5cclxuLyoqXHJcbiAqIEFsbG93cyBmb3IgdGhlIHVzYWdlIG9mIGZha2UgdG91Y2ggZXZlbnRzIGFuZCBpbXBsZW1lbnRzIElUb3VjaENvbnRyb2xsZXJcclxuICogQHBhcmFtIGRhdGFDaGFubmVsQ29udHJvbGxlciAtIFRoZSBjb250cm9sbGVyIGZvciB0aGUgRGF0YSBjaGFubmVsXHJcbiAqIEBwYXJhbSB2aWRlb0VsZW1lbnRQYXJlbnQgLSBUaGUgdmlkZW8gcGxheWVyIERPTSBlbGVtZW50XHJcbiAqL1xyXG5jbGFzcyBGYWtlVG91Y2hDb250cm9sbGVyIHtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyIC0gU3RyZWFtIG1lc3NhZ2UgaW5zdGFuY2VcclxuICAgICAqIEBwYXJhbSB2aWRlb0VsZW1lbnRQcm92aWRlciAtIFZpZGVvIGVsZW1lbnQgaW5zdGFuY2VcclxuICAgICAqIEBwYXJhbSBjb29yZGluYXRlQ29udmVydGVyIC0gQSBjb29yZGluYXRlIGNvbnZlcnRlciBpbnN0YW5jZVxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcih0b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlciwgdmlkZW9FbGVtZW50UHJvdmlkZXIsIGNvb3JkaW5hdGVDb252ZXJ0ZXIpIHtcclxuICAgICAgICAvLyBVdGlsaXR5IGZvciBrZWVwaW5nIHRyYWNrIG9mIGV2ZW50IGhhbmRsZXJzIGFuZCB1bnJlZ2lzdGVyaW5nIHRoZW1cclxuICAgICAgICB0aGlzLnRvdWNoRXZlbnRMaXN0ZW5lclRyYWNrZXIgPSBuZXcgX1V0aWxfRXZlbnRMaXN0ZW5lclRyYWNrZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5FdmVudExpc3RlbmVyVHJhY2tlcigpO1xyXG4gICAgICAgIHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXIgPSB0b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlcjtcclxuICAgICAgICB0aGlzLnZpZGVvRWxlbWVudFByb3ZpZGVyID0gdmlkZW9FbGVtZW50UHJvdmlkZXI7XHJcbiAgICAgICAgdGhpcy5jb29yZGluYXRlQ29udmVydGVyID0gY29vcmRpbmF0ZUNvbnZlcnRlcjtcclxuICAgICAgICBjb25zdCBvbnRvdWNoc3RhcnQgPSAoZXYpID0+IHRoaXMub25Ub3VjaFN0YXJ0KGV2KTtcclxuICAgICAgICBjb25zdCBvbnRvdWNoZW5kID0gKGV2KSA9PiB0aGlzLm9uVG91Y2hFbmQoZXYpO1xyXG4gICAgICAgIGNvbnN0IG9udG91Y2htb3ZlID0gKGV2KSA9PiB0aGlzLm9uVG91Y2hNb3ZlKGV2KTtcclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0Jywgb250b3VjaHN0YXJ0LCB7IHBhc3NpdmU6IGZhbHNlIH0pO1xyXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgb250b3VjaGVuZCwgeyBwYXNzaXZlOiBmYWxzZSB9KTtcclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCBvbnRvdWNobW92ZSwgeyBwYXNzaXZlOiBmYWxzZSB9KTtcclxuICAgICAgICB0aGlzLnRvdWNoRXZlbnRMaXN0ZW5lclRyYWNrZXIuYWRkVW5yZWdpc3RlckNhbGxiYWNrKCgpID0+IGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBvbnRvdWNoc3RhcnQpKTtcclxuICAgICAgICB0aGlzLnRvdWNoRXZlbnRMaXN0ZW5lclRyYWNrZXIuYWRkVW5yZWdpc3RlckNhbGxiYWNrKCgpID0+IGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgb250b3VjaGVuZCkpO1xyXG4gICAgICAgIHRoaXMudG91Y2hFdmVudExpc3RlbmVyVHJhY2tlci5hZGRVbnJlZ2lzdGVyQ2FsbGJhY2soKCkgPT4gZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgb250b3VjaG1vdmUpKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVW5yZWdpc3RlciBhbGwgdG91Y2ggZXZlbnRzXHJcbiAgICAgKi9cclxuICAgIHVucmVnaXN0ZXJUb3VjaEV2ZW50cygpIHtcclxuICAgICAgICB0aGlzLnRvdWNoRXZlbnRMaXN0ZW5lclRyYWNrZXIudW5yZWdpc3RlckFsbCgpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXRzIHRoZSB2aWRlbyBFbGVtZW50IFBhcmVudCBDbGllbnQgUmVjdCBudW1iZXJzIGZvciB0aGlzIGNsYXNzXHJcbiAgICAgKiBAcGFyYW0gdmlkZW9FbGVtZW50UGFyZW50Q2xpZW50UmVjdCAtIGEgaHRtbCBFbGVtZW50UGFyZW50Q2xpZW50UmVjdCBvYmplY3RcclxuICAgICAqL1xyXG4gICAgc2V0VmlkZW9FbGVtZW50UGFyZW50Q2xpZW50UmVjdCh2aWRlb0VsZW1lbnRQYXJlbnRDbGllbnRSZWN0KSB7XHJcbiAgICAgICAgdGhpcy52aWRlb0VsZW1lbnRQYXJlbnRDbGllbnRSZWN0ID0gdmlkZW9FbGVtZW50UGFyZW50Q2xpZW50UmVjdDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogV2hlbiBhIHRvdWNoIGV2ZW50IGJlZ2luc1xyXG4gICAgICogQHBhcmFtIHRvdWNoIC0gdGhlIGFjdGl2YXRpbmcgdG91Y2ggZXZlbnRcclxuICAgICAqL1xyXG4gICAgb25Ub3VjaFN0YXJ0KHRvdWNoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnZpZGVvRWxlbWVudFByb3ZpZGVyLmlzVmlkZW9SZWFkeSgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuZmFrZVRvdWNoRmluZ2VyID09IG51bGwpIHtcclxuICAgICAgICAgICAgY29uc3QgZmlyc3RfdG91Y2ggPSB0b3VjaC5jaGFuZ2VkVG91Y2hlc1swXTtcclxuICAgICAgICAgICAgdGhpcy5mYWtlVG91Y2hGaW5nZXIgPSBuZXcgRmFrZVRvdWNoRmluZ2VyKGZpcnN0X3RvdWNoLmlkZW50aWZpZXIsIGZpcnN0X3RvdWNoLmNsaWVudFggLSB0aGlzLnZpZGVvRWxlbWVudFBhcmVudENsaWVudFJlY3QubGVmdCwgZmlyc3RfdG91Y2guY2xpZW50WSAtIHRoaXMudmlkZW9FbGVtZW50UGFyZW50Q2xpZW50UmVjdC50b3ApO1xyXG4gICAgICAgICAgICBjb25zdCB2aWRlb0VsZW1lbnRQYXJlbnQgPSB0aGlzLnZpZGVvRWxlbWVudFByb3ZpZGVyLmdldFZpZGVvUGFyZW50RWxlbWVudCgpO1xyXG4gICAgICAgICAgICBjb25zdCBtb3VzZUV2ZW50ID0gbmV3IE1vdXNlRXZlbnQoJ21vdXNlZW50ZXInLCBmaXJzdF90b3VjaCk7XHJcbiAgICAgICAgICAgIHZpZGVvRWxlbWVudFBhcmVudC5kaXNwYXRjaEV2ZW50KG1vdXNlRXZlbnQpO1xyXG4gICAgICAgICAgICBjb25zdCBjb29yZCA9IHRoaXMuY29vcmRpbmF0ZUNvbnZlcnRlci5ub3JtYWxpemVBbmRRdWFudGl6ZVVuc2lnbmVkKHRoaXMuZmFrZVRvdWNoRmluZ2VyLngsIHRoaXMuZmFrZVRvdWNoRmluZ2VyLnkpO1xyXG4gICAgICAgICAgICBjb25zdCB0b1N0cmVhbWVySGFuZGxlcnMgPSB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyLnRvU3RyZWFtZXJIYW5kbGVycztcclxuICAgICAgICAgICAgdG9TdHJlYW1lckhhbmRsZXJzLmdldCgnTW91c2VEb3duJykoW1xyXG4gICAgICAgICAgICAgICAgX01vdXNlQnV0dG9uc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLk1vdXNlQnV0dG9uLm1haW5CdXR0b24sXHJcbiAgICAgICAgICAgICAgICBjb29yZC54LFxyXG4gICAgICAgICAgICAgICAgY29vcmQueVxyXG4gICAgICAgICAgICBdKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdG91Y2gucHJldmVudERlZmF1bHQoKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogV2hlbiBhIHRvdWNoIGV2ZW50IGVuZHNcclxuICAgICAqIEBwYXJhbSB0b3VjaEV2ZW50IC0gdGhlIGFjdGl2YXRpbmcgdG91Y2ggZXZlbnRcclxuICAgICAqL1xyXG4gICAgb25Ub3VjaEVuZCh0b3VjaEV2ZW50KSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnZpZGVvRWxlbWVudFByb3ZpZGVyLmlzVmlkZW9SZWFkeSgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgdmlkZW9FbGVtZW50UGFyZW50ID0gdGhpcy52aWRlb0VsZW1lbnRQcm92aWRlci5nZXRWaWRlb1BhcmVudEVsZW1lbnQoKTtcclxuICAgICAgICBjb25zdCB0b1N0cmVhbWVySGFuZGxlcnMgPSB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyLnRvU3RyZWFtZXJIYW5kbGVycztcclxuICAgICAgICBmb3IgKGxldCB0ID0gMDsgdCA8IHRvdWNoRXZlbnQuY2hhbmdlZFRvdWNoZXMubGVuZ3RoOyB0KyspIHtcclxuICAgICAgICAgICAgY29uc3QgdG91Y2ggPSB0b3VjaEV2ZW50LmNoYW5nZWRUb3VjaGVzW3RdO1xyXG4gICAgICAgICAgICBpZiAodG91Y2guaWRlbnRpZmllciA9PT0gdGhpcy5mYWtlVG91Y2hGaW5nZXIuaWQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHggPSB0b3VjaC5jbGllbnRYIC0gdGhpcy52aWRlb0VsZW1lbnRQYXJlbnRDbGllbnRSZWN0LmxlZnQ7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB5ID0gdG91Y2guY2xpZW50WSAtIHRoaXMudmlkZW9FbGVtZW50UGFyZW50Q2xpZW50UmVjdC50b3A7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjb29yZCA9IHRoaXMuY29vcmRpbmF0ZUNvbnZlcnRlci5ub3JtYWxpemVBbmRRdWFudGl6ZVVuc2lnbmVkKHgsIHkpO1xyXG4gICAgICAgICAgICAgICAgdG9TdHJlYW1lckhhbmRsZXJzLmdldCgnTW91c2VVcCcpKFtcclxuICAgICAgICAgICAgICAgICAgICBfTW91c2VCdXR0b25zX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uTW91c2VCdXR0b24ubWFpbkJ1dHRvbixcclxuICAgICAgICAgICAgICAgICAgICBjb29yZC54LFxyXG4gICAgICAgICAgICAgICAgICAgIGNvb3JkLnlcclxuICAgICAgICAgICAgICAgIF0pO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbW91c2VFdmVudCA9IG5ldyBNb3VzZUV2ZW50KCdtb3VzZWxlYXZlJywgdG91Y2gpO1xyXG4gICAgICAgICAgICAgICAgdmlkZW9FbGVtZW50UGFyZW50LmRpc3BhdGNoRXZlbnQobW91c2VFdmVudCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZha2VUb3VjaEZpbmdlciA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0b3VjaEV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIE9uIGEgTW92ZSB0b3VjaCBldmVudFxyXG4gICAgICogQHBhcmFtIHRvdWNoRXZlbnQgLSB0aGUgYWN0aXZhdGluZyB0b3VjaCBldmVudFxyXG4gICAgICovXHJcbiAgICBvblRvdWNoTW92ZSh0b3VjaEV2ZW50KSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnZpZGVvRWxlbWVudFByb3ZpZGVyLmlzVmlkZW9SZWFkeSgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgdG9TdHJlYW1lckhhbmRsZXJzID0gdGhpcy50b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlci50b1N0cmVhbWVySGFuZGxlcnM7XHJcbiAgICAgICAgZm9yIChsZXQgdCA9IDA7IHQgPCB0b3VjaEV2ZW50LnRvdWNoZXMubGVuZ3RoOyB0KyspIHtcclxuICAgICAgICAgICAgY29uc3QgdG91Y2ggPSB0b3VjaEV2ZW50LnRvdWNoZXNbdF07XHJcbiAgICAgICAgICAgIGlmICh0b3VjaC5pZGVudGlmaWVyID09PSB0aGlzLmZha2VUb3VjaEZpbmdlci5pZCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgeCA9IHRvdWNoLmNsaWVudFggLSB0aGlzLnZpZGVvRWxlbWVudFBhcmVudENsaWVudFJlY3QubGVmdDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHkgPSB0b3VjaC5jbGllbnRZIC0gdGhpcy52aWRlb0VsZW1lbnRQYXJlbnRDbGllbnRSZWN0LnRvcDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNvb3JkID0gdGhpcy5jb29yZGluYXRlQ29udmVydGVyLm5vcm1hbGl6ZUFuZFF1YW50aXplVW5zaWduZWQoeCwgeSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBkZWx0YSA9IHRoaXMuY29vcmRpbmF0ZUNvbnZlcnRlci5ub3JtYWxpemVBbmRRdWFudGl6ZVNpZ25lZCh4IC0gdGhpcy5mYWtlVG91Y2hGaW5nZXIueCwgeSAtIHRoaXMuZmFrZVRvdWNoRmluZ2VyLnkpO1xyXG4gICAgICAgICAgICAgICAgdG9TdHJlYW1lckhhbmRsZXJzLmdldCgnTW91c2VNb3ZlJykoW1xyXG4gICAgICAgICAgICAgICAgICAgIGNvb3JkLngsXHJcbiAgICAgICAgICAgICAgICAgICAgY29vcmQueSxcclxuICAgICAgICAgICAgICAgICAgICBkZWx0YS54LFxyXG4gICAgICAgICAgICAgICAgICAgIGRlbHRhLnlcclxuICAgICAgICAgICAgICAgIF0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5mYWtlVG91Y2hGaW5nZXIueCA9IHg7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZha2VUb3VjaEZpbmdlci55ID0geTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRvdWNoRXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogVGhlIGludGVyZmFjZSBmb3IgZmluZ2VyIHBvc2l0aW9uIG1hcHBpbmdcclxuICovXHJcbmNsYXNzIEZha2VUb3VjaEZpbmdlciB7XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSBpZCAtIHRoZSBidXR0b24gaWRcclxuICAgICAqIEBwYXJhbSB4IC0gdGhlIHggYXhpcyB2YWx1ZVxyXG4gICAgICogQHBhcmFtIHkgLSB0aGUgeSBheGlzIHZhbHVlXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKGlkLCB4LCB5KSB7XHJcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xyXG4gICAgICAgIHRoaXMueCA9IHg7XHJcbiAgICAgICAgdGhpcy55ID0geTtcclxuICAgIH1cclxufVxyXG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvSW5wdXRzL0dhbWVwYWRDb250cm9sbGVyLnRzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9JbnB1dHMvR2FtZXBhZENvbnRyb2xsZXIudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywge1xuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIkdhbWVQYWRDb250cm9sbGVyXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIEdhbWVQYWRDb250cm9sbGVyKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJnYW1lcGFkTGF5b3V0XCI6ICgpID0+ICgvKiBiaW5kaW5nICovIGdhbWVwYWRMYXlvdXQpXG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vTG9nZ2VyL0xvZ2dlciAqLyBcIi4vc3JjL0xvZ2dlci9Mb2dnZXIudHNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX1V0aWxfRXZlbnRMaXN0ZW5lclRyYWNrZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL1V0aWwvRXZlbnRMaXN0ZW5lclRyYWNrZXIgKi8gXCIuL3NyYy9VdGlsL0V2ZW50TGlzdGVuZXJUcmFja2VyLnRzXCIpO1xuLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuXHJcblxyXG4vKipcclxuICogVGhlIGNsYXNzIHRoYXQgaGFuZGxlcyB0aGUgZnVuY3Rpb25hbGl0eSBvZiBnYW1lcGFkcyBhbmQgY29udHJvbGxlcnNcclxuICovXHJcbmNsYXNzIEdhbWVQYWRDb250cm9sbGVyIHtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyIC0gU3RyZWFtIG1lc3NhZ2UgaW5zdGFuY2VcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXIpIHtcclxuICAgICAgICAvLyBVdGlsaXR5IGZvciBrZWVwaW5nIHRyYWNrIG9mIGV2ZW50IGhhbmRsZXJzIGFuZCB1bnJlZ2lzdGVyaW5nIHRoZW1cclxuICAgICAgICB0aGlzLmdhbWVQYWRFdmVudExpc3RlbmVyVHJhY2tlciA9IG5ldyBfVXRpbF9FdmVudExpc3RlbmVyVHJhY2tlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkV2ZW50TGlzdGVuZXJUcmFja2VyKCk7XHJcbiAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlciA9IHRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyO1xyXG4gICAgICAgIHRoaXMucmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gKHdpbmRvdy5tb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHxcclxuICAgICAgICAgICAgd2luZG93LndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxyXG4gICAgICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKS5iaW5kKHdpbmRvdyk7XHJcbiAgICAgICAgY29uc3QgYnJvd3NlcldpbmRvdyA9IHdpbmRvdztcclxuICAgICAgICBpZiAoJ0dhbWVwYWRFdmVudCcgaW4gYnJvd3NlcldpbmRvdykge1xyXG4gICAgICAgICAgICBjb25zdCBvbkdhbWVQYWRDb25uZWN0ZWQgPSAoZXYpID0+IHRoaXMuZ2FtZVBhZENvbm5lY3RIYW5kbGVyKGV2KTtcclxuICAgICAgICAgICAgY29uc3Qgb25HYW1lUGFkRGlzY29ubmVjdGVkID0gKGV2KSA9PiB0aGlzLmdhbWVQYWREaXNjb25uZWN0SGFuZGxlcihldik7XHJcbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdnYW1lcGFkY29ubmVjdGVkJywgb25HYW1lUGFkQ29ubmVjdGVkKTtcclxuICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2dhbWVwYWRkaXNjb25uZWN0ZWQnLCBvbkdhbWVQYWREaXNjb25uZWN0ZWQpO1xyXG4gICAgICAgICAgICB0aGlzLmdhbWVQYWRFdmVudExpc3RlbmVyVHJhY2tlci5hZGRVbnJlZ2lzdGVyQ2FsbGJhY2soKCkgPT4gd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2dhbWVwYWRjb25uZWN0ZWQnLCBvbkdhbWVQYWRDb25uZWN0ZWQpKTtcclxuICAgICAgICAgICAgdGhpcy5nYW1lUGFkRXZlbnRMaXN0ZW5lclRyYWNrZXIuYWRkVW5yZWdpc3RlckNhbGxiYWNrKCgpID0+IHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdnYW1lcGFkZGlzY29ubmVjdGVkJywgb25HYW1lUGFkRGlzY29ubmVjdGVkKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKCdXZWJLaXRHYW1lcGFkRXZlbnQnIGluIGJyb3dzZXJXaW5kb3cpIHtcclxuICAgICAgICAgICAgY29uc3Qgb25XZWJraXRHYW1lUGFkQ29ubmVjdGVkID0gKGV2KSA9PiB0aGlzLmdhbWVQYWRDb25uZWN0SGFuZGxlcihldik7XHJcbiAgICAgICAgICAgIGNvbnN0IG9uV2Via2l0R2FtZVBhZERpc2Nvbm5lY3RlZCA9IChldikgPT4gdGhpcy5nYW1lUGFkRGlzY29ubmVjdEhhbmRsZXIoZXYpO1xyXG4gICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignd2Via2l0Z2FtZXBhZGNvbm5lY3RlZCcsIG9uV2Via2l0R2FtZVBhZENvbm5lY3RlZCk7XHJcbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd3ZWJraXRnYW1lcGFkZGlzY29ubmVjdGVkJywgb25XZWJraXRHYW1lUGFkRGlzY29ubmVjdGVkKTtcclxuICAgICAgICAgICAgdGhpcy5nYW1lUGFkRXZlbnRMaXN0ZW5lclRyYWNrZXIuYWRkVW5yZWdpc3RlckNhbGxiYWNrKCgpID0+IHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCd3ZWJraXRnYW1lcGFkY29ubmVjdGVkJywgb25XZWJraXRHYW1lUGFkQ29ubmVjdGVkKSk7XHJcbiAgICAgICAgICAgIHRoaXMuZ2FtZVBhZEV2ZW50TGlzdGVuZXJUcmFja2VyLmFkZFVucmVnaXN0ZXJDYWxsYmFjaygoKSA9PiB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignd2Via2l0Z2FtZXBhZGRpc2Nvbm5lY3RlZCcsIG9uV2Via2l0R2FtZVBhZERpc2Nvbm5lY3RlZCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmNvbnRyb2xsZXJzID0gW107XHJcbiAgICAgICAgaWYgKG5hdmlnYXRvci5nZXRHYW1lcGFkcykge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGdhbWVwYWQgb2YgbmF2aWdhdG9yLmdldEdhbWVwYWRzKCkpIHtcclxuICAgICAgICAgICAgICAgIGlmIChnYW1lcGFkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nYW1lUGFkQ29ubmVjdEhhbmRsZXIobmV3IEdhbWVwYWRFdmVudCgnZ2FtZXBhZGNvbm5lY3RlZCcsIHsgZ2FtZXBhZCB9KSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFVucmVnaXN0ZXJzIGFsbCBldmVudCBoYW5kbGVyc1xyXG4gICAgICovXHJcbiAgICB1bnJlZ2lzdGVyR2FtZVBhZEV2ZW50cygpIHtcclxuICAgICAgICB0aGlzLmdhbWVQYWRFdmVudExpc3RlbmVyVHJhY2tlci51bnJlZ2lzdGVyQWxsKCk7XHJcbiAgICAgICAgZm9yIChjb25zdCBjb250cm9sbGVyIG9mIHRoaXMuY29udHJvbGxlcnMpIHtcclxuICAgICAgICAgICAgaWYgKGNvbnRyb2xsZXIuaWQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vbkdhbWVwYWREaXNjb25uZWN0ZWQoY29udHJvbGxlci5pZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jb250cm9sbGVycyA9IFtdO1xyXG4gICAgICAgIHRoaXMub25HYW1lcGFkQ29ubmVjdGVkID0gKCkgPT4geyB9O1xyXG4gICAgICAgIHRoaXMub25HYW1lcGFkRGlzY29ubmVjdGVkID0gKCkgPT4geyB9O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDb25uZWN0cyB0aGUgZ2FtZXBhZCBoYW5kbGVyXHJcbiAgICAgKiBAcGFyYW0gZ2FtZVBhZEV2ZW50IC0gdGhlIGFjdGl2YXRpbmcgZ2FtZXBhZCBldmVudFxyXG4gICAgICovXHJcbiAgICBnYW1lUGFkQ29ubmVjdEhhbmRsZXIoZ2FtZVBhZEV2ZW50KSB7XHJcbiAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ0dhbWVwYWQgY29ubmVjdCBoYW5kbGVyJywgNik7XHJcbiAgICAgICAgY29uc3QgZ2FtZXBhZCA9IGdhbWVQYWRFdmVudC5nYW1lcGFkO1xyXG4gICAgICAgIGNvbnN0IHRlbXAgPSB7XHJcbiAgICAgICAgICAgIGN1cnJlbnRTdGF0ZTogZ2FtZXBhZCxcclxuICAgICAgICAgICAgcHJldlN0YXRlOiBnYW1lcGFkLFxyXG4gICAgICAgICAgICBpZDogdW5kZWZpbmVkXHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmNvbnRyb2xsZXJzLnB1c2godGVtcCk7XHJcbiAgICAgICAgdGhpcy5jb250cm9sbGVyc1tnYW1lcGFkLmluZGV4XS5jdXJyZW50U3RhdGUgPSBnYW1lcGFkO1xyXG4gICAgICAgIHRoaXMuY29udHJvbGxlcnNbZ2FtZXBhZC5pbmRleF0ucHJldlN0YXRlID0gZ2FtZXBhZDtcclxuICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnZ2FtZXBhZDogJyArIGdhbWVwYWQuaWQgKyAnIGNvbm5lY3RlZCcsIDYpO1xyXG4gICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gdGhpcy51cGRhdGVTdGF0dXMoKSk7XHJcbiAgICAgICAgdGhpcy5vbkdhbWVwYWRDb25uZWN0ZWQoKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogRGlzY29ubmVjdHMgdGhlIGdhbWVwYWQgaGFuZGxlclxyXG4gICAgICogQHBhcmFtIGdhbWVQYWRFdmVudCAtIHRoZSBhY3RpdmF0aW5nIGdhbWVwYWQgZXZlbnRcclxuICAgICAqL1xyXG4gICAgZ2FtZVBhZERpc2Nvbm5lY3RIYW5kbGVyKGdhbWVQYWRFdmVudCkge1xyXG4gICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksICdHYW1lcGFkIGRpc2Nvbm5lY3QgaGFuZGxlcicsIDYpO1xyXG4gICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksICdnYW1lcGFkOiAnICsgZ2FtZVBhZEV2ZW50LmdhbWVwYWQuaWQgKyAnIGRpc2Nvbm5lY3RlZCcsIDYpO1xyXG4gICAgICAgIGNvbnN0IGRlbGV0ZWRDb250cm9sbGVyID0gdGhpcy5jb250cm9sbGVyc1tnYW1lUGFkRXZlbnQuZ2FtZXBhZC5pbmRleF07XHJcbiAgICAgICAgZGVsZXRlIHRoaXMuY29udHJvbGxlcnNbZ2FtZVBhZEV2ZW50LmdhbWVwYWQuaW5kZXhdO1xyXG4gICAgICAgIHRoaXMuY29udHJvbGxlcnMgPSB0aGlzLmNvbnRyb2xsZXJzLmZpbHRlcigoY29udHJvbGxlcikgPT4gY29udHJvbGxlciAhPT0gdW5kZWZpbmVkKTtcclxuICAgICAgICB0aGlzLm9uR2FtZXBhZERpc2Nvbm5lY3RlZChkZWxldGVkQ29udHJvbGxlci5pZCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFNjYW4gZm9yIGNvbm5lY3RlZCBnYW1lcGFkc1xyXG4gICAgICovXHJcbiAgICBzY2FuR2FtZVBhZHMoKSB7XHJcbiAgICAgICAgY29uc3QgZ2FtZXBhZHMgPSBuYXZpZ2F0b3IuZ2V0R2FtZXBhZHNcclxuICAgICAgICAgICAgPyBuYXZpZ2F0b3IuZ2V0R2FtZXBhZHMoKVxyXG4gICAgICAgICAgICA6IG5hdmlnYXRvci53ZWJraXRHZXRHYW1lcGFkc1xyXG4gICAgICAgICAgICAgICAgPyBuYXZpZ2F0b3Iud2Via2l0R2V0R2FtZXBhZHMoKVxyXG4gICAgICAgICAgICAgICAgOiBbXTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGdhbWVwYWRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChnYW1lcGFkc1tpXSAmJiBnYW1lcGFkc1tpXS5pbmRleCBpbiB0aGlzLmNvbnRyb2xsZXJzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRyb2xsZXJzW2dhbWVwYWRzW2ldLmluZGV4XS5jdXJyZW50U3RhdGUgPSBnYW1lcGFkc1tpXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVXBkYXRlcyB0aGUgc3RhdHVzIG9mIHRoZSBnYW1lcGFkIGFuZCBzZW5kcyB0aGUgaW5wdXRzXHJcbiAgICAgKi9cclxuICAgIHVwZGF0ZVN0YXR1cygpIHtcclxuICAgICAgICB0aGlzLnNjYW5HYW1lUGFkcygpO1xyXG4gICAgICAgIGNvbnN0IHRvU3RyZWFtZXJIYW5kbGVycyA9IHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXIudG9TdHJlYW1lckhhbmRsZXJzO1xyXG4gICAgICAgIC8vIEl0ZXJhdGUgb3ZlciBtdWx0aXBsZSBjb250cm9sbGVycyBpbiB0aGUgY2FzZSB0aGUgbXVsdGlwbGUgZ2FtZXBhZHMgYXJlIGNvbm5lY3RlZFxyXG4gICAgICAgIGZvciAoY29uc3QgY29udHJvbGxlciBvZiB0aGlzLmNvbnRyb2xsZXJzKSB7XHJcbiAgICAgICAgICAgIC8vIElmIHdlIGhhdmVuJ3QgcmVjZWl2ZWQgYW4gaWQgKHBvc3NpYmxlIGlmIHVzaW5nIGFuIG9sZGVyIHZlcnNpb24gb2YgVUUpLCByZXR1cm4gdG8gb3JpZ2luYWwgZnVuY3Rpb25hbGl0eVxyXG4gICAgICAgICAgICBjb25zdCBjb250cm9sbGVySW5kZXggPSAoY29udHJvbGxlci5pZCA9PT0gdW5kZWZpbmVkKSA/IHRoaXMuY29udHJvbGxlcnMuaW5kZXhPZihjb250cm9sbGVyKSA6IGNvbnRyb2xsZXIuaWQ7XHJcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRTdGF0ZSA9IGNvbnRyb2xsZXIuY3VycmVudFN0YXRlO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbnRyb2xsZXIuY3VycmVudFN0YXRlLmJ1dHRvbnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRCdXR0b24gPSBjb250cm9sbGVyLmN1cnJlbnRTdGF0ZS5idXR0b25zW2ldO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcHJldmlvdXNCdXR0b24gPSBjb250cm9sbGVyLnByZXZTdGF0ZS5idXR0b25zW2ldO1xyXG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRCdXR0b24ucHJlc3NlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHByZXNzXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkgPT0gZ2FtZXBhZExheW91dC5MZWZ0VHJpZ2dlcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgVUVzIGxlZnQgYW5hbG9nIGhhcyBhIGJ1dHRvbiBpbmRleCBvZiA1XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvU3RyZWFtZXJIYW5kbGVycy5nZXQoJ0dhbWVwYWRBbmFsb2cnKShbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVySW5kZXgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA1LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudEJ1dHRvbi52YWx1ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBdKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoaSA9PSBnYW1lcGFkTGF5b3V0LlJpZ2h0VHJpZ2dlcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgVUVzIHJpZ2h0IGFuYWxvZyBoYXMgYSBidXR0b24gaW5kZXggb2YgNlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b1N0cmVhbWVySGFuZGxlcnMuZ2V0KCdHYW1lcGFkQW5hbG9nJykoW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlckluZGV4LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgNixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRCdXR0b24udmFsdWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b1N0cmVhbWVySGFuZGxlcnMuZ2V0KCdHYW1lcGFkQnV0dG9uUHJlc3NlZCcpKFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXJJbmRleCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2aW91c0J1dHRvbi5wcmVzc2VkID8gMSA6IDBcclxuICAgICAgICAgICAgICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoIWN1cnJlbnRCdXR0b24ucHJlc3NlZCAmJiBwcmV2aW91c0J1dHRvbi5wcmVzc2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gcmVsZWFzZVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpID09IGdhbWVwYWRMYXlvdXQuTGVmdFRyaWdnZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgIFVFcyBsZWZ0IGFuYWxvZyBoYXMgYSBidXR0b24gaW5kZXggb2YgNVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b1N0cmVhbWVySGFuZGxlcnMuZ2V0KCdHYW1lcGFkQW5hbG9nJykoW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlckluZGV4LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgNSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDBcclxuICAgICAgICAgICAgICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGkgPT0gZ2FtZXBhZExheW91dC5SaWdodFRyaWdnZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgIFVFcyByaWdodCBhbmFsb2cgaGFzIGEgYnV0dG9uIGluZGV4IG9mIDZcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9TdHJlYW1lckhhbmRsZXJzLmdldCgnR2FtZXBhZEFuYWxvZycpKFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXJJbmRleCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDYsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9TdHJlYW1lckhhbmRsZXJzLmdldCgnR2FtZXBhZEJ1dHRvblJlbGVhc2VkJykoW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlckluZGV4LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBdKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gSXRlcmF0ZSBvdmVyIGdhbWVwYWQgYXhlcyAod2Ugd2lsbCBpbmNyZW1lbnQgaW4gbG90cyBvZiAyIGFzIHRoZXJlIGlzIDIgYXhlcyBwZXIgc3RpY2spXHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY3VycmVudFN0YXRlLmF4ZXMubGVuZ3RoOyBpICs9IDIpIHtcclxuICAgICAgICAgICAgICAgIC8vIEhvcml6b250YWwgYXhlcyBhcmUgZXZlbiBudW1iZXJlZFxyXG4gICAgICAgICAgICAgICAgY29uc3QgeCA9IHBhcnNlRmxvYXQoY3VycmVudFN0YXRlLmF4ZXNbaV0udG9GaXhlZCg0KSk7XHJcbiAgICAgICAgICAgICAgICAvLyBWZXJ0aWNhbCBheGVzIGFyZSBvZGQgbnVtYmVyZWRcclxuICAgICAgICAgICAgICAgIC8vIGh0dHBzOi8vdzNjLmdpdGh1Yi5pby9nYW1lcGFkLyNyZW1hcHBpbmcgR2FtZXBhZCBicm93c2VyIHNpZGUgc3RhbmRhcmQgbWFwcGluZyBoYXMgcG9zaXRpdmUgZG93biwgbmVnYXRpdmUgdXAuIFRoaXMgaXMgZG93bnJpZ2h0IGRpc2d1c3RpbmcuIFNvIHdlIGZpeCBpdC5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHkgPSAtcGFyc2VGbG9hdChjdXJyZW50U3RhdGUuYXhlc1tpICsgMV0udG9GaXhlZCg0KSk7XHJcbiAgICAgICAgICAgICAgICAvLyBVRSdzIGFuYWxvZyBheGVzIGZvbGxvdyB0aGUgc2FtZSBvcmRlciBhcyB0aGUgYnJvd3NlcnMsIGJ1dCBzdGFydCBhdCBpbmRleCAxIHNvIHdlIHdpbGwgb2Zmc2V0IGFzIHN1Y2hcclxuICAgICAgICAgICAgICAgIHRvU3RyZWFtZXJIYW5kbGVycy5nZXQoJ0dhbWVwYWRBbmFsb2cnKShbXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlckluZGV4LFxyXG4gICAgICAgICAgICAgICAgICAgIGkgKyAxLFxyXG4gICAgICAgICAgICAgICAgICAgIHhcclxuICAgICAgICAgICAgICAgIF0pOyAvLyBIb3Jpem9udGFsIGF4ZXMsIG9ubHkgb2Zmc2V0IGJ5IDFcclxuICAgICAgICAgICAgICAgIHRvU3RyZWFtZXJIYW5kbGVycy5nZXQoJ0dhbWVwYWRBbmFsb2cnKShbXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlckluZGV4LFxyXG4gICAgICAgICAgICAgICAgICAgIGkgKyAyLFxyXG4gICAgICAgICAgICAgICAgICAgIHlcclxuICAgICAgICAgICAgICAgIF0pOyAvLyBWZXJ0aWNhbCBheGVzLCBvZmZzZXQgYnkgdHdvICgxIHRvIG1hdGNoIFVFcyBheGVzIGNvbnZlbnRpb24gYW5kIHRoZW4gYW5vdGhlciAxIGZvciB0aGUgdmVydGljYWwgYXhlcylcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmNvbnRyb2xsZXJzW2NvbnRyb2xsZXJJbmRleF0ucHJldlN0YXRlID0gY3VycmVudFN0YXRlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5jb250cm9sbGVycy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHRoaXMudXBkYXRlU3RhdHVzKCkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIG9uR2FtZXBhZFJlc3BvbnNlUmVjZWl2ZWQoZ2FtZXBhZElkKSB7XHJcbiAgICAgICAgZm9yIChjb25zdCBjb250cm9sbGVyIG9mIHRoaXMuY29udHJvbGxlcnMpIHtcclxuICAgICAgICAgICAgaWYgKGNvbnRyb2xsZXIuaWQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgY29udHJvbGxlci5pZCA9IGdhbWVwYWRJZDtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBFdmVudCB0byBzZW5kIHRoZSBnYW1lcGFkY29ubmVjdGVkIG1lc3NhZ2UgdG8gdGhlIGFwcGxpY2F0aW9uXHJcbiAgICAgKi9cclxuICAgIG9uR2FtZXBhZENvbm5lY3RlZCgpIHtcclxuICAgICAgICAvLyBEZWZhdWx0IEZ1bmN0aW9uYWxpdHk6IERvIE5vdGhpbmdcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogRXZlbnQgdG8gc2VuZCB0aGUgZ2FtZXBhZGRpc2Nvbm5lY3RlZCBtZXNzYWdlIHRvIHRoZSBhcHBsaWNhdGlvblxyXG4gICAgICovXHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXHJcbiAgICBvbkdhbWVwYWREaXNjb25uZWN0ZWQoY29udHJvbGxlcklkeCkge1xyXG4gICAgICAgIC8vIERlZmF1bHQgRnVuY3Rpb25hbGl0eTogRG8gTm90aGluZ1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBHYW1lcGFkIGxheW91dCBjb2RlcyBlbnVtXHJcbiAqL1xyXG52YXIgZ2FtZXBhZExheW91dDtcclxuKGZ1bmN0aW9uIChnYW1lcGFkTGF5b3V0KSB7XHJcbiAgICBnYW1lcGFkTGF5b3V0W2dhbWVwYWRMYXlvdXRbXCJSaWdodENsdXN0ZXJCb3R0b21CdXR0b25cIl0gPSAwXSA9IFwiUmlnaHRDbHVzdGVyQm90dG9tQnV0dG9uXCI7XHJcbiAgICBnYW1lcGFkTGF5b3V0W2dhbWVwYWRMYXlvdXRbXCJSaWdodENsdXN0ZXJSaWdodEJ1dHRvblwiXSA9IDFdID0gXCJSaWdodENsdXN0ZXJSaWdodEJ1dHRvblwiO1xyXG4gICAgZ2FtZXBhZExheW91dFtnYW1lcGFkTGF5b3V0W1wiUmlnaHRDbHVzdGVyTGVmdEJ1dHRvblwiXSA9IDJdID0gXCJSaWdodENsdXN0ZXJMZWZ0QnV0dG9uXCI7XHJcbiAgICBnYW1lcGFkTGF5b3V0W2dhbWVwYWRMYXlvdXRbXCJSaWdodENsdXN0ZXJUb3BCdXR0b25cIl0gPSAzXSA9IFwiUmlnaHRDbHVzdGVyVG9wQnV0dG9uXCI7XHJcbiAgICBnYW1lcGFkTGF5b3V0W2dhbWVwYWRMYXlvdXRbXCJMZWZ0U2hvdWxkZXJcIl0gPSA0XSA9IFwiTGVmdFNob3VsZGVyXCI7XHJcbiAgICBnYW1lcGFkTGF5b3V0W2dhbWVwYWRMYXlvdXRbXCJSaWdodFNob3VsZGVyXCJdID0gNV0gPSBcIlJpZ2h0U2hvdWxkZXJcIjtcclxuICAgIGdhbWVwYWRMYXlvdXRbZ2FtZXBhZExheW91dFtcIkxlZnRUcmlnZ2VyXCJdID0gNl0gPSBcIkxlZnRUcmlnZ2VyXCI7XHJcbiAgICBnYW1lcGFkTGF5b3V0W2dhbWVwYWRMYXlvdXRbXCJSaWdodFRyaWdnZXJcIl0gPSA3XSA9IFwiUmlnaHRUcmlnZ2VyXCI7XHJcbiAgICBnYW1lcGFkTGF5b3V0W2dhbWVwYWRMYXlvdXRbXCJTZWxlY3RPckJhY2tcIl0gPSA4XSA9IFwiU2VsZWN0T3JCYWNrXCI7XHJcbiAgICBnYW1lcGFkTGF5b3V0W2dhbWVwYWRMYXlvdXRbXCJTdGFydE9yRm9yd2FyZFwiXSA9IDldID0gXCJTdGFydE9yRm9yd2FyZFwiO1xyXG4gICAgZ2FtZXBhZExheW91dFtnYW1lcGFkTGF5b3V0W1wiTGVmdEFuYWxvZ1ByZXNzXCJdID0gMTBdID0gXCJMZWZ0QW5hbG9nUHJlc3NcIjtcclxuICAgIGdhbWVwYWRMYXlvdXRbZ2FtZXBhZExheW91dFtcIlJpZ2h0QW5hbG9nUHJlc3NcIl0gPSAxMV0gPSBcIlJpZ2h0QW5hbG9nUHJlc3NcIjtcclxuICAgIGdhbWVwYWRMYXlvdXRbZ2FtZXBhZExheW91dFtcIkxlZnRDbHVzdGVyVG9wQnV0dG9uXCJdID0gMTJdID0gXCJMZWZ0Q2x1c3RlclRvcEJ1dHRvblwiO1xyXG4gICAgZ2FtZXBhZExheW91dFtnYW1lcGFkTGF5b3V0W1wiTGVmdENsdXN0ZXJCb3R0b21CdXR0b25cIl0gPSAxM10gPSBcIkxlZnRDbHVzdGVyQm90dG9tQnV0dG9uXCI7XHJcbiAgICBnYW1lcGFkTGF5b3V0W2dhbWVwYWRMYXlvdXRbXCJMZWZ0Q2x1c3RlckxlZnRCdXR0b25cIl0gPSAxNF0gPSBcIkxlZnRDbHVzdGVyTGVmdEJ1dHRvblwiO1xyXG4gICAgZ2FtZXBhZExheW91dFtnYW1lcGFkTGF5b3V0W1wiTGVmdENsdXN0ZXJSaWdodEJ1dHRvblwiXSA9IDE1XSA9IFwiTGVmdENsdXN0ZXJSaWdodEJ1dHRvblwiO1xyXG4gICAgZ2FtZXBhZExheW91dFtnYW1lcGFkTGF5b3V0W1wiQ2VudHJlQnV0dG9uXCJdID0gMTZdID0gXCJDZW50cmVCdXR0b25cIjtcclxuICAgIC8vIEF4ZXNcclxuICAgIGdhbWVwYWRMYXlvdXRbZ2FtZXBhZExheW91dFtcIkxlZnRTdGlja0hvcml6b250YWxcIl0gPSAwXSA9IFwiTGVmdFN0aWNrSG9yaXpvbnRhbFwiO1xyXG4gICAgZ2FtZXBhZExheW91dFtnYW1lcGFkTGF5b3V0W1wiTGVmdFN0aWNrVmVydGljYWxcIl0gPSAxXSA9IFwiTGVmdFN0aWNrVmVydGljYWxcIjtcclxuICAgIGdhbWVwYWRMYXlvdXRbZ2FtZXBhZExheW91dFtcIlJpZ2h0U3RpY2tIb3Jpem9udGFsXCJdID0gMl0gPSBcIlJpZ2h0U3RpY2tIb3Jpem9udGFsXCI7XHJcbiAgICBnYW1lcGFkTGF5b3V0W2dhbWVwYWRMYXlvdXRbXCJSaWdodFN0aWNrVmVydGljYWxcIl0gPSAzXSA9IFwiUmlnaHRTdGlja1ZlcnRpY2FsXCI7XHJcbn0pKGdhbWVwYWRMYXlvdXQgfHwgKGdhbWVwYWRMYXlvdXQgPSB7fSkpO1xyXG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvSW5wdXRzL0hvdmVyaW5nTW91c2VFdmVudHMudHNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvSW5wdXRzL0hvdmVyaW5nTW91c2VFdmVudHMudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiSG92ZXJpbmdNb3VzZUV2ZW50c1wiOiAoKSA9PiAoLyogYmluZGluZyAqLyBIb3ZlcmluZ01vdXNlRXZlbnRzKVxuLyogaGFybW9ueSBleHBvcnQgKi8gfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL0xvZ2dlci9Mb2dnZXIgKi8gXCIuL3NyYy9Mb2dnZXIvTG9nZ2VyLnRzXCIpO1xuLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuXHJcbi8qKlxyXG4gKiBWaWRlbyBQbGF5ZXIgbW91c2UgSG92ZXIgaGFuZGxlclxyXG4gKi9cclxuY2xhc3MgSG92ZXJpbmdNb3VzZUV2ZW50cyB7XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSBtb3VzZUNvbnRyb2xsZXIgLSBNb3VzZSBDb250cm9sbGVyIGluc3RhbmNlXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKG1vdXNlQ29udHJvbGxlcikge1xyXG4gICAgICAgIHRoaXMubW91c2VDb250cm9sbGVyID0gbW91c2VDb250cm9sbGVyO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBVbnJlZ2lzdGVyIGV2ZW50IGhhbmRsZXJzXHJcbiAgICAgKi9cclxuICAgIHVucmVnaXN0ZXJNb3VzZUV2ZW50cygpIHtcclxuICAgICAgICAvLyBlbXB0eSBmb3IgSG92ZXJpbmdNb3VzZUV2ZW50cyBpbXBsZW1lbnRhdGlvblxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBIYW5kbGUgdGhlIG1vdXNlIG1vdmUgZXZlbnQsIHNlbmRzIHRoZSBtb3VzZSBkYXRhIHRvIHRoZSBVRSBJbnN0YW5jZVxyXG4gICAgICogQHBhcmFtIG1vdXNlRXZlbnQgLSBNb3VzZSBFdmVudFxyXG4gICAgICovXHJcbiAgICB1cGRhdGVNb3VzZU1vdmVQb3NpdGlvbihtb3VzZUV2ZW50KSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLm1vdXNlQ29udHJvbGxlci52aWRlb0VsZW1lbnRQcm92aWRlci5pc1ZpZGVvUmVhZHkoKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksICdNb3VzZU1vdmUnLCA2KTtcclxuICAgICAgICBjb25zdCBjb29yZCA9IHRoaXMubW91c2VDb250cm9sbGVyLmNvb3JkaW5hdGVDb252ZXJ0ZXIubm9ybWFsaXplQW5kUXVhbnRpemVVbnNpZ25lZChtb3VzZUV2ZW50Lm9mZnNldFgsIG1vdXNlRXZlbnQub2Zmc2V0WSk7XHJcbiAgICAgICAgY29uc3QgZGVsdGEgPSB0aGlzLm1vdXNlQ29udHJvbGxlci5jb29yZGluYXRlQ29udmVydGVyLm5vcm1hbGl6ZUFuZFF1YW50aXplU2lnbmVkKG1vdXNlRXZlbnQubW92ZW1lbnRYLCBtb3VzZUV2ZW50Lm1vdmVtZW50WSk7XHJcbiAgICAgICAgY29uc3QgdG9TdHJlYW1lckhhbmRsZXJzID0gdGhpcy5tb3VzZUNvbnRyb2xsZXIudG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXIudG9TdHJlYW1lckhhbmRsZXJzO1xyXG4gICAgICAgIHRvU3RyZWFtZXJIYW5kbGVycy5nZXQoJ01vdXNlTW92ZScpKFtcclxuICAgICAgICAgICAgY29vcmQueCxcclxuICAgICAgICAgICAgY29vcmQueSxcclxuICAgICAgICAgICAgZGVsdGEueCxcclxuICAgICAgICAgICAgZGVsdGEueVxyXG4gICAgICAgIF0pO1xyXG4gICAgICAgIG1vdXNlRXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlIHRoZSBtb3VzZSBEb3duIGV2ZW50LCBzZW5kcyB0aGUgbW91c2UgZGF0YSB0byB0aGUgVUUgSW5zdGFuY2VcclxuICAgICAqIEBwYXJhbSBtb3VzZUV2ZW50IC0gTW91c2UgRXZlbnRcclxuICAgICAqL1xyXG4gICAgaGFuZGxlTW91c2VEb3duKG1vdXNlRXZlbnQpIHtcclxuICAgICAgICBpZiAoIXRoaXMubW91c2VDb250cm9sbGVyLnZpZGVvRWxlbWVudFByb3ZpZGVyLmlzVmlkZW9SZWFkeSgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ29uTW91c2UgRG93bicsIDYpO1xyXG4gICAgICAgIGNvbnN0IGNvb3JkID0gdGhpcy5tb3VzZUNvbnRyb2xsZXIuY29vcmRpbmF0ZUNvbnZlcnRlci5ub3JtYWxpemVBbmRRdWFudGl6ZVVuc2lnbmVkKG1vdXNlRXZlbnQub2Zmc2V0WCwgbW91c2VFdmVudC5vZmZzZXRZKTtcclxuICAgICAgICBjb25zdCB0b1N0cmVhbWVySGFuZGxlcnMgPSB0aGlzLm1vdXNlQ29udHJvbGxlci50b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlci50b1N0cmVhbWVySGFuZGxlcnM7XHJcbiAgICAgICAgdG9TdHJlYW1lckhhbmRsZXJzLmdldCgnTW91c2VEb3duJykoW1xyXG4gICAgICAgICAgICBtb3VzZUV2ZW50LmJ1dHRvbixcclxuICAgICAgICAgICAgY29vcmQueCxcclxuICAgICAgICAgICAgY29vcmQueVxyXG4gICAgICAgIF0pO1xyXG4gICAgICAgIG1vdXNlRXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlIHRoZSBtb3VzZSBVcCBldmVudCwgc2VuZHMgdGhlIG1vdXNlIGRhdGEgdG8gdGhlIFVFIEluc3RhbmNlXHJcbiAgICAgKiBAcGFyYW0gbW91c2VFdmVudCAtIE1vdXNlIEV2ZW50XHJcbiAgICAgKi9cclxuICAgIGhhbmRsZU1vdXNlVXAobW91c2VFdmVudCkge1xyXG4gICAgICAgIGlmICghdGhpcy5tb3VzZUNvbnRyb2xsZXIudmlkZW9FbGVtZW50UHJvdmlkZXIuaXNWaWRlb1JlYWR5KCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBjb29yZCA9IHRoaXMubW91c2VDb250cm9sbGVyLmNvb3JkaW5hdGVDb252ZXJ0ZXIubm9ybWFsaXplQW5kUXVhbnRpemVVbnNpZ25lZChtb3VzZUV2ZW50Lm9mZnNldFgsIG1vdXNlRXZlbnQub2Zmc2V0WSk7XHJcbiAgICAgICAgY29uc3QgdG9TdHJlYW1lckhhbmRsZXJzID0gdGhpcy5tb3VzZUNvbnRyb2xsZXIudG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXIudG9TdHJlYW1lckhhbmRsZXJzO1xyXG4gICAgICAgIHRvU3RyZWFtZXJIYW5kbGVycy5nZXQoJ01vdXNlVXAnKShbXHJcbiAgICAgICAgICAgIG1vdXNlRXZlbnQuYnV0dG9uLFxyXG4gICAgICAgICAgICBjb29yZC54LFxyXG4gICAgICAgICAgICBjb29yZC55XHJcbiAgICAgICAgXSk7XHJcbiAgICAgICAgbW91c2VFdmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBIYW5kbGUgdGhlIG1vdXNlIGNvbnRleHQgbWVudSBldmVudCwgc2VuZHMgdGhlIG1vdXNlIGRhdGEgdG8gdGhlIFVFIEluc3RhbmNlXHJcbiAgICAgKiBAcGFyYW0gbW91c2VFdmVudCAtIE1vdXNlIEV2ZW50XHJcbiAgICAgKi9cclxuICAgIGhhbmRsZUNvbnRleHRNZW51KG1vdXNlRXZlbnQpIHtcclxuICAgICAgICBpZiAoIXRoaXMubW91c2VDb250cm9sbGVyLnZpZGVvRWxlbWVudFByb3ZpZGVyLmlzVmlkZW9SZWFkeSgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgY29vcmQgPSB0aGlzLm1vdXNlQ29udHJvbGxlci5jb29yZGluYXRlQ29udmVydGVyLm5vcm1hbGl6ZUFuZFF1YW50aXplVW5zaWduZWQobW91c2VFdmVudC5vZmZzZXRYLCBtb3VzZUV2ZW50Lm9mZnNldFkpO1xyXG4gICAgICAgIGNvbnN0IHRvU3RyZWFtZXJIYW5kbGVycyA9IHRoaXMubW91c2VDb250cm9sbGVyLnRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyLnRvU3RyZWFtZXJIYW5kbGVycztcclxuICAgICAgICB0b1N0cmVhbWVySGFuZGxlcnMuZ2V0KCdNb3VzZVVwJykoW1xyXG4gICAgICAgICAgICBtb3VzZUV2ZW50LmJ1dHRvbixcclxuICAgICAgICAgICAgY29vcmQueCxcclxuICAgICAgICAgICAgY29vcmQueVxyXG4gICAgICAgIF0pO1xyXG4gICAgICAgIG1vdXNlRXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlIHRoZSBtb3VzZSB3aGVlbCBldmVudCwgc2VuZHMgdGhlIG1vdXNlIHdoZWVsIGRhdGEgdG8gdGhlIFVFIEluc3RhbmNlXHJcbiAgICAgKiBAcGFyYW0gd2hlZWxFdmVudCAtIE1vdXNlIEV2ZW50XHJcbiAgICAgKi9cclxuICAgIGhhbmRsZU1vdXNlV2hlZWwod2hlZWxFdmVudCkge1xyXG4gICAgICAgIGlmICghdGhpcy5tb3VzZUNvbnRyb2xsZXIudmlkZW9FbGVtZW50UHJvdmlkZXIuaXNWaWRlb1JlYWR5KCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBjb29yZCA9IHRoaXMubW91c2VDb250cm9sbGVyLmNvb3JkaW5hdGVDb252ZXJ0ZXIubm9ybWFsaXplQW5kUXVhbnRpemVVbnNpZ25lZCh3aGVlbEV2ZW50Lm9mZnNldFgsIHdoZWVsRXZlbnQub2Zmc2V0WSk7XHJcbiAgICAgICAgY29uc3QgdG9TdHJlYW1lckhhbmRsZXJzID0gdGhpcy5tb3VzZUNvbnRyb2xsZXIudG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXIudG9TdHJlYW1lckhhbmRsZXJzO1xyXG4gICAgICAgIHRvU3RyZWFtZXJIYW5kbGVycy5nZXQoJ01vdXNlV2hlZWwnKShbXHJcbiAgICAgICAgICAgIHdoZWVsRXZlbnQud2hlZWxEZWx0YSxcclxuICAgICAgICAgICAgY29vcmQueCxcclxuICAgICAgICAgICAgY29vcmQueVxyXG4gICAgICAgIF0pO1xyXG4gICAgICAgIHdoZWVsRXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlIHRoZSBtb3VzZSBkb3VibGUgY2xpY2sgZXZlbnQsIHNlbmRzIHRoZSBtb3VzZSBkYXRhIHRvIHRoZSBVRSBJbnN0YW5jZVxyXG4gICAgICogQHBhcmFtIG1vdXNlRXZlbnQgLSBNb3VzZSBFdmVudFxyXG4gICAgICovXHJcbiAgICBoYW5kbGVNb3VzZURvdWJsZShtb3VzZUV2ZW50KSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLm1vdXNlQ29udHJvbGxlci52aWRlb0VsZW1lbnRQcm92aWRlci5pc1ZpZGVvUmVhZHkoKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGNvb3JkID0gdGhpcy5tb3VzZUNvbnRyb2xsZXIuY29vcmRpbmF0ZUNvbnZlcnRlci5ub3JtYWxpemVBbmRRdWFudGl6ZVVuc2lnbmVkKG1vdXNlRXZlbnQub2Zmc2V0WCwgbW91c2VFdmVudC5vZmZzZXRZKTtcclxuICAgICAgICBjb25zdCB0b1N0cmVhbWVySGFuZGxlcnMgPSB0aGlzLm1vdXNlQ29udHJvbGxlci50b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlci50b1N0cmVhbWVySGFuZGxlcnM7XHJcbiAgICAgICAgdG9TdHJlYW1lckhhbmRsZXJzLmdldCgnTW91c2VEb3VibGUnKShbXHJcbiAgICAgICAgICAgIG1vdXNlRXZlbnQuYnV0dG9uLFxyXG4gICAgICAgICAgICBjb29yZC54LFxyXG4gICAgICAgICAgICBjb29yZC55XHJcbiAgICAgICAgXSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEhhbmRsZSB0aGUgcHJlc3MgbW91c2UgYnV0dG9ucyBldmVudCwgc2VuZHMgdGhlIG1vdXNlIGRhdGEgdG8gdGhlIFVFIEluc3RhbmNlXHJcbiAgICAgKiBAcGFyYW0gbW91c2VFdmVudCAtIE1vdXNlIEV2ZW50XHJcbiAgICAgKi9cclxuICAgIGhhbmRsZVByZXNzTW91c2VCdXR0b25zKG1vdXNlRXZlbnQpIHtcclxuICAgICAgICBpZiAoIXRoaXMubW91c2VDb250cm9sbGVyLnZpZGVvRWxlbWVudFByb3ZpZGVyLmlzVmlkZW9SZWFkeSgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5tb3VzZUNvbnRyb2xsZXIucHJlc3NNb3VzZUJ1dHRvbnMobW91c2VFdmVudC5idXR0b25zLCBtb3VzZUV2ZW50Lm9mZnNldFgsIG1vdXNlRXZlbnQub2Zmc2V0WSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEhhbmRsZSB0aGUgcmVsZWFzZSBtb3VzZSBidXR0b25zIGV2ZW50LCBzZW5kcyB0aGUgbW91c2UgZGF0YSB0byB0aGUgVUUgSW5zdGFuY2VcclxuICAgICAqIEBwYXJhbSBtb3VzZUV2ZW50IC0gTW91c2UgRXZlbnRcclxuICAgICAqL1xyXG4gICAgaGFuZGxlUmVsZWFzZU1vdXNlQnV0dG9ucyhtb3VzZUV2ZW50KSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLm1vdXNlQ29udHJvbGxlci52aWRlb0VsZW1lbnRQcm92aWRlci5pc1ZpZGVvUmVhZHkoKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMubW91c2VDb250cm9sbGVyLnJlbGVhc2VNb3VzZUJ1dHRvbnMobW91c2VFdmVudC5idXR0b25zLCBtb3VzZUV2ZW50Lm9mZnNldFgsIG1vdXNlRXZlbnQub2Zmc2V0WSk7XHJcbiAgICB9XHJcbn1cclxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL0lucHV0cy9JbnB1dENsYXNzZXNGYWN0b3J5LnRzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL0lucHV0cy9JbnB1dENsYXNzZXNGYWN0b3J5LnRzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywge1xuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIkFjdGl2ZUtleXNcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gQWN0aXZlS2V5cyksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiSW5wdXRDbGFzc2VzRmFjdG9yeVwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBJbnB1dENsYXNzZXNGYWN0b3J5KVxuLyogaGFybW9ueSBleHBvcnQgKi8gfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX0Zha2VUb3VjaENvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vRmFrZVRvdWNoQ29udHJvbGxlciAqLyBcIi4vc3JjL0lucHV0cy9GYWtlVG91Y2hDb250cm9sbGVyLnRzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9LZXlib2FyZENvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vS2V5Ym9hcmRDb250cm9sbGVyICovIFwiLi9zcmMvSW5wdXRzL0tleWJvYXJkQ29udHJvbGxlci50c1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfTW91c2VDb250cm9sbGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL01vdXNlQ29udHJvbGxlciAqLyBcIi4vc3JjL0lucHV0cy9Nb3VzZUNvbnRyb2xsZXIudHNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX1RvdWNoQ29udHJvbGxlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9Ub3VjaENvbnRyb2xsZXIgKi8gXCIuL3NyYy9JbnB1dHMvVG91Y2hDb250cm9sbGVyLnRzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9HYW1lcGFkQ29udHJvbGxlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9HYW1lcGFkQ29udHJvbGxlciAqLyBcIi4vc3JjL0lucHV0cy9HYW1lcGFkQ29udHJvbGxlci50c1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfQ29uZmlnX0NvbmZpZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vQ29uZmlnL0NvbmZpZyAqLyBcIi4vc3JjL0NvbmZpZy9Db25maWcudHNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL0xvZ2dlci9Mb2dnZXIgKi8gXCIuL3NyYy9Mb2dnZXIvTG9nZ2VyLnRzXCIpO1xuLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBDbGFzcyBmb3IgbWFraW5nIGFuZCBzZXR0aW5nIHVwIGlucHV0IGNsYXNzIHR5cGVzXHJcbiAqL1xyXG5jbGFzcyBJbnB1dENsYXNzZXNGYWN0b3J5IHtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyIC0gU3RyZWFtIG1lc3NhZ2UgaW5zdGFuY2VcclxuICAgICAqIEBwYXJhbSB2aWRlb0VsZW1lbnRQcm92aWRlciAtIFZpZGVvIFBsYXllciBpbnN0YW5jZVxyXG4gICAgICogQHBhcmFtIGNvb3JkaW5hdGVDb252ZXJ0ZXIgLSBBIGNvb3JkaW5hdGVDb252ZXJ0ZXIgaW5zdGFuY2VcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXIsIHZpZGVvRWxlbWVudFByb3ZpZGVyLCBjb29yZGluYXRlQ29udmVydGVyKSB7XHJcbiAgICAgICAgdGhpcy5hY3RpdmVLZXlzID0gbmV3IEFjdGl2ZUtleXMoKTtcclxuICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyID0gdG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXI7XHJcbiAgICAgICAgdGhpcy52aWRlb0VsZW1lbnRQcm92aWRlciA9IHZpZGVvRWxlbWVudFByb3ZpZGVyO1xyXG4gICAgICAgIHRoaXMuY29vcmRpbmF0ZUNvbnZlcnRlciA9IGNvb3JkaW5hdGVDb252ZXJ0ZXI7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJlZ2lzdGVycyBicm93c2VyIGtleSBldmVudHMuXHJcbiAgICAgKi9cclxuICAgIHJlZ2lzdGVyS2V5Qm9hcmQoY29uZmlnKSB7XHJcbiAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ1JlZ2lzdGVyIEtleWJvYXJkIEV2ZW50cycsIDcpO1xyXG4gICAgICAgIGNvbnN0IGtleWJvYXJkQ29udHJvbGxlciA9IG5ldyBfS2V5Ym9hcmRDb250cm9sbGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uS2V5Ym9hcmRDb250cm9sbGVyKHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXIsIGNvbmZpZywgdGhpcy5hY3RpdmVLZXlzKTtcclxuICAgICAgICBrZXlib2FyZENvbnRyb2xsZXIucmVnaXN0ZXJLZXlCb2FyZEV2ZW50cygpO1xyXG4gICAgICAgIHJldHVybiBrZXlib2FyZENvbnRyb2xsZXI7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIHJlZ2lzdGVyIG1vdXNlIGV2ZW50cyBiYXNlZCBvbiBhIGNvbnRyb2wgdHlwZVxyXG4gICAgICogQHBhcmFtIGNvbnRyb2xTY2hlbWUgLSBpZiB0aGUgbW91c2UgaXMgZWl0aGVyIGhvdmVyaW5nIG9yIGxvY2tlZFxyXG4gICAgICovXHJcbiAgICByZWdpc3Rlck1vdXNlKGNvbnRyb2xTY2hlbWUpIHtcclxuICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnUmVnaXN0ZXIgTW91c2UgRXZlbnRzJywgNyk7XHJcbiAgICAgICAgY29uc3QgbW91c2VDb250cm9sbGVyID0gbmV3IF9Nb3VzZUNvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5Nb3VzZUNvbnRyb2xsZXIodGhpcy50b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlciwgdGhpcy52aWRlb0VsZW1lbnRQcm92aWRlciwgdGhpcy5jb29yZGluYXRlQ29udmVydGVyLCB0aGlzLmFjdGl2ZUtleXMpO1xyXG4gICAgICAgIHN3aXRjaCAoY29udHJvbFNjaGVtZSkge1xyXG4gICAgICAgICAgICBjYXNlIF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18uQ29udHJvbFNjaGVtZVR5cGUuTG9ja2VkTW91c2U6XHJcbiAgICAgICAgICAgICAgICBtb3VzZUNvbnRyb2xsZXIucmVnaXN0ZXJMb2NrZWRNb3VzZUV2ZW50cyhtb3VzZUNvbnRyb2xsZXIpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgX0NvbmZpZ19Db25maWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXy5Db250cm9sU2NoZW1lVHlwZS5Ib3ZlcmluZ01vdXNlOlxyXG4gICAgICAgICAgICAgICAgbW91c2VDb250cm9sbGVyLnJlZ2lzdGVySG92ZXJpbmdNb3VzZUV2ZW50cyhtb3VzZUNvbnRyb2xsZXIpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkxvZ2dlci5JbmZvKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ3Vua25vd24gQ29udHJvbCBTY2hlbWUgVHlwZSBEZWZhdWx0aW5nIHRvIExvY2tlZCBNb3VzZSBFdmVudHMnKTtcclxuICAgICAgICAgICAgICAgIG1vdXNlQ29udHJvbGxlci5yZWdpc3RlckxvY2tlZE1vdXNlRXZlbnRzKG1vdXNlQ29udHJvbGxlcik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG1vdXNlQ29udHJvbGxlcjtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogcmVnaXN0ZXIgdG91Y2ggZXZlbnRzXHJcbiAgICAgKiBAcGFyYW0gZmFrZU1vdXNlVG91Y2ggLSB0aGUgZmFrZWQgbW91c2UgdG91Y2ggZXZlbnRcclxuICAgICAqL1xyXG4gICAgcmVnaXN0ZXJUb3VjaChmYWtlTW91c2VUb3VjaCwgdmlkZW9FbGVtZW50UGFyZW50Q2xpZW50UmVjdCkge1xyXG4gICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksICdSZWdpc3RlcmluZyBUb3VjaCcsIDYpO1xyXG4gICAgICAgIGlmIChmYWtlTW91c2VUb3VjaCkge1xyXG4gICAgICAgICAgICBjb25zdCBmYWtlVG91Y2hDb250cm9sbGVyID0gbmV3IF9GYWtlVG91Y2hDb250cm9sbGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18uRmFrZVRvdWNoQ29udHJvbGxlcih0aGlzLnRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyLCB0aGlzLnZpZGVvRWxlbWVudFByb3ZpZGVyLCB0aGlzLmNvb3JkaW5hdGVDb252ZXJ0ZXIpO1xyXG4gICAgICAgICAgICBmYWtlVG91Y2hDb250cm9sbGVyLnNldFZpZGVvRWxlbWVudFBhcmVudENsaWVudFJlY3QodmlkZW9FbGVtZW50UGFyZW50Q2xpZW50UmVjdCk7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWtlVG91Y2hDb250cm9sbGVyO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBfVG91Y2hDb250cm9sbGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X18uVG91Y2hDb250cm9sbGVyKHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXIsIHRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIsIHRoaXMuY29vcmRpbmF0ZUNvbnZlcnRlcik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiByZWdpc3RlcnMgYSBnYW1lcGFkXHJcbiAgICAgKi9cclxuICAgIHJlZ2lzdGVyR2FtZVBhZCgpIHtcclxuICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnUmVnaXN0ZXIgR2FtZSBQYWQnLCA3KTtcclxuICAgICAgICBjb25zdCBnYW1lUGFkQ29udHJvbGxlciA9IG5ldyBfR2FtZXBhZENvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfXy5HYW1lUGFkQ29udHJvbGxlcih0aGlzLnRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyKTtcclxuICAgICAgICByZXR1cm4gZ2FtZVBhZENvbnRyb2xsZXI7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIEEgY2xhc3MgdGhhdCBrZWVwcyB0cmFjayBvZiBjdXJyZW50IGFjdGl2ZSBrZXlzXHJcbiAqL1xyXG5jbGFzcyBBY3RpdmVLZXlzIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuYWN0aXZlS2V5cyA9IFtdO1xyXG4gICAgICAgIHRoaXMuYWN0aXZlS2V5cyA9IFtdO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgdGhlIGN1cnJlbnQgYXJyYXkgb2YgYWN0aXZlIGtleXNcclxuICAgICAqIEByZXR1cm5zIC0gYW4gYXJyYXkgb2YgYWN0aXZlIGtleXNcclxuICAgICAqL1xyXG4gICAgZ2V0QWN0aXZlS2V5cygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5hY3RpdmVLZXlzO1xyXG4gICAgfVxyXG59XHJcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9JbnB1dHMvS2V5Ym9hcmRDb250cm9sbGVyLnRzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvSW5wdXRzL0tleWJvYXJkQ29udHJvbGxlci50cyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywge1xuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIktleWJvYXJkQ29udHJvbGxlclwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBLZXlib2FyZENvbnRyb2xsZXIpXG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfU3BlY2lhbEtleUNvZGVzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL1NwZWNpYWxLZXlDb2RlcyAqLyBcIi4vc3JjL0lucHV0cy9TcGVjaWFsS2V5Q29kZXMudHNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL0xvZ2dlci9Mb2dnZXIgKi8gXCIuL3NyYy9Mb2dnZXIvTG9nZ2VyLnRzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9Db25maWcvQ29uZmlnICovIFwiLi9zcmMvQ29uZmlnL0NvbmZpZy50c1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfVXRpbF9FdmVudExpc3RlbmVyVHJhY2tlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vVXRpbC9FdmVudExpc3RlbmVyVHJhY2tlciAqLyBcIi4vc3JjL1V0aWwvRXZlbnRMaXN0ZW5lclRyYWNrZXIudHNcIik7XG4vLyBDb3B5cmlnaHQgRXBpYyBHYW1lcywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG5cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIEhhbmRsZXMgdGhlIEtleWJvYXJkIElucHV0cyBmb3IgdGhlIGRvY3VtZW50XHJcbiAqL1xyXG5jbGFzcyBLZXlib2FyZENvbnRyb2xsZXIge1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0gdG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXIgU3RyZWFtIG1lc3NhZ2UgcHJvdmlkZXIgY2xhc3Mgb2JqZWN0XHJcbiAgICAgKiBAcGFyYW0gY29uZmlnIFRoZSBhcHBsaWNhdGlvbnMgY29uZmlndXJhdGlvbi4gV2UncmUgaW50ZXJlc3RlZCBpbiB0aGUgc3VwcHJlc3MgYnJvd3NlciBrZXlzIG9wdGlvblxyXG4gICAgICogQHBhcmFtIGFjdGl2ZUtleXNQcm92aWRlciBBY3RpdmUga2V5cyBwcm92aWRlciBjbGFzcyBvYmplY3RcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXIsIGNvbmZpZywgYWN0aXZlS2V5c1Byb3ZpZGVyKSB7XHJcbiAgICAgICAgLy8gVXRpbGl0eSBmb3Iga2VlcGluZyB0cmFjayBvZiBldmVudCBoYW5kbGVycyBhbmQgdW5yZWdpc3RlcmluZyB0aGVtXHJcbiAgICAgICAgdGhpcy5rZXlib2FyZEV2ZW50TGlzdGVuZXJUcmFja2VyID0gbmV3IF9VdGlsX0V2ZW50TGlzdGVuZXJUcmFja2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uRXZlbnRMaXN0ZW5lclRyYWNrZXIoKTtcclxuICAgICAgICAvKlxyXG4gICAgICAgICAqIE5ldyBicm93c2VyIEFQSXMgaGF2ZSBtb3ZlZCBhd2F5IGZyb20gS2V5Ym9hcmRFdmVudC5rZXlDb2RlIHRvIEtleWJvYXJkRXZlbnQuQ29kZS5cclxuICAgICAgICAgKiBGb3IgZGV0YWlscyBzZWU6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9LZXlib2FyZEV2ZW50L2tleUNvZGUjY29uc3RhbnRzX2Zvcl9rZXljb2RlX3ZhbHVlXHJcbiAgICAgICAgICogV2Ugc3RpbGwgdXNlIG9sZCBLZXlib2FyZEV2ZW50LmtleUNvZGUgaW50ZWdlcnMgaW4gdGhlIFVFIEMrKyBzaWRlLCBzbyB3ZSBuZWVkIGEgd2F5IHRvIG1hcCB0aGUgbmV3XHJcbiAgICAgICAgICogc3RyaW5nLWJhc2VkIEtleWJvYXJkRXZlbnQuQ29kZSB0byB0aGUgb2xkIGludGVnZXJzLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuQ29kZVRvS2V5Q29kZSA9IHtcclxuICAgICAgICAgICAgRXNjYXBlOiAyNyxcclxuICAgICAgICAgICAgRGlnaXQwOiA0OCxcclxuICAgICAgICAgICAgRGlnaXQxOiA0OSxcclxuICAgICAgICAgICAgRGlnaXQyOiA1MCxcclxuICAgICAgICAgICAgRGlnaXQzOiA1MSxcclxuICAgICAgICAgICAgRGlnaXQ0OiA1MixcclxuICAgICAgICAgICAgRGlnaXQ1OiA1MyxcclxuICAgICAgICAgICAgRGlnaXQ2OiA1NCxcclxuICAgICAgICAgICAgRGlnaXQ3OiA1NSxcclxuICAgICAgICAgICAgRGlnaXQ4OiA1NixcclxuICAgICAgICAgICAgRGlnaXQ5OiA1NyxcclxuICAgICAgICAgICAgTWludXM6IDE3MyxcclxuICAgICAgICAgICAgRXF1YWw6IDE4NyxcclxuICAgICAgICAgICAgQmFja3NwYWNlOiA4LFxyXG4gICAgICAgICAgICBUYWI6IDksXHJcbiAgICAgICAgICAgIEtleVE6IDgxLFxyXG4gICAgICAgICAgICBLZXlXOiA4NyxcclxuICAgICAgICAgICAgS2V5RTogNjksXHJcbiAgICAgICAgICAgIEtleVI6IDgyLFxyXG4gICAgICAgICAgICBLZXlUOiA4NCxcclxuICAgICAgICAgICAgS2V5WTogODksXHJcbiAgICAgICAgICAgIEtleVU6IDg1LFxyXG4gICAgICAgICAgICBLZXlJOiA3MyxcclxuICAgICAgICAgICAgS2V5TzogNzksXHJcbiAgICAgICAgICAgIEtleVA6IDgwLFxyXG4gICAgICAgICAgICBCcmFja2V0TGVmdDogMjE5LFxyXG4gICAgICAgICAgICBCcmFja2V0UmlnaHQ6IDIyMSxcclxuICAgICAgICAgICAgRW50ZXI6IDEzLFxyXG4gICAgICAgICAgICBDb250cm9sTGVmdDogMTcsXHJcbiAgICAgICAgICAgIEtleUE6IDY1LFxyXG4gICAgICAgICAgICBLZXlTOiA4MyxcclxuICAgICAgICAgICAgS2V5RDogNjgsXHJcbiAgICAgICAgICAgIEtleUY6IDcwLFxyXG4gICAgICAgICAgICBLZXlHOiA3MSxcclxuICAgICAgICAgICAgS2V5SDogNzIsXHJcbiAgICAgICAgICAgIEtleUo6IDc0LFxyXG4gICAgICAgICAgICBLZXlLOiA3NSxcclxuICAgICAgICAgICAgS2V5TDogNzYsXHJcbiAgICAgICAgICAgIFNlbWljb2xvbjogMTg2LFxyXG4gICAgICAgICAgICBRdW90ZTogMjIyLFxyXG4gICAgICAgICAgICBCYWNrcXVvdGU6IDE5MixcclxuICAgICAgICAgICAgU2hpZnRMZWZ0OiAxNixcclxuICAgICAgICAgICAgQmFja3NsYXNoOiAyMjAsXHJcbiAgICAgICAgICAgIEtleVo6IDkwLFxyXG4gICAgICAgICAgICBLZXlYOiA4OCxcclxuICAgICAgICAgICAgS2V5QzogNjcsXHJcbiAgICAgICAgICAgIEtleVY6IDg2LFxyXG4gICAgICAgICAgICBLZXlCOiA2NixcclxuICAgICAgICAgICAgS2V5TjogNzgsXHJcbiAgICAgICAgICAgIEtleU06IDc3LFxyXG4gICAgICAgICAgICBDb21tYTogMTg4LFxyXG4gICAgICAgICAgICBQZXJpb2Q6IDE5MCxcclxuICAgICAgICAgICAgU2xhc2g6IDE5MSxcclxuICAgICAgICAgICAgU2hpZnRSaWdodDogMjUzLFxyXG4gICAgICAgICAgICBBbHRMZWZ0OiAxOCxcclxuICAgICAgICAgICAgU3BhY2U6IDMyLFxyXG4gICAgICAgICAgICBDYXBzTG9jazogMjAsXHJcbiAgICAgICAgICAgIEYxOiAxMTIsXHJcbiAgICAgICAgICAgIEYyOiAxMTMsXHJcbiAgICAgICAgICAgIEYzOiAxMTQsXHJcbiAgICAgICAgICAgIEY0OiAxMTUsXHJcbiAgICAgICAgICAgIEY1OiAxMTYsXHJcbiAgICAgICAgICAgIEY2OiAxMTcsXHJcbiAgICAgICAgICAgIEY3OiAxMTgsXHJcbiAgICAgICAgICAgIEY4OiAxMTksXHJcbiAgICAgICAgICAgIEY5OiAxMjAsXHJcbiAgICAgICAgICAgIEYxMDogMTIxLFxyXG4gICAgICAgICAgICBGMTE6IDEyMixcclxuICAgICAgICAgICAgRjEyOiAxMjMsXHJcbiAgICAgICAgICAgIFBhdXNlOiAxOSxcclxuICAgICAgICAgICAgU2Nyb2xsTG9jazogMTQ1LFxyXG4gICAgICAgICAgICBOdW1wYWREaXZpZGU6IDExMSxcclxuICAgICAgICAgICAgTnVtcGFkTXVsdGlwbHk6IDEwNixcclxuICAgICAgICAgICAgTnVtcGFkU3VidHJhY3Q6IDEwOSxcclxuICAgICAgICAgICAgTnVtcGFkQWRkOiAxMDcsXHJcbiAgICAgICAgICAgIE51bXBhZERlY2ltYWw6IDExMCxcclxuICAgICAgICAgICAgTnVtcGFkOTogMTA1LFxyXG4gICAgICAgICAgICBOdW1wYWQ4OiAxMDQsXHJcbiAgICAgICAgICAgIE51bXBhZDc6IDEwMyxcclxuICAgICAgICAgICAgTnVtcGFkNjogMTAyLFxyXG4gICAgICAgICAgICBOdW1wYWQ1OiAxMDEsXHJcbiAgICAgICAgICAgIE51bXBhZDQ6IDEwMCxcclxuICAgICAgICAgICAgTnVtcGFkMzogOTksXHJcbiAgICAgICAgICAgIE51bXBhZDI6IDk4LFxyXG4gICAgICAgICAgICBOdW1wYWQxOiA5NyxcclxuICAgICAgICAgICAgTnVtcGFkMDogOTYsXHJcbiAgICAgICAgICAgIE51bUxvY2s6IDE0NCxcclxuICAgICAgICAgICAgQ29udHJvbFJpZ2h0OiAyNTQsXHJcbiAgICAgICAgICAgIEFsdFJpZ2h0OiAyNTUsXHJcbiAgICAgICAgICAgIEhvbWU6IDM2LFxyXG4gICAgICAgICAgICBFbmQ6IDM1LFxyXG4gICAgICAgICAgICBBcnJvd1VwOiAzOCxcclxuICAgICAgICAgICAgQXJyb3dMZWZ0OiAzNyxcclxuICAgICAgICAgICAgQXJyb3dSaWdodDogMzksXHJcbiAgICAgICAgICAgIEFycm93RG93bjogNDAsXHJcbiAgICAgICAgICAgIFBhZ2VVcDogMzMsXHJcbiAgICAgICAgICAgIFBhZ2VEb3duOiAzNCxcclxuICAgICAgICAgICAgSW5zZXJ0OiA0NSxcclxuICAgICAgICAgICAgRGVsZXRlOiA0NixcclxuICAgICAgICAgICAgQ29udGV4dE1lbnU6IDkzXHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyID0gdG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXI7XHJcbiAgICAgICAgdGhpcy5jb25maWcgPSBjb25maWc7XHJcbiAgICAgICAgdGhpcy5hY3RpdmVLZXlzUHJvdmlkZXIgPSBhY3RpdmVLZXlzUHJvdmlkZXI7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJlZ2lzdGVycyBkb2N1bWVudCBrZXlib2FyZCBldmVudHMgd2l0aCB0aGUgY29udHJvbGxlclxyXG4gICAgICovXHJcbiAgICByZWdpc3RlcktleUJvYXJkRXZlbnRzKCkge1xyXG4gICAgICAgIGNvbnN0IGtleURvd25IYW5kbGVyID0gKGV2KSA9PiB0aGlzLmhhbmRsZU9uS2V5RG93bihldik7XHJcbiAgICAgICAgY29uc3Qga2V5VXBIYW5kbGVyID0gKGV2KSA9PiB0aGlzLmhhbmRsZU9uS2V5VXAoZXYpO1xyXG4gICAgICAgIGNvbnN0IGtleVByZXNzSGFuZGxlciA9IChldikgPT4gdGhpcy5oYW5kbGVPbktleVByZXNzKGV2KTtcclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBrZXlEb3duSGFuZGxlcik7XHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleXVwXCIsIGtleVVwSGFuZGxlcik7XHJcbiAgICAgICAgLy9UaGlzIGhhcyBiZWVuIGRlcHJlY2F0ZWQgYXMgYXQgSnVuIDEzIDIwMjFcclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5cHJlc3NcIiwga2V5UHJlc3NIYW5kbGVyKTtcclxuICAgICAgICB0aGlzLmtleWJvYXJkRXZlbnRMaXN0ZW5lclRyYWNrZXIuYWRkVW5yZWdpc3RlckNhbGxiYWNrKCgpID0+IGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIGtleURvd25IYW5kbGVyKSk7XHJcbiAgICAgICAgdGhpcy5rZXlib2FyZEV2ZW50TGlzdGVuZXJUcmFja2VyLmFkZFVucmVnaXN0ZXJDYWxsYmFjaygoKSA9PiBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5dXBcIiwga2V5VXBIYW5kbGVyKSk7XHJcbiAgICAgICAgdGhpcy5rZXlib2FyZEV2ZW50TGlzdGVuZXJUcmFja2VyLmFkZFVucmVnaXN0ZXJDYWxsYmFjaygoKSA9PiBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5cHJlc3NcIiwga2V5UHJlc3NIYW5kbGVyKSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFVucmVnaXN0ZXJzIGRvY3VtZW50IGtleWJvYXJkIGV2ZW50c1xyXG4gICAgICovXHJcbiAgICB1bnJlZ2lzdGVyS2V5Qm9hcmRFdmVudHMoKSB7XHJcbiAgICAgICAgdGhpcy5rZXlib2FyZEV2ZW50TGlzdGVuZXJUcmFja2VyLnVucmVnaXN0ZXJBbGwoKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlcyBXaGVuIGEga2V5IGlzIGRvd25cclxuICAgICAqIEBwYXJhbSBrZXlib2FyZEV2ZW50IC0gS2V5Ym9hcmQgZXZlbnRcclxuICAgICAqL1xyXG4gICAgaGFuZGxlT25LZXlEb3duKGtleWJvYXJkRXZlbnQpIHtcclxuICAgICAgICBjb25zdCBrZXlDb2RlID0gdGhpcy5nZXRLZXljb2RlKGtleWJvYXJkRXZlbnQpO1xyXG4gICAgICAgIGlmICgha2V5Q29kZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksIGBrZXkgZG93biAke2tleUNvZGV9LCByZXBlYXQgPSAke2tleWJvYXJkRXZlbnQucmVwZWF0fWAsIDYpO1xyXG4gICAgICAgIGNvbnN0IHRvU3RyZWFtZXJIYW5kbGVycyA9IHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXIudG9TdHJlYW1lckhhbmRsZXJzO1xyXG4gICAgICAgIHRvU3RyZWFtZXJIYW5kbGVycy5nZXQoJ0tleURvd24nKShbXHJcbiAgICAgICAgICAgIHRoaXMuZ2V0S2V5Y29kZShrZXlib2FyZEV2ZW50KSxcclxuICAgICAgICAgICAga2V5Ym9hcmRFdmVudC5yZXBlYXQgPyAxIDogMFxyXG4gICAgICAgIF0pO1xyXG4gICAgICAgIGNvbnN0IGFjdGl2ZUtleXMgPSB0aGlzLmFjdGl2ZUtleXNQcm92aWRlci5nZXRBY3RpdmVLZXlzKCk7XHJcbiAgICAgICAgYWN0aXZlS2V5cy5wdXNoKGtleUNvZGUpO1xyXG4gICAgICAgIC8vIEJhY2tzcGFjZSBpcyBub3QgY29uc2lkZXJlZCBhIGtleXByZXNzIGluIEphdmFTY3JpcHQgYnV0IHdlIG5lZWQgaXRcclxuICAgICAgICAvLyB0byBiZSBzbyBjaGFyYWN0ZXJzIG1heSBiZSBkZWxldGVkIGluIGEgVUUgdGV4dCBlbnRyeSBmaWVsZC5cclxuICAgICAgICBpZiAoa2V5Q29kZSA9PT0gX1NwZWNpYWxLZXlDb2Rlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLlNwZWNpYWxLZXlDb2Rlcy5iYWNrU3BhY2UpIHtcclxuICAgICAgICAgICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgS2V5Ym9hcmRFdmVudCgna2V5cHJlc3MnLCB7XHJcbiAgICAgICAgICAgICAgICBjaGFyQ29kZTogX1NwZWNpYWxLZXlDb2Rlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLlNwZWNpYWxLZXlDb2Rlcy5iYWNrU3BhY2VcclxuICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5jb25maWcuaXNGbGFnRW5hYmxlZChfQ29uZmlnX0NvbmZpZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fLkZsYWdzLlN1cHByZXNzQnJvd3NlcktleXMpICYmXHJcbiAgICAgICAgICAgIHRoaXMuaXNLZXlDb2RlQnJvd3NlcktleShrZXlDb2RlKSkge1xyXG4gICAgICAgICAgICBrZXlib2FyZEV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBoYW5kbGVzIHdoZW4gYSBrZXkgaXMgdXBcclxuICAgICAqIEBwYXJhbSBrZXlib2FyZEV2ZW50IC0gS2V5Ym9hcmQgZXZlbnRcclxuICAgICAqL1xyXG4gICAgaGFuZGxlT25LZXlVcChrZXlib2FyZEV2ZW50KSB7XHJcbiAgICAgICAgY29uc3Qga2V5Q29kZSA9IHRoaXMuZ2V0S2V5Y29kZShrZXlib2FyZEV2ZW50KTtcclxuICAgICAgICBpZiAoIWtleUNvZGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBga2V5IHVwICR7a2V5Q29kZX1gLCA2KTtcclxuICAgICAgICBjb25zdCB0b1N0cmVhbWVySGFuZGxlcnMgPSB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyLnRvU3RyZWFtZXJIYW5kbGVycztcclxuICAgICAgICB0b1N0cmVhbWVySGFuZGxlcnMuZ2V0KCdLZXlVcCcpKFtcclxuICAgICAgICAgICAga2V5Q29kZSxcclxuICAgICAgICAgICAga2V5Ym9hcmRFdmVudC5yZXBlYXQgPyAxIDogMFxyXG4gICAgICAgIF0pO1xyXG4gICAgICAgIGlmICh0aGlzLmNvbmZpZy5pc0ZsYWdFbmFibGVkKF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18uRmxhZ3MuU3VwcHJlc3NCcm93c2VyS2V5cykgJiZcclxuICAgICAgICAgICAgdGhpcy5pc0tleUNvZGVCcm93c2VyS2V5KGtleUNvZGUpKSB7XHJcbiAgICAgICAgICAgIGtleWJvYXJkRXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEhhbmRsZXMgd2hlbiBhIGtleSBpcyBwcmVzc1xyXG4gICAgICogQHBhcmFtIGtleWJvYXJkIC0gS2V5Ym9hcmQgRXZlbnRcclxuICAgICAqL1xyXG4gICAgaGFuZGxlT25LZXlQcmVzcyhrZXlib2FyZCkge1xyXG4gICAgICAgIGlmICghKCdjaGFyQ29kZScgaW4ga2V5Ym9hcmQpKSB7XHJcbiAgICAgICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uTG9nZ2VyLldhcm5pbmcoX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnS2V5Ym9hcmRFdmVudC5jaGFyQ29kZSBpcyBkZXByZWNhdGVkIGluIHRoaXMgYnJvd3NlciwgY2Fubm90IHNlbmQga2V5IHByZXNzLicpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGNoYXJDb2RlID0ga2V5Ym9hcmQuY2hhckNvZGU7XHJcbiAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgYGtleSBwcmVzcyAke2NoYXJDb2RlfWAsIDYpO1xyXG4gICAgICAgIGNvbnN0IHRvU3RyZWFtZXJIYW5kbGVycyA9IHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXIudG9TdHJlYW1lckhhbmRsZXJzO1xyXG4gICAgICAgIHRvU3RyZWFtZXJIYW5kbGVycy5nZXQoJ0tleVByZXNzJykoW2NoYXJDb2RlXSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEdldHMgdGhlIEtleWNvZGUgb2YgdGhlIEtleSBwcmVzc2VkXHJcbiAgICAgKiBAcGFyYW0ga2V5Ym9hcmRFdmVudCAtIEtleSBib2FyZCBFdmVudFxyXG4gICAgICogQHJldHVybnMgLSB0aGUga2V5IGNvZGUgb2YgdGhlIEtleVxyXG4gICAgICovXHJcbiAgICBnZXRLZXljb2RlKGtleWJvYXJkRXZlbnQpIHtcclxuICAgICAgICAvLyBJZiB3ZSBkb24ndCBoYXZlIGtleUNvZGUgcHJvcGVydHkgYmVjYXVzZSBicm93c2VyIEFQSSBpcyBkZXByZWNhdGVkIHRoZW4gdXNlIEtleWJvYXJkRXZlbnQuY29kZSBpbnN0ZWFkLlxyXG4gICAgICAgIC8vIFNlZTogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0tleWJvYXJkRXZlbnQva2V5Q29kZSNjb25zdGFudHNfZm9yX2tleWNvZGVfdmFsdWVcclxuICAgICAgICBpZiAoISgna2V5Q29kZScgaW4ga2V5Ym9hcmRFdmVudCkpIHtcclxuICAgICAgICAgICAgLy8gQ29udmVydCBLZXlib2FyZEV2ZW50LmNvZGUgc3RyaW5nIGludG8gaW50ZWdlci1iYXNlZCBrZXkgY29kZSBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgcmVhc29ucy5cclxuICAgICAgICAgICAgY29uc3QgZXZlbnQgPSBrZXlib2FyZEV2ZW50O1xyXG4gICAgICAgICAgICBpZiAoZXZlbnQuY29kZSBpbiB0aGlzLkNvZGVUb0tleUNvZGUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLkNvZGVUb0tleUNvZGVbZXZlbnQuY29kZV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLkxvZ2dlci5XYXJuaW5nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgYEtleWJvYXJkIGNvZGUgb2YgJHtldmVudC5jb2RlfSBpcyBub3Qgc3VwcG9ydGVkIGluIG91ciBtYXBwaW5nLCBpZ25vcmluZyB0aGlzIGtleS5gKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIElmIHdlIG1hZGUgaXQgaGVyZSBLZXlib2FyZEV2ZW50LmtleUNvZGUgaXMgc3RpbGwgc3VwcG9ydGVkIHNvIHdlIGNhbiBzYWZlbHkgdXNlIGl0LlxyXG4gICAgICAgIGlmIChrZXlib2FyZEV2ZW50LmtleUNvZGUgPT09IF9TcGVjaWFsS2V5Q29kZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5TcGVjaWFsS2V5Q29kZXMuc2hpZnQgJiZcclxuICAgICAgICAgICAga2V5Ym9hcmRFdmVudC5jb2RlID09PSAnU2hpZnRSaWdodCcpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF9TcGVjaWFsS2V5Q29kZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5TcGVjaWFsS2V5Q29kZXMucmlnaHRTaGlmdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoa2V5Ym9hcmRFdmVudC5rZXlDb2RlID09PSBfU3BlY2lhbEtleUNvZGVzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18uU3BlY2lhbEtleUNvZGVzLmNvbnRyb2wgJiZcclxuICAgICAgICAgICAga2V5Ym9hcmRFdmVudC5jb2RlID09PSAnQ29udHJvbFJpZ2h0Jykge1xyXG4gICAgICAgICAgICByZXR1cm4gX1NwZWNpYWxLZXlDb2Rlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLlNwZWNpYWxLZXlDb2Rlcy5yaWdodENvbnRyb2w7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGtleWJvYXJkRXZlbnQua2V5Q29kZSA9PT0gX1NwZWNpYWxLZXlDb2Rlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLlNwZWNpYWxLZXlDb2Rlcy5hbHQgJiZcclxuICAgICAgICAgICAga2V5Ym9hcmRFdmVudC5jb2RlID09PSAnQWx0UmlnaHQnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfU3BlY2lhbEtleUNvZGVzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18uU3BlY2lhbEtleUNvZGVzLnJpZ2h0QWx0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGtleWJvYXJkRXZlbnQua2V5Q29kZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEJyb3dzZXIga2V5cyBkbyBub3QgaGF2ZSBhIGNoYXJDb2RlIHNvIHdlIG9ubHkgbmVlZCB0byB0ZXN0IGtleUNvZGUuXHJcbiAgICAgKiBAcGFyYW0ga2V5Q29kZSAtIHRoZSBicm93c2VyIGtleWNvZGUgbnVtYmVyXHJcbiAgICAgKi9cclxuICAgIGlzS2V5Q29kZUJyb3dzZXJLZXkoa2V5Q29kZSkge1xyXG4gICAgICAgIC8vIEZ1bmN0aW9uIGtleXMgb3IgdGFiIGtleSBhcmUgY29uc2lkZXJlZCBcImJyb3dzZXIga2V5c1wiIHRoYXQgd2UgbWF5IHdpc2ggdG8gc3VwcHJlc3MgYnkgcHJldmVudGluZyB0aGVtIGJlaW5nIHByb2Nlc3MgYnkgYnJvd3Nlci5cclxuICAgICAgICByZXR1cm4gKGtleUNvZGUgPj0gMTEyICYmIGtleUNvZGUgPD0gMTIzKSB8fCBrZXlDb2RlID09PSA5O1xyXG4gICAgfVxyXG59XHJcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9JbnB1dHMvTG9ja2VkTW91c2VFdmVudHMudHNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL0lucHV0cy9Mb2NrZWRNb3VzZUV2ZW50cy50cyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiTG9ja2VkTW91c2VFdmVudHNcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gTG9ja2VkTW91c2VFdmVudHMpXG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vTG9nZ2VyL0xvZ2dlciAqLyBcIi4vc3JjL0xvZ2dlci9Mb2dnZXIudHNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX1V0aWxfRXZlbnRMaXN0ZW5lclRyYWNrZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL1V0aWwvRXZlbnRMaXN0ZW5lclRyYWNrZXIgKi8gXCIuL3NyYy9VdGlsL0V2ZW50TGlzdGVuZXJUcmFja2VyLnRzXCIpO1xuLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuXHJcblxyXG4vKipcclxuICogSGFuZGxlIHRoZSBtb3VzZSBsb2NrZWQgZXZlbnRzXHJcbiAqL1xyXG5jbGFzcyBMb2NrZWRNb3VzZUV2ZW50cyB7XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB2aWRlb0VsZW1lbnRQcm92aWRlciAtIFZpZGVvIFBsYXllciBpbnN0YW5jZVxyXG4gICAgICogQHBhcmFtIG1vdXNlQ29udHJvbGxlciAtIE1vdXNlIGNvbnRyb2xsZXIgaW5zdGFuY2VcclxuICAgICAqIEBwYXJhbSBhY3RpdmVLZXlzUHJvdmlkZXIgLSBBY3RpdmUga2V5cyBwcm92aWRlciBpbnN0YW5jZVxyXG4gICAgICogQHBhcmFtIHBsYXllclN0eWxlQXR0cmlidXRlc1Byb3ZpZGVyIC0gUGxheWVyIHN0eWxlIGF0dHJpYnV0ZXMgaW5zdGFuY2VcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodmlkZW9FbGVtZW50UHJvdmlkZXIsIG1vdXNlQ29udHJvbGxlciwgYWN0aXZlS2V5c1Byb3ZpZGVyKSB7XHJcbiAgICAgICAgdGhpcy54ID0gMDtcclxuICAgICAgICB0aGlzLnkgPSAwO1xyXG4gICAgICAgIHRoaXMudXBkYXRlTW91c2VNb3ZlUG9zaXRpb25FdmVudCA9IChtb3VzZUV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlTW91c2VNb3ZlUG9zaXRpb24obW91c2VFdmVudCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvLyBVdGlsaXR5IGZvciBrZWVwaW5nIHRyYWNrIG9mIGV2ZW50IGhhbmRsZXJzIGFuZCB1bnJlZ2lzdGVyaW5nIHRoZW1cclxuICAgICAgICB0aGlzLm1vdXNlRXZlbnRMaXN0ZW5lclRyYWNrZXIgPSBuZXcgX1V0aWxfRXZlbnRMaXN0ZW5lclRyYWNrZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5FdmVudExpc3RlbmVyVHJhY2tlcigpO1xyXG4gICAgICAgIHRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIgPSB2aWRlb0VsZW1lbnRQcm92aWRlcjtcclxuICAgICAgICB0aGlzLm1vdXNlQ29udHJvbGxlciA9IG1vdXNlQ29udHJvbGxlcjtcclxuICAgICAgICB0aGlzLmFjdGl2ZUtleXNQcm92aWRlciA9IGFjdGl2ZUtleXNQcm92aWRlcjtcclxuICAgICAgICBjb25zdCB2aWRlb0VsZW1lbnRQYXJlbnQgPSB0aGlzLnZpZGVvRWxlbWVudFByb3ZpZGVyLmdldFZpZGVvUGFyZW50RWxlbWVudCgpO1xyXG4gICAgICAgIHRoaXMueCA9IHZpZGVvRWxlbWVudFBhcmVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCAvIDI7XHJcbiAgICAgICAgdGhpcy55ID0gdmlkZW9FbGVtZW50UGFyZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodCAvIDI7XHJcbiAgICAgICAgdGhpcy5jb29yZCA9XHJcbiAgICAgICAgICAgIHRoaXMubW91c2VDb250cm9sbGVyLmNvb3JkaW5hdGVDb252ZXJ0ZXIubm9ybWFsaXplQW5kUXVhbnRpemVVbnNpZ25lZCh0aGlzLngsIHRoaXMueSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFVucmVnaXN0ZXJzIGFsbCBldmVudCBoYW5kbGVyc1xyXG4gICAgICovXHJcbiAgICB1bnJlZ2lzdGVyTW91c2VFdmVudHMoKSB7XHJcbiAgICAgICAgdGhpcy5tb3VzZUV2ZW50TGlzdGVuZXJUcmFja2VyLnVucmVnaXN0ZXJBbGwoKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlIHdoZW4gdGhlIGxvY2tlZCBzdGF0ZSBDaGFuZ2VkXHJcbiAgICAgKi9cclxuICAgIGxvY2tTdGF0ZUNoYW5nZSgpIHtcclxuICAgICAgICBjb25zdCB2aWRlb0VsZW1lbnRQYXJlbnQgPSB0aGlzLnZpZGVvRWxlbWVudFByb3ZpZGVyLmdldFZpZGVvUGFyZW50RWxlbWVudCgpO1xyXG4gICAgICAgIGNvbnN0IHRvU3RyZWFtZXJIYW5kbGVycyA9IHRoaXMubW91c2VDb250cm9sbGVyLnRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyLnRvU3RyZWFtZXJIYW5kbGVycztcclxuICAgICAgICBpZiAoZG9jdW1lbnQucG9pbnRlckxvY2tFbGVtZW50ID09PSB2aWRlb0VsZW1lbnRQYXJlbnQgfHxcclxuICAgICAgICAgICAgZG9jdW1lbnQubW96UG9pbnRlckxvY2tFbGVtZW50ID09PSB2aWRlb0VsZW1lbnRQYXJlbnQpIHtcclxuICAgICAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ1BvaW50ZXIgbG9ja2VkJywgNik7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMudXBkYXRlTW91c2VNb3ZlUG9zaXRpb25FdmVudCwgZmFsc2UpO1xyXG4gICAgICAgICAgICB0aGlzLm1vdXNlRXZlbnRMaXN0ZW5lclRyYWNrZXIuYWRkVW5yZWdpc3RlckNhbGxiYWNrKCgpID0+IGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMudXBkYXRlTW91c2VNb3ZlUG9zaXRpb25FdmVudCwgZmFsc2UpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksICdUaGUgcG9pbnRlciBsb2NrIHN0YXR1cyBpcyBub3cgdW5sb2NrZWQnLCA2KTtcclxuICAgICAgICAgICAgLy8gIWEgbmV3IGFycm93IGZ1bmN0aW9uIG11c3Qgbm90IGJlIHVzZWQgaGVyZSBhcyBpdCB3aWxsIGJlIGNvdW50ZWQgYXMgYSBuZXcgZnVuY3Rpb24gdGhhdCBjYW5ub3QgYmUgcmVtb3ZlZFxyXG4gICAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLnVwZGF0ZU1vdXNlTW92ZVBvc2l0aW9uRXZlbnQsIGZhbHNlKTtcclxuICAgICAgICAgICAgLy8gSWYgbW91c2UgbG9zZXMgZm9jdXMsIHNlbmQgYSBrZXkgdXAgZm9yIGFsbCBvZiB0aGUgY3VycmVudGx5IGhlbGQtZG93biBrZXlzXHJcbiAgICAgICAgICAgIC8vIFRoaXMgaXMgbmVjZXNzYXJ5IGFzIHdoZW4gdGhlIG1vdXNlIGxvc2VzIGZvY3VzLCB0aGUgd2luZG93cyBzdG9wcyBsaXN0ZW5pbmcgZm9yIGV2ZW50cyBhbmQgYXMgc3VjaFxyXG4gICAgICAgICAgICAvLyB0aGUga2V5dXAgbGlzdGVuZXIgd29uJ3QgZ2V0IGZpcmVkXHJcbiAgICAgICAgICAgIGxldCBhY3RpdmVLZXlzID0gdGhpcy5hY3RpdmVLZXlzUHJvdmlkZXIuZ2V0QWN0aXZlS2V5cygpO1xyXG4gICAgICAgICAgICBjb25zdCBzZXRLZXlzID0gbmV3IFNldChhY3RpdmVLZXlzKTtcclxuICAgICAgICAgICAgY29uc3QgbmV3S2V5c0l0ZXJhYmxlID0gW107XHJcbiAgICAgICAgICAgIHNldEtleXMuZm9yRWFjaCgoc2V0S2V5KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBuZXdLZXlzSXRlcmFibGVbc2V0S2V5XTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIG5ld0tleXNJdGVyYWJsZS5mb3JFYWNoKCh1bmlxdWVLZXljb2RlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0b1N0cmVhbWVySGFuZGxlcnMuZ2V0KCdLZXlVcCcpKFt1bmlxdWVLZXljb2RlXSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAvLyBSZXNldCB0aGUgYWN0aXZlIGtleXMgYmFjayB0byBub3RoaW5nXHJcbiAgICAgICAgICAgIGFjdGl2ZUtleXMgPSBbXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEhhbmRsZSB0aGUgbW91c2UgbW92ZSBldmVudCwgc2VuZHMgdGhlIG1vdXNlIGRhdGEgdG8gdGhlIFVFIEluc3RhbmNlXHJcbiAgICAgKiBAcGFyYW0gbW91c2VFdmVudCAtIE1vdXNlIEV2ZW50XHJcbiAgICAgKi9cclxuICAgIHVwZGF0ZU1vdXNlTW92ZVBvc2l0aW9uKG1vdXNlRXZlbnQpIHtcclxuICAgICAgICBpZiAoIXRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIuaXNWaWRlb1JlYWR5KCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCB0b1N0cmVhbWVySGFuZGxlcnMgPSB0aGlzLm1vdXNlQ29udHJvbGxlci50b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlci50b1N0cmVhbWVySGFuZGxlcnM7XHJcbiAgICAgICAgY29uc3Qgc3R5bGVXaWR0aCA9IHRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIuZ2V0VmlkZW9QYXJlbnRFbGVtZW50KCkuY2xpZW50V2lkdGg7XHJcbiAgICAgICAgY29uc3Qgc3R5bGVIZWlnaHQgPSB0aGlzLnZpZGVvRWxlbWVudFByb3ZpZGVyLmdldFZpZGVvUGFyZW50RWxlbWVudCgpLmNsaWVudEhlaWdodDtcclxuICAgICAgICB0aGlzLnggKz0gbW91c2VFdmVudC5tb3ZlbWVudFg7XHJcbiAgICAgICAgdGhpcy55ICs9IG1vdXNlRXZlbnQubW92ZW1lbnRZO1xyXG4gICAgICAgIGlmICh0aGlzLnggPiBzdHlsZVdpZHRoKSB7XHJcbiAgICAgICAgICAgIHRoaXMueCAtPSBzdHlsZVdpZHRoO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy55ID4gc3R5bGVIZWlnaHQpIHtcclxuICAgICAgICAgICAgdGhpcy55IC09IHN0eWxlSGVpZ2h0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy54IDwgMCkge1xyXG4gICAgICAgICAgICB0aGlzLnggPSBzdHlsZVdpZHRoICsgdGhpcy54O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy55IDwgMCkge1xyXG4gICAgICAgICAgICB0aGlzLnkgPSBzdHlsZUhlaWdodCAtIHRoaXMueTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jb29yZCA9XHJcbiAgICAgICAgICAgIHRoaXMubW91c2VDb250cm9sbGVyLmNvb3JkaW5hdGVDb252ZXJ0ZXIubm9ybWFsaXplQW5kUXVhbnRpemVVbnNpZ25lZCh0aGlzLngsIHRoaXMueSk7XHJcbiAgICAgICAgY29uc3QgZGVsdGEgPSB0aGlzLm1vdXNlQ29udHJvbGxlci5jb29yZGluYXRlQ29udmVydGVyLm5vcm1hbGl6ZUFuZFF1YW50aXplU2lnbmVkKG1vdXNlRXZlbnQubW92ZW1lbnRYLCBtb3VzZUV2ZW50Lm1vdmVtZW50WSk7XHJcbiAgICAgICAgdG9TdHJlYW1lckhhbmRsZXJzLmdldCgnTW91c2VNb3ZlJykoW1xyXG4gICAgICAgICAgICB0aGlzLmNvb3JkLngsXHJcbiAgICAgICAgICAgIHRoaXMuY29vcmQueSxcclxuICAgICAgICAgICAgZGVsdGEueCxcclxuICAgICAgICAgICAgZGVsdGEueVxyXG4gICAgICAgIF0pO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBIYW5kbGUgdGhlIG1vdXNlIERvd24gZXZlbnQsIHNlbmRzIHRoZSBtb3VzZSBkYXRhIHRvIHRoZSBVRSBJbnN0YW5jZVxyXG4gICAgICogQHBhcmFtIG1vdXNlRXZlbnQgLSBNb3VzZSBFdmVudFxyXG4gICAgICovXHJcbiAgICBoYW5kbGVNb3VzZURvd24obW91c2VFdmVudCkge1xyXG4gICAgICAgIGlmICghdGhpcy52aWRlb0VsZW1lbnRQcm92aWRlci5pc1ZpZGVvUmVhZHkoKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHRvU3RyZWFtZXJIYW5kbGVycyA9IHRoaXMubW91c2VDb250cm9sbGVyLnRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyLnRvU3RyZWFtZXJIYW5kbGVycztcclxuICAgICAgICB0b1N0cmVhbWVySGFuZGxlcnMuZ2V0KCdNb3VzZURvd24nKShbXHJcbiAgICAgICAgICAgIG1vdXNlRXZlbnQuYnV0dG9uLFxyXG4gICAgICAgICAgICAvLyBXZSB1c2UgdGhlIHN0b3JlIHZhbHVlIG9mIHRoaXMuY29vcmQgYXMgb3Bwb3NlZCB0byB0aGUgbW91c2VFdmVudC54L3kgYXMgdGhlIG1vdXNlRXZlbnQgbG9jYXRpb25cclxuICAgICAgICAgICAgLy8gdXNlcyB0aGUgc3lzdGVtIGN1cnNvciBsb2NhdGlvbiB3aGljaCBoYXNuJ3QgbW92ZWRcclxuICAgICAgICAgICAgdGhpcy5jb29yZC54LFxyXG4gICAgICAgICAgICB0aGlzLmNvb3JkLnlcclxuICAgICAgICBdKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlIHRoZSBtb3VzZSBVcCBldmVudCwgc2VuZHMgdGhlIG1vdXNlIGRhdGEgdG8gdGhlIFVFIEluc3RhbmNlXHJcbiAgICAgKiBAcGFyYW0gbW91c2VFdmVudCAtIE1vdXNlIEV2ZW50XHJcbiAgICAgKi9cclxuICAgIGhhbmRsZU1vdXNlVXAobW91c2VFdmVudCkge1xyXG4gICAgICAgIGlmICghdGhpcy52aWRlb0VsZW1lbnRQcm92aWRlci5pc1ZpZGVvUmVhZHkoKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHRvU3RyZWFtZXJIYW5kbGVycyA9IHRoaXMubW91c2VDb250cm9sbGVyLnRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyLnRvU3RyZWFtZXJIYW5kbGVycztcclxuICAgICAgICB0b1N0cmVhbWVySGFuZGxlcnMuZ2V0KCdNb3VzZVVwJykoW1xyXG4gICAgICAgICAgICBtb3VzZUV2ZW50LmJ1dHRvbixcclxuICAgICAgICAgICAgLy8gV2UgdXNlIHRoZSBzdG9yZSB2YWx1ZSBvZiB0aGlzLmNvb3JkIGFzIG9wcG9zZWQgdG8gdGhlIG1vdXNlRXZlbnQueC95IGFzIHRoZSBtb3VzZUV2ZW50IGxvY2F0aW9uXHJcbiAgICAgICAgICAgIC8vIHVzZXMgdGhlIHN5c3RlbSBjdXJzb3IgbG9jYXRpb24gd2hpY2ggaGFzbid0IG1vdmVkXHJcbiAgICAgICAgICAgIHRoaXMuY29vcmQueCxcclxuICAgICAgICAgICAgdGhpcy5jb29yZC55XHJcbiAgICAgICAgXSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEhhbmRsZSB0aGUgbW91c2Ugd2hlZWwgZXZlbnQsIHNlbmRzIHRoZSBtb3VzZSB3aGVlbCBkYXRhIHRvIHRoZSBVRSBJbnN0YW5jZVxyXG4gICAgICogQHBhcmFtIHdoZWVsRXZlbnQgLSBNb3VzZSBFdmVudFxyXG4gICAgICovXHJcbiAgICBoYW5kbGVNb3VzZVdoZWVsKHdoZWVsRXZlbnQpIHtcclxuICAgICAgICBpZiAoIXRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIuaXNWaWRlb1JlYWR5KCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCB0b1N0cmVhbWVySGFuZGxlcnMgPSB0aGlzLm1vdXNlQ29udHJvbGxlci50b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlci50b1N0cmVhbWVySGFuZGxlcnM7XHJcbiAgICAgICAgdG9TdHJlYW1lckhhbmRsZXJzLmdldCgnTW91c2VXaGVlbCcpKFtcclxuICAgICAgICAgICAgd2hlZWxFdmVudC53aGVlbERlbHRhLFxyXG4gICAgICAgICAgICAvLyBXZSB1c2UgdGhlIHN0b3JlIHZhbHVlIG9mIHRoaXMuY29vcmQgYXMgb3Bwb3NlZCB0byB0aGUgbW91c2VFdmVudC54L3kgYXMgdGhlIG1vdXNlRXZlbnQgbG9jYXRpb25cclxuICAgICAgICAgICAgLy8gdXNlcyB0aGUgc3lzdGVtIGN1cnNvciBsb2NhdGlvbiB3aGljaCBoYXNuJ3QgbW92ZWRcclxuICAgICAgICAgICAgdGhpcy5jb29yZC54LFxyXG4gICAgICAgICAgICB0aGlzLmNvb3JkLnlcclxuICAgICAgICBdKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlIHRoZSBtb3VzZSBkb3VibGUgY2xpY2sgZXZlbnQsIHNlbmRzIHRoZSBtb3VzZSBkYXRhIHRvIHRoZSBVRSBJbnN0YW5jZVxyXG4gICAgICogQHBhcmFtIG1vdXNlRXZlbnQgLSBNb3VzZSBFdmVudFxyXG4gICAgICovXHJcbiAgICBoYW5kbGVNb3VzZURvdWJsZShtb3VzZUV2ZW50KSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnZpZGVvRWxlbWVudFByb3ZpZGVyLmlzVmlkZW9SZWFkeSgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgdG9TdHJlYW1lckhhbmRsZXJzID0gdGhpcy5tb3VzZUNvbnRyb2xsZXIudG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXIudG9TdHJlYW1lckhhbmRsZXJzO1xyXG4gICAgICAgIHRvU3RyZWFtZXJIYW5kbGVycy5nZXQoJ01vdXNlRG91YmxlJykoW1xyXG4gICAgICAgICAgICBtb3VzZUV2ZW50LmJ1dHRvbixcclxuICAgICAgICAgICAgLy8gV2UgdXNlIHRoZSBzdG9yZSB2YWx1ZSBvZiB0aGlzLmNvb3JkIGFzIG9wcG9zZWQgdG8gdGhlIG1vdXNlRXZlbnQueC95IGFzIHRoZSBtb3VzZUV2ZW50IGxvY2F0aW9uXHJcbiAgICAgICAgICAgIC8vIHVzZXMgdGhlIHN5c3RlbSBjdXJzb3IgbG9jYXRpb24gd2hpY2ggaGFzbid0IG1vdmVkXHJcbiAgICAgICAgICAgIHRoaXMuY29vcmQueCxcclxuICAgICAgICAgICAgdGhpcy5jb29yZC55XHJcbiAgICAgICAgXSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEhhbmRsZSB0aGUgcHJlc3MgbW91c2UgYnV0dG9ucyBldmVudCwgc2VuZHMgdGhlIG1vdXNlIGRhdGEgdG8gdGhlIFVFIEluc3RhbmNlXHJcbiAgICAgKiBAcGFyYW0gbW91c2VFdmVudCAtIE1vdXNlIEV2ZW50XHJcbiAgICAgKi9cclxuICAgIGhhbmRsZVByZXNzTW91c2VCdXR0b25zKG1vdXNlRXZlbnQpIHtcclxuICAgICAgICBpZiAoIXRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIuaXNWaWRlb1JlYWR5KCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLm1vdXNlQ29udHJvbGxlci5wcmVzc01vdXNlQnV0dG9ucyhtb3VzZUV2ZW50LmJ1dHRvbnMsIHRoaXMueCwgdGhpcy55KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlIHRoZSByZWxlYXNlIG1vdXNlIGJ1dHRvbnMgZXZlbnQsIHNlbmRzIHRoZSBtb3VzZSBkYXRhIHRvIHRoZSBVRSBJbnN0YW5jZVxyXG4gICAgICogQHBhcmFtIG1vdXNlRXZlbnQgLSBNb3VzZSBFdmVudFxyXG4gICAgICovXHJcbiAgICBoYW5kbGVSZWxlYXNlTW91c2VCdXR0b25zKG1vdXNlRXZlbnQpIHtcclxuICAgICAgICBpZiAoIXRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIuaXNWaWRlb1JlYWR5KCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLm1vdXNlQ29udHJvbGxlci5yZWxlYXNlTW91c2VCdXR0b25zKG1vdXNlRXZlbnQuYnV0dG9ucywgdGhpcy54LCB0aGlzLnkpO1xyXG4gICAgfVxyXG59XHJcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9JbnB1dHMvTW91c2VCdXR0b25zLnRzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvSW5wdXRzL01vdXNlQnV0dG9ucy50cyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywge1xuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIk1vdXNlQnV0dG9uXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIE1vdXNlQnV0dG9uKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJNb3VzZUJ1dHRvbnNNYXNrXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIE1vdXNlQnV0dG9uc01hc2spXG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcbi8vIENvcHlyaWdodCBFcGljIEdhbWVzLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcbi8qKlxyXG4gKiBNb3VzZSBCdXR0b24gRGF0YVxyXG4gKiB7QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL01vdXNlRXZlbnQvYnV0dG9ufVxyXG4gKi9cclxuY2xhc3MgTW91c2VCdXR0b24ge1xyXG59XHJcbk1vdXNlQnV0dG9uLm1haW5CdXR0b24gPSAwOyAvLyBMZWZ0IGJ1dHRvbi5cclxuTW91c2VCdXR0b24uYXV4aWxpYXJ5QnV0dG9uID0gMTsgLy8gV2hlZWwgYnV0dG9uLlxyXG5Nb3VzZUJ1dHRvbi5zZWNvbmRhcnlCdXR0b24gPSAyOyAvLyBSaWdodCBidXR0b24uXHJcbk1vdXNlQnV0dG9uLmZvdXJ0aEJ1dHRvbiA9IDM7IC8vIEJyb3dzZXIgQmFjayBidXR0b24uXHJcbk1vdXNlQnV0dG9uLmZpZnRoQnV0dG9uID0gNDsgLy8gQnJvd3NlciBGb3J3YXJkIGJ1dHRvbi5cclxuLyoqXHJcbiAqIE1vdXNlIEJ1dHRvbiBNYXNrIERhdGFcclxuICoge0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9Nb3VzZUV2ZW50L2J1dHRvbnN9XHJcbiAqL1xyXG5jbGFzcyBNb3VzZUJ1dHRvbnNNYXNrIHtcclxufVxyXG5Nb3VzZUJ1dHRvbnNNYXNrLnByaW1hcnlCdXR0b24gPSAxOyAvLyBMZWZ0IGJ1dHRvbi5cclxuTW91c2VCdXR0b25zTWFzay5zZWNvbmRhcnlCdXR0b24gPSAyOyAvLyBSaWdodCBidXR0b24uXHJcbk1vdXNlQnV0dG9uc01hc2suYXV4aWxpYXJ5QnV0dG9uID0gNDsgLy8gV2hlZWwgYnV0dG9uLlxyXG5Nb3VzZUJ1dHRvbnNNYXNrLmZvdXJ0aEJ1dHRvbiA9IDg7IC8vIEJyb3dzZXIgQmFjayBidXR0b24uXHJcbk1vdXNlQnV0dG9uc01hc2suZmlmdGhCdXR0b24gPSAxNjsgLy8gQnJvd3NlciBGb3J3YXJkIGJ1dHRvbi5cclxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL0lucHV0cy9Nb3VzZUNvbnRyb2xsZXIudHNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9JbnB1dHMvTW91c2VDb250cm9sbGVyLnRzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiTW91c2VDb250cm9sbGVyXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIE1vdXNlQ29udHJvbGxlcilcbi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9Nb3VzZUJ1dHRvbnNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vTW91c2VCdXR0b25zICovIFwiLi9zcmMvSW5wdXRzL01vdXNlQnV0dG9ucy50c1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vTG9nZ2VyL0xvZ2dlciAqLyBcIi4vc3JjL0xvZ2dlci9Mb2dnZXIudHNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX0xvY2tlZE1vdXNlRXZlbnRzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL0xvY2tlZE1vdXNlRXZlbnRzICovIFwiLi9zcmMvSW5wdXRzL0xvY2tlZE1vdXNlRXZlbnRzLnRzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9Ib3ZlcmluZ01vdXNlRXZlbnRzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL0hvdmVyaW5nTW91c2VFdmVudHMgKi8gXCIuL3NyYy9JbnB1dHMvSG92ZXJpbmdNb3VzZUV2ZW50cy50c1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfVXRpbF9FdmVudExpc3RlbmVyVHJhY2tlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vVXRpbC9FdmVudExpc3RlbmVyVHJhY2tlciAqLyBcIi4vc3JjL1V0aWwvRXZlbnRMaXN0ZW5lclRyYWNrZXIudHNcIik7XG4vLyBDb3B5cmlnaHQgRXBpYyBHYW1lcywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG5cclxuXHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBIYW5kbGVzIHRoZSBNb3VzZSBJbnB1dHMgZm9yIHRoZSBkb2N1bWVudFxyXG4gKi9cclxuY2xhc3MgTW91c2VDb250cm9sbGVyIHtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyIC0gU3RyZWFtIG1lc3NhZ2UgaW5zdGFuY2VcclxuICAgICAqIEBwYXJhbSB2aWRlb0VsZW1lbnRQcm92aWRlciAtIFZpZGVvIFBsYXllciBpbnN0YW5jZVxyXG4gICAgICogQHBhcmFtIG5vcm1hbGl6ZUFuZFF1YW50aXplIC0gQSBub3JtYWxpemUgYW5kIHF1YW50aXplIGluc3RhbmNlXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyLCB2aWRlb0VsZW1lbnRQcm92aWRlciwgY29vcmRpbmF0ZUNvbnZlcnRlciwgYWN0aXZlS2V5c1Byb3ZpZGVyKSB7XHJcbiAgICAgICAgLy8gVXRpbGl0eSBmb3Iga2VlcGluZyB0cmFjayBvZiBldmVudCBoYW5kbGVycyBhbmQgdW5yZWdpc3RlcmluZyB0aGVtXHJcbiAgICAgICAgdGhpcy5tb3VzZUV2ZW50TGlzdGVuZXJUcmFja2VyID0gbmV3IF9VdGlsX0V2ZW50TGlzdGVuZXJUcmFja2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uRXZlbnRMaXN0ZW5lclRyYWNrZXIoKTtcclxuICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyID0gdG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXI7XHJcbiAgICAgICAgdGhpcy5jb29yZGluYXRlQ29udmVydGVyID0gY29vcmRpbmF0ZUNvbnZlcnRlcjtcclxuICAgICAgICB0aGlzLnZpZGVvRWxlbWVudFByb3ZpZGVyID0gdmlkZW9FbGVtZW50UHJvdmlkZXI7XHJcbiAgICAgICAgdGhpcy5hY3RpdmVLZXlzUHJvdmlkZXIgPSBhY3RpdmVLZXlzUHJvdmlkZXI7XHJcbiAgICAgICAgdGhpcy5yZWdpc3Rlck1vdXNlRW50ZXJBbmRMZWF2ZUV2ZW50cygpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDbGVhcnMgYWxsIHRoZSBjbGljayBldmVudHMgb24gdGhlIGN1cnJlbnQgdmlkZW8gZWxlbWVudCBwYXJlbnQgZGl2XHJcbiAgICAgKi9cclxuICAgIHVucmVnaXN0ZXJNb3VzZUV2ZW50cygpIHtcclxuICAgICAgICB0aGlzLm1vdXNlRXZlbnRMaXN0ZW5lclRyYWNrZXIudW5yZWdpc3RlckFsbCgpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWdpc3RlciBhIGxvY2tlZCBtb3VzZSBjbGFzc1xyXG4gICAgICogQHBhcmFtIG1vdXNlQ29udHJvbGxlciAtIGEgbW91c2UgY29udHJvbGxlciBpbnN0YW5jZVxyXG4gICAgICogQHBhcmFtIHBsYXllclN0eWxlQXR0cmlidXRlc1Byb3ZpZGVyIC0gYSBwbGF5ZXIgc3R5bGUgYXR0cmlidXRlcyBpbnN0YW5jZVxyXG4gICAgICovXHJcbiAgICByZWdpc3RlckxvY2tlZE1vdXNlRXZlbnRzKG1vdXNlQ29udHJvbGxlcikge1xyXG4gICAgICAgIGNvbnN0IHZpZGVvRWxlbWVudFBhcmVudCA9IHRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIuZ2V0VmlkZW9QYXJlbnRFbGVtZW50KCk7XHJcbiAgICAgICAgY29uc3QgbG9ja2VkTW91c2VFdmVudHMgPSBuZXcgX0xvY2tlZE1vdXNlRXZlbnRzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uTG9ja2VkTW91c2VFdmVudHModGhpcy52aWRlb0VsZW1lbnRQcm92aWRlciwgbW91c2VDb250cm9sbGVyLCB0aGlzLmFjdGl2ZUtleXNQcm92aWRlcik7XHJcbiAgICAgICAgdmlkZW9FbGVtZW50UGFyZW50LnJlcXVlc3RQb2ludGVyTG9jayA9XHJcbiAgICAgICAgICAgIHZpZGVvRWxlbWVudFBhcmVudC5yZXF1ZXN0UG9pbnRlckxvY2sgfHxcclxuICAgICAgICAgICAgICAgIHZpZGVvRWxlbWVudFBhcmVudC5tb3pSZXF1ZXN0UG9pbnRlckxvY2s7XHJcbiAgICAgICAgZG9jdW1lbnQuZXhpdFBvaW50ZXJMb2NrID1cclxuICAgICAgICAgICAgZG9jdW1lbnQuZXhpdFBvaW50ZXJMb2NrIHx8IGRvY3VtZW50Lm1vekV4aXRQb2ludGVyTG9jaztcclxuICAgICAgICAvLyBtaW5vciBoYWNrIHRvIGFsbGV2aWF0ZSBpb3Mgbm90IHN1cHBvcnRpbmcgcG9pbnRlcmxvY2tcclxuICAgICAgICBpZiAodmlkZW9FbGVtZW50UGFyZW50LnJlcXVlc3RQb2ludGVyTG9jaykge1xyXG4gICAgICAgICAgICBjb25zdCBvbmNsaWNrID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdmlkZW9FbGVtZW50UGFyZW50LnJlcXVlc3RQb2ludGVyTG9jaygpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB2aWRlb0VsZW1lbnRQYXJlbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvbmNsaWNrKTtcclxuICAgICAgICAgICAgdGhpcy5tb3VzZUV2ZW50TGlzdGVuZXJUcmFja2VyLmFkZFVucmVnaXN0ZXJDYWxsYmFjaygoKSA9PiB2aWRlb0VsZW1lbnRQYXJlbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvbmNsaWNrKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGxvY2tTdGF0ZUNoYW5nZUxpc3RlbmVyID0gKCkgPT4gbG9ja2VkTW91c2VFdmVudHMubG9ja1N0YXRlQ2hhbmdlKCk7XHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcmxvY2tjaGFuZ2UnLCBsb2NrU3RhdGVDaGFuZ2VMaXN0ZW5lciwgZmFsc2UpO1xyXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21venBvaW50ZXJsb2NrY2hhbmdlJywgbG9ja1N0YXRlQ2hhbmdlTGlzdGVuZXIsIGZhbHNlKTtcclxuICAgICAgICB0aGlzLm1vdXNlRXZlbnRMaXN0ZW5lclRyYWNrZXIuYWRkVW5yZWdpc3RlckNhbGxiYWNrKCgpID0+IGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJsb2NrY2hhbmdlJywgbG9ja1N0YXRlQ2hhbmdlTGlzdGVuZXIsIGZhbHNlKSk7XHJcbiAgICAgICAgdGhpcy5tb3VzZUV2ZW50TGlzdGVuZXJUcmFja2VyLmFkZFVucmVnaXN0ZXJDYWxsYmFjaygoKSA9PiBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3pwb2ludGVybG9ja2NoYW5nZScsIGxvY2tTdGF0ZUNoYW5nZUxpc3RlbmVyLCBmYWxzZSkpO1xyXG4gICAgICAgIGNvbnN0IG9ubW91c2Vkb3duID0gKG1vdXNlRXZlbnQpID0+IGxvY2tlZE1vdXNlRXZlbnRzLmhhbmRsZU1vdXNlRG93bihtb3VzZUV2ZW50KTtcclxuICAgICAgICBjb25zdCBvbm1vdXNldXAgPSAobW91c2VFdmVudCkgPT4gbG9ja2VkTW91c2VFdmVudHMuaGFuZGxlTW91c2VVcChtb3VzZUV2ZW50KTtcclxuICAgICAgICBjb25zdCBvbndoZWVsID0gKHdoZWVsRXZlbnQpID0+IGxvY2tlZE1vdXNlRXZlbnRzLmhhbmRsZU1vdXNlV2hlZWwod2hlZWxFdmVudCk7XHJcbiAgICAgICAgY29uc3Qgb25kYmxjbGljayA9IChtb3VzZUV2ZW50KSA9PiBsb2NrZWRNb3VzZUV2ZW50cy5oYW5kbGVNb3VzZURvdWJsZShtb3VzZUV2ZW50KTtcclxuICAgICAgICB2aWRlb0VsZW1lbnRQYXJlbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgb25tb3VzZWRvd24pO1xyXG4gICAgICAgIHZpZGVvRWxlbWVudFBhcmVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgb25tb3VzZXVwKTtcclxuICAgICAgICB2aWRlb0VsZW1lbnRQYXJlbnQuYWRkRXZlbnRMaXN0ZW5lcignd2hlZWwnLCBvbndoZWVsKTtcclxuICAgICAgICB2aWRlb0VsZW1lbnRQYXJlbnQuYWRkRXZlbnRMaXN0ZW5lcignZGJsY2xpY2snLCBvbmRibGNsaWNrKTtcclxuICAgICAgICB0aGlzLm1vdXNlRXZlbnRMaXN0ZW5lclRyYWNrZXIuYWRkVW5yZWdpc3RlckNhbGxiYWNrKCgpID0+IHZpZGVvRWxlbWVudFBhcmVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBvbm1vdXNlZG93bikpO1xyXG4gICAgICAgIHRoaXMubW91c2VFdmVudExpc3RlbmVyVHJhY2tlci5hZGRVbnJlZ2lzdGVyQ2FsbGJhY2soKCkgPT4gdmlkZW9FbGVtZW50UGFyZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBvbm1vdXNldXApKTtcclxuICAgICAgICB0aGlzLm1vdXNlRXZlbnRMaXN0ZW5lclRyYWNrZXIuYWRkVW5yZWdpc3RlckNhbGxiYWNrKCgpID0+IHZpZGVvRWxlbWVudFBhcmVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd3aGVlbCcsIG9ud2hlZWwpKTtcclxuICAgICAgICB0aGlzLm1vdXNlRXZlbnRMaXN0ZW5lclRyYWNrZXIuYWRkVW5yZWdpc3RlckNhbGxiYWNrKCgpID0+IHZpZGVvRWxlbWVudFBhcmVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdkYmxjbGljaycsIG9uZGJsY2xpY2spKTtcclxuICAgICAgICB0aGlzLm1vdXNlRXZlbnRMaXN0ZW5lclRyYWNrZXIuYWRkVW5yZWdpc3RlckNhbGxiYWNrKCgpID0+IGxvY2tlZE1vdXNlRXZlbnRzLnVucmVnaXN0ZXJNb3VzZUV2ZW50cygpKTtcclxuICAgICAgICB0aGlzLm1vdXNlRXZlbnRMaXN0ZW5lclRyYWNrZXIuYWRkVW5yZWdpc3RlckNhbGxiYWNrKCgpID0+IHtcclxuICAgICAgICAgICAgaWYgKGRvY3VtZW50LmV4aXRQb2ludGVyTG9jayAmJlxyXG4gICAgICAgICAgICAgICAgKGRvY3VtZW50LnBvaW50ZXJMb2NrRWxlbWVudCA9PT0gdmlkZW9FbGVtZW50UGFyZW50IHx8XHJcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQubW96UG9pbnRlckxvY2tFbGVtZW50ID09PSB2aWRlb0VsZW1lbnRQYXJlbnQpKSB7XHJcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5leGl0UG9pbnRlckxvY2soKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWdpc3RlciBhIGhvdmVyaW5nIG1vdXNlIGNsYXNzXHJcbiAgICAgKiBAcGFyYW0gbW91c2VDb250cm9sbGVyIC0gQSBtb3VzZSBjb250cm9sbGVyIG9iamVjdFxyXG4gICAgICovXHJcbiAgICByZWdpc3RlckhvdmVyaW5nTW91c2VFdmVudHMobW91c2VDb250cm9sbGVyKSB7XHJcbiAgICAgICAgY29uc3QgdmlkZW9FbGVtZW50UGFyZW50ID0gdGhpcy52aWRlb0VsZW1lbnRQcm92aWRlci5nZXRWaWRlb1BhcmVudEVsZW1lbnQoKTtcclxuICAgICAgICBjb25zdCBob3ZlcmluZ01vdXNlRXZlbnRzID0gbmV3IF9Ib3ZlcmluZ01vdXNlRXZlbnRzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18uSG92ZXJpbmdNb3VzZUV2ZW50cyhtb3VzZUNvbnRyb2xsZXIpO1xyXG4gICAgICAgIGNvbnN0IG9ubW91c2Vtb3ZlID0gKG1vdXNlRXZlbnQpID0+IGhvdmVyaW5nTW91c2VFdmVudHMudXBkYXRlTW91c2VNb3ZlUG9zaXRpb24obW91c2VFdmVudCk7XHJcbiAgICAgICAgY29uc3Qgb25tb3VzZWRvd24gPSAobW91c2VFdmVudCkgPT4gaG92ZXJpbmdNb3VzZUV2ZW50cy5oYW5kbGVNb3VzZURvd24obW91c2VFdmVudCk7XHJcbiAgICAgICAgY29uc3Qgb25tb3VzZXVwID0gKG1vdXNlRXZlbnQpID0+IGhvdmVyaW5nTW91c2VFdmVudHMuaGFuZGxlTW91c2VVcChtb3VzZUV2ZW50KTtcclxuICAgICAgICBjb25zdCBvbmNvbnRleHRtZW51ID0gKG1vdXNlRXZlbnQpID0+IGhvdmVyaW5nTW91c2VFdmVudHMuaGFuZGxlQ29udGV4dE1lbnUobW91c2VFdmVudCk7XHJcbiAgICAgICAgY29uc3Qgb253aGVlbCA9ICh3aGVlbEV2ZW50KSA9PiBob3ZlcmluZ01vdXNlRXZlbnRzLmhhbmRsZU1vdXNlV2hlZWwod2hlZWxFdmVudCk7XHJcbiAgICAgICAgY29uc3Qgb25kYmxjbGljayA9IChtb3VzZUV2ZW50KSA9PiBob3ZlcmluZ01vdXNlRXZlbnRzLmhhbmRsZU1vdXNlRG91YmxlKG1vdXNlRXZlbnQpO1xyXG4gICAgICAgIHZpZGVvRWxlbWVudFBhcmVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBvbm1vdXNlbW92ZSk7XHJcbiAgICAgICAgdmlkZW9FbGVtZW50UGFyZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIG9ubW91c2Vkb3duKTtcclxuICAgICAgICB2aWRlb0VsZW1lbnRQYXJlbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIG9ubW91c2V1cCk7XHJcbiAgICAgICAgdmlkZW9FbGVtZW50UGFyZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NvbnRleHRtZW51Jywgb25jb250ZXh0bWVudSk7XHJcbiAgICAgICAgdmlkZW9FbGVtZW50UGFyZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3doZWVsJywgb253aGVlbCk7XHJcbiAgICAgICAgdmlkZW9FbGVtZW50UGFyZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2RibGNsaWNrJywgb25kYmxjbGljayk7XHJcbiAgICAgICAgdGhpcy5tb3VzZUV2ZW50TGlzdGVuZXJUcmFja2VyLmFkZFVucmVnaXN0ZXJDYWxsYmFjaygoKSA9PiB2aWRlb0VsZW1lbnRQYXJlbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgb25tb3VzZW1vdmUpKTtcclxuICAgICAgICB0aGlzLm1vdXNlRXZlbnRMaXN0ZW5lclRyYWNrZXIuYWRkVW5yZWdpc3RlckNhbGxiYWNrKCgpID0+IHZpZGVvRWxlbWVudFBhcmVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBvbm1vdXNlZG93bikpO1xyXG4gICAgICAgIHRoaXMubW91c2VFdmVudExpc3RlbmVyVHJhY2tlci5hZGRVbnJlZ2lzdGVyQ2FsbGJhY2soKCkgPT4gdmlkZW9FbGVtZW50UGFyZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBvbm1vdXNldXApKTtcclxuICAgICAgICB0aGlzLm1vdXNlRXZlbnRMaXN0ZW5lclRyYWNrZXIuYWRkVW5yZWdpc3RlckNhbGxiYWNrKCgpID0+IHZpZGVvRWxlbWVudFBhcmVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdjb250ZXh0bWVudScsIG9uY29udGV4dG1lbnUpKTtcclxuICAgICAgICB0aGlzLm1vdXNlRXZlbnRMaXN0ZW5lclRyYWNrZXIuYWRkVW5yZWdpc3RlckNhbGxiYWNrKCgpID0+IHZpZGVvRWxlbWVudFBhcmVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd3aGVlbCcsIG9ud2hlZWwpKTtcclxuICAgICAgICB0aGlzLm1vdXNlRXZlbnRMaXN0ZW5lclRyYWNrZXIuYWRkVW5yZWdpc3RlckNhbGxiYWNrKCgpID0+IHZpZGVvRWxlbWVudFBhcmVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdkYmxjbGljaycsIG9uZGJsY2xpY2spKTtcclxuICAgICAgICB0aGlzLm1vdXNlRXZlbnRMaXN0ZW5lclRyYWNrZXIuYWRkVW5yZWdpc3RlckNhbGxiYWNrKCgpID0+IGhvdmVyaW5nTW91c2VFdmVudHMudW5yZWdpc3Rlck1vdXNlRXZlbnRzKCkpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgdGhlIG1vdXNlIGVudGVyIGFuZCBtb3VzZSBsZWF2ZSBldmVudHNcclxuICAgICAqL1xyXG4gICAgcmVnaXN0ZXJNb3VzZUVudGVyQW5kTGVhdmVFdmVudHMoKSB7XHJcbiAgICAgICAgY29uc3QgdmlkZW9FbGVtZW50UGFyZW50ID0gdGhpcy52aWRlb0VsZW1lbnRQcm92aWRlci5nZXRWaWRlb1BhcmVudEVsZW1lbnQoKTtcclxuICAgICAgICAvLyBIYW5kbGUgd2hlbiB0aGUgTW91c2UgaGFzIGVudGVyZWQgdGhlIGVsZW1lbnRcclxuICAgICAgICBjb25zdCBvbm1vdXNlZW50ZXIgPSAoZXZlbnQpID0+IHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLnZpZGVvRWxlbWVudFByb3ZpZGVyLmlzVmlkZW9SZWFkeSgpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ01vdXNlIEVudGVyZWQnLCA2KTtcclxuICAgICAgICAgICAgdGhpcy5zZW5kTW91c2VFbnRlcigpO1xyXG4gICAgICAgICAgICB0aGlzLnByZXNzTW91c2VCdXR0b25zKGV2ZW50LmJ1dHRvbnMsIGV2ZW50LngsIGV2ZW50LnkpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLy8gSGFuZGxlcyB3aGVuIHRoZSBtb3VzZSBoYXMgbGVmdCB0aGUgZWxlbWVudFxyXG4gICAgICAgIGNvbnN0IG9ubW91c2VsZWF2ZSA9IChldmVudCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIuaXNWaWRlb1JlYWR5KCkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnTW91c2UgTGVmdCcsIDYpO1xyXG4gICAgICAgICAgICB0aGlzLnNlbmRNb3VzZUxlYXZlKCk7XHJcbiAgICAgICAgICAgIHRoaXMucmVsZWFzZU1vdXNlQnV0dG9ucyhldmVudC5idXR0b25zLCBldmVudC54LCBldmVudC55KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHZpZGVvRWxlbWVudFBhcmVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgb25tb3VzZWVudGVyKTtcclxuICAgICAgICB2aWRlb0VsZW1lbnRQYXJlbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIG9ubW91c2VsZWF2ZSk7XHJcbiAgICAgICAgdGhpcy5tb3VzZUV2ZW50TGlzdGVuZXJUcmFja2VyLmFkZFVucmVnaXN0ZXJDYWxsYmFjaygoKSA9PiB2aWRlb0VsZW1lbnRQYXJlbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2VlbnRlcicsIG9ubW91c2VlbnRlcikpO1xyXG4gICAgICAgIHRoaXMubW91c2VFdmVudExpc3RlbmVyVHJhY2tlci5hZGRVbnJlZ2lzdGVyQ2FsbGJhY2soKCkgPT4gdmlkZW9FbGVtZW50UGFyZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCBvbm1vdXNlbGVhdmUpKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlIHdoZW4gYSBtb3VzZSBidXR0b24gaXMgcmVsZWFzZWRcclxuICAgICAqIEBwYXJhbSBidXR0b25zIC0gTW91c2UgQnV0dG9uXHJcbiAgICAgKiBAcGFyYW0gWCAtIE1vdXNlIHBvaW50ZXIgWCBjb29yZGluYXRlXHJcbiAgICAgKiBAcGFyYW0gWSAtIE1vdXNlIHBvaW50ZXIgWSBjb29yZGluYXRlXHJcbiAgICAgKi9cclxuICAgIHJlbGVhc2VNb3VzZUJ1dHRvbnMoYnV0dG9ucywgWCwgWSkge1xyXG4gICAgICAgIGNvbnN0IGNvb3JkID0gdGhpcy5jb29yZGluYXRlQ29udmVydGVyLm5vcm1hbGl6ZUFuZFF1YW50aXplVW5zaWduZWQoWCwgWSk7XHJcbiAgICAgICAgaWYgKGJ1dHRvbnMgJiBfTW91c2VCdXR0b25zX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18uTW91c2VCdXR0b25zTWFzay5wcmltYXJ5QnV0dG9uKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VuZE1vdXNlVXAoX01vdXNlQnV0dG9uc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fLk1vdXNlQnV0dG9uLm1haW5CdXR0b24sIGNvb3JkLngsIGNvb3JkLnkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYnV0dG9ucyAmIF9Nb3VzZUJ1dHRvbnNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXy5Nb3VzZUJ1dHRvbnNNYXNrLnNlY29uZGFyeUJ1dHRvbikge1xyXG4gICAgICAgICAgICB0aGlzLnNlbmRNb3VzZVVwKF9Nb3VzZUJ1dHRvbnNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXy5Nb3VzZUJ1dHRvbi5zZWNvbmRhcnlCdXR0b24sIGNvb3JkLngsIGNvb3JkLnkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYnV0dG9ucyAmIF9Nb3VzZUJ1dHRvbnNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXy5Nb3VzZUJ1dHRvbnNNYXNrLmF1eGlsaWFyeUJ1dHRvbikge1xyXG4gICAgICAgICAgICB0aGlzLnNlbmRNb3VzZVVwKF9Nb3VzZUJ1dHRvbnNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXy5Nb3VzZUJ1dHRvbi5hdXhpbGlhcnlCdXR0b24sIGNvb3JkLngsIGNvb3JkLnkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYnV0dG9ucyAmIF9Nb3VzZUJ1dHRvbnNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXy5Nb3VzZUJ1dHRvbnNNYXNrLmZvdXJ0aEJ1dHRvbikge1xyXG4gICAgICAgICAgICB0aGlzLnNlbmRNb3VzZVVwKF9Nb3VzZUJ1dHRvbnNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXy5Nb3VzZUJ1dHRvbi5mb3VydGhCdXR0b24sIGNvb3JkLngsIGNvb3JkLnkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYnV0dG9ucyAmIF9Nb3VzZUJ1dHRvbnNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXy5Nb3VzZUJ1dHRvbnNNYXNrLmZpZnRoQnV0dG9uKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VuZE1vdXNlVXAoX01vdXNlQnV0dG9uc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fLk1vdXNlQnV0dG9uLmZpZnRoQnV0dG9uLCBjb29yZC54LCBjb29yZC55KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEhhbmRsZSB3aGVuIGEgbW91c2UgYnV0dG9uIGlzIHByZXNzZWRcclxuICAgICAqIEBwYXJhbSBidXR0b25zIC0gTW91c2UgQnV0dG9uXHJcbiAgICAgKiBAcGFyYW0gWCAtIE1vdXNlIHBvaW50ZXIgWCBjb29yZGluYXRlXHJcbiAgICAgKiBAcGFyYW0gWSAtIE1vdXNlIHBvaW50ZXIgWSBjb29yZGluYXRlXHJcbiAgICAgKi9cclxuICAgIHByZXNzTW91c2VCdXR0b25zKGJ1dHRvbnMsIFgsIFkpIHtcclxuICAgICAgICBpZiAoIXRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIuaXNWaWRlb1JlYWR5KCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBjb29yZCA9IHRoaXMuY29vcmRpbmF0ZUNvbnZlcnRlci5ub3JtYWxpemVBbmRRdWFudGl6ZVVuc2lnbmVkKFgsIFkpO1xyXG4gICAgICAgIGlmIChidXR0b25zICYgX01vdXNlQnV0dG9uc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fLk1vdXNlQnV0dG9uc01hc2sucHJpbWFyeUJ1dHRvbikge1xyXG4gICAgICAgICAgICB0aGlzLnNlbmRNb3VzZURvd24oX01vdXNlQnV0dG9uc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fLk1vdXNlQnV0dG9uLm1haW5CdXR0b24sIGNvb3JkLngsIGNvb3JkLnkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYnV0dG9ucyAmIF9Nb3VzZUJ1dHRvbnNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXy5Nb3VzZUJ1dHRvbnNNYXNrLnNlY29uZGFyeUJ1dHRvbikge1xyXG4gICAgICAgICAgICB0aGlzLnNlbmRNb3VzZURvd24oX01vdXNlQnV0dG9uc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fLk1vdXNlQnV0dG9uLnNlY29uZGFyeUJ1dHRvbiwgY29vcmQueCwgY29vcmQueSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChidXR0b25zICYgX01vdXNlQnV0dG9uc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fLk1vdXNlQnV0dG9uc01hc2suYXV4aWxpYXJ5QnV0dG9uKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VuZE1vdXNlRG93bihfTW91c2VCdXR0b25zX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18uTW91c2VCdXR0b24uYXV4aWxpYXJ5QnV0dG9uLCBjb29yZC54LCBjb29yZC55KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGJ1dHRvbnMgJiBfTW91c2VCdXR0b25zX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18uTW91c2VCdXR0b25zTWFzay5mb3VydGhCdXR0b24pIHtcclxuICAgICAgICAgICAgdGhpcy5zZW5kTW91c2VEb3duKF9Nb3VzZUJ1dHRvbnNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXy5Nb3VzZUJ1dHRvbi5mb3VydGhCdXR0b24sIGNvb3JkLngsIGNvb3JkLnkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYnV0dG9ucyAmIF9Nb3VzZUJ1dHRvbnNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXy5Nb3VzZUJ1dHRvbnNNYXNrLmZpZnRoQnV0dG9uKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VuZE1vdXNlRG93bihfTW91c2VCdXR0b25zX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18uTW91c2VCdXR0b24uZmlmdGhCdXR0b24sIGNvb3JkLngsIGNvb3JkLnkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlcyBtb3VzZSBlbnRlclxyXG4gICAgICovXHJcbiAgICBzZW5kTW91c2VFbnRlcigpIHtcclxuICAgICAgICBpZiAoIXRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIuaXNWaWRlb1JlYWR5KCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCB0b1N0cmVhbWVySGFuZGxlcnMgPSB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyLnRvU3RyZWFtZXJIYW5kbGVycztcclxuICAgICAgICB0b1N0cmVhbWVySGFuZGxlcnMuZ2V0KCdNb3VzZUVudGVyJykoKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlcyBtb3VzZSBMZWF2ZVxyXG4gICAgICovXHJcbiAgICBzZW5kTW91c2VMZWF2ZSgpIHtcclxuICAgICAgICBpZiAoIXRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIuaXNWaWRlb1JlYWR5KCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCB0b1N0cmVhbWVySGFuZGxlcnMgPSB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyLnRvU3RyZWFtZXJIYW5kbGVycztcclxuICAgICAgICB0b1N0cmVhbWVySGFuZGxlcnMuZ2V0KCdNb3VzZUxlYXZlJykoKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlcyB3aGVuIGEgbW91c2UgYnV0dG9uIGlzIHByZXNzZWQgZG93blxyXG4gICAgICogQHBhcmFtIGJ1dHRvbiAtIE1vdXNlIEJ1dHRvbiBQcmVzc2VkXHJcbiAgICAgKiBAcGFyYW0gWCAgLSBNb3VzZSBYIENvb3JkaW5hdGVcclxuICAgICAqIEBwYXJhbSBZICAtIE1vdXNlIFkgQ29vcmRpbmF0ZVxyXG4gICAgICovXHJcbiAgICBzZW5kTW91c2VEb3duKGJ1dHRvbiwgWCwgWSkge1xyXG4gICAgICAgIGlmICghdGhpcy52aWRlb0VsZW1lbnRQcm92aWRlci5pc1ZpZGVvUmVhZHkoKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksIGBtb3VzZSBidXR0b24gJHtidXR0b259IGRvd24gYXQgKCR7WH0sICR7WX0pYCwgNik7XHJcbiAgICAgICAgY29uc3QgdG9TdHJlYW1lckhhbmRsZXJzID0gdGhpcy50b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlci50b1N0cmVhbWVySGFuZGxlcnM7XHJcbiAgICAgICAgdG9TdHJlYW1lckhhbmRsZXJzLmdldCgnTW91c2VEb3duJykoW2J1dHRvbiwgWCwgWV0pO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBIYW5kbGVzIHdoZW4gYSBtb3VzZSBidXR0b24gaXMgcHJlc3NlZCB1cFxyXG4gICAgICogQHBhcmFtIGJ1dHRvbiAtIE1vdXNlIEJ1dHRvbiBQcmVzc2VkXHJcbiAgICAgKiBAcGFyYW0gWCAgLSBNb3VzZSBYIENvb3JkaW5hdGVcclxuICAgICAqIEBwYXJhbSBZICAtIE1vdXNlIFkgQ29vcmRpbmF0ZVxyXG4gICAgICovXHJcbiAgICBzZW5kTW91c2VVcChidXR0b24sIFgsIFkpIHtcclxuICAgICAgICBpZiAoIXRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIuaXNWaWRlb1JlYWR5KCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBgbW91c2UgYnV0dG9uICR7YnV0dG9ufSB1cCBhdCAoJHtYfSwgJHtZfSlgLCA2KTtcclxuICAgICAgICBjb25zdCBjb29yZCA9IHRoaXMuY29vcmRpbmF0ZUNvbnZlcnRlci5ub3JtYWxpemVBbmRRdWFudGl6ZVVuc2lnbmVkKFgsIFkpO1xyXG4gICAgICAgIGNvbnN0IHRvU3RyZWFtZXJIYW5kbGVycyA9IHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXIudG9TdHJlYW1lckhhbmRsZXJzO1xyXG4gICAgICAgIHRvU3RyZWFtZXJIYW5kbGVycy5nZXQoJ01vdXNlVXAnKShbYnV0dG9uLCBjb29yZC54LCBjb29yZC55XSk7XHJcbiAgICB9XHJcbn1cclxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL0lucHV0cy9TcGVjaWFsS2V5Q29kZXMudHNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9JbnB1dHMvU3BlY2lhbEtleUNvZGVzLnRzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiU3BlY2lhbEtleUNvZGVzXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIFNwZWNpYWxLZXlDb2Rlcylcbi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pO1xuLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuLyoqXHJcbiAqIFJlZ2lzdGVycyB0aGUgU3BlY2lhbCBLZXkgY29kZXNcclxuICogIE11c3QgYmUga2VwdCBpbiBzeW5jIHdpdGggSmF2YVNjcmlwdEtleUNvZGVUb0ZLZXkgQysrIGFycmF5LlxyXG4gKiBUaGUgaW5kZXggb2YgdGhlIGVudHJ5IGluIHRoZSBhcnJheSBpcyB0aGUgc3BlY2lhbCBrZXkgY29kZSBnaXZlbiBiZWxvdy5cclxuICovXHJcbmNsYXNzIFNwZWNpYWxLZXlDb2RlcyB7XHJcbn1cclxuU3BlY2lhbEtleUNvZGVzLmJhY2tTcGFjZSA9IDg7XHJcblNwZWNpYWxLZXlDb2Rlcy5zaGlmdCA9IDE2O1xyXG5TcGVjaWFsS2V5Q29kZXMuY29udHJvbCA9IDE3O1xyXG5TcGVjaWFsS2V5Q29kZXMuYWx0ID0gMTg7XHJcblNwZWNpYWxLZXlDb2Rlcy5yaWdodFNoaWZ0ID0gMjUzO1xyXG5TcGVjaWFsS2V5Q29kZXMucmlnaHRDb250cm9sID0gMjU0O1xyXG5TcGVjaWFsS2V5Q29kZXMucmlnaHRBbHQgPSAyNTU7XHJcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9JbnB1dHMvVG91Y2hDb250cm9sbGVyLnRzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvSW5wdXRzL1RvdWNoQ29udHJvbGxlci50cyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywge1xuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIlRvdWNoQ29udHJvbGxlclwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBUb3VjaENvbnRyb2xsZXIpXG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vTG9nZ2VyL0xvZ2dlciAqLyBcIi4vc3JjL0xvZ2dlci9Mb2dnZXIudHNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX1V0aWxfRXZlbnRMaXN0ZW5lclRyYWNrZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL1V0aWwvRXZlbnRMaXN0ZW5lclRyYWNrZXIgKi8gXCIuL3NyYy9VdGlsL0V2ZW50TGlzdGVuZXJUcmFja2VyLnRzXCIpO1xuLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuXHJcblxyXG4vKipcclxuICogSGFuZGxlcyB0aGUgVG91Y2ggaW5wdXQgRXZlbnRzXHJcbiAqL1xyXG5jbGFzcyBUb3VjaENvbnRyb2xsZXIge1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0gdG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXIgLSBTdHJlYW0gbWVzc2FnZSBpbnN0YW5jZVxyXG4gICAgICogQHBhcmFtIHZpZGVvRWxlbWVudFByb3ZpZGVyIC0gVmlkZW8gUGxheWVyIGluc3RhbmNlXHJcbiAgICAgKiBAcGFyYW0gY29vcmRpbmF0ZUNvbnZlcnRlciAtIEEgY29vcmRpbmF0ZSBjb252ZXJ0ZXIgaW5zdGFuY2VcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXIsIHZpZGVvRWxlbWVudFByb3ZpZGVyLCBjb29yZGluYXRlQ29udmVydGVyKSB7XHJcbiAgICAgICAgdGhpcy5maW5nZXJzID0gWzksIDgsIDcsIDYsIDUsIDQsIDMsIDIsIDEsIDBdO1xyXG4gICAgICAgIHRoaXMuZmluZ2VySWRzID0gbmV3IE1hcCgpO1xyXG4gICAgICAgIHRoaXMubWF4Qnl0ZVZhbHVlID0gMjU1O1xyXG4gICAgICAgIC8vIFV0aWxpdHkgZm9yIGtlZXBpbmcgdHJhY2sgb2YgZXZlbnQgaGFuZGxlcnMgYW5kIHVucmVnaXN0ZXJpbmcgdGhlbVxyXG4gICAgICAgIHRoaXMudG91Y2hFdmVudExpc3RlbmVyVHJhY2tlciA9IG5ldyBfVXRpbF9FdmVudExpc3RlbmVyVHJhY2tlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkV2ZW50TGlzdGVuZXJUcmFja2VyKCk7XHJcbiAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlciA9IHRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyO1xyXG4gICAgICAgIHRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIgPSB2aWRlb0VsZW1lbnRQcm92aWRlcjtcclxuICAgICAgICB0aGlzLmNvb3JkaW5hdGVDb252ZXJ0ZXIgPSBjb29yZGluYXRlQ29udmVydGVyO1xyXG4gICAgICAgIHRoaXMudmlkZW9FbGVtZW50UGFyZW50ID0gdmlkZW9FbGVtZW50UHJvdmlkZXIuZ2V0VmlkZW9FbGVtZW50KCk7XHJcbiAgICAgICAgY29uc3Qgb250b3VjaHN0YXJ0ID0gKGV2KSA9PiB0aGlzLm9uVG91Y2hTdGFydChldik7XHJcbiAgICAgICAgY29uc3Qgb250b3VjaGVuZCA9IChldikgPT4gdGhpcy5vblRvdWNoRW5kKGV2KTtcclxuICAgICAgICBjb25zdCBvbnRvdWNobW92ZSA9IChldikgPT4gdGhpcy5vblRvdWNoTW92ZShldik7XHJcbiAgICAgICAgdGhpcy52aWRlb0VsZW1lbnRQYXJlbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIG9udG91Y2hzdGFydCwgeyBwYXNzaXZlOiBmYWxzZSB9KTtcclxuICAgICAgICB0aGlzLnZpZGVvRWxlbWVudFBhcmVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIG9udG91Y2hlbmQsIHsgcGFzc2l2ZTogZmFsc2UgfSk7XHJcbiAgICAgICAgdGhpcy52aWRlb0VsZW1lbnRQYXJlbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgb250b3VjaG1vdmUsIHsgcGFzc2l2ZTogZmFsc2UgfSk7XHJcbiAgICAgICAgdGhpcy50b3VjaEV2ZW50TGlzdGVuZXJUcmFja2VyLmFkZFVucmVnaXN0ZXJDYWxsYmFjaygoKSA9PiB0aGlzLnZpZGVvRWxlbWVudFBhcmVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0Jywgb250b3VjaHN0YXJ0KSk7XHJcbiAgICAgICAgdGhpcy50b3VjaEV2ZW50TGlzdGVuZXJUcmFja2VyLmFkZFVucmVnaXN0ZXJDYWxsYmFjaygoKSA9PiB0aGlzLnZpZGVvRWxlbWVudFBhcmVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIG9udG91Y2hlbmQpKTtcclxuICAgICAgICB0aGlzLnRvdWNoRXZlbnRMaXN0ZW5lclRyYWNrZXIuYWRkVW5yZWdpc3RlckNhbGxiYWNrKCgpID0+IHRoaXMudmlkZW9FbGVtZW50UGFyZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIG9udG91Y2htb3ZlKSk7XHJcbiAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ1RvdWNoIEV2ZW50cyBSZWdpc3RlcmVkJywgNik7XHJcbiAgICAgICAgLy8gaXMgdGhpcyBzdHJpY3RseSBuZWNlc3Nhcnk/XHJcbiAgICAgICAgY29uc3QgcHJldmVudE9uVG91Y2hNb3ZlID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCBwcmV2ZW50T25Ub3VjaE1vdmUsIHsgcGFzc2l2ZTogZmFsc2UgfSk7XHJcbiAgICAgICAgdGhpcy50b3VjaEV2ZW50TGlzdGVuZXJUcmFja2VyLmFkZFVucmVnaXN0ZXJDYWxsYmFjaygoKSA9PiBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCBwcmV2ZW50T25Ub3VjaE1vdmUpKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVW5yZWdpc3RlciBhbGwgdG91Y2ggZXZlbnRzXHJcbiAgICAgKi9cclxuICAgIHVucmVnaXN0ZXJUb3VjaEV2ZW50cygpIHtcclxuICAgICAgICB0aGlzLnRvdWNoRXZlbnRMaXN0ZW5lclRyYWNrZXIudW5yZWdpc3RlckFsbCgpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW1lbWJlciBhIHRvdWNoIGNvbW1hbmRcclxuICAgICAqIEBwYXJhbSB0b3VjaCAtIHRoZSB0b3VjaCBjb21tYW5kXHJcbiAgICAgKi9cclxuICAgIHJlbWVtYmVyVG91Y2godG91Y2gpIHtcclxuICAgICAgICBjb25zdCBmaW5nZXIgPSB0aGlzLmZpbmdlcnMucG9wKCk7XHJcbiAgICAgICAgaWYgKGZpbmdlciA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksICdleGhhdXN0ZWQgdG91Y2ggaWRlbnRpZmllcnMnLCA2KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5maW5nZXJJZHMuc2V0KHRvdWNoLmlkZW50aWZpZXIsIGZpbmdlcik7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEZvcmdldHMgYSB0b3VjaCBjb21tYW5kXHJcbiAgICAgKiBAcGFyYW0gdG91Y2ggLSB0aGUgdG91Y2ggY29tbWFuZFxyXG4gICAgICovXHJcbiAgICBmb3JnZXRUb3VjaCh0b3VjaCkge1xyXG4gICAgICAgIHRoaXMuZmluZ2Vycy5wdXNoKHRoaXMuZmluZ2VySWRzLmdldCh0b3VjaC5pZGVudGlmaWVyKSk7XHJcbiAgICAgICAgLy8gU29ydCBhcnJheSBiYWNrIGludG8gZGVzY2VuZGluZyBvcmRlci4gVGhpcyBtZWFucyBpZiBmaW5nZXIgJzEnIHdlcmUgdG8gbGlmdCBhZnRlciBmaW5nZXIgJzAnLCB3ZSB3b3VsZCBlbnN1cmUgdGhhdCAwIHdpbGwgYmUgdGhlIGZpcnN0IGluZGV4IHRvIHBvcFxyXG4gICAgICAgIHRoaXMuZmluZ2Vycy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBiIC0gYTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmZpbmdlcklkcy5kZWxldGUodG91Y2guaWRlbnRpZmllcik7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFdoZW4gYSB0b3VjaCBldmVudCBzdGFydHNcclxuICAgICAqIEBwYXJhbSB0b3VjaEV2ZW50IC0gdGhlIHRvdWNoIGV2ZW50IGJlaW5nIGludGVyY2VwdGVkXHJcbiAgICAgKi9cclxuICAgIG9uVG91Y2hTdGFydCh0b3VjaEV2ZW50KSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnZpZGVvRWxlbWVudFByb3ZpZGVyLmlzVmlkZW9SZWFkeSgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChsZXQgdCA9IDA7IHQgPCB0b3VjaEV2ZW50LmNoYW5nZWRUb3VjaGVzLmxlbmd0aDsgdCsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVtZW1iZXJUb3VjaCh0b3VjaEV2ZW50LmNoYW5nZWRUb3VjaGVzW3RdKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ3RvdWNoIHN0YXJ0JywgNik7XHJcbiAgICAgICAgdGhpcy5lbWl0VG91Y2hEYXRhKCdUb3VjaFN0YXJ0JywgdG91Y2hFdmVudC5jaGFuZ2VkVG91Y2hlcyk7XHJcbiAgICAgICAgdG91Y2hFdmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBXaGVuIGEgdG91Y2ggZXZlbnQgZW5kc1xyXG4gICAgICogQHBhcmFtIHRvdWNoRXZlbnQgLSB0aGUgdG91Y2ggZXZlbnQgYmVpbmcgaW50ZXJjZXB0ZWRcclxuICAgICAqL1xyXG4gICAgb25Ub3VjaEVuZCh0b3VjaEV2ZW50KSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnZpZGVvRWxlbWVudFByb3ZpZGVyLmlzVmlkZW9SZWFkeSgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ3RvdWNoIGVuZCcsIDYpO1xyXG4gICAgICAgIHRoaXMuZW1pdFRvdWNoRGF0YSgnVG91Y2hFbmQnLCB0b3VjaEV2ZW50LmNoYW5nZWRUb3VjaGVzKTtcclxuICAgICAgICAvLyBSZS1jeWNsZSB1bmlxdWUgaWRlbnRpZmllcnMgcHJldmlvdXNseSBhc3NpZ25lZCB0byBlYWNoIHRvdWNoLlxyXG4gICAgICAgIGZvciAobGV0IHQgPSAwOyB0IDwgdG91Y2hFdmVudC5jaGFuZ2VkVG91Y2hlcy5sZW5ndGg7IHQrKykge1xyXG4gICAgICAgICAgICB0aGlzLmZvcmdldFRvdWNoKHRvdWNoRXZlbnQuY2hhbmdlZFRvdWNoZXNbdF0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0b3VjaEV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIHdoZW4gYSBtb3ZpbmcgdG91Y2ggZXZlbnQgb2NjdXJzXHJcbiAgICAgKiBAcGFyYW0gdG91Y2hFdmVudCAtIHRoZSB0b3VjaCBldmVudCBiZWluZyBpbnRlcmNlcHRlZFxyXG4gICAgICovXHJcbiAgICBvblRvdWNoTW92ZSh0b3VjaEV2ZW50KSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnZpZGVvRWxlbWVudFByb3ZpZGVyLmlzVmlkZW9SZWFkeSgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ3RvdWNoIG1vdmUnLCA2KTtcclxuICAgICAgICB0aGlzLmVtaXRUb3VjaERhdGEoJ1RvdWNoTW92ZScsIHRvdWNoRXZlbnQudG91Y2hlcyk7XHJcbiAgICAgICAgdG91Y2hFdmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgfVxyXG4gICAgZW1pdFRvdWNoRGF0YSh0eXBlLCB0b3VjaGVzKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnZpZGVvRWxlbWVudFByb3ZpZGVyLmlzVmlkZW9SZWFkeSgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgdmlkZW9FbGVtZW50UGFyZW50ID0gdGhpcy52aWRlb0VsZW1lbnRQcm92aWRlci5nZXRWaWRlb1BhcmVudEVsZW1lbnQoKTtcclxuICAgICAgICBjb25zdCB0b1N0cmVhbWVySGFuZGxlcnMgPSB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyLnRvU3RyZWFtZXJIYW5kbGVycztcclxuICAgICAgICBmb3IgKGxldCB0ID0gMDsgdCA8IHRvdWNoZXMubGVuZ3RoOyB0KyspIHtcclxuICAgICAgICAgICAgY29uc3QgbnVtVG91Y2hlcyA9IDE7IC8vIHRoZSBudW1iZXIgb2YgdG91Y2hlcyB0byBiZSBzZW50IHRoaXMgbWVzc2FnZVxyXG4gICAgICAgICAgICBjb25zdCB0b3VjaCA9IHRvdWNoZXNbdF07XHJcbiAgICAgICAgICAgIGNvbnN0IHggPSB0b3VjaC5jbGllbnRYIC0gdmlkZW9FbGVtZW50UGFyZW50Lm9mZnNldExlZnQ7XHJcbiAgICAgICAgICAgIGNvbnN0IHkgPSB0b3VjaC5jbGllbnRZIC0gdmlkZW9FbGVtZW50UGFyZW50Lm9mZnNldFRvcDtcclxuICAgICAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgYEYke3RoaXMuZmluZ2VySWRzLmdldCh0b3VjaC5pZGVudGlmaWVyKX09KCR7eH0sICR7eX0pYCwgNik7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvb3JkID0gdGhpcy5jb29yZGluYXRlQ29udmVydGVyLm5vcm1hbGl6ZUFuZFF1YW50aXplVW5zaWduZWQoeCwgeSk7XHJcbiAgICAgICAgICAgIHN3aXRjaCAodHlwZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnVG91Y2hTdGFydCc6XHJcbiAgICAgICAgICAgICAgICAgICAgdG9TdHJlYW1lckhhbmRsZXJzLmdldCgnVG91Y2hTdGFydCcpKFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnVtVG91Y2hlcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29vcmQueCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29vcmQueSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5maW5nZXJJZHMuZ2V0KHRvdWNoLmlkZW50aWZpZXIpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1heEJ5dGVWYWx1ZSAqIHRvdWNoLmZvcmNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb29yZC5pblJhbmdlID8gMSA6IDBcclxuICAgICAgICAgICAgICAgICAgICBdKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ1RvdWNoRW5kJzpcclxuICAgICAgICAgICAgICAgICAgICB0b1N0cmVhbWVySGFuZGxlcnMuZ2V0KCdUb3VjaEVuZCcpKFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnVtVG91Y2hlcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29vcmQueCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29vcmQueSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5maW5nZXJJZHMuZ2V0KHRvdWNoLmlkZW50aWZpZXIpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1heEJ5dGVWYWx1ZSAqIHRvdWNoLmZvcmNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb29yZC5pblJhbmdlID8gMSA6IDBcclxuICAgICAgICAgICAgICAgICAgICBdKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ1RvdWNoTW92ZSc6XHJcbiAgICAgICAgICAgICAgICAgICAgdG9TdHJlYW1lckhhbmRsZXJzLmdldCgnVG91Y2hNb3ZlJykoW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBudW1Ub3VjaGVzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb29yZC54LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb29yZC55LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZpbmdlcklkcy5nZXQodG91Y2guaWRlbnRpZmllciksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWF4Qnl0ZVZhbHVlICogdG91Y2guZm9yY2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvb3JkLmluUmFuZ2UgPyAxIDogMFxyXG4gICAgICAgICAgICAgICAgICAgIF0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9JbnB1dHMvWFJHYW1lcGFkQ29udHJvbGxlci50c1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9JbnB1dHMvWFJHYW1lcGFkQ29udHJvbGxlci50cyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJYUkdhbWVwYWRDb250cm9sbGVyXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIFhSR2FtZXBhZENvbnRyb2xsZXIpXG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfVXRpbF9XZWJYUlV0aWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9VdGlsL1dlYlhSVXRpbHMgKi8gXCIuL3NyYy9VdGlsL1dlYlhSVXRpbHMudHNcIik7XG4vLyBDb3B5cmlnaHQgRXBpYyBHYW1lcywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG5cclxuLyoqXHJcbiAqIFRoZSBjbGFzcyB0aGF0IGhhbmRsZXMgdGhlIGZ1bmN0aW9uYWxpdHkgb2YgeHJnYW1lcGFkcyBhbmQgY29udHJvbGxlcnNcclxuICovXHJcbmNsYXNzIFhSR2FtZXBhZENvbnRyb2xsZXIge1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0gdG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXIgLSBTdHJlYW0gbWVzc2FnZSBpbnN0YW5jZVxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcih0b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlcikge1xyXG4gICAgICAgIHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXIgPSB0b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlcjtcclxuICAgICAgICB0aGlzLmNvbnRyb2xsZXJzID0gW107XHJcbiAgICB9XHJcbiAgICB1cGRhdGVTdGF0dXMoc291cmNlLCBmcmFtZSwgcmVmU3BhY2UpIHtcclxuICAgICAgICBpZiAoc291cmNlLmdhbWVwYWQpIHtcclxuICAgICAgICAgICAgY29uc3QgZ2FtZXBhZFBvc2UgPSBmcmFtZS5nZXRQb3NlKHNvdXJjZS5ncmlwU3BhY2UsIHJlZlNwYWNlKTtcclxuICAgICAgICAgICAgaWYgKCFnYW1lcGFkUG9zZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxldCBzeXN0ZW0gPSAwO1xyXG4gICAgICAgICAgICBpZiAoc291cmNlLnByb2ZpbGVzLmluY2x1ZGVzKCdodGMtdml2ZScpKSB7XHJcbiAgICAgICAgICAgICAgICBzeXN0ZW0gPSAxO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHNvdXJjZS5wcm9maWxlcy5pbmNsdWRlcygnb2N1bHVzLXRvdWNoJykpIHtcclxuICAgICAgICAgICAgICAgIHN5c3RlbSA9IDI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gVE9ETyAod2lsbGlhbS5iZWxjaGVyKTogQWRkIG90aGVyIHByb2ZpbGVzIChRdWVzdCwgTWljcm9zb2Z0IE1peGVkIFJlYWxpdHksIGV0YylcclxuICAgICAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlci50b1N0cmVhbWVySGFuZGxlcnMuZ2V0KCdYUlN5c3RlbScpKFtcclxuICAgICAgICAgICAgICAgIHN5c3RlbVxyXG4gICAgICAgICAgICBdKTtcclxuICAgICAgICAgICAgLy8gRGVmYXVsdDogQW55SGFuZCAoMilcclxuICAgICAgICAgICAgbGV0IGhhbmRlZG5lc3MgPSAyO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKHNvdXJjZS5oYW5kZWRuZXNzKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdsZWZ0JzpcclxuICAgICAgICAgICAgICAgICAgICBoYW5kZWRuZXNzID0gMDtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3JpZ2h0JzpcclxuICAgICAgICAgICAgICAgICAgICBoYW5kZWRuZXNzID0gMTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBTZW5kIGNvbnRyb2xsZXIgdHJhbnNmb3JtXHJcbiAgICAgICAgICAgIGNvbnN0IG1hdHJpeCA9IGdhbWVwYWRQb3NlLnRyYW5zZm9ybS5tYXRyaXg7XHJcbiAgICAgICAgICAgIGNvbnN0IG1hdCA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDE2OyBpKyspIHtcclxuICAgICAgICAgICAgICAgIG1hdFtpXSA9IG5ldyBGbG9hdDMyQXJyYXkoW21hdHJpeFtpXV0pWzBdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIHByZXR0aWVyLWlnbm9yZVxyXG4gICAgICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlc1Byb3ZpZGVyLnRvU3RyZWFtZXJIYW5kbGVycy5nZXQoJ1hSQ29udHJvbGxlclRyYW5zZm9ybScpKFtcclxuICAgICAgICAgICAgICAgIG1hdFswXSwgbWF0WzRdLCBtYXRbOF0sIG1hdFsxMl0sXHJcbiAgICAgICAgICAgICAgICBtYXRbMV0sIG1hdFs1XSwgbWF0WzldLCBtYXRbMTNdLFxyXG4gICAgICAgICAgICAgICAgbWF0WzJdLCBtYXRbNl0sIG1hdFsxMF0sIG1hdFsxNF0sXHJcbiAgICAgICAgICAgICAgICBtYXRbM10sIG1hdFs3XSwgbWF0WzExXSwgbWF0WzE1XSxcclxuICAgICAgICAgICAgICAgIGhhbmRlZG5lc3NcclxuICAgICAgICAgICAgXSk7XHJcbiAgICAgICAgICAgIC8vIEhhbmRsZSBjb250cm9sbGVyIGJ1dHRvbnMgYW5kIGF4ZXNcclxuICAgICAgICAgICAgaWYgKHRoaXMuY29udHJvbGxlcnNbaGFuZGVkbmVzc10gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250cm9sbGVyc1toYW5kZWRuZXNzXSA9IHtcclxuICAgICAgICAgICAgICAgICAgICBwcmV2U3RhdGU6IHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50U3RhdGU6IHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgICAgICAgICBpZDogdW5kZWZpbmVkXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250cm9sbGVyc1toYW5kZWRuZXNzXS5wcmV2U3RhdGUgPVxyXG4gICAgICAgICAgICAgICAgICAgIF9VdGlsX1dlYlhSVXRpbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5XZWJYUlV0aWxzLmRlZXBDb3B5R2FtZXBhZChzb3VyY2UuZ2FtZXBhZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5jb250cm9sbGVyc1toYW5kZWRuZXNzXS5jdXJyZW50U3RhdGUgPVxyXG4gICAgICAgICAgICAgICAgX1V0aWxfV2ViWFJVdGlsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLldlYlhSVXRpbHMuZGVlcENvcHlHYW1lcGFkKHNvdXJjZS5nYW1lcGFkKTtcclxuICAgICAgICAgICAgY29uc3QgY29udHJvbGxlciA9IHRoaXMuY29udHJvbGxlcnNbaGFuZGVkbmVzc107XHJcbiAgICAgICAgICAgIGNvbnN0IGN1cnJTdGF0ZSA9IGNvbnRyb2xsZXIuY3VycmVudFN0YXRlO1xyXG4gICAgICAgICAgICBjb25zdCBwcmV2U3RhdGUgPSBjb250cm9sbGVyLnByZXZTdGF0ZTtcclxuICAgICAgICAgICAgLy8gSXRlcmF0ZSBvdmVyIGJ1dHRvbnNcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjdXJyU3RhdGUuYnV0dG9ucy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgY3VyckJ1dHRvbiA9IGN1cnJTdGF0ZS5idXR0b25zW2ldO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcHJldkJ1dHRvbiA9IHByZXZTdGF0ZS5idXR0b25zW2ldO1xyXG4gICAgICAgICAgICAgICAgaWYgKGN1cnJCdXR0b24ucHJlc3NlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHByZXNzXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlci50b1N0cmVhbWVySGFuZGxlcnMuZ2V0KCdYUkJ1dHRvblByZXNzZWQnKShbaGFuZGVkbmVzcywgaSwgcHJldkJ1dHRvbi5wcmVzc2VkID8gMSA6IDBdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKCFjdXJyQnV0dG9uLnByZXNzZWQgJiYgcHJldkJ1dHRvbi5wcmVzc2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlci50b1N0cmVhbWVySGFuZGxlcnMuZ2V0KCdYUkJ1dHRvblJlbGVhc2VkJykoW2hhbmRlZG5lc3MsIGksIDBdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChjdXJyQnV0dG9uLnRvdWNoZWQgJiYgIWN1cnJCdXR0b24ucHJlc3NlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHByZXNzXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlci50b1N0cmVhbWVySGFuZGxlcnMuZ2V0KCdYUkJ1dHRvblByZXNzZWQnKShbaGFuZGVkbmVzcywgMywgcHJldkJ1dHRvbi50b3VjaGVkID8gMSA6IDBdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKCFjdXJyQnV0dG9uLnRvdWNoZWQgJiYgcHJldkJ1dHRvbi50b3VjaGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXNQcm92aWRlci50b1N0cmVhbWVySGFuZGxlcnMuZ2V0KCdYUkJ1dHRvblJlbGVhc2VkJykoW2hhbmRlZG5lc3MsIDMsIDBdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBJdGVyYXRlIG92ZXIgZ2FtZXBhZCBheGVzXHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY3VyclN0YXRlLmF4ZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzUHJvdmlkZXIudG9TdHJlYW1lckhhbmRsZXJzLmdldCgnWFJBbmFsb2cnKShbaGFuZGVkbmVzcywgaSwgY3VyclN0YXRlLmF4ZXNbaV1dKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmNvbnRyb2xsZXJzW2hhbmRlZG5lc3NdLnByZXZTdGF0ZSA9IGN1cnJTdGF0ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL0xvZ2dlci9Mb2dnZXIudHNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9Mb2dnZXIvTG9nZ2VyLnRzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiTG9nZ2VyXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIExvZ2dlcilcbi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pO1xuLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuY2xhc3MgTG9nZ2VyIHtcclxuICAgIC8qKlxyXG4gICAgICogQ2FwdHVyZXMgdGhlIHN0YWNrIGFuZCByZXR1cm5zIGl0XHJcbiAgICAgKiBAcmV0dXJucyB0aGUgY3VycmVudCBzdGFja1xyXG4gICAgICovXHJcbiAgICBzdGF0aWMgR2V0U3RhY2tUcmFjZSgpIHtcclxuICAgICAgICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcigpO1xyXG4gICAgICAgIGxldCBmb3JtYXR0ZWRTdGFjayA9ICdObyBTdGFjayBBdmFpbGFibGUgZm9yIHRoaXMgYnJvd3Nlcic7XHJcbiAgICAgICAgLy8gZm9ybWF0IHRoZSBlcnJvclxyXG4gICAgICAgIGlmIChlcnJvci5zdGFjaykge1xyXG4gICAgICAgICAgICBmb3JtYXR0ZWRTdGFjayA9IGVycm9yLnN0YWNrLnRvU3RyaW5nKCkucmVwbGFjZSgvRXJyb3IvZywgJycpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZm9ybWF0dGVkU3RhY2s7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFNldCB0aGUgbG9nIHZlcmJvc2l0eSBsZXZlbFxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgU2V0TG9nZ2VyVmVyYm9zaXR5KHZlcmJvc2VMb2dMZXZlbCkge1xyXG4gICAgICAgIGlmICh0aGlzLnZlcmJvc2VMb2dMZXZlbCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMudmVyYm9zZUxvZ0xldmVsID0gdmVyYm9zZUxvZ0xldmVsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVGhlIHN0YW5kYXJkIGxvZ2dpbmcgb3V0cHV0XHJcbiAgICAgKiBAcGFyYW0gc3RhY2sgLSB0aGUgc3RhY2sgdHJhY2VcclxuICAgICAqIEBwYXJhbSBtZXNzYWdlIC0gdGhlIG1lc3NhZ2UgdG8gYmUgbG9nZ2VkXHJcbiAgICAgKiBAcGFyYW0gdmVyYm9zaXR5IC0gdGhlIHZlcmJvc2l0eSBsZXZlbFxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgTG9nKHN0YWNrLCBtZXNzYWdlLCB2ZXJib3NpdHkpIHtcclxuICAgICAgICBpZiAodmVyYm9zaXR5ID4gdGhpcy52ZXJib3NlTG9nTGV2ZWwpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCByZXR1cm5TdHJpbmcgPSBgTGV2ZWw6IExvZ1xcbk1zZzogJHttZXNzYWdlfVxcbkNhbGxlcjogJHtzdGFja31gO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKHJldHVyblN0cmluZyk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFRoZSBzdGFuZGFyZCBsb2dnaW5nIG91dHB1dFxyXG4gICAgICogQHBhcmFtIHN0YWNrIC0gdGhlIHN0YWNrIHRyYWNlXHJcbiAgICAgKiBAcGFyYW0gbWVzc2FnZSAtIHRoZSBtZXNzYWdlIHRvIGJlIGxvZ2dlZFxyXG4gICAgICogQHBhcmFtIHZlcmJvc2l0eSAtIHRoZSB2ZXJib3NpdHkgbGV2ZWxcclxuICAgICAqL1xyXG4gICAgc3RhdGljIEluZm8oc3RhY2ssIG1lc3NhZ2UsIHZlcmJvc2l0eSkge1xyXG4gICAgICAgIGlmICh2ZXJib3NpdHkgPiB0aGlzLnZlcmJvc2VMb2dMZXZlbCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHJldHVyblN0cmluZyA9IGBMZXZlbDogSW5mb1xcbk1zZzogJHttZXNzYWdlfWA7XHJcbiAgICAgICAgY29uc29sZS5pbmZvKHJldHVyblN0cmluZyk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFRoZSBzdGFuZGFyZCBsb2dnaW5nIG91dHB1dFxyXG4gICAgICogQHBhcmFtIHN0YWNrIC0gdGhlIHN0YWNrIHRyYWNlXHJcbiAgICAgKiBAcGFyYW0gbWVzc2FnZSAtIHRoZSBtZXNzYWdlIHRvIGJlIGxvZ2dlZFxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgRXJyb3Ioc3RhY2ssIG1lc3NhZ2UpIHtcclxuICAgICAgICBjb25zdCByZXR1cm5TdHJpbmcgPSBgTGV2ZWw6IEVycm9yXFxuTXNnOiAke21lc3NhZ2V9XFxuQ2FsbGVyOiAke3N0YWNrfWA7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihyZXR1cm5TdHJpbmcpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgc3RhbmRhcmQgbG9nZ2luZyBvdXRwdXRcclxuICAgICAqIEBwYXJhbSBzdGFjayAtIHRoZSBzdGFjayB0cmFjZVxyXG4gICAgICogQHBhcmFtIG1lc3NhZ2UgLSB0aGUgbWVzc2FnZSB0byBiZSBsb2dnZWRcclxuICAgICAqL1xyXG4gICAgc3RhdGljIFdhcm5pbmcoc3RhY2ssIG1lc3NhZ2UpIHtcclxuICAgICAgICBjb25zdCByZXR1cm5TdHJpbmcgPSBgTGV2ZWw6IFdhcm5pbmdcXG5DYWxsZXI6ICR7c3RhY2t9XFxuTXNnOiAke21lc3NhZ2V9YDtcclxuICAgICAgICBjb25zb2xlLndhcm4ocmV0dXJuU3RyaW5nKTtcclxuICAgIH1cclxufVxyXG5Mb2dnZXIudmVyYm9zZUxvZ0xldmVsID0gNTtcclxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL1BlZXJDb25uZWN0aW9uQ29udHJvbGxlci9BZ2dyZWdhdGVkU3RhdHMudHNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9QZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIvQWdncmVnYXRlZFN0YXRzLnRzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiQWdncmVnYXRlZFN0YXRzXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIEFnZ3JlZ2F0ZWRTdGF0cylcbi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9JbmJvdW5kUlRQU3RhdHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vSW5ib3VuZFJUUFN0YXRzICovIFwiLi9zcmMvUGVlckNvbm5lY3Rpb25Db250cm9sbGVyL0luYm91bmRSVFBTdGF0cy50c1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfRGF0YUNoYW5uZWxTdGF0c19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9EYXRhQ2hhbm5lbFN0YXRzICovIFwiLi9zcmMvUGVlckNvbm5lY3Rpb25Db250cm9sbGVyL0RhdGFDaGFubmVsU3RhdHMudHNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX0NhbmRpZGF0ZVN0YXRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzdfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vQ2FuZGlkYXRlU3RhdCAqLyBcIi4vc3JjL1BlZXJDb25uZWN0aW9uQ29udHJvbGxlci9DYW5kaWRhdGVTdGF0LnRzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9DYW5kaWRhdGVQYWlyU3RhdHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vQ2FuZGlkYXRlUGFpclN0YXRzICovIFwiLi9zcmMvUGVlckNvbm5lY3Rpb25Db250cm9sbGVyL0NhbmRpZGF0ZVBhaXJTdGF0cy50c1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfT3V0Qm91bmRSVFBTdGF0c19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9PdXRCb3VuZFJUUFN0YXRzICovIFwiLi9zcmMvUGVlckNvbm5lY3Rpb25Db250cm9sbGVyL091dEJvdW5kUlRQU3RhdHMudHNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX1Nlc3Npb25TdGF0c19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9TZXNzaW9uU3RhdHMgKi8gXCIuL3NyYy9QZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIvU2Vzc2lvblN0YXRzLnRzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9TdHJlYW1TdGF0c19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9TdHJlYW1TdGF0cyAqLyBcIi4vc3JjL1BlZXJDb25uZWN0aW9uQ29udHJvbGxlci9TdHJlYW1TdGF0cy50c1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vTG9nZ2VyL0xvZ2dlciAqLyBcIi4vc3JjL0xvZ2dlci9Mb2dnZXIudHNcIik7XG4vLyBDb3B5cmlnaHQgRXBpYyBHYW1lcywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbmNsYXNzIEFnZ3JlZ2F0ZWRTdGF0cyB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLmluYm91bmRWaWRlb1N0YXRzID0gbmV3IF9JbmJvdW5kUlRQU3RhdHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5JbmJvdW5kVmlkZW9TdGF0cygpO1xyXG4gICAgICAgIHRoaXMuaW5ib3VuZEF1ZGlvU3RhdHMgPSBuZXcgX0luYm91bmRSVFBTdGF0c19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkluYm91bmRBdWRpb1N0YXRzKCk7XHJcbiAgICAgICAgdGhpcy5jYW5kaWRhdGVQYWlyID0gbmV3IF9DYW5kaWRhdGVQYWlyU3RhdHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5DYW5kaWRhdGVQYWlyU3RhdHMoKTtcclxuICAgICAgICB0aGlzLkRhdGFDaGFubmVsU3RhdHMgPSBuZXcgX0RhdGFDaGFubmVsU3RhdHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5EYXRhQ2hhbm5lbFN0YXRzKCk7XHJcbiAgICAgICAgdGhpcy5vdXRCb3VuZFZpZGVvU3RhdHMgPSBuZXcgX091dEJvdW5kUlRQU3RhdHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXy5PdXRCb3VuZFZpZGVvU3RhdHMoKTtcclxuICAgICAgICB0aGlzLnNlc3Npb25TdGF0cyA9IG5ldyBfU2Vzc2lvblN0YXRzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18uU2Vzc2lvblN0YXRzKCk7XHJcbiAgICAgICAgdGhpcy5zdHJlYW1TdGF0cyA9IG5ldyBfU3RyZWFtU3RhdHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfXy5TdHJlYW1TdGF0cygpO1xyXG4gICAgICAgIHRoaXMuY29kZWNzID0gbmV3IE1hcCgpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBHYXRoZXIgYWxsIHRoZSBpbmZvcm1hdGlvbiBmcm9tIHRoZSBSVEMgUGVlciBDb25uZWN0aW9uIFJlcG9ydFxyXG4gICAgICogQHBhcmFtIHJ0Y1N0YXRzUmVwb3J0IC0gUlRDIFN0YXRzIFJlcG9ydFxyXG4gICAgICovXHJcbiAgICBwcm9jZXNzU3RhdHMocnRjU3RhdHNSZXBvcnQpIHtcclxuICAgICAgICB0aGlzLmxvY2FsQ2FuZGlkYXRlcyA9IG5ldyBBcnJheSgpO1xyXG4gICAgICAgIHRoaXMucmVtb3RlQ2FuZGlkYXRlcyA9IG5ldyBBcnJheSgpO1xyXG4gICAgICAgIHJ0Y1N0YXRzUmVwb3J0LmZvckVhY2goKHN0YXQpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgdHlwZSA9IHN0YXQudHlwZTtcclxuICAgICAgICAgICAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdjYW5kaWRhdGUtcGFpcic6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVDYW5kaWRhdGVQYWlyKHN0YXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnY2VydGlmaWNhdGUnOlxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnY29kZWMnOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlQ29kZWMoc3RhdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdkYXRhLWNoYW5uZWwnOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlRGF0YUNoYW5uZWwoc3RhdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdpbmJvdW5kLXJ0cCc6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVJbkJvdW5kUlRQKHN0YXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnbG9jYWwtY2FuZGlkYXRlJzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZUxvY2FsQ2FuZGlkYXRlKHN0YXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnbWVkaWEtc291cmNlJzpcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ21lZGlhLXBsYXlvdXQnOlxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnb3V0Ym91bmQtcnRwJzpcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3BlZXItY29ubmVjdGlvbic6XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdyZW1vdGUtY2FuZGlkYXRlJzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZVJlbW90ZUNhbmRpZGF0ZShzdGF0KTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3JlbW90ZS1pbmJvdW5kLXJ0cCc6XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdyZW1vdGUtb3V0Ym91bmQtcnRwJzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZVJlbW90ZU91dEJvdW5kKHN0YXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAndHJhY2snOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlVHJhY2soc3RhdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICd0cmFuc3BvcnQnOlxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnc3RyZWFtJzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZVN0cmVhbShzdGF0KTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfXy5Mb2dnZXIuRXJyb3IoX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAndW5oYW5kbGVkIFN0YXQgVHlwZScpO1xyXG4gICAgICAgICAgICAgICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNl9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksIHN0YXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFByb2Nlc3Mgc3RyZWFtIHN0YXRzIGRhdGEgZnJvbSB3ZWJydGNcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gc3RhdCAtIHRoZSBzdGF0cyBjb21pbmcgaW4gZnJvbSB3ZWJydGNcclxuICAgICAqL1xyXG4gICAgaGFuZGxlU3RyZWFtKHN0YXQpIHtcclxuICAgICAgICB0aGlzLnN0cmVhbVN0YXRzID0gc3RhdDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUHJvY2VzcyB0aGUgSWNlIENhbmRpZGF0ZSBQYWlyIERhdGFcclxuICAgICAqIEBwYXJhbSBzdGF0IC0gdGhlIHN0YXRzIGNvbWluZyBpbiBmcm9tIGljZSBjYW5kaWRhdGVzXHJcbiAgICAgKi9cclxuICAgIGhhbmRsZUNhbmRpZGF0ZVBhaXIoc3RhdCkge1xyXG4gICAgICAgIHRoaXMuY2FuZGlkYXRlUGFpci5ieXRlc1JlY2VpdmVkID0gc3RhdC5ieXRlc1JlY2VpdmVkO1xyXG4gICAgICAgIHRoaXMuY2FuZGlkYXRlUGFpci5ieXRlc1NlbnQgPSBzdGF0LmJ5dGVzU2VudDtcclxuICAgICAgICB0aGlzLmNhbmRpZGF0ZVBhaXIubG9jYWxDYW5kaWRhdGVJZCA9IHN0YXQubG9jYWxDYW5kaWRhdGVJZDtcclxuICAgICAgICB0aGlzLmNhbmRpZGF0ZVBhaXIucmVtb3RlQ2FuZGlkYXRlSWQgPSBzdGF0LnJlbW90ZUNhbmRpZGF0ZUlkO1xyXG4gICAgICAgIHRoaXMuY2FuZGlkYXRlUGFpci5ub21pbmF0ZWQgPSBzdGF0Lm5vbWluYXRlZDtcclxuICAgICAgICB0aGlzLmNhbmRpZGF0ZVBhaXIucmVhZGFibGUgPSBzdGF0LnJlYWRhYmxlO1xyXG4gICAgICAgIHRoaXMuY2FuZGlkYXRlUGFpci5zZWxlY3RlZCA9IHN0YXQuc2VsZWN0ZWQ7XHJcbiAgICAgICAgdGhpcy5jYW5kaWRhdGVQYWlyLndyaXRhYmxlID0gc3RhdC53cml0YWJsZTtcclxuICAgICAgICB0aGlzLmNhbmRpZGF0ZVBhaXIuc3RhdGUgPSBzdGF0LnN0YXRlO1xyXG4gICAgICAgIHRoaXMuY2FuZGlkYXRlUGFpci5jdXJyZW50Um91bmRUcmlwVGltZSA9IHN0YXQuY3VycmVudFJvdW5kVHJpcFRpbWU7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFByb2Nlc3MgdGhlIERhdGEgQ2hhbm5lbCBEYXRhXHJcbiAgICAgKiBAcGFyYW0gc3RhdCAtIHRoZSBzdGF0cyBjb21pbmcgaW4gZnJvbSB0aGUgZGF0YSBjaGFubmVsXHJcbiAgICAgKi9cclxuICAgIGhhbmRsZURhdGFDaGFubmVsKHN0YXQpIHtcclxuICAgICAgICB0aGlzLkRhdGFDaGFubmVsU3RhdHMuYnl0ZXNSZWNlaXZlZCA9IHN0YXQuYnl0ZXNSZWNlaXZlZDtcclxuICAgICAgICB0aGlzLkRhdGFDaGFubmVsU3RhdHMuYnl0ZXNTZW50ID0gc3RhdC5ieXRlc1NlbnQ7XHJcbiAgICAgICAgdGhpcy5EYXRhQ2hhbm5lbFN0YXRzLmRhdGFDaGFubmVsSWRlbnRpZmllciA9XHJcbiAgICAgICAgICAgIHN0YXQuZGF0YUNoYW5uZWxJZGVudGlmaWVyO1xyXG4gICAgICAgIHRoaXMuRGF0YUNoYW5uZWxTdGF0cy5pZCA9IHN0YXQuaWQ7XHJcbiAgICAgICAgdGhpcy5EYXRhQ2hhbm5lbFN0YXRzLmxhYmVsID0gc3RhdC5sYWJlbDtcclxuICAgICAgICB0aGlzLkRhdGFDaGFubmVsU3RhdHMubWVzc2FnZXNSZWNlaXZlZCA9IHN0YXQubWVzc2FnZXNSZWNlaXZlZDtcclxuICAgICAgICB0aGlzLkRhdGFDaGFubmVsU3RhdHMubWVzc2FnZXNTZW50ID0gc3RhdC5tZXNzYWdlc1NlbnQ7XHJcbiAgICAgICAgdGhpcy5EYXRhQ2hhbm5lbFN0YXRzLnByb3RvY29sID0gc3RhdC5wcm90b2NvbDtcclxuICAgICAgICB0aGlzLkRhdGFDaGFubmVsU3RhdHMuc3RhdGUgPSBzdGF0LnN0YXRlO1xyXG4gICAgICAgIHRoaXMuRGF0YUNoYW5uZWxTdGF0cy50aW1lc3RhbXAgPSBzdGF0LnRpbWVzdGFtcDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUHJvY2VzcyB0aGUgTG9jYWwgSWNlIENhbmRpZGF0ZSBEYXRhXHJcbiAgICAgKiBAcGFyYW0gc3RhdCAtIGxvY2FsIHN0YXRzXHJcbiAgICAgKi9cclxuICAgIGhhbmRsZUxvY2FsQ2FuZGlkYXRlKHN0YXQpIHtcclxuICAgICAgICBjb25zdCBsb2NhbENhbmRpZGF0ZSA9IG5ldyBfQ2FuZGlkYXRlU3RhdF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfN19fLkNhbmRpZGF0ZVN0YXQoKTtcclxuICAgICAgICBsb2NhbENhbmRpZGF0ZS5sYWJlbCA9ICdsb2NhbC1jYW5kaWRhdGUnO1xyXG4gICAgICAgIGxvY2FsQ2FuZGlkYXRlLmFkZHJlc3MgPSBzdGF0LmFkZHJlc3M7XHJcbiAgICAgICAgbG9jYWxDYW5kaWRhdGUucG9ydCA9IHN0YXQucG9ydDtcclxuICAgICAgICBsb2NhbENhbmRpZGF0ZS5wcm90b2NvbCA9IHN0YXQucHJvdG9jb2w7XHJcbiAgICAgICAgbG9jYWxDYW5kaWRhdGUuY2FuZGlkYXRlVHlwZSA9IHN0YXQuY2FuZGlkYXRlVHlwZTtcclxuICAgICAgICBsb2NhbENhbmRpZGF0ZS5pZCA9IHN0YXQuaWQ7XHJcbiAgICAgICAgdGhpcy5sb2NhbENhbmRpZGF0ZXMucHVzaChsb2NhbENhbmRpZGF0ZSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFByb2Nlc3MgdGhlIFJlbW90ZSBJY2UgQ2FuZGlkYXRlIERhdGFcclxuICAgICAqIEBwYXJhbSBzdGF0IC0gaWNlIGNhbmRpZGF0ZSBzdGF0c1xyXG4gICAgICovXHJcbiAgICBoYW5kbGVSZW1vdGVDYW5kaWRhdGUoc3RhdCkge1xyXG4gICAgICAgIGNvbnN0IFJlbW90ZUNhbmRpZGF0ZSA9IG5ldyBfQ2FuZGlkYXRlU3RhdF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfN19fLkNhbmRpZGF0ZVN0YXQoKTtcclxuICAgICAgICBSZW1vdGVDYW5kaWRhdGUubGFiZWwgPSAnbG9jYWwtY2FuZGlkYXRlJztcclxuICAgICAgICBSZW1vdGVDYW5kaWRhdGUuYWRkcmVzcyA9IHN0YXQuYWRkcmVzcztcclxuICAgICAgICBSZW1vdGVDYW5kaWRhdGUucG9ydCA9IHN0YXQucG9ydDtcclxuICAgICAgICBSZW1vdGVDYW5kaWRhdGUucHJvdG9jb2wgPSBzdGF0LnByb3RvY29sO1xyXG4gICAgICAgIFJlbW90ZUNhbmRpZGF0ZS5pZCA9IHN0YXQuaWQ7XHJcbiAgICAgICAgUmVtb3RlQ2FuZGlkYXRlLmNhbmRpZGF0ZVR5cGUgPSBzdGF0LmNhbmRpZGF0ZVR5cGU7XHJcbiAgICAgICAgdGhpcy5yZW1vdGVDYW5kaWRhdGVzLnB1c2goUmVtb3RlQ2FuZGlkYXRlKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUHJvY2VzcyB0aGUgSW5ib3VuZCBSVFAgQXVkaW8gYW5kIFZpZGVvIERhdGFcclxuICAgICAqIEBwYXJhbSBzdGF0IC0gaW5ib3VuZCBydHAgc3RhdHNcclxuICAgICAqL1xyXG4gICAgaGFuZGxlSW5Cb3VuZFJUUChzdGF0KSB7XHJcbiAgICAgICAgc3dpdGNoIChzdGF0LmtpbmQpIHtcclxuICAgICAgICAgICAgY2FzZSAndmlkZW8nOlxyXG4gICAgICAgICAgICAgICAgLy8gTmVlZCB0byBjb252ZXJ0IHRvIHVua25vd24gZmlyc3QgdG8gcmVtb3ZlIGFuIGVycm9yIGFyb3VuZFxyXG4gICAgICAgICAgICAgICAgLy8gSW5ib3VuZFZpZGVvU3RhdHMgaGF2aW5nIHRoZSBiaXRyYXRlIG1lbWJlciB3aGljaCBpc24ndCBmb3VuZCBvblxyXG4gICAgICAgICAgICAgICAgLy8gdGhlIEluYm91bmRSVFBTdGF0c1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pbmJvdW5kVmlkZW9TdGF0cyA9IHN0YXQ7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5sYXN0VmlkZW9TdGF0cyAhPSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmluYm91bmRWaWRlb1N0YXRzLmJpdHJhdGUgPVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAoOCAqXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcy5pbmJvdW5kVmlkZW9TdGF0cy5ieXRlc1JlY2VpdmVkIC1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxhc3RWaWRlb1N0YXRzLmJ5dGVzUmVjZWl2ZWQpKSAvXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcy5pbmJvdW5kVmlkZW9TdGF0cy50aW1lc3RhbXAgLVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubGFzdFZpZGVvU3RhdHMudGltZXN0YW1wKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmluYm91bmRWaWRlb1N0YXRzLmJpdHJhdGUgPSBNYXRoLmZsb29yKHRoaXMuaW5ib3VuZFZpZGVvU3RhdHMuYml0cmF0ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxhc3RWaWRlb1N0YXRzID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5pbmJvdW5kVmlkZW9TdGF0cyk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnYXVkaW8nOlxyXG4gICAgICAgICAgICAgICAgLy8gTmVlZCB0byBjb252ZXJ0IHRvIHVua25vd24gZmlyc3QgdG8gcmVtb3ZlIGFuIGVycm9yIGFyb3VuZFxyXG4gICAgICAgICAgICAgICAgLy8gSW5ib3VuZEF1ZGlvU3RhdHMgaGF2aW5nIHRoZSBiaXRyYXRlIG1lbWJlciB3aGljaCBpc24ndCBmb3VuZCBvblxyXG4gICAgICAgICAgICAgICAgLy8gdGhlIEluYm91bmRSVFBTdGF0c1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pbmJvdW5kQXVkaW9TdGF0cyA9IHN0YXQ7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5sYXN0QXVkaW9TdGF0cyAhPSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmluYm91bmRBdWRpb1N0YXRzLmJpdHJhdGUgPVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAoOCAqXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcy5pbmJvdW5kQXVkaW9TdGF0cy5ieXRlc1JlY2VpdmVkIC1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxhc3RBdWRpb1N0YXRzLmJ5dGVzUmVjZWl2ZWQpKSAvXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcy5pbmJvdW5kQXVkaW9TdGF0cy50aW1lc3RhbXAgLVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubGFzdEF1ZGlvU3RhdHMudGltZXN0YW1wKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmluYm91bmRBdWRpb1N0YXRzLmJpdHJhdGUgPSBNYXRoLmZsb29yKHRoaXMuaW5ib3VuZEF1ZGlvU3RhdHMuYml0cmF0ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxhc3RBdWRpb1N0YXRzID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5pbmJvdW5kQXVkaW9TdGF0cyk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNl9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksICdLaW5kIGlzIG5vdCBoYW5kbGVkJyk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFByb2Nlc3MgdGhlIG91dGJvdW5kIFJUUCBBdWRpbyBhbmQgVmlkZW8gRGF0YVxyXG4gICAgICogQHBhcmFtIHN0YXQgLSByZW1vdGUgb3V0Ym91bmQgc3RhdHNcclxuICAgICAqL1xyXG4gICAgaGFuZGxlUmVtb3RlT3V0Qm91bmQoc3RhdCkge1xyXG4gICAgICAgIHN3aXRjaCAoc3RhdC5raW5kKSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ3ZpZGVvJzpcclxuICAgICAgICAgICAgICAgIHRoaXMub3V0Qm91bmRWaWRlb1N0YXRzLmJ5dGVzU2VudCA9IHN0YXQuYnl0ZXNTZW50O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vdXRCb3VuZFZpZGVvU3RhdHMuaWQgPSBzdGF0LmlkO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vdXRCb3VuZFZpZGVvU3RhdHMubG9jYWxJZCA9IHN0YXQubG9jYWxJZDtcclxuICAgICAgICAgICAgICAgIHRoaXMub3V0Qm91bmRWaWRlb1N0YXRzLnBhY2tldHNTZW50ID0gc3RhdC5wYWNrZXRzU2VudDtcclxuICAgICAgICAgICAgICAgIHRoaXMub3V0Qm91bmRWaWRlb1N0YXRzLnJlbW90ZVRpbWVzdGFtcCA9IHN0YXQucmVtb3RlVGltZXN0YW1wO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vdXRCb3VuZFZpZGVvU3RhdHMudGltZXN0YW1wID0gc3RhdC50aW1lc3RhbXA7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnYXVkaW8nOlxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFByb2Nlc3MgdGhlIEluYm91bmQgVmlkZW8gVHJhY2sgRGF0YVxyXG4gICAgICogQHBhcmFtIHN0YXQgLSB2aWRlbyB0cmFjayBzdGF0c1xyXG4gICAgICovXHJcbiAgICBoYW5kbGVUcmFjayhzdGF0KSB7XHJcbiAgICAgICAgLy8gd2Ugb25seSB3YW50IHRvIGV4dHJhY3Qgc3RhdHMgZnJvbSB0aGUgdmlkZW8gdHJhY2tcclxuICAgICAgICBpZiAoc3RhdC50eXBlID09PSAndHJhY2snICYmXHJcbiAgICAgICAgICAgIChzdGF0LnRyYWNrSWRlbnRpZmllciA9PT0gJ3ZpZGVvX2xhYmVsJyB8fCBzdGF0LmtpbmQgPT09ICd2aWRlbycpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaW5ib3VuZFZpZGVvU3RhdHMuZnJhbWVzRHJvcHBlZCA9IHN0YXQuZnJhbWVzRHJvcHBlZDtcclxuICAgICAgICAgICAgdGhpcy5pbmJvdW5kVmlkZW9TdGF0cy5mcmFtZXNSZWNlaXZlZCA9IHN0YXQuZnJhbWVzUmVjZWl2ZWQ7XHJcbiAgICAgICAgICAgIHRoaXMuaW5ib3VuZFZpZGVvU3RhdHMuZnJhbWVIZWlnaHQgPSBzdGF0LmZyYW1lSGVpZ2h0O1xyXG4gICAgICAgICAgICB0aGlzLmluYm91bmRWaWRlb1N0YXRzLmZyYW1lV2lkdGggPSBzdGF0LmZyYW1lV2lkdGg7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaGFuZGxlQ29kZWMoc3RhdCkge1xyXG4gICAgICAgIGNvbnN0IGNvZGVjSWQgPSBzdGF0LmlkO1xyXG4gICAgICAgIGNvbnN0IGNvZGVjVHlwZSA9IGAke3N0YXQubWltZVR5cGVcclxuICAgICAgICAgICAgLnJlcGxhY2UoJ3ZpZGVvLycsICcnKVxyXG4gICAgICAgICAgICAucmVwbGFjZSgnYXVkaW8vJywgJycpfSR7c3RhdC5zZHBGbXRwTGluZSA/IGAgJHtzdGF0LnNkcEZtdHBMaW5lfWAgOiAnJ31gO1xyXG4gICAgICAgIHRoaXMuY29kZWNzLnNldChjb2RlY0lkLCBjb2RlY1R5cGUpO1xyXG4gICAgfVxyXG4gICAgaGFuZGxlU2Vzc2lvblN0YXRpc3RpY3ModmlkZW9TdGFydFRpbWUsIGlucHV0Q29udHJvbGxlciwgdmlkZW9FbmNvZGVyQXZnUVApIHtcclxuICAgICAgICBjb25zdCBkZWx0YVRpbWUgPSBEYXRlLm5vdygpIC0gdmlkZW9TdGFydFRpbWU7XHJcbiAgICAgICAgdGhpcy5zZXNzaW9uU3RhdHMucnVuVGltZSA9IG5ldyBEYXRlKGRlbHRhVGltZSlcclxuICAgICAgICAgICAgLnRvSVNPU3RyaW5nKClcclxuICAgICAgICAgICAgLnN1YnN0cigxMSwgOClcclxuICAgICAgICAgICAgLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgY29uc3QgY29udHJvbHNTdHJlYW1JbnB1dCA9IGlucHV0Q29udHJvbGxlciA9PT0gbnVsbFxyXG4gICAgICAgICAgICA/ICdOb3Qgc2VudCB5ZXQnXHJcbiAgICAgICAgICAgIDogaW5wdXRDb250cm9sbGVyXHJcbiAgICAgICAgICAgICAgICA/ICd0cnVlJ1xyXG4gICAgICAgICAgICAgICAgOiAnZmFsc2UnO1xyXG4gICAgICAgIHRoaXMuc2Vzc2lvblN0YXRzLmNvbnRyb2xzU3RyZWFtSW5wdXQgPSBjb250cm9sc1N0cmVhbUlucHV0O1xyXG4gICAgICAgIHRoaXMuc2Vzc2lvblN0YXRzLnZpZGVvRW5jb2RlckF2Z1FQID0gdmlkZW9FbmNvZGVyQXZnUVA7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENoZWNrIGlmIGEgdmFsdWUgY29taW5nIGluIGZyb20gb3VyIHN0YXRzIGlzIGFjdHVhbGx5IGEgbnVtYmVyXHJcbiAgICAgKiBAcGFyYW0gdmFsdWUgLSB0aGUgbnVtYmVyIHRvIGJlIGNoZWNrZWRcclxuICAgICAqL1xyXG4gICAgaXNOdW1iZXIodmFsdWUpIHtcclxuICAgICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJiBpc0Zpbml0ZSh2YWx1ZSk7XHJcbiAgICB9XHJcbn1cclxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL1BlZXJDb25uZWN0aW9uQ29udHJvbGxlci9DYW5kaWRhdGVQYWlyU3RhdHMudHNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9QZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIvQ2FuZGlkYXRlUGFpclN0YXRzLnRzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiQ2FuZGlkYXRlUGFpclN0YXRzXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIENhbmRpZGF0ZVBhaXJTdGF0cylcbi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pO1xuLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuLyoqXHJcbiAqIElDRSBDYW5kaWRhdGUgUGFpciBTdGF0cyBjb2xsZWN0ZWQgZnJvbSB0aGUgUlRDIFN0YXRzIFJlcG9ydFxyXG4gKi9cclxuY2xhc3MgQ2FuZGlkYXRlUGFpclN0YXRzIHtcclxufVxyXG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvUGVlckNvbm5lY3Rpb25Db250cm9sbGVyL0NhbmRpZGF0ZVN0YXQudHNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvUGVlckNvbm5lY3Rpb25Db250cm9sbGVyL0NhbmRpZGF0ZVN0YXQudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiQ2FuZGlkYXRlU3RhdFwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBDYW5kaWRhdGVTdGF0KVxuLyogaGFybW9ueSBleHBvcnQgKi8gfSk7XG4vLyBDb3B5cmlnaHQgRXBpYyBHYW1lcywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG4vKipcclxuICogSUNFIENhbmRpZGF0ZSBTdGF0IGNvbGxlY3RlZCBmcm9tIHRoZSBSVEMgU3RhdHMgUmVwb3J0XHJcbiAqL1xyXG5jbGFzcyBDYW5kaWRhdGVTdGF0IHtcclxufVxyXG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvUGVlckNvbm5lY3Rpb25Db250cm9sbGVyL0RhdGFDaGFubmVsU3RhdHMudHNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvUGVlckNvbm5lY3Rpb25Db250cm9sbGVyL0RhdGFDaGFubmVsU3RhdHMudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiRGF0YUNoYW5uZWxTdGF0c1wiOiAoKSA9PiAoLyogYmluZGluZyAqLyBEYXRhQ2hhbm5lbFN0YXRzKVxuLyogaGFybW9ueSBleHBvcnQgKi8gfSk7XG4vLyBDb3B5cmlnaHQgRXBpYyBHYW1lcywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG4vKipcclxuICogRGF0YSBDaGFubmVsIFN0YXRzIGNvbGxlY3RlZCBmcm9tIHRoZSBSVEMgU3RhdHMgUmVwb3J0XHJcbiAqL1xyXG5jbGFzcyBEYXRhQ2hhbm5lbFN0YXRzIHtcclxufVxyXG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvUGVlckNvbm5lY3Rpb25Db250cm9sbGVyL0luYm91bmRSVFBTdGF0cy50c1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL1BlZXJDb25uZWN0aW9uQ29udHJvbGxlci9JbmJvdW5kUlRQU3RhdHMudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJJbmJvdW5kQXVkaW9TdGF0c1wiOiAoKSA9PiAoLyogYmluZGluZyAqLyBJbmJvdW5kQXVkaW9TdGF0cyksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiSW5ib3VuZFJUUFN0YXRzXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIEluYm91bmRSVFBTdGF0cyksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiSW5ib3VuZFZpZGVvU3RhdHNcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gSW5ib3VuZFZpZGVvU3RhdHMpXG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcbi8vIENvcHlyaWdodCBFcGljIEdhbWVzLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcbi8qKlxyXG4gKiBJbmJvdW5kIEF1ZGlvIFN0YXRzIGNvbGxlY3RlZCBmcm9tIHRoZSBSVEMgU3RhdHMgUmVwb3J0XHJcbiAqL1xyXG5jbGFzcyBJbmJvdW5kQXVkaW9TdGF0cyB7XHJcbn1cclxuLyoqXHJcbiAqIEluYm91bmQgVmlkZW8gU3RhdHMgY29sbGVjdGVkIGZyb20gdGhlIFJUQyBTdGF0cyBSZXBvcnRcclxuICovXHJcbmNsYXNzIEluYm91bmRWaWRlb1N0YXRzIHtcclxufVxyXG4vKipcclxuICogSW5ib3VuZCBTdGF0cyBjb2xsZWN0ZWQgZnJvbSB0aGUgUlRDIFN0YXRzIFJlcG9ydFxyXG4gKi9cclxuY2xhc3MgSW5ib3VuZFJUUFN0YXRzIHtcclxufVxyXG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvUGVlckNvbm5lY3Rpb25Db250cm9sbGVyL091dEJvdW5kUlRQU3RhdHMudHNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvUGVlckNvbm5lY3Rpb25Db250cm9sbGVyL091dEJvdW5kUlRQU3RhdHMudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiT3V0Qm91bmRSVFBTdGF0c1wiOiAoKSA9PiAoLyogYmluZGluZyAqLyBPdXRCb3VuZFJUUFN0YXRzKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJPdXRCb3VuZFZpZGVvU3RhdHNcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gT3V0Qm91bmRWaWRlb1N0YXRzKVxuLyogaGFybW9ueSBleHBvcnQgKi8gfSk7XG4vLyBDb3B5cmlnaHQgRXBpYyBHYW1lcywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG4vKipcclxuICogT3V0Ym91bmQgVmlkZW8gU3RhdHMgY29sbGVjdGVkIGZyb20gdGhlIFJUQyBTdGF0cyBSZXBvcnRcclxuICovXHJcbmNsYXNzIE91dEJvdW5kVmlkZW9TdGF0cyB7XHJcbn1cclxuLyoqXHJcbiAqIE91dGJvdW5kIFN0YXRzIGNvbGxlY3RlZCBmcm9tIHRoZSBSVEMgU3RhdHMgUmVwb3J0XHJcbiAqL1xyXG5jbGFzcyBPdXRCb3VuZFJUUFN0YXRzIHtcclxufVxyXG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvUGVlckNvbm5lY3Rpb25Db250cm9sbGVyL1BlZXJDb25uZWN0aW9uQ29udHJvbGxlci50c1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL1BlZXJDb25uZWN0aW9uQ29udHJvbGxlci9QZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJQZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXJcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gUGVlckNvbm5lY3Rpb25Db250cm9sbGVyKVxuLyogaGFybW9ueSBleHBvcnQgKi8gfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL0xvZ2dlci9Mb2dnZXIgKi8gXCIuL3NyYy9Mb2dnZXIvTG9nZ2VyLnRzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9Db25maWcvQ29uZmlnICovIFwiLi9zcmMvQ29uZmlnL0NvbmZpZy50c1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfQWdncmVnYXRlZFN0YXRzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL0FnZ3JlZ2F0ZWRTdGF0cyAqLyBcIi4vc3JjL1BlZXJDb25uZWN0aW9uQ29udHJvbGxlci9BZ2dyZWdhdGVkU3RhdHMudHNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgc2RwX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBzZHAgKi8gXCJzZHBcIik7XG4vLyBDb3B5cmlnaHQgRXBpYyBHYW1lcywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG52YXIgX19hd2FpdGVyID0gKHVuZGVmaW5lZCAmJiB1bmRlZmluZWQuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59O1xyXG5cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIEhhbmRsZXMgdGhlIFBlZXIgQ29ubmVjdGlvblxyXG4gKi9cclxuY2xhc3MgUGVlckNvbm5lY3Rpb25Db250cm9sbGVyIHtcclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlIGEgbmV3IFJUQyBQZWVyIENvbm5lY3Rpb24gY2xpZW50XHJcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIFBlZXIgY29ubmVjdGlvbiBPcHRpb25zXHJcbiAgICAgKiBAcGFyYW0gY29uZmlnIC0gVGhlIGNvbmZpZyBmb3Igb3VyIFBTIGV4cGVyaWVuY2UuXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMsIGNvbmZpZywgcHJlZmVycmVkQ29kZWMpIHtcclxuICAgICAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZztcclxuICAgICAgICB0aGlzLmNyZWF0ZVBlZXJDb25uZWN0aW9uKG9wdGlvbnMsIHByZWZlcnJlZENvZGVjKTtcclxuICAgIH1cclxuICAgIGNyZWF0ZVBlZXJDb25uZWN0aW9uKG9wdGlvbnMsIHByZWZlcnJlZENvZGVjKSB7XHJcbiAgICAgICAgLy8gU2V0IHRoZSBJQ0UgdHJhbnNwb3J0IHRvIHJlbGF5IGlmIFRVUk4gZW5hYmxlZFxyXG4gICAgICAgIGlmICh0aGlzLmNvbmZpZy5pc0ZsYWdFbmFibGVkKF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uRmxhZ3MuRm9yY2VUVVJOKSkge1xyXG4gICAgICAgICAgICBvcHRpb25zLmljZVRyYW5zcG9ydFBvbGljeSA9ICdyZWxheSc7XHJcbiAgICAgICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksICdGb3JjaW5nIFRVUk4gdXNhZ2UgYnkgc2V0dGluZyBJQ0UgVHJhbnNwb3J0IFBvbGljeSBpbiBwZWVyIGNvbm5lY3Rpb24gY29uZmlnLicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBidWlsZCBhIG5ldyBwZWVyIGNvbm5lY3Rpb24gd2l0aCB0aGUgb3B0aW9uc1xyXG4gICAgICAgIHRoaXMucGVlckNvbm5lY3Rpb24gPSBuZXcgUlRDUGVlckNvbm5lY3Rpb24ob3B0aW9ucyk7XHJcbiAgICAgICAgdGhpcy5wZWVyQ29ubmVjdGlvbi5vbnNpZ25hbGluZ3N0YXRlY2hhbmdlID0gKGV2KSA9PiB0aGlzLmhhbmRsZVNpZ25hbFN0YXRlQ2hhbmdlKGV2KTtcclxuICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uLm9uaWNlY29ubmVjdGlvbnN0YXRlY2hhbmdlID0gKGV2KSA9PiB0aGlzLmhhbmRsZUljZUNvbm5lY3Rpb25TdGF0ZUNoYW5nZShldik7XHJcbiAgICAgICAgdGhpcy5wZWVyQ29ubmVjdGlvbi5vbmljZWdhdGhlcmluZ3N0YXRlY2hhbmdlID0gKGV2KSA9PiB0aGlzLmhhbmRsZUljZUdhdGhlcmluZ1N0YXRlQ2hhbmdlKGV2KTtcclxuICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uLm9udHJhY2sgPSAoZXYpID0+IHRoaXMuaGFuZGxlT25UcmFjayhldik7XHJcbiAgICAgICAgdGhpcy5wZWVyQ29ubmVjdGlvbi5vbmljZWNhbmRpZGF0ZSA9IChldikgPT4gdGhpcy5oYW5kbGVJY2VDYW5kaWRhdGUoZXYpO1xyXG4gICAgICAgIHRoaXMucGVlckNvbm5lY3Rpb24ub25kYXRhY2hhbm5lbCA9IChldikgPT4gdGhpcy5oYW5kbGVEYXRhQ2hhbm5lbChldik7XHJcbiAgICAgICAgdGhpcy5hZ2dyZWdhdGVkU3RhdHMgPSBuZXcgX0FnZ3JlZ2F0ZWRTdGF0c19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fLkFnZ3JlZ2F0ZWRTdGF0cygpO1xyXG4gICAgICAgIHRoaXMucHJlZmVycmVkQ29kZWMgPSBwcmVmZXJyZWRDb2RlYztcclxuICAgICAgICB0aGlzLnVwZGF0ZUNvZGVjU2VsZWN0aW9uID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlIGFuIG9mZmVyIGZvciB0aGUgV2ViIFJUQyBoYW5kc2hha2UgYW5kIHNlbmQgdGhlIG9mZmVyIHRvIHRoZSBzaWduYWxpbmcgc2VydmVyIHZpYSB3ZWJzb2NrZXRcclxuICAgICAqIEBwYXJhbSBvZmZlck9wdGlvbnMgLSBSVEMgT2ZmZXIgT3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBjcmVhdGVPZmZlcihvZmZlck9wdGlvbnMsIGNvbmZpZykge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XHJcbiAgICAgICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksICdDcmVhdGUgT2ZmZXInLCA2KTtcclxuICAgICAgICAgICAgY29uc3QgaXNMb2NhbGhvc3RDb25uZWN0aW9uID0gbG9jYXRpb24uaG9zdG5hbWUgPT09ICdsb2NhbGhvc3QnIHx8XHJcbiAgICAgICAgICAgICAgICBsb2NhdGlvbi5ob3N0bmFtZSA9PT0gJzEyNy4wLjAuMSc7XHJcbiAgICAgICAgICAgIGNvbnN0IGlzSHR0cHNDb25uZWN0aW9uID0gbG9jYXRpb24ucHJvdG9jb2wgPT09ICdodHRwczonO1xyXG4gICAgICAgICAgICBsZXQgdXNlTWljID0gY29uZmlnLmlzRmxhZ0VuYWJsZWQoX0NvbmZpZ19Db25maWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5GbGFncy5Vc2VNaWMpO1xyXG4gICAgICAgICAgICBpZiAodXNlTWljICYmICEoaXNMb2NhbGhvc3RDb25uZWN0aW9uIHx8IGlzSHR0cHNDb25uZWN0aW9uKSkge1xyXG4gICAgICAgICAgICAgICAgdXNlTWljID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLkxvZ2dlci5FcnJvcihfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksICdNaWNyb3Bob25lIGFjY2VzcyBpbiB0aGUgYnJvd3NlciB3aWxsIG5vdCB3b3JrIGlmIHlvdSBhcmUgbm90IG9uIEhUVFBTIG9yIGxvY2FsaG9zdC4gRGlzYWJsaW5nIG1pYyBhY2Nlc3MuJyk7XHJcbiAgICAgICAgICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLkxvZ2dlci5FcnJvcihfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksIFwiRm9yIHRlc3RpbmcgeW91IGNhbiBlbmFibGUgSFRUUCBtaWNyb3Bob25lIGFjY2VzcyBDaHJvbWUgYnkgdmlzaXRpbmcgY2hyb21lOi8vZmxhZ3MvIGFuZCBlbmFibGluZyAndW5zYWZlbHktdHJlYXQtaW5zZWN1cmUtb3JpZ2luLWFzLXNlY3VyZSdcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5zZXR1cFRyYW5zY2VpdmVyc0FzeW5jKHVzZU1pYykuZmluYWxseSgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgICAgICAgICAoX2EgPSB0aGlzLnBlZXJDb25uZWN0aW9uKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY3JlYXRlT2ZmZXIob2ZmZXJPcHRpb25zKS50aGVuKChvZmZlcikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBfYTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3dUZXh0T3ZlcmxheUNvbm5lY3RpbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICBvZmZlci5zZHAgPSB0aGlzLm11bmdlU0RQKG9mZmVyLnNkcCwgdXNlTWljKTtcclxuICAgICAgICAgICAgICAgICAgICAoX2EgPSB0aGlzLnBlZXJDb25uZWN0aW9uKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc2V0TG9jYWxEZXNjcmlwdGlvbihvZmZlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vblNlbmRXZWJSVENPZmZlcihvZmZlcik7XHJcbiAgICAgICAgICAgICAgICB9KS5jYXRjaCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93VGV4dE92ZXJsYXlTZXR1cEZhaWx1cmUoKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICpcclxuICAgICAqL1xyXG4gICAgcmVjZWl2ZU9mZmVyKG9mZmVyLCBjb25maWcpIHtcclxuICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcclxuICAgICAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ1JlY2VpdmUgT2ZmZXInLCA2KTtcclxuICAgICAgICAgICAgKF9hID0gdGhpcy5wZWVyQ29ubmVjdGlvbikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnNldFJlbW90ZURlc2NyaXB0aW9uKG9mZmVyKS50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGlzTG9jYWxob3N0Q29ubmVjdGlvbiA9IGxvY2F0aW9uLmhvc3RuYW1lID09PSAnbG9jYWxob3N0JyB8fFxyXG4gICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uLmhvc3RuYW1lID09PSAnMTI3LjAuMC4xJztcclxuICAgICAgICAgICAgICAgIGNvbnN0IGlzSHR0cHNDb25uZWN0aW9uID0gbG9jYXRpb24ucHJvdG9jb2wgPT09ICdodHRwczonO1xyXG4gICAgICAgICAgICAgICAgbGV0IHVzZU1pYyA9IGNvbmZpZy5pc0ZsYWdFbmFibGVkKF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uRmxhZ3MuVXNlTWljKTtcclxuICAgICAgICAgICAgICAgIGlmICh1c2VNaWMgJiYgIShpc0xvY2FsaG9zdENvbm5lY3Rpb24gfHwgaXNIdHRwc0Nvbm5lY3Rpb24pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXNlTWljID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5Mb2dnZXIuRXJyb3IoX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnTWljcm9waG9uZSBhY2Nlc3MgaW4gdGhlIGJyb3dzZXIgd2lsbCBub3Qgd29yayBpZiB5b3UgYXJlIG5vdCBvbiBIVFRQUyBvciBsb2NhbGhvc3QuIERpc2FibGluZyBtaWMgYWNjZXNzLicpO1xyXG4gICAgICAgICAgICAgICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18uTG9nZ2VyLkVycm9yKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgXCJGb3IgdGVzdGluZyB5b3UgY2FuIGVuYWJsZSBIVFRQIG1pY3JvcGhvbmUgYWNjZXNzIENocm9tZSBieSB2aXNpdGluZyBjaHJvbWU6Ly9mbGFncy8gYW5kIGVuYWJsaW5nICd1bnNhZmVseS10cmVhdC1pbnNlY3VyZS1vcmlnaW4tYXMtc2VjdXJlJ1wiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0dXBUcmFuc2NlaXZlcnNBc3luYyh1c2VNaWMpLmZpbmFsbHkoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBfYTtcclxuICAgICAgICAgICAgICAgICAgICAoX2EgPSB0aGlzLnBlZXJDb25uZWN0aW9uKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY3JlYXRlQW5zd2VyKCkudGhlbigoQW5zd2VyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfYTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgQW5zd2VyLnNkcCA9IHRoaXMubXVuZ2VTRFAoQW5zd2VyLnNkcCwgdXNlTWljKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChfYSA9IHRoaXMucGVlckNvbm5lY3Rpb24pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zZXRMb2NhbERlc2NyaXB0aW9uKEFuc3dlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSkudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfYTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vblNlbmRXZWJSVENBbnN3ZXIoKF9hID0gdGhpcy5wZWVyQ29ubmVjdGlvbikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmN1cnJlbnRMb2NhbERlc2NyaXB0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICB9KS5jYXRjaCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18uTG9nZ2VyLkVycm9yKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ2NyZWF0ZUFuc3dlcigpIGZhaWxlZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAvLyBVZ2x5IHN5bnRheCwgYnV0IHRoaXMgYWNoaWV2ZXMgdGhlIGludGVyc2VjdGlvbiBvZiB0aGUgYnJvd3NlciBzdXBwb3J0ZWQgbGlzdCBhbmQgdGhlIFVFIHN1cHBvcnRlZCBsaXN0XHJcbiAgICAgICAgICAgIHRoaXMuY29uZmlnLnNldE9wdGlvblNldHRpbmdPcHRpb25zKF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uT3B0aW9uUGFyYW1ldGVycy5QcmVmZXJyZWRDb2RlYywgdGhpcy5wYXJzZUF2YWlsYWJsZUNvZGVjcyhvZmZlcikuZmlsdGVyKCh2YWx1ZSkgPT4gdGhpcy5jb25maWdcclxuICAgICAgICAgICAgICAgIC5nZXRTZXR0aW5nT3B0aW9uKF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uT3B0aW9uUGFyYW1ldGVycy5QcmVmZXJyZWRDb2RlYylcclxuICAgICAgICAgICAgICAgIC5vcHRpb25zLmluY2x1ZGVzKHZhbHVlKSkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgdGhlIFJlbW90ZSBEZXNjcmlwdG9yIGZyb20gdGhlIHNpZ25hbGluZyBzZXJ2ZXIgdG8gdGhlIFJUQyBQZWVyIENvbm5lY3Rpb25cclxuICAgICAqIEBwYXJhbSBhbnN3ZXIgLSBSVEMgU2Vzc2lvbiBEZXNjcmlwdG9yIGZyb20gdGhlIFNpZ25hbGluZyBTZXJ2ZXJcclxuICAgICAqL1xyXG4gICAgcmVjZWl2ZUFuc3dlcihhbnN3ZXIpIHtcclxuICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgKF9hID0gdGhpcy5wZWVyQ29ubmVjdGlvbikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnNldFJlbW90ZURlc2NyaXB0aW9uKGFuc3dlcik7XHJcbiAgICAgICAgLy8gVWdseSBzeW50YXgsIGJ1dCB0aGlzIGFjaGlldmVzIHRoZSBpbnRlcnNlY3Rpb24gb2YgdGhlIGJyb3dzZXIgc3VwcG9ydGVkIGxpc3QgYW5kIHRoZSBVRSBzdXBwb3J0ZWQgbGlzdFxyXG4gICAgICAgIHRoaXMuY29uZmlnLnNldE9wdGlvblNldHRpbmdPcHRpb25zKF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uT3B0aW9uUGFyYW1ldGVycy5QcmVmZXJyZWRDb2RlYywgdGhpcy5wYXJzZUF2YWlsYWJsZUNvZGVjcyhhbnN3ZXIpLmZpbHRlcigodmFsdWUpID0+IHRoaXMuY29uZmlnXHJcbiAgICAgICAgICAgIC5nZXRTZXR0aW5nT3B0aW9uKF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uT3B0aW9uUGFyYW1ldGVycy5QcmVmZXJyZWRDb2RlYylcclxuICAgICAgICAgICAgLm9wdGlvbnMuaW5jbHVkZXModmFsdWUpKSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEdlbmVyYXRlIEFnZ3JlZ2F0ZWQgU3RhdHMgYW5kIHRoZW4gZmlyZSBhIG9uVmlkZW8gU3RhdHMgZXZlbnRcclxuICAgICAqL1xyXG4gICAgZ2VuZXJhdGVTdGF0cygpIHtcclxuICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgKF9hID0gdGhpcy5wZWVyQ29ubmVjdGlvbikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmdldFN0YXRzKG51bGwpLnRoZW4oKFN0YXRzRGF0YSkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmFnZ3JlZ2F0ZWRTdGF0cy5wcm9jZXNzU3RhdHMoU3RhdHNEYXRhKTtcclxuICAgICAgICAgICAgdGhpcy5vblZpZGVvU3RhdHModGhpcy5hZ2dyZWdhdGVkU3RhdHMpO1xyXG4gICAgICAgICAgICAvLyBVcGRhdGUgdGhlIHByZWZlcnJlZCBjb2RlYyBzZWxlY3Rpb24gYmFzZWQgb24gd2hhdCB3YXMgYWN0dWFsbHkgbmVnb3RpYXRlZFxyXG4gICAgICAgICAgICBpZiAodGhpcy51cGRhdGVDb2RlY1NlbGVjdGlvbikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb25maWcuc2V0T3B0aW9uU2V0dGluZ1ZhbHVlKF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uT3B0aW9uUGFyYW1ldGVycy5QcmVmZXJyZWRDb2RlYywgdGhpcy5hZ2dyZWdhdGVkU3RhdHMuY29kZWNzLmdldCh0aGlzLmFnZ3JlZ2F0ZWRTdGF0cy5pbmJvdW5kVmlkZW9TdGF0cy5jb2RlY0lkKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ2xvc2UgVGhlIFBlZXIgQ29ubmVjdGlvblxyXG4gICAgICovXHJcbiAgICBjbG9zZSgpIHtcclxuICAgICAgICBpZiAodGhpcy5wZWVyQ29ubmVjdGlvbikge1xyXG4gICAgICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uLmNsb3NlKCk7XHJcbiAgICAgICAgICAgIHRoaXMucGVlckNvbm5lY3Rpb24gPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogTW9kaWZ5IHRoZSBTZXNzaW9uIERlc2NyaXB0b3JcclxuICAgICAqIEBwYXJhbSBzZHAgLSBTZXNzaW9uIERlc2NyaXB0b3IgYXMgYSBzdHJpbmdcclxuICAgICAqIEBwYXJhbSB1c2VNaWMgLSBJcyB0aGUgbWljcm9waG9uZSBpbiB1c2VcclxuICAgICAqIEByZXR1cm5zIEEgbW9kaWZpZWQgU2Vzc2lvbiBEZXNjcmlwdG9yXHJcbiAgICAgKi9cclxuICAgIG11bmdlU0RQKHNkcCwgdXNlTWljKSB7XHJcbiAgICAgICAgY29uc3QgbXVuZ2VkU0RQID0gc2RwO1xyXG4gICAgICAgIG11bmdlZFNEUC5yZXBsYWNlKC8oYT1mbXRwOlxcZCsgLipsZXZlbC1hc3ltbWV0cnktYWxsb3dlZD0uKilcXHJcXG4vZ20sICckMTt4LWdvb2dsZS1zdGFydC1iaXRyYXRlPTEwMDAwO3gtZ29vZ2xlLW1heC1iaXRyYXRlPTEwMDAwMFxcclxcbicpO1xyXG4gICAgICAgIGxldCBhdWRpb1NEUCA9ICcnO1xyXG4gICAgICAgIC8vIHNldCBtYXggYml0cmF0ZSB0byBoaWdoZXN0IGJpdHJhdGUgT3B1cyBzdXBwb3J0c1xyXG4gICAgICAgIGF1ZGlvU0RQICs9ICdtYXhhdmVyYWdlYml0cmF0ZT01MTAwMDA7JztcclxuICAgICAgICBpZiAodXNlTWljKSB7XHJcbiAgICAgICAgICAgIC8vIHNldCB0aGUgbWF4IGNhcHR1cmUgcmF0ZSB0byA0OGtoeiAoc28gd2UgY2FuIHNlbmQgaGlnaCBxdWFsaXR5IGF1ZGlvIGZyb20gbWljKVxyXG4gICAgICAgICAgICBhdWRpb1NEUCArPSAnc3Byb3AtbWF4Y2FwdHVyZXJhdGU9NDgwMDA7JztcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gRm9yY2UgbW9ubyBvciBzdGVyZW8gYmFzZWQgb24gd2hldGhlciA/Zm9yY2VNb25vIHdhcyBwYXNzZWQgb3Igbm90XHJcbiAgICAgICAgYXVkaW9TRFAgKz0gdGhpcy5jb25maWcuaXNGbGFnRW5hYmxlZChfQ29uZmlnX0NvbmZpZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLkZsYWdzLkZvcmNlTW9ub0F1ZGlvKVxyXG4gICAgICAgICAgICA/ICdzdGVyZW89MDsnXHJcbiAgICAgICAgICAgIDogJ3N0ZXJlbz0xOyc7XHJcbiAgICAgICAgLy8gZW5hYmxlIGluLWJhbmQgZm9yd2FyZCBlcnJvciBjb3JyZWN0aW9uIGZvciBvcHVzIGF1ZGlvXHJcbiAgICAgICAgYXVkaW9TRFAgKz0gJ3VzZWluYmFuZGZlYz0xJztcclxuICAgICAgICAvLyBXZSB1c2UgdGhlIGxpbmUgJ3VzZWluYmFuZGZlYz0xJyAod2hpY2ggT3B1cyB1c2VzKSB0byBzZXQgb3VyIE9wdXMgc3BlY2lmaWMgYXVkaW8gcGFyYW1ldGVycy5cclxuICAgICAgICBtdW5nZWRTRFAucmVwbGFjZSgndXNlaW5iYW5kZmVjPTEnLCBhdWRpb1NEUCk7XHJcbiAgICAgICAgcmV0dXJuIG11bmdlZFNEUDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogV2hlbiBhIEljZSBDYW5kaWRhdGUgaXMgcmVjZWl2ZWQgYWRkIHRvIHRoZSBSVEMgUGVlciBDb25uZWN0aW9uXHJcbiAgICAgKiBAcGFyYW0gaWNlQ2FuZGlkYXRlIC0gUlRDIEljZSBDYW5kaWRhdGUgZnJvbSB0aGUgU2lnbmFsaW5nIFNlcnZlclxyXG4gICAgICovXHJcbiAgICBoYW5kbGVPbkljZShpY2VDYW5kaWRhdGUpIHtcclxuICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ3BlZXJjb25uZWN0aW9uIGhhbmRsZU9uSWNlJywgNik7XHJcbiAgICAgICAgLy8gLy8gaWYgZm9yY2luZyBUVVJOLCByZWplY3QgYW55IGNhbmRpZGF0ZXMgbm90IHJlbGF5XHJcbiAgICAgICAgaWYgKHRoaXMuY29uZmlnLmlzRmxhZ0VuYWJsZWQoX0NvbmZpZ19Db25maWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5GbGFncy5Gb3JjZVRVUk4pKSB7XHJcbiAgICAgICAgICAgIC8vIGNoZWNrIGlmIG5vIHJlbGF5IGFkZHJlc3MgaXMgZm91bmQsIGlmIHNvLCB3ZSBhcmUgYXNzdW1pbmcgaXQgbWVhbnMgbm8gVFVSTiBzZXJ2ZXJcclxuICAgICAgICAgICAgaWYgKGljZUNhbmRpZGF0ZS5jYW5kaWRhdGUuaW5kZXhPZigncmVsYXknKSA8IDApIHtcclxuICAgICAgICAgICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18uTG9nZ2VyLkluZm8oX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBgRHJvcHBpbmcgY2FuZGlkYXRlIGJlY2F1c2UgaXQgd2FzIG5vdCBUVVJOIHJlbGF5LiB8IFR5cGU9ICR7aWNlQ2FuZGlkYXRlLnR5cGV9IHwgUHJvdG9jb2w9ICR7aWNlQ2FuZGlkYXRlLnByb3RvY29sfSB8IEFkZHJlc3M9JHtpY2VDYW5kaWRhdGUuYWRkcmVzc30gfCBQb3J0PSR7aWNlQ2FuZGlkYXRlLnBvcnR9IHxgLCA2KTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAoX2EgPSB0aGlzLnBlZXJDb25uZWN0aW9uKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuYWRkSWNlQ2FuZGlkYXRlKGljZUNhbmRpZGF0ZSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFdoZW4gdGhlIFJUQyBQZWVyIENvbm5lY3Rpb24gU2lnbmFsaW5nIHNlcnZlciBzdGF0ZSBDaGFuZ2VzXHJcbiAgICAgKiBAcGFyYW0gc3RhdGUgLSBTaWduYWxpbmcgU2VydmVyIFN0YXRlIENoYW5nZSBFdmVudFxyXG4gICAgICovXHJcbiAgICBoYW5kbGVTaWduYWxTdGF0ZUNoYW5nZShzdGF0ZSkge1xyXG4gICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksICdzaWduYWxpbmcgc3RhdGUgY2hhbmdlOiAnICsgc3RhdGUsIDYpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBIYW5kbGUgd2hlbiB0aGUgSWNlIENvbm5lY3Rpb24gU3RhdGUgQ2hhbmdlc1xyXG4gICAgICogQHBhcmFtIHN0YXRlIC0gSWNlIENvbm5lY3Rpb24gU3RhdGVcclxuICAgICAqL1xyXG4gICAgaGFuZGxlSWNlQ29ubmVjdGlvblN0YXRlQ2hhbmdlKHN0YXRlKSB7XHJcbiAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ2ljZSBjb25uZWN0aW9uIHN0YXRlIGNoYW5nZTogJyArIHN0YXRlLCA2KTtcclxuICAgICAgICB0aGlzLm9uSWNlQ29ubmVjdGlvblN0YXRlQ2hhbmdlKHN0YXRlKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlIHdoZW4gdGhlIEljZSBHYXRoZXJpbmcgU3RhdGUgQ2hhbmdlc1xyXG4gICAgICogQHBhcmFtIHN0YXRlIC0gSWNlIEdhdGhlcmluZyBTdGF0ZSBDaGFuZ2VcclxuICAgICAqL1xyXG4gICAgaGFuZGxlSWNlR2F0aGVyaW5nU3RhdGVDaGFuZ2Uoc3RhdGUpIHtcclxuICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnaWNlIGdhdGhlcmluZyBzdGF0ZSBjaGFuZ2U6ICcgKyBKU09OLnN0cmluZ2lmeShzdGF0ZSksIDYpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBBY3RpdmF0ZXMgdGhlIG9uVHJhY2sgbWV0aG9kXHJcbiAgICAgKiBAcGFyYW0gZXZlbnQgLSBUaGUgd2ViUnRjIHRyYWNrIGV2ZW50XHJcbiAgICAgKi9cclxuICAgIGhhbmRsZU9uVHJhY2soZXZlbnQpIHtcclxuICAgICAgICB0aGlzLm9uVHJhY2soZXZlbnQpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBBY3RpdmF0ZXMgdGhlIG9uUGVlckljZUNhbmRpZGF0ZVxyXG4gICAgICogQHBhcmFtIGV2ZW50IC0gVGhlIHBlZXIgaWNlIGNhbmRpZGF0ZVxyXG4gICAgICovXHJcbiAgICBoYW5kbGVJY2VDYW5kaWRhdGUoZXZlbnQpIHtcclxuICAgICAgICB0aGlzLm9uUGVlckljZUNhbmRpZGF0ZShldmVudCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEFjdGl2YXRlcyB0aGUgb25EYXRhQ2hhbm5lbFxyXG4gICAgICogQHBhcmFtIGV2ZW50IC0gVGhlIHBlZXIncyBkYXRhIGNoYW5uZWxcclxuICAgICAqL1xyXG4gICAgaGFuZGxlRGF0YUNoYW5uZWwoZXZlbnQpIHtcclxuICAgICAgICB0aGlzLm9uRGF0YUNoYW5uZWwoZXZlbnQpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBBbiBvdmVycmlkZSBtZXRob2QgZm9yIG9uVHJhY2sgZm9yIHVzZSBvdXRzaWRlIG9mIHRoZSBQZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXJcclxuICAgICAqIEBwYXJhbSB0cmFja0V2ZW50IC0gVGhlIHdlYlJ0YyB0cmFjayBldmVudFxyXG4gICAgICovXHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXHJcbiAgICBvblRyYWNrKHRyYWNrRXZlbnQpIHtcclxuICAgICAgICAvLyBEZWZhdWx0IEZ1bmN0aW9uYWxpdHk6IERvIE5vdGhpbmdcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQW4gb3ZlcnJpZGUgbWV0aG9kIGZvciBvbkljZUNvbm5lY3Rpb25TdGF0ZUNoYW5nZSBmb3IgdXNlIG91dHNpZGUgb2YgdGhlIFBlZXJDb25uZWN0aW9uQ29udHJvbGxlclxyXG4gICAgICogQHBhcmFtIGV2ZW50IC0gVGhlIHdlYlJ0YyBpY2Vjb25uZWN0aW9uc3RhdGVjaGFuZ2UgZXZlbnRcclxuICAgICAqL1xyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xyXG4gICAgb25JY2VDb25uZWN0aW9uU3RhdGVDaGFuZ2UoZXZlbnQpIHtcclxuICAgICAgICAvLyBEZWZhdWx0IEZ1bmN0aW9uYWxpdHk6IERvIE5vdGhpbmdcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQW4gb3ZlcnJpZGUgbWV0aG9kIGZvciBvblBlZXJJY2VDYW5kaWRhdGUgZm9yIHVzZSBvdXRzaWRlIG9mIHRoZSBQZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXJcclxuICAgICAqIEBwYXJhbSBwZWVyQ29ubmVjdGlvbkljZUV2ZW50IC0gVGhlIHBlZXIgaWNlIGNhbmRpZGF0ZVxyXG4gICAgICovXHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXHJcbiAgICBvblBlZXJJY2VDYW5kaWRhdGUocGVlckNvbm5lY3Rpb25JY2VFdmVudCkge1xyXG4gICAgICAgIC8vIERlZmF1bHQgRnVuY3Rpb25hbGl0eTogRG8gTm90aGluZ1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBBbiBvdmVycmlkZSBtZXRob2QgZm9yIG9uRGF0YUNoYW5uZWwgZm9yIHVzZSBvdXRzaWRlIG9mIHRoZSBQZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXJcclxuICAgICAqIEBwYXJhbSBkYXRhY2hhbm5lbEV2ZW50IC0gVGhlIHBlZXIncyBkYXRhIGNoYW5uZWxcclxuICAgICAqL1xyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xyXG4gICAgb25EYXRhQ2hhbm5lbChkYXRhY2hhbm5lbEV2ZW50KSB7XHJcbiAgICAgICAgLy8gRGVmYXVsdCBGdW5jdGlvbmFsaXR5OiBEbyBOb3RoaW5nXHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFNldHVwIHRyYWNrcyBvbiB0aGUgUlRDIFBlZXIgQ29ubmVjdGlvblxyXG4gICAgICogQHBhcmFtIHVzZU1pYyAtIGlzIG1pYyBpbiB1c2VcclxuICAgICAqL1xyXG4gICAgc2V0dXBUcmFuc2NlaXZlcnNBc3luYyh1c2VNaWMpIHtcclxuICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lLCBfZiwgX2csIF9oLCBfajtcclxuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xyXG4gICAgICAgICAgICBjb25zdCBoYXNUcmFuc2NlaXZlcnMgPSAoKF9hID0gdGhpcy5wZWVyQ29ubmVjdGlvbikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmdldFRyYW5zY2VpdmVycygpLmxlbmd0aCkgPiAwO1xyXG4gICAgICAgICAgICAvLyBTZXR1cCBhIHRyYW5zY2VpdmVyIGZvciBnZXR0aW5nIFVFIHZpZGVvXHJcbiAgICAgICAgICAgIChfYiA9IHRoaXMucGVlckNvbm5lY3Rpb24pID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5hZGRUcmFuc2NlaXZlcigndmlkZW8nLCB7IGRpcmVjdGlvbjogJ3JlY3Zvbmx5JyB9KTtcclxuICAgICAgICAgICAgLy8gV2UgY2FuIG9ubHkgc2V0IHByZWZlcnJlYyBjb2RlYyBvbiBDaHJvbWVcclxuICAgICAgICAgICAgaWYgKFJUQ1J0cFJlY2VpdmVyLmdldENhcGFiaWxpdGllcyAmJiB0aGlzLnByZWZlcnJlZENvZGVjICE9ICcnKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHRyYW5zY2VpdmVyIG9mIChfZCA9IChfYyA9IHRoaXMucGVlckNvbm5lY3Rpb24pID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5nZXRUcmFuc2NlaXZlcnMoKSkgIT09IG51bGwgJiYgX2QgIT09IHZvaWQgMCA/IF9kIDogW10pIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHJhbnNjZWl2ZXIgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNjZWl2ZXIucmVjZWl2ZXIgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNjZWl2ZXIucmVjZWl2ZXIudHJhY2sgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNjZWl2ZXIucmVjZWl2ZXIudHJhY2sua2luZCA9PT0gJ3ZpZGVvJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwcmVmZXJyZWRSVFBDb2RlYyA9IHRoaXMucHJlZmVycmVkQ29kZWMuc3BsaXQoJyAnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY29kZWNzID0gW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbWVUeXBlOiAndmlkZW8vJyArIHByZWZlcnJlZFJUUENvZGVjWzBdIC8qIE5hbWUgKi8sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xvY2tSYXRlOiA5MDAwMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZHBGbXRwTGluZTogcHJlZmVycmVkUlRQQ29kZWNbMV0gLyogc2RwRm10cExpbmUgKi9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBwcmVmZXJyZWRSVFBDb2RlY1sxXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICcnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29uZmlnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZ2V0U2V0dGluZ09wdGlvbihfQ29uZmlnX0NvbmZpZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLk9wdGlvblBhcmFtZXRlcnMuUHJlZmVycmVkQ29kZWMpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAub3B0aW9ucy5maWx0ZXIoKG9wdGlvbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmVtb3ZlIHRoZSBwcmVmZXJyZWQgY29kZWMgZnJvbSB0aGUgbGlzdCBvZiBwb3NzaWJsZSBjb2RlY3MgYXMgd2UndmUgc2V0IGl0IGFscmVhZHlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvcHRpb24gIT0gdGhpcy5wcmVmZXJyZWRDb2RlYztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5mb3JFYWNoKChvcHRpb24pID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFtbWVuZCB0aGUgcmVzdCBvZiB0aGUgYnJvd3NlcnMgc3VwcG9ydGVkIGNvZGVjc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYWx0Q29kZWMgPSBvcHRpb24uc3BsaXQoJyAnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVjcy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW1lVHlwZTogJ3ZpZGVvLycgKyBhbHRDb2RlY1swXSAvKiBOYW1lICovLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsb2NrUmF0ZTogOTAwMDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2RwRm10cExpbmU6IGFsdENvZGVjWzFdIC8qIHNkcEZtdHBMaW5lICovXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gYWx0Q29kZWNbMV1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAnJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGNvZGVjIG9mIGNvZGVjcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvZGVjLnNkcEZtdHBMaW5lID09PSAnJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIGNhbid0IGR5bmFtaWNhbGx5IGFkZCBtZW1iZXJzIHRvIHRoZSBjb2RlYywgc28gaW5zdGVhZCByZW1vdmUgdGhlIGZpZWxkIGlmIGl0J3MgZW1wdHlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgY29kZWMuc2RwRm10cExpbmU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNjZWl2ZXIuc2V0Q29kZWNQcmVmZXJlbmNlcyhjb2RlY3MpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBTZXR1cCBhIHRyYW5zY2VpdmVyIGZvciBzZW5kaW5nIG1pYyBhdWRpbyB0byBVRSBhbmQgcmVjZWl2aW5nIGF1ZGlvIGZyb20gVUVcclxuICAgICAgICAgICAgaWYgKCF1c2VNaWMpIHtcclxuICAgICAgICAgICAgICAgIChfZSA9IHRoaXMucGVlckNvbm5lY3Rpb24pID09PSBudWxsIHx8IF9lID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZS5hZGRUcmFuc2NlaXZlcignYXVkaW8nLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGlyZWN0aW9uOiAncmVjdm9ubHknXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIHNldCB0aGUgYXVkaW8gb3B0aW9ucyBiYXNlZCBvbiBtaWMgdXNhZ2VcclxuICAgICAgICAgICAgICAgIGNvbnN0IGF1ZGlvT3B0aW9ucyA9IHVzZU1pY1xyXG4gICAgICAgICAgICAgICAgICAgID8ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhdXRvR2FpbkNvbnRyb2w6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGFubmVsQ291bnQ6IDEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVjaG9DYW5jZWxsYXRpb246IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsYXRlbmN5OiAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBub2lzZVN1cHByZXNzaW9uOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2FtcGxlUmF0ZTogNDgwMDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNhbXBsZVNpemU6IDE2LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2b2x1bWU6IDEuMFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICA6IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgLy8gc2V0IHRoZSBtZWRpYSBzZW5kIG9wdGlvbnNcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1lZGlhU2VuZE9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmlkZW86IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIGF1ZGlvOiBhdWRpb09wdGlvbnNcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAvLyBOb3RlIHVzaW5nIG1pYyBvbiBhbmRyb2lkIGNocm9tZSByZXF1aXJlcyBTU0wgb3IgY2hyb21lOi8vZmxhZ3MvIFwidW5zYWZlbHktdHJlYXQtaW5zZWN1cmUtb3JpZ2luLWFzLXNlY3VyZVwiXHJcbiAgICAgICAgICAgICAgICBjb25zdCBzdHJlYW0gPSB5aWVsZCBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYShtZWRpYVNlbmRPcHRpb25zKTtcclxuICAgICAgICAgICAgICAgIGlmIChzdHJlYW0pIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaGFzVHJhbnNjZWl2ZXJzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdHJhbnNjZWl2ZXIgb2YgKF9nID0gKF9mID0gdGhpcy5wZWVyQ29ubmVjdGlvbikgPT09IG51bGwgfHwgX2YgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9mLmdldFRyYW5zY2VpdmVycygpKSAhPT0gbnVsbCAmJiBfZyAhPT0gdm9pZCAwID8gX2cgOiBbXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRyYW5zY2VpdmVyICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNjZWl2ZXIucmVjZWl2ZXIgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2NlaXZlci5yZWNlaXZlci50cmFjayAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zY2VpdmVyLnJlY2VpdmVyLnRyYWNrLmtpbmQgPT09ICdhdWRpbycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHRyYWNrIG9mIHN0cmVhbS5nZXRUcmFja3MoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHJhY2sua2luZCAmJiB0cmFjay5raW5kID09ICdhdWRpbycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zY2VpdmVyLnNlbmRlci5yZXBsYWNlVHJhY2sodHJhY2spO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNjZWl2ZXIuZGlyZWN0aW9uID0gJ3NlbmRyZWN2JztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCB0cmFjayBvZiBzdHJlYW0uZ2V0VHJhY2tzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0cmFjay5raW5kICYmIHRyYWNrLmtpbmQgPT0gJ2F1ZGlvJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChfaCA9IHRoaXMucGVlckNvbm5lY3Rpb24pID09PSBudWxsIHx8IF9oID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfaC5hZGRUcmFuc2NlaXZlcih0cmFjaywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3Rpb246ICdzZW5kcmVjdidcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIChfaiA9IHRoaXMucGVlckNvbm5lY3Rpb24pID09PSBudWxsIHx8IF9qID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfai5hZGRUcmFuc2NlaXZlcignYXVkaW8nLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdGlvbjogJ3JlY3Zvbmx5J1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEFuZCBvdmVycmlkZSBldmVudCBmb3Igd2hlbiB0aGUgdmlkZW8gc3RhdHMgYXJlIGZpcmVkXHJcbiAgICAgKiBAcGFyYW0gZXZlbnQgLSBBZ2dyZWdhdGVkIFN0YXRzXHJcbiAgICAgKi9cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcclxuICAgIG9uVmlkZW9TdGF0cyhldmVudCkge1xyXG4gICAgICAgIC8vIERlZmF1bHQgRnVuY3Rpb25hbGl0eTogRG8gTm90aGluZ1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBFdmVudCB0byBzZW5kIHRoZSBSVEMgb2ZmZXIgdG8gdGhlIFNpZ25hbGluZyBzZXJ2ZXJcclxuICAgICAqIEBwYXJhbSBvZmZlciAtIFJUQyBPZmZlclxyXG4gICAgICovXHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXHJcbiAgICBvblNlbmRXZWJSVENPZmZlcihvZmZlcikge1xyXG4gICAgICAgIC8vIERlZmF1bHQgRnVuY3Rpb25hbGl0eTogRG8gTm90aGluZ1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBFdmVudCB0byBzZW5kIHRoZSBSVEMgQW5zd2VyIHRvIHRoZSBTaWduYWxpbmcgc2VydmVyXHJcbiAgICAgKiBAcGFyYW0gYW5zd2VyIC0gUlRDIEFuc3dlclxyXG4gICAgICovXHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXHJcbiAgICBvblNlbmRXZWJSVENBbnN3ZXIoYW5zd2VyKSB7XHJcbiAgICAgICAgLy8gRGVmYXVsdCBGdW5jdGlvbmFsaXR5OiBEbyBOb3RoaW5nXHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEFuIG92ZXJyaWRlIGZvciBzaG93aW5nIHRoZSBQZWVyIGNvbm5lY3Rpb24gY29ubmVjdGluZyBPdmVybGF5XHJcbiAgICAgKi9cclxuICAgIHNob3dUZXh0T3ZlcmxheUNvbm5lY3RpbmcoKSB7XHJcbiAgICAgICAgLy8gRGVmYXVsdCBGdW5jdGlvbmFsaXR5OiBEbyBOb3RoaW5nXHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEFuIG92ZXJyaWRlIGZvciBzaG93aW5nIHRoZSBQZWVyIGNvbm5lY3Rpb24gRmFpbGVkIG92ZXJsYXlcclxuICAgICAqL1xyXG4gICAgc2hvd1RleHRPdmVybGF5U2V0dXBGYWlsdXJlKCkge1xyXG4gICAgICAgIC8vIERlZmF1bHQgRnVuY3Rpb25hbGl0eTogRG8gTm90aGluZ1xyXG4gICAgfVxyXG4gICAgcGFyc2VBdmFpbGFibGVDb2RlY3MocnRjU2Vzc2lvbkRlc2NyaXB0aW9uKSB7XHJcbiAgICAgICAgLy8gTm8gcG9pbnQgaW4gdXBkYXRpbmcgdGhlIGF2YWlsYWJsZSBjb2RlY3MgaWYgb24gRkZcclxuICAgICAgICBpZiAoIVJUQ1J0cFJlY2VpdmVyLmdldENhcGFiaWxpdGllcylcclxuICAgICAgICAgICAgcmV0dXJuIFsnT25seSBhdmFpbGFibGUgb24gQ2hyb21lJ107XHJcbiAgICAgICAgY29uc3QgdWVTdXBwb3J0ZWRDb2RlY3MgPSBbXTtcclxuICAgICAgICBjb25zdCBzZWN0aW9ucyA9ICgwLHNkcF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLnNwbGl0U2VjdGlvbnMpKHJ0Y1Nlc3Npb25EZXNjcmlwdGlvbi5zZHApO1xyXG4gICAgICAgIC8vIGRpc2NhcmQgdGhlIHNlc3Npb24gaW5mb3JtYXRpb24gYXMgd2Ugb25seSB3YW50IG1lZGlhIHJlbGF0ZWQgaW5mb1xyXG4gICAgICAgIHNlY3Rpb25zLnNoaWZ0KCk7XHJcbiAgICAgICAgc2VjdGlvbnMuZm9yRWFjaCgobWVkaWFTZWN0aW9uKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHsgY29kZWNzIH0gPSAoMCxzZHBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5wYXJzZVJ0cFBhcmFtZXRlcnMpKG1lZGlhU2VjdGlvbik7XHJcbiAgICAgICAgICAgIC8vIEZpbHRlciBvbmx5IGZvciBWUFggLyBIMjZYIC8gQVYxXHJcbiAgICAgICAgICAgIGNvbnN0IG1hdGNoZXIgPSAvKFZQXFxkfEgyNlxcZHxBVjEpLiovO1xyXG4gICAgICAgICAgICBjb2RlY3MuZm9yRWFjaCgoYykgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc3RyID0gYy5uYW1lICtcclxuICAgICAgICAgICAgICAgICAgICAnICcgK1xyXG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKGMucGFyYW1ldGVycyB8fCB7fSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgLm1hcCgocCkgPT4gcCArICc9JyArIGMucGFyYW1ldGVyc1twXSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmpvaW4oJzsnKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gbWF0Y2hlci5leGVjKHN0cik7XHJcbiAgICAgICAgICAgICAgICBpZiAobWF0Y2ggIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYy5uYW1lID09ICdWUDknKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFVFIGFuc3dlcnMgZG9uJ3Qgc3BlY2lmeSBwcm9maWxlIGJ1dCB3ZSBrbm93IHdlIHdhbnQgcHJvZmlsZSAwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGMucGFyYW1ldGVycyA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdwcm9maWxlLWlkJzogJzAnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvZGVjU3RyID0gYy5uYW1lICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJyAnICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmtleXMoYy5wYXJhbWV0ZXJzIHx8IHt9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLm1hcCgocCkgPT4gcCArICc9JyArIGMucGFyYW1ldGVyc1twXSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5qb2luKCc7Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdWVTdXBwb3J0ZWRDb2RlY3MucHVzaChjb2RlY1N0cik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiB1ZVN1cHBvcnRlZENvZGVjcztcclxuICAgIH1cclxufVxyXG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvUGVlckNvbm5lY3Rpb25Db250cm9sbGVyL1Nlc3Npb25TdGF0cy50c1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL1BlZXJDb25uZWN0aW9uQ29udHJvbGxlci9TZXNzaW9uU3RhdHMudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJTZXNzaW9uU3RhdHNcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gU2Vzc2lvblN0YXRzKVxuLyogaGFybW9ueSBleHBvcnQgKi8gfSk7XG4vLyBDb3B5cmlnaHQgRXBpYyBHYW1lcywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG4vKipcclxuICogU2Vzc2lvbiBzdGF0aXN0aWNzXHJcbiAqL1xyXG5jbGFzcyBTZXNzaW9uU3RhdHMge1xyXG59XHJcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9QZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIvU3RyZWFtU3RhdHMudHNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL1BlZXJDb25uZWN0aW9uQ29udHJvbGxlci9TdHJlYW1TdGF0cy50cyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiU3RyZWFtU3RhdHNcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gU3RyZWFtU3RhdHMpXG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcbi8vIENvcHlyaWdodCBFcGljIEdhbWVzLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcbi8qKlxyXG4gKiBDbGFzcyB0byBob2xkIHRoZSBzdHJlYW0gc3RhdHMgZGF0YSBjb21pbmcgaW4gZnJvbSB3ZWJSdGNcclxuICovXHJcbmNsYXNzIFN0cmVhbVN0YXRzIHtcclxufVxyXG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvUGl4ZWxTdHJlYW1pbmcvUGl4ZWxTdHJlYW1pbmcudHNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvUGl4ZWxTdHJlYW1pbmcvUGl4ZWxTdHJlYW1pbmcudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiUGl4ZWxTdHJlYW1pbmdcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gUGl4ZWxTdHJlYW1pbmcpXG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfQ29uZmlnX0NvbmZpZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vQ29uZmlnL0NvbmZpZyAqLyBcIi4vc3JjL0NvbmZpZy9Db25maWcudHNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX1dlYlJ0Y1BsYXllcl9XZWJSdGNQbGF5ZXJDb250cm9sbGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9XZWJSdGNQbGF5ZXIvV2ViUnRjUGxheWVyQ29udHJvbGxlciAqLyBcIi4vc3JjL1dlYlJ0Y1BsYXllci9XZWJSdGNQbGF5ZXJDb250cm9sbGVyLnRzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9Mb2dnZXIvTG9nZ2VyICovIFwiLi9zcmMvTG9nZ2VyL0xvZ2dlci50c1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfVUlfT25TY3JlZW5LZXlib2FyZF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vVUkvT25TY3JlZW5LZXlib2FyZCAqLyBcIi4vc3JjL1VJL09uU2NyZWVuS2V5Ym9hcmQudHNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX1V0aWxfRXZlbnRFbWl0dGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9VdGlsL0V2ZW50RW1pdHRlciAqLyBcIi4vc3JjL1V0aWwvRXZlbnRFbWl0dGVyLnRzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9XZWJYUl9XZWJYUkNvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL1dlYlhSL1dlYlhSQ29udHJvbGxlciAqLyBcIi4vc3JjL1dlYlhSL1dlYlhSQ29udHJvbGxlci50c1wiKTtcbi8vIENvcHlyaWdodCBFcGljIEdhbWVzLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4vKipcclxuICogVGhlIGtleSBjbGFzcyBmb3IgdGhlIGJyb3dzZXIgc2lkZSBvZiBhIFBpeGVsIFN0cmVhbWluZyBhcHBsaWNhdGlvbiwgaXQgaW5jbHVkZXM6XHJcbiAqIFdlYlJUQyBoYW5kbGluZywgWFIgc3VwcG9ydCwgaW5wdXQgaGFuZGxpbmcsIGFuZCBlbWl0dGVycyBmb3IgbGlmZXRpbWUgYW5kIHN0YXRlIGNoYW5nZSBldmVudHMuXHJcbiAqIFVzZXJzIGFyZSBlbmNvdXJhZ2VkIHRvIHVzZSB0aGlzIGNsYXNzIGFzIGlzLCB0aHJvdWdoIGNvbXBvc2l0aW9uLCBvciBleHRlbmQgaXQuIEluIGFueSBjYXNlLFxyXG4gKiB0aGlzIHdpbGwgbGlrZWx5IGJlIHRoZSBjb3JlIG9mIHlvdXIgUGl4ZWwgU3RyZWFtaW5nIGV4cGVyaWVuY2UgaW4gdGVybXMgb2YgZnVuY3Rpb25hbGl0eS5cclxuICovXHJcbmNsYXNzIFBpeGVsU3RyZWFtaW5nIHtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIGNvbmZpZyAtIEEgbmV3bHkgaW5zdGFudGlhdGVkIGNvbmZpZyBvYmplY3RcclxuICAgICAqIEBwYXJhbSBvdmVycmlkZXMgLSBQYXJhbWV0ZXJzIHRvIG92ZXJyaWRlIGRlZmF1bHQgYmVoYXZpb3VyXHJcbiAgICAgKiByZXR1cm5zIHRoZSBiYXNlIFBpeGVsIHN0cmVhbWluZyBvYmplY3RcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoY29uZmlnLCBvdmVycmlkZXMpIHtcclxuICAgICAgICB0aGlzLl9zaG93QWN0aW9uT3JFcnJvck9uRGlzY29ubmVjdCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5hbGxvd0NvbnNvbGVDb21tYW5kcyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xyXG4gICAgICAgIGlmIChvdmVycmlkZXMgPT09IG51bGwgfHwgb3ZlcnJpZGVzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvdmVycmlkZXMudmlkZW9FbGVtZW50UGFyZW50KSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3ZpZGVvRWxlbWVudFBhcmVudCA9IG92ZXJyaWRlcy52aWRlb0VsZW1lbnRQYXJlbnQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX2V2ZW50RW1pdHRlciA9IG5ldyBfVXRpbF9FdmVudEVtaXR0ZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5FdmVudEVtaXR0ZXIoKTtcclxuICAgICAgICB0aGlzLmNvbmZpZ3VyZVNldHRpbmdzKCk7XHJcbiAgICAgICAgLy8gc2V0dXAgV2ViUlRDXHJcbiAgICAgICAgdGhpcy5zZXRXZWJSdGNQbGF5ZXJDb250cm9sbGVyKG5ldyBfV2ViUnRjUGxheWVyX1dlYlJ0Y1BsYXllckNvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5XZWJSdGNQbGF5ZXJDb250cm9sbGVyKHRoaXMuY29uZmlnLCB0aGlzKSk7XHJcbiAgICAgICAgLy8gT25zY3JlZW4ga2V5Ym9hcmRcclxuICAgICAgICB0aGlzLm9uU2NyZWVuS2V5Ym9hcmRIZWxwZXIgPSBuZXcgX1VJX09uU2NyZWVuS2V5Ym9hcmRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5PblNjcmVlbktleWJvYXJkKHRoaXMudmlkZW9FbGVtZW50UGFyZW50KTtcclxuICAgICAgICB0aGlzLm9uU2NyZWVuS2V5Ym9hcmRIZWxwZXIudW5xdWFudGl6ZUFuZERlbm9ybWFsaXplVW5zaWduZWQgPSAoeCwgeSkgPT4gdGhpcy5fd2ViUnRjQ29udHJvbGxlci5yZXF1ZXN0VW5xdWFudGl6ZWRBbmREZW5vcm1hbGl6ZVVuc2lnbmVkKHgsIHkpO1xyXG4gICAgICAgIHRoaXMuX2FjdGl2YXRlT25TY3JlZW5LZXlib2FyZCA9IChjb21tYW5kKSA9PiB0aGlzLm9uU2NyZWVuS2V5Ym9hcmRIZWxwZXIuc2hvd09uU2NyZWVuS2V5Ym9hcmQoY29tbWFuZCk7XHJcbiAgICAgICAgdGhpcy5fd2ViWHJDb250cm9sbGVyID0gbmV3IF9XZWJYUl9XZWJYUkNvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXy5XZWJYUkNvbnRyb2xsZXIodGhpcy5fd2ViUnRjQ29udHJvbGxlcik7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEdldHMgdGhlIGVsZW1lbnQgdGhhdCBjb250YWlucyB0aGUgdmlkZW8gc3RyZWFtIGVsZW1lbnQuXHJcbiAgICAgKi9cclxuICAgIGdldCB2aWRlb0VsZW1lbnRQYXJlbnQoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLl92aWRlb0VsZW1lbnRQYXJlbnQpIHtcclxuICAgICAgICAgICAgdGhpcy5fdmlkZW9FbGVtZW50UGFyZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgICAgIHRoaXMuX3ZpZGVvRWxlbWVudFBhcmVudC5pZCA9ICd2aWRlb0VsZW1lbnRQYXJlbnQnO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5fdmlkZW9FbGVtZW50UGFyZW50O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDb25maWd1cmUgdGhlIHNldHRpbmdzIHdpdGggb24gY2hhbmdlIGxpc3RlbmVycyBhbmQgYW55IGFkZGl0aW9uYWwgcGVyIGV4cGVyaWVuY2Ugc2V0dGluZ3MuXHJcbiAgICAgKi9cclxuICAgIGNvbmZpZ3VyZVNldHRpbmdzKCkge1xyXG4gICAgICAgIHRoaXMuY29uZmlnLl9hZGRPblNldHRpbmdDaGFuZ2VkTGlzdGVuZXIoX0NvbmZpZ19Db25maWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXy5GbGFncy5Jc1F1YWxpdHlDb250cm9sbGVyLCAod2FudHNRdWFsaXR5Q29udHJvbGxlcikgPT4ge1xyXG4gICAgICAgICAgICAvLyBJZiB0aGUgc2V0dGluZyBoYXMgYmVlbiBzZXQgdG8gdHJ1ZSAoZWl0aGVyIHByb2dyYW1hdGljYWxseSBvciB0aGUgdXNlciBoYXMgZmxpY2tlZCB0aGUgdG9nZ2xlKVxyXG4gICAgICAgICAgICAvLyBhbmQgd2UgYXJlbid0IGN1cnJlbnRseSBxdWFsaXR5IGNvbnRyb2xsZXIsIHNlbmQgdGhlIHJlcXVlc3RcclxuICAgICAgICAgICAgaWYgKHdhbnRzUXVhbGl0eUNvbnRyb2xsZXIgPT09IHRydWUgJiZcclxuICAgICAgICAgICAgICAgICF0aGlzLl93ZWJSdGNDb250cm9sbGVyLmlzUXVhbGl0eUNvbnRyb2xsZXIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3dlYlJ0Y0NvbnRyb2xsZXIuc2VuZFJlcXVlc3RRdWFsaXR5Q29udHJvbE93bmVyc2hpcCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5jb25maWcuX2FkZE9uU2V0dGluZ0NoYW5nZWRMaXN0ZW5lcihfQ29uZmlnX0NvbmZpZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fLkZsYWdzLkFGS0RldGVjdGlvbiwgKGlzQUZLRW5hYmxlZCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLl93ZWJSdGNDb250cm9sbGVyLnNldEFma0VuYWJsZWQoaXNBRktFbmFibGVkKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmNvbmZpZy5fYWRkT25TZXR0aW5nQ2hhbmdlZExpc3RlbmVyKF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18uRmxhZ3MuTWF0Y2hWaWV3cG9ydFJlc29sdXRpb24sICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5fd2ViUnRjQ29udHJvbGxlci52aWRlb1BsYXllci51cGRhdGVWaWRlb1N0cmVhbVNpemUoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmNvbmZpZy5fYWRkT25TZXR0aW5nQ2hhbmdlZExpc3RlbmVyKF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18uRmxhZ3MuSG92ZXJpbmdNb3VzZU1vZGUsIChpc0hvdmVyaW5nTW91c2UpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5jb25maWcuc2V0RmxhZ0xhYmVsKF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18uRmxhZ3MuSG92ZXJpbmdNb3VzZU1vZGUsIGBDb250cm9sIFNjaGVtZTogJHtpc0hvdmVyaW5nTW91c2UgPyAnSG92ZXJpbmcnIDogJ0xvY2tlZCd9IE1vdXNlYCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3dlYlJ0Y0NvbnRyb2xsZXIuc2V0TW91c2VJbnB1dEVuYWJsZWQodGhpcy5jb25maWcuaXNGbGFnRW5hYmxlZChfQ29uZmlnX0NvbmZpZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fLkZsYWdzLk1vdXNlSW5wdXQpKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyB1c2VyIGlucHV0XHJcbiAgICAgICAgdGhpcy5jb25maWcuX2FkZE9uU2V0dGluZ0NoYW5nZWRMaXN0ZW5lcihfQ29uZmlnX0NvbmZpZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fLkZsYWdzLktleWJvYXJkSW5wdXQsIChpc0VuYWJsZWQpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5fd2ViUnRjQ29udHJvbGxlci5zZXRLZXlib2FyZElucHV0RW5hYmxlZChpc0VuYWJsZWQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuY29uZmlnLl9hZGRPblNldHRpbmdDaGFuZ2VkTGlzdGVuZXIoX0NvbmZpZ19Db25maWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXy5GbGFncy5Nb3VzZUlucHV0LCAoaXNFbmFibGVkKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuX3dlYlJ0Y0NvbnRyb2xsZXIuc2V0TW91c2VJbnB1dEVuYWJsZWQoaXNFbmFibGVkKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmNvbmZpZy5fYWRkT25TZXR0aW5nQ2hhbmdlZExpc3RlbmVyKF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18uRmxhZ3MuVG91Y2hJbnB1dCwgKGlzRW5hYmxlZCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLl93ZWJSdGNDb250cm9sbGVyLnNldFRvdWNoSW5wdXRFbmFibGVkKGlzRW5hYmxlZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5jb25maWcuX2FkZE9uU2V0dGluZ0NoYW5nZWRMaXN0ZW5lcihfQ29uZmlnX0NvbmZpZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fLkZsYWdzLkdhbWVwYWRJbnB1dCwgKGlzRW5hYmxlZCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLl93ZWJSdGNDb250cm9sbGVyLnNldEdhbWVQYWRJbnB1dEVuYWJsZWQoaXNFbmFibGVkKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyBlbmNvZGVyIHNldHRpbmdzXHJcbiAgICAgICAgdGhpcy5jb25maWcuX2FkZE9uTnVtZXJpY1NldHRpbmdDaGFuZ2VkTGlzdGVuZXIoX0NvbmZpZ19Db25maWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXy5OdW1lcmljUGFyYW1ldGVycy5NaW5RUCwgKG5ld1ZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksICctLS0tLS0tLSAgU2VuZGluZyBNaW5RUCAgLS0tLS0tLS0nLCA3KTtcclxuICAgICAgICAgICAgdGhpcy5fd2ViUnRjQ29udHJvbGxlci5zZW5kRW5jb2Rlck1pblFQKG5ld1ZhbHVlKTtcclxuICAgICAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0nLCA3KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmNvbmZpZy5fYWRkT25OdW1lcmljU2V0dGluZ0NoYW5nZWRMaXN0ZW5lcihfQ29uZmlnX0NvbmZpZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fLk51bWVyaWNQYXJhbWV0ZXJzLk1heFFQLCAobmV3VmFsdWUpID0+IHtcclxuICAgICAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJy0tLS0tLS0tICBTZW5kaW5nIGVuY29kZXIgc2V0dGluZ3MgIC0tLS0tLS0tJywgNyk7XHJcbiAgICAgICAgICAgIHRoaXMuX3dlYlJ0Y0NvbnRyb2xsZXIuc2VuZEVuY29kZXJNYXhRUChuZXdWYWx1ZSk7XHJcbiAgICAgICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksICctLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tJywgNyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy8gV2ViUlRDIHNldHRpbmdzXHJcbiAgICAgICAgdGhpcy5jb25maWcuX2FkZE9uTnVtZXJpY1NldHRpbmdDaGFuZ2VkTGlzdGVuZXIoX0NvbmZpZ19Db25maWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXy5OdW1lcmljUGFyYW1ldGVycy5XZWJSVENNaW5CaXRyYXRlLCAobmV3VmFsdWUpID0+IHtcclxuICAgICAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJy0tLS0tLS0tICBTZW5kaW5nIHdlYiBydGMgc2V0dGluZ3MgIC0tLS0tLS0tJywgNyk7XHJcbiAgICAgICAgICAgIHRoaXMuX3dlYlJ0Y0NvbnRyb2xsZXIuc2VuZFdlYlJUQ01pbkJpdHJhdGUobmV3VmFsdWUgKiAxMDAwIC8qIGticHMgdG8gYnBzICovKTtcclxuICAgICAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0nLCA3KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmNvbmZpZy5fYWRkT25OdW1lcmljU2V0dGluZ0NoYW5nZWRMaXN0ZW5lcihfQ29uZmlnX0NvbmZpZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fLk51bWVyaWNQYXJhbWV0ZXJzLldlYlJUQ01heEJpdHJhdGUsIChuZXdWYWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnLS0tLS0tLS0gIFNlbmRpbmcgd2ViIHJ0YyBzZXR0aW5ncyAgLS0tLS0tLS0nLCA3KTtcclxuICAgICAgICAgICAgdGhpcy5fd2ViUnRjQ29udHJvbGxlci5zZW5kV2ViUlRDTWF4Qml0cmF0ZShuZXdWYWx1ZSAqIDEwMDAgLyoga2JwcyB0byBicHMgKi8pO1xyXG4gICAgICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLScsIDcpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuY29uZmlnLl9hZGRPbk51bWVyaWNTZXR0aW5nQ2hhbmdlZExpc3RlbmVyKF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18uTnVtZXJpY1BhcmFtZXRlcnMuV2ViUlRDRlBTLCAobmV3VmFsdWUpID0+IHtcclxuICAgICAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJy0tLS0tLS0tICBTZW5kaW5nIHdlYiBydGMgc2V0dGluZ3MgIC0tLS0tLS0tJywgNyk7XHJcbiAgICAgICAgICAgIHRoaXMuX3dlYlJ0Y0NvbnRyb2xsZXIuc2VuZFdlYlJUQ0ZwcyhuZXdWYWx1ZSk7XHJcbiAgICAgICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksICctLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tJywgNyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5jb25maWcuX2FkZE9uT3B0aW9uU2V0dGluZ0NoYW5nZWRMaXN0ZW5lcihfQ29uZmlnX0NvbmZpZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fLk9wdGlvblBhcmFtZXRlcnMuUHJlZmVycmVkQ29kZWMsIChuZXdWYWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fd2ViUnRjQ29udHJvbGxlcikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fd2ViUnRjQ29udHJvbGxlci5zZXRQcmVmZXJyZWRDb2RlYyhuZXdWYWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmNvbmZpZy5fcmVnaXN0ZXJPbkNoYW5nZUV2ZW50cyh0aGlzLl9ldmVudEVtaXR0ZXIpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBBY3RpdmF0ZSB0aGUgb24gc2NyZWVuIGtleWJvYXJkIHdoZW4gcmVjZWl2aW5nIHRoZSBjb21tYW5kIGZyb20gdGhlIHN0cmVhbWVyXHJcbiAgICAgKiBAcGFyYW0gY29tbWFuZCAtIHRoZSBrZXlib2FyZCBjb21tYW5kXHJcbiAgICAgKi9cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcclxuICAgIF9hY3RpdmF0ZU9uU2NyZWVuS2V5Ym9hcmQoY29tbWFuZCkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC4nKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogU2V0IHRoZSBpbnB1dCBjb250cm9sIG93bmVyc2hpcFxyXG4gICAgICogQHBhcmFtIGlucHV0Q29udHJvbE93bmVyc2hpcCAtIGRvZXMgdGhlIHVzZXIgaGF2ZSBpbnB1dCBjb250cm9sIG93bmVyc2hpcFxyXG4gICAgICovXHJcbiAgICBfb25JbnB1dENvbnRyb2xPd25lcnNoaXAoaW5wdXRDb250cm9sT3duZXJzaGlwKSB7XHJcbiAgICAgICAgdGhpcy5faW5wdXRDb250cm9sbGVyID0gaW5wdXRDb250cm9sT3duZXJzaGlwO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBJbnN0YW50aWF0ZSB0aGUgV2ViUlRDUGxheWVyQ29udHJvbGxlciBpbnRlcmZhY2UgdG8gcHJvdmlkZSBXZWJSVENQbGF5ZXJDb250cm9sbGVyIGZ1bmN0aW9uYWxpdHkgd2l0aGluIHRoaXMgY2xhc3MgYW5kIHNldCB1cCBhbnl0aGluZyB0aGF0IHJlcXVpcmVzIGl0XHJcbiAgICAgKiBAcGFyYW0gd2ViUnRjUGxheWVyQ29udHJvbGxlciAtIGEgV2ViUnRjUGxheWVyQ29udHJvbGxlciBjb250cm9sbGVyIGluc3RhbmNlXHJcbiAgICAgKi9cclxuICAgIHNldFdlYlJ0Y1BsYXllckNvbnRyb2xsZXIod2ViUnRjUGxheWVyQ29udHJvbGxlcikge1xyXG4gICAgICAgIHRoaXMuX3dlYlJ0Y0NvbnRyb2xsZXIgPSB3ZWJSdGNQbGF5ZXJDb250cm9sbGVyO1xyXG4gICAgICAgIHRoaXMuX3dlYlJ0Y0NvbnRyb2xsZXIuc2V0UHJlZmVycmVkQ29kZWModGhpcy5jb25maWcuZ2V0U2V0dGluZ09wdGlvbihfQ29uZmlnX0NvbmZpZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fLk9wdGlvblBhcmFtZXRlcnMuUHJlZmVycmVkQ29kZWMpXHJcbiAgICAgICAgICAgIC5zZWxlY3RlZCk7XHJcbiAgICAgICAgdGhpcy5fd2ViUnRjQ29udHJvbGxlci5yZXNpemVQbGF5ZXJTdHlsZSgpO1xyXG4gICAgICAgIC8vIGNvbm5lY3QgaWYgYXV0byBjb25uZWN0IGZsYWcgaXMgZW5hYmxlZFxyXG4gICAgICAgIHRoaXMuY2hlY2tGb3JBdXRvQ29ubmVjdCgpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDb25uZWN0IHRvIHNpZ25hbGluZyBzZXJ2ZXIuXHJcbiAgICAgKi9cclxuICAgIGNvbm5lY3QoKSB7XHJcbiAgICAgICAgdGhpcy5fZXZlbnRFbWl0dGVyLmRpc3BhdGNoRXZlbnQobmV3IF9VdGlsX0V2ZW50RW1pdHRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLlN0cmVhbVByZUNvbm5lY3RFdmVudCgpKTtcclxuICAgICAgICB0aGlzLl93ZWJSdGNDb250cm9sbGVyLmNvbm5lY3RUb1NpZ25hbGxpbmdTZXJ2ZXIoKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmVjb25uZWN0cyB0byB0aGUgc2lnbmFsaW5nIHNlcnZlci4gSWYgY29ubmVjdGlvbiBpcyB1cCwgZGlzY29ubmVjdHMgZmlyc3RcclxuICAgICAqIGJlZm9yZSBlc3RhYmxpc2hpbmcgYSBuZXcgY29ubmVjdGlvblxyXG4gICAgICovXHJcbiAgICByZWNvbm5lY3QoKSB7XHJcbiAgICAgICAgdGhpcy5fZXZlbnRFbWl0dGVyLmRpc3BhdGNoRXZlbnQobmV3IF9VdGlsX0V2ZW50RW1pdHRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLlN0cmVhbVJlY29ubmVjdEV2ZW50KCkpO1xyXG4gICAgICAgIHRoaXMuX3dlYlJ0Y0NvbnRyb2xsZXIucmVzdGFydFN0cmVhbUF1dG9tYXRpY2FsbHkoKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogRGlzY29ubmVjdCBmcm9tIHRoZSBzaWduYWxpbmcgc2VydmVyIGFuZCBjbG9zZSBvcGVuIHBlZXIgY29ubmVjdGlvbnMuXHJcbiAgICAgKi9cclxuICAgIGRpc2Nvbm5lY3QoKSB7XHJcbiAgICAgICAgdGhpcy5fZXZlbnRFbWl0dGVyLmRpc3BhdGNoRXZlbnQobmV3IF9VdGlsX0V2ZW50RW1pdHRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLlN0cmVhbVByZURpc2Nvbm5lY3RFdmVudCgpKTtcclxuICAgICAgICB0aGlzLl93ZWJSdGNDb250cm9sbGVyLmNsb3NlKCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFBsYXkgdGhlIHN0cmVhbS4gQ2FuIGJlIGNhbGxlZCBvbmx5IGFmdGVyIGEgcGVlciBjb25uZWN0aW9uIGhhcyBiZWVuIGVzdGFibGlzaGVkLlxyXG4gICAgICovXHJcbiAgICBwbGF5KCkge1xyXG4gICAgICAgIHRoaXMuX29uU3RyZWFtTG9hZGluZygpO1xyXG4gICAgICAgIHRoaXMuX3dlYlJ0Y0NvbnRyb2xsZXIucGxheVN0cmVhbSgpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBBdXRvIGNvbm5lY3QgaWYgQXV0b0Nvbm5lY3QgZmxhZyBpcyBlbmFibGVkXHJcbiAgICAgKi9cclxuICAgIGNoZWNrRm9yQXV0b0Nvbm5lY3QoKSB7XHJcbiAgICAgICAgLy8gc2V0IHVwIGlmIHRoZSBhdXRvIHBsYXkgd2lsbCBiZSB1c2VkIG9yIHJlZ3VsYXIgY2xpY2sgdG8gc3RhcnRcclxuICAgICAgICBpZiAodGhpcy5jb25maWcuaXNGbGFnRW5hYmxlZChfQ29uZmlnX0NvbmZpZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fLkZsYWdzLkF1dG9Db25uZWN0KSkge1xyXG4gICAgICAgICAgICAvLyBpZiBhdXRvcGxheWluZyBzaG93IGFuIGluZm8gb3ZlcmxheSB3aGlsZSB3aGlsZSB3YWl0aW5nIGZvciB0aGUgY29ubmVjdGlvbiB0byBiZWdpblxyXG4gICAgICAgICAgICB0aGlzLl9vbldlYlJ0Y0F1dG9Db25uZWN0KCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3dlYlJ0Y0NvbnRyb2xsZXIuY29ubmVjdFRvU2lnbmFsbGluZ1NlcnZlcigpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogRW1pdCBhbiBldmVudCBvbiBhdXRvIGNvbm5lY3RpbmdcclxuICAgICAqL1xyXG4gICAgX29uV2ViUnRjQXV0b0Nvbm5lY3QoKSB7XHJcbiAgICAgICAgdGhpcy5fZXZlbnRFbWl0dGVyLmRpc3BhdGNoRXZlbnQobmV3IF9VdGlsX0V2ZW50RW1pdHRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLldlYlJ0Y0F1dG9Db25uZWN0RXZlbnQoKSk7XHJcbiAgICAgICAgdGhpcy5fc2hvd0FjdGlvbk9yRXJyb3JPbkRpc2Nvbm5lY3QgPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgdXAgZnVuY3Rpb25hbGl0eSB0byBoYXBwZW4gd2hlbiByZWNlaXZpbmcgYSB3ZWJSVEMgYW5zd2VyXHJcbiAgICAgKi9cclxuICAgIF9vbldlYlJ0Y1NkcCgpIHtcclxuICAgICAgICB0aGlzLl9ldmVudEVtaXR0ZXIuZGlzcGF0Y2hFdmVudChuZXcgX1V0aWxfRXZlbnRFbWl0dGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uV2ViUnRjU2RwRXZlbnQoKSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEVtaXRzIGEgU3RyZWFtTG9hZGluZyBldmVudFxyXG4gICAgICovXHJcbiAgICBfb25TdHJlYW1Mb2FkaW5nKCkge1xyXG4gICAgICAgIHRoaXMuX2V2ZW50RW1pdHRlci5kaXNwYXRjaEV2ZW50KG5ldyBfVXRpbF9FdmVudEVtaXR0ZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5TdHJlYW1Mb2FkaW5nRXZlbnQoKSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEV2ZW50IGZpcmVkIHdoZW4gdGhlIHZpZGVvIGlzIGRpc2Nvbm5lY3RlZCAtIGVtaXRzIGdpdmVuIGV2ZW50U3RyaW5nIG9yIGFuIG92ZXJyaWRlXHJcbiAgICAgKiBtZXNzYWdlIGZyb20gd2ViUnRjQ29udHJvbGxlciBpZiBvbmUgaGFzIGJlZW4gc2V0XHJcbiAgICAgKiBAcGFyYW0gZXZlbnRTdHJpbmcgLSB0aGUgZXZlbnQgdGV4dCB0aGF0IHdpbGwgYmUgZW1pdHRlZFxyXG4gICAgICovXHJcbiAgICBfb25EaXNjb25uZWN0KGV2ZW50U3RyaW5nKSB7XHJcbiAgICAgICAgLy8gaWYgd2UgaGF2ZSBvdmVycmlkZGVuIHRoZSBkZWZhdWx0IGRpc2Nvbm5lY3Rpb24gbWVzc2FnZSwgYXNzaWduIHRoZSBuZXcgdmFsdWUgaGVyZVxyXG4gICAgICAgIGlmICh0aGlzLl93ZWJSdGNDb250cm9sbGVyLmdldERpc2Nvbm5lY3RNZXNzYWdlT3ZlcnJpZGUoKSAhPSAnJyAmJlxyXG4gICAgICAgICAgICB0aGlzLl93ZWJSdGNDb250cm9sbGVyLmdldERpc2Nvbm5lY3RNZXNzYWdlT3ZlcnJpZGUoKSAhPT1cclxuICAgICAgICAgICAgICAgIHVuZGVmaW5lZCAmJlxyXG4gICAgICAgICAgICB0aGlzLl93ZWJSdGNDb250cm9sbGVyLmdldERpc2Nvbm5lY3RNZXNzYWdlT3ZlcnJpZGUoKSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIGV2ZW50U3RyaW5nID0gdGhpcy5fd2ViUnRjQ29udHJvbGxlci5nZXREaXNjb25uZWN0TWVzc2FnZU92ZXJyaWRlKCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3dlYlJ0Y0NvbnRyb2xsZXIuc2V0RGlzY29ubmVjdE1lc3NhZ2VPdmVycmlkZSgnJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX2V2ZW50RW1pdHRlci5kaXNwYXRjaEV2ZW50KG5ldyBfVXRpbF9FdmVudEVtaXR0ZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5XZWJSdGNEaXNjb25uZWN0ZWRFdmVudCh7XHJcbiAgICAgICAgICAgIGV2ZW50U3RyaW5nLFxyXG4gICAgICAgICAgICBzaG93QWN0aW9uT3JFcnJvck9uRGlzY29ubmVjdDogdGhpcy5fc2hvd0FjdGlvbk9yRXJyb3JPbkRpc2Nvbm5lY3RcclxuICAgICAgICB9KSk7XHJcbiAgICAgICAgaWYgKHRoaXMuX3Nob3dBY3Rpb25PckVycm9yT25EaXNjb25uZWN0ID09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3Nob3dBY3Rpb25PckVycm9yT25EaXNjb25uZWN0ID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEhhbmRsZXMgd2hlbiBXZWIgUnRjIGlzIGNvbm5lY3RpbmdcclxuICAgICAqL1xyXG4gICAgX29uV2ViUnRjQ29ubmVjdGluZygpIHtcclxuICAgICAgICB0aGlzLl9ldmVudEVtaXR0ZXIuZGlzcGF0Y2hFdmVudChuZXcgX1V0aWxfRXZlbnRFbWl0dGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uV2ViUnRjQ29ubmVjdGluZ0V2ZW50KCkpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBIYW5kbGVzIHdoZW4gV2ViIFJ0YyBoYXMgY29ubmVjdGVkXHJcbiAgICAgKi9cclxuICAgIF9vbldlYlJ0Y0Nvbm5lY3RlZCgpIHtcclxuICAgICAgICB0aGlzLl9ldmVudEVtaXR0ZXIuZGlzcGF0Y2hFdmVudChuZXcgX1V0aWxfRXZlbnRFbWl0dGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uV2ViUnRjQ29ubmVjdGVkRXZlbnQoKSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEhhbmRsZXMgd2hlbiBXZWIgUnRjIGZhaWxzIHRvIGNvbm5lY3RcclxuICAgICAqL1xyXG4gICAgX29uV2ViUnRjRmFpbGVkKCkge1xyXG4gICAgICAgIHRoaXMuX2V2ZW50RW1pdHRlci5kaXNwYXRjaEV2ZW50KG5ldyBfVXRpbF9FdmVudEVtaXR0ZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5XZWJSdGNGYWlsZWRFdmVudCgpKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlIHdoZW4gdGhlIFZpZGVvIGhhcyBiZWVuIEluaXRpYWxpemVkXHJcbiAgICAgKi9cclxuICAgIF9vblZpZGVvSW5pdGlhbGl6ZWQoKSB7XHJcbiAgICAgICAgdGhpcy5fZXZlbnRFbWl0dGVyLmRpc3BhdGNoRXZlbnQobmV3IF9VdGlsX0V2ZW50RW1pdHRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLlZpZGVvSW5pdGlhbGl6ZWRFdmVudCgpKTtcclxuICAgICAgICB0aGlzLl92aWRlb1N0YXJ0VGltZSA9IERhdGUubm93KCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFNldCB1cCBmdW5jdGlvbmFsaXR5IHRvIGhhcHBlbiB3aGVuIHJlY2VpdmluZyBsYXRlbmN5IHRlc3QgcmVzdWx0c1xyXG4gICAgICogQHBhcmFtIGxhdGVuY3kgLSBsYXRlbmN5IHRlc3QgcmVzdWx0cyBvYmplY3RcclxuICAgICAqL1xyXG4gICAgX29uTGF0ZW5jeVRlc3RSZXN1bHQobGF0ZW5jeVRpbWluZ3MpIHtcclxuICAgICAgICB0aGlzLl9ldmVudEVtaXR0ZXIuZGlzcGF0Y2hFdmVudChuZXcgX1V0aWxfRXZlbnRFbWl0dGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uTGF0ZW5jeVRlc3RSZXN1bHRFdmVudCh7IGxhdGVuY3lUaW1pbmdzIH0pKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogU2V0IHVwIGZ1bmN0aW9uYWxpdHkgdG8gaGFwcGVuIHdoZW4gcmVjZWl2aW5nIHZpZGVvIHN0YXRpc3RpY3NcclxuICAgICAqIEBwYXJhbSB2aWRlb1N0YXRzIC0gdmlkZW8gc3RhdGlzdGljcyBhcyBhIGFnZ3JlZ2F0ZSBzdGF0cyBvYmplY3RcclxuICAgICAqL1xyXG4gICAgX29uVmlkZW9TdGF0cyh2aWRlb1N0YXRzKSB7XHJcbiAgICAgICAgLy8gRHVyYXRpb25cclxuICAgICAgICBpZiAoIXRoaXMuX3ZpZGVvU3RhcnRUaW1lIHx8IHRoaXMuX3ZpZGVvU3RhcnRUaW1lID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5fdmlkZW9TdGFydFRpbWUgPSBEYXRlLm5vdygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2aWRlb1N0YXRzLmhhbmRsZVNlc3Npb25TdGF0aXN0aWNzKHRoaXMuX3ZpZGVvU3RhcnRUaW1lLCB0aGlzLl9pbnB1dENvbnRyb2xsZXIsIHRoaXMuX3dlYlJ0Y0NvbnRyb2xsZXIudmlkZW9BdmdRcCk7XHJcbiAgICAgICAgdGhpcy5fZXZlbnRFbWl0dGVyLmRpc3BhdGNoRXZlbnQobmV3IF9VdGlsX0V2ZW50RW1pdHRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLlN0YXRzUmVjZWl2ZWRFdmVudCh7IGFnZ3JlZ2F0ZWRTdGF0czogdmlkZW9TdGF0cyB9KSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFNldCB1cCBmdW5jdGlvbmFsaXR5IHRvIGhhcHBlbiB3aGVuIGNhbGN1bGF0aW5nIHRoZSBhdmVyYWdlIHZpZGVvIGVuY29kZXIgcXBcclxuICAgICAqIEBwYXJhbSBRUCAtIHRoZSBxdWFsaXR5IG51bWJlciBvZiB0aGUgc3RyZWFtXHJcbiAgICAgKi9cclxuICAgIF9vblZpZGVvRW5jb2RlckF2Z1FQKFFQKSB7XHJcbiAgICAgICAgdGhpcy5fZXZlbnRFbWl0dGVyLmRpc3BhdGNoRXZlbnQobmV3IF9VdGlsX0V2ZW50RW1pdHRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLlZpZGVvRW5jb2RlckF2Z1FQRXZlbnQoeyBhdmdRUDogUVAgfSkpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgdXAgZnVuY3Rpb25hbGl0eSB0byBoYXBwZW4gd2hlbiByZWNlaXZpbmcgYW5kIGhhbmRsaW5nIGluaXRpYWwgc2V0dGluZ3MgZm9yIHRoZSBVRSBhcHBcclxuICAgICAqIEBwYXJhbSBzZXR0aW5ncyAtIGluaXRpYWwgVUUgYXBwIHNldHRpbmdzXHJcbiAgICAgKi9cclxuICAgIF9vbkluaXRpYWxTZXR0aW5ncyhzZXR0aW5ncykge1xyXG4gICAgICAgIHZhciBfYTtcclxuICAgICAgICB0aGlzLl9ldmVudEVtaXR0ZXIuZGlzcGF0Y2hFdmVudChuZXcgX1V0aWxfRXZlbnRFbWl0dGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uSW5pdGlhbFNldHRpbmdzRXZlbnQoeyBzZXR0aW5ncyB9KSk7XHJcbiAgICAgICAgaWYgKHNldHRpbmdzLlBpeGVsU3RyZWFtaW5nU2V0dGluZ3MpIHtcclxuICAgICAgICAgICAgdGhpcy5hbGxvd0NvbnNvbGVDb21tYW5kcyA9XHJcbiAgICAgICAgICAgICAgICAoX2EgPSBzZXR0aW5ncy5QaXhlbFN0cmVhbWluZ1NldHRpbmdzLkFsbG93UGl4ZWxTdHJlYW1pbmdDb21tYW5kcykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogZmFsc2U7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmFsbG93Q29uc29sZUNvbW1hbmRzID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfXy5Mb2dnZXIuSW5mbyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksICctQWxsb3dQaXhlbFN0cmVhbWluZ0NvbW1hbmRzPWZhbHNlLCBzZW5kaW5nIGFyYml0cmFyeSBjb25zb2xlIGNvbW1hbmRzIGZyb20gYnJvd3NlciB0byBVRSBpcyBkaXNhYmxlZC4nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCB1c2VVcmxQYXJhbXMgPSB0aGlzLmNvbmZpZy51c2VVcmxQYXJhbXM7XHJcbiAgICAgICAgY29uc3QgdXJsUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh3aW5kb3cubG9jYXRpb24uc2VhcmNoKTtcclxuICAgICAgICBpZiAoc2V0dGluZ3MuRW5jb2RlclNldHRpbmdzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29uZmlnLnNldE51bWVyaWNTZXR0aW5nKF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18uTnVtZXJpY1BhcmFtZXRlcnMuTWluUVAsIFxyXG4gICAgICAgICAgICAvLyBJZiBhIHNldHRpbmcgaXMgc2V0IGluIHRoZSBVUkwsIG1ha2Ugc3VyZSB3ZSByZXNwZWN0IHRoYXQgdmFsdWUgYXMgb3Bwb3NlZCB0byB3aGF0IHRoZSBhcHBsaWNhdGlvbiBzZW5kcyB1c1xyXG4gICAgICAgICAgICAodXNlVXJsUGFyYW1zICYmIHVybFBhcmFtcy5oYXMoX0NvbmZpZ19Db25maWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXy5OdW1lcmljUGFyYW1ldGVycy5NaW5RUCkpXHJcbiAgICAgICAgICAgICAgICA/IE51bWJlci5wYXJzZUludCh1cmxQYXJhbXMuZ2V0KF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18uTnVtZXJpY1BhcmFtZXRlcnMuTWluUVApKVxyXG4gICAgICAgICAgICAgICAgOiBzZXR0aW5ncy5FbmNvZGVyU2V0dGluZ3MuTWluUVApO1xyXG4gICAgICAgICAgICB0aGlzLmNvbmZpZy5zZXROdW1lcmljU2V0dGluZyhfQ29uZmlnX0NvbmZpZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fLk51bWVyaWNQYXJhbWV0ZXJzLk1heFFQLCAodXNlVXJsUGFyYW1zICYmIHVybFBhcmFtcy5oYXMoX0NvbmZpZ19Db25maWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXy5OdW1lcmljUGFyYW1ldGVycy5NYXhRUCkpXHJcbiAgICAgICAgICAgICAgICA/IE51bWJlci5wYXJzZUludCh1cmxQYXJhbXMuZ2V0KF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18uTnVtZXJpY1BhcmFtZXRlcnMuTWF4UVApKVxyXG4gICAgICAgICAgICAgICAgOiBzZXR0aW5ncy5FbmNvZGVyU2V0dGluZ3MuTWF4UVApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoc2V0dGluZ3MuV2ViUlRDU2V0dGluZ3MpIHtcclxuICAgICAgICAgICAgdGhpcy5jb25maWcuc2V0TnVtZXJpY1NldHRpbmcoX0NvbmZpZ19Db25maWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXy5OdW1lcmljUGFyYW1ldGVycy5XZWJSVENNaW5CaXRyYXRlLCAodXNlVXJsUGFyYW1zICYmIHVybFBhcmFtcy5oYXMoX0NvbmZpZ19Db25maWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXy5OdW1lcmljUGFyYW1ldGVycy5XZWJSVENNaW5CaXRyYXRlKSlcclxuICAgICAgICAgICAgICAgID8gTnVtYmVyLnBhcnNlSW50KHVybFBhcmFtcy5nZXQoX0NvbmZpZ19Db25maWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXy5OdW1lcmljUGFyYW1ldGVycy5XZWJSVENNaW5CaXRyYXRlKSkgLyAxMDAwIC8qIGJwcyB0byBrYnBzICovXHJcbiAgICAgICAgICAgICAgICA6IHNldHRpbmdzLldlYlJUQ1NldHRpbmdzLk1pbkJpdHJhdGUgLyAxMDAwIC8qIGJwcyB0byBrYnBzICovKTtcclxuICAgICAgICAgICAgdGhpcy5jb25maWcuc2V0TnVtZXJpY1NldHRpbmcoX0NvbmZpZ19Db25maWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXy5OdW1lcmljUGFyYW1ldGVycy5XZWJSVENNYXhCaXRyYXRlLCAodXNlVXJsUGFyYW1zICYmIHVybFBhcmFtcy5oYXMoX0NvbmZpZ19Db25maWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXy5OdW1lcmljUGFyYW1ldGVycy5XZWJSVENNYXhCaXRyYXRlKSlcclxuICAgICAgICAgICAgICAgID8gTnVtYmVyLnBhcnNlSW50KHVybFBhcmFtcy5nZXQoX0NvbmZpZ19Db25maWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXy5OdW1lcmljUGFyYW1ldGVycy5XZWJSVENNYXhCaXRyYXRlKSkgLyAxMDAwIC8qIGJwcyB0byBrYnBzICovXHJcbiAgICAgICAgICAgICAgICA6IHNldHRpbmdzLldlYlJUQ1NldHRpbmdzLk1heEJpdHJhdGUgLyAxMDAwIC8qIGJwcyB0byBrYnBzICovKTtcclxuICAgICAgICAgICAgdGhpcy5jb25maWcuc2V0TnVtZXJpY1NldHRpbmcoX0NvbmZpZ19Db25maWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXy5OdW1lcmljUGFyYW1ldGVycy5XZWJSVENGUFMsICh1c2VVcmxQYXJhbXMgJiYgdXJsUGFyYW1zLmhhcyhfQ29uZmlnX0NvbmZpZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fLk51bWVyaWNQYXJhbWV0ZXJzLldlYlJUQ0ZQUykpXHJcbiAgICAgICAgICAgICAgICA/IE51bWJlci5wYXJzZUludCh1cmxQYXJhbXMuZ2V0KF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18uTnVtZXJpY1BhcmFtZXRlcnMuV2ViUlRDRlBTKSlcclxuICAgICAgICAgICAgICAgIDogc2V0dGluZ3MuV2ViUlRDU2V0dGluZ3MuRlBTKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFNldCB1cCBmdW5jdGlvbmFsaXR5IHRvIGhhcHBlbiB3aGVuIHNldHRpbmcgcXVhbGl0eSBjb250cm9sIG93bmVyc2hpcCBvZiBhIHN0cmVhbVxyXG4gICAgICogQHBhcmFtIGhhc1F1YWxpdHlPd25lcnNoaXAgLSBkb2VzIHRoaXMgdXNlciBoYXZlIHF1YWxpdHkgb3duZXJzaGlwIG9mIHRoZSBzdHJlYW0gdHJ1ZSAvIGZhbHNlXHJcbiAgICAgKi9cclxuICAgIF9vblF1YWxpdHlDb250cm9sT3duZXJzaGlwKGhhc1F1YWxpdHlPd25lcnNoaXApIHtcclxuICAgICAgICB0aGlzLmNvbmZpZy5zZXRGbGFnRW5hYmxlZChfQ29uZmlnX0NvbmZpZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fLkZsYWdzLklzUXVhbGl0eUNvbnRyb2xsZXIsIGhhc1F1YWxpdHlPd25lcnNoaXApO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXF1ZXN0IGEgY29ubmVjdGlvbiBsYXRlbmN5IHRlc3QuXHJcbiAgICAgKiBOT1RFOiBUaGVyZSBhcmUgcGxhbnMgdG8gcmVmYWN0b3IgYWxsIHJlcXVlc3QqIGZ1bmN0aW9ucy4gRXhwZWN0IGNoYW5nZXMgaWYgeW91IHVzZSB0aGlzIVxyXG4gICAgICogQHJldHVybnNcclxuICAgICAqL1xyXG4gICAgcmVxdWVzdExhdGVuY3lUZXN0KCkge1xyXG4gICAgICAgIGlmICghdGhpcy5fd2ViUnRjQ29udHJvbGxlci52aWRlb1BsYXllci5pc1ZpZGVvUmVhZHkoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX3dlYlJ0Y0NvbnRyb2xsZXIuc2VuZExhdGVuY3lUZXN0KCk7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJlcXVlc3QgZm9yIHRoZSBVRSBhcHBsaWNhdGlvbiB0byBzaG93IEZQUyBjb3VudGVyLlxyXG4gICAgICogTk9URTogVGhlcmUgYXJlIHBsYW5zIHRvIHJlZmFjdG9yIGFsbCByZXF1ZXN0KiBmdW5jdGlvbnMuIEV4cGVjdCBjaGFuZ2VzIGlmIHlvdSB1c2UgdGhpcyFcclxuICAgICAqIEByZXR1cm5zXHJcbiAgICAgKi9cclxuICAgIHJlcXVlc3RTaG93RnBzKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5fd2ViUnRjQ29udHJvbGxlci52aWRlb1BsYXllci5pc1ZpZGVvUmVhZHkoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX3dlYlJ0Y0NvbnRyb2xsZXIuc2VuZFNob3dGcHMoKTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmVxdWVzdCBmb3IgYSBuZXcgSUZyYW1lIGZyb20gdGhlIFVFIGFwcGxpY2F0aW9uLlxyXG4gICAgICogTk9URTogVGhlcmUgYXJlIHBsYW5zIHRvIHJlZmFjdG9yIGFsbCByZXF1ZXN0KiBmdW5jdGlvbnMuIEV4cGVjdCBjaGFuZ2VzIGlmIHlvdSB1c2UgdGhpcyFcclxuICAgICAqIEByZXR1cm5zXHJcbiAgICAgKi9cclxuICAgIHJlcXVlc3RJZnJhbWUoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLl93ZWJSdGNDb250cm9sbGVyLnZpZGVvUGxheWVyLmlzVmlkZW9SZWFkeSgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fd2ViUnRjQ29udHJvbGxlci5zZW5kSWZyYW1lUmVxdWVzdCgpO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTZW5kIGRhdGEgdG8gVUUgYXBwbGljYXRpb24uIFRoZSBkYXRhIHdpbGwgYmUgcnVuIHRocm91Z2ggSlNPTi5zdHJpbmdpZnkoKSBzbyBlLmcuIHN0cmluZ3NcclxuICAgICAqIGFuZCBhbnkgc2VyaWFsaXphYmxlIHBsYWluIEpTT04gb2JqZWN0cyB3aXRoIG5vIHJlY3VycmVuY2UgY2FuIGJlIHNlbnQuXHJcbiAgICAgKiBAcmV0dXJucyB0cnVlIGlmIHN1Y2NlZWRlZCwgZmFsc2UgaWYgcmVqZWN0ZWRcclxuICAgICAqL1xyXG4gICAgZW1pdFVJSW50ZXJhY3Rpb24oZGVzY3JpcHRvcikge1xyXG4gICAgICAgIGlmICghdGhpcy5fd2ViUnRjQ29udHJvbGxlci52aWRlb1BsYXllci5pc1ZpZGVvUmVhZHkoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX3dlYlJ0Y0NvbnRyb2xsZXIuZW1pdFVJSW50ZXJhY3Rpb24oZGVzY3JpcHRvcik7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFNlbmQgYSBjb21tYW5kIHRvIFVFIGFwcGxpY2F0aW9uLiBCbG9ja3MgQ29uc29sZUNvbW1hbmQgZGVzY3JpcHRvcnMgdW5sZXNzIFVFXHJcbiAgICAgKiBoYXMgc2lnbmFsZWQgdGhhdCBpdCBhbGxvd3MgY29uc29sZSBjb21tYW5kcy5cclxuICAgICAqIEByZXR1cm5zIHRydWUgaWYgc3VjY2VlZGVkLCBmYWxzZSBpZiByZWplY3RlZFxyXG4gICAgICovXHJcbiAgICBlbWl0Q29tbWFuZChkZXNjcmlwdG9yKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLl93ZWJSdGNDb250cm9sbGVyLnZpZGVvUGxheWVyLmlzVmlkZW9SZWFkeSgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCF0aGlzLmFsbG93Q29uc29sZUNvbW1hbmRzICYmICdDb25zb2xlQ29tbWFuZCcgaW4gZGVzY3JpcHRvcikge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX3dlYlJ0Y0NvbnRyb2xsZXIuZW1pdENvbW1hbmQoZGVzY3JpcHRvcik7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFNlbmQgYSBjb25zb2xlIGNvbW1hbmQgdG8gVUUgYXBwbGljYXRpb24uIE9ubHkgYWxsb3dlZCBpZiBVRSBoYXMgc2lnbmFsZWQgdGhhdCBpdCBhbGxvd3NcclxuICAgICAqIGNvbnNvbGUgY29tbWFuZHMuXHJcbiAgICAgKiBAcmV0dXJucyB0cnVlIGlmIHN1Y2NlZWRlZCwgZmFsc2UgaWYgcmVqZWN0ZWRcclxuICAgICAqL1xyXG4gICAgZW1pdENvbnNvbGVDb21tYW5kKGNvbW1hbmQpIHtcclxuICAgICAgICBpZiAoIXRoaXMuYWxsb3dDb25zb2xlQ29tbWFuZHMgfHwgIXRoaXMuX3dlYlJ0Y0NvbnRyb2xsZXIudmlkZW9QbGF5ZXIuaXNWaWRlb1JlYWR5KCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl93ZWJSdGNDb250cm9sbGVyLmVtaXRDb25zb2xlQ29tbWFuZChjb21tYW5kKTtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQWRkIGEgVUUgLT4gYnJvd3NlciByZXNwb25zZSBldmVudCBsaXN0ZW5lclxyXG4gICAgICogQHBhcmFtIG5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgcmVzcG9uc2UgaGFuZGxlclxyXG4gICAgICogQHBhcmFtIGxpc3RlbmVyIC0gVGhlIG1ldGhvZCB0byBiZSBhY3RpdmF0ZWQgd2hlbiBhIG1lc3NhZ2UgaXMgcmVjZWl2ZWRcclxuICAgICAqL1xyXG4gICAgYWRkUmVzcG9uc2VFdmVudExpc3RlbmVyKG5hbWUsIGxpc3RlbmVyKSB7XHJcbiAgICAgICAgdGhpcy5fd2ViUnRjQ29udHJvbGxlci5yZXNwb25zZUNvbnRyb2xsZXIuYWRkUmVzcG9uc2VFdmVudExpc3RlbmVyKG5hbWUsIGxpc3RlbmVyKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmVtb3ZlIGEgVUUgLT4gYnJvd3NlciByZXNwb25zZSBldmVudCBsaXN0ZW5lclxyXG4gICAgICogQHBhcmFtIG5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgcmVzcG9uc2UgaGFuZGxlclxyXG4gICAgICovXHJcbiAgICByZW1vdmVSZXNwb25zZUV2ZW50TGlzdGVuZXIobmFtZSkge1xyXG4gICAgICAgIHRoaXMuX3dlYlJ0Y0NvbnRyb2xsZXIucmVzcG9uc2VDb250cm9sbGVyLnJlbW92ZVJlc3BvbnNlRXZlbnRMaXN0ZW5lcihuYW1lKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogRGlzcGF0Y2ggYSBuZXcgZXZlbnQuXHJcbiAgICAgKiBAcGFyYW0gZSBldmVudFxyXG4gICAgICogQHJldHVybnNcclxuICAgICAqL1xyXG4gICAgZGlzcGF0Y2hFdmVudChlKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V2ZW50RW1pdHRlci5kaXNwYXRjaEV2ZW50KGUpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWdpc3RlciBhbiBldmVudCBoYW5kbGVyLlxyXG4gICAgICogQHBhcmFtIHR5cGUgZXZlbnQgbmFtZVxyXG4gICAgICogQHBhcmFtIGxpc3RlbmVyIGV2ZW50IGhhbmRsZXIgZnVuY3Rpb25cclxuICAgICAqL1xyXG4gICAgYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xyXG4gICAgICAgIHRoaXMuX2V2ZW50RW1pdHRlci5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmVtb3ZlIGFuIGV2ZW50IGhhbmRsZXIuXHJcbiAgICAgKiBAcGFyYW0gdHlwZSBldmVudCBuYW1lXHJcbiAgICAgKiBAcGFyYW0gbGlzdGVuZXIgZXZlbnQgaGFuZGxlciBmdW5jdGlvblxyXG4gICAgICovXHJcbiAgICByZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XHJcbiAgICAgICAgdGhpcy5fZXZlbnRFbWl0dGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBFbmFibGUvZGlzYWJsZSBYUiBtb2RlLlxyXG4gICAgICovXHJcbiAgICB0b2dnbGVYUigpIHtcclxuICAgICAgICB0aGlzLndlYlhyQ29udHJvbGxlci54ckNsaWNrZWQoKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUGFzcyBpbiBhIGZ1bmN0aW9uIHRvIGdlbmVyYXRlIGEgc2lnbmFsbGluZyBzZXJ2ZXIgVVJMLlxyXG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyB1c2VmdWwgaWYgeW91IG5lZWQgdG8gcHJvZ3JhbW1hdGljYWxseSBjb25zdHJ1Y3QgeW91ciBzaWduYWxsaW5nIHNlcnZlciBVUkwuXHJcbiAgICAgKiBAcGFyYW0gc2lnbmFsbGluZ1VybEJ1aWxkZXJGdW5jIEEgZnVuY3Rpb24gdGhhdCBnZW5lcmF0ZXMgYSBzaWduYWxsaW5nIHNlcnZlciB1cmwuXHJcbiAgICAgKi9cclxuICAgIHNldFNpZ25hbGxpbmdVcmxCdWlsZGVyKHNpZ25hbGxpbmdVcmxCdWlsZGVyRnVuYykge1xyXG4gICAgICAgIHRoaXMuX3dlYlJ0Y0NvbnRyb2xsZXIuc2lnbmFsbGluZ1VybEJ1aWxkZXIgPSBzaWduYWxsaW5nVXJsQnVpbGRlckZ1bmM7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFB1YmxpYyBnZXR0ZXIgZm9yIHRoZSB3ZWJzb2NrZXQgY29udHJvbGxlci4gQWNjZXNzIHRvIHRoaXMgcHJvcGVydHkgYWxsb3dzIHlvdSB0byBzZW5kXHJcbiAgICAgKiBjdXN0b20gd2Vic29ja2V0IG1lc3NhZ2VzLlxyXG4gICAgICovXHJcbiAgICBnZXQgd2ViU29ja2V0Q29udHJvbGxlcigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fd2ViUnRjQ29udHJvbGxlci53ZWJTb2NrZXRDb250cm9sbGVyO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBQdWJsaWMgZ2V0dGVyIGZvciB0aGUgd2ViWHJDb250cm9sbGVyIGNvbnRyb2xsZXIuIFVzZWQgZm9yIGFsbCBYUiBmZWF0dXJlcy5cclxuICAgICAqL1xyXG4gICAgZ2V0IHdlYlhyQ29udHJvbGxlcigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fd2ViWHJDb250cm9sbGVyO1xyXG4gICAgfVxyXG59XHJcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9VSS9PblNjcmVlbktleWJvYXJkLnRzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvVUkvT25TY3JlZW5LZXlib2FyZC50cyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywge1xuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIk9uU2NyZWVuS2V5Ym9hcmRcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gT25TY3JlZW5LZXlib2FyZClcbi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pO1xuLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuLyoqXHJcbiAqIENsYXNzIGZvciBoYW5kbGluZyBvbiBzY3JlZW4ga2V5Ym9hcmQgdXNhZ2VcclxuICovXHJcbmNsYXNzIE9uU2NyZWVuS2V5Ym9hcmQge1xyXG4gICAgLyoqXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHZpZGVvRWxlbWVudFBhcmVudCBUaGUgZGl2IGVsZW1lbnQgdGhlIHZpZGVvIHBsYXllciBpcyBpbmplY3RlZCBpbnRvXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHZpZGVvRWxlbWVudFBhcmVudCkge1xyXG4gICAgICAgIHRoaXMuZWRpdFRleHRCdXR0b24gPSBudWxsO1xyXG4gICAgICAgIHRoaXMuaGlkZGVuSW5wdXQgPSBudWxsO1xyXG4gICAgICAgIGlmICgnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVPblNjcmVlbktleWJvYXJkSGVscGVycyh2aWRlb0VsZW1lbnRQYXJlbnQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQW4gb3ZlcnJpZGUgZm9yIHVucXVhbnRpemVBbmREZW5vcm1hbGl6ZVVuc2lnbmVkXHJcbiAgICAgKiBAcGFyYW0geCB0aGUgeCBheGlzIHBvaW50XHJcbiAgICAgKiBAcGFyYW0geSB0aGUgeSBheGlzIHBvaW50XHJcbiAgICAgKiBAcmV0dXJucyB1bnF1YW50aXplQW5kRGVub3JtYWxpemVVbnNpZ25lZCBvYmplY3RcclxuICAgICAqL1xyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xyXG4gICAgdW5xdWFudGl6ZUFuZERlbm9ybWFsaXplVW5zaWduZWQoeCwgeSkge1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIG9uIHNjcmVlbiBrZXlib2FyZCBoZWxwZXJzXHJcbiAgICAgKiBAcGFyYW0gdmlkZW9FbGVtZW50UGFyZW50IFRoZSBkaXYgZWxlbWVudCB0aGUgdmlkZW8gcGxheWVyIGkgaW5qZWN0ZWQgaW50b1xyXG4gICAgICovXHJcbiAgICBjcmVhdGVPblNjcmVlbktleWJvYXJkSGVscGVycyh2aWRlb0VsZW1lbnRQYXJlbnQpIHtcclxuICAgICAgICBpZiAoIXRoaXMuaGlkZGVuSW5wdXQpIHtcclxuICAgICAgICAgICAgdGhpcy5oaWRkZW5JbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XHJcbiAgICAgICAgICAgIHRoaXMuaGlkZGVuSW5wdXQuaWQgPSAnaGlkZGVuSW5wdXQnO1xyXG4gICAgICAgICAgICB0aGlzLmhpZGRlbklucHV0Lm1heExlbmd0aCA9IDA7XHJcbiAgICAgICAgICAgIHZpZGVvRWxlbWVudFBhcmVudC5hcHBlbmRDaGlsZCh0aGlzLmhpZGRlbklucHV0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCF0aGlzLmVkaXRUZXh0QnV0dG9uKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZWRpdFRleHRCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcclxuICAgICAgICAgICAgdGhpcy5lZGl0VGV4dEJ1dHRvbi5pZCA9ICdlZGl0VGV4dEJ1dHRvbic7XHJcbiAgICAgICAgICAgIHRoaXMuZWRpdFRleHRCdXR0b24uaW5uZXJIVE1MID0gJ2VkaXQgdGV4dCc7XHJcbiAgICAgICAgICAgIHZpZGVvRWxlbWVudFBhcmVudC5hcHBlbmRDaGlsZCh0aGlzLmVkaXRUZXh0QnV0dG9uKTtcclxuICAgICAgICAgICAgLy8gSGlkZSB0aGUgJ2VkaXQgdGV4dCcgYnV0dG9uLlxyXG4gICAgICAgICAgICB0aGlzLmVkaXRUZXh0QnV0dG9uLmNsYXNzTGlzdC5hZGQoJ2hpZGRlblN0YXRlJyk7XHJcbiAgICAgICAgICAgIHRoaXMuZWRpdFRleHRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCAoZXZlbnQpID0+IHtcclxuICAgICAgICAgICAgICAgIC8vIFNob3cgdGhlIG9uLXNjcmVlbiBrZXlib2FyZC5cclxuICAgICAgICAgICAgICAgIHRoaXMuaGlkZGVuSW5wdXQuZm9jdXMoKTtcclxuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogU2hvd3MgdGhlIG9uIHNjcmVlbiBrZXlib2FyZFxyXG4gICAgICogQHBhcmFtIGNvbW1hbmQgdGhlIGNvbW1hbmQgcmVjZWl2ZWQgdmlhIHRoZSBkYXRhIGNoYW5uZWwgY29udGFpbmluZyBrZXlib2FyZCBwb3NpdGlvbnNcclxuICAgICAqL1xyXG4gICAgc2hvd09uU2NyZWVuS2V5Ym9hcmQoY29tbWFuZCkge1xyXG4gICAgICAgIGlmIChjb21tYW5kLnNob3dPblNjcmVlbktleWJvYXJkKSB7XHJcbiAgICAgICAgICAgIC8vIFNob3cgdGhlICdlZGl0IHRleHQnIGJ1dHRvbi5cclxuICAgICAgICAgICAgdGhpcy5lZGl0VGV4dEJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW5TdGF0ZScpO1xyXG4gICAgICAgICAgICAvLyBQbGFjZSB0aGUgJ2VkaXQgdGV4dCcgYnV0dG9uIG5lYXIgdGhlIFVFIGlucHV0IHdpZGdldC5cclxuICAgICAgICAgICAgY29uc3QgcG9zID0gdGhpcy51bnF1YW50aXplQW5kRGVub3JtYWxpemVVbnNpZ25lZChjb21tYW5kLngsIGNvbW1hbmQueSk7XHJcbiAgICAgICAgICAgIHRoaXMuZWRpdFRleHRCdXR0b24uc3R5bGUudG9wID0gcG9zLnkudG9TdHJpbmcoKSArICdweCc7XHJcbiAgICAgICAgICAgIHRoaXMuZWRpdFRleHRCdXR0b24uc3R5bGUubGVmdCA9IChwb3MueCAtIDQwKS50b1N0cmluZygpICsgJ3B4JztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIEhpZGUgdGhlICdlZGl0IHRleHQnIGJ1dHRvbi5cclxuICAgICAgICAgICAgdGhpcy5lZGl0VGV4dEJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdoaWRkZW5TdGF0ZScpO1xyXG4gICAgICAgICAgICAvLyBIaWRlIHRoZSBvbi1zY3JlZW4ga2V5Ym9hcmQuXHJcbiAgICAgICAgICAgIHRoaXMuaGlkZGVuSW5wdXQuYmx1cigpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvVWVJbnN0YW5jZU1lc3NhZ2UvUmVzcG9uc2VDb250cm9sbGVyLnRzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9VZUluc3RhbmNlTWVzc2FnZS9SZXNwb25zZUNvbnRyb2xsZXIudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywge1xuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIlJlc3BvbnNlQ29udHJvbGxlclwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBSZXNwb25zZUNvbnRyb2xsZXIpXG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vTG9nZ2VyL0xvZ2dlciAqLyBcIi4vc3JjL0xvZ2dlci9Mb2dnZXIudHNcIik7XG4vLyBDb3B5cmlnaHQgRXBpYyBHYW1lcywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG5cclxuY2xhc3MgUmVzcG9uc2VDb250cm9sbGVyIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMucmVzcG9uc2VFdmVudExpc3RlbmVycyA9IG5ldyBNYXAoKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQWRkIGEgcmVzcG9uc2UgZXZlbnQgbGlzdGVuZXIgdG8gdGhlIHJlc3BvbnNlIG1hcFxyXG4gICAgICogQHBhcmFtIG5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgcmVzcG9uc2VcclxuICAgICAqIEBwYXJhbSBsaXN0ZW5lciAtIFRoZSBtZXRob2QgdG8gYmUgYWN0aXZhdGVkIHdoZW4gdGhlIHJlc3BvbnNlIGlzIHNlbGVjdGVkXHJcbiAgICAgKi9cclxuICAgIGFkZFJlc3BvbnNlRXZlbnRMaXN0ZW5lcihuYW1lLCBsaXN0ZW5lcikge1xyXG4gICAgICAgIHRoaXMucmVzcG9uc2VFdmVudExpc3RlbmVycy5zZXQobmFtZSwgbGlzdGVuZXIpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW1vdmUgYSByZXNwb25zZSBldmVudCBsaXN0ZW5lciB0byB0aGUgcmVzcG9uc2UgbWFwXHJcbiAgICAgKiBAcGFyYW0gbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSByZXNwb25zZVxyXG4gICAgICovXHJcbiAgICByZW1vdmVSZXNwb25zZUV2ZW50TGlzdGVuZXIobmFtZSkge1xyXG4gICAgICAgIHRoaXMucmVzcG9uc2VFdmVudExpc3RlbmVycy5kZWxldGUobmFtZSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEhhbmRsZSBhIHJlc3BvbnNlIHdoZW4gcmVjZWl2aW5nIG9uZSBmb3JtIHRoZSBzdHJlYW1lclxyXG4gICAgICogQHBhcmFtIG1lc3NhZ2UgLSBEYXRhIHJlY2VpdmVkIGZyb20gdGhlIGRhdGEgY2hhbm5lbCB3aXRoIHRoZSBjb21tYW5kIGluIHF1ZXN0aW9uXHJcbiAgICAgKi9cclxuICAgIG9uUmVzcG9uc2UobWVzc2FnZSkge1xyXG4gICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksICdEYXRhQ2hhbm5lbFJlY2VpdmVNZXNzYWdlVHlwZS5SZXNwb25zZScsIDYpO1xyXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlcyA9IG5ldyBUZXh0RGVjb2RlcigndXRmLTE2JykuZGVjb2RlKG1lc3NhZ2Uuc2xpY2UoMSkpO1xyXG4gICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksIHJlc3BvbnNlcywgNik7XHJcbiAgICAgICAgdGhpcy5yZXNwb25zZUV2ZW50TGlzdGVuZXJzLmZvckVhY2goKGxpc3RlbmVyKSA9PiB7XHJcbiAgICAgICAgICAgIGxpc3RlbmVyKHJlc3BvbnNlcyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL1VlSW5zdGFuY2VNZXNzYWdlL1NlbmREZXNjcmlwdG9yQ29udHJvbGxlci50c1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvVWVJbnN0YW5jZU1lc3NhZ2UvU2VuZERlc2NyaXB0b3JDb250cm9sbGVyLnRzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJTZW5kRGVzY3JpcHRvckNvbnRyb2xsZXJcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gU2VuZERlc2NyaXB0b3JDb250cm9sbGVyKVxuLyogaGFybW9ueSBleHBvcnQgKi8gfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL0xvZ2dlci9Mb2dnZXIgKi8gXCIuL3NyYy9Mb2dnZXIvTG9nZ2VyLnRzXCIpO1xuLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuXHJcbmNsYXNzIFNlbmREZXNjcmlwdG9yQ29udHJvbGxlciB7XHJcbiAgICBjb25zdHJ1Y3RvcihkYXRhQ2hhbm5lbFNlbmRlciwgdG9TdHJlYW1lck1lc3NhZ2VzTWFwUHJvdmlkZXIpIHtcclxuICAgICAgICB0aGlzLmRhdGFDaGFubmVsU2VuZGVyID0gZGF0YUNoYW5uZWxTZW5kZXI7XHJcbiAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXNNYXBQcm92aWRlciA9IHRvU3RyZWFtZXJNZXNzYWdlc01hcFByb3ZpZGVyO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTZW5kIGEgTGF0ZW5jeSBUZXN0IHRvIHRoZSBVRSBJbnN0YW5jZVxyXG4gICAgICogQHBhcmFtIGRlc2NyaXB0b3IgLSB0aGUgZGVzY3JpcHRvciBmb3IgYSBsYXRlbmN5IHRlc3RcclxuICAgICAqL1xyXG4gICAgc2VuZExhdGVuY3lUZXN0KGRlc2NyaXB0b3IpIHtcclxuICAgICAgICB0aGlzLnNlbmREZXNjcmlwdG9yKCdMYXRlbmN5VGVzdCcsIGRlc2NyaXB0b3IpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTZW5kIGEgTGF0ZW5jeSBUZXN0IHRvIHRoZSBVRSBJbnN0YW5jZVxyXG4gICAgICogQHBhcmFtIGRlc2NyaXB0b3IgLSB0aGUgZGVzY3JpcHRvciBmb3IgYSBjb21tYW5kXHJcbiAgICAgKi9cclxuICAgIGVtaXRDb21tYW5kKGRlc2NyaXB0b3IpIHtcclxuICAgICAgICB0aGlzLnNlbmREZXNjcmlwdG9yKCdDb21tYW5kJywgZGVzY3JpcHRvcik7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFNlbmQgYSBMYXRlbmN5IFRlc3QgdG8gdGhlIFVFIEluc3RhbmNlXHJcbiAgICAgKiBAcGFyYW0gZGVzY3JpcHRvciAtIHRoZSBkZXNjcmlwdG9yIGZvciBhIFVJIEludGVyYWN0aW9uXHJcbiAgICAgKi9cclxuICAgIGVtaXRVSUludGVyYWN0aW9uKGRlc2NyaXB0b3IpIHtcclxuICAgICAgICB0aGlzLnNlbmREZXNjcmlwdG9yKCdVSUludGVyYWN0aW9uJywgZGVzY3JpcHRvcik7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFNlbmQgYSBEZXNjcmlwdG9yIHRvIHRoZSBVRSBJbnN0YW5jZXNcclxuICAgICAqIEBwYXJhbSBtZXNzYWdlVHlwZSAtIFVFIE1lc3NhZ2UgVHlwZVxyXG4gICAgICogQHBhcmFtIGRlc2NyaXB0b3IgLSBEZXNjcmlwdG9yIE1lc3NhZ2UgYXMgSlNPTlxyXG4gICAgICovXHJcbiAgICBzZW5kRGVzY3JpcHRvcihtZXNzYWdlVHlwZSwgZGVzY3JpcHRvcikge1xyXG4gICAgICAgIC8vIENvbnZlcnQgdGhlIGRlc2NyaXB0b3Igb2JqZWN0IGludG8gYSBKU09OIHN0cmluZy5cclxuICAgICAgICBjb25zdCBkZXNjcmlwdG9yQXNTdHJpbmcgPSBKU09OLnN0cmluZ2lmeShkZXNjcmlwdG9yKTtcclxuICAgICAgICBjb25zdCB0b1N0cmVhbWVyTWVzc2FnZXMgPSB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlc01hcFByb3ZpZGVyLnRvU3RyZWFtZXJNZXNzYWdlcztcclxuICAgICAgICBjb25zdCBtZXNzYWdlRm9ybWF0ID0gdG9TdHJlYW1lck1lc3NhZ2VzLmdldEZyb21LZXkobWVzc2FnZVR5cGUpO1xyXG4gICAgICAgIGlmIChtZXNzYWdlRm9ybWF0ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Mb2dnZXIuRXJyb3IoX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBgQXR0ZW1wdGVkIHRvIGVtaXQgZGVzY3JpcHRvciB3aXRoIG1lc3NhZ2UgdHlwZTogJHttZXNzYWdlVHlwZX0sIGJ1dCB0aGUgZnJvbnRlbmQgaGFzbid0IGJlZW4gY29uZmlndXJlZCB0byBzZW5kIHN1Y2ggYSBtZXNzYWdlLiBDaGVjayB5b3UndmUgYWRkZWQgdGhlIG1lc3NhZ2UgdHlwZSBpbiB5b3VyIGNwcGApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnU2VuZGluZzogJyArIGRlc2NyaXB0b3IsIDYpO1xyXG4gICAgICAgIC8vIEFkZCB0aGUgVVRGLTE2IEpTT04gc3RyaW5nIHRvIHRoZSBhcnJheSBieXRlIGJ1ZmZlciwgZ29pbmcgdHdvIGJ5dGVzIGF0XHJcbiAgICAgICAgLy8gYSB0aW1lLlxyXG4gICAgICAgIGNvbnN0IGRhdGEgPSBuZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKDEgKyAyICsgMiAqIGRlc2NyaXB0b3JBc1N0cmluZy5sZW5ndGgpKTtcclxuICAgICAgICBsZXQgYnl0ZUlkeCA9IDA7XHJcbiAgICAgICAgZGF0YS5zZXRVaW50OChieXRlSWR4LCBtZXNzYWdlRm9ybWF0LmlkKTtcclxuICAgICAgICBieXRlSWR4Kys7XHJcbiAgICAgICAgZGF0YS5zZXRVaW50MTYoYnl0ZUlkeCwgZGVzY3JpcHRvckFzU3RyaW5nLmxlbmd0aCwgdHJ1ZSk7XHJcbiAgICAgICAgYnl0ZUlkeCArPSAyO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGVzY3JpcHRvckFzU3RyaW5nLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGRhdGEuc2V0VWludDE2KGJ5dGVJZHgsIGRlc2NyaXB0b3JBc1N0cmluZy5jaGFyQ29kZUF0KGkpLCB0cnVlKTtcclxuICAgICAgICAgICAgYnl0ZUlkeCArPSAyO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXRoaXMuZGF0YUNoYW5uZWxTZW5kZXIuY2FuU2VuZCgpKSB7XHJcbiAgICAgICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uTG9nZ2VyLkluZm8oX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBgRGF0YSBjaGFubmVsIGNhbm5vdCBzZW5kIHlldCwgc2tpcHBpbmcgc2VuZGluZyBkZXNjcmlwdG9yIG1lc3NhZ2U6ICR7bWVzc2FnZVR5cGV9IC0gJHtkZXNjcmlwdG9yQXNTdHJpbmd9YCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5kYXRhQ2hhbm5lbFNlbmRlci5zZW5kRGF0YShkYXRhLmJ1ZmZlcik7XHJcbiAgICB9XHJcbn1cclxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL1VlSW5zdGFuY2VNZXNzYWdlL1NlbmRNZXNzYWdlQ29udHJvbGxlci50c1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvVWVJbnN0YW5jZU1lc3NhZ2UvU2VuZE1lc3NhZ2VDb250cm9sbGVyLnRzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJTZW5kTWVzc2FnZUNvbnRyb2xsZXJcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gU2VuZE1lc3NhZ2VDb250cm9sbGVyKVxuLyogaGFybW9ueSBleHBvcnQgKi8gfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL0xvZ2dlci9Mb2dnZXIgKi8gXCIuL3NyYy9Mb2dnZXIvTG9nZ2VyLnRzXCIpO1xuLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuXHJcbmNsYXNzIFNlbmRNZXNzYWdlQ29udHJvbGxlciB7XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSBkYXRhQ2hhbm5lbFNlbmRlciAtIERhdGEgY2hhbm5lbCBpbnN0YW5jZVxyXG4gICAgICogQHBhcmFtIHRvU3RyZWFtZXJNZXNzYWdlc01hcFByb3ZpZGVyIC0gU3RyZWFtIE1lc3NhZ2VzIGluc3RhbmNlXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKGRhdGFDaGFubmVsU2VuZGVyLCB0b1N0cmVhbWVyTWVzc2FnZXNNYXBQcm92aWRlcikge1xyXG4gICAgICAgIHRoaXMuZGF0YUNoYW5uZWxTZW5kZXIgPSBkYXRhQ2hhbm5lbFNlbmRlcjtcclxuICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlc01hcFByb3ZpZGVyID0gdG9TdHJlYW1lck1lc3NhZ2VzTWFwUHJvdmlkZXI7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFNlbmQgYSBtZXNzYWdlIHRvIHRoZSBzdHJlYW1lciB0aHJvdWdoIHRoZSBkYXRhIGNoYW5uZWxcclxuICAgICAqIEBwYXJhbSBtZXNzYWdlVHlwZSAtIHRoZSB0eXBlIG9mIG1lc3NhZ2Ugd2UgYXJlIHNlbmRpbmdcclxuICAgICAqIEBwYXJhbSBtZXNzYWdlRGF0YSAtIHRoZSBtZXNzYWdlIGRhdGEgd2UgYXJlIHNlbmRpbmcgb3ZlciB0aGUgZGF0YSBjaGFubmVsXHJcbiAgICAgKiBAcmV0dXJucyAtIG5pbFxyXG4gICAgICovXHJcbiAgICBzZW5kTWVzc2FnZVRvU3RyZWFtZXIobWVzc2FnZVR5cGUsIG1lc3NhZ2VEYXRhKSB7XHJcbiAgICAgICAgaWYgKG1lc3NhZ2VEYXRhID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgbWVzc2FnZURhdGEgPSBbXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgdG9TdHJlYW1lck1lc3NhZ2VzID0gdGhpcy50b1N0cmVhbWVyTWVzc2FnZXNNYXBQcm92aWRlci50b1N0cmVhbWVyTWVzc2FnZXM7XHJcbiAgICAgICAgY29uc3QgbWVzc2FnZUZvcm1hdCA9IHRvU3RyZWFtZXJNZXNzYWdlcy5nZXRGcm9tS2V5KG1lc3NhZ2VUeXBlKTtcclxuICAgICAgICBpZiAobWVzc2FnZUZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uTG9nZ2VyLkVycm9yKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgYEF0dGVtcHRlZCB0byBzZW5kIGEgbWVzc2FnZSB0byB0aGUgc3RyZWFtZXIgd2l0aCBtZXNzYWdlIHR5cGU6ICR7bWVzc2FnZVR5cGV9LCBidXQgdGhlIGZyb250ZW5kIGhhc24ndCBiZWVuIGNvbmZpZ3VyZWQgdG8gc2VuZCBzdWNoIGEgbWVzc2FnZS4gQ2hlY2sgeW91J3ZlIGFkZGVkIHRoZSBtZXNzYWdlIHR5cGUgaW4geW91ciBjcHBgKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBkYXRhID0gbmV3IERhdGFWaWV3KG5ldyBBcnJheUJ1ZmZlcihtZXNzYWdlRm9ybWF0LmJ5dGVMZW5ndGggKyAxKSk7XHJcbiAgICAgICAgZGF0YS5zZXRVaW50OCgwLCBtZXNzYWdlRm9ybWF0LmlkKTtcclxuICAgICAgICBsZXQgYnl0ZU9mZnNldCA9IDE7XHJcbiAgICAgICAgbWVzc2FnZURhdGEuZm9yRWFjaCgoZWxlbWVudCwgaWR4KSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHR5cGUgPSBtZXNzYWdlRm9ybWF0LnN0cnVjdHVyZVtpZHhdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3VpbnQ4JzpcclxuICAgICAgICAgICAgICAgICAgICBkYXRhLnNldFVpbnQ4KGJ5dGVPZmZzZXQsIGVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJ5dGVPZmZzZXQgKz0gMTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3VpbnQxNic6XHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5zZXRVaW50MTYoYnl0ZU9mZnNldCwgZWxlbWVudCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnl0ZU9mZnNldCArPSAyO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnaW50MTYnOlxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuc2V0SW50MTYoYnl0ZU9mZnNldCwgZWxlbWVudCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnl0ZU9mZnNldCArPSAyO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnZmxvYXQnOlxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuc2V0RmxvYXQzMihieXRlT2Zmc2V0LCBlbGVtZW50LCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICBieXRlT2Zmc2V0ICs9IDQ7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdkb3VibGUnOlxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuc2V0RmxvYXQ2NChieXRlT2Zmc2V0LCBlbGVtZW50LCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICBieXRlT2Zmc2V0ICs9IDg7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAoIXRoaXMuZGF0YUNoYW5uZWxTZW5kZXIuY2FuU2VuZCgpKSB7XHJcbiAgICAgICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uTG9nZ2VyLkluZm8oX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBgRGF0YSBjaGFubmVsIGNhbm5vdCBzZW5kIHlldCwgc2tpcHBpbmcgc2VuZGluZyBtZXNzYWdlOiAke21lc3NhZ2VUeXBlfSAtICR7bmV3IFVpbnQ4QXJyYXkoZGF0YS5idWZmZXIpfWApO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmRhdGFDaGFubmVsU2VuZGVyLnNlbmREYXRhKGRhdGEuYnVmZmVyKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL1VlSW5zdGFuY2VNZXNzYWdlL1N0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnRzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL1VlSW5zdGFuY2VNZXNzYWdlL1N0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnRzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywge1xuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIk1lc3NhZ2VEaXJlY3Rpb25cIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gTWVzc2FnZURpcmVjdGlvbiksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXJcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIlRvU3RyZWFtZXJNZXNzYWdlXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIFRvU3RyZWFtZXJNZXNzYWdlKVxuLyogaGFybW9ueSBleHBvcnQgKi8gfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX1R3b1dheU1hcF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9Ud29XYXlNYXAgKi8gXCIuL3NyYy9VZUluc3RhbmNlTWVzc2FnZS9Ud29XYXlNYXAudHNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL0xvZ2dlci9Mb2dnZXIgKi8gXCIuL3NyYy9Mb2dnZXIvTG9nZ2VyLnRzXCIpO1xuLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuXHJcblxyXG5jbGFzcyBUb1N0cmVhbWVyTWVzc2FnZSB7XHJcbn1cclxuY2xhc3MgU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy50b1N0cmVhbWVySGFuZGxlcnMgPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgdGhpcy5mcm9tU3RyZWFtZXJIYW5kbGVycyA9IG5ldyBNYXAoKTtcclxuICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlcyA9IG5ldyBfVHdvV2F5TWFwX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uVHdvV2F5TWFwKCk7XHJcbiAgICAgICAgdGhpcy5mcm9tU3RyZWFtZXJNZXNzYWdlcyA9IG5ldyBfVHdvV2F5TWFwX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uVHdvV2F5TWFwKCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFBvcHVsYXRlIHRoZSBEZWZhdWx0IG1lc3NhZ2UgcHJvdG9jb2xcclxuICAgICAqL1xyXG4gICAgcG9wdWxhdGVEZWZhdWx0UHJvdG9jb2woKSB7XHJcbiAgICAgICAgLypcclxuICAgICAgICAgKiBDb250cm9sIE1lc3NhZ2VzLiBSYW5nZSA9IDAuLjQ5LlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzLmFkZCgnSUZyYW1lUmVxdWVzdCcsIHtcclxuICAgICAgICAgICAgaWQ6IDAsXHJcbiAgICAgICAgICAgIGJ5dGVMZW5ndGg6IDAsXHJcbiAgICAgICAgICAgIHN0cnVjdHVyZTogW11cclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlcy5hZGQoJ1JlcXVlc3RRdWFsaXR5Q29udHJvbCcsIHtcclxuICAgICAgICAgICAgaWQ6IDEsXHJcbiAgICAgICAgICAgIGJ5dGVMZW5ndGg6IDAsXHJcbiAgICAgICAgICAgIHN0cnVjdHVyZTogW11cclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlcy5hZGQoJ0Zwc1JlcXVlc3QnLCB7XHJcbiAgICAgICAgICAgIGlkOiAyLFxyXG4gICAgICAgICAgICBieXRlTGVuZ3RoOiAwLFxyXG4gICAgICAgICAgICBzdHJ1Y3R1cmU6IFtdXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXMuYWRkKCdBdmVyYWdlQml0cmF0ZVJlcXVlc3QnLCB7XHJcbiAgICAgICAgICAgIGlkOiAzLFxyXG4gICAgICAgICAgICBieXRlTGVuZ3RoOiAwLFxyXG4gICAgICAgICAgICBzdHJ1Y3R1cmU6IFtdXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXMuYWRkKCdTdGFydFN0cmVhbWluZycsIHtcclxuICAgICAgICAgICAgaWQ6IDQsXHJcbiAgICAgICAgICAgIGJ5dGVMZW5ndGg6IDAsXHJcbiAgICAgICAgICAgIHN0cnVjdHVyZTogW11cclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlcy5hZGQoJ1N0b3BTdHJlYW1pbmcnLCB7XHJcbiAgICAgICAgICAgIGlkOiA1LFxyXG4gICAgICAgICAgICBieXRlTGVuZ3RoOiAwLFxyXG4gICAgICAgICAgICBzdHJ1Y3R1cmU6IFtdXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXMuYWRkKCdMYXRlbmN5VGVzdCcsIHtcclxuICAgICAgICAgICAgaWQ6IDYsXHJcbiAgICAgICAgICAgIGJ5dGVMZW5ndGg6IDAsXHJcbiAgICAgICAgICAgIHN0cnVjdHVyZTogW11cclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlcy5hZGQoJ1JlcXVlc3RJbml0aWFsU2V0dGluZ3MnLCB7XHJcbiAgICAgICAgICAgIGlkOiA3LFxyXG4gICAgICAgICAgICBieXRlTGVuZ3RoOiAwLFxyXG4gICAgICAgICAgICBzdHJ1Y3R1cmU6IFtdXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXMuYWRkKCdUZXN0RWNobycsIHtcclxuICAgICAgICAgICAgaWQ6IDgsXHJcbiAgICAgICAgICAgIGJ5dGVMZW5ndGg6IDAsXHJcbiAgICAgICAgICAgIHN0cnVjdHVyZTogW11cclxuICAgICAgICB9KTtcclxuICAgICAgICAvKlxyXG4gICAgICAgICAqIElucHV0IE1lc3NhZ2VzLiBSYW5nZSA9IDUwLi44OS5cclxuICAgICAgICAgKi9cclxuICAgICAgICAvLyBHZW5lcmljIElucHV0IE1lc3NhZ2VzLiBSYW5nZSA9IDUwLi41OS5cclxuICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlcy5hZGQoJ1VJSW50ZXJhY3Rpb24nLCB7XHJcbiAgICAgICAgICAgIGlkOiA1MCxcclxuICAgICAgICAgICAgYnl0ZUxlbmd0aDogMCxcclxuICAgICAgICAgICAgc3RydWN0dXJlOiBbXVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzLmFkZCgnQ29tbWFuZCcsIHtcclxuICAgICAgICAgICAgaWQ6IDUxLFxyXG4gICAgICAgICAgICBieXRlTGVuZ3RoOiAwLFxyXG4gICAgICAgICAgICBzdHJ1Y3R1cmU6IFtdXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy8gS2V5Ym9hcmQgSW5wdXQgTWVzc2FnZS4gUmFuZ2UgPSA2MC4uNjkuXHJcbiAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXMuYWRkKCdLZXlEb3duJywge1xyXG4gICAgICAgICAgICBpZDogNjAsXHJcbiAgICAgICAgICAgIGJ5dGVMZW5ndGg6IDIsXHJcbiAgICAgICAgICAgIC8vICAgICAgICAgICAga2V5Q29kZSAgaXNSZXBlYXRcclxuICAgICAgICAgICAgc3RydWN0dXJlOiBbJ3VpbnQ4JywgJ3VpbnQ4J11cclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlcy5hZGQoJ0tleVVwJywge1xyXG4gICAgICAgICAgICBpZDogNjEsXHJcbiAgICAgICAgICAgIGJ5dGVMZW5ndGg6IDEsXHJcbiAgICAgICAgICAgIC8vICAgICAgICAgICAga2V5Q29kZVxyXG4gICAgICAgICAgICBzdHJ1Y3R1cmU6IFsndWludDgnXVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzLmFkZCgnS2V5UHJlc3MnLCB7XHJcbiAgICAgICAgICAgIGlkOiA2MixcclxuICAgICAgICAgICAgYnl0ZUxlbmd0aDogMixcclxuICAgICAgICAgICAgLy8gICAgICAgICAgICBjaGFyY29kZVxyXG4gICAgICAgICAgICBzdHJ1Y3R1cmU6IFsndWludDE2J11cclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyBNb3VzZSBJbnB1dCBNZXNzYWdlcy4gUmFuZ2UgPSA3MC4uNzkuXHJcbiAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXMuYWRkKCdNb3VzZUVudGVyJywge1xyXG4gICAgICAgICAgICBpZDogNzAsXHJcbiAgICAgICAgICAgIGJ5dGVMZW5ndGg6IDAsXHJcbiAgICAgICAgICAgIHN0cnVjdHVyZTogW11cclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlcy5hZGQoJ01vdXNlTGVhdmUnLCB7XHJcbiAgICAgICAgICAgIGlkOiA3MSxcclxuICAgICAgICAgICAgYnl0ZUxlbmd0aDogMCxcclxuICAgICAgICAgICAgc3RydWN0dXJlOiBbXVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzLmFkZCgnTW91c2VEb3duJywge1xyXG4gICAgICAgICAgICBpZDogNzIsXHJcbiAgICAgICAgICAgIGJ5dGVMZW5ndGg6IDUsXHJcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgICBidXR0b24gICAgIHggICAgICAgICB5XHJcbiAgICAgICAgICAgIHN0cnVjdHVyZTogWyd1aW50OCcsICd1aW50MTYnLCAndWludDE2J11cclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlcy5hZGQoJ01vdXNlVXAnLCB7XHJcbiAgICAgICAgICAgIGlkOiA3MyxcclxuICAgICAgICAgICAgYnl0ZUxlbmd0aDogNSxcclxuICAgICAgICAgICAgLy8gICAgICAgICAgICAgIGJ1dHRvbiAgICAgeCAgICAgICAgIHlcclxuICAgICAgICAgICAgc3RydWN0dXJlOiBbJ3VpbnQ4JywgJ3VpbnQxNicsICd1aW50MTYnXVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzLmFkZCgnTW91c2VNb3ZlJywge1xyXG4gICAgICAgICAgICBpZDogNzQsXHJcbiAgICAgICAgICAgIGJ5dGVMZW5ndGg6IDgsXHJcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgICB4ICAgICAgICAgICB5ICAgICAgZGVsdGFYICAgIGRlbHRhWVxyXG4gICAgICAgICAgICBzdHJ1Y3R1cmU6IFsndWludDE2JywgJ3VpbnQxNicsICdpbnQxNicsICdpbnQxNiddXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXMuYWRkKCdNb3VzZVdoZWVsJywge1xyXG4gICAgICAgICAgICBpZDogNzUsXHJcbiAgICAgICAgICAgIGJ5dGVMZW5ndGg6IDYsXHJcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgICBkZWx0YSAgICAgICB4ICAgICAgICB5XHJcbiAgICAgICAgICAgIHN0cnVjdHVyZTogWydpbnQxNicsICd1aW50MTYnLCAndWludDE2J11cclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlcy5hZGQoJ01vdXNlRG91YmxlJywge1xyXG4gICAgICAgICAgICBpZDogNzYsXHJcbiAgICAgICAgICAgIGJ5dGVMZW5ndGg6IDUsXHJcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgICBidXR0b24gICAgIHggICAgICAgICB5XHJcbiAgICAgICAgICAgIHN0cnVjdHVyZTogWyd1aW50OCcsICd1aW50MTYnLCAndWludDE2J11cclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyBUb3VjaCBJbnB1dCBNZXNzYWdlcy4gUmFuZ2UgPSA4MC4uODkuXHJcbiAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXMuYWRkKCdUb3VjaFN0YXJ0Jywge1xyXG4gICAgICAgICAgICBpZDogODAsXHJcbiAgICAgICAgICAgIGJ5dGVMZW5ndGg6IDgsXHJcbiAgICAgICAgICAgIC8vICAgICAgICAgIG51bXRvdWNoZXMoMSkgICB4ICAgICAgIHkgICAgICAgIGlkeCAgICAgZm9yY2UgICAgIHZhbGlkXHJcbiAgICAgICAgICAgIHN0cnVjdHVyZTogWyd1aW50OCcsICd1aW50MTYnLCAndWludDE2JywgJ3VpbnQ4JywgJ3VpbnQ4JywgJ3VpbnQ4J11cclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlcy5hZGQoJ1RvdWNoRW5kJywge1xyXG4gICAgICAgICAgICBpZDogODEsXHJcbiAgICAgICAgICAgIGJ5dGVMZW5ndGg6IDgsXHJcbiAgICAgICAgICAgIC8vICAgICAgICAgIG51bXRvdWNoZXMoMSkgICB4ICAgICAgIHkgICAgICAgIGlkeCAgICAgZm9yY2UgICAgIHZhbGlkXHJcbiAgICAgICAgICAgIHN0cnVjdHVyZTogWyd1aW50OCcsICd1aW50MTYnLCAndWludDE2JywgJ3VpbnQ4JywgJ3VpbnQ4JywgJ3VpbnQ4J11cclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlcy5hZGQoJ1RvdWNoTW92ZScsIHtcclxuICAgICAgICAgICAgaWQ6IDgyLFxyXG4gICAgICAgICAgICBieXRlTGVuZ3RoOiA4LFxyXG4gICAgICAgICAgICAvLyAgICAgICAgICBudW10b3VjaGVzKDEpICAgeCAgICAgICB5ICAgICAgIGlkeCAgICAgIGZvcmNlICAgICB2YWxpZFxyXG4gICAgICAgICAgICBzdHJ1Y3R1cmU6IFsndWludDgnLCAndWludDE2JywgJ3VpbnQxNicsICd1aW50OCcsICd1aW50OCcsICd1aW50OCddXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy8gR2FtZXBhZCBJbnB1dCBNZXNzYWdlcy4gUmFuZ2UgPSA5MC4uOTlcclxuICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlcy5hZGQoJ0dhbWVwYWRDb25uZWN0ZWQnLCB7XHJcbiAgICAgICAgICAgIGlkOiA5MyxcclxuICAgICAgICAgICAgYnl0ZUxlbmd0aDogMCxcclxuICAgICAgICAgICAgc3RydWN0dXJlOiBbXVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzLmFkZCgnR2FtZXBhZEJ1dHRvblByZXNzZWQnLCB7XHJcbiAgICAgICAgICAgIGlkOiA5MCxcclxuICAgICAgICAgICAgYnl0ZUxlbmd0aDogMyxcclxuICAgICAgICAgICAgLy8gICAgICAgICAgICBjdHJsZXJJZCAgIGJ1dHRvbiAgaXNSZXBlYXRcclxuICAgICAgICAgICAgc3RydWN0dXJlOiBbJ3VpbnQ4JywgJ3VpbnQ4JywgJ3VpbnQ4J11cclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlcy5hZGQoJ0dhbWVwYWRCdXR0b25SZWxlYXNlZCcsIHtcclxuICAgICAgICAgICAgaWQ6IDkxLFxyXG4gICAgICAgICAgICBieXRlTGVuZ3RoOiAzLFxyXG4gICAgICAgICAgICAvLyAgICAgICAgICAgIGN0cmxlcklkICAgYnV0dG9uICBpc1JlcGVhdCgwKVxyXG4gICAgICAgICAgICBzdHJ1Y3R1cmU6IFsndWludDgnLCAndWludDgnLCAndWludDgnXVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzLmFkZCgnR2FtZXBhZEFuYWxvZycsIHtcclxuICAgICAgICAgICAgaWQ6IDkyLFxyXG4gICAgICAgICAgICBieXRlTGVuZ3RoOiAxMCxcclxuICAgICAgICAgICAgLy8gICAgICAgICAgICBjdHJsZXJJZCAgIGJ1dHRvbiAgYW5hbG9nVmFsdWVcclxuICAgICAgICAgICAgc3RydWN0dXJlOiBbJ3VpbnQ4JywgJ3VpbnQ4JywgJ2RvdWJsZSddXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXMuYWRkKCdHYW1lcGFkRGlzY29ubmVjdGVkJywge1xyXG4gICAgICAgICAgICBpZDogOTQsXHJcbiAgICAgICAgICAgIGJ5dGVMZW5ndGg6IDEsXHJcbiAgICAgICAgICAgIC8vICAgICAgICAgIGN0cmxlcklkXHJcbiAgICAgICAgICAgIHN0cnVjdHVyZTogWyd1aW50OCddXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5mcm9tU3RyZWFtZXJNZXNzYWdlcy5hZGQoJ1F1YWxpdHlDb250cm9sT3duZXJzaGlwJywgMCk7XHJcbiAgICAgICAgdGhpcy5mcm9tU3RyZWFtZXJNZXNzYWdlcy5hZGQoJ1Jlc3BvbnNlJywgMSk7XHJcbiAgICAgICAgdGhpcy5mcm9tU3RyZWFtZXJNZXNzYWdlcy5hZGQoJ0NvbW1hbmQnLCAyKTtcclxuICAgICAgICB0aGlzLmZyb21TdHJlYW1lck1lc3NhZ2VzLmFkZCgnRnJlZXplRnJhbWUnLCAzKTtcclxuICAgICAgICB0aGlzLmZyb21TdHJlYW1lck1lc3NhZ2VzLmFkZCgnVW5mcmVlemVGcmFtZScsIDQpO1xyXG4gICAgICAgIHRoaXMuZnJvbVN0cmVhbWVyTWVzc2FnZXMuYWRkKCdWaWRlb0VuY29kZXJBdmdRUCcsIDUpO1xyXG4gICAgICAgIHRoaXMuZnJvbVN0cmVhbWVyTWVzc2FnZXMuYWRkKCdMYXRlbmN5VGVzdCcsIDYpO1xyXG4gICAgICAgIHRoaXMuZnJvbVN0cmVhbWVyTWVzc2FnZXMuYWRkKCdJbml0aWFsU2V0dGluZ3MnLCA3KTtcclxuICAgICAgICB0aGlzLmZyb21TdHJlYW1lck1lc3NhZ2VzLmFkZCgnRmlsZUV4dGVuc2lvbicsIDgpO1xyXG4gICAgICAgIHRoaXMuZnJvbVN0cmVhbWVyTWVzc2FnZXMuYWRkKCdGaWxlTWltZVR5cGUnLCA5KTtcclxuICAgICAgICB0aGlzLmZyb21TdHJlYW1lck1lc3NhZ2VzLmFkZCgnRmlsZUNvbnRlbnRzJywgMTApO1xyXG4gICAgICAgIHRoaXMuZnJvbVN0cmVhbWVyTWVzc2FnZXMuYWRkKCdUZXN0RWNobycsIDExKTtcclxuICAgICAgICB0aGlzLmZyb21TdHJlYW1lck1lc3NhZ2VzLmFkZCgnSW5wdXRDb250cm9sT3duZXJzaGlwJywgMTIpO1xyXG4gICAgICAgIHRoaXMuZnJvbVN0cmVhbWVyTWVzc2FnZXMuYWRkKCdHYW1lcGFkUmVzcG9uc2UnLCAxMyk7XHJcbiAgICAgICAgdGhpcy5mcm9tU3RyZWFtZXJNZXNzYWdlcy5hZGQoJ1Byb3RvY29sJywgMjU1KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmVnaXN0ZXIgYSBtZXNzYWdlIGhhbmRsZXJcclxuICAgICAqIEBwYXJhbSBtZXNzYWdlRGlyZWN0aW9uIC0gdGhlIGRpcmVjdGlvbiBvZiB0aGUgbWVzc2FnZTsgdG9TdHJlYW1lciBvciBmcm9tU3RyZWFtZXJcclxuICAgICAqIEBwYXJhbSBtZXNzYWdlVHlwZSAtIHRoZSB0eXBlIG9mIHRoZSBtZXNzYWdlXHJcbiAgICAgKiBAcGFyYW0gbWVzc2FnZUhhbmRsZXIgLSB0aGUgZnVuY3Rpb24gb3IgbWV0aG9kIHRvIGJlIGV4ZWN1dGVkIHdoZW4gdGhpcyBoYW5kbGVyIGlzIGNhbGxlZFxyXG4gICAgICovXHJcbiAgICByZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKG1lc3NhZ2VEaXJlY3Rpb24sIG1lc3NhZ2VUeXBlLCBtZXNzYWdlSGFuZGxlcikge1xyXG4gICAgICAgIHN3aXRjaCAobWVzc2FnZURpcmVjdGlvbikge1xyXG4gICAgICAgICAgICBjYXNlIE1lc3NhZ2VEaXJlY3Rpb24uVG9TdHJlYW1lcjpcclxuICAgICAgICAgICAgICAgIHRoaXMudG9TdHJlYW1lckhhbmRsZXJzLnNldChtZXNzYWdlVHlwZSwgbWVzc2FnZUhhbmRsZXIpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgTWVzc2FnZURpcmVjdGlvbi5Gcm9tU3RyZWFtZXI6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZyb21TdHJlYW1lckhhbmRsZXJzLnNldChtZXNzYWdlVHlwZSwgbWVzc2FnZUhhbmRsZXIpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBgVW5rbm93biBtZXNzYWdlIGRpcmVjdGlvbiAke21lc3NhZ2VEaXJlY3Rpb259YCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBUaGUgZW51bSBmb3IgbWVzc2FnZSBkaXJlY3Rpb25zXHJcbiAqL1xyXG52YXIgTWVzc2FnZURpcmVjdGlvbjtcclxuKGZ1bmN0aW9uIChNZXNzYWdlRGlyZWN0aW9uKSB7XHJcbiAgICBNZXNzYWdlRGlyZWN0aW9uW01lc3NhZ2VEaXJlY3Rpb25bXCJUb1N0cmVhbWVyXCJdID0gMF0gPSBcIlRvU3RyZWFtZXJcIjtcclxuICAgIE1lc3NhZ2VEaXJlY3Rpb25bTWVzc2FnZURpcmVjdGlvbltcIkZyb21TdHJlYW1lclwiXSA9IDFdID0gXCJGcm9tU3RyZWFtZXJcIjtcclxufSkoTWVzc2FnZURpcmVjdGlvbiB8fCAoTWVzc2FnZURpcmVjdGlvbiA9IHt9KSk7XHJcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9VZUluc3RhbmNlTWVzc2FnZS9Ub1N0cmVhbWVyTWVzc2FnZXNDb250cm9sbGVyLnRzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvVWVJbnN0YW5jZU1lc3NhZ2UvVG9TdHJlYW1lck1lc3NhZ2VzQ29udHJvbGxlci50cyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywge1xuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIlRvU3RyZWFtZXJNZXNzYWdlc0NvbnRyb2xsZXJcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gVG9TdHJlYW1lck1lc3NhZ2VzQ29udHJvbGxlcilcbi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pO1xuLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuY2xhc3MgVG9TdHJlYW1lck1lc3NhZ2VzQ29udHJvbGxlciB7XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSBzZW5kTWVzc2FnZUNvbnRyb2xsZXIgLSBTdHJlYW0gbWVzc2FnZSBjb250cm9sbGVyIGluc3RhbmNlXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHNlbmRNZXNzYWdlQ29udHJvbGxlcikge1xyXG4gICAgICAgIHRoaXMuc2VuZE1lc3NhZ2VDb250cm9sbGVyID0gc2VuZE1lc3NhZ2VDb250cm9sbGVyO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTZW5kIFJlcXVlc3QgdG8gVGFrZSBRdWFsaXR5IENvbnRyb2wgdG8gdGhlIFVFIEluc3RhbmNlXHJcbiAgICAgKi9cclxuICAgIFNlbmRSZXF1ZXN0UXVhbGl0eUNvbnRyb2woKSB7XHJcbiAgICAgICAgdGhpcy5zZW5kTWVzc2FnZUNvbnRyb2xsZXIuc2VuZE1lc3NhZ2VUb1N0cmVhbWVyKCdSZXF1ZXN0UXVhbGl0eUNvbnRyb2wnKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogU2VuZCBNYXggRlBTIFJlcXVlc3QgdG8gdGhlIFVFIEluc3RhbmNlXHJcbiAgICAgKi9cclxuICAgIFNlbmRNYXhGcHNSZXF1ZXN0KCkge1xyXG4gICAgICAgIHRoaXMuc2VuZE1lc3NhZ2VDb250cm9sbGVyLnNlbmRNZXNzYWdlVG9TdHJlYW1lcignRnBzUmVxdWVzdCcpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTZW5kIEF2ZXJhZ2UgQml0cmF0ZSBSZXF1ZXN0IHRvIHRoZSBVRSBJbnN0YW5jZVxyXG4gICAgICovXHJcbiAgICBTZW5kQXZlcmFnZUJpdHJhdGVSZXF1ZXN0KCkge1xyXG4gICAgICAgIHRoaXMuc2VuZE1lc3NhZ2VDb250cm9sbGVyLnNlbmRNZXNzYWdlVG9TdHJlYW1lcignQXZlcmFnZUJpdHJhdGVSZXF1ZXN0Jyk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFNlbmQgYSBTdGFydCBTdHJlYW1pbmcgTWVzc2FnZSB0byB0aGUgVUUgSW5zdGFuY2VcclxuICAgICAqL1xyXG4gICAgU2VuZFN0YXJ0U3RyZWFtaW5nKCkge1xyXG4gICAgICAgIHRoaXMuc2VuZE1lc3NhZ2VDb250cm9sbGVyLnNlbmRNZXNzYWdlVG9TdHJlYW1lcignU3RhcnRTdHJlYW1pbmcnKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogU2VuZCBhIFN0b3AgU3RyZWFtaW5nIE1lc3NhZ2UgdG8gdGhlIFVFIEluc3RhbmNlXHJcbiAgICAgKi9cclxuICAgIFNlbmRTdG9wU3RyZWFtaW5nKCkge1xyXG4gICAgICAgIHRoaXMuc2VuZE1lc3NhZ2VDb250cm9sbGVyLnNlbmRNZXNzYWdlVG9TdHJlYW1lcignU3RvcFN0cmVhbWluZycpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTZW5kIGEgUmVxdWVzdCBJbml0aWFsIFNldHRpbmdzIHRvIHRoZSBVRSBJbnN0YW5jZVxyXG4gICAgICovXHJcbiAgICBTZW5kUmVxdWVzdEluaXRpYWxTZXR0aW5ncygpIHtcclxuICAgICAgICB0aGlzLnNlbmRNZXNzYWdlQ29udHJvbGxlci5zZW5kTWVzc2FnZVRvU3RyZWFtZXIoJ1JlcXVlc3RJbml0aWFsU2V0dGluZ3MnKTtcclxuICAgIH1cclxufVxyXG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvVWVJbnN0YW5jZU1lc3NhZ2UvVHdvV2F5TWFwLnRzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9VZUluc3RhbmNlTWVzc2FnZS9Ud29XYXlNYXAudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywge1xuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIlR3b1dheU1hcFwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBUd29XYXlNYXApXG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcbi8vIENvcHlyaWdodCBFcGljIEdhbWVzLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcbmNsYXNzIFR3b1dheU1hcCB7XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSBtYXAgLSBhbiBvcHRpb25hbCBtYXAgb2YgcGFyYW1ldGVyc1xyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLm1hcCA9IG5ldyBNYXAoKTtcclxuICAgICAgICB0aGlzLnJldmVyc2VNYXAgPSBuZXcgTWFwKCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEdldCB0aGUgdmFsdWUgZnJvbSB0aGUgbWFwIGJ5IGtleVxyXG4gICAgICogQHBhcmFtIGtleSAtIHRoZSBrZXkgd2UgYXJlIHNlYXJjaGluZyBieVxyXG4gICAgICogQHJldHVybnMgLSB0aGUgdmFsdWUgYXNzb2NpYXRlZCB3aXRoIHRoZSBrZXlcclxuICAgICAqL1xyXG4gICAgZ2V0RnJvbUtleShrZXkpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5tYXAuZ2V0KGtleSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEdldCB0aGUgcmV2ZXJzZSBrZXkgZnJvbSB0aGUgbWFwIGJ5IHNlYXJjaGluZyBieSB2YWx1ZVxyXG4gICAgICogQHBhcmFtIHZhbHVlIC0gdGhlIGtleSB3ZSBhcmUgc2VhcmNoaW5nIGJ5XHJcbiAgICAgKiBAcmV0dXJucyAtIHRoZXkga2V5IGFzc29jaWF0ZWQgd2l0aCB0aGUgdmFsdWVcclxuICAgICAqL1xyXG4gICAgZ2V0RnJvbVZhbHVlKHZhbHVlKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucmV2ZXJzZU1hcC5nZXQodmFsdWUpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBBZGQgYSBrZXkgYW5kIHZhbHVlIHRvIGJvdGggdGhlIG1hcCBhbmQgcmV2ZXJzZSBtYXBcclxuICAgICAqIEBwYXJhbSBrZXkgLSB0aGUgaW5kZXhpbmcga2V5XHJcbiAgICAgKiBAcGFyYW0gdmFsdWUgLSB0aGUgdmFsdWUgYXNzb2NpYXRlZCB3aXRoIHRoZSBrZXlcclxuICAgICAqL1xyXG4gICAgYWRkKGtleSwgdmFsdWUpIHtcclxuICAgICAgICB0aGlzLm1hcC5zZXQoa2V5LCB2YWx1ZSk7XHJcbiAgICAgICAgdGhpcy5yZXZlcnNlTWFwLnNldCh2YWx1ZSwga2V5KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmVtb3ZlIGEga2V5IGFuZCB2YWx1ZSBmcm9tIGJvdGggdGhlIG1hcCBhbmQgcmV2ZXJzZSBtYXBcclxuICAgICAqIEBwYXJhbSBrZXkgLSB0aGUgaW5kZXhpbmcga2V5XHJcbiAgICAgKiBAcGFyYW0gdmFsdWUgLSB0aGUgdmFsdWUgYXNzb2NpYXRlZCB3aXRoIHRoZSBrZXlcclxuICAgICAqL1xyXG4gICAgcmVtb3ZlKGtleSwgdmFsdWUpIHtcclxuICAgICAgICB0aGlzLm1hcC5kZWxldGUoa2V5KTtcclxuICAgICAgICB0aGlzLnJldmVyc2VNYXAuZGVsZXRlKHZhbHVlKTtcclxuICAgIH1cclxufVxyXG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvVXRpbC9Db29yZGluYXRlQ29udmVydGVyLnRzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9VdGlsL0Nvb3JkaW5hdGVDb252ZXJ0ZXIudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywge1xuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIkNvb3JkaW5hdGVDb252ZXJ0ZXJcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gQ29vcmRpbmF0ZUNvbnZlcnRlciksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiTm9ybWFsaXplZFF1YW50aXplZFNpZ25lZENvb3JkXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIE5vcm1hbGl6ZWRRdWFudGl6ZWRTaWduZWRDb29yZCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiTm9ybWFsaXplZFF1YW50aXplZFVuc2lnbmVkQ29vcmRcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gTm9ybWFsaXplZFF1YW50aXplZFVuc2lnbmVkQ29vcmQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIlVucXVhbnRpemVkRGVub3JtYWxpemVkVW5zaWduZWRDb29yZFwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBVbnF1YW50aXplZERlbm9ybWFsaXplZFVuc2lnbmVkQ29vcmQpXG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vTG9nZ2VyL0xvZ2dlciAqLyBcIi4vc3JjL0xvZ2dlci9Mb2dnZXIudHNcIik7XG4vLyBDb3B5cmlnaHQgRXBpYyBHYW1lcywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG5cclxuLyoqXHJcbiAqIENvbnZlcnRzIGNvb3JkaW5hdGVzIGZyb20gZWxlbWVudCByZWxhdGl2ZSBjb29yZGluYXRlcyB0byB2YWx1ZXMgbm9ybWFsaXplZCB3aXRoaW4gdGhlIHZhbHVlIHJhbmdlIG9mIGEgc2hvcnQgKGFuZCBiYWNrIGFnYWluKVxyXG4gKi9cclxuY2xhc3MgQ29vcmRpbmF0ZUNvbnZlcnRlciB7XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB2aWRlb0VsZW1lbnRQcm92aWRlciAtIHRoZSBkaXYgZWxlbWVudCB0aGF0IHRoZSB2aWRlbyBwbGF5ZXIgd2lsbCBiZSBpbmplY3RlZCBpbnRvXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHZpZGVvRWxlbWVudFByb3ZpZGVyKSB7XHJcbiAgICAgICAgdGhpcy52aWRlb0VsZW1lbnRQcm92aWRlciA9IHZpZGVvRWxlbWVudFByb3ZpZGVyO1xyXG4gICAgICAgIHRoaXMubm9ybWFsaXplQW5kUXVhbnRpemVVbnNpZ25lZEZ1bmMgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm9ybWFsaXplIGFuZCBxdWFudGl6ZSB1bnNpZ25lZCwgbWV0aG9kIG5vdCBpbXBsZW1lbnRlZC4nKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMubm9ybWFsaXplQW5kUXVhbnRpemVTaWduZWRGdW5jID0gKCkgPT4ge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vcm1hbGl6ZSBhbmQgdW5xdWFudGl6ZSBzaWduZWQsIG1ldGhvZCBub3QgaW1wbGVtZW50ZWQuJyk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmRlbm9ybWFsaXplQW5kVW5xdWFudGl6ZVVuc2lnbmVkRnVuYyA9ICgpID0+IHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdEZW5vcm1hbGl6ZSBhbmQgdW5xdWFudGl6ZSB1bnNpZ25lZCwgbWV0aG9kIG5vdCBpbXBsZW1lbnRlZC4nKTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgc3VyZmFjZSBtZXRob2QgZm9yIHNldHRlck5vcm1hbGl6ZUFuZFF1YW50aXplVW5zaWduZWRcclxuICAgICAqIEBwYXJhbSB4IC0geCBheGlzIHBvaW50XHJcbiAgICAgKiBAcGFyYW0geSAtIHkgYXhpcyBwb2ludFxyXG4gICAgICovXHJcbiAgICBub3JtYWxpemVBbmRRdWFudGl6ZVVuc2lnbmVkKHgsIHkpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5ub3JtYWxpemVBbmRRdWFudGl6ZVVuc2lnbmVkRnVuYyh4LCB5KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVGhlIHN1cmZhY2UgbWV0aG9kIGZvciBzZXR0ZXJVbnF1YW50aXplQW5kRGVub3JtYWxpemVVbnNpZ25lZFxyXG4gICAgICogQHBhcmFtIHggLSB4IGF4aXMgcG9pbnRcclxuICAgICAqIEBwYXJhbSB5IC0geSBheGlzIHBvaW50XHJcbiAgICAgKi9cclxuICAgIHVucXVhbnRpemVBbmREZW5vcm1hbGl6ZVVuc2lnbmVkKHgsIHkpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5kZW5vcm1hbGl6ZUFuZFVucXVhbnRpemVVbnNpZ25lZEZ1bmMoeCwgeSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFRoZSBzdXJmYWNlIG1ldGhvZCBmb3Igc2V0dGVyTm9ybWFsaXplQW5kUXVhbnRpemVTaWduZWRcclxuICAgICAqIEBwYXJhbSB4IC0geCBheGlzIHBvaW50XHJcbiAgICAgKiBAcGFyYW0geSAtIHkgYXhpcyBwb2ludFxyXG4gICAgICovXHJcbiAgICBub3JtYWxpemVBbmRRdWFudGl6ZVNpZ25lZCh4LCB5KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubm9ybWFsaXplQW5kUXVhbnRpemVTaWduZWRGdW5jKHgsIHkpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBzZXQgdXAgdGhlIE5vcm1hbGl6ZSBBbmQgUXVhbnRpemUgbWV0aG9kcyBiYXNlZCBvbiB0aGUgYXNwZWN0IHJhdGlvIGFuZCB0aGUgdmlkZW8gcGxheWVyIHJhdGlvXHJcbiAgICAgKi9cclxuICAgIHNldHVwTm9ybWFsaXplQW5kUXVhbnRpemUoKSB7XHJcbiAgICAgICAgdGhpcy52aWRlb0VsZW1lbnRQYXJlbnQgPVxyXG4gICAgICAgICAgICB0aGlzLnZpZGVvRWxlbWVudFByb3ZpZGVyLmdldFZpZGVvUGFyZW50RWxlbWVudCgpO1xyXG4gICAgICAgIHRoaXMudmlkZW9FbGVtZW50ID0gdGhpcy52aWRlb0VsZW1lbnRQcm92aWRlci5nZXRWaWRlb0VsZW1lbnQoKTtcclxuICAgICAgICBpZiAodGhpcy52aWRlb0VsZW1lbnRQYXJlbnQgJiYgdGhpcy52aWRlb0VsZW1lbnQpIHtcclxuICAgICAgICAgICAgY29uc3QgcGxheWVyQXNwZWN0UmF0aW8gPSB0aGlzLnZpZGVvRWxlbWVudFBhcmVudC5jbGllbnRIZWlnaHQgL1xyXG4gICAgICAgICAgICAgICAgdGhpcy52aWRlb0VsZW1lbnRQYXJlbnQuY2xpZW50V2lkdGg7XHJcbiAgICAgICAgICAgIGNvbnN0IHZpZGVvQXNwZWN0UmF0aW8gPSB0aGlzLnZpZGVvRWxlbWVudC52aWRlb0hlaWdodCAvIHRoaXMudmlkZW9FbGVtZW50LnZpZGVvV2lkdGg7XHJcbiAgICAgICAgICAgIGlmIChwbGF5ZXJBc3BlY3RSYXRpbyA+IHZpZGVvQXNwZWN0UmF0aW8pIHtcclxuICAgICAgICAgICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksICdTZXR1cCBOb3JtYWxpemUgYW5kIFF1YW50aXplIGZvciBwbGF5ZXJBc3BlY3RSYXRpbyA+IHZpZGVvQXNwZWN0UmF0aW8nLCA2KTtcclxuICAgICAgICAgICAgICAgIHRoaXMucmF0aW8gPSBwbGF5ZXJBc3BlY3RSYXRpbyAvIHZpZGVvQXNwZWN0UmF0aW87XHJcbiAgICAgICAgICAgICAgICB0aGlzLm5vcm1hbGl6ZUFuZFF1YW50aXplVW5zaWduZWRGdW5jID0gKHgsIHkpID0+IHRoaXMubm9ybWFsaXplQW5kUXVhbnRpemVVbnNpZ25lZFBsYXllckJpZ2dlcih4LCB5KTtcclxuICAgICAgICAgICAgICAgIHRoaXMubm9ybWFsaXplQW5kUXVhbnRpemVTaWduZWRGdW5jID0gKHgsIHkpID0+IHRoaXMubm9ybWFsaXplQW5kUXVhbnRpemVTaWduZWRQbGF5ZXJCaWdnZXIoeCwgeSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRlbm9ybWFsaXplQW5kVW5xdWFudGl6ZVVuc2lnbmVkRnVuYyA9ICh4LCB5KSA9PiB0aGlzLmRlbm9ybWFsaXplQW5kVW5xdWFudGl6ZVVuc2lnbmVkUGxheWVyQmlnZ2VyKHgsIHkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ1NldHVwIE5vcm1hbGl6ZSBhbmQgUXVhbnRpemUgZm9yIHBsYXllckFzcGVjdFJhdGlvIDw9IHZpZGVvQXNwZWN0UmF0aW8nLCA2KTtcclxuICAgICAgICAgICAgICAgIHRoaXMucmF0aW8gPSB2aWRlb0FzcGVjdFJhdGlvIC8gcGxheWVyQXNwZWN0UmF0aW87XHJcbiAgICAgICAgICAgICAgICB0aGlzLm5vcm1hbGl6ZUFuZFF1YW50aXplVW5zaWduZWRGdW5jID0gKHgsIHkpID0+IHRoaXMubm9ybWFsaXplQW5kUXVhbnRpemVVbnNpZ25lZFBsYXllclNtYWxsZXIoeCwgeSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm5vcm1hbGl6ZUFuZFF1YW50aXplU2lnbmVkRnVuYyA9ICh4LCB5KSA9PiB0aGlzLm5vcm1hbGl6ZUFuZFF1YW50aXplU2lnbmVkUGxheWVyU21hbGxlcih4LCB5KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGVub3JtYWxpemVBbmRVbnF1YW50aXplVW5zaWduZWRGdW5jID0gKHgsIHkpID0+IHRoaXMuZGVub3JtYWxpemVBbmRVbnF1YW50aXplVW5zaWduZWRQbGF5ZXJTbWFsbGVyKHgsIHkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBub3JtYWxpemVBbmRRdWFudGl6ZVVuc2lnbmVkIGZvciBwbGF5ZXJBc3BlY3RSYXRpbyA+IHZpZGVvQXNwZWN0UmF0aW9cclxuICAgICAqIEBwYXJhbSB4IC0geCBheGlzIHBvaW50XHJcbiAgICAgKiBAcGFyYW0geSAtIHkgYXhpcyBwb2ludFxyXG4gICAgICovXHJcbiAgICBub3JtYWxpemVBbmRRdWFudGl6ZVVuc2lnbmVkUGxheWVyQmlnZ2VyKHgsIHkpIHtcclxuICAgICAgICBjb25zdCBub3JtYWxpemVkWCA9IHggLyB0aGlzLnZpZGVvRWxlbWVudFBhcmVudC5jbGllbnRXaWR0aDtcclxuICAgICAgICBjb25zdCBub3JtYWxpemVkWSA9IHRoaXMucmF0aW8gKiAoeSAvIHRoaXMudmlkZW9FbGVtZW50UGFyZW50LmNsaWVudEhlaWdodCAtIDAuNSkgKyAwLjU7XHJcbiAgICAgICAgaWYgKG5vcm1hbGl6ZWRYIDwgMC4wIHx8XHJcbiAgICAgICAgICAgIG5vcm1hbGl6ZWRYID4gMS4wIHx8XHJcbiAgICAgICAgICAgIG5vcm1hbGl6ZWRZIDwgMC4wIHx8XHJcbiAgICAgICAgICAgIG5vcm1hbGl6ZWRZID4gMS4wKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgTm9ybWFsaXplZFF1YW50aXplZFVuc2lnbmVkQ29vcmQoZmFsc2UsIDY1NTM1LCA2NTUzNSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IE5vcm1hbGl6ZWRRdWFudGl6ZWRVbnNpZ25lZENvb3JkKHRydWUsIG5vcm1hbGl6ZWRYICogNjU1MzYsIG5vcm1hbGl6ZWRZICogNjU1MzYpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogdW5xdWFudGl6ZUFuZERlbm9ybWFsaXplVW5zaWduZWQgZm9yIHBsYXllckFzcGVjdFJhdGlvID4gdmlkZW9Bc3BlY3RSYXRpb1xyXG4gICAgICogQHBhcmFtIHggLSB4IGF4aXMgcG9pbnRcclxuICAgICAqIEBwYXJhbSB5IC0geSBheGlzIHBvaW50XHJcbiAgICAgKi9cclxuICAgIGRlbm9ybWFsaXplQW5kVW5xdWFudGl6ZVVuc2lnbmVkUGxheWVyQmlnZ2VyKHgsIHkpIHtcclxuICAgICAgICBjb25zdCBub3JtYWxpemVkWCA9IHggLyA2NTUzNjtcclxuICAgICAgICBjb25zdCBub3JtYWxpemVkWSA9ICh5IC8gNjU1MzYgLSAwLjUpIC8gdGhpcy5yYXRpbyArIDAuNTtcclxuICAgICAgICByZXR1cm4gbmV3IFVucXVhbnRpemVkRGVub3JtYWxpemVkVW5zaWduZWRDb29yZChub3JtYWxpemVkWCAqIHRoaXMudmlkZW9FbGVtZW50UGFyZW50LmNsaWVudFdpZHRoLCBub3JtYWxpemVkWSAqIHRoaXMudmlkZW9FbGVtZW50UGFyZW50LmNsaWVudEhlaWdodCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIG5vcm1hbGl6ZUFuZFF1YW50aXplU2lnbmVkIGZvciBwbGF5ZXJBc3BlY3RSYXRpbyA+IHZpZGVvQXNwZWN0UmF0aW9cclxuICAgICAqIEBwYXJhbSB4IC0geCBheGlzIHBvaW50XHJcbiAgICAgKiBAcGFyYW0geSAtIHkgYXhpcyBwb2ludFxyXG4gICAgICovXHJcbiAgICBub3JtYWxpemVBbmRRdWFudGl6ZVNpZ25lZFBsYXllckJpZ2dlcih4LCB5KSB7XHJcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplZFggPSB4IC8gKDAuNSAqIHRoaXMudmlkZW9FbGVtZW50UGFyZW50LmNsaWVudFdpZHRoKTtcclxuICAgICAgICBjb25zdCBub3JtYWxpemVkWSA9ICh0aGlzLnJhdGlvICogeSkgLyAoMC41ICogdGhpcy52aWRlb0VsZW1lbnRQYXJlbnQuY2xpZW50SGVpZ2h0KTtcclxuICAgICAgICByZXR1cm4gbmV3IE5vcm1hbGl6ZWRRdWFudGl6ZWRTaWduZWRDb29yZChub3JtYWxpemVkWCAqIDMyNzY3LCBub3JtYWxpemVkWSAqIDMyNzY3KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogbm9ybWFsaXplQW5kUXVhbnRpemVVbnNpZ25lZCBmb3IgcGxheWVyQXNwZWN0UmF0aW8gPD0gdmlkZW9Bc3BlY3RSYXRpb1xyXG4gICAgICogQHBhcmFtIHggLSB4IGF4aXMgcG9pbnRcclxuICAgICAqIEBwYXJhbSB5IC0geSBheGlzIHBvaW50XHJcbiAgICAgKi9cclxuICAgIG5vcm1hbGl6ZUFuZFF1YW50aXplVW5zaWduZWRQbGF5ZXJTbWFsbGVyKHgsIHkpIHtcclxuICAgICAgICBjb25zdCBub3JtYWxpemVkWCA9IHRoaXMucmF0aW8gKiAoeCAvIHRoaXMudmlkZW9FbGVtZW50UGFyZW50LmNsaWVudFdpZHRoIC0gMC41KSArIDAuNTtcclxuICAgICAgICBjb25zdCBub3JtYWxpemVkWSA9IHkgLyB0aGlzLnZpZGVvRWxlbWVudFBhcmVudC5jbGllbnRIZWlnaHQ7XHJcbiAgICAgICAgaWYgKG5vcm1hbGl6ZWRYIDwgMC4wIHx8XHJcbiAgICAgICAgICAgIG5vcm1hbGl6ZWRYID4gMS4wIHx8XHJcbiAgICAgICAgICAgIG5vcm1hbGl6ZWRZIDwgMC4wIHx8XHJcbiAgICAgICAgICAgIG5vcm1hbGl6ZWRZID4gMS4wKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgTm9ybWFsaXplZFF1YW50aXplZFVuc2lnbmVkQ29vcmQoZmFsc2UsIDY1NTM1LCA2NTUzNSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IE5vcm1hbGl6ZWRRdWFudGl6ZWRVbnNpZ25lZENvb3JkKHRydWUsIG5vcm1hbGl6ZWRYICogNjU1MzYsIG5vcm1hbGl6ZWRZICogNjU1MzYpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogdW5xdWFudGl6ZUFuZERlbm9ybWFsaXplVW5zaWduZWQgZm9yIHBsYXllckFzcGVjdFJhdGlvIDw9IHZpZGVvQXNwZWN0UmF0aW9cclxuICAgICAqIEBwYXJhbSB4IC0geCBheGlzIHBvaW50XHJcbiAgICAgKiBAcGFyYW0geSAtIHkgYXhpcyBwb2ludFxyXG4gICAgICovXHJcbiAgICBkZW5vcm1hbGl6ZUFuZFVucXVhbnRpemVVbnNpZ25lZFBsYXllclNtYWxsZXIoeCwgeSkge1xyXG4gICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRYID0gKHggLyA2NTUzNiAtIDAuNSkgLyB0aGlzLnJhdGlvICsgMC41O1xyXG4gICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRZID0geSAvIDY1NTM2O1xyXG4gICAgICAgIHJldHVybiBuZXcgVW5xdWFudGl6ZWREZW5vcm1hbGl6ZWRVbnNpZ25lZENvb3JkKG5vcm1hbGl6ZWRYICogdGhpcy52aWRlb0VsZW1lbnRQYXJlbnQuY2xpZW50V2lkdGgsIG5vcm1hbGl6ZWRZICogdGhpcy52aWRlb0VsZW1lbnRQYXJlbnQuY2xpZW50SGVpZ2h0KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogbm9ybWFsaXplQW5kUXVhbnRpemVTaWduZWQgZm9yIHBsYXllckFzcGVjdFJhdGlvIDw9IHZpZGVvQXNwZWN0UmF0aW9cclxuICAgICAqIEBwYXJhbSB4IC0geCBheGlzIHBvaW50XHJcbiAgICAgKiBAcGFyYW0geSAtIHkgYXhpcyBwb2ludFxyXG4gICAgICovXHJcbiAgICBub3JtYWxpemVBbmRRdWFudGl6ZVNpZ25lZFBsYXllclNtYWxsZXIoeCwgeSkge1xyXG4gICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRYID0gKHRoaXMucmF0aW8gKiB4KSAvICgwLjUgKiB0aGlzLnZpZGVvRWxlbWVudFBhcmVudC5jbGllbnRXaWR0aCk7XHJcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplZFkgPSB5IC8gKDAuNSAqIHRoaXMudmlkZW9FbGVtZW50UGFyZW50LmNsaWVudEhlaWdodCk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBOb3JtYWxpemVkUXVhbnRpemVkU2lnbmVkQ29vcmQobm9ybWFsaXplZFggKiAzMjc2Nywgbm9ybWFsaXplZFkgKiAzMjc2Nyk7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIEEgY2xhc3MgZm9yIE5vcm1hbGl6ZUFuZFF1YW50aXplVW5zaWduZWQgb2JqZWN0c1xyXG4gKi9cclxuY2xhc3MgTm9ybWFsaXplZFF1YW50aXplZFVuc2lnbmVkQ29vcmQge1xyXG4gICAgY29uc3RydWN0b3IoaW5SYW5nZSwgeCwgeSkge1xyXG4gICAgICAgIHRoaXMuaW5SYW5nZSA9IGluUmFuZ2U7XHJcbiAgICAgICAgdGhpcy54ID0geDtcclxuICAgICAgICB0aGlzLnkgPSB5O1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBBIGNsYXNzIGZvciBVbnF1YW50aXplZEFuZERlbm9ybWFsaXplVW5zaWduZWQgb2JqZWN0c1xyXG4gKi9cclxuY2xhc3MgVW5xdWFudGl6ZWREZW5vcm1hbGl6ZWRVbnNpZ25lZENvb3JkIHtcclxuICAgIGNvbnN0cnVjdG9yKHgsIHkpIHtcclxuICAgICAgICB0aGlzLnggPSB4O1xyXG4gICAgICAgIHRoaXMueSA9IHk7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIEEgY2xhc3MgZm9yIE5vcm1hbGl6ZWRRdWFudGl6ZWRTaWduZWRDb29yZCBvYmplY3RzXHJcbiAqL1xyXG5jbGFzcyBOb3JtYWxpemVkUXVhbnRpemVkU2lnbmVkQ29vcmQge1xyXG4gICAgY29uc3RydWN0b3IoeCwgeSkge1xyXG4gICAgICAgIHRoaXMueCA9IHg7XHJcbiAgICAgICAgdGhpcy55ID0geTtcclxuICAgIH1cclxufVxyXG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvVXRpbC9FdmVudEVtaXR0ZXIudHNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvVXRpbC9FdmVudEVtaXR0ZXIudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiQWZrVGltZWRPdXRFdmVudFwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBBZmtUaW1lZE91dEV2ZW50KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJBZmtXYXJuaW5nQWN0aXZhdGVFdmVudFwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBBZmtXYXJuaW5nQWN0aXZhdGVFdmVudCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiQWZrV2FybmluZ0RlYWN0aXZhdGVFdmVudFwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBBZmtXYXJuaW5nRGVhY3RpdmF0ZUV2ZW50KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJBZmtXYXJuaW5nVXBkYXRlRXZlbnRcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gQWZrV2FybmluZ1VwZGF0ZUV2ZW50KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJEYXRhQ2hhbm5lbENsb3NlRXZlbnRcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gRGF0YUNoYW5uZWxDbG9zZUV2ZW50KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJEYXRhQ2hhbm5lbEVycm9yRXZlbnRcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gRGF0YUNoYW5uZWxFcnJvckV2ZW50KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJEYXRhQ2hhbm5lbE9wZW5FdmVudFwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBEYXRhQ2hhbm5lbE9wZW5FdmVudCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiRXZlbnRFbWl0dGVyXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIEV2ZW50RW1pdHRlciksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiSGlkZUZyZWV6ZUZyYW1lRXZlbnRcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gSGlkZUZyZWV6ZUZyYW1lRXZlbnQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIkluaXRpYWxTZXR0aW5nc0V2ZW50XCI6ICgpID0+ICgvKiBiaW5kaW5nICovIEluaXRpYWxTZXR0aW5nc0V2ZW50KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJMYXRlbmN5VGVzdFJlc3VsdEV2ZW50XCI6ICgpID0+ICgvKiBiaW5kaW5nICovIExhdGVuY3lUZXN0UmVzdWx0RXZlbnQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIkxvYWRGcmVlemVGcmFtZUV2ZW50XCI6ICgpID0+ICgvKiBiaW5kaW5nICovIExvYWRGcmVlemVGcmFtZUV2ZW50KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJQbGF5U3RyZWFtRXJyb3JFdmVudFwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBQbGF5U3RyZWFtRXJyb3JFdmVudCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiUGxheVN0cmVhbUV2ZW50XCI6ICgpID0+ICgvKiBiaW5kaW5nICovIFBsYXlTdHJlYW1FdmVudCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiUGxheVN0cmVhbVJlamVjdGVkRXZlbnRcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gUGxheVN0cmVhbVJlamVjdGVkRXZlbnQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIlNldHRpbmdzQ2hhbmdlZEV2ZW50XCI6ICgpID0+ICgvKiBiaW5kaW5nICovIFNldHRpbmdzQ2hhbmdlZEV2ZW50KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJTdGF0c1JlY2VpdmVkRXZlbnRcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gU3RhdHNSZWNlaXZlZEV2ZW50KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJTdHJlYW1Mb2FkaW5nRXZlbnRcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gU3RyZWFtTG9hZGluZ0V2ZW50KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJTdHJlYW1QcmVDb25uZWN0RXZlbnRcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gU3RyZWFtUHJlQ29ubmVjdEV2ZW50KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJTdHJlYW1QcmVEaXNjb25uZWN0RXZlbnRcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gU3RyZWFtUHJlRGlzY29ubmVjdEV2ZW50KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJTdHJlYW1SZWNvbm5lY3RFdmVudFwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBTdHJlYW1SZWNvbm5lY3RFdmVudCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiU3RyZWFtZXJMaXN0TWVzc2FnZUV2ZW50XCI6ICgpID0+ICgvKiBiaW5kaW5nICovIFN0cmVhbWVyTGlzdE1lc3NhZ2VFdmVudCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiVmlkZW9FbmNvZGVyQXZnUVBFdmVudFwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBWaWRlb0VuY29kZXJBdmdRUEV2ZW50KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJWaWRlb0luaXRpYWxpemVkRXZlbnRcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gVmlkZW9Jbml0aWFsaXplZEV2ZW50KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJXZWJSdGNBdXRvQ29ubmVjdEV2ZW50XCI6ICgpID0+ICgvKiBiaW5kaW5nICovIFdlYlJ0Y0F1dG9Db25uZWN0RXZlbnQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIldlYlJ0Y0Nvbm5lY3RlZEV2ZW50XCI6ICgpID0+ICgvKiBiaW5kaW5nICovIFdlYlJ0Y0Nvbm5lY3RlZEV2ZW50KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJXZWJSdGNDb25uZWN0aW5nRXZlbnRcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gV2ViUnRjQ29ubmVjdGluZ0V2ZW50KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJXZWJSdGNEaXNjb25uZWN0ZWRFdmVudFwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBXZWJSdGNEaXNjb25uZWN0ZWRFdmVudCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiV2ViUnRjRmFpbGVkRXZlbnRcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gV2ViUnRjRmFpbGVkRXZlbnQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIldlYlJ0Y1NkcEV2ZW50XCI6ICgpID0+ICgvKiBiaW5kaW5nICovIFdlYlJ0Y1NkcEV2ZW50KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJYckZyYW1lRXZlbnRcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gWHJGcmFtZUV2ZW50KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJYclNlc3Npb25FbmRlZEV2ZW50XCI6ICgpID0+ICgvKiBiaW5kaW5nICovIFhyU2Vzc2lvbkVuZGVkRXZlbnQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIlhyU2Vzc2lvblN0YXJ0ZWRFdmVudFwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBYclNlc3Npb25TdGFydGVkRXZlbnQpXG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcbi8qKlxyXG4gKiBBbiBldmVudCB0aGF0IGlzIGVtaXR0ZWQgd2hlbiBBRksgZGlzY29ubmVjdCBpcyBhYm91dCB0byBoYXBwZW4uXHJcbiAqIENhbiBiZSBjYW5jZWxsZWQgYnkgY2FsbGluZyB0aGUgY2FsbGJhY2sgZnVuY3Rpb24gcHJvdmlkZWQgYXMgcGFydCBvZiB0aGUgZXZlbnQuXHJcbiAqL1xyXG5jbGFzcyBBZmtXYXJuaW5nQWN0aXZhdGVFdmVudCBleHRlbmRzIEV2ZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKGRhdGEpIHtcclxuICAgICAgICBzdXBlcignYWZrV2FybmluZ0FjdGl2YXRlJyk7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogQW4gZXZlbnQgdGhhdCBpcyBlbWl0dGVkIHdoZW4gdGhlIEFGSyBkaXNjb25uZWN0IGNvdW50ZG93biBpcyB1cGRhdGVkLlxyXG4gKi9cclxuY2xhc3MgQWZrV2FybmluZ1VwZGF0ZUV2ZW50IGV4dGVuZHMgRXZlbnQge1xyXG4gICAgY29uc3RydWN0b3IoZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKCdhZmtXYXJuaW5nVXBkYXRlJyk7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogQW4gZXZlbnQgdGhhdCBpcyBlbWl0dGVkIHdoZW4gQUZLIHdhcm5pbmcgaXMgZGVhY3RpdmF0ZWQuXHJcbiAqL1xyXG5jbGFzcyBBZmtXYXJuaW5nRGVhY3RpdmF0ZUV2ZW50IGV4dGVuZHMgRXZlbnQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoJ2Fma1dhcm5pbmdEZWFjdGl2YXRlJyk7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIEFuIGV2ZW50IHRoYXQgaXMgZW1pdHRlZCB3aGVuIEFGSyBjb3VudGRvd24gcmVhY2hlcyAwIGFuZCB0aGUgdXNlciBpcyBkaXNjb25uZWN0ZWQuXHJcbiAqL1xyXG5jbGFzcyBBZmtUaW1lZE91dEV2ZW50IGV4dGVuZHMgRXZlbnQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoJ2Fma1RpbWVkT3V0Jyk7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIEFuIGV2ZW50IHRoYXQgaXMgZW1pdHRlZCB3aGVuIHdlIHJlY2VpdmUgbmV3IHZpZGVvIHF1YWxpdHkgdmFsdWUuXHJcbiAqL1xyXG5jbGFzcyBWaWRlb0VuY29kZXJBdmdRUEV2ZW50IGV4dGVuZHMgRXZlbnQge1xyXG4gICAgY29uc3RydWN0b3IoZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKCd2aWRlb0VuY29kZXJBdmdRUCcpO1xyXG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIEFuIGV2ZW50IHRoYXQgaXMgZW1pdHRlZCBhZnRlciBhIFdlYlJ0YyBjb25uZWN0aW9uIGhhcyBiZWVuIG5lZ290aWF0ZWQuXHJcbiAqL1xyXG5jbGFzcyBXZWJSdGNTZHBFdmVudCBleHRlbmRzIEV2ZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKCd3ZWJSdGNTZHAnKTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogQW4gZXZlbnQgdGhhdCBpcyBlbWl0dGVkIHdoZW4gYXV0byBjb25uZWN0aW5nLlxyXG4gKi9cclxuY2xhc3MgV2ViUnRjQXV0b0Nvbm5lY3RFdmVudCBleHRlbmRzIEV2ZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKCd3ZWJSdGNBdXRvQ29ubmVjdCcpO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBBbiBldmVudCB0aGF0IGlzIGVtaXR0ZWQgd2hlbiBzZW5kaW5nIGEgV2ViUnRjIG9mZmVyLlxyXG4gKi9cclxuY2xhc3MgV2ViUnRjQ29ubmVjdGluZ0V2ZW50IGV4dGVuZHMgRXZlbnQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoJ3dlYlJ0Y0Nvbm5lY3RpbmcnKTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogQW4gZXZlbnQgdGhhdCBpcyBlbWl0dGVkIHdoZW4gV2ViUnRjIGNvbm5lY3Rpb24gaGFzIGJlZW4gZXN0YWJsaXNoZWQuXHJcbiAqL1xyXG5jbGFzcyBXZWJSdGNDb25uZWN0ZWRFdmVudCBleHRlbmRzIEV2ZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKCd3ZWJSdGNDb25uZWN0ZWQnKTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogQW4gZXZlbnQgdGhhdCBpcyBlbWl0dGVkIGlmIFdlYlJ0YyBjb25uZWN0aW9uIGhhcyBmYWlsZWQuXHJcbiAqL1xyXG5jbGFzcyBXZWJSdGNGYWlsZWRFdmVudCBleHRlbmRzIEV2ZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKCd3ZWJSdGNGYWlsZWQnKTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogQW4gZXZlbnQgdGhhdCBpcyBlbWl0dGVkIGlmIFdlYlJ0YyBjb25uZWN0aW9uIGlzIGRpc2Nvbm5lY3RlZC5cclxuICovXHJcbmNsYXNzIFdlYlJ0Y0Rpc2Nvbm5lY3RlZEV2ZW50IGV4dGVuZHMgRXZlbnQge1xyXG4gICAgY29uc3RydWN0b3IoZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKCd3ZWJSdGNEaXNjb25uZWN0ZWQnKTtcclxuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBBbiBldmVudCB0aGF0IGlzIGVtaXR0ZWQgd2hlbiBSVENEYXRhQ2hhbm5lbCBpcyBvcGVuZWQuXHJcbiAqL1xyXG5jbGFzcyBEYXRhQ2hhbm5lbE9wZW5FdmVudCBleHRlbmRzIEV2ZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKGRhdGEpIHtcclxuICAgICAgICBzdXBlcignZGF0YUNoYW5uZWxPcGVuJyk7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogQW4gZXZlbnQgdGhhdCBpcyBlbWl0dGVkIHdoZW4gUlRDRGF0YUNoYW5uZWwgaXMgY2xvc2VkLlxyXG4gKi9cclxuY2xhc3MgRGF0YUNoYW5uZWxDbG9zZUV2ZW50IGV4dGVuZHMgRXZlbnQge1xyXG4gICAgY29uc3RydWN0b3IoZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKCdkYXRhQ2hhbm5lbENsb3NlJyk7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogQW4gZXZlbnQgdGhhdCBpcyBlbWl0dGVkIG9uIFJUQ0RhdGFDaGFubmVsIGVycm9ycy5cclxuICovXHJcbmNsYXNzIERhdGFDaGFubmVsRXJyb3JFdmVudCBleHRlbmRzIEV2ZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKGRhdGEpIHtcclxuICAgICAgICBzdXBlcignZGF0YUNoYW5uZWxFcnJvcicpO1xyXG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIEFuIGV2ZW50IHRoYXQgaXMgZW1pdHRlZCB3aGVuIHRoZSB2aWRlbyBzdHJlYW0gaGFzIGJlZW4gaW5pdGlhbGl6ZWQuXHJcbiAqL1xyXG5jbGFzcyBWaWRlb0luaXRpYWxpemVkRXZlbnQgZXh0ZW5kcyBFdmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcigndmlkZW9Jbml0aWFsaXplZCcpO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBBbiBldmVudCB0aGF0IGlzIGVtaXR0ZWQgd2hlbiB2aWRlbyBzdHJlYW0gbG9hZGluZyBzdGFydHMuXHJcbiAqL1xyXG5jbGFzcyBTdHJlYW1Mb2FkaW5nRXZlbnQgZXh0ZW5kcyBFdmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcignc3RyZWFtTG9hZGluZycpO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBBbiBldmVudCB0aGF0IGlzIGVtaXR0ZWQgd2hlbiB2aWRlbyBzdHJlYW0gbG9hZGluZyBoYXMgZmluaXNoZWQuXHJcbiAqL1xyXG5jbGFzcyBTdHJlYW1QcmVDb25uZWN0RXZlbnQgZXh0ZW5kcyBFdmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcignc3RyZWFtQ29ubmVjdCcpO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBBbiBldmVudCB0aGF0IGlzIGVtaXR0ZWQgd2hlbiB2aWRlbyBzdHJlYW0gaGFzIHN0b3BwZWQuXHJcbiAqL1xyXG5jbGFzcyBTdHJlYW1QcmVEaXNjb25uZWN0RXZlbnQgZXh0ZW5kcyBFdmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcignc3RyZWFtRGlzY29ubmVjdCcpO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBBbiBldmVudCB0aGF0IGlzIGVtaXR0ZWQgd2hlbiB2aWRlbyBzdHJlYW0gaXMgcmVjb25uZWN0aW5nLlxyXG4gKi9cclxuY2xhc3MgU3RyZWFtUmVjb25uZWN0RXZlbnQgZXh0ZW5kcyBFdmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcignc3RyZWFtUmVjb25uZWN0Jyk7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIEFuIGV2ZW50IHRoYXQgaXMgZW1pdHRlZCBpZiB0aGVyZSBhcmUgZXJyb3JzIGxvYWRpbmcgdGhlIHZpZGVvIHN0cmVhbS5cclxuICovXHJcbmNsYXNzIFBsYXlTdHJlYW1FcnJvckV2ZW50IGV4dGVuZHMgRXZlbnQge1xyXG4gICAgY29uc3RydWN0b3IoZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKCdwbGF5U3RyZWFtRXJyb3InKTtcclxuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBBbiBldmVudCB0aGF0IGlzIGVtaXR0ZWQgYmVmb3JlIHRyeWluZyB0byBzdGFydCB2aWRlbyBwbGF5YmFjay5cclxuICovXHJcbmNsYXNzIFBsYXlTdHJlYW1FdmVudCBleHRlbmRzIEV2ZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKCdwbGF5U3RyZWFtJyk7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIEFuIGV2ZW50IHRoYXQgaXMgZW1pdHRlZCBpZiB0aGUgYnJvd3NlciByZWplY3RzIHZpZGVvIHBsYXliYWNrLiBDYW4gaGFwcGVuIGZvciBleGFtcGxlIGlmXHJcbiAqIHZpZGVvIGF1dG8tcGxheSB3aXRob3V0IHVzZXIgaW50ZXJhY3Rpb24gaXMgcmVmdXNlZCBieSB0aGUgYnJvd3Nlci5cclxuICovXHJcbmNsYXNzIFBsYXlTdHJlYW1SZWplY3RlZEV2ZW50IGV4dGVuZHMgRXZlbnQge1xyXG4gICAgY29uc3RydWN0b3IoZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKCdwbGF5U3RyZWFtUmVqZWN0ZWQnKTtcclxuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBBbiBldmVudCB0aGF0IGlzIGVtaXR0ZWQgd2hlbiByZWNlaXZpbmcgYSBmdWxsIEZyZWV6ZUZyYW1lIGltYWdlIGZyb20gVUUuXHJcbiAqL1xyXG5jbGFzcyBMb2FkRnJlZXplRnJhbWVFdmVudCBleHRlbmRzIEV2ZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKGRhdGEpIHtcclxuICAgICAgICBzdXBlcignbG9hZEZyZWV6ZUZyYW1lJyk7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogQW4gZXZlbnQgdGhhdCBpcyBlbWl0dGVkIHdoZW4gcmVjZWl2aW5nIFVuZnJlZXplRnJhbWUgbWVzc2FnZSBmcm9tIFVFIGFuZCB2aWRlbyBwbGF5YmFjayBpcyBhYm91dCB0byBiZSByZXN1bWVkLlxyXG4gKi9cclxuY2xhc3MgSGlkZUZyZWV6ZUZyYW1lRXZlbnQgZXh0ZW5kcyBFdmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcignaGlkZUZyZWV6ZUZyYW1lJyk7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIEFuIGV2ZW50IHRoYXQgaXMgZW1pdHRlZCB3aGVuIHJlY2VpdmluZyBXZWJSVEMgc3RhdGlzdGljcy5cclxuICovXHJcbmNsYXNzIFN0YXRzUmVjZWl2ZWRFdmVudCBleHRlbmRzIEV2ZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKGRhdGEpIHtcclxuICAgICAgICBzdXBlcignc3RhdHNSZWNlaXZlZCcpO1xyXG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIEFuIGV2ZW50IHRoYXQgaXMgZW1pdHRlZCB3aGVuIHN0cmVhbWVyIGxpc3QgY2hhbmdlcy5cclxuICovXHJcbmNsYXNzIFN0cmVhbWVyTGlzdE1lc3NhZ2VFdmVudCBleHRlbmRzIEV2ZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKGRhdGEpIHtcclxuICAgICAgICBzdXBlcignc3RyZWFtZXJMaXN0TWVzc2FnZScpO1xyXG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIEFuIGV2ZW50IHRoYXQgaXMgZW1pdHRlZCB3aGVuIHJlY2VpdmluZyBsYXRlbmN5IHRlc3QgcmVzdWx0cy5cclxuICovXHJcbmNsYXNzIExhdGVuY3lUZXN0UmVzdWx0RXZlbnQgZXh0ZW5kcyBFdmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcihkYXRhKSB7XHJcbiAgICAgICAgc3VwZXIoJ2xhdGVuY3lUZXN0UmVzdWx0Jyk7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogQW4gZXZlbnQgdGhhdCBpcyBlbWl0dGVkIHdoZW4gcmVjZWl2aW5nIGluaXRpYWwgc2V0dGluZ3MgZnJvbSBVRS5cclxuICovXHJcbmNsYXNzIEluaXRpYWxTZXR0aW5nc0V2ZW50IGV4dGVuZHMgRXZlbnQge1xyXG4gICAgY29uc3RydWN0b3IoZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKCdpbml0aWFsU2V0dGluZ3MnKTtcclxuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBBbiBldmVudCB0aGF0IGlzIGVtaXR0ZWQgd2hlbiBQaXhlbFN0cmVhbWluZyBzZXR0aW5ncyBjaGFuZ2UuXHJcbiAqL1xyXG5jbGFzcyBTZXR0aW5nc0NoYW5nZWRFdmVudCBleHRlbmRzIEV2ZW50IHtcclxuICAgIGNvbnN0cnVjdG9yKGRhdGEpIHtcclxuICAgICAgICBzdXBlcignc2V0dGluZ3NDaGFuZ2VkJyk7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogRXZlbnQgZW1pdHRlZCB3aGVuIGFuIFhSIFNlc3Npb24gc3RhcnRzXHJcbiAqL1xyXG5jbGFzcyBYclNlc3Npb25TdGFydGVkRXZlbnQgZXh0ZW5kcyBFdmVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcigneHJTZXNzaW9uU3RhcnRlZCcpO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBFdmVudCBlbWl0dGVkIHdoZW4gYW4gWFIgU2Vzc2lvbiBlbmRzXHJcbiAqL1xyXG5jbGFzcyBYclNlc3Npb25FbmRlZEV2ZW50IGV4dGVuZHMgRXZlbnQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoJ3hyU2Vzc2lvbkVuZGVkJyk7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIEV2ZW50IGVtaXR0ZWQgd2hlbiBhbiBYUiBGcmFtZSBpcyBjb21wbGV0ZVxyXG4gKi9cclxuY2xhc3MgWHJGcmFtZUV2ZW50IGV4dGVuZHMgRXZlbnQge1xyXG4gICAgY29uc3RydWN0b3IoZGF0YSkge1xyXG4gICAgICAgIHN1cGVyKCd4ckZyYW1lJyk7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcclxuICAgIH1cclxufVxyXG5jbGFzcyBFdmVudEVtaXR0ZXIgZXh0ZW5kcyBFdmVudFRhcmdldCB7XHJcbiAgICAvKipcclxuICAgICAqIERpc3BhdGNoIGEgbmV3IGV2ZW50LlxyXG4gICAgICogQHBhcmFtIGUgZXZlbnRcclxuICAgICAqIEByZXR1cm5zXHJcbiAgICAgKi9cclxuICAgIGRpc3BhdGNoRXZlbnQoZSkge1xyXG4gICAgICAgIHJldHVybiBzdXBlci5kaXNwYXRjaEV2ZW50KGUpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWdpc3RlciBhbiBldmVudCBoYW5kbGVyLlxyXG4gICAgICogQHBhcmFtIHR5cGUgZXZlbnQgbmFtZVxyXG4gICAgICogQHBhcmFtIGxpc3RlbmVyIGV2ZW50IGhhbmRsZXIgZnVuY3Rpb25cclxuICAgICAqL1xyXG4gICAgYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xyXG4gICAgICAgIHN1cGVyLmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW1vdmUgYW4gZXZlbnQgaGFuZGxlci5cclxuICAgICAqIEBwYXJhbSB0eXBlIGV2ZW50IG5hbWVcclxuICAgICAqIEBwYXJhbSBsaXN0ZW5lciBldmVudCBoYW5kbGVyIGZ1bmN0aW9uXHJcbiAgICAgKi9cclxuICAgIHJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcclxuICAgICAgICBzdXBlci5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKTtcclxuICAgIH1cclxufVxyXG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvVXRpbC9FdmVudExpc3RlbmVyVHJhY2tlci50c1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL1V0aWwvRXZlbnRMaXN0ZW5lclRyYWNrZXIudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJFdmVudExpc3RlbmVyVHJhY2tlclwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBFdmVudExpc3RlbmVyVHJhY2tlcilcbi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pO1xuLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuY2xhc3MgRXZlbnRMaXN0ZW5lclRyYWNrZXIge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy51bnJlZ2lzdGVyQ2FsbGJhY2tzID0gW107XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEFkZCBhIG5ldyBjYWxsYmFjayB0aGF0IGlzIGV4ZWN1dGVkIHdoZW4gdW5yZWdpc3RlckFsbCBpcyBjYWxsZWQuXHJcbiAgICAgKiBAcGFyYW0gY2FsbGJhY2tcclxuICAgICAqL1xyXG4gICAgYWRkVW5yZWdpc3RlckNhbGxiYWNrKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgdGhpcy51bnJlZ2lzdGVyQ2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBFeGVjdXRlIGFsbCBjYWxsYmFja3MgYW5kIGNsZWFyIHRoZSBsaXN0LlxyXG4gICAgICovXHJcbiAgICB1bnJlZ2lzdGVyQWxsKCkge1xyXG4gICAgICAgIGZvciAoY29uc3QgY2FsbGJhY2sgb2YgdGhpcy51bnJlZ2lzdGVyQ2FsbGJhY2tzKSB7XHJcbiAgICAgICAgICAgIGNhbGxiYWNrKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMudW5yZWdpc3RlckNhbGxiYWNrcyA9IFtdO1xyXG4gICAgfVxyXG59XHJcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9VdGlsL0ZpbGVVdGlsLnRzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvVXRpbC9GaWxlVXRpbC50cyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywge1xuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIkZpbGVUZW1wbGF0ZVwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBGaWxlVGVtcGxhdGUpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIkZpbGVVdGlsXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIEZpbGVVdGlsKVxuLyogaGFybW9ueSBleHBvcnQgKi8gfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL0xvZ2dlci9Mb2dnZXIgKi8gXCIuL3NyYy9Mb2dnZXIvTG9nZ2VyLnRzXCIpO1xuLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuXHJcbi8qKlxyXG4gKiBVdGlsaXR5IGZ1bmN0aW9uIGZvciBwb3B1bGF0ZSBmaWxlIGluZm9ybWF0aW9uIGZyb20gYnl0ZSBidWZmZXJzLlxyXG4gKi9cclxuY2xhc3MgRmlsZVV0aWwge1xyXG4gICAgLyoqXHJcbiAgICAgKiBQcm9jZXNzZXMgYSBmaWxlcyBleHRlbnNpb24gd2hlbiByZWNlaXZlZCBvdmVyIGRhdGEgY2hhbm5lbFxyXG4gICAgICogQHBhcmFtIHZpZXcgLSB0aGUgZmlsZSBleHRlbnNpb24gZGF0YVxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgc2V0RXh0ZW5zaW9uRnJvbUJ5dGVzKHZpZXcsIGZpbGUpIHtcclxuICAgICAgICAvLyBSZXNldCBmaWxlIGlmIHdlIGdvdCBhIGZpbGUgbWVzc2FnZSBhbmQgd2UgYXJlIG5vdCBcInJlY2VpdmluZ1wiIGl0IHlldFxyXG4gICAgICAgIGlmICghZmlsZS5yZWNlaXZpbmcpIHtcclxuICAgICAgICAgICAgZmlsZS5taW1ldHlwZSA9ICcnO1xyXG4gICAgICAgICAgICBmaWxlLmV4dGVuc2lvbiA9ICcnO1xyXG4gICAgICAgICAgICBmaWxlLnJlY2VpdmluZyA9IHRydWU7XHJcbiAgICAgICAgICAgIGZpbGUudmFsaWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgZmlsZS5zaXplID0gMDtcclxuICAgICAgICAgICAgZmlsZS5kYXRhID0gW107XHJcbiAgICAgICAgICAgIGZpbGUudGltZXN0YW1wU3RhcnQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuICAgICAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ1JlY2VpdmVkIGZpcnN0IGNodW5rIG9mIGZpbGUnLCA2KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgZXh0ZW5zaW9uQXNTdHJpbmcgPSBuZXcgVGV4dERlY29kZXIoJ3V0Zi0xNicpLmRlY29kZSh2aWV3LnNsaWNlKDEpKTtcclxuICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBleHRlbnNpb25Bc1N0cmluZywgNik7XHJcbiAgICAgICAgZmlsZS5leHRlbnNpb24gPSBleHRlbnNpb25Bc1N0cmluZztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUHJvY2Vzc2VzIGEgZmlsZXMgbWltZSB0eXBlIHdoZW4gcmVjZWl2ZWQgb3ZlciBkYXRhIGNoYW5uZWxcclxuICAgICAqIEBwYXJhbSB2aWV3IC0gdGhlIGZpbGUgbWltZSB0eXBlIGRhdGFcclxuICAgICAqL1xyXG4gICAgc3RhdGljIHNldE1pbWVUeXBlRnJvbUJ5dGVzKHZpZXcsIGZpbGUpIHtcclxuICAgICAgICAvLyBSZXNldCBmaWxlIGlmIHdlIGdvdCBhIGZpbGUgbWVzc2FnZSBhbmQgd2UgYXJlIG5vdCBcInJlY2VpdmluZ1wiIGl0IHlldFxyXG4gICAgICAgIGlmICghZmlsZS5yZWNlaXZpbmcpIHtcclxuICAgICAgICAgICAgZmlsZS5taW1ldHlwZSA9ICcnO1xyXG4gICAgICAgICAgICBmaWxlLmV4dGVuc2lvbiA9ICcnO1xyXG4gICAgICAgICAgICBmaWxlLnJlY2VpdmluZyA9IHRydWU7XHJcbiAgICAgICAgICAgIGZpbGUudmFsaWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgZmlsZS5zaXplID0gMDtcclxuICAgICAgICAgICAgZmlsZS5kYXRhID0gW107XHJcbiAgICAgICAgICAgIGZpbGUudGltZXN0YW1wU3RhcnQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuICAgICAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ1JlY2VpdmVkIGZpcnN0IGNodW5rIG9mIGZpbGUnLCA2KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgbWltZUFzU3RyaW5nID0gbmV3IFRleHREZWNvZGVyKCd1dGYtMTYnKS5kZWNvZGUodmlldy5zbGljZSgxKSk7XHJcbiAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgbWltZUFzU3RyaW5nLCA2KTtcclxuICAgICAgICBmaWxlLm1pbWV0eXBlID0gbWltZUFzU3RyaW5nO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBQcm9jZXNzZXMgYSBmaWxlcyBjb250ZW50cyB3aGVuIHJlY2VpdmVkIG92ZXIgZGF0YSBjaGFubmVsXHJcbiAgICAgKiBAcGFyYW0gdmlldyAtIHRoZSBmaWxlIGNvbnRlbnRzIGRhdGFcclxuICAgICAqL1xyXG4gICAgc3RhdGljIHNldENvbnRlbnRzRnJvbUJ5dGVzKHZpZXcsIGZpbGUpIHtcclxuICAgICAgICAvLyBJZiB3ZSBoYXZlbid0IHJlY2VpdmVkIHRoZSBpbml0aWFsIHNldHVwIGluc3RydWN0aW9ucywgcmV0dXJuXHJcbiAgICAgICAgaWYgKCFmaWxlLnJlY2VpdmluZylcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIC8vIEV4dHJhY3QgdGhlIHRvdGFsIHNpemUgb2YgdGhlIGZpbGUgKGFjcm9zcyBhbGwgY2h1bmtzKVxyXG4gICAgICAgIGZpbGUuc2l6ZSA9IE1hdGguY2VpbChuZXcgRGF0YVZpZXcodmlldy5zbGljZSgxLCA1KS5idWZmZXIpLmdldEludDMyKDAsIHRydWUpIC9cclxuICAgICAgICAgICAgMTYzNzkgLyogVGhlIG1heGltdW0gbnVtYmVyIG9mIHBheWxvYWQgYml0cyBwZXIgbWVzc2FnZSovKTtcclxuICAgICAgICAvLyBHZXQgdGhlIGZpbGUgcGFydCBvZiB0aGUgcGF5bG9hZFxyXG4gICAgICAgIGNvbnN0IGZpbGVCeXRlcyA9IHZpZXcuc2xpY2UoMSArIDQpO1xyXG4gICAgICAgIC8vIEFwcGVuZCB0byBleGlzdGluZyBkYXRhIHRoYXQgaG9sZHMgdGhlIGZpbGVcclxuICAgICAgICBmaWxlLmRhdGEucHVzaChmaWxlQnl0ZXMpO1xyXG4gICAgICAgIC8vIFVuY29tbWVudCBmb3IgZGVidWdcclxuICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBgUmVjZWl2ZWQgZmlsZSBjaHVuazogJHtmaWxlLmRhdGEubGVuZ3RofS8ke2ZpbGUuc2l6ZX1gLCA2KTtcclxuICAgICAgICBpZiAoZmlsZS5kYXRhLmxlbmd0aCA9PT0gZmlsZS5zaXplKSB7XHJcbiAgICAgICAgICAgIGZpbGUucmVjZWl2aW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGZpbGUudmFsaWQgPSB0cnVlO1xyXG4gICAgICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnUmVjZWl2ZWQgY29tcGxldGUgZmlsZScsIDYpO1xyXG4gICAgICAgICAgICBjb25zdCB0cmFuc2ZlckR1cmF0aW9uID0gbmV3IERhdGUoKS5nZXRUaW1lKCkgLSBmaWxlLnRpbWVzdGFtcFN0YXJ0O1xyXG4gICAgICAgICAgICBjb25zdCB0cmFuc2ZlckJpdHJhdGUgPSBNYXRoLnJvdW5kKChmaWxlLnNpemUgKiAxNiAqIDEwMjQpIC8gdHJhbnNmZXJEdXJhdGlvbik7XHJcbiAgICAgICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksIGBBdmVyYWdlIHRyYW5zZmVyIGJpdHJhdGU6ICR7dHJhbnNmZXJCaXRyYXRlfWtiL3Mgb3ZlciAke3RyYW5zZmVyRHVyYXRpb24gLyAxMDAwfSBzZWNvbmRzYCwgNik7XHJcbiAgICAgICAgICAgIC8vIEZpbGUgcmVjb25zdHJ1Y3Rpb25cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIEV4YW1wbGUgY29kZSB0byByZWNvbnN0cnVjdCB0aGUgZmlsZVxyXG4gICAgICAgICAgICAgKlxyXG4gICAgICAgICAgICAgKiBUaGlzIGNvZGUgcmVjb25zdHJ1Y3RzIHRoZSByZWNlaXZlZCBkYXRhIGludG8gdGhlIG9yaWdpbmFsIGZpbGUgYmFzZWQgb24gdGhlIG1pbWUgdHlwZSBhbmQgZXh0ZW5zaW9uIHByb3ZpZGVkIGFuZCB0aGVuIGRvd25sb2FkcyB0aGUgcmVjb25zdHJ1Y3RlZCBmaWxlXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBjb25zdCByZWNlaXZlZCA9IG5ldyBCbG9iKGZpbGUuZGF0YSwgeyB0eXBlOiBmaWxlLm1pbWV0eXBlIH0pO1xyXG4gICAgICAgICAgICBjb25zdCBhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xyXG4gICAgICAgICAgICBhLnNldEF0dHJpYnV0ZSgnaHJlZicsIFVSTC5jcmVhdGVPYmplY3RVUkwocmVjZWl2ZWQpKTtcclxuICAgICAgICAgICAgYS5zZXRBdHRyaWJ1dGUoJ2Rvd25sb2FkJywgYHRyYW5zZmVyLiR7ZmlsZS5leHRlbnNpb259YCk7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kKGEpO1xyXG4gICAgICAgICAgICAvLyBpZiB5b3UgYXJlIHNvIGluY2xpbmVkIHRvIG1ha2UgaXQgYXV0by1kb3dubG9hZCwgZG8gc29tZXRoaW5nIGxpa2U6IGEuY2xpY2soKTtcclxuICAgICAgICAgICAgYS5yZW1vdmUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoZmlsZS5kYXRhLmxlbmd0aCA+IGZpbGUuc2l6ZSkge1xyXG4gICAgICAgICAgICBmaWxlLnJlY2VpdmluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkxvZ2dlci5FcnJvcihfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksIGBSZWNlaXZlZCBiaWdnZXIgZmlsZSB0aGFuIGFkdmVydGlzZWQ6ICR7ZmlsZS5kYXRhLmxlbmd0aH0vJHtmaWxlLnNpemV9YCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBBIGNsYXNzIHRoYXQgcmVwcmVzZW50cyBhIHRlbXBsYXRlIGZvciBhIGRvd25sb2FkZWQgZmlsZVxyXG4gKi9cclxuY2xhc3MgRmlsZVRlbXBsYXRlIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMubWltZXR5cGUgPSAnJztcclxuICAgICAgICB0aGlzLmV4dGVuc2lvbiA9ICcnO1xyXG4gICAgICAgIHRoaXMucmVjZWl2aW5nID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5zaXplID0gMDtcclxuICAgICAgICB0aGlzLmRhdGEgPSBbXTtcclxuICAgICAgICB0aGlzLnZhbGlkID0gZmFsc2U7XHJcbiAgICB9XHJcbn1cclxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL1V0aWwvV2ViR0xVdGlscy50c1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvVXRpbC9XZWJHTFV0aWxzLnRzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJXZWJHTFV0aWxzXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIFdlYkdMVXRpbHMpXG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcbi8vIENvcHlyaWdodCBFcGljIEdhbWVzLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcbmNsYXNzIFdlYkdMVXRpbHMge1xyXG4gICAgc3RhdGljIHZlcnRleFNoYWRlcigpIHtcclxuICAgICAgICByZXR1cm4gYFxuXHRcdGF0dHJpYnV0ZSB2ZWMyIGFfcG9zaXRpb247XG5cdFx0YXR0cmlidXRlIHZlYzIgYV90ZXhDb29yZDtcblxuXHRcdC8vIGlucHV0XG5cdFx0dW5pZm9ybSB2ZWMyIHVfcmVzb2x1dGlvbjtcblx0XHR1bmlmb3JtIHZlYzQgdV9vZmZzZXQ7XG5cblx0XHQvL1xuXHRcdHZhcnlpbmcgdmVjMiB2X3RleENvb3JkO1xuXG5cdFx0dm9pZCBtYWluKCkge1xuXHRcdCAgIC8vIGNvbnZlcnQgdGhlIHJlY3RhbmdsZSBmcm9tIHBpeGVscyB0byAwLjAgdG8gMS4wXG5cdFx0ICAgdmVjMiB6ZXJvVG9PbmUgPSBhX3Bvc2l0aW9uIC8gdV9yZXNvbHV0aW9uO1xuXG5cdFx0ICAgLy8gY29udmVydCBmcm9tIDAtPjEgdG8gMC0+MlxuXHRcdCAgIHZlYzIgemVyb1RvVHdvID0gemVyb1RvT25lICogMi4wO1xuXG5cdFx0ICAgLy8gY29udmVydCBmcm9tIDAtPjIgdG8gLTEtPisxIChjbGlwc3BhY2UpXG5cdFx0ICAgdmVjMiBjbGlwU3BhY2UgPSB6ZXJvVG9Ud28gLSAxLjA7XG5cblx0XHQgICBnbF9Qb3NpdGlvbiA9IHZlYzQoY2xpcFNwYWNlICogdmVjMigxLCAtMSksIDAsIDEpO1xuXHRcdCAgIC8vIHBhc3MgdGhlIHRleENvb3JkIHRvIHRoZSBmcmFnbWVudCBzaGFkZXJcblx0XHQgICAvLyBUaGUgR1BVIHdpbGwgaW50ZXJwb2xhdGUgdGhpcyB2YWx1ZSBiZXR3ZWVuIHBvaW50cy5cblx0XHQgICB2X3RleENvb3JkID0gKGFfdGV4Q29vcmQgKiB1X29mZnNldC54eSkgKyB1X29mZnNldC56dztcblx0XHR9XG5cdFx0YDtcclxuICAgIH1cclxuICAgIHN0YXRpYyBmcmFnbWVudFNoYWRlcigpIHtcclxuICAgICAgICByZXR1cm4gYFxuXHRcdHByZWNpc2lvbiBtZWRpdW1wIGZsb2F0O1xuXG5cdFx0Ly8gb3VyIHRleHR1cmVcblx0XHR1bmlmb3JtIHNhbXBsZXIyRCB1X2ltYWdlO1xuXG5cdFx0Ly8gdGhlIHRleENvb3JkcyBwYXNzZWQgaW4gZnJvbSB0aGUgdmVydGV4IHNoYWRlci5cblx0XHR2YXJ5aW5nIHZlYzIgdl90ZXhDb29yZDtcblxuXHRcdHZvaWQgbWFpbigpIHtcblx0XHQgICBnbF9GcmFnQ29sb3IgPSB0ZXh0dXJlMkQodV9pbWFnZSwgdl90ZXhDb29yZCk7XG5cdFx0fVxuXHRcdGA7XHJcbiAgICB9XHJcbn1cclxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL1V0aWwvV2ViWFJVdGlscy50c1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvVXRpbC9XZWJYUlV0aWxzLnRzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJXZWJYUlV0aWxzXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIFdlYlhSVXRpbHMpXG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcbi8vIENvcHlyaWdodCBFcGljIEdhbWVzLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcbmNsYXNzIFdlYlhSVXRpbHMge1xyXG4gICAgLyoqXHJcbiAgICAgKiBEZWVwIGNvcGllcyBhIGdhbWVwYWQncyB2YWx1ZXMgYnkgZmlyc3QgY29udmVydGluZyBpdCB0byBhIEpTT04gb2JqZWN0IGFuZCB0aGVuIGJhY2sgdG8gYSBnYW1lcGFkXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGdhbWVwYWQgdGhlIG9yaWdpbmFsIGdhbWVwYWRcclxuICAgICAqIEByZXR1cm5zIGEgbmV3IGdhbWVwYWQgb2JqZWN0LCBwb3B1bGF0ZWQgd2l0aCB0aGUgb3JpZ2luYWwgZ2FtZXBhZHMgdmFsdWVzXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBkZWVwQ29weUdhbWVwYWQoZ2FtZXBhZCkge1xyXG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHtcclxuICAgICAgICAgICAgYnV0dG9uczogZ2FtZXBhZC5idXR0b25zLm1hcCgoYikgPT4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgICAgICAgICBwcmVzc2VkOiBiLnByZXNzZWQsXHJcbiAgICAgICAgICAgICAgICB0b3VjaGVkOiBiLnRvdWNoZWRcclxuICAgICAgICAgICAgfSkpKSxcclxuICAgICAgICAgICAgYXhlczogZ2FtZXBhZC5heGVzXHJcbiAgICAgICAgfSkpO1xyXG4gICAgfVxyXG59XHJcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9WaWRlb1BsYXllci9TdHJlYW1Db250cm9sbGVyLnRzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvVmlkZW9QbGF5ZXIvU3RyZWFtQ29udHJvbGxlci50cyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywge1xuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIlN0cmVhbUNvbnRyb2xsZXJcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gU3RyZWFtQ29udHJvbGxlcilcbi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9Mb2dnZXIvTG9nZ2VyICovIFwiLi9zcmMvTG9nZ2VyL0xvZ2dlci50c1wiKTtcbi8vIENvcHlyaWdodCBFcGljIEdhbWVzLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcblxyXG4vKipcclxuICogVmlkZW8gUGxheWVyIENvbnRyb2xsZXIgaGFuZGxlcyB0aGUgY3JlYXRpb24gb2YgdGhlIHZpZGVvIEhUTUwgZWxlbWVudCBhbmQgYWxsIGhhbmRsZXJzXHJcbiAqL1xyXG5jbGFzcyBTdHJlYW1Db250cm9sbGVyIHtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHZpZGVvRWxlbWVudFByb3ZpZGVyIFZpZGVvIFBsYXllciBpbnN0YW5jZVxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcih2aWRlb0VsZW1lbnRQcm92aWRlcikge1xyXG4gICAgICAgIHRoaXMudmlkZW9FbGVtZW50UHJvdmlkZXIgPSB2aWRlb0VsZW1lbnRQcm92aWRlcjtcclxuICAgICAgICB0aGlzLmF1ZGlvRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ0F1ZGlvJyk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEhhbmRsZXMgd2hlbiB0aGUgUGVlciBjb25uZWN0aW9uIGhhcyBhIHRyYWNrIGV2ZW50XHJcbiAgICAgKiBAcGFyYW0gcnRjVHJhY2tFdmVudCAtIFJUQyBUcmFjayBFdmVudFxyXG4gICAgICovXHJcbiAgICBoYW5kbGVPblRyYWNrKHJ0Y1RyYWNrRXZlbnQpIHtcclxuICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnaGFuZGxlT25UcmFjayAnICsgSlNPTi5zdHJpbmdpZnkocnRjVHJhY2tFdmVudC5zdHJlYW1zKSwgNik7XHJcbiAgICAgICAgY29uc3QgdmlkZW9FbGVtZW50ID0gdGhpcy52aWRlb0VsZW1lbnRQcm92aWRlci5nZXRWaWRlb0VsZW1lbnQoKTtcclxuICAgICAgICBpZiAocnRjVHJhY2tFdmVudC50cmFjaykge1xyXG4gICAgICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnR290IHRyYWNrIC0gJyArXHJcbiAgICAgICAgICAgICAgICBydGNUcmFja0V2ZW50LnRyYWNrLmtpbmQgK1xyXG4gICAgICAgICAgICAgICAgJyBpZD0nICtcclxuICAgICAgICAgICAgICAgIHJ0Y1RyYWNrRXZlbnQudHJhY2suaWQgK1xyXG4gICAgICAgICAgICAgICAgJyByZWFkeVN0YXRlPScgK1xyXG4gICAgICAgICAgICAgICAgcnRjVHJhY2tFdmVudC50cmFjay5yZWFkeVN0YXRlLCA2KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHJ0Y1RyYWNrRXZlbnQudHJhY2sua2luZCA9PSAnYXVkaW8nKSB7XHJcbiAgICAgICAgICAgIHRoaXMuQ3JlYXRlQXVkaW9UcmFjayhydGNUcmFja0V2ZW50LnN0cmVhbXNbMF0pO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHJ0Y1RyYWNrRXZlbnQudHJhY2sua2luZCA9PSAndmlkZW8nICYmXHJcbiAgICAgICAgICAgIHZpZGVvRWxlbWVudC5zcmNPYmplY3QgIT09IHJ0Y1RyYWNrRXZlbnQuc3RyZWFtc1swXSkge1xyXG4gICAgICAgICAgICB2aWRlb0VsZW1lbnQuc3JjT2JqZWN0ID0gcnRjVHJhY2tFdmVudC5zdHJlYW1zWzBdO1xyXG4gICAgICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnU2V0IHZpZGVvIHNvdXJjZSBmcm9tIHZpZGVvIHRyYWNrIG9udHJhY2suJyk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgdGhlIGF1ZGlvIGRldmljZSB3aGVuIHJlY2VpdmluZyBhbiBSVENUcmFja0V2ZW50IHdpdGggdGhlIGtpbmQgb2YgXCJhdWRpb1wiXHJcbiAgICAgKiBAcGFyYW0gYXVkaW9NZWRpYVN0cmVhbSAtIEF1ZGlvIE1lZGlhIHN0cmVhbSB0cmFja1xyXG4gICAgICovXHJcbiAgICBDcmVhdGVBdWRpb1RyYWNrKGF1ZGlvTWVkaWFTdHJlYW0pIHtcclxuICAgICAgICBjb25zdCB2aWRlb0VsZW1lbnQgPSB0aGlzLnZpZGVvRWxlbWVudFByb3ZpZGVyLmdldFZpZGVvRWxlbWVudCgpO1xyXG4gICAgICAgIC8vIGRvIG5vdGhpbmcgdGhlIHZpZGVvIGhhcyB0aGUgc2FtZSBtZWRpYSBzdHJlYW0gYXMgdGhlIGF1ZGlvIHRyYWNrIHdlIGhhdmUgaGVyZSAodGhleSBhcmUgbGlua2VkKVxyXG4gICAgICAgIGlmICh2aWRlb0VsZW1lbnQuc3JjT2JqZWN0ID09IGF1ZGlvTWVkaWFTdHJlYW0pIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyB2aWRlbyBlbGVtZW50IGhhcyBzb21lIG90aGVyIG1lZGlhIHN0cmVhbSB0aGF0IGlzIG5vdCBhc3NvY2lhdGVkIHdpdGggdGhpcyBhdWRpbyB0cmFja1xyXG4gICAgICAgIGVsc2UgaWYgKHZpZGVvRWxlbWVudC5zcmNPYmplY3QgJiZcclxuICAgICAgICAgICAgdmlkZW9FbGVtZW50LnNyY09iamVjdCAhPT0gYXVkaW9NZWRpYVN0cmVhbSkge1xyXG4gICAgICAgICAgICAvLyBjcmVhdGUgYSBuZXcgYXVkaW8gZWxlbWVudFxyXG4gICAgICAgICAgICB0aGlzLmF1ZGlvRWxlbWVudC5zcmNPYmplY3QgPSBhdWRpb01lZGlhU3RyZWFtO1xyXG4gICAgICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnQ3JlYXRlZCBuZXcgYXVkaW8gZWxlbWVudCB0byBwbGF5IHNlcGFyYXRlIGF1ZGlvIHN0cmVhbS4nKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL1ZpZGVvUGxheWVyL1ZpZGVvUGxheWVyLnRzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL1ZpZGVvUGxheWVyL1ZpZGVvUGxheWVyLnRzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywge1xuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIlZpZGVvUGxheWVyXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIFZpZGVvUGxheWVyKVxuLyogaGFybW9ueSBleHBvcnQgKi8gfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX0NvbmZpZ19Db25maWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL0NvbmZpZy9Db25maWcgKi8gXCIuL3NyYy9Db25maWcvQ29uZmlnLnRzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9Mb2dnZXIvTG9nZ2VyICovIFwiLi9zcmMvTG9nZ2VyL0xvZ2dlci50c1wiKTtcbi8vIENvcHlyaWdodCBFcGljIEdhbWVzLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcblxyXG5cclxuLyoqXHJcbiAqIFRoZSB2aWRlbyBwbGF5ZXIgaHRtbCBlbGVtZW50XHJcbiAqL1xyXG5jbGFzcyBWaWRlb1BsYXllciB7XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB2aWRlb0VsZW1lbnRQYXJlbnQgdGhlIGh0bWwgZGl2IHRoZSB0aGUgdmlkZW8gcGxheWVyIHdpbGwgYmUgaW5qZWN0ZWQgaW50b1xyXG4gICAgICogQHBhcmFtIGNvbmZpZyB0aGUgYXBwbGljYXRpb25zIGNvbmZpZ3VyYXRpb24uIFdlJ3JlIGludGVyZXN0ZWQgaW4gdGhlIHN0YXJ0VmlkZW9NdXRlZCBmbGFnXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHZpZGVvRWxlbWVudFBhcmVudCwgY29uZmlnKSB7XHJcbiAgICAgICAgdGhpcy5sYXN0VGltZVJlc2l6ZWQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuICAgICAgICB0aGlzLnZpZGVvRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3ZpZGVvJyk7XHJcbiAgICAgICAgdGhpcy5jb25maWcgPSBjb25maWc7XHJcbiAgICAgICAgdGhpcy52aWRlb0VsZW1lbnQuaWQgPSAnc3RyZWFtaW5nVmlkZW8nO1xyXG4gICAgICAgIHRoaXMudmlkZW9FbGVtZW50LmRpc2FibGVQaWN0dXJlSW5QaWN0dXJlID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLnZpZGVvRWxlbWVudC5wbGF5c0lubGluZSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy52aWRlb0VsZW1lbnQuc3R5bGUud2lkdGggPSAnMTAwJSc7XHJcbiAgICAgICAgdGhpcy52aWRlb0VsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gJzEwMCUnO1xyXG4gICAgICAgIHRoaXMudmlkZW9FbGVtZW50LnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcclxuICAgICAgICB0aGlzLnZpZGVvRWxlbWVudC5zdHlsZS5wb2ludGVyRXZlbnRzID0gJ2FsbCc7XHJcbiAgICAgICAgdmlkZW9FbGVtZW50UGFyZW50LmFwcGVuZENoaWxkKHRoaXMudmlkZW9FbGVtZW50KTtcclxuICAgICAgICB0aGlzLm9uUmVzaXplUGxheWVyQ2FsbGJhY2sgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdSZXNvbHV0aW9uIGNoYW5nZWQsIHJlc3R5bGluZyBwbGF5ZXIsIGRpZCB5b3UgZm9yZ2V0IHRvIG92ZXJyaWRlIHRoaXMgZnVuY3Rpb24/Jyk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLm9uTWF0Y2hWaWV3cG9ydFJlc29sdXRpb25DYWxsYmFjayA9ICgpID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ1Jlc29sdXRpb24gY2hhbmdlZCBhbmQgbWF0Y2ggdmlld3BvcnQgcmVzb2x1dGlvbiBpcyB0dXJuZWQgb24sIGRpZCB5b3UgZm9yZ2V0IHRvIG92ZXJyaWRlIHRoaXMgZnVuY3Rpb24/Jyk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvLyBzZXQgcGxheSBmb3IgdmlkZW9cclxuICAgICAgICB0aGlzLnZpZGVvRWxlbWVudC5vbmNsaWNrID0gKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAodGhpcy52aWRlb0VsZW1lbnQucGF1c2VkKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZpZGVvRWxlbWVudC5wbGF5KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMudmlkZW9FbGVtZW50Lm9ubG9hZGVkbWV0YWRhdGEgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMub25WaWRlb0luaXRpYWxpemVkKCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvLyBzZXQgcmVzaXplIGV2ZW50cyB0byB0aGUgd2luZG93cyBpZiBpdCBpcyByZXNpemVkIG9yIGl0cyBvcmllbnRhdGlvbiBpcyBjaGFuZ2VkXHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsICgpID0+IHRoaXMucmVzaXplUGxheWVyU3R5bGUoKSwgdHJ1ZSk7XHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ29yaWVudGF0aW9uY2hhbmdlJywgKCkgPT4gdGhpcy5vbk9yaWVudGF0aW9uQ2hhbmdlKCkpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXRzIHVwIHRoZSB2aWRlbyBlbGVtZW50IHdpdGggYW55IGFwcGxpY2F0aW9uIGNvbmZpZyBhbmQgcGxheXMgdGhlIHZpZGVvIGVsZW1lbnQuXHJcbiAgICAgKiBAcmV0dXJucyBBIHByb21pc2UgZm9yIGlmIHBsYXlpbmcgdGhlIHZpZGVvIHdhcyBzdWNjZXNzZnVsIG9yIG5vdC5cclxuICAgICAqL1xyXG4gICAgcGxheSgpIHtcclxuICAgICAgICB0aGlzLnZpZGVvRWxlbWVudC5tdXRlZCA9IHRoaXMuY29uZmlnLmlzRmxhZ0VuYWJsZWQoX0NvbmZpZ19Db25maWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5GbGFncy5TdGFydFZpZGVvTXV0ZWQpO1xyXG4gICAgICAgIHRoaXMudmlkZW9FbGVtZW50LmF1dG9wbGF5ID0gdGhpcy5jb25maWcuaXNGbGFnRW5hYmxlZChfQ29uZmlnX0NvbmZpZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkZsYWdzLkF1dG9QbGF5VmlkZW8pO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnZpZGVvRWxlbWVudC5wbGF5KCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEByZXR1cm5zIFRydWUgaWYgdGhlIHZpZGVvIGVsZW1lbnQgaXMgcGF1c2VkLlxyXG4gICAgICovXHJcbiAgICBpc1BhdXNlZCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy52aWRlb0VsZW1lbnQucGF1c2VkO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAcmV0dXJucyAtIHdoZXRoZXIgdGhlIHZpZGVvIGVsZW1lbnQgaXMgcGxheWluZy5cclxuICAgICAqL1xyXG4gICAgaXNWaWRlb1JlYWR5KCkge1xyXG4gICAgICAgIHJldHVybiAodGhpcy52aWRlb0VsZW1lbnQucmVhZHlTdGF0ZSAhPT0gdW5kZWZpbmVkICYmXHJcbiAgICAgICAgICAgIHRoaXMudmlkZW9FbGVtZW50LnJlYWR5U3RhdGUgPiAwKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQHJldHVybnMgVHJ1ZSBpZiB0aGUgdmlkZW8gZWxlbWVudCBoYXMgYSB2YWxpZCB2aWRlbyBzb3VyY2UgKHNyY09iamVjdCkuXHJcbiAgICAgKi9cclxuICAgIGhhc1ZpZGVvU291cmNlKCkge1xyXG4gICAgICAgIHJldHVybiAodGhpcy52aWRlb0VsZW1lbnQuc3JjT2JqZWN0ICE9PSB1bmRlZmluZWQgJiZcclxuICAgICAgICAgICAgdGhpcy52aWRlb0VsZW1lbnQuc3JjT2JqZWN0ICE9PSBudWxsKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogR2V0IHRoZSBjdXJyZW50IGNvbnRleHQgb2YgdGhlIGh0bWwgdmlkZW8gZWxlbWVudFxyXG4gICAgICogQHJldHVybnMgLSB0aGUgY3VycmVudCBjb250ZXh0IG9mIHRoZSB2aWRlbyBlbGVtZW50XHJcbiAgICAgKi9cclxuICAgIGdldFZpZGVvRWxlbWVudCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy52aWRlb0VsZW1lbnQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEdldCB0aGUgY3VycmVudCBjb250ZXh0IG9mIHRoZSBodG1sIHZpZGVvIGVsZW1lbnRzIHBhcmVudFxyXG4gICAgICogQHJldHVybnMgLSB0aGUgY3VycmVudCBjb250ZXh0IG9mIHRoZSB2aWRlbyBlbGVtZW50cyBwYXJlbnRcclxuICAgICAqL1xyXG4gICAgZ2V0VmlkZW9QYXJlbnRFbGVtZW50KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnZpZGVvRWxlbWVudC5wYXJlbnRFbGVtZW50O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgdGhlIFZpZGVvIEVsZW1lbnRzIHNyYyBvYmplY3QgdHJhY2tzIHRvIGVuYWJsZVxyXG4gICAgICogQHBhcmFtIGVuYWJsZWQgLSBFbmFibGUgVHJhY2tzIG9uIHRoZSBTcmMgT2JqZWN0XHJcbiAgICAgKi9cclxuICAgIHNldFZpZGVvRW5hYmxlZChlbmFibGVkKSB7XHJcbiAgICAgICAgLy8gdGhpcyBpcyBhIHRlbXBvcmFyeSBoYWNrIHVudGlsIHR5cGUgc2NyaXB0cyB2aWRlbyBlbGVtZW50IGlzIHVwZGF0ZWQgdG8gcmVmbGVjdCB0aGUgbmVlZCBmb3IgdHJhY2tzIG9uIGEgaHRtbCB2aWRlbyBlbGVtZW50XHJcbiAgICAgICAgY29uc3QgdmlkZW9FbGVtZW50ID0gdGhpcy52aWRlb0VsZW1lbnQ7XHJcbiAgICAgICAgdmlkZW9FbGVtZW50LnNyY09iamVjdFxyXG4gICAgICAgICAgICAuZ2V0VHJhY2tzKClcclxuICAgICAgICAgICAgLmZvckVhY2goKHRyYWNrKSA9PiAodHJhY2suZW5hYmxlZCA9IGVuYWJsZWQpKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQW4gb3ZlcnJpZGUgZm9yIHdoZW4gdGhlIHZpZGVvIGhhcyBiZWVuIGluaXRpYWxpemVkIHdpdGggYSBzcmNPYmplY3RcclxuICAgICAqL1xyXG4gICAgb25WaWRlb0luaXRpYWxpemVkKCkge1xyXG4gICAgICAgIC8vIERlZmF1bHQgRnVuY3Rpb25hbGl0eTogRG8gTm90aGluZ1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBPbiB0aGUgb3JpZW50YXRpb24gY2hhbmdlIG9mIGEgd2luZG93IGNsZWFyIHRoZSB0aW1lb3V0XHJcbiAgICAgKi9cclxuICAgIG9uT3JpZW50YXRpb25DaGFuZ2UoKSB7XHJcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMub3JpZW50YXRpb25DaGFuZ2VUaW1lb3V0KTtcclxuICAgICAgICB0aGlzLm9yaWVudGF0aW9uQ2hhbmdlVGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5yZXNpemVQbGF5ZXJTdHlsZSgpO1xyXG4gICAgICAgIH0sIDUwMCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJlc2l6ZXMgdGhlIHBsYXllciBzdHlsZSBiYXNlZCBvbiB0aGUgd2luZG93IGhlaWdodCBhbmQgd2lkdGhcclxuICAgICAqIEByZXR1cm5zIC0gbmlsIGlmIHJlcXVpcmVtZW50cyBhcmUgc2F0aXNmaWVkXHJcbiAgICAgKi9cclxuICAgIHJlc2l6ZVBsYXllclN0eWxlKCkge1xyXG4gICAgICAgIGNvbnN0IHZpZGVvRWxlbWVudFBhcmVudCA9IHRoaXMuZ2V0VmlkZW9QYXJlbnRFbGVtZW50KCk7XHJcbiAgICAgICAgaWYgKCF2aWRlb0VsZW1lbnRQYXJlbnQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnVwZGF0ZVZpZGVvU3RyZWFtU2l6ZSgpO1xyXG4gICAgICAgIGlmICh2aWRlb0VsZW1lbnRQYXJlbnQuY2xhc3NMaXN0LmNvbnRhaW5zKCdmaXhlZC1zaXplJykpIHtcclxuICAgICAgICAgICAgdGhpcy5vblJlc2l6ZVBsYXllckNhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY29udHJvbHMgZm9yIHJlc2l6aW5nIHRoZSBwbGF5ZXJcclxuICAgICAgICB0aGlzLnJlc2l6ZVBsYXllclN0eWxlVG9GaWxsUGFyZW50RWxlbWVudCgpO1xyXG4gICAgICAgIHRoaXMub25SZXNpemVQbGF5ZXJDYWxsYmFjaygpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXNpemVzIHRoZSBwbGF5ZXIgZWxlbWVudCB0byBmaWxsIHRoZSBwYXJlbnQgZWxlbWVudFxyXG4gICAgICovXHJcbiAgICByZXNpemVQbGF5ZXJTdHlsZVRvRmlsbFBhcmVudEVsZW1lbnQoKSB7XHJcbiAgICAgICAgY29uc3QgdmlkZW9FbGVtZW50UGFyZW50ID0gdGhpcy5nZXRWaWRlb1BhcmVudEVsZW1lbnQoKTtcclxuICAgICAgICAvL1ZpZGVvIGlzIG5vdCBpbml0aWFsaXplZCB5ZXQgc28gc2V0IHZpZGVvRWxlbWVudFBhcmVudCB0byBzaXplIG9mIHBhcmVudCBlbGVtZW50XHJcbiAgICAgICAgY29uc3Qgc3R5bGVXaWR0aCA9ICcxMDAlJztcclxuICAgICAgICBjb25zdCBzdHlsZUhlaWdodCA9ICcxMDAlJztcclxuICAgICAgICBjb25zdCBzdHlsZVRvcCA9IDA7XHJcbiAgICAgICAgY29uc3Qgc3R5bGVMZWZ0ID0gMDtcclxuICAgICAgICB2aWRlb0VsZW1lbnRQYXJlbnQuc2V0QXR0cmlidXRlKCdzdHlsZScsICd0b3A6ICcgK1xyXG4gICAgICAgICAgICBzdHlsZVRvcCArXHJcbiAgICAgICAgICAgICdweDsgbGVmdDogJyArXHJcbiAgICAgICAgICAgIHN0eWxlTGVmdCArXHJcbiAgICAgICAgICAgICdweDsgd2lkdGg6ICcgK1xyXG4gICAgICAgICAgICBzdHlsZVdpZHRoICtcclxuICAgICAgICAgICAgJzsgaGVpZ2h0OiAnICtcclxuICAgICAgICAgICAgc3R5bGVIZWlnaHQgK1xyXG4gICAgICAgICAgICAnOyBjdXJzb3I6IGRlZmF1bHQ7Jyk7XHJcbiAgICB9XHJcbiAgICB1cGRhdGVWaWRlb1N0cmVhbVNpemUoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmNvbmZpZy5pc0ZsYWdFbmFibGVkKF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uRmxhZ3MuTWF0Y2hWaWV3cG9ydFJlc29sdXRpb24pKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XHJcbiAgICAgICAgaWYgKG5vdyAtIHRoaXMubGFzdFRpbWVSZXNpemVkID4gMzAwKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHZpZGVvRWxlbWVudFBhcmVudCA9IHRoaXMuZ2V0VmlkZW9QYXJlbnRFbGVtZW50KCk7XHJcbiAgICAgICAgICAgIGlmICghdmlkZW9FbGVtZW50UGFyZW50KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5vbk1hdGNoVmlld3BvcnRSZXNvbHV0aW9uQ2FsbGJhY2sodmlkZW9FbGVtZW50UGFyZW50LmNsaWVudFdpZHRoLCB2aWRlb0VsZW1lbnRQYXJlbnQuY2xpZW50SGVpZ2h0KTtcclxuICAgICAgICAgICAgdGhpcy5sYXN0VGltZVJlc2l6ZWQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksICdSZXNpemluZyB0b28gb2Z0ZW4gLSBza2lwcGluZycsIDYpO1xyXG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5yZXNpemVUaW1lb3V0SGFuZGxlKTtcclxuICAgICAgICAgICAgdGhpcy5yZXNpemVUaW1lb3V0SGFuZGxlID0gd2luZG93LnNldFRpbWVvdXQoKCkgPT4gdGhpcy51cGRhdGVWaWRlb1N0cmVhbVNpemUoKSwgMTAwKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL1dlYlJ0Y1BsYXllci9XZWJSdGNQbGF5ZXJDb250cm9sbGVyLnRzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL1dlYlJ0Y1BsYXllci9XZWJSdGNQbGF5ZXJDb250cm9sbGVyLnRzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywge1xuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIldlYlJ0Y1BsYXllckNvbnRyb2xsZXJcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gV2ViUnRjUGxheWVyQ29udHJvbGxlcilcbi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9XZWJTb2NrZXRzX1dlYlNvY2tldENvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzEwX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9XZWJTb2NrZXRzL1dlYlNvY2tldENvbnRyb2xsZXIgKi8gXCIuL3NyYy9XZWJTb2NrZXRzL1dlYlNvY2tldENvbnRyb2xsZXIudHNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX1ZpZGVvUGxheWVyX1N0cmVhbUNvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL1ZpZGVvUGxheWVyL1N0cmVhbUNvbnRyb2xsZXIgKi8gXCIuL3NyYy9WaWRlb1BsYXllci9TdHJlYW1Db250cm9sbGVyLnRzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9GcmVlemVGcmFtZV9GcmVlemVGcmFtZUNvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL0ZyZWV6ZUZyYW1lL0ZyZWV6ZUZyYW1lQ29udHJvbGxlciAqLyBcIi4vc3JjL0ZyZWV6ZUZyYW1lL0ZyZWV6ZUZyYW1lQ29udHJvbGxlci50c1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfQUZLX0FGS0NvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL0FGSy9BRktDb250cm9sbGVyICovIFwiLi9zcmMvQUZLL0FGS0NvbnRyb2xsZXIudHNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX0RhdGFDaGFubmVsX0RhdGFDaGFubmVsQ29udHJvbGxlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfN19fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vRGF0YUNoYW5uZWwvRGF0YUNoYW5uZWxDb250cm9sbGVyICovIFwiLi9zcmMvRGF0YUNoYW5uZWwvRGF0YUNoYW5uZWxDb250cm9sbGVyLnRzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9QZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXJfUGVlckNvbm5lY3Rpb25Db250cm9sbGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xOF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vUGVlckNvbm5lY3Rpb25Db250cm9sbGVyL1BlZXJDb25uZWN0aW9uQ29udHJvbGxlciAqLyBcIi4vc3JjL1BlZXJDb25uZWN0aW9uQ29udHJvbGxlci9QZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIudHNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX0NvbmZpZ19Db25maWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzExX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9Db25maWcvQ29uZmlnICovIFwiLi9zcmMvQ29uZmlnL0NvbmZpZy50c1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfRGF0YUNoYW5uZWxfSW5pdGlhbFNldHRpbmdzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vRGF0YUNoYW5uZWwvSW5pdGlhbFNldHRpbmdzICovIFwiLi9zcmMvRGF0YUNoYW5uZWwvSW5pdGlhbFNldHRpbmdzLnRzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9EYXRhQ2hhbm5lbF9MYXRlbmN5VGVzdFJlc3VsdHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE5X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9EYXRhQ2hhbm5lbC9MYXRlbmN5VGVzdFJlc3VsdHMgKi8gXCIuL3NyYy9EYXRhQ2hhbm5lbC9MYXRlbmN5VGVzdFJlc3VsdHMudHNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE2X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9Mb2dnZXIvTG9nZ2VyICovIFwiLi9zcmMvTG9nZ2VyL0xvZ2dlci50c1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfVXRpbF9GaWxlVXRpbF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vVXRpbC9GaWxlVXRpbCAqLyBcIi4vc3JjL1V0aWwvRmlsZVV0aWwudHNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX0lucHV0c19JbnB1dENsYXNzZXNGYWN0b3J5X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vSW5wdXRzL0lucHV0Q2xhc3Nlc0ZhY3RvcnkgKi8gXCIuL3NyYy9JbnB1dHMvSW5wdXRDbGFzc2VzRmFjdG9yeS50c1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfVmlkZW9QbGF5ZXJfVmlkZW9QbGF5ZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL1ZpZGVvUGxheWVyL1ZpZGVvUGxheWVyICovIFwiLi9zcmMvVmlkZW9QbGF5ZXIvVmlkZW9QbGF5ZXIudHNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX1VlSW5zdGFuY2VNZXNzYWdlX1N0cmVhbU1lc3NhZ2VDb250cm9sbGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV85X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9VZUluc3RhbmNlTWVzc2FnZS9TdHJlYW1NZXNzYWdlQ29udHJvbGxlciAqLyBcIi4vc3JjL1VlSW5zdGFuY2VNZXNzYWdlL1N0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnRzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9VZUluc3RhbmNlTWVzc2FnZV9SZXNwb25zZUNvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL1VlSW5zdGFuY2VNZXNzYWdlL1Jlc3BvbnNlQ29udHJvbGxlciAqLyBcIi4vc3JjL1VlSW5zdGFuY2VNZXNzYWdlL1Jlc3BvbnNlQ29udHJvbGxlci50c1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfVWVJbnN0YW5jZU1lc3NhZ2VfU2VuZERlc2NyaXB0b3JDb250cm9sbGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vVWVJbnN0YW5jZU1lc3NhZ2UvU2VuZERlc2NyaXB0b3JDb250cm9sbGVyICovIFwiLi9zcmMvVWVJbnN0YW5jZU1lc3NhZ2UvU2VuZERlc2NyaXB0b3JDb250cm9sbGVyLnRzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9VZUluc3RhbmNlTWVzc2FnZV9TZW5kTWVzc2FnZUNvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzEzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9VZUluc3RhbmNlTWVzc2FnZS9TZW5kTWVzc2FnZUNvbnRyb2xsZXIgKi8gXCIuL3NyYy9VZUluc3RhbmNlTWVzc2FnZS9TZW5kTWVzc2FnZUNvbnRyb2xsZXIudHNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX1VlSW5zdGFuY2VNZXNzYWdlX1RvU3RyZWFtZXJNZXNzYWdlc0NvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE0X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9VZUluc3RhbmNlTWVzc2FnZS9Ub1N0cmVhbWVyTWVzc2FnZXNDb250cm9sbGVyICovIFwiLi9zcmMvVWVJbnN0YW5jZU1lc3NhZ2UvVG9TdHJlYW1lck1lc3NhZ2VzQ29udHJvbGxlci50c1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfRGF0YUNoYW5uZWxfRGF0YUNoYW5uZWxTZW5kZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzhfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL0RhdGFDaGFubmVsL0RhdGFDaGFubmVsU2VuZGVyICovIFwiLi9zcmMvRGF0YUNoYW5uZWwvRGF0YUNoYW5uZWxTZW5kZXIudHNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX1V0aWxfQ29vcmRpbmF0ZUNvbnZlcnRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vVXRpbC9Db29yZGluYXRlQ29udmVydGVyICovIFwiLi9zcmMvVXRpbC9Db29yZGluYXRlQ29udmVydGVyLnRzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9VdGlsX0V2ZW50RW1pdHRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTdfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL1V0aWwvRXZlbnRFbWl0dGVyICovIFwiLi9zcmMvVXRpbC9FdmVudEVtaXR0ZXIudHNcIik7XG4vLyBDb3B5cmlnaHQgRXBpYyBHYW1lcywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4vKipcclxuICogRW50cnkgcG9pbnQgZm9yIHRoZSBXZWJSVEMgUGxheWVyXHJcbiAqL1xyXG5jbGFzcyBXZWJSdGNQbGF5ZXJDb250cm9sbGVyIHtcclxuICAgIC8qKlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBjb25maWcgLSB0aGUgZnJvbnRlbmQgY29uZmlnIG9iamVjdFxyXG4gICAgICogQHBhcmFtIHBpeGVsU3RyZWFtaW5nIC0gdGhlIFBpeGVsU3RyZWFtaW5nIG9iamVjdFxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3Rvcihjb25maWcsIHBpeGVsU3RyZWFtaW5nKSB7XHJcbiAgICAgICAgdGhpcy5zaG91bGRTaG93UGxheU92ZXJsYXkgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xyXG4gICAgICAgIHRoaXMucGl4ZWxTdHJlYW1pbmcgPSBwaXhlbFN0cmVhbWluZztcclxuICAgICAgICB0aGlzLnJlc3BvbnNlQ29udHJvbGxlciA9IG5ldyBfVWVJbnN0YW5jZU1lc3NhZ2VfUmVzcG9uc2VDb250cm9sbGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uUmVzcG9uc2VDb250cm9sbGVyKCk7XHJcbiAgICAgICAgdGhpcy5maWxlID0gbmV3IF9VdGlsX0ZpbGVVdGlsX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uRmlsZVRlbXBsYXRlKCk7XHJcbiAgICAgICAgdGhpcy5zZHBDb25zdHJhaW50cyA9IHtcclxuICAgICAgICAgICAgb2ZmZXJUb1JlY2VpdmVBdWRpbzogdHJ1ZSxcclxuICAgICAgICAgICAgb2ZmZXJUb1JlY2VpdmVWaWRlbzogdHJ1ZVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgLy8gc2V0IHVwIHRoZSBhZmsgbG9naWMgY2xhc3MgYW5kIGNvbm5lY3QgdXAgaXRzIG1ldGhvZCBmb3IgY2xvc2luZyB0aGUgc2lnbmFsaW5nIHNlcnZlclxyXG4gICAgICAgIHRoaXMuYWZrQ29udHJvbGxlciA9IG5ldyBfQUZLX0FGS0NvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5BRktDb250cm9sbGVyKHRoaXMuY29uZmlnLCB0aGlzLnBpeGVsU3RyZWFtaW5nLCB0aGlzLm9uQWZrVHJpZ2dlcmVkLmJpbmQodGhpcykpO1xyXG4gICAgICAgIHRoaXMuYWZrQ29udHJvbGxlci5vbkFGS1RpbWVkT3V0Q2FsbGJhY2sgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0RGlzY29ubmVjdE1lc3NhZ2VPdmVycmlkZSgnWW91IGhhdmUgYmVlbiBkaXNjb25uZWN0ZWQgZHVlIHRvIGluYWN0aXZpdHknKTtcclxuICAgICAgICAgICAgdGhpcy5jbG9zZVNpZ25hbGluZ1NlcnZlcigpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5mcmVlemVGcmFtZUNvbnRyb2xsZXIgPSBuZXcgX0ZyZWV6ZUZyYW1lX0ZyZWV6ZUZyYW1lQ29udHJvbGxlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fLkZyZWV6ZUZyYW1lQ29udHJvbGxlcih0aGlzLnBpeGVsU3RyZWFtaW5nLnZpZGVvRWxlbWVudFBhcmVudCk7XHJcbiAgICAgICAgdGhpcy52aWRlb1BsYXllciA9IG5ldyBfVmlkZW9QbGF5ZXJfVmlkZW9QbGF5ZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXy5WaWRlb1BsYXllcih0aGlzLnBpeGVsU3RyZWFtaW5nLnZpZGVvRWxlbWVudFBhcmVudCwgdGhpcy5jb25maWcpO1xyXG4gICAgICAgIHRoaXMudmlkZW9QbGF5ZXIub25WaWRlb0luaXRpYWxpemVkID0gKCkgPT4gdGhpcy5oYW5kbGVWaWRlb0luaXRpYWxpemVkKCk7XHJcbiAgICAgICAgLy8gV2hlbiBpbiBtYXRjaCB2aWV3cG9ydCByZXNvbHV0aW9uIG1vZGUsIHdoZW4gdGhlIGJyb3dzZXIgdmlld3BvcnQgaXMgcmVzaXplZCB3ZSBzZW5kIGEgcmVzaXplIGNvbW1hbmQgYmFjayB0byBVRS5cclxuICAgICAgICB0aGlzLnZpZGVvUGxheWVyLm9uTWF0Y2hWaWV3cG9ydFJlc29sdXRpb25DYWxsYmFjayA9ICh3aWR0aCwgaGVpZ2h0KSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRlc2NyaXB0b3IgPSB7XHJcbiAgICAgICAgICAgICAgICAnUmVzb2x1dGlvbi5XaWR0aCc6IHdpZHRoLFxyXG4gICAgICAgICAgICAgICAgJ1Jlc29sdXRpb24uSGVpZ2h0JzogaGVpZ2h0XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHRoaXMuc2VuZERlc2NyaXB0b3JDb250cm9sbGVyLmVtaXRDb21tYW5kKGRlc2NyaXB0b3IpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLy8gRXZlcnkgdGltZSB2aWRlbyBwbGF5ZXIgaXMgcmVzaXplZCBpbiBicm93c2VyIHdlIG5lZWQgdG8gcmVpbml0aWFsaXplIHRoZSBtb3VzZSBjb29yZGluYXRlIGNvbnZlcnNpb24gYW5kIGZyZWV6ZSBmcmFtZSBzaXppbmcgbG9naWMuXHJcbiAgICAgICAgdGhpcy52aWRlb1BsYXllci5vblJlc2l6ZVBsYXllckNhbGxiYWNrID0gKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnNldFVwTW91c2VBbmRGcmVlemVGcmFtZSgpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5zdHJlYW1Db250cm9sbGVyID0gbmV3IF9WaWRlb1BsYXllcl9TdHJlYW1Db250cm9sbGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X18uU3RyZWFtQ29udHJvbGxlcih0aGlzLnZpZGVvUGxheWVyKTtcclxuICAgICAgICB0aGlzLmNvb3JkaW5hdGVDb252ZXJ0ZXIgPSBuZXcgX1V0aWxfQ29vcmRpbmF0ZUNvbnZlcnRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNl9fLkNvb3JkaW5hdGVDb252ZXJ0ZXIodGhpcy52aWRlb1BsYXllcik7XHJcbiAgICAgICAgdGhpcy5zZW5kcmVjdkRhdGFDaGFubmVsQ29udHJvbGxlciA9IG5ldyBfRGF0YUNoYW5uZWxfRGF0YUNoYW5uZWxDb250cm9sbGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV83X18uRGF0YUNoYW5uZWxDb250cm9sbGVyKCk7XHJcbiAgICAgICAgdGhpcy5yZWN2RGF0YUNoYW5uZWxDb250cm9sbGVyID0gbmV3IF9EYXRhQ2hhbm5lbF9EYXRhQ2hhbm5lbENvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzdfXy5EYXRhQ2hhbm5lbENvbnRyb2xsZXIoKTtcclxuICAgICAgICB0aGlzLnJlZ2lzdGVyRGF0YUNoYW5uZWxFdmVudEVtaXR0ZXJzKHRoaXMuc2VuZHJlY3ZEYXRhQ2hhbm5lbENvbnRyb2xsZXIpO1xyXG4gICAgICAgIHRoaXMucmVnaXN0ZXJEYXRhQ2hhbm5lbEV2ZW50RW1pdHRlcnModGhpcy5yZWN2RGF0YUNoYW5uZWxDb250cm9sbGVyKTtcclxuICAgICAgICB0aGlzLmRhdGFDaGFubmVsU2VuZGVyID0gbmV3IF9EYXRhQ2hhbm5lbF9EYXRhQ2hhbm5lbFNlbmRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOF9fLkRhdGFDaGFubmVsU2VuZGVyKHRoaXMuc2VuZHJlY3ZEYXRhQ2hhbm5lbENvbnRyb2xsZXIpO1xyXG4gICAgICAgIHRoaXMuZGF0YUNoYW5uZWxTZW5kZXIucmVzZXRBZmtXYXJuaW5nVGltZXJPbkRhdGFTZW5kID0gKCkgPT4gdGhpcy5hZmtDb250cm9sbGVyLnJlc2V0QWZrV2FybmluZ1RpbWVyKCk7XHJcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlciA9IG5ldyBfVWVJbnN0YW5jZU1lc3NhZ2VfU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzlfXy5TdHJlYW1NZXNzYWdlQ29udHJvbGxlcigpO1xyXG4gICAgICAgIC8vIHNldCB1cCB3ZWJzb2NrZXQgbWV0aG9kc1xyXG4gICAgICAgIHRoaXMud2ViU29ja2V0Q29udHJvbGxlciA9IG5ldyBfV2ViU29ja2V0c19XZWJTb2NrZXRDb250cm9sbGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMF9fLldlYlNvY2tldENvbnRyb2xsZXIoKTtcclxuICAgICAgICB0aGlzLndlYlNvY2tldENvbnRyb2xsZXIub25Db25maWcgPSAobWVzc2FnZUNvbmZpZykgPT4gdGhpcy5oYW5kbGVPbkNvbmZpZ01lc3NhZ2UobWVzc2FnZUNvbmZpZyk7XHJcbiAgICAgICAgdGhpcy53ZWJTb2NrZXRDb250cm9sbGVyLm9uU3RyZWFtZXJMaXN0ID0gKG1lc3NhZ2VMaXN0KSA9PiB0aGlzLmhhbmRsZVN0cmVhbWVyTGlzdE1lc3NhZ2UobWVzc2FnZUxpc3QpO1xyXG4gICAgICAgIHRoaXMud2ViU29ja2V0Q29udHJvbGxlci5vbldlYlNvY2tldE9uY2xvc2VPdmVybGF5TWVzc2FnZSA9IChldmVudCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnBpeGVsU3RyZWFtaW5nLl9vbkRpc2Nvbm5lY3QoYFdlYnNvY2tldCBkaXNjb25uZWN0ICgke2V2ZW50LmNvZGV9KSAke2V2ZW50LnJlYXNvbiAhPSAnJyA/ICctICcgKyBldmVudC5yZWFzb24gOiAnJ31gKTtcclxuICAgICAgICAgICAgdGhpcy5zZXRWaWRlb0VuY29kZXJBdmdRUCgwKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMud2ViU29ja2V0Q29udHJvbGxlci5vbk9wZW4uYWRkRXZlbnRMaXN0ZW5lcignb3BlbicsICgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgQnJvd3NlclNlbmRzT2ZmZXIgPSB0aGlzLmNvbmZpZy5pc0ZsYWdFbmFibGVkKF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMV9fLkZsYWdzLkJyb3dzZXJTZW5kT2ZmZXIpO1xyXG4gICAgICAgICAgICBpZiAoIUJyb3dzZXJTZW5kc09mZmVyKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLndlYlNvY2tldENvbnRyb2xsZXIucmVxdWVzdFN0cmVhbWVyTGlzdCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy53ZWJTb2NrZXRDb250cm9sbGVyLm9uQ2xvc2UuYWRkRXZlbnRMaXN0ZW5lcignY2xvc2UnLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuYWZrQ29udHJvbGxlci5zdG9wQWZrV2FybmluZ1RpbWVyKCk7XHJcbiAgICAgICAgICAgIC8vIHN0b3Agc2VuZGluZyBzdGF0cyBvbiBpbnRlcnZhbCBpZiB3ZSBoYXZlIGNsb3NlZCBvdXIgY29ubmVjdGlvblxyXG4gICAgICAgICAgICBpZiAodGhpcy5zdGF0c1RpbWVySGFuZGxlICYmIHRoaXMuc3RhdHNUaW1lckhhbmRsZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICB3aW5kb3cuY2xlYXJJbnRlcnZhbCh0aGlzLnN0YXRzVGltZXJIYW5kbGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIHVucmVnaXN0ZXIgYWxsIGlucHV0IGRldmljZSBldmVudCBoYW5kbGVycyBvbiBkaXNjb25uZWN0XHJcbiAgICAgICAgICAgIHRoaXMuc2V0VG91Y2hJbnB1dEVuYWJsZWQoZmFsc2UpO1xyXG4gICAgICAgICAgICB0aGlzLnNldE1vdXNlSW5wdXRFbmFibGVkKGZhbHNlKTtcclxuICAgICAgICAgICAgdGhpcy5zZXRLZXlib2FyZElucHV0RW5hYmxlZChmYWxzZSk7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0R2FtZVBhZElucHV0RW5hYmxlZChmYWxzZSk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNob3VsZFJlY29ubmVjdCAmJiB0aGlzLmNvbmZpZy5nZXROdW1lcmljU2V0dGluZ1ZhbHVlKF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMV9fLk51bWVyaWNQYXJhbWV0ZXJzLk1heFJlY29ubmVjdEF0dGVtcHRzKSA+IDApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaXNSZWNvbm5lY3RpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZWNvbm5lY3RBdHRlbXB0Kys7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlc3RhcnRTdHJlYW1BdXRvbWF0aWNhbGx5KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyBzZXQgdXAgdGhlIGZpbmFsIHdlYlJ0YyBwbGF5ZXIgY29udHJvbGxlciBtZXRob2RzIGZyb20gd2l0aGluIG91ciBhcHBsaWNhdGlvbiBzbyBhIGNvbm5lY3Rpb24gY2FuIGJlIGFjdGl2YXRlZFxyXG4gICAgICAgIHRoaXMuc2VuZERlc2NyaXB0b3JDb250cm9sbGVyID0gbmV3IF9VZUluc3RhbmNlTWVzc2FnZV9TZW5kRGVzY3JpcHRvckNvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzEyX18uU2VuZERlc2NyaXB0b3JDb250cm9sbGVyKHRoaXMuZGF0YUNoYW5uZWxTZW5kZXIsIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIpO1xyXG4gICAgICAgIHRoaXMuc2VuZE1lc3NhZ2VDb250cm9sbGVyID0gbmV3IF9VZUluc3RhbmNlTWVzc2FnZV9TZW5kTWVzc2FnZUNvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzEzX18uU2VuZE1lc3NhZ2VDb250cm9sbGVyKHRoaXMuZGF0YUNoYW5uZWxTZW5kZXIsIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIpO1xyXG4gICAgICAgIHRoaXMudG9TdHJlYW1lck1lc3NhZ2VzQ29udHJvbGxlciA9IG5ldyBfVWVJbnN0YW5jZU1lc3NhZ2VfVG9TdHJlYW1lck1lc3NhZ2VzQ29udHJvbGxlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTRfXy5Ub1N0cmVhbWVyTWVzc2FnZXNDb250cm9sbGVyKHRoaXMuc2VuZE1lc3NhZ2VDb250cm9sbGVyKTtcclxuICAgICAgICB0aGlzLnJlZ2lzdGVyTWVzc2FnZUhhbmRsZXJzKCk7XHJcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5wb3B1bGF0ZURlZmF1bHRQcm90b2NvbCgpO1xyXG4gICAgICAgIHRoaXMuaW5wdXRDbGFzc2VzRmFjdG9yeSA9IG5ldyBfSW5wdXRzX0lucHV0Q2xhc3Nlc0ZhY3RvcnlfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE1X18uSW5wdXRDbGFzc2VzRmFjdG9yeSh0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLCB0aGlzLnZpZGVvUGxheWVyLCB0aGlzLmNvb3JkaW5hdGVDb252ZXJ0ZXIpO1xyXG4gICAgICAgIHRoaXMuaXNVc2luZ1NGVSA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuaXNRdWFsaXR5Q29udHJvbGxlciA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMucHJlZmVycmVkQ29kZWMgPSAnJztcclxuICAgICAgICB0aGlzLnNob3VsZFJlY29ubmVjdCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5pc1JlY29ubmVjdGluZyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMucmVjb25uZWN0QXR0ZW1wdCA9IDA7XHJcbiAgICAgICAgdGhpcy5jb25maWcuX2FkZE9uT3B0aW9uU2V0dGluZ0NoYW5nZWRMaXN0ZW5lcihfQ29uZmlnX0NvbmZpZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTFfXy5PcHRpb25QYXJhbWV0ZXJzLlN0cmVhbWVySWQsIChzdHJlYW1lcmlkKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChzdHJlYW1lcmlkID09PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gY2xvc2UgdGhlIGN1cnJlbnQgcGVlciBjb25uZWN0aW9uIGFuZCBjcmVhdGUgYSBuZXcgb25lXHJcbiAgICAgICAgICAgIHRoaXMucGVlckNvbm5lY3Rpb25Db250cm9sbGVyLnBlZXJDb25uZWN0aW9uLmNsb3NlKCk7XHJcbiAgICAgICAgICAgIHRoaXMucGVlckNvbm5lY3Rpb25Db250cm9sbGVyLmNyZWF0ZVBlZXJDb25uZWN0aW9uKHRoaXMucGVlckNvbmZpZywgdGhpcy5wcmVmZXJyZWRDb2RlYyk7XHJcbiAgICAgICAgICAgIHRoaXMuc3Vic2NyaWJlZFN0cmVhbSA9IHN0cmVhbWVyaWQ7XHJcbiAgICAgICAgICAgIHRoaXMud2ViU29ja2V0Q29udHJvbGxlci5zZW5kU3Vic2NyaWJlKHN0cmVhbWVyaWQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuc2V0VmlkZW9FbmNvZGVyQXZnUVAoLTEpO1xyXG4gICAgICAgIHRoaXMuc2lnbmFsbGluZ1VybEJ1aWxkZXIgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIGxldCBzaWduYWxsaW5nU2VydmVyVXJsID0gdGhpcy5jb25maWcuZ2V0VGV4dFNldHRpbmdWYWx1ZShfQ29uZmlnX0NvbmZpZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTFfXy5UZXh0UGFyYW1ldGVycy5TaWduYWxsaW5nU2VydmVyVXJsKTtcclxuICAgICAgICAgICAgLy8gSWYgd2UgYXJlIGNvbm5lY3RpbmcgdG8gdGhlIFNGVSBhZGQgYSBzcGVjaWFsIHVybCBwYXJhbWV0ZXIgdG8gdGhlIHVybFxyXG4gICAgICAgICAgICBpZiAodGhpcy5jb25maWcuaXNGbGFnRW5hYmxlZChfQ29uZmlnX0NvbmZpZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTFfXy5GbGFncy5Ccm93c2VyU2VuZE9mZmVyKSkge1xyXG4gICAgICAgICAgICAgICAgc2lnbmFsbGluZ1NlcnZlclVybCArPSAnPycgKyBfQ29uZmlnX0NvbmZpZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTFfXy5GbGFncy5Ccm93c2VyU2VuZE9mZmVyICsgJz10cnVlJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBUaGlzIGNvZGUgaXMgbm8gbG9uZ2VyIG5lZWRlZCwgYnV0IGlzIGEgZ29vZCBleGFtcGxlIGZvciBob3cgc3Vic2VxdWVudCBjb25maWcgZmxhZ3MgY2FuIGJlIGFwcGVuZGVkXHJcbiAgICAgICAgICAgIC8vIGlmICh0aGlzLmNvbmZpZy5pc0ZsYWdFbmFibGVkKEZsYWdzLkJyb3dzZXJTZW5kT2ZmZXIpKSB7XHJcbiAgICAgICAgICAgIC8vICAgICBzaWduYWxsaW5nU2VydmVyVXJsICs9IChzaWduYWxsaW5nU2VydmVyVXJsLmluY2x1ZGVzKCc/JykgPyAnJicgOiAnPycpICsgRmxhZ3MuQnJvd3NlclNlbmRPZmZlciArICc9dHJ1ZSc7XHJcbiAgICAgICAgICAgIC8vIH1cclxuICAgICAgICAgICAgcmV0dXJuIHNpZ25hbGxpbmdTZXJ2ZXJVcmw7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogTWFrZSBhIHJlcXVlc3QgdG8gVW5xdWFudGl6ZWRBbmREZW5vcm1hbGl6ZVVuc2lnbmVkIGNvb3JkaW5hdGVzXHJcbiAgICAgKiBAcGFyYW0geCB4IGF4aXMgY29vcmRpbmF0ZVxyXG4gICAgICogQHBhcmFtIHkgeSBheGlzIGNvb3JkaW5hdGVcclxuICAgICAqL1xyXG4gICAgcmVxdWVzdFVucXVhbnRpemVkQW5kRGVub3JtYWxpemVVbnNpZ25lZCh4LCB5KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29vcmRpbmF0ZUNvbnZlcnRlci51bnF1YW50aXplQW5kRGVub3JtYWxpemVVbnNpZ25lZCh4LCB5KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlcyB3aGVuIGEgbWVzc2FnZSBpcyByZWNlaXZlZFxyXG4gICAgICogQHBhcmFtIGV2ZW50IC0gTWVzc2FnZSBFdmVudFxyXG4gICAgICovXHJcbiAgICBoYW5kbGVPbk1lc3NhZ2UoZXZlbnQpIHtcclxuICAgICAgICBjb25zdCBtZXNzYWdlID0gbmV3IFVpbnQ4QXJyYXkoZXZlbnQuZGF0YSk7XHJcbiAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE2X18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTZfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnTWVzc2FnZSBpbmNvbWluZzonICsgbWVzc2FnZSwgNik7XHJcbiAgICAgICAgLy90cnkge1xyXG4gICAgICAgIGNvbnN0IG1lc3NhZ2VUeXBlID0gdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5mcm9tU3RyZWFtZXJNZXNzYWdlcy5nZXRGcm9tVmFsdWUobWVzc2FnZVswXSk7XHJcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5mcm9tU3RyZWFtZXJIYW5kbGVycy5nZXQobWVzc2FnZVR5cGUpKGV2ZW50LmRhdGEpO1xyXG4gICAgICAgIC8vfSBjYXRjaCAoZSkge1xyXG4gICAgICAgIC8vTG9nZ2VyLkVycm9yKExvZ2dlci5HZXRTdGFja1RyYWNlKCksIGBDdXN0b20gZGF0YSBjaGFubmVsIG1lc3NhZ2Ugd2l0aCBtZXNzYWdlIHR5cGUgdGhhdCBpcyB1bmtub3duIHRvIHRoZSBQaXhlbCBTdHJlYW1pbmcgcHJvdG9jb2wuIERvZXMgeW91ciBQaXhlbFN0cmVhbWluZ1Byb3RvY29sIG5lZWQgdXBkYXRpbmc/IFRoZSBtZXNzYWdlIHR5cGUgd2FzOiAke21lc3NhZ2VbMF19YCk7XHJcbiAgICAgICAgLy99XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJlZ2lzdGVyIG1lc3NhZ2UgYWxsIGhhbmRsZXJzXHJcbiAgICAgKi9cclxuICAgIHJlZ2lzdGVyTWVzc2FnZUhhbmRsZXJzKCkge1xyXG4gICAgICAgIC8vIEZyb20gU3RyZWFtZXJcclxuICAgICAgICAvLyBNZXNzYWdlIGV2ZW50cyBmcm9tIHRoZSBzdHJlYW1lciBoYXZlIGEgZGF0YSB0eXBlIG9mIEFycmF5QnVmZmVyIGFzIHdlIGZvcmNlIHRoaXMgdHlwZSBpbiB0aGUgRGF0YWNoYW5uZWxDb250cm9sbGVyXHJcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKF9VZUluc3RhbmNlTWVzc2FnZV9TdHJlYW1NZXNzYWdlQ29udHJvbGxlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOV9fLk1lc3NhZ2VEaXJlY3Rpb24uRnJvbVN0cmVhbWVyLCAnUXVhbGl0eUNvbnRyb2xPd25lcnNoaXAnLCAoZGF0YSkgPT4gdGhpcy5vblF1YWxpdHlDb250cm9sT3duZXJzaGlwKGRhdGEpKTtcclxuICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIoX1VlSW5zdGFuY2VNZXNzYWdlX1N0cmVhbU1lc3NhZ2VDb250cm9sbGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV85X18uTWVzc2FnZURpcmVjdGlvbi5Gcm9tU3RyZWFtZXIsICdSZXNwb25zZScsIChkYXRhKSA9PiB0aGlzLnJlc3BvbnNlQ29udHJvbGxlci5vblJlc3BvbnNlKGRhdGEpKTtcclxuICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIoX1VlSW5zdGFuY2VNZXNzYWdlX1N0cmVhbU1lc3NhZ2VDb250cm9sbGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV85X18uTWVzc2FnZURpcmVjdGlvbi5Gcm9tU3RyZWFtZXIsICdDb21tYW5kJywgKGRhdGEpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5vbkNvbW1hbmQoZGF0YSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKF9VZUluc3RhbmNlTWVzc2FnZV9TdHJlYW1NZXNzYWdlQ29udHJvbGxlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOV9fLk1lc3NhZ2VEaXJlY3Rpb24uRnJvbVN0cmVhbWVyLCAnRnJlZXplRnJhbWUnLCAoZGF0YSkgPT4gdGhpcy5vbkZyZWV6ZUZyYW1lTWVzc2FnZShkYXRhKSk7XHJcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKF9VZUluc3RhbmNlTWVzc2FnZV9TdHJlYW1NZXNzYWdlQ29udHJvbGxlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOV9fLk1lc3NhZ2VEaXJlY3Rpb24uRnJvbVN0cmVhbWVyLCAnVW5mcmVlemVGcmFtZScsICgpID0+IHRoaXMuaW52YWxpZGF0ZUZyZWV6ZUZyYW1lQW5kRW5hYmxlVmlkZW8oKSk7XHJcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKF9VZUluc3RhbmNlTWVzc2FnZV9TdHJlYW1NZXNzYWdlQ29udHJvbGxlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOV9fLk1lc3NhZ2VEaXJlY3Rpb24uRnJvbVN0cmVhbWVyLCAnVmlkZW9FbmNvZGVyQXZnUVAnLCAoZGF0YSkgPT4gdGhpcy5oYW5kbGVWaWRlb0VuY29kZXJBdmdRUChkYXRhKSk7XHJcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKF9VZUluc3RhbmNlTWVzc2FnZV9TdHJlYW1NZXNzYWdlQ29udHJvbGxlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOV9fLk1lc3NhZ2VEaXJlY3Rpb24uRnJvbVN0cmVhbWVyLCAnTGF0ZW5jeVRlc3QnLCAoZGF0YSkgPT4gdGhpcy5oYW5kbGVMYXRlbmN5VGVzdFJlc3VsdChkYXRhKSk7XHJcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKF9VZUluc3RhbmNlTWVzc2FnZV9TdHJlYW1NZXNzYWdlQ29udHJvbGxlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOV9fLk1lc3NhZ2VEaXJlY3Rpb24uRnJvbVN0cmVhbWVyLCAnSW5pdGlhbFNldHRpbmdzJywgKGRhdGEpID0+IHRoaXMuaGFuZGxlSW5pdGlhbFNldHRpbmdzKGRhdGEpKTtcclxuICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIoX1VlSW5zdGFuY2VNZXNzYWdlX1N0cmVhbU1lc3NhZ2VDb250cm9sbGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV85X18uTWVzc2FnZURpcmVjdGlvbi5Gcm9tU3RyZWFtZXIsICdGaWxlRXh0ZW5zaW9uJywgKGRhdGEpID0+IHRoaXMub25GaWxlRXh0ZW5zaW9uKGRhdGEpKTtcclxuICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIoX1VlSW5zdGFuY2VNZXNzYWdlX1N0cmVhbU1lc3NhZ2VDb250cm9sbGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV85X18uTWVzc2FnZURpcmVjdGlvbi5Gcm9tU3RyZWFtZXIsICdGaWxlTWltZVR5cGUnLCAoZGF0YSkgPT4gdGhpcy5vbkZpbGVNaW1lVHlwZShkYXRhKSk7XHJcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKF9VZUluc3RhbmNlTWVzc2FnZV9TdHJlYW1NZXNzYWdlQ29udHJvbGxlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOV9fLk1lc3NhZ2VEaXJlY3Rpb24uRnJvbVN0cmVhbWVyLCAnRmlsZUNvbnRlbnRzJywgKGRhdGEpID0+IHRoaXMub25GaWxlQ29udGVudHMoZGF0YSkpO1xyXG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIucmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihfVWVJbnN0YW5jZU1lc3NhZ2VfU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzlfXy5NZXNzYWdlRGlyZWN0aW9uLkZyb21TdHJlYW1lciwgJ1Rlc3RFY2hvJywgKCkgPT4ge1xyXG4gICAgICAgICAgICAvKiBEbyBub3RoaW5nICovXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKF9VZUluc3RhbmNlTWVzc2FnZV9TdHJlYW1NZXNzYWdlQ29udHJvbGxlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOV9fLk1lc3NhZ2VEaXJlY3Rpb24uRnJvbVN0cmVhbWVyLCAnSW5wdXRDb250cm9sT3duZXJzaGlwJywgKGRhdGEpID0+IHRoaXMub25JbnB1dENvbnRyb2xPd25lcnNoaXAoZGF0YSkpO1xyXG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIucmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihfVWVJbnN0YW5jZU1lc3NhZ2VfU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzlfXy5NZXNzYWdlRGlyZWN0aW9uLkZyb21TdHJlYW1lciwgJ0dhbWVwYWRSZXNwb25zZScsIChkYXRhKSA9PiB0aGlzLm9uR2FtZXBhZFJlc3BvbnNlKGRhdGEpKTtcclxuICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIoX1VlSW5zdGFuY2VNZXNzYWdlX1N0cmVhbU1lc3NhZ2VDb250cm9sbGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV85X18uTWVzc2FnZURpcmVjdGlvbi5Gcm9tU3RyZWFtZXIsICdQcm90b2NvbCcsIChkYXRhKSA9PiB0aGlzLm9uUHJvdG9jb2xNZXNzYWdlKGRhdGEpKTtcclxuICAgICAgICAvLyBUbyBTdHJlYW1lclxyXG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIucmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihfVWVJbnN0YW5jZU1lc3NhZ2VfU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzlfXy5NZXNzYWdlRGlyZWN0aW9uLlRvU3RyZWFtZXIsICdJRnJhbWVSZXF1ZXN0JywgKCkgPT4gdGhpcy5zZW5kTWVzc2FnZUNvbnRyb2xsZXIuc2VuZE1lc3NhZ2VUb1N0cmVhbWVyKCdJRnJhbWVSZXF1ZXN0JykpO1xyXG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIucmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihfVWVJbnN0YW5jZU1lc3NhZ2VfU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzlfXy5NZXNzYWdlRGlyZWN0aW9uLlRvU3RyZWFtZXIsICdSZXF1ZXN0UXVhbGl0eUNvbnRyb2wnLCAoKSA9PiB0aGlzLnNlbmRNZXNzYWdlQ29udHJvbGxlci5zZW5kTWVzc2FnZVRvU3RyZWFtZXIoJ1JlcXVlc3RRdWFsaXR5Q29udHJvbCcpKTtcclxuICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIoX1VlSW5zdGFuY2VNZXNzYWdlX1N0cmVhbU1lc3NhZ2VDb250cm9sbGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV85X18uTWVzc2FnZURpcmVjdGlvbi5Ub1N0cmVhbWVyLCAnRnBzUmVxdWVzdCcsICgpID0+IHRoaXMuc2VuZE1lc3NhZ2VDb250cm9sbGVyLnNlbmRNZXNzYWdlVG9TdHJlYW1lcignRnBzUmVxdWVzdCcpKTtcclxuICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIoX1VlSW5zdGFuY2VNZXNzYWdlX1N0cmVhbU1lc3NhZ2VDb250cm9sbGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV85X18uTWVzc2FnZURpcmVjdGlvbi5Ub1N0cmVhbWVyLCAnQXZlcmFnZUJpdHJhdGVSZXF1ZXN0JywgKCkgPT4gdGhpcy5zZW5kTWVzc2FnZUNvbnRyb2xsZXIuc2VuZE1lc3NhZ2VUb1N0cmVhbWVyKCdBdmVyYWdlQml0cmF0ZVJlcXVlc3QnKSk7XHJcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKF9VZUluc3RhbmNlTWVzc2FnZV9TdHJlYW1NZXNzYWdlQ29udHJvbGxlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOV9fLk1lc3NhZ2VEaXJlY3Rpb24uVG9TdHJlYW1lciwgJ1N0YXJ0U3RyZWFtaW5nJywgKCkgPT4gdGhpcy5zZW5kTWVzc2FnZUNvbnRyb2xsZXIuc2VuZE1lc3NhZ2VUb1N0cmVhbWVyKCdTdGFydFN0cmVhbWluZycpKTtcclxuICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIoX1VlSW5zdGFuY2VNZXNzYWdlX1N0cmVhbU1lc3NhZ2VDb250cm9sbGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV85X18uTWVzc2FnZURpcmVjdGlvbi5Ub1N0cmVhbWVyLCAnU3RvcFN0cmVhbWluZycsICgpID0+IHRoaXMuc2VuZE1lc3NhZ2VDb250cm9sbGVyLnNlbmRNZXNzYWdlVG9TdHJlYW1lcignU3RvcFN0cmVhbWluZycpKTtcclxuICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIoX1VlSW5zdGFuY2VNZXNzYWdlX1N0cmVhbU1lc3NhZ2VDb250cm9sbGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV85X18uTWVzc2FnZURpcmVjdGlvbi5Ub1N0cmVhbWVyLCAnTGF0ZW5jeVRlc3QnLCAoKSA9PiB0aGlzLnNlbmRNZXNzYWdlQ29udHJvbGxlci5zZW5kTWVzc2FnZVRvU3RyZWFtZXIoJ0xhdGVuY3lUZXN0JykpO1xyXG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIucmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihfVWVJbnN0YW5jZU1lc3NhZ2VfU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzlfXy5NZXNzYWdlRGlyZWN0aW9uLlRvU3RyZWFtZXIsICdSZXF1ZXN0SW5pdGlhbFNldHRpbmdzJywgKCkgPT4gdGhpcy5zZW5kTWVzc2FnZUNvbnRyb2xsZXIuc2VuZE1lc3NhZ2VUb1N0cmVhbWVyKCdSZXF1ZXN0SW5pdGlhbFNldHRpbmdzJykpO1xyXG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIucmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihfVWVJbnN0YW5jZU1lc3NhZ2VfU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzlfXy5NZXNzYWdlRGlyZWN0aW9uLlRvU3RyZWFtZXIsICdUZXN0RWNobycsICgpID0+IHtcclxuICAgICAgICAgICAgLyogRG8gbm90aGluZyAqL1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIucmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihfVWVJbnN0YW5jZU1lc3NhZ2VfU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzlfXy5NZXNzYWdlRGlyZWN0aW9uLlRvU3RyZWFtZXIsICdVSUludGVyYWN0aW9uJywgKGRhdGEpID0+IHRoaXMuc2VuZERlc2NyaXB0b3JDb250cm9sbGVyLmVtaXRVSUludGVyYWN0aW9uKGRhdGEpKTtcclxuICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIoX1VlSW5zdGFuY2VNZXNzYWdlX1N0cmVhbU1lc3NhZ2VDb250cm9sbGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV85X18uTWVzc2FnZURpcmVjdGlvbi5Ub1N0cmVhbWVyLCAnQ29tbWFuZCcsIChkYXRhKSA9PiB0aGlzLnNlbmREZXNjcmlwdG9yQ29udHJvbGxlci5lbWl0Q29tbWFuZChkYXRhKSk7XHJcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKF9VZUluc3RhbmNlTWVzc2FnZV9TdHJlYW1NZXNzYWdlQ29udHJvbGxlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOV9fLk1lc3NhZ2VEaXJlY3Rpb24uVG9TdHJlYW1lciwgJ0tleURvd24nLCAoZGF0YSkgPT4gdGhpcy5zZW5kTWVzc2FnZUNvbnRyb2xsZXIuc2VuZE1lc3NhZ2VUb1N0cmVhbWVyKCdLZXlEb3duJywgZGF0YSkpO1xyXG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIucmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihfVWVJbnN0YW5jZU1lc3NhZ2VfU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzlfXy5NZXNzYWdlRGlyZWN0aW9uLlRvU3RyZWFtZXIsICdLZXlVcCcsIChkYXRhKSA9PiB0aGlzLnNlbmRNZXNzYWdlQ29udHJvbGxlci5zZW5kTWVzc2FnZVRvU3RyZWFtZXIoJ0tleVVwJywgZGF0YSkpO1xyXG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIucmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihfVWVJbnN0YW5jZU1lc3NhZ2VfU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzlfXy5NZXNzYWdlRGlyZWN0aW9uLlRvU3RyZWFtZXIsICdLZXlQcmVzcycsIChkYXRhKSA9PiB0aGlzLnNlbmRNZXNzYWdlQ29udHJvbGxlci5zZW5kTWVzc2FnZVRvU3RyZWFtZXIoJ0tleVByZXNzJywgZGF0YSkpO1xyXG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIucmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihfVWVJbnN0YW5jZU1lc3NhZ2VfU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzlfXy5NZXNzYWdlRGlyZWN0aW9uLlRvU3RyZWFtZXIsICdNb3VzZUVudGVyJywgKGRhdGEpID0+IHRoaXMuc2VuZE1lc3NhZ2VDb250cm9sbGVyLnNlbmRNZXNzYWdlVG9TdHJlYW1lcignTW91c2VFbnRlcicsIGRhdGEpKTtcclxuICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIoX1VlSW5zdGFuY2VNZXNzYWdlX1N0cmVhbU1lc3NhZ2VDb250cm9sbGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV85X18uTWVzc2FnZURpcmVjdGlvbi5Ub1N0cmVhbWVyLCAnTW91c2VMZWF2ZScsIChkYXRhKSA9PiB0aGlzLnNlbmRNZXNzYWdlQ29udHJvbGxlci5zZW5kTWVzc2FnZVRvU3RyZWFtZXIoJ01vdXNlTGVhdmUnLCBkYXRhKSk7XHJcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKF9VZUluc3RhbmNlTWVzc2FnZV9TdHJlYW1NZXNzYWdlQ29udHJvbGxlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOV9fLk1lc3NhZ2VEaXJlY3Rpb24uVG9TdHJlYW1lciwgJ01vdXNlRG93bicsIChkYXRhKSA9PiB0aGlzLnNlbmRNZXNzYWdlQ29udHJvbGxlci5zZW5kTWVzc2FnZVRvU3RyZWFtZXIoJ01vdXNlRG93bicsIGRhdGEpKTtcclxuICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIoX1VlSW5zdGFuY2VNZXNzYWdlX1N0cmVhbU1lc3NhZ2VDb250cm9sbGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV85X18uTWVzc2FnZURpcmVjdGlvbi5Ub1N0cmVhbWVyLCAnTW91c2VVcCcsIChkYXRhKSA9PiB0aGlzLnNlbmRNZXNzYWdlQ29udHJvbGxlci5zZW5kTWVzc2FnZVRvU3RyZWFtZXIoJ01vdXNlVXAnLCBkYXRhKSk7XHJcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKF9VZUluc3RhbmNlTWVzc2FnZV9TdHJlYW1NZXNzYWdlQ29udHJvbGxlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOV9fLk1lc3NhZ2VEaXJlY3Rpb24uVG9TdHJlYW1lciwgJ01vdXNlTW92ZScsIChkYXRhKSA9PiB0aGlzLnNlbmRNZXNzYWdlQ29udHJvbGxlci5zZW5kTWVzc2FnZVRvU3RyZWFtZXIoJ01vdXNlTW92ZScsIGRhdGEpKTtcclxuICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIoX1VlSW5zdGFuY2VNZXNzYWdlX1N0cmVhbU1lc3NhZ2VDb250cm9sbGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV85X18uTWVzc2FnZURpcmVjdGlvbi5Ub1N0cmVhbWVyLCAnTW91c2VXaGVlbCcsIChkYXRhKSA9PiB0aGlzLnNlbmRNZXNzYWdlQ29udHJvbGxlci5zZW5kTWVzc2FnZVRvU3RyZWFtZXIoJ01vdXNlV2hlZWwnLCBkYXRhKSk7XHJcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKF9VZUluc3RhbmNlTWVzc2FnZV9TdHJlYW1NZXNzYWdlQ29udHJvbGxlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOV9fLk1lc3NhZ2VEaXJlY3Rpb24uVG9TdHJlYW1lciwgJ01vdXNlRG91YmxlJywgKGRhdGEpID0+IHRoaXMuc2VuZE1lc3NhZ2VDb250cm9sbGVyLnNlbmRNZXNzYWdlVG9TdHJlYW1lcignTW91c2VEb3VibGUnLCBkYXRhKSk7XHJcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKF9VZUluc3RhbmNlTWVzc2FnZV9TdHJlYW1NZXNzYWdlQ29udHJvbGxlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOV9fLk1lc3NhZ2VEaXJlY3Rpb24uVG9TdHJlYW1lciwgJ1RvdWNoU3RhcnQnLCAoZGF0YSkgPT4gdGhpcy5zZW5kTWVzc2FnZUNvbnRyb2xsZXIuc2VuZE1lc3NhZ2VUb1N0cmVhbWVyKCdUb3VjaFN0YXJ0JywgZGF0YSkpO1xyXG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIucmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihfVWVJbnN0YW5jZU1lc3NhZ2VfU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzlfXy5NZXNzYWdlRGlyZWN0aW9uLlRvU3RyZWFtZXIsICdUb3VjaEVuZCcsIChkYXRhKSA9PiB0aGlzLnNlbmRNZXNzYWdlQ29udHJvbGxlci5zZW5kTWVzc2FnZVRvU3RyZWFtZXIoJ1RvdWNoRW5kJywgZGF0YSkpO1xyXG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIucmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihfVWVJbnN0YW5jZU1lc3NhZ2VfU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzlfXy5NZXNzYWdlRGlyZWN0aW9uLlRvU3RyZWFtZXIsICdUb3VjaE1vdmUnLCAoZGF0YSkgPT4gdGhpcy5zZW5kTWVzc2FnZUNvbnRyb2xsZXIuc2VuZE1lc3NhZ2VUb1N0cmVhbWVyKCdUb3VjaE1vdmUnLCBkYXRhKSk7XHJcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKF9VZUluc3RhbmNlTWVzc2FnZV9TdHJlYW1NZXNzYWdlQ29udHJvbGxlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOV9fLk1lc3NhZ2VEaXJlY3Rpb24uVG9TdHJlYW1lciwgJ0dhbWVwYWRDb25uZWN0ZWQnLCAoKSA9PiB0aGlzLnNlbmRNZXNzYWdlQ29udHJvbGxlci5zZW5kTWVzc2FnZVRvU3RyZWFtZXIoJ0dhbWVwYWRDb25uZWN0ZWQnKSk7XHJcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKF9VZUluc3RhbmNlTWVzc2FnZV9TdHJlYW1NZXNzYWdlQ29udHJvbGxlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOV9fLk1lc3NhZ2VEaXJlY3Rpb24uVG9TdHJlYW1lciwgJ0dhbWVwYWRCdXR0b25QcmVzc2VkJywgKGRhdGEpID0+IHRoaXMuc2VuZE1lc3NhZ2VDb250cm9sbGVyLnNlbmRNZXNzYWdlVG9TdHJlYW1lcignR2FtZXBhZEJ1dHRvblByZXNzZWQnLCBkYXRhKSk7XHJcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKF9VZUluc3RhbmNlTWVzc2FnZV9TdHJlYW1NZXNzYWdlQ29udHJvbGxlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOV9fLk1lc3NhZ2VEaXJlY3Rpb24uVG9TdHJlYW1lciwgJ0dhbWVwYWRCdXR0b25SZWxlYXNlZCcsIChkYXRhKSA9PiB0aGlzLnNlbmRNZXNzYWdlQ29udHJvbGxlci5zZW5kTWVzc2FnZVRvU3RyZWFtZXIoJ0dhbWVwYWRCdXR0b25SZWxlYXNlZCcsIGRhdGEpKTtcclxuICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIoX1VlSW5zdGFuY2VNZXNzYWdlX1N0cmVhbU1lc3NhZ2VDb250cm9sbGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV85X18uTWVzc2FnZURpcmVjdGlvbi5Ub1N0cmVhbWVyLCAnR2FtZXBhZEFuYWxvZycsIChkYXRhKSA9PiB0aGlzLnNlbmRNZXNzYWdlQ29udHJvbGxlci5zZW5kTWVzc2FnZVRvU3RyZWFtZXIoJ0dhbWVwYWRBbmFsb2cnLCBkYXRhKSk7XHJcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKF9VZUluc3RhbmNlTWVzc2FnZV9TdHJlYW1NZXNzYWdlQ29udHJvbGxlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOV9fLk1lc3NhZ2VEaXJlY3Rpb24uVG9TdHJlYW1lciwgJ0dhbWVwYWREaXNjb25uZWN0ZWQnLCAoZGF0YSkgPT4gdGhpcy5zZW5kTWVzc2FnZUNvbnRyb2xsZXIuc2VuZE1lc3NhZ2VUb1N0cmVhbWVyKCdHYW1lcGFkRGlzY29ubmVjdGVkJywgZGF0YSkpO1xyXG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIucmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihfVWVJbnN0YW5jZU1lc3NhZ2VfU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzlfXy5NZXNzYWdlRGlyZWN0aW9uLlRvU3RyZWFtZXIsICdYUkhNRFRyYW5zZm9ybScsIChkYXRhKSA9PiB0aGlzLnNlbmRNZXNzYWdlQ29udHJvbGxlci5zZW5kTWVzc2FnZVRvU3RyZWFtZXIoJ1hSSE1EVHJhbnNmb3JtJywgZGF0YSkpO1xyXG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIucmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihfVWVJbnN0YW5jZU1lc3NhZ2VfU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzlfXy5NZXNzYWdlRGlyZWN0aW9uLlRvU3RyZWFtZXIsICdYUkNvbnRyb2xsZXJUcmFuc2Zvcm0nLCAoZGF0YSkgPT4gdGhpcy5zZW5kTWVzc2FnZUNvbnRyb2xsZXIuc2VuZE1lc3NhZ2VUb1N0cmVhbWVyKCdYUkNvbnRyb2xsZXJUcmFuc2Zvcm0nLCBkYXRhKSk7XHJcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKF9VZUluc3RhbmNlTWVzc2FnZV9TdHJlYW1NZXNzYWdlQ29udHJvbGxlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOV9fLk1lc3NhZ2VEaXJlY3Rpb24uVG9TdHJlYW1lciwgJ1hSU3lzdGVtJywgKGRhdGEpID0+IHRoaXMuc2VuZE1lc3NhZ2VDb250cm9sbGVyLnNlbmRNZXNzYWdlVG9TdHJlYW1lcignWFJTeXN0ZW0nLCBkYXRhKSk7XHJcbiAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci5yZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKF9VZUluc3RhbmNlTWVzc2FnZV9TdHJlYW1NZXNzYWdlQ29udHJvbGxlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOV9fLk1lc3NhZ2VEaXJlY3Rpb24uVG9TdHJlYW1lciwgJ1hSQnV0dG9uVG91Y2hlZCcsIChkYXRhKSA9PiB0aGlzLnNlbmRNZXNzYWdlQ29udHJvbGxlci5zZW5kTWVzc2FnZVRvU3RyZWFtZXIoJ1hSQnV0dG9uVG91Y2hlZCcsIGRhdGEpKTtcclxuICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIoX1VlSW5zdGFuY2VNZXNzYWdlX1N0cmVhbU1lc3NhZ2VDb250cm9sbGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV85X18uTWVzc2FnZURpcmVjdGlvbi5Ub1N0cmVhbWVyLCAnWFJCdXR0b25QcmVzc2VkJywgKGRhdGEpID0+IHRoaXMuc2VuZE1lc3NhZ2VDb250cm9sbGVyLnNlbmRNZXNzYWdlVG9TdHJlYW1lcignWFJCdXR0b25QcmVzc2VkJywgZGF0YSkpO1xyXG4gICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIucmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihfVWVJbnN0YW5jZU1lc3NhZ2VfU3RyZWFtTWVzc2FnZUNvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzlfXy5NZXNzYWdlRGlyZWN0aW9uLlRvU3RyZWFtZXIsICdYUkJ1dHRvblJlbGVhc2VkJywgKGRhdGEpID0+IHRoaXMuc2VuZE1lc3NhZ2VDb250cm9sbGVyLnNlbmRNZXNzYWdlVG9TdHJlYW1lcignWFJCdXR0b25SZWxlYXNlZCcsIGRhdGEpKTtcclxuICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIoX1VlSW5zdGFuY2VNZXNzYWdlX1N0cmVhbU1lc3NhZ2VDb250cm9sbGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV85X18uTWVzc2FnZURpcmVjdGlvbi5Ub1N0cmVhbWVyLCAnWFJBbmFsb2cnLCAoZGF0YSkgPT4gdGhpcy5zZW5kTWVzc2FnZUNvbnRyb2xsZXIuc2VuZE1lc3NhZ2VUb1N0cmVhbWVyKCdYUkFuYWxvZycsIGRhdGEpKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQWN0aXZhdGUgdGhlIGxvZ2ljIGFzc29jaWF0ZWQgd2l0aCBhIGNvbW1hbmQgZnJvbSBVRVxyXG4gICAgICogQHBhcmFtIG1lc3NhZ2VcclxuICAgICAqL1xyXG4gICAgb25Db21tYW5kKG1lc3NhZ2UpIHtcclxuICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTZfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNl9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksICdEYXRhQ2hhbm5lbFJlY2VpdmVNZXNzYWdlVHlwZS5Db21tYW5kJywgNik7XHJcbiAgICAgICAgY29uc3QgY29tbWFuZEFzU3RyaW5nID0gbmV3IFRleHREZWNvZGVyKCd1dGYtMTYnKS5kZWNvZGUobWVzc2FnZS5zbGljZSgxKSk7XHJcbiAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE2X18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTZfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnRGF0YSBDaGFubmVsIENvbW1hbmQ6ICcgKyBjb21tYW5kQXNTdHJpbmcsIDYpO1xyXG4gICAgICAgIGNvbnN0IGNvbW1hbmQgPSBKU09OLnBhcnNlKGNvbW1hbmRBc1N0cmluZyk7XHJcbiAgICAgICAgaWYgKGNvbW1hbmQuY29tbWFuZCA9PT0gJ29uU2NyZWVuS2V5Ym9hcmQnKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGl4ZWxTdHJlYW1pbmcuX2FjdGl2YXRlT25TY3JlZW5LZXlib2FyZChjb21tYW5kKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEhhbmRsZXMgYSBwcm90b2NvbCBtZXNzYWdlIHJlY2VpdmVkIGZyb20gdGhlIHN0cmVhbWVyXHJcbiAgICAgKiBAcGFyYW0gbWVzc2FnZSB0aGUgbWVzc2FnZSBkYXRhIGZyb20gdGhlIHN0cmVhbWVyXHJcbiAgICAgKi9cclxuICAgIG9uUHJvdG9jb2xNZXNzYWdlKG1lc3NhZ2UpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCBwcm90b2NvbFN0cmluZyA9IG5ldyBUZXh0RGVjb2RlcigndXRmLTE2JykuZGVjb2RlKG1lc3NhZ2Uuc2xpY2UoMSkpO1xyXG4gICAgICAgICAgICBjb25zdCBwcm90b2NvbEpTT04gPSBKU09OLnBhcnNlKHByb3RvY29sU3RyaW5nKTtcclxuICAgICAgICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocHJvdG9jb2xKU09OLCAnRGlyZWN0aW9uJykpIHtcclxuICAgICAgICAgICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNl9fLkxvZ2dlci5FcnJvcihfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTZfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnTWFsZm9ybWVkIHByb3RvY29sIHJlY2VpdmVkLiBFbnN1cmUgdGhlIHByb3RvY29sIG1lc3NhZ2UgY29udGFpbnMgYSBkaXJlY3Rpb24nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBkaXJlY3Rpb24gPSBwcm90b2NvbEpTT04uRGlyZWN0aW9uO1xyXG4gICAgICAgICAgICBkZWxldGUgcHJvdG9jb2xKU09OLkRpcmVjdGlvbjtcclxuICAgICAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE2X18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTZfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBgUmVjZWl2ZWQgbmV3ICR7ZGlyZWN0aW9uID09IF9VZUluc3RhbmNlTWVzc2FnZV9TdHJlYW1NZXNzYWdlQ29udHJvbGxlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOV9fLk1lc3NhZ2VEaXJlY3Rpb24uRnJvbVN0cmVhbWVyXHJcbiAgICAgICAgICAgICAgICA/ICdGcm9tU3RyZWFtZXInXHJcbiAgICAgICAgICAgICAgICA6ICdUb1N0cmVhbWVyJ30gcHJvdG9jb2wuIFVwZGF0aW5nIGV4aXN0aW5nIHByb3RvY29sLi4uYCk7XHJcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHByb3RvY29sSlNPTikuZm9yRWFjaCgobWVzc2FnZVR5cGUpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBwcm90b2NvbEpTT05bbWVzc2FnZVR5cGVdO1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChkaXJlY3Rpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIF9VZUluc3RhbmNlTWVzc2FnZV9TdHJlYW1NZXNzYWdlQ29udHJvbGxlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOV9fLk1lc3NhZ2VEaXJlY3Rpb24uVG9TdHJlYW1lcjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgdGhhdCB0aGUgbWVzc2FnZSBjb250YWlucyBhbGwgdGhlIHJlbGV2YW50IHBhcmFtc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtZXNzYWdlLCAnaWQnKSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtZXNzYWdlLCAnYnl0ZUxlbmd0aCcpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTZfXy5Mb2dnZXIuRXJyb3IoX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE2X18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgYFRvU3RyZWFtZXItPiR7bWVzc2FnZVR5cGV9IHByb3RvY29sIGRlZmluaXRpb24gd2FzIG1hbGZvcm1lZCBhcyBpdCBkaWRuJ3QgY29udGFpbiBhdCBsZWFzdCBhbiBpZCBhbmQgYSBieXRlTGVuZ3RoXFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVmaW5pdGlvbiB3YXM6ICR7SlNPTi5zdHJpbmdpZnkobWVzc2FnZSwgbnVsbCwgMil9YCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZXR1cm4gaW4gYSBmb3JFYWNoIGlzIGVxdWl2YWxlbnQgdG8gYSBjb250aW51ZSBpbiBhIG5vcm1hbCBmb3IgbG9vcFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlLmJ5dGVMZW5ndGggPiAwICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1lc3NhZ2UsICdzdHJ1Y3R1cmUnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgd2Ugc3BlY2lmeSBhIGJ5dGVsZW5ndGgsIHdpbGwgbXVzdCBoYXZlIGEgY29ycmVzcG9uZGluZyBzdHJ1Y3R1cmVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNl9fLkxvZ2dlci5FcnJvcihfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTZfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBgVG9TdHJlYW1lci0+JHttZXNzYWdlVHlwZX0gcHJvdG9jb2wgZGVmaW5pdGlvbiB3YXMgbWFsZm9ybWVkIGFzIGl0IHNwZWNpZmllZCBhIGJ5dGVMZW5ndGggYnV0IG5vIGFjY29tcGFueWluZyBzdHJ1Y3R1cmVgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJldHVybiBpbiBhIGZvckVhY2ggaXMgZXF1aXZhbGVudCB0byBhIGNvbnRpbnVlIGluIGEgbm9ybWFsIGZvciBsb29wXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIudG9TdHJlYW1lckhhbmRsZXJzLmdldChtZXNzYWdlVHlwZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHdlJ3ZlIHJlZ2lzdGVyZWQgYSBoYW5kbGVyIGZvciB0aGlzIG1lc3NhZ2UgdHlwZSB3ZSBjYW4gYWRkIGl0IHRvIG91ciBzdXBwb3J0ZWQgbWVzc2FnZXMuIGllIHJlZ2lzdGVyTWVzc2FnZUhhbmRsZXIoLi4uKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci50b1N0cmVhbWVyTWVzc2FnZXMuYWRkKG1lc3NhZ2VUeXBlLCBtZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNl9fLkxvZ2dlci5FcnJvcihfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTZfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBgVGhlcmUgd2FzIG5vIHJlZ2lzdGVyZWQgaGFuZGxlciBmb3IgXCIke21lc3NhZ2VUeXBlfVwiIC0gdHJ5IGFkZGluZyBvbmUgdXNpbmcgcmVnaXN0ZXJNZXNzYWdlSGFuZGxlcihNZXNzYWdlRGlyZWN0aW9uLlRvU3RyZWFtZXIsIFwiJHttZXNzYWdlVHlwZX1cIiwgbXlIYW5kbGVyKWApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgX1VlSW5zdGFuY2VNZXNzYWdlX1N0cmVhbU1lc3NhZ2VDb250cm9sbGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV85X18uTWVzc2FnZURpcmVjdGlvbi5Gcm9tU3RyZWFtZXI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIHRoYXQgdGhlIG1lc3NhZ2UgY29udGFpbnMgYWxsIHRoZSByZWxldmFudCBwYXJhbXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobWVzc2FnZSwgJ2lkJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNl9fLkxvZ2dlci5FcnJvcihfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTZfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBgRnJvbVN0cmVhbWVyLT4ke21lc3NhZ2VUeXBlfSBwcm90b2NvbCBkZWZpbml0aW9uIHdhcyBtYWxmb3JtZWQgYXMgaXQgZGlkbid0IGNvbnRhaW4gYXQgbGVhc3QgYW4gaWRcXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWZpbml0aW9uIHdhczogJHtKU09OLnN0cmluZ2lmeShtZXNzYWdlLCBudWxsLCAyKX1gKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJldHVybiBpbiBhIGZvckVhY2ggaXMgZXF1aXZhbGVudCB0byBhIGNvbnRpbnVlIGluIGEgbm9ybWFsIGZvciBsb29wXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIuZnJvbVN0cmVhbWVySGFuZGxlcnMuZ2V0KG1lc3NhZ2VUeXBlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgd2UndmUgcmVnaXN0ZXJlZCBhIGhhbmRsZXIgZm9yIHRoaXMgbWVzc2FnZSB0eXBlLiBpZSByZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKC4uLilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIuZnJvbVN0cmVhbWVyTWVzc2FnZXMuYWRkKG1lc3NhZ2VUeXBlLCBtZXNzYWdlLmlkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNl9fLkxvZ2dlci5FcnJvcihfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTZfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBgVGhlcmUgd2FzIG5vIHJlZ2lzdGVyZWQgaGFuZGxlciBmb3IgXCIke21lc3NhZ2V9XCIgLSB0cnkgYWRkaW5nIG9uZSB1c2luZyByZWdpc3Rlck1lc3NhZ2VIYW5kbGVyKE1lc3NhZ2VEaXJlY3Rpb24uRnJvbVN0cmVhbWVyLCBcIiR7bWVzc2FnZVR5cGV9XCIsIG15SGFuZGxlcilgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTZfXy5Mb2dnZXIuRXJyb3IoX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE2X18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgYFVua25vd24gZGlyZWN0aW9uOiAke2RpcmVjdGlvbn1gKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIC8vIE9uY2UgdGhlIHByb3RvY29sIGhhcyBiZWVuIHJlY2VpdmVkLCB3ZSBjYW4gc2VuZCBvdXIgY29udHJvbCBtZXNzYWdlc1xyXG4gICAgICAgICAgICB0aGlzLnRvU3RyZWFtZXJNZXNzYWdlc0NvbnRyb2xsZXIuU2VuZFJlcXVlc3RJbml0aWFsU2V0dGluZ3MoKTtcclxuICAgICAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXNDb250cm9sbGVyLlNlbmRSZXF1ZXN0UXVhbGl0eUNvbnRyb2woKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE2X18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTZfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEhhbmRsZXMgYW4gaW5wdXQgY29udHJvbCBtZXNzYWdlIHdoZW4gaXQgaXMgcmVjZWl2ZWQgZnJvbSB0aGUgc3RyZWFtZXJcclxuICAgICAqIEBwYXJhbSBtZXNzYWdlIFRoZSBpbnB1dCBjb250cm9sIG1lc3NhZ2VcclxuICAgICAqL1xyXG4gICAgb25JbnB1dENvbnRyb2xPd25lcnNoaXAobWVzc2FnZSkge1xyXG4gICAgICAgIGNvbnN0IHZpZXcgPSBuZXcgVWludDhBcnJheShtZXNzYWdlKTtcclxuICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTZfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNl9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksICdEYXRhQ2hhbm5lbFJlY2VpdmVNZXNzYWdlVHlwZS5JbnB1dENvbnRyb2xPd25lcnNoaXAnLCA2KTtcclxuICAgICAgICBjb25zdCBpbnB1dENvbnRyb2xPd25lcnNoaXAgPSBuZXcgQm9vbGVhbih2aWV3WzFdKS52YWx1ZU9mKCk7XHJcbiAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE2X18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTZfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBgUmVjZWl2ZWQgaW5wdXQgY29udHJvbGxlciBtZXNzYWdlIC0gd2lsbCB5b3VyIGlucHV0IGNvbnRyb2wgdGhlIHN0cmVhbTogJHtpbnB1dENvbnRyb2xPd25lcnNoaXB9YCk7XHJcbiAgICAgICAgdGhpcy5waXhlbFN0cmVhbWluZy5fb25JbnB1dENvbnRyb2xPd25lcnNoaXAoaW5wdXRDb250cm9sT3duZXJzaGlwKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBtZXNzYWdlXHJcbiAgICAgKi9cclxuICAgIG9uR2FtZXBhZFJlc3BvbnNlKG1lc3NhZ2UpIHtcclxuICAgICAgICBjb25zdCByZXNwb25zZVN0cmluZyA9IG5ldyBUZXh0RGVjb2RlcigndXRmLTE2JykuZGVjb2RlKG1lc3NhZ2Uuc2xpY2UoMSkpO1xyXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlSlNPTiA9IEpTT04ucGFyc2UocmVzcG9uc2VTdHJpbmcpO1xyXG4gICAgICAgIHRoaXMuZ2FtZVBhZENvbnRyb2xsZXIub25HYW1lcGFkUmVzcG9uc2VSZWNlaXZlZChyZXNwb25zZUpTT04uY29udHJvbGxlcklkKTtcclxuICAgIH1cclxuICAgIG9uQWZrVHJpZ2dlcmVkKCkge1xyXG4gICAgICAgIHRoaXMuYWZrQ29udHJvbGxlci5vbkFma0NsaWNrKCk7XHJcbiAgICAgICAgLy8gaWYgdGhlIHN0cmVhbSBpcyBwYXVzZWQgcGxheSBpdCwgaWYgd2UgY2FuXHJcbiAgICAgICAgaWYgKHRoaXMudmlkZW9QbGF5ZXIuaXNQYXVzZWQoKSAmJiB0aGlzLnZpZGVvUGxheWVyLmhhc1ZpZGVvU291cmNlKCkpIHtcclxuICAgICAgICAgICAgdGhpcy5wbGF5U3RyZWFtKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgd2hldGhlciB3ZSBzaG91bGQgdGltZW91dCB3aGVuIGFmay5cclxuICAgICAqIEBwYXJhbSBhZmtFbmFibGVkIElmIHRydWUgd2UgdGltZW91dCB3aGVuIGlkbGUgZm9yIHNvbWUgZ2l2ZW4gYW1vdW50IG9mIHRpbWUuXHJcbiAgICAgKi9cclxuICAgIHNldEFma0VuYWJsZWQoYWZrRW5hYmxlZCkge1xyXG4gICAgICAgIGlmIChhZmtFbmFibGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMub25BZmtUcmlnZ2VyZWQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWZrQ29udHJvbGxlci5zdG9wQWZrV2FybmluZ1RpbWVyKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXN0YXJ0IHRoZSBzdHJlYW0gYXV0b21hdGljYWxseSB3aXRob3V0IHJlZnJlc2hpbmcgdGhlIHBhZ2VcclxuICAgICAqL1xyXG4gICAgcmVzdGFydFN0cmVhbUF1dG9tYXRpY2FsbHkoKSB7XHJcbiAgICAgICAgLy8gaWYgdGhlcmUgaXMgbm8gd2ViU29ja2V0Q29udHJvbGxlciByZXR1cm4gaW1tZWRpYXRlbHkgb3IgdGhpcyB3aWxsIG5vdCB3b3JrXHJcbiAgICAgICAgaWYgKCF0aGlzLndlYlNvY2tldENvbnRyb2xsZXIpIHtcclxuICAgICAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE2X18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTZfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnVGhlIFdlYiBTb2NrZXQgQ29udHJvbGxlciBkb2VzIG5vdCBleGlzdCBzbyB0aGlzIHdpbGwgbm90IHdvcmsgcmlnaHQgbm93LicpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGlmIGEgd2Vic29ja2V0IG9iamVjdCBoYXMgbm90IGJlZW4gY3JlYXRlZCBjb25uZWN0IG5vcm1hbGx5IHdpdGhvdXQgY2xvc2luZ1xyXG4gICAgICAgIGlmICghdGhpcy53ZWJTb2NrZXRDb250cm9sbGVyLndlYlNvY2tldCB8fFxyXG4gICAgICAgICAgICB0aGlzLndlYlNvY2tldENvbnRyb2xsZXIud2ViU29ja2V0LnJlYWR5U3RhdGUgPT09IFdlYlNvY2tldC5DTE9TRUQpIHtcclxuICAgICAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE2X18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTZfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnQSB3ZWJzb2NrZXQgY29ubmVjdGlvbiBoYXMgbm90IGJlZW4gbWFkZSB5ZXQgc28gd2Ugd2lsbCBzdGFydCB0aGUgc3RyZWFtJyk7XHJcbiAgICAgICAgICAgIHRoaXMucGl4ZWxTdHJlYW1pbmcuX29uV2ViUnRjQXV0b0Nvbm5lY3QoKTtcclxuICAgICAgICAgICAgdGhpcy5jb25uZWN0VG9TaWduYWxsaW5nU2VydmVyKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBzZXQgdGhlIHJlcGxheSBzdGF0dXMgc28gd2UgZ2V0IGEgdGV4dCBvdmVybGF5IG92ZXIgYW4gYWN0aW9uIG92ZXJsYXlcclxuICAgICAgICAgICAgdGhpcy5waXhlbFN0cmVhbWluZy5fc2hvd0FjdGlvbk9yRXJyb3JPbkRpc2Nvbm5lY3QgPSBmYWxzZTtcclxuICAgICAgICAgICAgLy8gc2V0IHRoZSBkaXNjb25uZWN0IG1lc3NhZ2VcclxuICAgICAgICAgICAgdGhpcy5zZXREaXNjb25uZWN0TWVzc2FnZU92ZXJyaWRlKCdSZXN0YXJ0aW5nIHN0cmVhbS4uLicpO1xyXG4gICAgICAgICAgICAvLyBjbG9zZSB0aGUgY29ubmVjdGlvblxyXG4gICAgICAgICAgICB0aGlzLmNsb3NlU2lnbmFsaW5nU2VydmVyKCk7XHJcbiAgICAgICAgICAgIC8vIHdhaXQgZm9yIHRoZSBjb25uZWN0aW9uIHRvIGNsb3NlIGFuZCByZXN0YXJ0IHRoZSBjb25uZWN0aW9uXHJcbiAgICAgICAgICAgIGNvbnN0IGF1dG9Db25uZWN0VGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5waXhlbFN0cmVhbWluZy5fb25XZWJSdGNBdXRvQ29ubmVjdCgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb25uZWN0VG9TaWduYWxsaW5nU2VydmVyKCk7XHJcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoYXV0b0Nvbm5lY3RUaW1lb3V0KTtcclxuICAgICAgICAgICAgfSwgMzAwMCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBMb2FkcyBhIGZyZWV6ZSBmcmFtZSBpZiBpdCBpcyByZXF1aXJlZCBvdGhlcndpc2Ugc2hvd3MgdGhlIHBsYXkgb3ZlcmxheVxyXG4gICAgICovXHJcbiAgICBsb2FkRnJlZXplRnJhbWVPclNob3dQbGF5T3ZlcmxheSgpIHtcclxuICAgICAgICB0aGlzLnBpeGVsU3RyZWFtaW5nLmRpc3BhdGNoRXZlbnQobmV3IF9VdGlsX0V2ZW50RW1pdHRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTdfXy5Mb2FkRnJlZXplRnJhbWVFdmVudCh7XHJcbiAgICAgICAgICAgIHNob3VsZFNob3dQbGF5T3ZlcmxheTogdGhpcy5zaG91bGRTaG93UGxheU92ZXJsYXksXHJcbiAgICAgICAgICAgIGlzVmFsaWQ6IHRoaXMuZnJlZXplRnJhbWVDb250cm9sbGVyLnZhbGlkLFxyXG4gICAgICAgICAgICBqcGVnRGF0YTogdGhpcy5mcmVlemVGcmFtZUNvbnRyb2xsZXIuanBlZ1xyXG4gICAgICAgIH0pKTtcclxuICAgICAgICBpZiAodGhpcy5zaG91bGRTaG93UGxheU92ZXJsYXkgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE2X18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTZfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnc2hvd2luZyBwbGF5IG92ZXJsYXknKTtcclxuICAgICAgICAgICAgdGhpcy5yZXNpemVQbGF5ZXJTdHlsZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE2X18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTZfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnc2hvd2luZyBmcmVlemUgZnJhbWUnKTtcclxuICAgICAgICAgICAgdGhpcy5mcmVlemVGcmFtZUNvbnRyb2xsZXIuc2hvd0ZyZWV6ZUZyYW1lKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnZpZGVvUGxheWVyLnNldFZpZGVvRW5hYmxlZChmYWxzZSk7XHJcbiAgICAgICAgfSwgdGhpcy5mcmVlemVGcmFtZUNvbnRyb2xsZXIuZnJlZXplRnJhbWVEZWxheSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFByb2Nlc3MgdGhlIGZyZWV6ZSBmcmFtZSBhbmQgbG9hZCBpdFxyXG4gICAgICogQHBhcmFtIG1lc3NhZ2UgVGhlIGZyZWV6ZSBmcmFtZSBkYXRhIGluIGJ5dGVzXHJcbiAgICAgKi9cclxuICAgIG9uRnJlZXplRnJhbWVNZXNzYWdlKG1lc3NhZ2UpIHtcclxuICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTZfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNl9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksICdEYXRhQ2hhbm5lbFJlY2VpdmVNZXNzYWdlVHlwZS5GcmVlemVGcmFtZScsIDYpO1xyXG4gICAgICAgIGNvbnN0IHZpZXcgPSBuZXcgVWludDhBcnJheShtZXNzYWdlKTtcclxuICAgICAgICB0aGlzLmZyZWV6ZUZyYW1lQ29udHJvbGxlci5wcm9jZXNzRnJlZXplRnJhbWVNZXNzYWdlKHZpZXcsICgpID0+IHRoaXMubG9hZEZyZWV6ZUZyYW1lT3JTaG93UGxheU92ZXJsYXkoKSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEVuYWJsZSB0aGUgdmlkZW8gYWZ0ZXIgaGlkaW5nIGEgZnJlZXplIGZyYW1lXHJcbiAgICAgKi9cclxuICAgIGludmFsaWRhdGVGcmVlemVGcmFtZUFuZEVuYWJsZVZpZGVvKCkge1xyXG4gICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNl9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE2X18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ0RhdGFDaGFubmVsUmVjZWl2ZU1lc3NhZ2VUeXBlLkZyZWV6ZUZyYW1lJywgNik7XHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMucGl4ZWxTdHJlYW1pbmcuZGlzcGF0Y2hFdmVudChuZXcgX1V0aWxfRXZlbnRFbWl0dGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xN19fLkhpZGVGcmVlemVGcmFtZUV2ZW50KCkpO1xyXG4gICAgICAgICAgICB0aGlzLmZyZWV6ZUZyYW1lQ29udHJvbGxlci5oaWRlRnJlZXplRnJhbWUoKTtcclxuICAgICAgICB9LCB0aGlzLmZyZWV6ZUZyYW1lQ29udHJvbGxlci5mcmVlemVGcmFtZURlbGF5KTtcclxuICAgICAgICBpZiAodGhpcy52aWRlb1BsYXllci5nZXRWaWRlb0VsZW1lbnQoKSkge1xyXG4gICAgICAgICAgICB0aGlzLnZpZGVvUGxheWVyLnNldFZpZGVvRW5hYmxlZCh0cnVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFByZXAgZGF0YWNoYW5uZWwgZGF0YSBmb3IgcHJvY2Vzc2luZyBmaWxlIGV4dGVuc2lvblxyXG4gICAgICogQHBhcmFtIGRhdGEgdGhlIGZpbGUgZXh0ZW5zaW9uIGRhdGFcclxuICAgICAqL1xyXG4gICAgb25GaWxlRXh0ZW5zaW9uKGRhdGEpIHtcclxuICAgICAgICBjb25zdCB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkoZGF0YSk7XHJcbiAgICAgICAgX1V0aWxfRmlsZVV0aWxfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5GaWxlVXRpbC5zZXRFeHRlbnNpb25Gcm9tQnl0ZXModmlldywgdGhpcy5maWxlKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUHJlcCBkYXRhY2hhbm5lbCBkYXRhIGZvciBwcm9jZXNzaW5nIHRoZSBmaWxlIG1pbWUgdHlwZVxyXG4gICAgICogQHBhcmFtIGRhdGEgdGhlIGZpbGUgbWltZSB0eXBlIGRhdGFcclxuICAgICAqL1xyXG4gICAgb25GaWxlTWltZVR5cGUoZGF0YSkge1xyXG4gICAgICAgIGNvbnN0IHZpZXcgPSBuZXcgVWludDhBcnJheShkYXRhKTtcclxuICAgICAgICBfVXRpbF9GaWxlVXRpbF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLkZpbGVVdGlsLnNldE1pbWVUeXBlRnJvbUJ5dGVzKHZpZXcsIHRoaXMuZmlsZSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFByZXAgZGF0YWNoYW5uZWwgZGF0YSBmb3IgcHJvY2Vzc2luZyB0aGUgZmlsZSBjb250ZW50c1xyXG4gICAgICogQHBhcmFtIGRhdGEgdGhlIGZpbGUgY29udGVudHMgZGF0YVxyXG4gICAgICovXHJcbiAgICBvbkZpbGVDb250ZW50cyhkYXRhKSB7XHJcbiAgICAgICAgY29uc3QgdmlldyA9IG5ldyBVaW50OEFycmF5KGRhdGEpO1xyXG4gICAgICAgIF9VdGlsX0ZpbGVVdGlsX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uRmlsZVV0aWwuc2V0Q29udGVudHNGcm9tQnl0ZXModmlldywgdGhpcy5maWxlKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUGxheXMgdGhlIHN0cmVhbSBhdWRpbyBhbmQgdmlkZW8gc291cmNlIGFuZCBzZXRzIHVwIG90aGVyIHBpZWNlcyB3aGlsZSB0aGUgc3RyZWFtIHN0YXJ0c1xyXG4gICAgICovXHJcbiAgICBwbGF5U3RyZWFtKCkge1xyXG4gICAgICAgIGlmICghdGhpcy52aWRlb1BsYXllci5nZXRWaWRlb0VsZW1lbnQoKSkge1xyXG4gICAgICAgICAgICBjb25zdCBtZXNzYWdlID0gJ0NvdWxkIG5vdCBwbGF5IHZpZGVvIHN0cmVhbSBiZWNhdXNlIHRoZSB2aWRlbyBwbGF5ZXIgd2FzIG5vdCBpbml0aWFsaXplZCBjb3JyZWN0bHkuJztcclxuICAgICAgICAgICAgdGhpcy5waXhlbFN0cmVhbWluZy5kaXNwYXRjaEV2ZW50KG5ldyBfVXRpbF9FdmVudEVtaXR0ZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE3X18uUGxheVN0cmVhbUVycm9yRXZlbnQoeyBtZXNzYWdlIH0pKTtcclxuICAgICAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE2X18uTG9nZ2VyLkVycm9yKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNl9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksIG1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAvLyBzZXQgdGhlIGRpc2Nvbm5lY3QgbWVzc2FnZVxyXG4gICAgICAgICAgICB0aGlzLnNldERpc2Nvbm5lY3RNZXNzYWdlT3ZlcnJpZGUoJ1N0cmVhbSBub3QgaW5pdGlhbGl6ZWQgY29ycmVjdGx5Jyk7XHJcbiAgICAgICAgICAgIC8vIGNsb3NlIHRoZSBjb25uZWN0aW9uXHJcbiAgICAgICAgICAgIHRoaXMuY2xvc2VTaWduYWxpbmdTZXJ2ZXIoKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXRoaXMudmlkZW9QbGF5ZXIuaGFzVmlkZW9Tb3VyY2UoKSkge1xyXG4gICAgICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTZfXy5Mb2dnZXIuV2FybmluZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTZfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnQ2Fubm90IHBsYXkgc3RyZWFtLCB0aGUgdmlkZW8gZWxlbWVudCBoYXMgbm8gc3JjT2JqZWN0IHRvIHBsYXkuJyk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5zZXRUb3VjaElucHV0RW5hYmxlZCh0aGlzLmNvbmZpZy5pc0ZsYWdFbmFibGVkKF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMV9fLkZsYWdzLlRvdWNoSW5wdXQpKTtcclxuICAgICAgICB0aGlzLnBpeGVsU3RyZWFtaW5nLmRpc3BhdGNoRXZlbnQobmV3IF9VdGlsX0V2ZW50RW1pdHRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTdfXy5QbGF5U3RyZWFtRXZlbnQoKSk7XHJcbiAgICAgICAgaWYgKHRoaXMuc3RyZWFtQ29udHJvbGxlci5hdWRpb0VsZW1lbnQuc3JjT2JqZWN0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RyZWFtQ29udHJvbGxlci5hdWRpb0VsZW1lbnQubXV0ZWQgPVxyXG4gICAgICAgICAgICAgICAgdGhpcy5jb25maWcuaXNGbGFnRW5hYmxlZChfQ29uZmlnX0NvbmZpZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTFfXy5GbGFncy5TdGFydFZpZGVvTXV0ZWQpO1xyXG4gICAgICAgICAgICB0aGlzLnN0cmVhbUNvbnRyb2xsZXIuYXVkaW9FbGVtZW50XHJcbiAgICAgICAgICAgICAgICAucGxheSgpXHJcbiAgICAgICAgICAgICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBsYXlWaWRlbygpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLmNhdGNoKChvblJlamVjdGVkUmVhc29uKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTZfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNl9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksIG9uUmVqZWN0ZWRSZWFzb24pO1xyXG4gICAgICAgICAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE2X18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTZfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnQnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IGF1dG9wbGF5aW5nIHZpZGVvIHdpdGhvdXQgaW50ZXJhY3Rpb24gLSB0byByZXNvbHZlIHRoaXMgd2UgYXJlIGdvaW5nIHRvIHNob3cgdGhlIHBsYXkgYnV0dG9uIG92ZXJsYXkuJyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBpeGVsU3RyZWFtaW5nLmRpc3BhdGNoRXZlbnQobmV3IF9VdGlsX0V2ZW50RW1pdHRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTdfXy5QbGF5U3RyZWFtUmVqZWN0ZWRFdmVudCh7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVhc29uOiBvblJlamVjdGVkUmVhc29uXHJcbiAgICAgICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5wbGF5VmlkZW8oKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5zaG91bGRTaG93UGxheU92ZXJsYXkgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmZyZWV6ZUZyYW1lQ29udHJvbGxlci5zaG93RnJlZXplRnJhbWUoKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUGxheXMgdGhlIHZpZGVvIHN0cmVhbVxyXG4gICAgICovXHJcbiAgICBwbGF5VmlkZW8oKSB7XHJcbiAgICAgICAgLy8gaGFuZGxlIHBsYXkoKSB3aXRoIHByb21pc2UgYXMgaXQgaXMgYW4gYXN5bmNocm9ub3VzIGNhbGxcclxuICAgICAgICB0aGlzLnZpZGVvUGxheWVyLnBsYXkoKS5jYXRjaCgob25SZWplY3RlZFJlYXNvbikgPT4ge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zdHJlYW1Db250cm9sbGVyLmF1ZGlvRWxlbWVudC5zcmNPYmplY3QpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RyZWFtQ29udHJvbGxlci5hdWRpb0VsZW1lbnQucGF1c2UoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTZfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNl9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksIG9uUmVqZWN0ZWRSZWFzb24pO1xyXG4gICAgICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTZfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNl9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksICdCcm93c2VyIGRvZXMgbm90IHN1cHBvcnQgYXV0b3BsYXlpbmcgdmlkZW8gd2l0aG91dCBpbnRlcmFjdGlvbiAtIHRvIHJlc29sdmUgdGhpcyB3ZSBhcmUgZ29pbmcgdG8gc2hvdyB0aGUgcGxheSBidXR0b24gb3ZlcmxheS4nKTtcclxuICAgICAgICAgICAgdGhpcy5waXhlbFN0cmVhbWluZy5kaXNwYXRjaEV2ZW50KG5ldyBfVXRpbF9FdmVudEVtaXR0ZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE3X18uUGxheVN0cmVhbVJlamVjdGVkRXZlbnQoeyByZWFzb246IG9uUmVqZWN0ZWRSZWFzb24gfSkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBFbmFibGUgdGhlIHZpZGVvIHRvIHBsYXkgYXV0b21hdGljYWxseSBpZiBlbmFibGVBdXRvcGxheSBpcyB0cnVlXHJcbiAgICAgKi9cclxuICAgIGF1dG9QbGF5VmlkZW9PclNldFVwUGxheU92ZXJsYXkoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY29uZmlnLmlzRmxhZ0VuYWJsZWQoX0NvbmZpZ19Db25maWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzExX18uRmxhZ3MuQXV0b1BsYXlWaWRlbykpIHtcclxuICAgICAgICAgICAgLy8gYXR0ZW1wdCB0byBwbGF5IHRoZSB2aWRlb1xyXG4gICAgICAgICAgICB0aGlzLnBsYXlTdHJlYW0oKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5yZXNpemVQbGF5ZXJTdHlsZSgpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDb25uZWN0IHRvIHRoZSBTaWduYWxpbmcgc2VydmVyXHJcbiAgICAgKi9cclxuICAgIGNvbm5lY3RUb1NpZ25hbGxpbmdTZXJ2ZXIoKSB7XHJcbiAgICAgICAgY29uc3Qgc2lnbmFsbGluZ1VybCA9IHRoaXMuc2lnbmFsbGluZ1VybEJ1aWxkZXIoKTtcclxuICAgICAgICB0aGlzLndlYlNvY2tldENvbnRyb2xsZXIuY29ubmVjdChzaWduYWxsaW5nVXJsKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVGhpcyB3aWxsIHN0YXJ0IHRoZSBoYW5kc2hha2UgdG8gdGhlIHNpZ25hbGxpbmcgc2VydmVyXHJcbiAgICAgKiBAcGFyYW0gcGVlckNvbmZpZyAgLSBSVEMgQ29uZmlndXJhdGlvbiBPcHRpb25zIGZyb20gdGhlIFNpZ25hbGluZyBzZXJ2ZXJcclxuICAgICAqIEByZW1hcmsgUlRDIFBlZXIgQ29ubmVjdGlvbiBvbiBJY2UgQ2FuZGlkYXRlIGV2ZW50IGhhdmUgaXQgaGFuZGxlZCBieSBoYW5kbGUgU2VuZCBJY2UgQ2FuZGlkYXRlXHJcbiAgICAgKi9cclxuICAgIHN0YXJ0U2Vzc2lvbihwZWVyQ29uZmlnKSB7XHJcbiAgICAgICAgdGhpcy5wZWVyQ29uZmlnID0gcGVlckNvbmZpZztcclxuICAgICAgICAvLyBjaGVjayBmb3IgZm9yY2luZyB0dXJuXHJcbiAgICAgICAgaWYgKHRoaXMuY29uZmlnLmlzRmxhZ0VuYWJsZWQoX0NvbmZpZ19Db25maWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzExX18uRmxhZ3MuRm9yY2VUVVJOKSkge1xyXG4gICAgICAgICAgICAvLyBjaGVjayBmb3IgYSB0dXJuIHNlcnZlclxyXG4gICAgICAgICAgICBjb25zdCBoYXNUdXJuU2VydmVyID0gdGhpcy5jaGVja1R1cm5TZXJ2ZXJBdmFpbGFiaWxpdHkocGVlckNvbmZpZyk7XHJcbiAgICAgICAgICAgIC8vIGNsb3NlIGFuZCBlcnJvciBpZiB0dXJuIGlzIGZvcmNlZCBhbmQgdGhlcmUgaXMgbm8gdHVybiBzZXJ2ZXJcclxuICAgICAgICAgICAgaWYgKCFoYXNUdXJuU2VydmVyKSB7XHJcbiAgICAgICAgICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTZfXy5Mb2dnZXIuSW5mbyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTZfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnTm8gdHVybiBzZXJ2ZXIgd2FzIGZvdW5kIGluIHRoZSBQZWVyIENvbm5lY3Rpb24gT3B0aW9ucy4gVFVSTiBjYW5ub3QgYmUgZm9yY2VkLCBjbG9zaW5nIGNvbm5lY3Rpb24uIFBsZWFzZSB1c2UgU1RVTiBpbnN0ZWFkJyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldERpc2Nvbm5lY3RNZXNzYWdlT3ZlcnJpZGUoJ1RVUk4gY2Fubm90IGJlIGZvcmNlZCwgY2xvc2luZyBjb25uZWN0aW9uLiBQbGVhc2UgdXNlIFNUVU4gaW5zdGVhZC4nKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2xvc2VTaWduYWxpbmdTZXJ2ZXIoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBzZXQgdXAgdGhlIHBlZXIgY29ubmVjdGlvbiBjb250cm9sbGVyXHJcbiAgICAgICAgdGhpcy5wZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIgPSBuZXcgX1BlZXJDb25uZWN0aW9uQ29udHJvbGxlcl9QZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE4X18uUGVlckNvbm5lY3Rpb25Db250cm9sbGVyKHRoaXMucGVlckNvbmZpZywgdGhpcy5jb25maWcsIHRoaXMucHJlZmVycmVkQ29kZWMpO1xyXG4gICAgICAgIC8vIHNldCB1cCBwZWVyIGNvbm5lY3Rpb24gY29udHJvbGxlciB2aWRlbyBzdGF0c1xyXG4gICAgICAgIHRoaXMucGVlckNvbm5lY3Rpb25Db250cm9sbGVyLm9uVmlkZW9TdGF0cyA9IChldmVudCkgPT4gdGhpcy5oYW5kbGVWaWRlb1N0YXRzKGV2ZW50KTtcclxuICAgICAgICAvKiBXaGVuIHRoZSBQZWVyIENvbm5lY3Rpb24gd2FudHMgdG8gc2VuZCBhbiBvZmZlciBoYXZlIGl0IGhhbmRsZWQgKi9cclxuICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uQ29udHJvbGxlci5vblNlbmRXZWJSVENPZmZlciA9IChvZmZlcikgPT4gdGhpcy5oYW5kbGVTZW5kV2ViUlRDT2ZmZXIob2ZmZXIpO1xyXG4gICAgICAgIC8qIFdoZW4gdGhlIFBlZXIgQ29ubmVjdGlvbiB3YW50cyB0byBzZW5kIGFuIGFuc3dlciBoYXZlIGl0IGhhbmRsZWQgKi9cclxuICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uQ29udHJvbGxlci5vblNlbmRXZWJSVENBbnN3ZXIgPSAob2ZmZXIpID0+IHRoaXMuaGFuZGxlU2VuZFdlYlJUQ0Fuc3dlcihvZmZlcik7XHJcbiAgICAgICAgLyogV2hlbiB0aGUgUGVlciBDb25uZWN0aW9uIGljZSBjYW5kaWRhdGUgaXMgYWRkZWQgaGF2ZSBpdCBoYW5kbGVkICovXHJcbiAgICAgICAgdGhpcy5wZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIub25QZWVySWNlQ2FuZGlkYXRlID0gKHBlZXJDb25uZWN0aW9uSWNlRXZlbnQpID0+IHRoaXMuaGFuZGxlU2VuZEljZUNhbmRpZGF0ZShwZWVyQ29ubmVjdGlvbkljZUV2ZW50KTtcclxuICAgICAgICAvKiBXaGVuIHRoZSBQZWVyIENvbm5lY3Rpb24gaGFzIGEgZGF0YSBjaGFubmVsIGNyZWF0ZWQgZm9yIGl0IGJ5IHRoZSBicm93c2VyLCBoYW5kbGUgaXQgKi9cclxuICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uQ29udHJvbGxlci5vbkRhdGFDaGFubmVsID0gKGRhdGFjaGFubmVsRXZlbnQpID0+IHRoaXMuaGFuZGxlRGF0YUNoYW5uZWwoZGF0YWNoYW5uZWxFdmVudCk7XHJcbiAgICAgICAgLy8gc2V0IHVwIHdlYlJ0YyB0ZXh0IG92ZXJsYXlzXHJcbiAgICAgICAgdGhpcy5wZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIuc2hvd1RleHRPdmVybGF5Q29ubmVjdGluZyA9ICgpID0+IHRoaXMucGl4ZWxTdHJlYW1pbmcuX29uV2ViUnRjQ29ubmVjdGluZygpO1xyXG4gICAgICAgIHRoaXMucGVlckNvbm5lY3Rpb25Db250cm9sbGVyLnNob3dUZXh0T3ZlcmxheVNldHVwRmFpbHVyZSA9ICgpID0+IHRoaXMucGl4ZWxTdHJlYW1pbmcuX29uV2ViUnRjRmFpbGVkKCk7XHJcbiAgICAgICAgbGV0IHdlYlJ0Y0Nvbm5lY3RlZFNlbnQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uQ29udHJvbGxlci5vbkljZUNvbm5lY3Rpb25TdGF0ZUNoYW5nZSA9ICgpID0+IHtcclxuICAgICAgICAgICAgLy8gQnJvd3NlcnMgZW1pdCBcImNvbm5lY3RlZFwiIHdoZW4gZ2V0dGluZyBmaXJzdCBjb25uZWN0aW9uIGFuZCBcImNvbXBsZXRlZFwiIHdoZW4gZmluaXNoaW5nXHJcbiAgICAgICAgICAgIC8vIGNhbmRpZGF0ZSBjaGVja2luZy4gSG93ZXZlciwgc29tZXRpbWVzIGJyb3dzZXJzIGNhbiBza2lwIFwiY29ubmVjdGVkXCIgYW5kIG9ubHkgZW1pdCBcImNvbXBsZXRlZFwiLlxyXG4gICAgICAgICAgICAvLyBUaGVyZWZvcmUgbmVlZCB0byBjaGVjayBib3RoIGNhc2VzIGFuZCBlbWl0IG9uV2ViUnRjQ29ubmVjdGVkIG9ubHkgb25jZSBvbiB0aGUgZmlyc3QgaGl0LlxyXG4gICAgICAgICAgICBpZiAoIXdlYlJ0Y0Nvbm5lY3RlZFNlbnQgJiZcclxuICAgICAgICAgICAgICAgIFtcImNvbm5lY3RlZFwiLCBcImNvbXBsZXRlZFwiXS5pbmNsdWRlcyh0aGlzLnBlZXJDb25uZWN0aW9uQ29udHJvbGxlci5wZWVyQ29ubmVjdGlvbi5pY2VDb25uZWN0aW9uU3RhdGUpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBpeGVsU3RyZWFtaW5nLl9vbldlYlJ0Y0Nvbm5lY3RlZCgpO1xyXG4gICAgICAgICAgICAgICAgd2ViUnRjQ29ubmVjdGVkU2VudCA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qIFJUQyBQZWVyIENvbm5lY3Rpb24gb24gVHJhY2sgZXZlbnQgLT4gaGFuZGxlIG9uIHRyYWNrICovXHJcbiAgICAgICAgdGhpcy5wZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIub25UcmFjayA9ICh0cmFja0V2ZW50KSA9PiB0aGlzLnN0cmVhbUNvbnRyb2xsZXIuaGFuZGxlT25UcmFjayh0cmFja0V2ZW50KTtcclxuICAgICAgICAvKiBTdGFydCB0aGUgSGFuZCBzaGFrZSBwcm9jZXNzIGJ5IGNyZWF0aW5nIGFuIE9mZmVyICovXHJcbiAgICAgICAgY29uc3QgQnJvd3NlclNlbmRzT2ZmZXIgPSB0aGlzLmNvbmZpZy5pc0ZsYWdFbmFibGVkKF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMV9fLkZsYWdzLkJyb3dzZXJTZW5kT2ZmZXIpO1xyXG4gICAgICAgIGlmIChCcm93c2VyU2VuZHNPZmZlcikge1xyXG4gICAgICAgICAgICAvLyBJZiBicm93c2VyIGlzIHNlbmRpbmcgdGhlIG9mZmVyLCBjcmVhdGUgYW4gb2ZmZXIgYW5kIHNlbmQgaXQgdG8gdGhlIHN0cmVhbWVyXHJcbiAgICAgICAgICAgIHRoaXMuc2VuZHJlY3ZEYXRhQ2hhbm5lbENvbnRyb2xsZXIuY3JlYXRlRGF0YUNoYW5uZWwodGhpcy5wZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIucGVlckNvbm5lY3Rpb24sICdjaXJydXMnLCB0aGlzLmRhdGFjaGFubmVsT3B0aW9ucyk7XHJcbiAgICAgICAgICAgIHRoaXMuc2VuZHJlY3ZEYXRhQ2hhbm5lbENvbnRyb2xsZXIuaGFuZGxlT25NZXNzYWdlID0gKGV2KSA9PiB0aGlzLmhhbmRsZU9uTWVzc2FnZShldik7XHJcbiAgICAgICAgICAgIHRoaXMucGVlckNvbm5lY3Rpb25Db250cm9sbGVyLmNyZWF0ZU9mZmVyKHRoaXMuc2RwQ29uc3RyYWludHMsIHRoaXMuY29uZmlnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENoZWNrcyB0aGUgcGVlciBjb25uZWN0aW9uIG9wdGlvbnMgZm9yIGEgdHVybiBzZXJ2ZXIgYW5kIHJldHVybnMgdHJ1ZSBvciBmYWxzZVxyXG4gICAgICovXHJcbiAgICBjaGVja1R1cm5TZXJ2ZXJBdmFpbGFiaWxpdHkob3B0aW9ucykge1xyXG4gICAgICAgIC8vIGlmIGljZVNlcnZlcnMgaXMgZW1wdHkgcmV0dXJuIGZhbHNlIHRoaXMgc2hvdWxkIG5vdCBiZSB0aGUgZ2VuZXJhbCB1c2UgY2FzZSBidXQgaXMgaGVyZSBpbmNhc2VcclxuICAgICAgICBpZiAoIW9wdGlvbnMuaWNlU2VydmVycykge1xyXG4gICAgICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTZfXy5Mb2dnZXIuSW5mbyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTZfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnQSB0dXJuIHNldmVyIHdhcyBub3QgZm91bmQnKTtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBsb29wIHRocm91Z2ggdGhlIGljZSBzZXJ2ZXJzIHRvIGNoZWNrIGZvciBhIHR1cm4gdXJsXHJcbiAgICAgICAgZm9yIChjb25zdCBpY2VTZXJ2ZXIgb2Ygb3B0aW9ucy5pY2VTZXJ2ZXJzKSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgdXJsIG9mIGljZVNlcnZlci51cmxzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodXJsLmluY2x1ZGVzKCd0dXJuJykpIHtcclxuICAgICAgICAgICAgICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTZfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNl9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksIGBBIHR1cm4gc2V2ZXIgd2FzIGZvdW5kIGF0ICR7dXJsfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNl9fLkxvZ2dlci5JbmZvKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNl9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksICdBIHR1cm4gc2V2ZXIgd2FzIG5vdCBmb3VuZCcpO1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlcyB3aGVuIGEgQ29uZmlnIE1lc3NhZ2UgaXMgcmVjZWl2ZWQgY29udGFpbnMgdGhlIFBlZXIgQ29ubmVjdGlvbiBPcHRpb25zIHJlcXVpcmVkIChTVFVOIGFuZCBUVVJOIFNlcnZlciBJbmZvKVxyXG4gICAgICogQHBhcmFtIG1lc3NhZ2VDb25maWcgLSBDb25maWcgTWVzc2FnZSByZWNlaXZlZCBmcm9tIHRoZSBzaWduYWxpbmcgc2VydmVyXHJcbiAgICAgKi9cclxuICAgIGhhbmRsZU9uQ29uZmlnTWVzc2FnZShtZXNzYWdlQ29uZmlnKSB7XHJcbiAgICAgICAgdGhpcy5yZXNpemVQbGF5ZXJTdHlsZSgpO1xyXG4gICAgICAgIC8vIFRlbGwgdGhlIFdlYlJ0Y0NvbnRyb2xsZXIgdG8gc3RhcnQgYSBzZXNzaW9uIHdpdGggdGhlIHBlZXIgb3B0aW9ucyBzZW50IGZyb20gdGhlIHNpZ25hbGluZyBzZXJ2ZXJcclxuICAgICAgICB0aGlzLnN0YXJ0U2Vzc2lvbihtZXNzYWdlQ29uZmlnLnBlZXJDb25uZWN0aW9uT3B0aW9ucyk7XHJcbiAgICAgICAgLy8gV2hlbiB0aGUgc2lnbmFsaW5nIHNlcnZlciBzZW5kcyBhIFdlYlJUQyBBbnN3ZXIgb3ZlciB0aGUgd2Vic29ja2V0IGNvbm5lY3Rpb24gaGF2ZSB0aGUgV2ViUnRjQ29udHJvbGxlciBoYW5kbGUgdGhlIG1lc3NhZ2VcclxuICAgICAgICB0aGlzLndlYlNvY2tldENvbnRyb2xsZXIub25XZWJSdGNBbnN3ZXIgPSAobWVzc2FnZUFuc3dlcikgPT4gdGhpcy5oYW5kbGVXZWJSdGNBbnN3ZXIobWVzc2FnZUFuc3dlcik7XHJcbiAgICAgICAgdGhpcy53ZWJTb2NrZXRDb250cm9sbGVyLm9uV2ViUnRjT2ZmZXIgPSAobWVzc2FnZU9mZmVyKSA9PiB0aGlzLmhhbmRsZVdlYlJ0Y09mZmVyKG1lc3NhZ2VPZmZlcik7XHJcbiAgICAgICAgdGhpcy53ZWJTb2NrZXRDb250cm9sbGVyLm9uV2ViUnRjUGVlckRhdGFDaGFubmVscyA9IChtZXNzYWdlRGF0YUNoYW5uZWxzKSA9PiB0aGlzLmhhbmRsZVdlYlJ0Y1NGVVBlZXJEYXRhY2hhbm5lbHMobWVzc2FnZURhdGFDaGFubmVscyk7XHJcbiAgICAgICAgLy8gV2hlbiB0aGUgc2lnbmFsaW5nIHNlcnZlciBzZW5kcyBhIEljZUNhbmRpZGF0ZSBvdmVyIHRoZSB3ZWJzb2NrZXQgY29ubmVjdGlvbiBoYXZlIHRoZSBXZWJSdGNDb250cm9sbGVyIGhhbmRsZSB0aGUgbWVzc2FnZVxyXG4gICAgICAgIHRoaXMud2ViU29ja2V0Q29udHJvbGxlci5vbkljZUNhbmRpZGF0ZSA9IChpY2VDYW5kaWRhdGUpID0+IHRoaXMuaGFuZGxlSWNlQ2FuZGlkYXRlKGljZUNhbmRpZGF0ZSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEhhbmRsZXMgd2hlbiB0aGUgc2lnbmFsbGluZyBzZXJ2ZXIgZ2l2ZXMgdXMgdGhlIGxpc3Qgb2Ygc3RyZWFtZXIgaWRzLlxyXG4gICAgICovXHJcbiAgICBoYW5kbGVTdHJlYW1lckxpc3RNZXNzYWdlKG1lc3NhZ2VTdHJlYW1lckxpc3QpIHtcclxuICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTZfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNl9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksIGBHb3Qgc3RyZWFtZXIgbGlzdCAke21lc3NhZ2VTdHJlYW1lckxpc3QuaWRzfWAsIDYpO1xyXG4gICAgICAgIGlmICh0aGlzLmlzUmVjb25uZWN0aW5nKSB7XHJcbiAgICAgICAgICAgIGlmIChtZXNzYWdlU3RyZWFtZXJMaXN0Lmlkcy5pbmNsdWRlcyh0aGlzLnN1YnNjcmliZWRTdHJlYW0pKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBJZiB3ZSdyZSByZWNvbm5lY3RpbmcgYW5kIHRoZSBwcmV2aW91c2x5IHN1YnNjcmliZWQgc3RyZWFtIGhhcyBjb21lIGJhY2ssIHJlc3Vic2NyaWJlIHRvIGl0XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlzUmVjb25uZWN0aW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlY29ubmVjdEF0dGVtcHQgPSAwO1xyXG4gICAgICAgICAgICAgICAgdGhpcy53ZWJTb2NrZXRDb250cm9sbGVyLnNlbmRTdWJzY3JpYmUodGhpcy5zdWJzY3JpYmVkU3RyZWFtKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLnJlY29ubmVjdEF0dGVtcHQgPCB0aGlzLmNvbmZpZy5nZXROdW1lcmljU2V0dGluZ1ZhbHVlKF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMV9fLk51bWVyaWNQYXJhbWV0ZXJzLk1heFJlY29ubmVjdEF0dGVtcHRzKSkge1xyXG4gICAgICAgICAgICAgICAgLy8gT3VyIHByZXZpb3VzIHN0cmVhbSBoYXNuJ3QgY29tZSBiYWNrLCB3YWl0IDIgc2Vjb25kcyBhbmQgcmVxdWVzdCBhbiB1cGRhdGVkIHN0cmVhbSBsaXN0XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlY29ubmVjdEF0dGVtcHQrKztcclxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMud2ViU29ja2V0Q29udHJvbGxlci5yZXF1ZXN0U3RyZWFtZXJMaXN0KCk7XHJcbiAgICAgICAgICAgICAgICB9LCAyMDAwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIFdlJ3ZlIGV4aGF1c3RlZCBvdXIgcmVjb25uZWN0IGF0dGVtcHRzLCByZXR1cm4gdG8gbWFpbiBzY3JlZW5cclxuICAgICAgICAgICAgICAgIHRoaXMucmVjb25uZWN0QXR0ZW1wdCA9IDA7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlzUmVjb25uZWN0aW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNob3VsZFJlY29ubmVjdCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy53ZWJTb2NrZXRDb250cm9sbGVyLmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbmZpZy5zZXRPcHRpb25TZXR0aW5nVmFsdWUoX0NvbmZpZ19Db25maWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzExX18uT3B0aW9uUGFyYW1ldGVycy5TdHJlYW1lcklkLCBcIlwiKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29uZmlnLnNldE9wdGlvblNldHRpbmdPcHRpb25zKF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMV9fLk9wdGlvblBhcmFtZXRlcnMuU3RyZWFtZXJJZCwgW10pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBzZXR0aW5nT3B0aW9ucyA9IFsuLi5tZXNzYWdlU3RyZWFtZXJMaXN0Lmlkc107IC8vIGNvcHkgdGhlIG9yaWdpbmFsIG1lc3NhZ2VTdHJlYW1lckxpc3QuaWRzXHJcbiAgICAgICAgICAgIHNldHRpbmdPcHRpb25zLnVuc2hpZnQoJycpOyAvLyBhZGQgYW4gZW1wdHkgb3B0aW9uIGF0IHRoZSB0b3BcclxuICAgICAgICAgICAgdGhpcy5jb25maWcuc2V0T3B0aW9uU2V0dGluZ09wdGlvbnMoX0NvbmZpZ19Db25maWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzExX18uT3B0aW9uUGFyYW1ldGVycy5TdHJlYW1lcklkLCBzZXR0aW5nT3B0aW9ucyk7XHJcbiAgICAgICAgICAgIGNvbnN0IHVybFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMod2luZG93LmxvY2F0aW9uLnNlYXJjaCk7XHJcbiAgICAgICAgICAgIGxldCBhdXRvU2VsZWN0ZWRTdHJlYW1lcklkID0gbnVsbDtcclxuICAgICAgICAgICAgaWYgKG1lc3NhZ2VTdHJlYW1lckxpc3QuaWRzLmxlbmd0aCA9PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGVyZSdzIG9ubHkgYSBzaW5nbGUgc3RyZWFtZXIsIHN1YnNjcmliZSB0byBpdCByZWdhcmRsZXNzIG9mIHdoYXQgaXMgaW4gdGhlIFVSTFxyXG4gICAgICAgICAgICAgICAgYXV0b1NlbGVjdGVkU3RyZWFtZXJJZCA9IG1lc3NhZ2VTdHJlYW1lckxpc3QuaWRzWzBdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuY29uZmlnLmlzRmxhZ0VuYWJsZWQoX0NvbmZpZ19Db25maWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzExX18uRmxhZ3MuUHJlZmVyU0ZVKSAmJlxyXG4gICAgICAgICAgICAgICAgbWVzc2FnZVN0cmVhbWVyTGlzdC5pZHMuaW5jbHVkZXMoJ1NGVScpKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgU0ZVIHRvZ2dsZSBpcyBvbiBhbmQgdGhlcmUncyBhbiBTRlUgY29ubmVjdGVkLCBzdWJzY3JpYmUgdG8gaXQgcmVnYXJkbGVzcyBvZiB3aGF0IGlzIGluIHRoZSBVUkxcclxuICAgICAgICAgICAgICAgIGF1dG9TZWxlY3RlZFN0cmVhbWVySWQgPSAnU0ZVJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICh1cmxQYXJhbXMuaGFzKF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMV9fLk9wdGlvblBhcmFtZXRlcnMuU3RyZWFtZXJJZCkgJiZcclxuICAgICAgICAgICAgICAgIG1lc3NhZ2VTdHJlYW1lckxpc3QuaWRzLmluY2x1ZGVzKHVybFBhcmFtcy5nZXQoX0NvbmZpZ19Db25maWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzExX18uT3B0aW9uUGFyYW1ldGVycy5TdHJlYW1lcklkKSkpIHtcclxuICAgICAgICAgICAgICAgIC8vIElmIHRoZXJlJ3MgYSBzdHJlYW1lciBJRCBpbiB0aGUgVVJMIGFuZCBhIHN0cmVhbWVyIHdpdGggdGhpcyBJRCBpcyBjb25uZWN0ZWQsIHNldCBpdCBhcyB0aGUgc2VsZWN0ZWQgc3RyZWFtZXJcclxuICAgICAgICAgICAgICAgIGF1dG9TZWxlY3RlZFN0cmVhbWVySWQgPSB1cmxQYXJhbXMuZ2V0KF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMV9fLk9wdGlvblBhcmFtZXRlcnMuU3RyZWFtZXJJZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGF1dG9TZWxlY3RlZFN0cmVhbWVySWQgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29uZmlnLnNldE9wdGlvblNldHRpbmdWYWx1ZShfQ29uZmlnX0NvbmZpZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTFfXy5PcHRpb25QYXJhbWV0ZXJzLlN0cmVhbWVySWQsIGF1dG9TZWxlY3RlZFN0cmVhbWVySWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMucGl4ZWxTdHJlYW1pbmcuZGlzcGF0Y2hFdmVudChuZXcgX1V0aWxfRXZlbnRFbWl0dGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xN19fLlN0cmVhbWVyTGlzdE1lc3NhZ2VFdmVudCh7XHJcbiAgICAgICAgICAgICAgICBtZXNzYWdlU3RyZWFtZXJMaXN0LFxyXG4gICAgICAgICAgICAgICAgYXV0b1NlbGVjdGVkU3RyZWFtZXJJZFxyXG4gICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBIYW5kbGUgdGhlIFJUQyBBbnN3ZXIgZnJvbSB0aGUgc2lnbmFsaW5nIHNlcnZlclxyXG4gICAgICogQHBhcmFtIEFuc3dlciAtIEFuc3dlciBTRFAgZnJvbSB0aGUgcGVlci5cclxuICAgICAqL1xyXG4gICAgaGFuZGxlV2ViUnRjQW5zd2VyKEFuc3dlcikge1xyXG4gICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNl9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE2X18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgYEdvdCBhbnN3ZXIgc2RwICR7QW5zd2VyLnNkcH1gLCA2KTtcclxuICAgICAgICBjb25zdCBzZHBBbnN3ZXIgPSB7XHJcbiAgICAgICAgICAgIHNkcDogQW5zd2VyLnNkcCxcclxuICAgICAgICAgICAgdHlwZTogJ2Fuc3dlcidcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMucGVlckNvbm5lY3Rpb25Db250cm9sbGVyLnJlY2VpdmVBbnN3ZXIoc2RwQW5zd2VyKTtcclxuICAgICAgICB0aGlzLmhhbmRsZVBvc3RXZWJydGNOZWdvdGlhdGlvbigpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBIYW5kbGUgdGhlIFJUQyBvZmZlciBmcm9tIGEgV2ViUlRDIHBlZXIgKHJlY2VpdmVkIHRocm91Z2ggdGhlIHNpZ25hbGxpbmcgc2VydmVyKS5cclxuICAgICAqIEBwYXJhbSBPZmZlciAtIE9mZmVyIFNEUCBmcm9tIHRoZSBwZWVyLlxyXG4gICAgICovXHJcbiAgICBoYW5kbGVXZWJSdGNPZmZlcihPZmZlcikge1xyXG4gICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNl9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE2X18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgYEdvdCBvZmZlciBzZHAgJHtPZmZlci5zZHB9YCwgNik7XHJcbiAgICAgICAgdGhpcy5pc1VzaW5nU0ZVID0gT2ZmZXIuc2Z1ID8gT2ZmZXIuc2Z1IDogZmFsc2U7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNVc2luZ1NGVSkge1xyXG4gICAgICAgICAgICAvLyBEaXNhYmxlIG5lZ290aWF0aW5nIHdpdGggdGhlIHNmdSBhcyB0aGUgc2Z1IG9ubHkgc3VwcG9ydHMgb25lIGNvZGVjIGF0IGEgdGltZVxyXG4gICAgICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uQ29udHJvbGxlci5wcmVmZXJyZWRDb2RlYyA9ICcnO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBzZHBPZmZlciA9IHtcclxuICAgICAgICAgICAgc2RwOiBPZmZlci5zZHAsXHJcbiAgICAgICAgICAgIHR5cGU6ICdvZmZlcidcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMucGVlckNvbm5lY3Rpb25Db250cm9sbGVyLnJlY2VpdmVPZmZlcihzZHBPZmZlciwgdGhpcy5jb25maWcpO1xyXG4gICAgICAgIHRoaXMuaGFuZGxlUG9zdFdlYnJ0Y05lZ290aWF0aW9uKCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEhhbmRsZSB3aGVuIHRoZSBTRlUgcHJvdmlkZXMgdGhlIHBlZXIgd2l0aCBpdHMgZGF0YSBjaGFubmVsc1xyXG4gICAgICogQHBhcmFtIERhdGFDaGFubmVscyAtIFRoZSBtZXNzYWdlIGZyb20gdGhlIFNGVSBjb250YWluaW5nIHRoZSBkYXRhIGNoYW5uZWxzIGlkc1xyXG4gICAgICovXHJcbiAgICBoYW5kbGVXZWJSdGNTRlVQZWVyRGF0YWNoYW5uZWxzKERhdGFDaGFubmVscykge1xyXG4gICAgICAgIGNvbnN0IFNlbmRPcHRpb25zID0ge1xyXG4gICAgICAgICAgICBvcmRlcmVkOiB0cnVlLFxyXG4gICAgICAgICAgICBuZWdvdGlhdGVkOiB0cnVlLFxyXG4gICAgICAgICAgICBpZDogRGF0YUNoYW5uZWxzLnNlbmRTdHJlYW1JZFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgY29uc3QgdW5pZGlyZWN0aW9uYWwgPSBEYXRhQ2hhbm5lbHMuc2VuZFN0cmVhbUlkICE9IERhdGFDaGFubmVscy5yZWN2U3RyZWFtSWQ7XHJcbiAgICAgICAgdGhpcy5zZW5kcmVjdkRhdGFDaGFubmVsQ29udHJvbGxlci5jcmVhdGVEYXRhQ2hhbm5lbCh0aGlzLnBlZXJDb25uZWN0aW9uQ29udHJvbGxlci5wZWVyQ29ubmVjdGlvbiwgdW5pZGlyZWN0aW9uYWwgPyAnc2VuZC1kYXRhY2hhbm5lbCcgOiAnZGF0YWNoYW5uZWwnLCBTZW5kT3B0aW9ucyk7XHJcbiAgICAgICAgaWYgKHVuaWRpcmVjdGlvbmFsKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IFJlY3ZPcHRpb25zID0ge1xyXG4gICAgICAgICAgICAgICAgb3JkZXJlZDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIG5lZ290aWF0ZWQ6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBpZDogRGF0YUNoYW5uZWxzLnJlY3ZTdHJlYW1JZFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB0aGlzLnJlY3ZEYXRhQ2hhbm5lbENvbnRyb2xsZXIuY3JlYXRlRGF0YUNoYW5uZWwodGhpcy5wZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIucGVlckNvbm5lY3Rpb24sICdyZWN2LWRhdGFjaGFubmVsJywgUmVjdk9wdGlvbnMpO1xyXG4gICAgICAgICAgICB0aGlzLnJlY3ZEYXRhQ2hhbm5lbENvbnRyb2xsZXIuaGFuZGxlT25PcGVuID0gKCkgPT4gdGhpcy53ZWJTb2NrZXRDb250cm9sbGVyLnNlbmRTRlVSZWN2RGF0YUNoYW5uZWxSZWFkeSgpO1xyXG4gICAgICAgICAgICAvLyBJZiB3ZSdyZSB1bmktZGlyZWN0aW9uYWwsIG9ubHkgdGhlIHJlY3YgZGF0YSBjaGFubmVsIHNob3VsZCBoYW5kbGUgaW5jb21pbmcgbWVzc2FnZXNcclxuICAgICAgICAgICAgdGhpcy5yZWN2RGF0YUNoYW5uZWxDb250cm9sbGVyLmhhbmRsZU9uTWVzc2FnZSA9IChldikgPT4gdGhpcy5oYW5kbGVPbk1lc3NhZ2UoZXYpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gZWxzZSBvdXIgcHJpbWFyeSBkYXRhY2hhbm5lbCBpcyBzZW5kL3JlY3Ygc28gaXQgY2FuIGhhbmRsZSBpbmNvbWluZyBtZXNzYWdlc1xyXG4gICAgICAgICAgICB0aGlzLnNlbmRyZWN2RGF0YUNoYW5uZWxDb250cm9sbGVyLmhhbmRsZU9uTWVzc2FnZSA9IChldikgPT4gdGhpcy5oYW5kbGVPbk1lc3NhZ2UoZXYpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGhhbmRsZVBvc3RXZWJydGNOZWdvdGlhdGlvbigpIHtcclxuICAgICAgICAvLyBzdGFydCB0aGUgYWZrIHdhcm5pbmcgdGltZXIgYXMgUFMgaXMgbm93IHJ1bm5pbmdcclxuICAgICAgICB0aGlzLmFma0NvbnRyb2xsZXIuc3RhcnRBZmtXYXJuaW5nVGltZXIoKTtcclxuICAgICAgICAvLyBzaG93IHRoZSBvdmVybGF5IHRoYXQgd2UgaGF2ZSBuZWdvdGlhdGVkIGEgY29ubmVjdGlvblxyXG4gICAgICAgIHRoaXMucGl4ZWxTdHJlYW1pbmcuX29uV2ViUnRjU2RwKCk7XHJcbiAgICAgICAgaWYgKHRoaXMuc3RhdHNUaW1lckhhbmRsZSAmJiB0aGlzLnN0YXRzVGltZXJIYW5kbGUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB3aW5kb3cuY2xlYXJJbnRlcnZhbCh0aGlzLnN0YXRzVGltZXJIYW5kbGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnN0YXRzVGltZXJIYW5kbGUgPSB3aW5kb3cuc2V0SW50ZXJ2YWwoKCkgPT4gdGhpcy5nZXRTdGF0cygpLCAxMDAwKTtcclxuICAgICAgICAvKiAgKi9cclxuICAgICAgICB0aGlzLnNldE1vdXNlSW5wdXRFbmFibGVkKHRoaXMuY29uZmlnLmlzRmxhZ0VuYWJsZWQoX0NvbmZpZ19Db25maWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzExX18uRmxhZ3MuTW91c2VJbnB1dCkpO1xyXG4gICAgICAgIHRoaXMuc2V0S2V5Ym9hcmRJbnB1dEVuYWJsZWQodGhpcy5jb25maWcuaXNGbGFnRW5hYmxlZChfQ29uZmlnX0NvbmZpZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTFfXy5GbGFncy5LZXlib2FyZElucHV0KSk7XHJcbiAgICAgICAgdGhpcy5zZXRHYW1lUGFkSW5wdXRFbmFibGVkKHRoaXMuY29uZmlnLmlzRmxhZ0VuYWJsZWQoX0NvbmZpZ19Db25maWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzExX18uRmxhZ3MuR2FtZXBhZElucHV0KSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFdoZW4gYW4gaWNlIENhbmRpZGF0ZSBpcyByZWNlaXZlZCBmcm9tIHRoZSBTaWduYWxpbmcgc2VydmVyIGFkZCBpdCB0byB0aGUgUGVlciBDb25uZWN0aW9uIENsaWVudFxyXG4gICAgICogQHBhcmFtIGljZUNhbmRpZGF0ZSAtIEljZSBDYW5kaWRhdGUgZnJvbSBTZXJ2ZXJcclxuICAgICAqL1xyXG4gICAgaGFuZGxlSWNlQ2FuZGlkYXRlKGljZUNhbmRpZGF0ZSkge1xyXG4gICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNl9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE2X18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ1dlYiBSVEMgQ29udHJvbGxlcjogb25XZWJSdGNJY2UnLCA2KTtcclxuICAgICAgICBjb25zdCBjYW5kaWRhdGUgPSBuZXcgUlRDSWNlQ2FuZGlkYXRlKGljZUNhbmRpZGF0ZSk7XHJcbiAgICAgICAgdGhpcy5wZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIuaGFuZGxlT25JY2UoY2FuZGlkYXRlKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogU2VuZCB0aGUgaWNlIENhbmRpZGF0ZSB0byB0aGUgc2lnbmFsaW5nIHNlcnZlciB2aWEgd2Vic29ja2V0XHJcbiAgICAgKiBAcGFyYW0gaWNlRXZlbnQgLSBSVEMgUGVlciBDb25uZWN0aW9uSWNlRXZlbnQpIHtcclxuICAgICAqL1xyXG4gICAgaGFuZGxlU2VuZEljZUNhbmRpZGF0ZShpY2VFdmVudCkge1xyXG4gICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNl9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE2X18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ09uSWNlQ2FuZGlkYXRlJywgNik7XHJcbiAgICAgICAgaWYgKGljZUV2ZW50LmNhbmRpZGF0ZSAmJiBpY2VFdmVudC5jYW5kaWRhdGUuY2FuZGlkYXRlKSB7XHJcbiAgICAgICAgICAgIHRoaXMud2ViU29ja2V0Q29udHJvbGxlci5zZW5kSWNlQ2FuZGlkYXRlKGljZUV2ZW50LmNhbmRpZGF0ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTZW5kIHRoZSBpY2UgQ2FuZGlkYXRlIHRvIHRoZSBzaWduYWxpbmcgc2VydmVyIHZpYSB3ZWJzb2NrZXRcclxuICAgICAqIEBwYXJhbSBpY2VFdmVudCAtIFJUQyBQZWVyIENvbm5lY3Rpb25JY2VFdmVudCkge1xyXG4gICAgICovXHJcbiAgICBoYW5kbGVEYXRhQ2hhbm5lbChkYXRhY2hhbm5lbEV2ZW50KSB7XHJcbiAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE2X18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTZfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnRGF0YSBjaGFubmVsIGNyZWF0ZWQgZm9yIHVzIGJ5IGJyb3dzZXIgYXMgd2UgYXJlIGEgcmVjZWl2aW5nIHBlZXIuJywgNik7XHJcbiAgICAgICAgdGhpcy5zZW5kcmVjdkRhdGFDaGFubmVsQ29udHJvbGxlci5kYXRhQ2hhbm5lbCA9XHJcbiAgICAgICAgICAgIGRhdGFjaGFubmVsRXZlbnQuY2hhbm5lbDtcclxuICAgICAgICAvLyBEYXRhIGNoYW5uZWwgd2FzIGNyZWF0ZWQgZm9yIHVzLCBzbyB3ZSBqdXN0IG5lZWQgdG8gc2V0dXAgaXRzIGNhbGxiYWNrcyBhbmQgYXJyYXkgdHlwZVxyXG4gICAgICAgIHRoaXMuc2VuZHJlY3ZEYXRhQ2hhbm5lbENvbnRyb2xsZXIuc2V0dXBEYXRhQ2hhbm5lbCgpO1xyXG4gICAgICAgIHRoaXMuc2VuZHJlY3ZEYXRhQ2hhbm5lbENvbnRyb2xsZXIuaGFuZGxlT25NZXNzYWdlID0gKGV2KSA9PiB0aGlzLmhhbmRsZU9uTWVzc2FnZShldik7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFNlbmQgdGhlIFJUQyBPZmZlciBTZXNzaW9uIHRvIHRoZSBTaWduYWxpbmcgc2VydmVyIHZpYSB3ZWJzb2NrZXRcclxuICAgICAqIEBwYXJhbSBvZmZlciAtIFJUQyBTZXNzaW9uIERlc2NyaXB0aW9uXHJcbiAgICAgKi9cclxuICAgIGhhbmRsZVNlbmRXZWJSVENPZmZlcihvZmZlcikge1xyXG4gICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNl9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE2X18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ1NlbmRpbmcgdGhlIG9mZmVyIHRvIHRoZSBTZXJ2ZXInLCA2KTtcclxuICAgICAgICB0aGlzLndlYlNvY2tldENvbnRyb2xsZXIuc2VuZFdlYlJ0Y09mZmVyKG9mZmVyKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogU2VuZCB0aGUgUlRDIE9mZmVyIFNlc3Npb24gdG8gdGhlIFNpZ25hbGluZyBzZXJ2ZXIgdmlhIHdlYnNvY2tldFxyXG4gICAgICogQHBhcmFtIGFuc3dlciAtIFJUQyBTZXNzaW9uIERlc2NyaXB0aW9uXHJcbiAgICAgKi9cclxuICAgIGhhbmRsZVNlbmRXZWJSVENBbnN3ZXIoYW5zd2VyKSB7XHJcbiAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE2X18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTZfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnU2VuZGluZyB0aGUgYW5zd2VyIHRvIHRoZSBTZXJ2ZXInLCA2KTtcclxuICAgICAgICB0aGlzLndlYlNvY2tldENvbnRyb2xsZXIuc2VuZFdlYlJ0Y0Fuc3dlcihhbnN3ZXIpO1xyXG4gICAgICAgIGlmICh0aGlzLmlzVXNpbmdTRlUpIHtcclxuICAgICAgICAgICAgdGhpcy53ZWJTb2NrZXRDb250cm9sbGVyLnNlbmRXZWJSdGNEYXRhY2hhbm5lbFJlcXVlc3QoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFNldCB0aGUgZnJlZXplIGZyYW1lIG92ZXJsYXkgdG8gdGhlIHBsYXllciBkaXZcclxuICAgICAqL1xyXG4gICAgc2V0VXBNb3VzZUFuZEZyZWV6ZUZyYW1lKCkge1xyXG4gICAgICAgIC8vIENhbGN1bGF0aW5nIGFuZCBub3JtYWxpemluZyBwb3NpdGlvbnMgZGVwZW5kcyBvbiB0aGUgd2lkdGggYW5kIGhlaWdodCBvZiB0aGUgcGxheWVyLlxyXG4gICAgICAgIHRoaXMudmlkZW9FbGVtZW50UGFyZW50Q2xpZW50UmVjdCA9IHRoaXMudmlkZW9QbGF5ZXJcclxuICAgICAgICAgICAgLmdldFZpZGVvUGFyZW50RWxlbWVudCgpXHJcbiAgICAgICAgICAgIC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICB0aGlzLmNvb3JkaW5hdGVDb252ZXJ0ZXIuc2V0dXBOb3JtYWxpemVBbmRRdWFudGl6ZSgpO1xyXG4gICAgICAgIHRoaXMuZnJlZXplRnJhbWVDb250cm9sbGVyLmZyZWV6ZUZyYW1lLnJlc2l6ZSgpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDbG9zZSB0aGUgQ29ubmVjdGlvbiB0byB0aGUgc2lnbmFsaW5nIHNlcnZlclxyXG4gICAgICovXHJcbiAgICBjbG9zZVNpZ25hbGluZ1NlcnZlcigpIHtcclxuICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgLy8gV2UgZXhwbGljaXRseSBjYWxsZWQgY2xvc2UsIHRoZXJlZm9yZSB3ZSBkb24ndCB3YW50IHRvIHRyaWdnZXIgYXV0byByZWNvbm5lY3RcclxuICAgICAgICB0aGlzLnNob3VsZFJlY29ubmVjdCA9IGZhbHNlO1xyXG4gICAgICAgIChfYSA9IHRoaXMud2ViU29ja2V0Q29udHJvbGxlcikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNsb3NlKCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENsb3NlIHRoZSBwZWVyIGNvbm5lY3Rpb25cclxuICAgICAqL1xyXG4gICAgY2xvc2VQZWVyQ29ubmVjdGlvbigpIHtcclxuICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgKF9hID0gdGhpcy5wZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jbG9zZSgpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDbG9zZSBhbGwgY29ubmVjdGlvbnNcclxuICAgICAqL1xyXG4gICAgY2xvc2UoKSB7XHJcbiAgICAgICAgdGhpcy5jbG9zZVNpZ25hbGluZ1NlcnZlcigpO1xyXG4gICAgICAgIHRoaXMuY2xvc2VQZWVyQ29ubmVjdGlvbigpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBGaXJlcyBhIFZpZGVvIFN0YXRzIEV2ZW50IGluIHRoZSBSVEMgUGVlciBDb25uZWN0aW9uXHJcbiAgICAgKi9cclxuICAgIGdldFN0YXRzKCkge1xyXG4gICAgICAgIHRoaXMucGVlckNvbm5lY3Rpb25Db250cm9sbGVyLmdlbmVyYXRlU3RhdHMoKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogU2VuZCBhIExhdGVuY3kgVGVzdCBSZXF1ZXN0IHRvIHRoZSBVRSBJbnN0YW5jZVxyXG4gICAgICovXHJcbiAgICBzZW5kTGF0ZW5jeVRlc3QoKSB7XHJcbiAgICAgICAgdGhpcy5sYXRlbmN5U3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcclxuICAgICAgICB0aGlzLnNlbmREZXNjcmlwdG9yQ29udHJvbGxlci5zZW5kTGF0ZW5jeVRlc3Qoe1xyXG4gICAgICAgICAgICBTdGFydFRpbWU6IHRoaXMubGF0ZW5jeVN0YXJ0VGltZVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTZW5kIHRoZSBNaW5RUCBlbmNvZGVyIHNldHRpbmcgdG8gdGhlIFVFIEluc3RhbmNlLlxyXG4gICAgICogQHBhcmFtIG1pblFQIC0gVGhlIGxvd2VyIGJvdW5kIGZvciBRUCB3aGVuIGVuY29kaW5nXHJcbiAgICAgKiB2YWxpZCB2YWx1ZXMgYXJlICgxLTUxKSB3aGVyZTpcclxuICAgICAqIDEgPSBCZXN0IHF1YWxpdHkgYnV0IGhpZ2hlc3QgYml0cmF0ZS5cclxuICAgICAqIDUxID0gV29yc3QgcXVhbGl0eSBidXQgbG93ZXN0IGJpdHJhdGUuXHJcbiAgICAgKiBCeSBkZWZhdWx0IHRoZSBtaW5RUCBpcyAxIG1lYW5pbmcgdGhlIGVuY29kZXIgaXMgZnJlZVxyXG4gICAgICogdG8gYWltIGZvciB0aGUgYmVzdCBxdWFsaXR5IGl0IGNhbiBvbiB0aGUgZ2l2ZW4gbmV0d29yayBsaW5rLlxyXG4gICAgICovXHJcbiAgICBzZW5kRW5jb2Rlck1pblFQKG1pblFQKSB7XHJcbiAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE2X18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTZfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBgTWluUVA9JHttaW5RUH1cXG5gLCA2KTtcclxuICAgICAgICBpZiAobWluUVAgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLnNlbmREZXNjcmlwdG9yQ29udHJvbGxlci5lbWl0Q29tbWFuZCh7XHJcbiAgICAgICAgICAgICAgICAnRW5jb2Rlci5NaW5RUCc6IG1pblFQXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogU2VuZCB0aGUgTWF4UVAgZW5jb2RlciBzZXR0aW5nIHRvIHRoZSBVRSBJbnN0YW5jZS5cclxuICAgICAqIEBwYXJhbSBtYXhRUCAtIFRoZSB1cHBlciBib3VuZCBmb3IgUVAgd2hlbiBlbmNvZGluZ1xyXG4gICAgICogdmFsaWQgdmFsdWVzIGFyZSAoMS01MSkgd2hlcmU6XHJcbiAgICAgKiAxID0gQmVzdCBxdWFsaXR5IGJ1dCBoaWdoZXN0IGJpdHJhdGUuXHJcbiAgICAgKiA1MSA9IFdvcnN0IHF1YWxpdHkgYnV0IGxvd2VzdCBiaXRyYXRlLlxyXG4gICAgICogQnkgZGVmYXVsdCB0aGUgbWF4UVAgaXMgNTEgbWVhbmluZyB0aGUgZW5jb2RlciBpcyBmcmVlXHJcbiAgICAgKiB0byBkcm9wIHF1YWxpdHkgYXMgbG93IGFzIG5lZWRlZCBvbiB0aGUgZ2l2ZW4gbmV0d29yayBsaW5rLlxyXG4gICAgICovXHJcbiAgICBzZW5kRW5jb2Rlck1heFFQKG1heFFQKSB7XHJcbiAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE2X18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTZfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBgTWF4UVA9JHttYXhRUH1cXG5gLCA2KTtcclxuICAgICAgICBpZiAobWF4UVAgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLnNlbmREZXNjcmlwdG9yQ29udHJvbGxlci5lbWl0Q29tbWFuZCh7XHJcbiAgICAgICAgICAgICAgICAnRW5jb2Rlci5NYXhRUCc6IG1heFFQXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogU2VuZCB0aGUgeyBXZWJSVEMuTWluQml0cmF0ZTogU29tZU51bWJlciB9fSBjb21tYW5kIHRvIFVFIHRvIHNldFxyXG4gICAgICogdGhlIG1pbmltdW0gYml0cmF0ZSB0aGF0IHdlIGFsbG93IFdlYlJUQyB0byB1c2VcclxuICAgICAqIChub3RlIHNldHRpbmcgdGhpcyB0b28gaGlnaCBpbiBwb29yIG5ldHdvcmtzIGNhbiBiZSBwcm9ibGVtYXRpYykuXHJcbiAgICAgKiBAcGFyYW0gbWluQml0cmF0ZSAtIFRoZSBtaW5pbXVtIGJpdHJhdGUgd2Ugd291bGQgbGlrZSBXZWJSVEMgdG8gbm90IGZhbGwgYmVsb3cuXHJcbiAgICAgKi9cclxuICAgIHNlbmRXZWJSVENNaW5CaXRyYXRlKG1pbkJpdHJhdGUpIHtcclxuICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTZfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNl9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksIGBXZWJSVEMgTWluIEJpdHJhdGU9JHttaW5CaXRyYXRlfWAsIDYpO1xyXG4gICAgICAgIGlmIChtaW5CaXRyYXRlICE9IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5zZW5kRGVzY3JpcHRvckNvbnRyb2xsZXIuZW1pdENvbW1hbmQoe1xyXG4gICAgICAgICAgICAgICAgJ1dlYlJUQy5NaW5CaXRyYXRlJzogbWluQml0cmF0ZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFNlbmQgdGhlIHsgV2ViUlRDLk1heEJpdHJhdGU6IFNvbWVOdW1iZXIgfX0gY29tbWFuZCB0byBVRSB0byBzZXRcclxuICAgICAqIHRoZSBtaW5pbXVtIGJpdHJhdGUgdGhhdCB3ZSBhbGxvdyBXZWJSVEMgdG8gdXNlXHJcbiAgICAgKiAobm90ZSBzZXR0aW5nIHRoaXMgdG9vIGxvdyBjb3VsZCByZXN1bHQgaW4gYmxvY2t5IHZpZGVvKS5cclxuICAgICAqIEBwYXJhbSBtaW5CaXRyYXRlIC0gVGhlIG1pbmltdW0gYml0cmF0ZSB3ZSB3b3VsZCBsaWtlIFdlYlJUQyB0byBub3QgZmFsbCBiZWxvdy5cclxuICAgICAqL1xyXG4gICAgc2VuZFdlYlJUQ01heEJpdHJhdGUobWF4Qml0cmF0ZSkge1xyXG4gICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNl9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE2X18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgYFdlYlJUQyBNYXggQml0cmF0ZT0ke21heEJpdHJhdGV9YCwgNik7XHJcbiAgICAgICAgaWYgKG1heEJpdHJhdGUgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLnNlbmREZXNjcmlwdG9yQ29udHJvbGxlci5lbWl0Q29tbWFuZCh7XHJcbiAgICAgICAgICAgICAgICAnV2ViUlRDLk1heEJpdHJhdGUnOiBtYXhCaXRyYXRlXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogU2VuZCB0aGUgeyBXZWJSVEMuRnBzOiBTb21lTnVtYmVyIH19IFVFIDUuMCtcclxuICAgICAqIGFuZCB7IFdlYlJUQy5NYXhGcHMgfSBVRSA0LjI3IGNvbW1hbmQgdG8gc2V0XHJcbiAgICAgKiB0aGUgbWF4aW11bSBmcHMgd2Ugd291bGQgbGlrZSBXZWJSVEMgdG8gc3RyZWFtIGF0LlxyXG4gICAgICogQHBhcmFtIGZwcyAtIFRoZSBtYXhpbXVtIHN0cmVhbSBmcHMuXHJcbiAgICAgKi9cclxuICAgIHNlbmRXZWJSVENGcHMoZnBzKSB7XHJcbiAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE2X18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTZfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBgV2ViUlRDIEZQUz0ke2Zwc31gLCA2KTtcclxuICAgICAgICBpZiAoZnBzICE9IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5zZW5kRGVzY3JpcHRvckNvbnRyb2xsZXIuZW1pdENvbW1hbmQoeyAnV2ViUlRDLkZwcyc6IGZwcyB9KTtcclxuICAgICAgICAgICAgdGhpcy5zZW5kRGVzY3JpcHRvckNvbnRyb2xsZXIuZW1pdENvbW1hbmQoeyAnV2ViUlRDLk1heEZwcyc6IGZwcyB9KTsgLyogVE9ETzogUmVtb3ZlIHdoZW4gVUUgNC4yNyB1bnN1cHBvcnRlZC4gKi9cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFNlbmRzIHRoZSBVSSBEZXNjcmlwdG9yIGBzdGF0IGZwc2AgdG8gdGhlIFVFIEluc3RhbmNlXHJcbiAgICAgKi9cclxuICAgIHNlbmRTaG93RnBzKCkge1xyXG4gICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNl9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE2X18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJy0tLS0gICBTZW5kaW5nIHNob3cgc3RhdCB0byBVRSAgIC0tLS0nLCA2KTtcclxuICAgICAgICB0aGlzLnNlbmREZXNjcmlwdG9yQ29udHJvbGxlci5lbWl0Q29tbWFuZCh7ICdzdGF0LmZwcyc6ICcnIH0pO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTZW5kIGFuIElmcmFtZSByZXF1ZXN0IHRvIHRoZSBzdHJlYW1lclxyXG4gICAgICovXHJcbiAgICBzZW5kSWZyYW1lUmVxdWVzdCgpIHtcclxuICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTZfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNl9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksICctLS0tICAgU2VuZGluZyBSZXF1ZXN0IGZvciBhbiBJRnJhbWUgIC0tLS0nLCA2KTtcclxuICAgICAgICB0aGlzLnN0cmVhbU1lc3NhZ2VDb250cm9sbGVyLnRvU3RyZWFtZXJIYW5kbGVycy5nZXQoJ0lGcmFtZVJlcXVlc3QnKSgpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTZW5kIGEgVUlJbnRlcmFjdGlvbiBtZXNzYWdlXHJcbiAgICAgKi9cclxuICAgIGVtaXRVSUludGVyYWN0aW9uKGRlc2NyaXB0b3IpIHtcclxuICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTZfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNl9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksICctLS0tICAgU2VuZGluZyBjdXN0b20gVUlJbnRlcmFjdGlvbiBtZXNzYWdlICAgLS0tLScsIDYpO1xyXG4gICAgICAgIHRoaXMuc2VuZERlc2NyaXB0b3JDb250cm9sbGVyLmVtaXRVSUludGVyYWN0aW9uKGRlc2NyaXB0b3IpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTZW5kIGEgQ29tbWFuZCBtZXNzYWdlXHJcbiAgICAgKi9cclxuICAgIGVtaXRDb21tYW5kKGRlc2NyaXB0b3IpIHtcclxuICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTZfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNl9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksICctLS0tICAgU2VuZGluZyBjdXN0b20gQ29tbWFuZCBtZXNzYWdlICAgLS0tLScsIDYpO1xyXG4gICAgICAgIHRoaXMuc2VuZERlc2NyaXB0b3JDb250cm9sbGVyLmVtaXRDb21tYW5kKGRlc2NyaXB0b3IpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTZW5kIGEgY29uc29sZSBjb21tYW5kIG1lc3NhZ2VcclxuICAgICAqL1xyXG4gICAgZW1pdENvbnNvbGVDb21tYW5kKGNvbW1hbmQpIHtcclxuICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTZfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNl9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksICctLS0tICAgU2VuZGluZyBjdXN0b20gQ29tbWFuZDpDb25zb2xlQ29tbWFuZCBtZXNzYWdlICAgLS0tLScsIDYpO1xyXG4gICAgICAgIHRoaXMuc2VuZERlc2NyaXB0b3JDb250cm9sbGVyLmVtaXRDb21tYW5kKHtcclxuICAgICAgICAgICAgQ29uc29sZUNvbW1hbmQ6IGNvbW1hbmQsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFNlbmRzIGEgcmVxdWVzdCB0byB0aGUgVUUgSW5zdGFuY2UgdG8gaGF2ZSBvd25lcnNoaXAgb2YgUXVhbGl0eVxyXG4gICAgICovXHJcbiAgICBzZW5kUmVxdWVzdFF1YWxpdHlDb250cm9sT3duZXJzaGlwKCkge1xyXG4gICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNl9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE2X18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJy0tLS0gICBTZW5kaW5nIFJlcXVlc3QgdG8gQ29udHJvbCBRdWFsaXR5ICAtLS0tJywgNik7XHJcbiAgICAgICAgdGhpcy50b1N0cmVhbWVyTWVzc2FnZXNDb250cm9sbGVyLlNlbmRSZXF1ZXN0UXVhbGl0eUNvbnRyb2woKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlcyB3aGVuIGEgTGF0ZW5jeSBUZXN0IFJlc3VsdCBhcmUgcmVjZWl2ZWQgZnJvbSB0aGUgVUUgSW5zdGFuY2VcclxuICAgICAqIEBwYXJhbSBtZXNzYWdlIC0gTGF0ZW5jeSBUZXN0IFRpbWluZ3NcclxuICAgICAqL1xyXG4gICAgaGFuZGxlTGF0ZW5jeVRlc3RSZXN1bHQobWVzc2FnZSkge1xyXG4gICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNl9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE2X18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ0RhdGFDaGFubmVsUmVjZWl2ZU1lc3NhZ2VUeXBlLmxhdGVuY3lUZXN0JywgNik7XHJcbiAgICAgICAgY29uc3QgbGF0ZW5jeUFzU3RyaW5nID0gbmV3IFRleHREZWNvZGVyKCd1dGYtMTYnKS5kZWNvZGUobWVzc2FnZS5zbGljZSgxKSk7XHJcbiAgICAgICAgY29uc3QgbGF0ZW5jeVRlc3RSZXN1bHRzID0gbmV3IF9EYXRhQ2hhbm5lbF9MYXRlbmN5VGVzdFJlc3VsdHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE5X18uTGF0ZW5jeVRlc3RSZXN1bHRzKCk7XHJcbiAgICAgICAgT2JqZWN0LmFzc2lnbihsYXRlbmN5VGVzdFJlc3VsdHMsIEpTT04ucGFyc2UobGF0ZW5jeUFzU3RyaW5nKSk7XHJcbiAgICAgICAgbGF0ZW5jeVRlc3RSZXN1bHRzLnByb2Nlc3NGaWVsZHMoKTtcclxuICAgICAgICBsYXRlbmN5VGVzdFJlc3VsdHMudGVzdFN0YXJ0VGltZU1zID0gdGhpcy5sYXRlbmN5U3RhcnRUaW1lO1xyXG4gICAgICAgIGxhdGVuY3lUZXN0UmVzdWx0cy5icm93c2VyUmVjZWlwdFRpbWVNcyA9IERhdGUubm93KCk7XHJcbiAgICAgICAgbGF0ZW5jeVRlc3RSZXN1bHRzLmxhdGVuY3lFeGNsdWRpbmdEZWNvZGUgPSB+fihsYXRlbmN5VGVzdFJlc3VsdHMuYnJvd3NlclJlY2VpcHRUaW1lTXMgLVxyXG4gICAgICAgICAgICBsYXRlbmN5VGVzdFJlc3VsdHMudGVzdFN0YXJ0VGltZU1zKTtcclxuICAgICAgICBsYXRlbmN5VGVzdFJlc3VsdHMudGVzdER1cmF0aW9uID0gfn4obGF0ZW5jeVRlc3RSZXN1bHRzLlRyYW5zbWlzc2lvblRpbWVNcyAtXHJcbiAgICAgICAgICAgIGxhdGVuY3lUZXN0UmVzdWx0cy5SZWNlaXB0VGltZU1zKTtcclxuICAgICAgICBsYXRlbmN5VGVzdFJlc3VsdHMubmV0d29ya0xhdGVuY3kgPSB+fihsYXRlbmN5VGVzdFJlc3VsdHMubGF0ZW5jeUV4Y2x1ZGluZ0RlY29kZSAtXHJcbiAgICAgICAgICAgIGxhdGVuY3lUZXN0UmVzdWx0cy50ZXN0RHVyYXRpb24pO1xyXG4gICAgICAgIGlmIChsYXRlbmN5VGVzdFJlc3VsdHMuZnJhbWVEaXNwbGF5RGVsdGFUaW1lTXMgJiZcclxuICAgICAgICAgICAgbGF0ZW5jeVRlc3RSZXN1bHRzLmJyb3dzZXJSZWNlaXB0VGltZU1zKSB7XHJcbiAgICAgICAgICAgIGxhdGVuY3lUZXN0UmVzdWx0cy5lbmRUb0VuZExhdGVuY3kgPVxyXG4gICAgICAgICAgICAgICAgfn4obGF0ZW5jeVRlc3RSZXN1bHRzLmZyYW1lRGlzcGxheURlbHRhVGltZU1zICtcclxuICAgICAgICAgICAgICAgICAgICBsYXRlbmN5VGVzdFJlc3VsdHMubmV0d29ya0xhdGVuY3ksXHJcbiAgICAgICAgICAgICAgICAgICAgK2xhdGVuY3lUZXN0UmVzdWx0cy5DYXB0dXJlVG9TZW5kTXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnBpeGVsU3RyZWFtaW5nLl9vbkxhdGVuY3lUZXN0UmVzdWx0KGxhdGVuY3lUZXN0UmVzdWx0cyk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEhhbmRsZXMgd2hlbiB0aGUgRW5jb2RlciBhbmQgV2ViIFJUQyBTZXR0aW5ncyBhcmUgcmVjZWl2ZWQgZnJvbSB0aGUgVUUgSW5zdGFuY2VcclxuICAgICAqIEBwYXJhbSBtZXNzYWdlIC0gSW5pdGlhbCBFbmNvZGVyIGFuZCBXZWIgUlRDIFNldHRpbmdzXHJcbiAgICAgKi9cclxuICAgIGhhbmRsZUluaXRpYWxTZXR0aW5ncyhtZXNzYWdlKSB7XHJcbiAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE2X18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTZfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnRGF0YUNoYW5uZWxSZWNlaXZlTWVzc2FnZVR5cGUuSW5pdGlhbFNldHRpbmdzJywgNik7XHJcbiAgICAgICAgY29uc3QgcGF5bG9hZEFzU3RyaW5nID0gbmV3IFRleHREZWNvZGVyKCd1dGYtMTYnKS5kZWNvZGUobWVzc2FnZS5zbGljZSgxKSk7XHJcbiAgICAgICAgY29uc3QgcGFyc2VkSW5pdGlhbFNldHRpbmdzID0gSlNPTi5wYXJzZShwYXlsb2FkQXNTdHJpbmcpO1xyXG4gICAgICAgIGNvbnN0IGluaXRpYWxTZXR0aW5ncyA9IG5ldyBfRGF0YUNoYW5uZWxfSW5pdGlhbFNldHRpbmdzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yMF9fLkluaXRpYWxTZXR0aW5ncygpO1xyXG4gICAgICAgIGlmIChwYXJzZWRJbml0aWFsU2V0dGluZ3MuRW5jb2Rlcikge1xyXG4gICAgICAgICAgICBpbml0aWFsU2V0dGluZ3MuRW5jb2RlclNldHRpbmdzID0gcGFyc2VkSW5pdGlhbFNldHRpbmdzLkVuY29kZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChwYXJzZWRJbml0aWFsU2V0dGluZ3MuV2ViUlRDKSB7XHJcbiAgICAgICAgICAgIGluaXRpYWxTZXR0aW5ncy5XZWJSVENTZXR0aW5ncyA9IHBhcnNlZEluaXRpYWxTZXR0aW5ncy5XZWJSVEM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChwYXJzZWRJbml0aWFsU2V0dGluZ3MuUGl4ZWxTdHJlYW1pbmcpIHtcclxuICAgICAgICAgICAgaW5pdGlhbFNldHRpbmdzLlBpeGVsU3RyZWFtaW5nU2V0dGluZ3MgPVxyXG4gICAgICAgICAgICAgICAgcGFyc2VkSW5pdGlhbFNldHRpbmdzLlBpeGVsU3RyZWFtaW5nO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocGFyc2VkSW5pdGlhbFNldHRpbmdzLkNvbmZpZ09wdGlvbnMgJiYgcGFyc2VkSW5pdGlhbFNldHRpbmdzLkNvbmZpZ09wdGlvbnMuRGVmYXVsdFRvSG92ZXIgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbmZpZy5zZXRGbGFnRW5hYmxlZChfQ29uZmlnX0NvbmZpZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTFfXy5GbGFncy5Ib3ZlcmluZ01vdXNlTW9kZSwgISFwYXJzZWRJbml0aWFsU2V0dGluZ3MuQ29uZmlnT3B0aW9ucy5EZWZhdWx0VG9Ib3Zlcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGluaXRpYWxTZXR0aW5ncy51ZUNvbXBhdGlibGUoKTtcclxuICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTZfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNl9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksIHBheWxvYWRBc1N0cmluZywgNik7XHJcbiAgICAgICAgdGhpcy5waXhlbFN0cmVhbWluZy5fb25Jbml0aWFsU2V0dGluZ3MoaW5pdGlhbFNldHRpbmdzKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlcyB3aGVuIHRoZSBRdWFudGl6YXRpb24gUGFyYW1ldGVyIGFyZSByZWNlaXZlZCBmcm9tIHRoZSBVRSBJbnN0YW5jZVxyXG4gICAgICogQHBhcmFtIG1lc3NhZ2UgLSBFbmNvZGVycyBRdWFudGl6YXRpb24gUGFyYW1ldGVyXHJcbiAgICAgKi9cclxuICAgIGhhbmRsZVZpZGVvRW5jb2RlckF2Z1FQKG1lc3NhZ2UpIHtcclxuICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTZfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNl9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksICdEYXRhQ2hhbm5lbFJlY2VpdmVNZXNzYWdlVHlwZS5WaWRlb0VuY29kZXJBdmdRUCcsIDYpO1xyXG4gICAgICAgIGNvbnN0IEF2Z1FQID0gTnVtYmVyKG5ldyBUZXh0RGVjb2RlcigndXRmLTE2JykuZGVjb2RlKG1lc3NhZ2Uuc2xpY2UoMSkpKTtcclxuICAgICAgICB0aGlzLnNldFZpZGVvRW5jb2RlckF2Z1FQKEF2Z1FQKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlcyB3aGVuIHRoZSB2aWRlbyBlbGVtZW50IGhhcyBiZWVuIGxvYWRlZCB3aXRoIGEgc3JjT2JqZWN0XHJcbiAgICAgKi9cclxuICAgIGhhbmRsZVZpZGVvSW5pdGlhbGl6ZWQoKSB7XHJcbiAgICAgICAgdGhpcy5waXhlbFN0cmVhbWluZy5fb25WaWRlb0luaXRpYWxpemVkKCk7XHJcbiAgICAgICAgLy8gZWl0aGVyIGF1dG9wbGF5IHRoZSB2aWRlbyBvciBzZXQgdXAgdGhlIHBsYXkgb3ZlcmxheVxyXG4gICAgICAgIHRoaXMuYXV0b1BsYXlWaWRlb09yU2V0VXBQbGF5T3ZlcmxheSgpO1xyXG4gICAgICAgIHRoaXMucmVzaXplUGxheWVyU3R5bGUoKTtcclxuICAgICAgICB0aGlzLnZpZGVvUGxheWVyLnVwZGF0ZVZpZGVvU3RyZWFtU2l6ZSgpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBGbGFnIHNldCBpZiB0aGUgdXNlciBoYXMgUXVhbGl0eSBPd25lcnNoaXBcclxuICAgICAqIEBwYXJhbSBtZXNzYWdlIC0gRG9lcyB0aGUgY3VycmVudCBjbGllbnQgaGF2ZSBRdWFsaXR5IE93bmVyc2hpcFxyXG4gICAgICovXHJcbiAgICBvblF1YWxpdHlDb250cm9sT3duZXJzaGlwKG1lc3NhZ2UpIHtcclxuICAgICAgICBjb25zdCB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkobWVzc2FnZSk7XHJcbiAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE2X18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTZfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnRGF0YUNoYW5uZWxSZWNlaXZlTWVzc2FnZVR5cGUuUXVhbGl0eUNvbnRyb2xPd25lcnNoaXAnLCA2KTtcclxuICAgICAgICB0aGlzLmlzUXVhbGl0eUNvbnRyb2xsZXIgPSBuZXcgQm9vbGVhbih2aWV3WzFdKS52YWx1ZU9mKCk7XHJcbiAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE2X18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTZfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBgUmVjZWl2ZWQgcXVhbGl0eSBjb250cm9sbGVyIG1lc3NhZ2UsIHdpbGwgY29udHJvbCBxdWFsaXR5OiAke3RoaXMuaXNRdWFsaXR5Q29udHJvbGxlcn1gKTtcclxuICAgICAgICB0aGlzLnBpeGVsU3RyZWFtaW5nLl9vblF1YWxpdHlDb250cm9sT3duZXJzaGlwKHRoaXMuaXNRdWFsaXR5Q29udHJvbGxlcik7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEhhbmRsZXMgd2hlbiB0aGUgQWdncmVnYXRlZCBzdGF0cyBhcmUgQ29sbGVjdGVkXHJcbiAgICAgKiBAcGFyYW0gc3RhdHMgLSBBZ2dyZWdhdGVkIFN0YXRzXHJcbiAgICAgKi9cclxuICAgIGhhbmRsZVZpZGVvU3RhdHMoc3RhdHMpIHtcclxuICAgICAgICB0aGlzLnBpeGVsU3RyZWFtaW5nLl9vblZpZGVvU3RhdHMoc3RhdHMpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBUbyBSZXNpemUgdGhlIFZpZGVvIFBsYXllciBlbGVtZW50XHJcbiAgICAgKi9cclxuICAgIHJlc2l6ZVBsYXllclN0eWxlKCkge1xyXG4gICAgICAgIHRoaXMudmlkZW9QbGF5ZXIucmVzaXplUGxheWVyU3R5bGUoKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogR2V0IHRoZSBvdmVycmlkZGVuIGRpc2Nvbm5lY3QgbWVzc2FnZVxyXG4gICAgICovXHJcbiAgICBnZXREaXNjb25uZWN0TWVzc2FnZU92ZXJyaWRlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRpc2Nvbm5lY3RNZXNzYWdlT3ZlcnJpZGU7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFNldCB0aGUgb3ZlcnJpZGUgZm9yIHRoZSBkaXNjb25uZWN0IG1lc3NhZ2VcclxuICAgICAqL1xyXG4gICAgc2V0RGlzY29ubmVjdE1lc3NhZ2VPdmVycmlkZShtZXNzYWdlKSB7XHJcbiAgICAgICAgdGhpcy5kaXNjb25uZWN0TWVzc2FnZU92ZXJyaWRlID0gbWVzc2FnZTtcclxuICAgIH1cclxuICAgIHNldFByZWZlcnJlZENvZGVjKGNvZGVjKSB7XHJcbiAgICAgICAgdGhpcy5wcmVmZXJyZWRDb2RlYyA9IGNvZGVjO1xyXG4gICAgICAgIGlmICh0aGlzLnBlZXJDb25uZWN0aW9uQ29udHJvbGxlcikge1xyXG4gICAgICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uQ29udHJvbGxlci5wcmVmZXJyZWRDb2RlYyA9IGNvZGVjO1xyXG4gICAgICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uQ29udHJvbGxlci51cGRhdGVDb2RlY1NlbGVjdGlvbiA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHNldFZpZGVvRW5jb2RlckF2Z1FQKGF2Z1FQKSB7XHJcbiAgICAgICAgdGhpcy52aWRlb0F2Z1FwID0gYXZnUVA7XHJcbiAgICAgICAgdGhpcy5waXhlbFN0cmVhbWluZy5fb25WaWRlb0VuY29kZXJBdmdRUCh0aGlzLnZpZGVvQXZnUXApO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBlbmFibGVzL2Rpc2FibGVzIGtleWJvYXJkIGV2ZW50IGxpc3RlbmVyc1xyXG4gICAgICovXHJcbiAgICBzZXRLZXlib2FyZElucHV0RW5hYmxlZChpc0VuYWJsZWQpIHtcclxuICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgKF9hID0gdGhpcy5rZXlib2FyZENvbnRyb2xsZXIpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS51bnJlZ2lzdGVyS2V5Qm9hcmRFdmVudHMoKTtcclxuICAgICAgICBpZiAoaXNFbmFibGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMua2V5Ym9hcmRDb250cm9sbGVyID0gdGhpcy5pbnB1dENsYXNzZXNGYWN0b3J5LnJlZ2lzdGVyS2V5Qm9hcmQodGhpcy5jb25maWcpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogZW5hYmxlcy9kaXNhYmxlcyBtb3VzZSBldmVudCBsaXN0ZW5lcnNcclxuICAgICAqL1xyXG4gICAgc2V0TW91c2VJbnB1dEVuYWJsZWQoaXNFbmFibGVkKSB7XHJcbiAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgIChfYSA9IHRoaXMubW91c2VDb250cm9sbGVyKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudW5yZWdpc3Rlck1vdXNlRXZlbnRzKCk7XHJcbiAgICAgICAgaWYgKGlzRW5hYmxlZCkge1xyXG4gICAgICAgICAgICBjb25zdCBtb3VzZU1vZGUgPSB0aGlzLmNvbmZpZy5pc0ZsYWdFbmFibGVkKF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMV9fLkZsYWdzLkhvdmVyaW5nTW91c2VNb2RlKVxyXG4gICAgICAgICAgICAgICAgPyBfQ29uZmlnX0NvbmZpZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTFfXy5Db250cm9sU2NoZW1lVHlwZS5Ib3ZlcmluZ01vdXNlXHJcbiAgICAgICAgICAgICAgICA6IF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMV9fLkNvbnRyb2xTY2hlbWVUeXBlLkxvY2tlZE1vdXNlO1xyXG4gICAgICAgICAgICB0aGlzLm1vdXNlQ29udHJvbGxlciA9XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlucHV0Q2xhc3Nlc0ZhY3RvcnkucmVnaXN0ZXJNb3VzZShtb3VzZU1vZGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogZW5hYmxlcy9kaXNhYmxlcyB0b3VjaCBldmVudCBsaXN0ZW5lcnNcclxuICAgICAqL1xyXG4gICAgc2V0VG91Y2hJbnB1dEVuYWJsZWQoaXNFbmFibGVkKSB7XHJcbiAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgIChfYSA9IHRoaXMudG91Y2hDb250cm9sbGVyKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudW5yZWdpc3RlclRvdWNoRXZlbnRzKCk7XHJcbiAgICAgICAgaWYgKGlzRW5hYmxlZCkge1xyXG4gICAgICAgICAgICB0aGlzLnRvdWNoQ29udHJvbGxlciA9IHRoaXMuaW5wdXRDbGFzc2VzRmFjdG9yeS5yZWdpc3RlclRvdWNoKHRoaXMuY29uZmlnLmlzRmxhZ0VuYWJsZWQoX0NvbmZpZ19Db25maWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzExX18uRmxhZ3MuRmFrZU1vdXNlV2l0aFRvdWNoZXMpLCB0aGlzLnZpZGVvRWxlbWVudFBhcmVudENsaWVudFJlY3QpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogZW5hYmxlcy9kaXNhYmxlcyBnYW1lIHBhZCBldmVudCBsaXN0ZW5lcnNcclxuICAgICAqL1xyXG4gICAgc2V0R2FtZVBhZElucHV0RW5hYmxlZChpc0VuYWJsZWQpIHtcclxuICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgKF9hID0gdGhpcy5nYW1lUGFkQ29udHJvbGxlcikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnVucmVnaXN0ZXJHYW1lUGFkRXZlbnRzKCk7XHJcbiAgICAgICAgaWYgKGlzRW5hYmxlZCkge1xyXG4gICAgICAgICAgICB0aGlzLmdhbWVQYWRDb250cm9sbGVyID0gdGhpcy5pbnB1dENsYXNzZXNGYWN0b3J5LnJlZ2lzdGVyR2FtZVBhZCgpO1xyXG4gICAgICAgICAgICB0aGlzLmdhbWVQYWRDb250cm9sbGVyLm9uR2FtZXBhZENvbm5lY3RlZCA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIudG9TdHJlYW1lckhhbmRsZXJzLmdldCgnR2FtZXBhZENvbm5lY3RlZCcpKCk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHRoaXMuZ2FtZVBhZENvbnRyb2xsZXIub25HYW1lcGFkRGlzY29ubmVjdGVkID0gKGNvbnRyb2xsZXJJZHgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RyZWFtTWVzc2FnZUNvbnRyb2xsZXIudG9TdHJlYW1lckhhbmRsZXJzLmdldCgnR2FtZXBhZERpc2Nvbm5lY3RlZCcpKFtjb250cm9sbGVySWR4XSk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmVnaXN0ZXJEYXRhQ2hhbm5lbEV2ZW50RW1pdHRlcnMoZGF0YUNoYW5uZWwpIHtcclxuICAgICAgICBkYXRhQ2hhbm5lbC5vbk9wZW4gPSAobGFiZWwsIGV2ZW50KSA9PiB0aGlzLnBpeGVsU3RyZWFtaW5nLmRpc3BhdGNoRXZlbnQobmV3IF9VdGlsX0V2ZW50RW1pdHRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTdfXy5EYXRhQ2hhbm5lbE9wZW5FdmVudCh7IGxhYmVsLCBldmVudCB9KSk7XHJcbiAgICAgICAgZGF0YUNoYW5uZWwub25DbG9zZSA9IChsYWJlbCwgZXZlbnQpID0+IHRoaXMucGl4ZWxTdHJlYW1pbmcuZGlzcGF0Y2hFdmVudChuZXcgX1V0aWxfRXZlbnRFbWl0dGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xN19fLkRhdGFDaGFubmVsQ2xvc2VFdmVudCh7IGxhYmVsLCBldmVudCB9KSk7XHJcbiAgICAgICAgZGF0YUNoYW5uZWwub25FcnJvciA9IChsYWJlbCwgZXZlbnQpID0+IHRoaXMucGl4ZWxTdHJlYW1pbmcuZGlzcGF0Y2hFdmVudChuZXcgX1V0aWxfRXZlbnRFbWl0dGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xN19fLkRhdGFDaGFubmVsRXJyb3JFdmVudCh7IGxhYmVsLCBldmVudCB9KSk7XHJcbiAgICB9XHJcbn1cclxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL1dlYlNvY2tldHMvTWVzc2FnZVJlY2VpdmUudHNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9XZWJTb2NrZXRzL01lc3NhZ2VSZWNlaXZlLnRzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiTWVzc2FnZUFuc3dlclwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBNZXNzYWdlQW5zd2VyKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJNZXNzYWdlQXV0aFJlcXVpcmVkXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIE1lc3NhZ2VBdXRoUmVxdWlyZWQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIk1lc3NhZ2VDb25maWdcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gTWVzc2FnZUNvbmZpZyksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiTWVzc2FnZUljZUNhbmRpZGF0ZVwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBNZXNzYWdlSWNlQ2FuZGlkYXRlKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJNZXNzYWdlT2ZmZXJcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gTWVzc2FnZU9mZmVyKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJNZXNzYWdlT25TY3JlZW5LZXlib2FyZFwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBNZXNzYWdlT25TY3JlZW5LZXlib2FyZCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiTWVzc2FnZVBlZXJEYXRhQ2hhbm5lbHNcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gTWVzc2FnZVBlZXJEYXRhQ2hhbm5lbHMpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIk1lc3NhZ2VQbGF5ZXJDb3VudFwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBNZXNzYWdlUGxheWVyQ291bnQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIk1lc3NhZ2VSZWN2XCI6ICgpID0+ICgvKiBiaW5kaW5nICovIE1lc3NhZ2VSZWN2KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJNZXNzYWdlUmVjdlR5cGVzXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIE1lc3NhZ2VSZWN2VHlwZXMpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIk1lc3NhZ2VTdHJlYW1lckxpc3RcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gTWVzc2FnZVN0cmVhbWVyTGlzdClcbi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pO1xuLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuLyoqXHJcbiAqIFRoZSBUeXBlcyBvZiBNZXNzYWdlcyB0aGF0IHdpbGwgYmUgcmVjZWl2ZWRcclxuICovXHJcbnZhciBNZXNzYWdlUmVjdlR5cGVzO1xyXG4oZnVuY3Rpb24gKE1lc3NhZ2VSZWN2VHlwZXMpIHtcclxuICAgIE1lc3NhZ2VSZWN2VHlwZXNbXCJDT05GSUdcIl0gPSBcImNvbmZpZ1wiO1xyXG4gICAgTWVzc2FnZVJlY3ZUeXBlc1tcIlNUUkVBTUVSX0xJU1RcIl0gPSBcInN0cmVhbWVyTGlzdFwiO1xyXG4gICAgTWVzc2FnZVJlY3ZUeXBlc1tcIlBMQVlFUl9DT1VOVFwiXSA9IFwicGxheWVyQ291bnRcIjtcclxuICAgIE1lc3NhZ2VSZWN2VHlwZXNbXCJPRkZFUlwiXSA9IFwib2ZmZXJcIjtcclxuICAgIE1lc3NhZ2VSZWN2VHlwZXNbXCJBTlNXRVJcIl0gPSBcImFuc3dlclwiO1xyXG4gICAgTWVzc2FnZVJlY3ZUeXBlc1tcIklDRV9DQU5ESURBVEVcIl0gPSBcImljZUNhbmRpZGF0ZVwiO1xyXG4gICAgTWVzc2FnZVJlY3ZUeXBlc1tcIlBFRVJfREFUQV9DSEFOTkVMU1wiXSA9IFwicGVlckRhdGFDaGFubmVsc1wiO1xyXG4gICAgTWVzc2FnZVJlY3ZUeXBlc1tcIlBJTkdcIl0gPSBcInBpbmdcIjtcclxuICAgIE1lc3NhZ2VSZWN2VHlwZXNbXCJXQVJOSU5HXCJdID0gXCJ3YXJuaW5nXCI7XHJcbn0pKE1lc3NhZ2VSZWN2VHlwZXMgfHwgKE1lc3NhZ2VSZWN2VHlwZXMgPSB7fSkpO1xyXG4vKipcclxuICogQ29uY3JldGUgUmVjZWl2ZWQgTWVzc2FnZSB3cmFwcGVyXHJcbiAqL1xyXG5jbGFzcyBNZXNzYWdlUmVjdiB7XHJcbn1cclxuLyoqXHJcbiAqIEF1dGhlbnRpY2F0aW9uIFJlcXVpcmVkIE1lc3NhZ2Ugd3JhcHBlclxyXG4gKi9cclxuY2xhc3MgTWVzc2FnZUF1dGhSZXF1aXJlZCBleHRlbmRzIE1lc3NhZ2VSZWN2IHtcclxufVxyXG4vKipcclxuICogQ29uZmlnIE1lc3NhZ2UgV3JhcHBlclxyXG4gKi9cclxuY2xhc3MgTWVzc2FnZUNvbmZpZyBleHRlbmRzIE1lc3NhZ2VSZWN2IHtcclxufVxyXG4vKipcclxuICogU3RyZWFtZXIgTGlzdCBNZXNzYWdlIFdyYXBwZXJcclxuICovXHJcbmNsYXNzIE1lc3NhZ2VTdHJlYW1lckxpc3QgZXh0ZW5kcyBNZXNzYWdlUmVjdiB7XHJcbn1cclxuLyoqXHJcbiAqIFBsYXllciBDb3VudCBNZXNzYWdlIHdyYXBwZXJcclxuICovXHJcbmNsYXNzIE1lc3NhZ2VQbGF5ZXJDb3VudCBleHRlbmRzIE1lc3NhZ2VSZWN2IHtcclxufVxyXG4vKipcclxuICogV2ViIFJUQyBvZmZlciBBbnN3ZXIgTWVzc2FnZSB3cmFwcGVyXHJcbiAqL1xyXG5jbGFzcyBNZXNzYWdlQW5zd2VyIGV4dGVuZHMgTWVzc2FnZVJlY3Yge1xyXG59XHJcbi8qKlxyXG4gKiBXZWJSVEMgc2RwIG9mZmVyIE1lc3NhZ2Ugd3JhcHBlci5cclxuICovXHJcbmNsYXNzIE1lc3NhZ2VPZmZlciBleHRlbmRzIE1lc3NhZ2VSZWN2IHtcclxufVxyXG4vKipcclxuICogSWNlIENhbmRpZGF0ZSBNZXNzYWdlIHdyYXBwZXJcclxuICovXHJcbmNsYXNzIE1lc3NhZ2VJY2VDYW5kaWRhdGUgZXh0ZW5kcyBNZXNzYWdlUmVjdiB7XHJcbn1cclxuLyoqXHJcbiAqIFBlZXIgRGF0YSBDaGFubmVscyBNZXNzYWdlIHdyYXBwZXJcclxuICovXHJcbmNsYXNzIE1lc3NhZ2VQZWVyRGF0YUNoYW5uZWxzIGV4dGVuZHMgTWVzc2FnZVJlY3Yge1xyXG59XHJcbmNsYXNzIE1lc3NhZ2VPblNjcmVlbktleWJvYXJkIHtcclxufVxyXG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvV2ViU29ja2V0cy9NZXNzYWdlU2VuZC50c1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL1dlYlNvY2tldHMvTWVzc2FnZVNlbmQudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJNZXNzYWdlSWNlQ2FuZGlkYXRlXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIE1lc3NhZ2VJY2VDYW5kaWRhdGUpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIk1lc3NhZ2VMaXN0U3RyZWFtZXJzXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIE1lc3NhZ2VMaXN0U3RyZWFtZXJzKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJNZXNzYWdlUG9uZ1wiOiAoKSA9PiAoLyogYmluZGluZyAqLyBNZXNzYWdlUG9uZyksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiTWVzc2FnZVNGVVJlY3ZEYXRhQ2hhbm5lbFJlYWR5XCI6ICgpID0+ICgvKiBiaW5kaW5nICovIE1lc3NhZ2VTRlVSZWN2RGF0YUNoYW5uZWxSZWFkeSksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiTWVzc2FnZVNlbmRcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gTWVzc2FnZVNlbmQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIk1lc3NhZ2VTZW5kVHlwZXNcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gTWVzc2FnZVNlbmRUeXBlcyksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiTWVzc2FnZVN1YnNjcmliZVwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBNZXNzYWdlU3Vic2NyaWJlKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJNZXNzYWdlVW5zdWJzY3JpYmVcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gTWVzc2FnZVVuc3Vic2NyaWJlKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJNZXNzYWdlV2ViUlRDQW5zd2VyXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIE1lc3NhZ2VXZWJSVENBbnN3ZXIpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIk1lc3NhZ2VXZWJSVENEYXRhY2hhbm5lbFJlcXVlc3RcIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gTWVzc2FnZVdlYlJUQ0RhdGFjaGFubmVsUmVxdWVzdCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiTWVzc2FnZVdlYlJUQ09mZmVyXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIE1lc3NhZ2VXZWJSVENPZmZlcilcbi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9Mb2dnZXIvTG9nZ2VyICovIFwiLi9zcmMvTG9nZ2VyL0xvZ2dlci50c1wiKTtcbi8vIENvcHlyaWdodCBFcGljIEdhbWVzLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcblxyXG4vKipcclxuICogVGhlIFNlbmQgVHlwZXMgdGhhdCBhcmUgcHVzaGVkIGZyb20gdGhlIHNpZ25hbGluZyBzZXJ2ZXJcclxuICovXHJcbnZhciBNZXNzYWdlU2VuZFR5cGVzO1xyXG4oZnVuY3Rpb24gKE1lc3NhZ2VTZW5kVHlwZXMpIHtcclxuICAgIE1lc3NhZ2VTZW5kVHlwZXNbXCJMSVNUX1NUUkVBTUVSU1wiXSA9IFwibGlzdFN0cmVhbWVyc1wiO1xyXG4gICAgTWVzc2FnZVNlbmRUeXBlc1tcIlNVQlNDUklCRVwiXSA9IFwic3Vic2NyaWJlXCI7XHJcbiAgICBNZXNzYWdlU2VuZFR5cGVzW1wiVU5TVUJTQ1JJQkVcIl0gPSBcInVuc3Vic2NyaWJlXCI7XHJcbiAgICBNZXNzYWdlU2VuZFR5cGVzW1wiSUNFX0NBTkRJREFURVwiXSA9IFwiaWNlQ2FuZGlkYXRlXCI7XHJcbiAgICBNZXNzYWdlU2VuZFR5cGVzW1wiT0ZGRVJcIl0gPSBcIm9mZmVyXCI7XHJcbiAgICBNZXNzYWdlU2VuZFR5cGVzW1wiQU5TV0VSXCJdID0gXCJhbnN3ZXJcIjtcclxuICAgIE1lc3NhZ2VTZW5kVHlwZXNbXCJEQVRBQ0hBTk5FTFJFUVVFU1RcIl0gPSBcImRhdGFDaGFubmVsUmVxdWVzdFwiO1xyXG4gICAgTWVzc2FnZVNlbmRUeXBlc1tcIlNGVVJFQ1ZEQVRBQ0hBTk5FTFJFQURZXCJdID0gXCJwZWVyRGF0YUNoYW5uZWxzUmVhZHlcIjtcclxuICAgIE1lc3NhZ2VTZW5kVHlwZXNbXCJQT05HXCJdID0gXCJwb25nXCI7XHJcbn0pKE1lc3NhZ2VTZW5kVHlwZXMgfHwgKE1lc3NhZ2VTZW5kVHlwZXMgPSB7fSkpO1xyXG4vKipcclxuICogQSBXcmFwcGVyIGZvciB0aGUgbWVzc2FnZSB0byBzZW5kIHRvIHRoZSBzaWduYWxpbmcgc2VydmVyXHJcbiAqL1xyXG5jbGFzcyBNZXNzYWdlU2VuZCB7XHJcbiAgICAvKipcclxuICAgICAqIFR1cm5zIHRoZSB3cmFwcGVyIGludG8gYSBKU09OIFN0cmluZ1xyXG4gICAgICogQHJldHVybnMgLSBKU09OIFN0cmluZyBvZiB0aGUgTWVzc2FnZSB0byBzZW5kXHJcbiAgICAgKi9cclxuICAgIHBheWxvYWQoKSB7XHJcbiAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ1NlbmRpbmcgPT4gXFxuJyArIEpTT04uc3RyaW5naWZ5KHRoaXMsIHVuZGVmaW5lZCwgNCksIDYpO1xyXG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzKTtcclxuICAgIH1cclxufVxyXG5jbGFzcyBNZXNzYWdlTGlzdFN0cmVhbWVycyBleHRlbmRzIE1lc3NhZ2VTZW5kIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgdGhpcy50eXBlID0gTWVzc2FnZVNlbmRUeXBlcy5MSVNUX1NUUkVBTUVSUztcclxuICAgIH1cclxufVxyXG5jbGFzcyBNZXNzYWdlU3Vic2NyaWJlIGV4dGVuZHMgTWVzc2FnZVNlbmQge1xyXG4gICAgY29uc3RydWN0b3Ioc3RyZWFtZXJpZCkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgdGhpcy50eXBlID0gTWVzc2FnZVNlbmRUeXBlcy5TVUJTQ1JJQkU7XHJcbiAgICAgICAgdGhpcy5zdHJlYW1lcklkID0gc3RyZWFtZXJpZDtcclxuICAgIH1cclxufVxyXG5jbGFzcyBNZXNzYWdlVW5zdWJzY3JpYmUgZXh0ZW5kcyBNZXNzYWdlU2VuZCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIHRoaXMudHlwZSA9IE1lc3NhZ2VTZW5kVHlwZXMuVU5TVUJTQ1JJQkU7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIEluc3RhbmNlIFJlcXVlc3QgTWVzc2FnZSBXcmFwcGVyXHJcbiAqL1xyXG5jbGFzcyBNZXNzYWdlUG9uZyBleHRlbmRzIE1lc3NhZ2VTZW5kIHtcclxuICAgIGNvbnN0cnVjdG9yKHRpbWUpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIHRoaXMudHlwZSA9IE1lc3NhZ2VTZW5kVHlwZXMuUE9ORztcclxuICAgICAgICB0aGlzLnRpbWUgPSB0aW1lO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiAgV2ViIFJUQyBPZmZlciBtZXNzYWdlIHdyYXBwZXJcclxuICovXHJcbmNsYXNzIE1lc3NhZ2VXZWJSVENPZmZlciBleHRlbmRzIE1lc3NhZ2VTZW5kIHtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIG9mZmVyIC0gR2VuZXJhdGVkIFdlYiBSVEMgT2ZmZXJcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3Iob2ZmZXIpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIHRoaXMudHlwZSA9IE1lc3NhZ2VTZW5kVHlwZXMuT0ZGRVI7XHJcbiAgICAgICAgaWYgKG9mZmVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMudHlwZSA9IG9mZmVyLnR5cGU7XHJcbiAgICAgICAgICAgIHRoaXMuc2RwID0gb2ZmZXIuc2RwO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4vKipcclxuICogIFdlYiBSVEMgQW5zd2VyIG1lc3NhZ2Ugd3JhcHBlclxyXG4gKi9cclxuY2xhc3MgTWVzc2FnZVdlYlJUQ0Fuc3dlciBleHRlbmRzIE1lc3NhZ2VTZW5kIHtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIGFuc3dlciAtIEdlbmVyYXRlZCBXZWIgUlRDIE9mZmVyXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKGFuc3dlcikge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgdGhpcy50eXBlID0gTWVzc2FnZVNlbmRUeXBlcy5BTlNXRVI7XHJcbiAgICAgICAgaWYgKGFuc3dlcikge1xyXG4gICAgICAgICAgICB0aGlzLnR5cGUgPSBhbnN3ZXIudHlwZTtcclxuICAgICAgICAgICAgdGhpcy5zZHAgPSBhbnN3ZXIuc2RwO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4vKipcclxuICogIFdlYiBSVEMgRGF0YSBjaGFubmVsIHJlcXVlc3QgbWVzc2FnZSB3cmFwcGVyXHJcbiAqL1xyXG5jbGFzcyBNZXNzYWdlV2ViUlRDRGF0YWNoYW5uZWxSZXF1ZXN0IGV4dGVuZHMgTWVzc2FnZVNlbmQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB0aGlzLnR5cGUgPSBNZXNzYWdlU2VuZFR5cGVzLkRBVEFDSEFOTkVMUkVRVUVTVDtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogIFdlYiBSVEMgU0ZVIERhdGEgY2hhbm5lbCByZWFkeSBtZXNzYWdlIHdyYXBwZXJcclxuICovXHJcbmNsYXNzIE1lc3NhZ2VTRlVSZWN2RGF0YUNoYW5uZWxSZWFkeSBleHRlbmRzIE1lc3NhZ2VTZW5kIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgdGhpcy50eXBlID0gTWVzc2FnZVNlbmRUeXBlcy5TRlVSRUNWREFUQUNIQU5ORUxSRUFEWTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogUlRDIEljZSBDYW5kaWRhdGUgV3JhcHBlclxyXG4gKi9cclxuY2xhc3MgTWVzc2FnZUljZUNhbmRpZGF0ZSB7XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSBjYW5kaWRhdGUgLSBSVEMgSWNlIENhbmRpZGF0ZVxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihjYW5kaWRhdGUpIHtcclxuICAgICAgICB0aGlzLnR5cGUgPSBNZXNzYWdlU2VuZFR5cGVzLklDRV9DQU5ESURBVEU7XHJcbiAgICAgICAgdGhpcy5jYW5kaWRhdGUgPSBjYW5kaWRhdGU7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFR1cm5zIHRoZSB3cmFwcGVyIGludG8gYSBKU09OIFN0cmluZ1xyXG4gICAgICogQHJldHVybnMgLSBKU09OIFN0cmluZyBvZiB0aGUgTWVzc2FnZSB0byBzZW5kXHJcbiAgICAgKi9cclxuICAgIHBheWxvYWQoKSB7XHJcbiAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ1NlbmRpbmcgPT4gXFxuJyArIEpTT04uc3RyaW5naWZ5KHRoaXMsIHVuZGVmaW5lZCwgNCksIDYpO1xyXG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzKTtcclxuICAgIH1cclxufVxyXG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvV2ViU29ja2V0cy9TaWduYWxsaW5nUHJvdG9jb2wudHNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvV2ViU29ja2V0cy9TaWduYWxsaW5nUHJvdG9jb2wudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiU2lnbmFsbGluZ1Byb3RvY29sXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIFNpZ25hbGxpbmdQcm90b2NvbClcbi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9Mb2dnZXIvTG9nZ2VyICovIFwiLi9zcmMvTG9nZ2VyL0xvZ2dlci50c1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfTWVzc2FnZVJlY2VpdmVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vTWVzc2FnZVJlY2VpdmUgKi8gXCIuL3NyYy9XZWJTb2NrZXRzL01lc3NhZ2VSZWNlaXZlLnRzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9NZXNzYWdlU2VuZF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9NZXNzYWdlU2VuZCAqLyBcIi4vc3JjL1dlYlNvY2tldHMvTWVzc2FnZVNlbmQudHNcIik7XG4vLyBDb3B5cmlnaHQgRXBpYyBHYW1lcywgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG5cclxuXHJcblxyXG4vKipcclxuICogU2lnbmFsbGluZyBwcm90b2NvbCBmb3IgaGFuZGxpbmcgbWVzc2FnZXMgZnJvbSB0aGUgc2lnbmFsbGluZyBzZXJ2ZXIuXHJcbiAqL1xyXG5jbGFzcyBTaWduYWxsaW5nUHJvdG9jb2wge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5Gcm9tVUVNZXNzYWdlSGFuZGxlcnMgPSBuZXcgTWFwKCk7XHJcbiAgICB9XHJcbiAgICBhZGRNZXNzYWdlSGFuZGxlcihtZXNzYWdlSWQsIG1lc3NhZ2VIYW5kbGVyKSB7XHJcbiAgICAgICAgdGhpcy5Gcm9tVUVNZXNzYWdlSGFuZGxlcnMuc2V0KG1lc3NhZ2VJZCwgbWVzc2FnZUhhbmRsZXIpO1xyXG4gICAgfVxyXG4gICAgaGFuZGxlTWVzc2FnZShtZXNzYWdlSWQsIG1lc3NhZ2VEYXRhKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuRnJvbVVFTWVzc2FnZUhhbmRsZXJzLmhhcyhtZXNzYWdlSWQpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuRnJvbVVFTWVzc2FnZUhhbmRsZXJzLmdldChtZXNzYWdlSWQpKG1lc3NhZ2VEYXRhKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uTG9nZ2VyLkVycm9yKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgYE1lc3NhZ2UgdHlwZSBvZiAke21lc3NhZ2VJZH0gZG9lcyBub3QgaGF2ZSBhIG1lc3NhZ2UgaGFuZGxlciByZWdpc3RlcmVkIG9uIHRoZSBmcm9udGVuZCAtIGlnbm9yaW5nIG1lc3NhZ2UuYCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXR1cCBhbnkgZGVmYXVsdCBzaWduYWxsaW5nIG1lc3NhZ2UgaGFuZGxpbmcsIHRoZXNlIGNhbiBiZSBvdmVycmlkZGVuIG9yIGFkZGl0aW9uYWwgaGFuZGxlcnMgYWRkZWQgd2l0aCBgYWRkTWVzc2FnZUhhbmRsZXJgLlxyXG4gICAgICogQHBhcmFtIHdlYnNvY2tldENvbnRyb2xsZXIgVGhlIGNvbnRyb2xsZXIgdG8gc2V0dXAgdGhlc2UgaGFuZGxlcnMgb24uXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBzZXR1cERlZmF1bHRIYW5kbGVycyh3ZWJzb2NrZXRDb250cm9sbGVyKSB7XHJcbiAgICAgICAgLy8gUElOR1xyXG4gICAgICAgIHdlYnNvY2tldENvbnRyb2xsZXIuc2lnbmFsbGluZ1Byb3RvY29sLmFkZE1lc3NhZ2VIYW5kbGVyKF9NZXNzYWdlUmVjZWl2ZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLk1lc3NhZ2VSZWN2VHlwZXMuUElORywgKHBpbmdQYXlsb2FkKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIHNlbmQgb3VyIHBvbmcgcGF5bG9hZCBiYWNrIHRvIHRoZSBzaWduYWxsaW5nIHNlcnZlclxyXG4gICAgICAgICAgICBjb25zdCBwb25nUGF5bG9hZCA9IG5ldyBfTWVzc2FnZVNlbmRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5NZXNzYWdlUG9uZyhuZXcgRGF0ZSgpLmdldFRpbWUoKSkucGF5bG9hZCgpO1xyXG4gICAgICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBfTWVzc2FnZVJlY2VpdmVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5NZXNzYWdlUmVjdlR5cGVzLlBJTkcgKyAnOiAnICsgcGluZ1BheWxvYWQsIDYpO1xyXG4gICAgICAgICAgICB3ZWJzb2NrZXRDb250cm9sbGVyLndlYlNvY2tldC5zZW5kKHBvbmdQYXlsb2FkKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyBDT05GSUdcclxuICAgICAgICB3ZWJzb2NrZXRDb250cm9sbGVyLnNpZ25hbGxpbmdQcm90b2NvbC5hZGRNZXNzYWdlSGFuZGxlcihfTWVzc2FnZVJlY2VpdmVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5NZXNzYWdlUmVjdlR5cGVzLkNPTkZJRywgKGNvbmZpZ1BheWxvYWQpID0+IHtcclxuICAgICAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgX01lc3NhZ2VSZWNlaXZlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uTWVzc2FnZVJlY3ZUeXBlcy5DT05GSUcsIDYpO1xyXG4gICAgICAgICAgICBjb25zdCBjb25maWcgPSBKU09OLnBhcnNlKGNvbmZpZ1BheWxvYWQpO1xyXG4gICAgICAgICAgICB3ZWJzb2NrZXRDb250cm9sbGVyLm9uQ29uZmlnKGNvbmZpZyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy8gU1RSRUFNRVJfTElTVFxyXG4gICAgICAgIHdlYnNvY2tldENvbnRyb2xsZXIuc2lnbmFsbGluZ1Byb3RvY29sLmFkZE1lc3NhZ2VIYW5kbGVyKF9NZXNzYWdlUmVjZWl2ZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLk1lc3NhZ2VSZWN2VHlwZXMuU1RSRUFNRVJfTElTVCwgKGxpc3RQYXlsb2FkKSA9PiB7XHJcbiAgICAgICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksIF9NZXNzYWdlUmVjZWl2ZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLk1lc3NhZ2VSZWN2VHlwZXMuU1RSRUFNRVJfTElTVCwgNik7XHJcbiAgICAgICAgICAgIGNvbnN0IHN0cmVhbWVyTGlzdCA9IEpTT04ucGFyc2UobGlzdFBheWxvYWQpO1xyXG4gICAgICAgICAgICB3ZWJzb2NrZXRDb250cm9sbGVyLm9uU3RyZWFtZXJMaXN0KHN0cmVhbWVyTGlzdCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy8gUExBWUVSX0NPVU5UXHJcbiAgICAgICAgd2Vic29ja2V0Q29udHJvbGxlci5zaWduYWxsaW5nUHJvdG9jb2wuYWRkTWVzc2FnZUhhbmRsZXIoX01lc3NhZ2VSZWNlaXZlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uTWVzc2FnZVJlY3ZUeXBlcy5QTEFZRVJfQ09VTlQsIChwbGF5ZXJDb3VudFBheWxvYWQpID0+IHtcclxuICAgICAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgX01lc3NhZ2VSZWNlaXZlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uTWVzc2FnZVJlY3ZUeXBlcy5QTEFZRVJfQ09VTlQsIDYpO1xyXG4gICAgICAgICAgICBjb25zdCBwbGF5ZXJDb3VudCA9IEpTT04ucGFyc2UocGxheWVyQ291bnRQYXlsb2FkKTtcclxuICAgICAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ1BsYXllciBDb3VudDogJyArIHBsYXllckNvdW50LmNvdW50LCA2KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyBBTlNXRVJcclxuICAgICAgICB3ZWJzb2NrZXRDb250cm9sbGVyLnNpZ25hbGxpbmdQcm90b2NvbC5hZGRNZXNzYWdlSGFuZGxlcihfTWVzc2FnZVJlY2VpdmVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5NZXNzYWdlUmVjdlR5cGVzLkFOU1dFUiwgKGFuc3dlclBheWxvYWQpID0+IHtcclxuICAgICAgICAgICAgLy8gc2VuZCBvdXIgcG9uZyBwYXlsb2FkIGJhY2sgdG8gdGhlIHNpZ25hbGxpbmcgc2VydmVyXHJcbiAgICAgICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksIF9NZXNzYWdlUmVjZWl2ZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLk1lc3NhZ2VSZWN2VHlwZXMuQU5TV0VSLCA2KTtcclxuICAgICAgICAgICAgY29uc3QgYW5zd2VyID0gSlNPTi5wYXJzZShhbnN3ZXJQYXlsb2FkKTtcclxuICAgICAgICAgICAgd2Vic29ja2V0Q29udHJvbGxlci5vbldlYlJ0Y0Fuc3dlcihhbnN3ZXIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8vIE9GRkVSXHJcbiAgICAgICAgd2Vic29ja2V0Q29udHJvbGxlci5zaWduYWxsaW5nUHJvdG9jb2wuYWRkTWVzc2FnZUhhbmRsZXIoX01lc3NhZ2VSZWNlaXZlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uTWVzc2FnZVJlY3ZUeXBlcy5PRkZFUiwgKG9mZmVyUGF5bG9hZCkgPT4ge1xyXG4gICAgICAgICAgICAvLyBzZW5kIG91ciBwb25nIHBheWxvYWQgYmFjayB0byB0aGUgc2lnbmFsbGluZyBzZXJ2ZXJcclxuICAgICAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgX01lc3NhZ2VSZWNlaXZlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uTWVzc2FnZVJlY3ZUeXBlcy5PRkZFUiwgNik7XHJcbiAgICAgICAgICAgIGNvbnN0IG9mZmVyID0gSlNPTi5wYXJzZShvZmZlclBheWxvYWQpO1xyXG4gICAgICAgICAgICB3ZWJzb2NrZXRDb250cm9sbGVyLm9uV2ViUnRjT2ZmZXIob2ZmZXIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8vIElDRSBDQU5ESURBVEVcclxuICAgICAgICB3ZWJzb2NrZXRDb250cm9sbGVyLnNpZ25hbGxpbmdQcm90b2NvbC5hZGRNZXNzYWdlSGFuZGxlcihfTWVzc2FnZVJlY2VpdmVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5NZXNzYWdlUmVjdlR5cGVzLklDRV9DQU5ESURBVEUsIChpY2VDYW5kaWRhdGVQYXlsb2FkKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIHNlbmQgb3VyIHBvbmcgcGF5bG9hZCBiYWNrIHRvIHRoZSBzaWduYWxsaW5nIHNlcnZlclxyXG4gICAgICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBfTWVzc2FnZVJlY2VpdmVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5NZXNzYWdlUmVjdlR5cGVzLklDRV9DQU5ESURBVEUsIDYpO1xyXG4gICAgICAgICAgICBjb25zdCBpY2VDYW5kaWRhdGUgPSBKU09OLnBhcnNlKGljZUNhbmRpZGF0ZVBheWxvYWQpO1xyXG4gICAgICAgICAgICB3ZWJzb2NrZXRDb250cm9sbGVyLm9uSWNlQ2FuZGlkYXRlKGljZUNhbmRpZGF0ZS5jYW5kaWRhdGUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8vIFdBUk5JTkdcclxuICAgICAgICB3ZWJzb2NrZXRDb250cm9sbGVyLnNpZ25hbGxpbmdQcm90b2NvbC5hZGRNZXNzYWdlSGFuZGxlcihfTWVzc2FnZVJlY2VpdmVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5NZXNzYWdlUmVjdlR5cGVzLldBUk5JTkcsICh3YXJuaW5nUGF5bG9hZCkgPT4ge1xyXG4gICAgICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkxvZ2dlci5XYXJuaW5nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgYFdhcm5pbmcgcmVjZWl2ZWQ6ICR7d2FybmluZ1BheWxvYWR9YCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy8gUEVFUiBEQVRBIENIQU5ORUxTXHJcbiAgICAgICAgd2Vic29ja2V0Q29udHJvbGxlci5zaWduYWxsaW5nUHJvdG9jb2wuYWRkTWVzc2FnZUhhbmRsZXIoX01lc3NhZ2VSZWNlaXZlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uTWVzc2FnZVJlY3ZUeXBlcy5QRUVSX0RBVEFfQ0hBTk5FTFMsIChwZWVyRGF0YUNoYW5uZWxzUGF5bG9hZCkgPT4ge1xyXG4gICAgICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCBfTWVzc2FnZVJlY2VpdmVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5NZXNzYWdlUmVjdlR5cGVzLlBFRVJfREFUQV9DSEFOTkVMUywgNik7XHJcbiAgICAgICAgICAgIGNvbnN0IHBlZXJEYXRhQ2hhbm5lbHMgPSBKU09OLnBhcnNlKHBlZXJEYXRhQ2hhbm5lbHNQYXlsb2FkKTtcclxuICAgICAgICAgICAgd2Vic29ja2V0Q29udHJvbGxlci5vbldlYlJ0Y1BlZXJEYXRhQ2hhbm5lbHMocGVlckRhdGFDaGFubmVscyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL1dlYlNvY2tldHMvV2ViU29ja2V0Q29udHJvbGxlci50c1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvV2ViU29ja2V0cy9XZWJTb2NrZXRDb250cm9sbGVyLnRzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJXZWJTb2NrZXRDb250cm9sbGVyXCI6ICgpID0+ICgvKiBiaW5kaW5nICovIFdlYlNvY2tldENvbnRyb2xsZXIpXG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vTG9nZ2VyL0xvZ2dlciAqLyBcIi4vc3JjL0xvZ2dlci9Mb2dnZXIudHNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX01lc3NhZ2VTZW5kX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL01lc3NhZ2VTZW5kICovIFwiLi9zcmMvV2ViU29ja2V0cy9NZXNzYWdlU2VuZC50c1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfU2lnbmFsbGluZ1Byb3RvY29sX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL1NpZ25hbGxpbmdQcm90b2NvbCAqLyBcIi4vc3JjL1dlYlNvY2tldHMvU2lnbmFsbGluZ1Byb3RvY29sLnRzXCIpO1xuLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFRoZSBjb250cm9sbGVyIGZvciB0aGUgV2ViU29ja2V0IGFuZCBhbGwgYXNzb2NpYXRlZCBtZXRob2RzXHJcbiAqL1xyXG5jbGFzcyBXZWJTb2NrZXRDb250cm9sbGVyIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuV1NfT1BFTl9TVEFURSA9IDE7XHJcbiAgICAgICAgdGhpcy5vbk9wZW4gPSBuZXcgRXZlbnRUYXJnZXQoKTtcclxuICAgICAgICB0aGlzLm9uQ2xvc2UgPSBuZXcgRXZlbnRUYXJnZXQoKTtcclxuICAgICAgICB0aGlzLnNpZ25hbGxpbmdQcm90b2NvbCA9IG5ldyBfU2lnbmFsbGluZ1Byb3RvY29sX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uU2lnbmFsbGluZ1Byb3RvY29sKCk7XHJcbiAgICAgICAgX1NpZ25hbGxpbmdQcm90b2NvbF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLlNpZ25hbGxpbmdQcm90b2NvbC5zZXR1cERlZmF1bHRIYW5kbGVycyh0aGlzKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ29ubmVjdCB0byB0aGUgc2lnbmFsaW5nIHNlcnZlclxyXG4gICAgICogQHBhcmFtIGNvbm5lY3Rpb25VUkwgLSBUaGUgQWRkcmVzcyBvZiB0aGUgc2lnbmFsaW5nIHNlcnZlclxyXG4gICAgICogQHJldHVybnMgLSBJZiB0aGVyZSBpcyBhIGNvbm5lY3Rpb25cclxuICAgICAqL1xyXG4gICAgY29ubmVjdChjb25uZWN0aW9uVVJMKSB7XHJcbiAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgY29ubmVjdGlvblVSTCwgNik7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgdGhpcy53ZWJTb2NrZXQgPSBuZXcgV2ViU29ja2V0KGNvbm5lY3Rpb25VUkwpO1xyXG4gICAgICAgICAgICB0aGlzLndlYlNvY2tldC5vbm9wZW4gPSAoZXZlbnQpID0+IHRoaXMuaGFuZGxlT25PcGVuKGV2ZW50KTtcclxuICAgICAgICAgICAgdGhpcy53ZWJTb2NrZXQub25lcnJvciA9ICgpID0+IHRoaXMuaGFuZGxlT25FcnJvcigpO1xyXG4gICAgICAgICAgICB0aGlzLndlYlNvY2tldC5vbmNsb3NlID0gKGV2ZW50KSA9PiB0aGlzLmhhbmRsZU9uQ2xvc2UoZXZlbnQpO1xyXG4gICAgICAgICAgICB0aGlzLndlYlNvY2tldC5vbm1lc3NhZ2UgPSAoZXZlbnQpID0+IHRoaXMuaGFuZGxlT25NZXNzYWdlKGV2ZW50KTtcclxuICAgICAgICAgICAgdGhpcy53ZWJTb2NrZXQub25tZXNzYWdlYmluYXJ5ID0gKGV2ZW50KSA9PiB0aGlzLmhhbmRsZU9uTWVzc2FnZUJpbmFyeShldmVudCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5Mb2dnZXIuRXJyb3IoZXJyb3IsIGVycm9yKTtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogSGFuZGxlcyB3aGF0IGhhcHBlbnMgd2hlbiBhIG1lc3NhZ2UgaXMgcmVjZWl2ZWQgaW4gYmluYXJ5IGZvcm1cclxuICAgICAqIEBwYXJhbSBldmVudCAtIE1lc3NhZ2UgUmVjZWl2ZWRcclxuICAgICAqL1xyXG4gICAgaGFuZGxlT25NZXNzYWdlQmluYXJ5KGV2ZW50KSB7XHJcbiAgICAgICAgLy8gaWYgdGhlIGV2ZW50IGlzIGVtcHR5IHJldHVyblxyXG4gICAgICAgIGlmICghZXZlbnQgfHwgIWV2ZW50LmRhdGEpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBoYW5kbGUgdGhlIGJpbmFyeSBhbmQgdGhlbiBoYW5kbGUgdGhlIG1lc3NhZ2VcclxuICAgICAgICBldmVudC5kYXRhXHJcbiAgICAgICAgICAgIC50ZXh0KClcclxuICAgICAgICAgICAgLnRoZW4oKG1lc3NhZ2VTdHJpbmcpID0+IHtcclxuICAgICAgICAgICAgLy8gYnVpbGQgYSBuZXcgbWVzc2FnZVxyXG4gICAgICAgICAgICBjb25zdCBjb25zdHJ1Y3RlZE1lc3NhZ2UgPSBuZXcgTWVzc2FnZUV2ZW50KCdtZXNzYWdlRnJvbUJpbmFyeScsIHtcclxuICAgICAgICAgICAgICAgIGRhdGE6IG1lc3NhZ2VTdHJpbmdcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIC8vIHNlbmQgdGhlIG5ldyBzdHJpbmdpZmllZCBldmVudCBiYWNrIGludG8gYG9ubWVzc2FnZWBcclxuICAgICAgICAgICAgdGhpcy5oYW5kbGVPbk1lc3NhZ2UoY29uc3RydWN0ZWRNZXNzYWdlKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XHJcbiAgICAgICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uTG9nZ2VyLkVycm9yKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgYEZhaWxlZCB0byBwYXJzZSBiaW5hcnkgYmxvYiBmcm9tIHdlYnNvY2tldCwgcmVhc29uOiAke2Vycm9yfWApO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBIYW5kbGVzIHdoYXQgaGFwcGVucyB3aGVuIGEgbWVzc2FnZSBpcyByZWNlaXZlZFxyXG4gICAgICogQHBhcmFtIGV2ZW50IC0gTWVzc2FnZSBSZWNlaXZlZFxyXG4gICAgICovXHJcbiAgICBoYW5kbGVPbk1lc3NhZ2UoZXZlbnQpIHtcclxuICAgICAgICAvLyBDaGVjayBpZiB3ZWJzb2NrZXQgbWVzc2FnZSBpcyBiaW5hcnksIGlmIHNvLCBzdHJpbmdpZnkgaXQuXHJcbiAgICAgICAgaWYgKGV2ZW50LmRhdGEgJiYgZXZlbnQuZGF0YSBpbnN0YW5jZW9mIEJsb2IpIHtcclxuICAgICAgICAgICAgdGhpcy5oYW5kbGVPbk1lc3NhZ2VCaW5hcnkoZXZlbnQpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBKU09OLnBhcnNlKGV2ZW50LmRhdGEpO1xyXG4gICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uTG9nZ2VyLkxvZyhfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLkxvZ2dlci5HZXRTdGFja1RyYWNlKCksICdyZWNlaXZlZCA9PiBcXG4nICtcclxuICAgICAgICAgICAgSlNPTi5zdHJpbmdpZnkoSlNPTi5wYXJzZShldmVudC5kYXRhKSwgdW5kZWZpbmVkLCA0KSwgNik7XHJcbiAgICAgICAgLy8gU2VuZCB0byBvdXIgc2lnbmFsbGluZyBwcm90b2NvbCB0byBoYW5kbGUgdGhlIGluY29taW5nIG1lc3NhZ2VcclxuICAgICAgICB0aGlzLnNpZ25hbGxpbmdQcm90b2NvbC5oYW5kbGVNZXNzYWdlKG1lc3NhZ2UudHlwZSwgZXZlbnQuZGF0YSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEhhbmRsZXMgd2hlbiB0aGUgV2Vic29ja2V0IGlzIG9wZW5lZFxyXG4gICAgICogQHBhcmFtIGV2ZW50IC0gTm90IFVzZWRcclxuICAgICAqL1xyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xyXG4gICAgaGFuZGxlT25PcGVuKGV2ZW50KSB7XHJcbiAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ0Nvbm5lY3RlZCB0byB0aGUgc2lnbmFsbGluZyBzZXJ2ZXIgdmlhIFdlYlNvY2tldCcsIDYpO1xyXG4gICAgICAgIHRoaXMub25PcGVuLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCdvcGVuJykpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBIYW5kbGVzIHdoZW4gdGhlcmUgaXMgYW4gZXJyb3Igb24gdGhlIHdlYnNvY2tldFxyXG4gICAgICogQHBhcmFtIGV2ZW50IC0gRXJyb3IgUGF5bG9hZFxyXG4gICAgICovXHJcbiAgICBoYW5kbGVPbkVycm9yKCkge1xyXG4gICAgICAgIF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uTG9nZ2VyLkVycm9yKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ1dlYlNvY2tldCBlcnJvcicpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBIYW5kbGVzIHdoZW4gdGhlIFdlYnNvY2tldCBpcyBjbG9zZWRcclxuICAgICAqIEBwYXJhbSBldmVudCAtIENsb3NlIEV2ZW50XHJcbiAgICAgKi9cclxuICAgIGhhbmRsZU9uQ2xvc2UoZXZlbnQpIHtcclxuICAgICAgICB0aGlzLm9uV2ViU29ja2V0T25jbG9zZU92ZXJsYXlNZXNzYWdlKGV2ZW50KTtcclxuICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnRGlzY29ubmVjdGVkIHRvIHRoZSBzaWduYWxsaW5nIHNlcnZlciB2aWEgV2ViU29ja2V0OiAnICtcclxuICAgICAgICAgICAgSlNPTi5zdHJpbmdpZnkoZXZlbnQuY29kZSkgK1xyXG4gICAgICAgICAgICAnIC0gJyArXHJcbiAgICAgICAgICAgIGV2ZW50LnJlYXNvbik7XHJcbiAgICAgICAgdGhpcy5vbkNsb3NlLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCdjbG9zZScpKTtcclxuICAgIH1cclxuICAgIHJlcXVlc3RTdHJlYW1lckxpc3QoKSB7XHJcbiAgICAgICAgY29uc3QgcGF5bG9hZCA9IG5ldyBfTWVzc2FnZVNlbmRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5NZXNzYWdlTGlzdFN0cmVhbWVycygpO1xyXG4gICAgICAgIHRoaXMud2ViU29ja2V0LnNlbmQocGF5bG9hZC5wYXlsb2FkKCkpO1xyXG4gICAgfVxyXG4gICAgc2VuZFN1YnNjcmliZShzdHJlYW1lcmlkKSB7XHJcbiAgICAgICAgY29uc3QgcGF5bG9hZCA9IG5ldyBfTWVzc2FnZVNlbmRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5NZXNzYWdlU3Vic2NyaWJlKHN0cmVhbWVyaWQpO1xyXG4gICAgICAgIHRoaXMud2ViU29ja2V0LnNlbmQocGF5bG9hZC5wYXlsb2FkKCkpO1xyXG4gICAgfVxyXG4gICAgc2VuZFVuc3Vic2NyaWJlKCkge1xyXG4gICAgICAgIGNvbnN0IHBheWxvYWQgPSBuZXcgX01lc3NhZ2VTZW5kX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18uTWVzc2FnZVVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgdGhpcy53ZWJTb2NrZXQuc2VuZChwYXlsb2FkLnBheWxvYWQoKSk7XHJcbiAgICB9XHJcbiAgICBzZW5kV2ViUnRjT2ZmZXIob2ZmZXIpIHtcclxuICAgICAgICBjb25zdCBwYXlsb2FkID0gbmV3IF9NZXNzYWdlU2VuZF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLk1lc3NhZ2VXZWJSVENPZmZlcihvZmZlcik7XHJcbiAgICAgICAgdGhpcy53ZWJTb2NrZXQuc2VuZChwYXlsb2FkLnBheWxvYWQoKSk7XHJcbiAgICB9XHJcbiAgICBzZW5kV2ViUnRjQW5zd2VyKGFuc3dlcikge1xyXG4gICAgICAgIGNvbnN0IHBheWxvYWQgPSBuZXcgX01lc3NhZ2VTZW5kX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18uTWVzc2FnZVdlYlJUQ0Fuc3dlcihhbnN3ZXIpO1xyXG4gICAgICAgIHRoaXMud2ViU29ja2V0LnNlbmQocGF5bG9hZC5wYXlsb2FkKCkpO1xyXG4gICAgfVxyXG4gICAgc2VuZFdlYlJ0Y0RhdGFjaGFubmVsUmVxdWVzdCgpIHtcclxuICAgICAgICBjb25zdCBwYXlsb2FkID0gbmV3IF9NZXNzYWdlU2VuZF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLk1lc3NhZ2VXZWJSVENEYXRhY2hhbm5lbFJlcXVlc3QoKTtcclxuICAgICAgICB0aGlzLndlYlNvY2tldC5zZW5kKHBheWxvYWQucGF5bG9hZCgpKTtcclxuICAgIH1cclxuICAgIHNlbmRTRlVSZWN2RGF0YUNoYW5uZWxSZWFkeSgpIHtcclxuICAgICAgICBjb25zdCBwYXlsb2FkID0gbmV3IF9NZXNzYWdlU2VuZF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLk1lc3NhZ2VTRlVSZWN2RGF0YUNoYW5uZWxSZWFkeSgpO1xyXG4gICAgICAgIHRoaXMud2ViU29ja2V0LnNlbmQocGF5bG9hZC5wYXlsb2FkKCkpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTZW5kcyBhbiBSVEMgSWNlIENhbmRpZGF0ZSB0byB0aGUgU2VydmVyXHJcbiAgICAgKiBAcGFyYW0gY2FuZGlkYXRlIC0gUlRDIEljZSBDYW5kaWRhdGVcclxuICAgICAqL1xyXG4gICAgc2VuZEljZUNhbmRpZGF0ZShjYW5kaWRhdGUpIHtcclxuICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnU2VuZGluZyBJY2UgQ2FuZGlkYXRlJyk7XHJcbiAgICAgICAgaWYgKHRoaXMud2ViU29ja2V0ICYmXHJcbiAgICAgICAgICAgIHRoaXMud2ViU29ja2V0LnJlYWR5U3RhdGUgPT09IHRoaXMuV1NfT1BFTl9TVEFURSkge1xyXG4gICAgICAgICAgICAvL3dzLnNlbmQoSlNPTi5zdHJpbmdpZnkoeyB0eXBlOiAnaWNlQ2FuZGlkYXRlJywgY2FuZGlkYXRlOiBjYW5kaWRhdGUgfSkpO1xyXG4gICAgICAgICAgICBjb25zdCBJY2VDYW5kaWRhdGUgPSBuZXcgX01lc3NhZ2VTZW5kX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18uTWVzc2FnZUljZUNhbmRpZGF0ZShjYW5kaWRhdGUpO1xyXG4gICAgICAgICAgICB0aGlzLndlYlNvY2tldC5zZW5kKEljZUNhbmRpZGF0ZS5wYXlsb2FkKCkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ2xvc2VzIHRoZSBXZWJzb2NrZXQgY29ubmVjdGlvblxyXG4gICAgICovXHJcbiAgICBjbG9zZSgpIHtcclxuICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgKF9hID0gdGhpcy53ZWJTb2NrZXQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jbG9zZSgpO1xyXG4gICAgfVxyXG4gICAgLyoqIEV2ZW50IHVzZWQgZm9yIERpc3BsYXlpbmcgd2Vic29ja2V0IGNsb3NlZCBtZXNzYWdlcyAqL1xyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFycywgQHR5cGVzY3JpcHQtZXNsaW50L25vLWVtcHR5LWZ1bmN0aW9uXHJcbiAgICBvbldlYlNvY2tldE9uY2xvc2VPdmVybGF5TWVzc2FnZShldmVudCkgeyB9XHJcbiAgICAvKipcclxuICAgICAqIFRoZSBNZXNzYWdlIENvbnRhaW5zIHRoZSBwYXlsb2FkIG9mIHRoZSBwZWVyIGNvbm5lY3Rpb24gb3B0aW9ucyB1c2VkIGZvciB0aGUgUlRDIFBlZXIgaGFuZCBzaGFrZVxyXG4gICAgICogQHBhcmFtIG1lc3NhZ2VDb25maWcgLSBDb25maWcgTWVzc2FnZSByZWNlaXZlZCBmcm9tIGhlIHNpZ25hbGluZyBzZXJ2ZXJcclxuICAgICAqL1xyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFycywgQHR5cGVzY3JpcHQtZXNsaW50L25vLWVtcHR5LWZ1bmN0aW9uXHJcbiAgICBvbkNvbmZpZyhtZXNzYWdlQ29uZmlnKSB7IH1cclxuICAgIC8qKlxyXG4gICAgICogVGhlIE1lc3NhZ2UgQ29udGFpbnMgdGhlIHBheWxvYWQgb2YgdGhlIHBlZXIgY29ubmVjdGlvbiBvcHRpb25zIHVzZWQgZm9yIHRoZSBSVEMgUGVlciBoYW5kIHNoYWtlXHJcbiAgICAgKiBAcGFyYW0gbWVzc2FnZUNvbmZpZyAtIENvbmZpZyBNZXNzYWdlIHJlY2VpdmVkIGZyb20gaGUgc2lnbmFsaW5nIHNlcnZlclxyXG4gICAgICovXHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzLCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZW1wdHktZnVuY3Rpb25cclxuICAgIG9uU3RyZWFtZXJMaXN0KG1lc3NhZ2VTdHJlYW1lckxpc3QpIHsgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0gaWNlQ2FuZGlkYXRlIC0gSWNlIENhbmRpZGF0ZSBzZW50IGZyb20gdGhlIFNpZ25hbGluZyBzZXJ2ZXIgc2VydmVyJ3MgUlRDIGhhbmQgc2hha2VcclxuICAgICAqL1xyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFycywgQHR5cGVzY3JpcHQtZXNsaW50L25vLWVtcHR5LWZ1bmN0aW9uXHJcbiAgICBvbkljZUNhbmRpZGF0ZShpY2VDYW5kaWRhdGUpIHsgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBFdmVudCBpcyBmaXJlZCB3aGVuIHRoZSB3ZWJzb2NrZXQgcmVjZWl2ZXMgdGhlIGFuc3dlciBmb3IgdGhlIFJUQyBwZWVyIENvbm5lY3Rpb25cclxuICAgICAqIEBwYXJhbSBtZXNzYWdlQW5zd2VyIC0gVGhlIFJUQyBBbnN3ZXIgcGF5bG9hZCBmcm9tIHRoZSBzaWduYWxpbmcgc2VydmVyXHJcbiAgICAgKi9cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnMsIEB0eXBlc2NyaXB0LWVzbGludC9uby1lbXB0eS1mdW5jdGlvblxyXG4gICAgb25XZWJSdGNBbnN3ZXIobWVzc2FnZUFuc3dlcikgeyB9XHJcbiAgICAvKipcclxuICAgICAqIEV2ZW50IGlzIGZpcmVkIHdoZW4gdGhlIHdlYnNvY2tldCByZWNlaXZlcyB0aGUgb2ZmZXIgZm9yIHRoZSBSVEMgcGVlciBDb25uZWN0aW9uXHJcbiAgICAgKiBAcGFyYW0gbWVzc2FnZU9mZmVyIC0gVGhlIHNkcCBvZmZlclxyXG4gICAgICovXHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzLCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZW1wdHktZnVuY3Rpb25cclxuICAgIG9uV2ViUnRjT2ZmZXIobWVzc2FnZU9mZmVyKSB7IH1cclxuICAgIC8qKlxyXG4gICAgICogRXZlbnQgaXMgZmlyZWQgd2hlbiB0aGUgd2Vic29ja2V0IHJlY2VpdmVzIHRoZSBkYXRhIGNoYW5uZWxzIGZvciB0aGUgUlRDIHBlZXIgQ29ubmVjdGlvbiBmcm9tIHRoZSBTRlVcclxuICAgICAqIEBwYXJhbSBtZXNzYWdlRGF0YUNoYW5uZWxzIC0gVGhlIGRhdGEgY2hhbm5lbHMgZGV0YWlsc1xyXG4gICAgICovXHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzLCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZW1wdHktZnVuY3Rpb25cclxuICAgIG9uV2ViUnRjUGVlckRhdGFDaGFubmVscyhtZXNzYWdlRGF0YUNoYW5uZWxzKSB7IH1cclxufVxyXG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvV2ViWFIvV2ViWFJDb250cm9sbGVyLnRzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9XZWJYUi9XZWJYUkNvbnRyb2xsZXIudHMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4ge1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywge1xuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIldlYlhSQ29udHJvbGxlclwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBXZWJYUkNvbnRyb2xsZXIpXG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vTG9nZ2VyL0xvZ2dlciAqLyBcIi4vc3JjL0xvZ2dlci9Mb2dnZXIudHNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX1V0aWxfV2ViR0xVdGlsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vVXRpbC9XZWJHTFV0aWxzICovIFwiLi9zcmMvVXRpbC9XZWJHTFV0aWxzLnRzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9JbnB1dHNfWFJHYW1lcGFkQ29udHJvbGxlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vSW5wdXRzL1hSR2FtZXBhZENvbnRyb2xsZXIgKi8gXCIuL3NyYy9JbnB1dHMvWFJHYW1lcGFkQ29udHJvbGxlci50c1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfVXRpbF9FdmVudEVtaXR0ZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL1V0aWwvRXZlbnRFbWl0dGVyICovIFwiLi9zcmMvVXRpbC9FdmVudEVtaXR0ZXIudHNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX3BpeGVsc3RyZWFtaW5nZnJvbnRlbmRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL3BpeGVsc3RyZWFtaW5nZnJvbnRlbmQgKi8gXCIuL3NyYy9Db25maWcvQ29uZmlnLnRzXCIpO1xuLy8gQ29weXJpZ2h0IEVwaWMgR2FtZXMsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuXHJcblxyXG5cclxuXHJcblxyXG5jbGFzcyBXZWJYUkNvbnRyb2xsZXIge1xyXG4gICAgY29uc3RydWN0b3Iod2ViUnRjUGxheWVyQ29udHJvbGxlcikge1xyXG4gICAgICAgIHRoaXMueHJTZXNzaW9uID0gbnVsbDtcclxuICAgICAgICB0aGlzLndlYlJ0Y0NvbnRyb2xsZXIgPSB3ZWJSdGNQbGF5ZXJDb250cm9sbGVyO1xyXG4gICAgICAgIHRoaXMueHJDb250cm9sbGVycyA9IFtdO1xyXG4gICAgICAgIHRoaXMueHJHYW1lcGFkQ29udHJvbGxlciA9IG5ldyBfSW5wdXRzX1hSR2FtZXBhZENvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5YUkdhbWVwYWRDb250cm9sbGVyKHRoaXMud2ViUnRjQ29udHJvbGxlci5zdHJlYW1NZXNzYWdlQ29udHJvbGxlcik7XHJcbiAgICAgICAgdGhpcy5vblNlc3Npb25FbmRlZCA9IG5ldyBFdmVudFRhcmdldCgpO1xyXG4gICAgICAgIHRoaXMub25TZXNzaW9uU3RhcnRlZCA9IG5ldyBFdmVudFRhcmdldCgpO1xyXG4gICAgICAgIHRoaXMub25GcmFtZSA9IG5ldyBFdmVudFRhcmdldCgpO1xyXG4gICAgfVxyXG4gICAgeHJDbGlja2VkKCkge1xyXG4gICAgICAgIGlmICghdGhpcy54clNlc3Npb24pIHtcclxuICAgICAgICAgICAgbmF2aWdhdG9yLnhyXHJcbiAgICAgICAgICAgICAgICAucmVxdWVzdFNlc3Npb24oJ2ltbWVyc2l2ZS12cicpXHJcbiAgICAgICAgICAgICAgICAudGhlbigoc2Vzc2lvbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vblhyU2Vzc2lvblN0YXJ0ZWQoc2Vzc2lvbik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy54clNlc3Npb24uZW5kKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgb25YclNlc3Npb25FbmRlZCgpIHtcclxuICAgICAgICBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLkxvZ2dlci5Mb2coX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5Mb2dnZXIuR2V0U3RhY2tUcmFjZSgpLCAnWFIgU2Vzc2lvbiBlbmRlZCcpO1xyXG4gICAgICAgIHRoaXMueHJTZXNzaW9uID0gbnVsbDtcclxuICAgICAgICB0aGlzLm9uU2Vzc2lvbkVuZGVkLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCd4clNlc3Npb25FbmRlZCcpKTtcclxuICAgIH1cclxuICAgIG9uWHJTZXNzaW9uU3RhcnRlZChzZXNzaW9uKSB7XHJcbiAgICAgICAgX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5Mb2dnZXIuTG9nKF9Mb2dnZXJfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uTG9nZ2VyLkdldFN0YWNrVHJhY2UoKSwgJ1hSIFNlc3Npb24gc3RhcnRlZCcpO1xyXG4gICAgICAgIHRoaXMueHJTZXNzaW9uID0gc2Vzc2lvbjtcclxuICAgICAgICB0aGlzLnhyU2Vzc2lvbi5hZGRFdmVudExpc3RlbmVyKCdlbmQnLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMub25YclNlc3Npb25FbmRlZCgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xyXG4gICAgICAgIHRoaXMuZ2wgPSBjYW52YXMuZ2V0Q29udGV4dCgnd2ViZ2wyJywge1xyXG4gICAgICAgICAgICB4ckNvbXBhdGlibGU6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnhyU2Vzc2lvbi51cGRhdGVSZW5kZXJTdGF0ZSh7XHJcbiAgICAgICAgICAgIGJhc2VMYXllcjogbmV3IFhSV2ViR0xMYXllcih0aGlzLnhyU2Vzc2lvbiwgdGhpcy5nbClcclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyBzZXR1cCB2ZXJ0ZXggc2hhZGVyXHJcbiAgICAgICAgY29uc3QgdmVydGV4U2hhZGVyID0gdGhpcy5nbC5jcmVhdGVTaGFkZXIodGhpcy5nbC5WRVJURVhfU0hBREVSKTtcclxuICAgICAgICB0aGlzLmdsLnNoYWRlclNvdXJjZSh2ZXJ0ZXhTaGFkZXIsIF9VdGlsX1dlYkdMVXRpbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5XZWJHTFV0aWxzLnZlcnRleFNoYWRlcigpKTtcclxuICAgICAgICB0aGlzLmdsLmNvbXBpbGVTaGFkZXIodmVydGV4U2hhZGVyKTtcclxuICAgICAgICAvLyBzZXR1cCBmcmFnbWVudCBzaGFkZXJcclxuICAgICAgICBjb25zdCBmcmFnbWVudFNoYWRlciA9IHRoaXMuZ2wuY3JlYXRlU2hhZGVyKHRoaXMuZ2wuRlJBR01FTlRfU0hBREVSKTtcclxuICAgICAgICB0aGlzLmdsLnNoYWRlclNvdXJjZShmcmFnbWVudFNoYWRlciwgX1V0aWxfV2ViR0xVdGlsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLldlYkdMVXRpbHMuZnJhZ21lbnRTaGFkZXIoKSk7XHJcbiAgICAgICAgdGhpcy5nbC5jb21waWxlU2hhZGVyKGZyYWdtZW50U2hhZGVyKTtcclxuICAgICAgICAvLyBzZXR1cCBHTFNMIHByb2dyYW1cclxuICAgICAgICBjb25zdCBzaGFkZXJQcm9ncmFtID0gdGhpcy5nbC5jcmVhdGVQcm9ncmFtKCk7XHJcbiAgICAgICAgdGhpcy5nbC5hdHRhY2hTaGFkZXIoc2hhZGVyUHJvZ3JhbSwgdmVydGV4U2hhZGVyKTtcclxuICAgICAgICB0aGlzLmdsLmF0dGFjaFNoYWRlcihzaGFkZXJQcm9ncmFtLCBmcmFnbWVudFNoYWRlcik7XHJcbiAgICAgICAgdGhpcy5nbC5saW5rUHJvZ3JhbShzaGFkZXJQcm9ncmFtKTtcclxuICAgICAgICB0aGlzLmdsLnVzZVByb2dyYW0oc2hhZGVyUHJvZ3JhbSk7XHJcbiAgICAgICAgLy8gbG9vayB1cCB3aGVyZSB2ZXJ0ZXggZGF0YSBuZWVkcyB0byBnb1xyXG4gICAgICAgIHRoaXMucG9zaXRpb25Mb2NhdGlvbiA9IHRoaXMuZ2wuZ2V0QXR0cmliTG9jYXRpb24oc2hhZGVyUHJvZ3JhbSwgJ2FfcG9zaXRpb24nKTtcclxuICAgICAgICB0aGlzLnRleGNvb3JkTG9jYXRpb24gPSB0aGlzLmdsLmdldEF0dHJpYkxvY2F0aW9uKHNoYWRlclByb2dyYW0sICdhX3RleENvb3JkJyk7XHJcbiAgICAgICAgLy8gQ3JlYXRlIGEgYnVmZmVyIHRvIHB1dCB0aHJlZSAyZCBjbGlwIHNwYWNlIHBvaW50cyBpblxyXG4gICAgICAgIHRoaXMucG9zaXRpb25CdWZmZXIgPSB0aGlzLmdsLmNyZWF0ZUJ1ZmZlcigpO1xyXG4gICAgICAgIC8vIEJpbmQgaXQgdG8gQVJSQVlfQlVGRkVSICh0aGluayBvZiBpdCBhcyBBUlJBWV9CVUZGRVIgPSBwb3NpdGlvbkJ1ZmZlcilcclxuICAgICAgICB0aGlzLmdsLmJpbmRCdWZmZXIodGhpcy5nbC5BUlJBWV9CVUZGRVIsIHRoaXMucG9zaXRpb25CdWZmZXIpO1xyXG4gICAgICAgIC8vIFR1cm4gb24gdGhlIHBvc2l0aW9uIGF0dHJpYnV0ZVxyXG4gICAgICAgIHRoaXMuZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkodGhpcy5wb3NpdGlvbkxvY2F0aW9uKTtcclxuICAgICAgICAvLyBDcmVhdGUgYSB0ZXh0dXJlLlxyXG4gICAgICAgIGNvbnN0IHRleHR1cmUgPSB0aGlzLmdsLmNyZWF0ZVRleHR1cmUoKTtcclxuICAgICAgICB0aGlzLmdsLmJpbmRUZXh0dXJlKHRoaXMuZ2wuVEVYVFVSRV8yRCwgdGV4dHVyZSk7XHJcbiAgICAgICAgLy8gU2V0IHRoZSBwYXJhbWV0ZXJzIHNvIHdlIGNhbiByZW5kZXIgYW55IHNpemUgaW1hZ2UuXHJcbiAgICAgICAgdGhpcy5nbC50ZXhQYXJhbWV0ZXJpKHRoaXMuZ2wuVEVYVFVSRV8yRCwgdGhpcy5nbC5URVhUVVJFX1dSQVBfUywgdGhpcy5nbC5DTEFNUF9UT19FREdFKTtcclxuICAgICAgICB0aGlzLmdsLnRleFBhcmFtZXRlcmkodGhpcy5nbC5URVhUVVJFXzJELCB0aGlzLmdsLlRFWFRVUkVfV1JBUF9ULCB0aGlzLmdsLkNMQU1QX1RPX0VER0UpO1xyXG4gICAgICAgIHRoaXMuZ2wudGV4UGFyYW1ldGVyaSh0aGlzLmdsLlRFWFRVUkVfMkQsIHRoaXMuZ2wuVEVYVFVSRV9NSU5fRklMVEVSLCB0aGlzLmdsLk5FQVJFU1QpO1xyXG4gICAgICAgIHRoaXMuZ2wudGV4UGFyYW1ldGVyaSh0aGlzLmdsLlRFWFRVUkVfMkQsIHRoaXMuZ2wuVEVYVFVSRV9NQUdfRklMVEVSLCB0aGlzLmdsLk5FQVJFU1QpO1xyXG4gICAgICAgIHRoaXMudGV4Y29vcmRCdWZmZXIgPSB0aGlzLmdsLmNyZWF0ZUJ1ZmZlcigpO1xyXG4gICAgICAgIC8vIGxvb2t1cCB1bmlmb3Jtc1xyXG4gICAgICAgIHRoaXMucmVzb2x1dGlvbkxvY2F0aW9uID0gdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24oc2hhZGVyUHJvZ3JhbSwgJ3VfcmVzb2x1dGlvbicpO1xyXG4gICAgICAgIHRoaXMub2Zmc2V0TG9jYXRpb24gPSB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbihzaGFkZXJQcm9ncmFtLCAndV9vZmZzZXQnKTtcclxuICAgICAgICBzZXNzaW9uLnJlcXVlc3RSZWZlcmVuY2VTcGFjZSgnbG9jYWwnKS50aGVuKChyZWZTcGFjZSkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnhyUmVmU3BhY2UgPSByZWZTcGFjZTtcclxuICAgICAgICAgICAgdGhpcy54clNlc3Npb24ucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCh0aW1lLCBmcmFtZSkgPT4gdGhpcy5vblhyRnJhbWUodGltZSwgZnJhbWUpKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLm9uU2Vzc2lvblN0YXJ0ZWQuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ3hyU2Vzc2lvblN0YXJ0ZWQnKSk7XHJcbiAgICB9XHJcbiAgICBvblhyRnJhbWUodGltZSwgZnJhbWUpIHtcclxuICAgICAgICBjb25zdCBwb3NlID0gZnJhbWUuZ2V0Vmlld2VyUG9zZSh0aGlzLnhyUmVmU3BhY2UpO1xyXG4gICAgICAgIGlmIChwb3NlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG1hdHJpeCA9IHBvc2UudHJhbnNmb3JtLm1hdHJpeDtcclxuICAgICAgICAgICAgY29uc3QgbWF0ID0gW107XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTY7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgbWF0W2ldID0gbmV3IEZsb2F0MzJBcnJheShbbWF0cml4W2ldXSlbMF07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gcHJldHRpZXItaWdub3JlXHJcbiAgICAgICAgICAgIHRoaXMud2ViUnRjQ29udHJvbGxlci5zdHJlYW1NZXNzYWdlQ29udHJvbGxlci50b1N0cmVhbWVySGFuZGxlcnMuZ2V0KCdYUkhNRFRyYW5zZm9ybScpKFtcclxuICAgICAgICAgICAgICAgIG1hdFswXSwgbWF0WzRdLCBtYXRbOF0sIG1hdFsxMl0sXHJcbiAgICAgICAgICAgICAgICBtYXRbMV0sIG1hdFs1XSwgbWF0WzldLCBtYXRbMTNdLFxyXG4gICAgICAgICAgICAgICAgbWF0WzJdLCBtYXRbNl0sIG1hdFsxMF0sIG1hdFsxNF0sXHJcbiAgICAgICAgICAgICAgICBtYXRbM10sIG1hdFs3XSwgbWF0WzExXSwgbWF0WzE1XVxyXG4gICAgICAgICAgICBdKTtcclxuICAgICAgICAgICAgY29uc3QgZ2xMYXllciA9IHRoaXMueHJTZXNzaW9uLnJlbmRlclN0YXRlLmJhc2VMYXllcjtcclxuICAgICAgICAgICAgLy8gSWYgd2UgZG8gaGF2ZSBhIHZhbGlkIHBvc2UsIGJpbmQgdGhlIFdlYkdMIGxheWVyJ3MgZnJhbWVidWZmZXIsXHJcbiAgICAgICAgICAgIC8vIHdoaWNoIGlzIHdoZXJlIGFueSBjb250ZW50IHRvIGJlIGRpc3BsYXllZCBvbiB0aGUgWFJEZXZpY2UgbXVzdCBiZVxyXG4gICAgICAgICAgICAvLyByZW5kZXJlZC5cclxuICAgICAgICAgICAgdGhpcy5nbC5iaW5kRnJhbWVidWZmZXIodGhpcy5nbC5GUkFNRUJVRkZFUiwgZ2xMYXllci5mcmFtZWJ1ZmZlcik7XHJcbiAgICAgICAgICAgIC8vIFVwbG9hZCB0aGUgaW1hZ2UgaW50byB0aGUgdGV4dHVyZS4gV2ViR0wga25vd3MgaG93IHRvIGV4dHJhY3QgdGhlIGN1cnJlbnQgZnJhbWUgZnJvbSB0aGUgdmlkZW8gZWxlbWVudFxyXG4gICAgICAgICAgICB0aGlzLmdsLnRleEltYWdlMkQodGhpcy5nbC5URVhUVVJFXzJELCAwLCB0aGlzLmdsLlJHQkEsIHRoaXMuZ2wuUkdCQSwgdGhpcy5nbC5VTlNJR05FRF9CWVRFLCB0aGlzLndlYlJ0Y0NvbnRyb2xsZXIudmlkZW9QbGF5ZXIuZ2V0VmlkZW9FbGVtZW50KCkpO1xyXG4gICAgICAgICAgICB0aGlzLnJlbmRlcih0aGlzLndlYlJ0Y0NvbnRyb2xsZXIudmlkZW9QbGF5ZXIuZ2V0VmlkZW9FbGVtZW50KCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy53ZWJSdGNDb250cm9sbGVyLmNvbmZpZy5pc0ZsYWdFbmFibGVkKF9waXhlbHN0cmVhbWluZ2Zyb250ZW5kX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18uRmxhZ3MuWFJDb250cm9sbGVySW5wdXQpKSB7XHJcbiAgICAgICAgICAgIHRoaXMueHJTZXNzaW9uLmlucHV0U291cmNlcy5mb3JFYWNoKChzb3VyY2UsIGluZGV4LCBhcnJheSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy54ckdhbWVwYWRDb250cm9sbGVyLnVwZGF0ZVN0YXR1cyhzb3VyY2UsIGZyYW1lLCB0aGlzLnhyUmVmU3BhY2UpO1xyXG4gICAgICAgICAgICB9LCB0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy54clNlc3Npb24ucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCh0aW1lLCBmcmFtZSkgPT4gdGhpcy5vblhyRnJhbWUodGltZSwgZnJhbWUpKTtcclxuICAgICAgICB0aGlzLm9uRnJhbWUuZGlzcGF0Y2hFdmVudChuZXcgX1V0aWxfRXZlbnRFbWl0dGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18uWHJGcmFtZUV2ZW50KHtcclxuICAgICAgICAgICAgdGltZSxcclxuICAgICAgICAgICAgZnJhbWVcclxuICAgICAgICB9KSk7XHJcbiAgICB9XHJcbiAgICByZW5kZXIodmlkZW9FbGVtZW50KSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmdsKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgZ2xMYXllciA9IHRoaXMueHJTZXNzaW9uLnJlbmRlclN0YXRlLmJhc2VMYXllcjtcclxuICAgICAgICB0aGlzLmdsLnZpZXdwb3J0KDAsIDAsIGdsTGF5ZXIuZnJhbWVidWZmZXJXaWR0aCwgZ2xMYXllci5mcmFtZWJ1ZmZlckhlaWdodCk7XHJcbiAgICAgICAgdGhpcy5nbC51bmlmb3JtNGYodGhpcy5vZmZzZXRMb2NhdGlvbiwgMS4wLCAxLjAsIDAuMCwgMC4wKTtcclxuICAgICAgICAvLyBTZXQgcmVjdGFuZ2xlXHJcbiAgICAgICAgLy8gcHJldHRpZXItaWdub3JlXHJcbiAgICAgICAgdGhpcy5nbC5idWZmZXJEYXRhKHRoaXMuZ2wuQVJSQVlfQlVGRkVSLCBuZXcgRmxvYXQzMkFycmF5KFtcclxuICAgICAgICAgICAgMCwgMCxcclxuICAgICAgICAgICAgdmlkZW9FbGVtZW50LnZpZGVvV2lkdGgsIDAsXHJcbiAgICAgICAgICAgIDAsIHZpZGVvRWxlbWVudC52aWRlb0hlaWdodCxcclxuICAgICAgICAgICAgMCwgdmlkZW9FbGVtZW50LnZpZGVvSGVpZ2h0LFxyXG4gICAgICAgICAgICB2aWRlb0VsZW1lbnQudmlkZW9XaWR0aCwgMCxcclxuICAgICAgICAgICAgdmlkZW9FbGVtZW50LnZpZGVvV2lkdGgsIHZpZGVvRWxlbWVudC52aWRlb0hlaWdodFxyXG4gICAgICAgIF0pLCB0aGlzLmdsLlNUQVRJQ19EUkFXKTtcclxuICAgICAgICAvLyBQcm92aWRlIHRleHR1cmUgY29vcmRpbmF0ZXMgZm9yIHRoZSByZWN0YW5nbGVcclxuICAgICAgICB0aGlzLmdsLmJpbmRCdWZmZXIodGhpcy5nbC5BUlJBWV9CVUZGRVIsIHRoaXMudGV4Y29vcmRCdWZmZXIpO1xyXG4gICAgICAgIHRoaXMuZ2wuYnVmZmVyRGF0YSh0aGlzLmdsLkFSUkFZX0JVRkZFUiwgbmV3IEZsb2F0MzJBcnJheShbXHJcbiAgICAgICAgICAgIDAuMCwgMC4wLCAxLjAsIDAuMCwgMC4wLCAxLjAsIDAuMCwgMS4wLCAxLjAsIDAuMCwgMS4wLCAxLjBcclxuICAgICAgICBdKSwgdGhpcy5nbC5TVEFUSUNfRFJBVyk7XHJcbiAgICAgICAgbGV0IHNpemU7IC8vIGNvbXBvbmVudHMgcGVyIGl0ZXJhdGlvblxyXG4gICAgICAgIGxldCB0eXBlOyAvLyB0aGUgZGF0YSB0eXBlXHJcbiAgICAgICAgbGV0IG5vcm1hbGl6ZTsgLy8gbm9ybWFsaXplIHRoZSBkYXRhXHJcbiAgICAgICAgbGV0IHN0cmlkZTsgLy8gMCA9IG1vdmUgZm9yd2FyZCBzaXplICogc2l6ZW9mKHR5cGUpIGVhY2ggaXRlcmF0aW9uIHRvIGdldCB0aGUgbmV4dCBwb3NpdGlvblxyXG4gICAgICAgIGxldCBvZmZzZXQ7IC8vIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSBidWZmZXJcclxuICAgICAgICAvLyBCaW5kIHRoZSBwb3NpdGlvbiBidWZmZXIuXHJcbiAgICAgICAgdGhpcy5nbC5iaW5kQnVmZmVyKHRoaXMuZ2wuQVJSQVlfQlVGRkVSLCB0aGlzLnBvc2l0aW9uQnVmZmVyKTtcclxuICAgICAgICAvLyBUZWxsIHRoZSBwb3NpdGlvbiBhdHRyaWJ1dGUgaG93IHRvIGdldCBkYXRhIG91dCBvZiBwb3NpdGlvbkJ1ZmZlciAoQVJSQVlfQlVGRkVSKVxyXG4gICAgICAgIHNpemUgPSAyOyAvLyAyIGNvbXBvbmVudHMgcGVyIGl0ZXJhdGlvblxyXG4gICAgICAgIHR5cGUgPSB0aGlzLmdsLkZMT0FUOyAvLyB0aGUgZGF0YSBpcyAzMmJpdCBmbG9hdHNcclxuICAgICAgICBub3JtYWxpemUgPSBmYWxzZTsgLy8gZG9uJ3Qgbm9ybWFsaXplIHRoZSBkYXRhXHJcbiAgICAgICAgc3RyaWRlID0gMDsgLy8gMCA9IG1vdmUgZm9yd2FyZCBzaXplICogc2l6ZW9mKHR5cGUpIGVhY2ggaXRlcmF0aW9uIHRvIGdldCB0aGUgbmV4dCBwb3NpdGlvblxyXG4gICAgICAgIG9mZnNldCA9IDA7IC8vIHN0YXJ0IGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIGJ1ZmZlclxyXG4gICAgICAgIHRoaXMuZ2wudmVydGV4QXR0cmliUG9pbnRlcih0aGlzLnBvc2l0aW9uTG9jYXRpb24sIHNpemUsIHR5cGUsIG5vcm1hbGl6ZSwgc3RyaWRlLCBvZmZzZXQpO1xyXG4gICAgICAgIC8vIFR1cm4gb24gdGhlIHRleGNvb3JkIGF0dHJpYnV0ZVxyXG4gICAgICAgIHRoaXMuZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkodGhpcy50ZXhjb29yZExvY2F0aW9uKTtcclxuICAgICAgICAvLyBiaW5kIHRoZSB0ZXhjb29yZCBidWZmZXIuXHJcbiAgICAgICAgdGhpcy5nbC5iaW5kQnVmZmVyKHRoaXMuZ2wuQVJSQVlfQlVGRkVSLCB0aGlzLnRleGNvb3JkQnVmZmVyKTtcclxuICAgICAgICAvLyBUZWxsIHRoZSB0ZXhjb29yZCBhdHRyaWJ1dGUgaG93IHRvIGdldCBkYXRhIG91dCBvZiB0ZXhjb29yZEJ1ZmZlciAoQVJSQVlfQlVGRkVSKVxyXG4gICAgICAgIHNpemUgPSAyOyAvLyAyIGNvbXBvbmVudHMgcGVyIGl0ZXJhdGlvblxyXG4gICAgICAgIHR5cGUgPSB0aGlzLmdsLkZMT0FUOyAvLyB0aGUgZGF0YSBpcyAzMmJpdCBmbG9hdHNcclxuICAgICAgICBub3JtYWxpemUgPSBmYWxzZTsgLy8gZG9uJ3Qgbm9ybWFsaXplIHRoZSBkYXRhXHJcbiAgICAgICAgc3RyaWRlID0gMDsgLy8gMCA9IG1vdmUgZm9yd2FyZCBzaXplICogc2l6ZW9mKHR5cGUpIGVhY2ggaXRlcmF0aW9uIHRvIGdldCB0aGUgbmV4dCBwb3NpdGlvblxyXG4gICAgICAgIG9mZnNldCA9IDA7IC8vIHN0YXJ0IGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIGJ1ZmZlclxyXG4gICAgICAgIHRoaXMuZ2wudmVydGV4QXR0cmliUG9pbnRlcih0aGlzLnRleGNvb3JkTG9jYXRpb24sIHNpemUsIHR5cGUsIG5vcm1hbGl6ZSwgc3RyaWRlLCBvZmZzZXQpO1xyXG4gICAgICAgIC8vIHNldCB0aGUgcmVzb2x1dGlvblxyXG4gICAgICAgIHRoaXMuZ2wudW5pZm9ybTJmKHRoaXMucmVzb2x1dGlvbkxvY2F0aW9uLCB2aWRlb0VsZW1lbnQudmlkZW9XaWR0aCwgdmlkZW9FbGVtZW50LnZpZGVvSGVpZ2h0KTtcclxuICAgICAgICAvLyBkcmF3IHRoZSByZWN0YW5nbGUuXHJcbiAgICAgICAgY29uc3QgcHJpbWl0aXZlVHlwZSA9IHRoaXMuZ2wuVFJJQU5HTEVTO1xyXG4gICAgICAgIGNvbnN0IGNvdW50ID0gNjtcclxuICAgICAgICBvZmZzZXQgPSAwO1xyXG4gICAgICAgIHRoaXMuZ2wuZHJhd0FycmF5cyhwcmltaXRpdmVUeXBlLCBvZmZzZXQsIGNvdW50KTtcclxuICAgIH1cclxuICAgIHN0YXRpYyBpc1Nlc3Npb25TdXBwb3J0ZWQobW9kZSkge1xyXG4gICAgICAgIGlmIChuYXZpZ2F0b3IueHIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5hdmlnYXRvci54ci5pc1Nlc3Npb25TdXBwb3J0ZWQobW9kZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcInNkcFwiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiBleHRlcm5hbCBcInNkcFwiICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKi8gKChtb2R1bGUpID0+IHtcblxudmFyIHggPSB5ID0+IHsgdmFyIHggPSB7fTsgX193ZWJwYWNrX3JlcXVpcmVfXy5kKHgsIHkpOyByZXR1cm4geDsgfVxudmFyIHkgPSB4ID0+ICgpID0+IHhcbm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9zZHBfXztcblxuLyoqKi8gfSlcblxuLyoqKioqKi8gfSk7XG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gLy8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gdmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuLyoqKioqKi8gXG4vKioqKioqLyAvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuLyoqKioqKi8gXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbi8qKioqKiovIFx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG4vKioqKioqLyBcdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuLyoqKioqKi8gXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0fVxuLyoqKioqKi8gXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG4vKioqKioqLyBcdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcbi8qKioqKiovIFx0XHRleHBvcnRzOiB7fVxuLyoqKioqKi8gXHR9O1xuLyoqKioqKi8gXG4vKioqKioqLyBcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovIFxuLyoqKioqKi8gXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyB9XG4vKioqKioqLyBcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyAvKiB3ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMgKi9cbi8qKioqKiovICgoKSA9PiB7XG4vKioqKioqLyBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcbi8qKioqKiovIFx0XHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG4vKioqKioqLyBcdFx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcbi8qKioqKiovIFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcbi8qKioqKiovIFx0XHRcdH1cbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdH07XG4vKioqKioqLyB9KSgpO1xuLyoqKioqKi8gXG4vKioqKioqLyAvKiB3ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kICovXG4vKioqKioqLyAoKCkgPT4ge1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpXG4vKioqKioqLyB9KSgpO1xuLyoqKioqKi8gXG4vKioqKioqLyAvKiB3ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0ICovXG4vKioqKioqLyAoKCkgPT4ge1xuLyoqKioqKi8gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG4vKioqKioqLyBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4vKioqKioqLyBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKioqKiovIFx0fTtcbi8qKioqKiovIH0pKCk7XG4vKioqKioqLyBcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IHt9O1xuLy8gVGhpcyBlbnRyeSBuZWVkIHRvIGJlIHdyYXBwZWQgaW4gYW4gSUlGRSBiZWNhdXNlIGl0IG5lZWQgdG8gYmUgaXNvbGF0ZWQgYWdhaW5zdCBvdGhlciBtb2R1bGVzIGluIHRoZSBjaHVuay5cbigoKSA9PiB7XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvcGl4ZWxzdHJlYW1pbmdmcm9udGVuZC50cyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJBZmtMb2dpY1wiOiAoKSA9PiAoLyogcmVleHBvcnQgc2FmZSAqLyBfQUZLX0FGS0NvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzlfXy5BRktDb250cm9sbGVyKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJBZmtUaW1lZE91dEV2ZW50XCI6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIF9VdGlsX0V2ZW50RW1pdHRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMjRfXy5BZmtUaW1lZE91dEV2ZW50KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJBZmtXYXJuaW5nQWN0aXZhdGVFdmVudFwiOiAoKSA9PiAoLyogcmVleHBvcnQgc2FmZSAqLyBfVXRpbF9FdmVudEVtaXR0ZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzI0X18uQWZrV2FybmluZ0FjdGl2YXRlRXZlbnQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIkFma1dhcm5pbmdEZWFjdGl2YXRlRXZlbnRcIjogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX1V0aWxfRXZlbnRFbWl0dGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yNF9fLkFma1dhcm5pbmdEZWFjdGl2YXRlRXZlbnQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIkFma1dhcm5pbmdVcGRhdGVFdmVudFwiOiAoKSA9PiAoLyogcmVleHBvcnQgc2FmZSAqLyBfVXRpbF9FdmVudEVtaXR0ZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzI0X18uQWZrV2FybmluZ1VwZGF0ZUV2ZW50KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJBZ2dyZWdhdGVkU3RhdHNcIjogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX1BlZXJDb25uZWN0aW9uQ29udHJvbGxlcl9BZ2dyZWdhdGVkU3RhdHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzEyX18uQWdncmVnYXRlZFN0YXRzKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJDYW5kaWRhdGVQYWlyU3RhdHNcIjogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX1BlZXJDb25uZWN0aW9uQ29udHJvbGxlcl9DYW5kaWRhdGVQYWlyU3RhdHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE5X18uQ2FuZGlkYXRlUGFpclN0YXRzKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJDYW5kaWRhdGVTdGF0XCI6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIF9QZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXJfQ2FuZGlkYXRlU3RhdF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMjBfXy5DYW5kaWRhdGVTdGF0KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJDb25maWdcIjogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX0NvbmZpZ19Db25maWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5Db25maWcpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIkNvbnRyb2xTY2hlbWVUeXBlXCI6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18uQ29udHJvbFNjaGVtZVR5cGUpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIkRhdGFDaGFubmVsQ2xvc2VFdmVudFwiOiAoKSA9PiAoLyogcmVleHBvcnQgc2FmZSAqLyBfVXRpbF9FdmVudEVtaXR0ZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzI0X18uRGF0YUNoYW5uZWxDbG9zZUV2ZW50KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJEYXRhQ2hhbm5lbEVycm9yRXZlbnRcIjogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX1V0aWxfRXZlbnRFbWl0dGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yNF9fLkRhdGFDaGFubmVsRXJyb3JFdmVudCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiRGF0YUNoYW5uZWxPcGVuRXZlbnRcIjogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX1V0aWxfRXZlbnRFbWl0dGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yNF9fLkRhdGFDaGFubmVsT3BlbkV2ZW50KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJEYXRhQ2hhbm5lbFN0YXRzXCI6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIF9QZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXJfRGF0YUNoYW5uZWxTdGF0c19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMjFfXy5EYXRhQ2hhbm5lbFN0YXRzKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJFbmNvZGVyU2V0dGluZ3NcIjogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX0RhdGFDaGFubmVsX0luaXRpYWxTZXR0aW5nc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTFfXy5FbmNvZGVyU2V0dGluZ3MpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIkV2ZW50RW1pdHRlclwiOiAoKSA9PiAoLyogcmVleHBvcnQgc2FmZSAqLyBfVXRpbF9FdmVudEVtaXR0ZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzI0X18uRXZlbnRFbWl0dGVyKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJGbGFnc1wiOiAoKSA9PiAoLyogcmVleHBvcnQgc2FmZSAqLyBfQ29uZmlnX0NvbmZpZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLkZsYWdzKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJIaWRlRnJlZXplRnJhbWVFdmVudFwiOiAoKSA9PiAoLyogcmVleHBvcnQgc2FmZSAqLyBfVXRpbF9FdmVudEVtaXR0ZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzI0X18uSGlkZUZyZWV6ZUZyYW1lRXZlbnQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIkluYm91bmRBdWRpb1N0YXRzXCI6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIF9QZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXJfSW5ib3VuZFJUUFN0YXRzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yMl9fLkluYm91bmRBdWRpb1N0YXRzKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJJbmJvdW5kVmlkZW9TdGF0c1wiOiAoKSA9PiAoLyogcmVleHBvcnQgc2FmZSAqLyBfUGVlckNvbm5lY3Rpb25Db250cm9sbGVyX0luYm91bmRSVFBTdGF0c19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMjJfXy5JbmJvdW5kVmlkZW9TdGF0cyksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiSW5pdGlhbFNldHRpbmdzXCI6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIF9EYXRhQ2hhbm5lbF9Jbml0aWFsU2V0dGluZ3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzExX18uSW5pdGlhbFNldHRpbmdzKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJJbml0aWFsU2V0dGluZ3NFdmVudFwiOiAoKSA9PiAoLyogcmVleHBvcnQgc2FmZSAqLyBfVXRpbF9FdmVudEVtaXR0ZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzI0X18uSW5pdGlhbFNldHRpbmdzRXZlbnQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIkxhdGVuY3lUZXN0UmVzdWx0RXZlbnRcIjogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX1V0aWxfRXZlbnRFbWl0dGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yNF9fLkxhdGVuY3lUZXN0UmVzdWx0RXZlbnQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIkxhdGVuY3lUZXN0UmVzdWx0c1wiOiAoKSA9PiAoLyogcmVleHBvcnQgc2FmZSAqLyBfRGF0YUNoYW5uZWxfTGF0ZW5jeVRlc3RSZXN1bHRzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMF9fLkxhdGVuY3lUZXN0UmVzdWx0cyksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiTG9hZEZyZWV6ZUZyYW1lRXZlbnRcIjogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX1V0aWxfRXZlbnRFbWl0dGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yNF9fLkxvYWRGcmVlemVGcmFtZUV2ZW50KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJMb2dnZXJcIjogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX0xvZ2dlcl9Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzEzX18uTG9nZ2VyKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJNZXNzYWdlUmVjdlwiOiAoKSA9PiAoLyogcmVleHBvcnQgc2FmZSAqLyBfV2ViU29ja2V0c19NZXNzYWdlUmVjZWl2ZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTZfXy5NZXNzYWdlUmVjdiksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiTWVzc2FnZVNlbmRcIjogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX1dlYlNvY2tldHNfTWVzc2FnZVNlbmRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE1X18uTWVzc2FnZVNlbmQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIk1lc3NhZ2VTdHJlYW1lckxpc3RcIjogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX1dlYlNvY2tldHNfTWVzc2FnZVJlY2VpdmVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE2X18uTWVzc2FnZVN0cmVhbWVyTGlzdCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiTnVtZXJpY1BhcmFtZXRlcnNcIjogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX0NvbmZpZ19Db25maWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5OdW1lcmljUGFyYW1ldGVycyksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiT3B0aW9uUGFyYW1ldGVyc1wiOiAoKSA9PiAoLyogcmVleHBvcnQgc2FmZSAqLyBfQ29uZmlnX0NvbmZpZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLk9wdGlvblBhcmFtZXRlcnMpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIk91dEJvdW5kVmlkZW9TdGF0c1wiOiAoKSA9PiAoLyogcmVleHBvcnQgc2FmZSAqLyBfUGVlckNvbm5lY3Rpb25Db250cm9sbGVyX091dEJvdW5kUlRQU3RhdHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzIzX18uT3V0Qm91bmRWaWRlb1N0YXRzKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJQaXhlbFN0cmVhbWluZ1wiOiAoKSA9PiAoLyogcmVleHBvcnQgc2FmZSAqLyBfUGl4ZWxTdHJlYW1pbmdfUGl4ZWxTdHJlYW1pbmdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzhfXy5QaXhlbFN0cmVhbWluZyksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiUGxheVN0cmVhbUVycm9yRXZlbnRcIjogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX1V0aWxfRXZlbnRFbWl0dGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yNF9fLlBsYXlTdHJlYW1FcnJvckV2ZW50KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJQbGF5U3RyZWFtRXZlbnRcIjogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX1V0aWxfRXZlbnRFbWl0dGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yNF9fLlBsYXlTdHJlYW1FdmVudCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiUGxheVN0cmVhbVJlamVjdGVkRXZlbnRcIjogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX1V0aWxfRXZlbnRFbWl0dGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yNF9fLlBsYXlTdHJlYW1SZWplY3RlZEV2ZW50KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJTZXR0aW5nQmFzZVwiOiAoKSA9PiAoLyogcmVleHBvcnQgc2FmZSAqLyBfQ29uZmlnX1NldHRpbmdCYXNlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18uU2V0dGluZ0Jhc2UpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIlNldHRpbmdGbGFnXCI6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIF9Db25maWdfU2V0dGluZ0ZsYWdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXy5TZXR0aW5nRmxhZyksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiU2V0dGluZ051bWJlclwiOiAoKSA9PiAoLyogcmVleHBvcnQgc2FmZSAqLyBfQ29uZmlnX1NldHRpbmdOdW1iZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfXy5TZXR0aW5nTnVtYmVyKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJTZXR0aW5nT3B0aW9uXCI6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIF9Db25maWdfU2V0dGluZ09wdGlvbl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNl9fLlNldHRpbmdPcHRpb24pLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIlNldHRpbmdUZXh0XCI6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIF9Db25maWdfU2V0dGluZ1RleHRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzdfXy5TZXR0aW5nVGV4dCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiU2V0dGluZ3NDaGFuZ2VkRXZlbnRcIjogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX1V0aWxfRXZlbnRFbWl0dGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yNF9fLlNldHRpbmdzQ2hhbmdlZEV2ZW50KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJTaWduYWxsaW5nUHJvdG9jb2xcIjogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX1dlYlNvY2tldHNfU2lnbmFsbGluZ1Byb3RvY29sX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xOF9fLlNpZ25hbGxpbmdQcm90b2NvbCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiU3RhdHNSZWNlaXZlZEV2ZW50XCI6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIF9VdGlsX0V2ZW50RW1pdHRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMjRfXy5TdGF0c1JlY2VpdmVkRXZlbnQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIlN0cmVhbUxvYWRpbmdFdmVudFwiOiAoKSA9PiAoLyogcmVleHBvcnQgc2FmZSAqLyBfVXRpbF9FdmVudEVtaXR0ZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzI0X18uU3RyZWFtTG9hZGluZ0V2ZW50KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJTdHJlYW1QcmVDb25uZWN0RXZlbnRcIjogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX1V0aWxfRXZlbnRFbWl0dGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yNF9fLlN0cmVhbVByZUNvbm5lY3RFdmVudCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiU3RyZWFtUHJlRGlzY29ubmVjdEV2ZW50XCI6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIF9VdGlsX0V2ZW50RW1pdHRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMjRfXy5TdHJlYW1QcmVEaXNjb25uZWN0RXZlbnQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIlN0cmVhbVJlY29ubmVjdEV2ZW50XCI6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIF9VdGlsX0V2ZW50RW1pdHRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMjRfXy5TdHJlYW1SZWNvbm5lY3RFdmVudCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiU3RyZWFtZXJMaXN0TWVzc2FnZUV2ZW50XCI6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIF9VdGlsX0V2ZW50RW1pdHRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMjRfXy5TdHJlYW1lckxpc3RNZXNzYWdlRXZlbnQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIlRleHRQYXJhbWV0ZXJzXCI6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIF9Db25maWdfQ29uZmlnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18uVGV4dFBhcmFtZXRlcnMpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIlVucXVhbnRpemVkQW5kRGVub3JtYWxpemVVbnNpZ25lZFwiOiAoKSA9PiAoLyogcmVleHBvcnQgc2FmZSAqLyBfVXRpbF9Db29yZGluYXRlQ29udmVydGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNF9fLlVucXVhbnRpemVkRGVub3JtYWxpemVkVW5zaWduZWRDb29yZCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiVmlkZW9FbmNvZGVyQXZnUVBFdmVudFwiOiAoKSA9PiAoLyogcmVleHBvcnQgc2FmZSAqLyBfVXRpbF9FdmVudEVtaXR0ZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzI0X18uVmlkZW9FbmNvZGVyQXZnUVBFdmVudCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiVmlkZW9Jbml0aWFsaXplZEV2ZW50XCI6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIF9VdGlsX0V2ZW50RW1pdHRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMjRfXy5WaWRlb0luaXRpYWxpemVkRXZlbnQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIldlYlJUQ1NldHRpbmdzXCI6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIF9EYXRhQ2hhbm5lbF9Jbml0aWFsU2V0dGluZ3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzExX18uV2ViUlRDU2V0dGluZ3MpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIldlYlJ0Y0F1dG9Db25uZWN0RXZlbnRcIjogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX1V0aWxfRXZlbnRFbWl0dGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yNF9fLldlYlJ0Y0F1dG9Db25uZWN0RXZlbnQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIldlYlJ0Y0Nvbm5lY3RlZEV2ZW50XCI6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIF9VdGlsX0V2ZW50RW1pdHRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMjRfXy5XZWJSdGNDb25uZWN0ZWRFdmVudCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiV2ViUnRjQ29ubmVjdGluZ0V2ZW50XCI6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIF9VdGlsX0V2ZW50RW1pdHRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMjRfXy5XZWJSdGNDb25uZWN0aW5nRXZlbnQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIldlYlJ0Y0Rpc2Nvbm5lY3RlZEV2ZW50XCI6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIF9VdGlsX0V2ZW50RW1pdHRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMjRfXy5XZWJSdGNEaXNjb25uZWN0ZWRFdmVudCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiV2ViUnRjRmFpbGVkRXZlbnRcIjogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX1V0aWxfRXZlbnRFbWl0dGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yNF9fLldlYlJ0Y0ZhaWxlZEV2ZW50KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJXZWJSdGNQbGF5ZXJDb250cm9sbGVyXCI6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIF9XZWJSdGNQbGF5ZXJfV2ViUnRjUGxheWVyQ29udHJvbGxlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLldlYlJ0Y1BsYXllckNvbnRyb2xsZXIpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIldlYlJ0Y1NkcEV2ZW50XCI6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIF9VdGlsX0V2ZW50RW1pdHRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMjRfXy5XZWJSdGNTZHBFdmVudCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiV2ViU29ja2V0Q29udHJvbGxlclwiOiAoKSA9PiAoLyogcmVleHBvcnQgc2FmZSAqLyBfV2ViU29ja2V0c19XZWJTb2NrZXRDb250cm9sbGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xN19fLldlYlNvY2tldENvbnRyb2xsZXIpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBcIldlYlhSQ29udHJvbGxlclwiOiAoKSA9PiAoLyogcmVleHBvcnQgc2FmZSAqLyBfV2ViWFJfV2ViWFJDb250cm9sbGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uV2ViWFJDb250cm9sbGVyKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJYckZyYW1lRXZlbnRcIjogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX1V0aWxfRXZlbnRFbWl0dGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yNF9fLlhyRnJhbWVFdmVudCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiWHJTZXNzaW9uRW5kZWRFdmVudFwiOiAoKSA9PiAoLyogcmVleHBvcnQgc2FmZSAqLyBfVXRpbF9FdmVudEVtaXR0ZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzI0X18uWHJTZXNzaW9uRW5kZWRFdmVudCksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFwiWHJTZXNzaW9uU3RhcnRlZEV2ZW50XCI6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIF9VdGlsX0V2ZW50RW1pdHRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMjRfXy5YclNlc3Npb25TdGFydGVkRXZlbnQpXG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfV2ViUnRjUGxheWVyX1dlYlJ0Y1BsYXllckNvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vV2ViUnRjUGxheWVyL1dlYlJ0Y1BsYXllckNvbnRyb2xsZXIgKi8gXCIuL3NyYy9XZWJSdGNQbGF5ZXIvV2ViUnRjUGxheWVyQ29udHJvbGxlci50c1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfV2ViWFJfV2ViWFJDb250cm9sbGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL1dlYlhSL1dlYlhSQ29udHJvbGxlciAqLyBcIi4vc3JjL1dlYlhSL1dlYlhSQ29udHJvbGxlci50c1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfQ29uZmlnX0NvbmZpZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9Db25maWcvQ29uZmlnICovIFwiLi9zcmMvQ29uZmlnL0NvbmZpZy50c1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfQ29uZmlnX1NldHRpbmdCYXNlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL0NvbmZpZy9TZXR0aW5nQmFzZSAqLyBcIi4vc3JjL0NvbmZpZy9TZXR0aW5nQmFzZS50c1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfQ29uZmlnX1NldHRpbmdGbGFnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL0NvbmZpZy9TZXR0aW5nRmxhZyAqLyBcIi4vc3JjL0NvbmZpZy9TZXR0aW5nRmxhZy50c1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfQ29uZmlnX1NldHRpbmdOdW1iZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vQ29uZmlnL1NldHRpbmdOdW1iZXIgKi8gXCIuL3NyYy9Db25maWcvU2V0dGluZ051bWJlci50c1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfQ29uZmlnX1NldHRpbmdPcHRpb25fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vQ29uZmlnL1NldHRpbmdPcHRpb24gKi8gXCIuL3NyYy9Db25maWcvU2V0dGluZ09wdGlvbi50c1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfQ29uZmlnX1NldHRpbmdUZXh0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV83X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL0NvbmZpZy9TZXR0aW5nVGV4dCAqLyBcIi4vc3JjL0NvbmZpZy9TZXR0aW5nVGV4dC50c1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfUGl4ZWxTdHJlYW1pbmdfUGl4ZWxTdHJlYW1pbmdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzhfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vUGl4ZWxTdHJlYW1pbmcvUGl4ZWxTdHJlYW1pbmcgKi8gXCIuL3NyYy9QaXhlbFN0cmVhbWluZy9QaXhlbFN0cmVhbWluZy50c1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfQUZLX0FGS0NvbnRyb2xsZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzlfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vQUZLL0FGS0NvbnRyb2xsZXIgKi8gXCIuL3NyYy9BRksvQUZLQ29udHJvbGxlci50c1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfRGF0YUNoYW5uZWxfTGF0ZW5jeVRlc3RSZXN1bHRzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9EYXRhQ2hhbm5lbC9MYXRlbmN5VGVzdFJlc3VsdHMgKi8gXCIuL3NyYy9EYXRhQ2hhbm5lbC9MYXRlbmN5VGVzdFJlc3VsdHMudHNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX0RhdGFDaGFubmVsX0luaXRpYWxTZXR0aW5nc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTFfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vRGF0YUNoYW5uZWwvSW5pdGlhbFNldHRpbmdzICovIFwiLi9zcmMvRGF0YUNoYW5uZWwvSW5pdGlhbFNldHRpbmdzLnRzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9QZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXJfQWdncmVnYXRlZFN0YXRzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9QZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIvQWdncmVnYXRlZFN0YXRzICovIFwiLi9zcmMvUGVlckNvbm5lY3Rpb25Db250cm9sbGVyL0FnZ3JlZ2F0ZWRTdGF0cy50c1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfTG9nZ2VyX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vTG9nZ2VyL0xvZ2dlciAqLyBcIi4vc3JjL0xvZ2dlci9Mb2dnZXIudHNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX1V0aWxfQ29vcmRpbmF0ZUNvbnZlcnRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTRfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vVXRpbC9Db29yZGluYXRlQ29udmVydGVyICovIFwiLi9zcmMvVXRpbC9Db29yZGluYXRlQ29udmVydGVyLnRzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9XZWJTb2NrZXRzX01lc3NhZ2VTZW5kX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9XZWJTb2NrZXRzL01lc3NhZ2VTZW5kICovIFwiLi9zcmMvV2ViU29ja2V0cy9NZXNzYWdlU2VuZC50c1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfV2ViU29ja2V0c19NZXNzYWdlUmVjZWl2ZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTZfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vV2ViU29ja2V0cy9NZXNzYWdlUmVjZWl2ZSAqLyBcIi4vc3JjL1dlYlNvY2tldHMvTWVzc2FnZVJlY2VpdmUudHNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX1dlYlNvY2tldHNfV2ViU29ja2V0Q29udHJvbGxlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTdfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vV2ViU29ja2V0cy9XZWJTb2NrZXRDb250cm9sbGVyICovIFwiLi9zcmMvV2ViU29ja2V0cy9XZWJTb2NrZXRDb250cm9sbGVyLnRzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9XZWJTb2NrZXRzX1NpZ25hbGxpbmdQcm90b2NvbF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMThfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vV2ViU29ja2V0cy9TaWduYWxsaW5nUHJvdG9jb2wgKi8gXCIuL3NyYy9XZWJTb2NrZXRzL1NpZ25hbGxpbmdQcm90b2NvbC50c1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfUGVlckNvbm5lY3Rpb25Db250cm9sbGVyX0NhbmRpZGF0ZVBhaXJTdGF0c19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTlfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vUGVlckNvbm5lY3Rpb25Db250cm9sbGVyL0NhbmRpZGF0ZVBhaXJTdGF0cyAqLyBcIi4vc3JjL1BlZXJDb25uZWN0aW9uQ29udHJvbGxlci9DYW5kaWRhdGVQYWlyU3RhdHMudHNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX1BlZXJDb25uZWN0aW9uQ29udHJvbGxlcl9DYW5kaWRhdGVTdGF0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9QZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIvQ2FuZGlkYXRlU3RhdCAqLyBcIi4vc3JjL1BlZXJDb25uZWN0aW9uQ29udHJvbGxlci9DYW5kaWRhdGVTdGF0LnRzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9QZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXJfRGF0YUNoYW5uZWxTdGF0c19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMjFfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vUGVlckNvbm5lY3Rpb25Db250cm9sbGVyL0RhdGFDaGFubmVsU3RhdHMgKi8gXCIuL3NyYy9QZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIvRGF0YUNoYW5uZWxTdGF0cy50c1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfUGVlckNvbm5lY3Rpb25Db250cm9sbGVyX0luYm91bmRSVFBTdGF0c19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMjJfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vUGVlckNvbm5lY3Rpb25Db250cm9sbGVyL0luYm91bmRSVFBTdGF0cyAqLyBcIi4vc3JjL1BlZXJDb25uZWN0aW9uQ29udHJvbGxlci9JbmJvdW5kUlRQU3RhdHMudHNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX1BlZXJDb25uZWN0aW9uQ29udHJvbGxlcl9PdXRCb3VuZFJUUFN0YXRzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yM19fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9QZWVyQ29ubmVjdGlvbkNvbnRyb2xsZXIvT3V0Qm91bmRSVFBTdGF0cyAqLyBcIi4vc3JjL1BlZXJDb25uZWN0aW9uQ29udHJvbGxlci9PdXRCb3VuZFJUUFN0YXRzLnRzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9VdGlsX0V2ZW50RW1pdHRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMjRfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vVXRpbC9FdmVudEVtaXR0ZXIgKi8gXCIuL3NyYy9VdGlsL0V2ZW50RW1pdHRlci50c1wiKTtcbi8vIENvcHlyaWdodCBFcGljIEdhbWVzLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cbn0pKCk7XG5cbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fQWZrTG9naWMgPSBfX3dlYnBhY2tfZXhwb3J0c19fLkFma0xvZ2ljO1xudmFyIF9fd2VicGFja19leHBvcnRzX19BZmtUaW1lZE91dEV2ZW50ID0gX193ZWJwYWNrX2V4cG9ydHNfXy5BZmtUaW1lZE91dEV2ZW50O1xudmFyIF9fd2VicGFja19leHBvcnRzX19BZmtXYXJuaW5nQWN0aXZhdGVFdmVudCA9IF9fd2VicGFja19leHBvcnRzX18uQWZrV2FybmluZ0FjdGl2YXRlRXZlbnQ7XG52YXIgX193ZWJwYWNrX2V4cG9ydHNfX0Fma1dhcm5pbmdEZWFjdGl2YXRlRXZlbnQgPSBfX3dlYnBhY2tfZXhwb3J0c19fLkFma1dhcm5pbmdEZWFjdGl2YXRlRXZlbnQ7XG52YXIgX193ZWJwYWNrX2V4cG9ydHNfX0Fma1dhcm5pbmdVcGRhdGVFdmVudCA9IF9fd2VicGFja19leHBvcnRzX18uQWZrV2FybmluZ1VwZGF0ZUV2ZW50O1xudmFyIF9fd2VicGFja19leHBvcnRzX19BZ2dyZWdhdGVkU3RhdHMgPSBfX3dlYnBhY2tfZXhwb3J0c19fLkFnZ3JlZ2F0ZWRTdGF0cztcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fQ2FuZGlkYXRlUGFpclN0YXRzID0gX193ZWJwYWNrX2V4cG9ydHNfXy5DYW5kaWRhdGVQYWlyU3RhdHM7XG52YXIgX193ZWJwYWNrX2V4cG9ydHNfX0NhbmRpZGF0ZVN0YXQgPSBfX3dlYnBhY2tfZXhwb3J0c19fLkNhbmRpZGF0ZVN0YXQ7XG52YXIgX193ZWJwYWNrX2V4cG9ydHNfX0NvbmZpZyA9IF9fd2VicGFja19leHBvcnRzX18uQ29uZmlnO1xudmFyIF9fd2VicGFja19leHBvcnRzX19Db250cm9sU2NoZW1lVHlwZSA9IF9fd2VicGFja19leHBvcnRzX18uQ29udHJvbFNjaGVtZVR5cGU7XG52YXIgX193ZWJwYWNrX2V4cG9ydHNfX0RhdGFDaGFubmVsQ2xvc2VFdmVudCA9IF9fd2VicGFja19leHBvcnRzX18uRGF0YUNoYW5uZWxDbG9zZUV2ZW50O1xudmFyIF9fd2VicGFja19leHBvcnRzX19EYXRhQ2hhbm5lbEVycm9yRXZlbnQgPSBfX3dlYnBhY2tfZXhwb3J0c19fLkRhdGFDaGFubmVsRXJyb3JFdmVudDtcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fRGF0YUNoYW5uZWxPcGVuRXZlbnQgPSBfX3dlYnBhY2tfZXhwb3J0c19fLkRhdGFDaGFubmVsT3BlbkV2ZW50O1xudmFyIF9fd2VicGFja19leHBvcnRzX19EYXRhQ2hhbm5lbFN0YXRzID0gX193ZWJwYWNrX2V4cG9ydHNfXy5EYXRhQ2hhbm5lbFN0YXRzO1xudmFyIF9fd2VicGFja19leHBvcnRzX19FbmNvZGVyU2V0dGluZ3MgPSBfX3dlYnBhY2tfZXhwb3J0c19fLkVuY29kZXJTZXR0aW5ncztcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fRXZlbnRFbWl0dGVyID0gX193ZWJwYWNrX2V4cG9ydHNfXy5FdmVudEVtaXR0ZXI7XG52YXIgX193ZWJwYWNrX2V4cG9ydHNfX0ZsYWdzID0gX193ZWJwYWNrX2V4cG9ydHNfXy5GbGFncztcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fSGlkZUZyZWV6ZUZyYW1lRXZlbnQgPSBfX3dlYnBhY2tfZXhwb3J0c19fLkhpZGVGcmVlemVGcmFtZUV2ZW50O1xudmFyIF9fd2VicGFja19leHBvcnRzX19JbmJvdW5kQXVkaW9TdGF0cyA9IF9fd2VicGFja19leHBvcnRzX18uSW5ib3VuZEF1ZGlvU3RhdHM7XG52YXIgX193ZWJwYWNrX2V4cG9ydHNfX0luYm91bmRWaWRlb1N0YXRzID0gX193ZWJwYWNrX2V4cG9ydHNfXy5JbmJvdW5kVmlkZW9TdGF0cztcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fSW5pdGlhbFNldHRpbmdzID0gX193ZWJwYWNrX2V4cG9ydHNfXy5Jbml0aWFsU2V0dGluZ3M7XG52YXIgX193ZWJwYWNrX2V4cG9ydHNfX0luaXRpYWxTZXR0aW5nc0V2ZW50ID0gX193ZWJwYWNrX2V4cG9ydHNfXy5Jbml0aWFsU2V0dGluZ3NFdmVudDtcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fTGF0ZW5jeVRlc3RSZXN1bHRFdmVudCA9IF9fd2VicGFja19leHBvcnRzX18uTGF0ZW5jeVRlc3RSZXN1bHRFdmVudDtcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fTGF0ZW5jeVRlc3RSZXN1bHRzID0gX193ZWJwYWNrX2V4cG9ydHNfXy5MYXRlbmN5VGVzdFJlc3VsdHM7XG52YXIgX193ZWJwYWNrX2V4cG9ydHNfX0xvYWRGcmVlemVGcmFtZUV2ZW50ID0gX193ZWJwYWNrX2V4cG9ydHNfXy5Mb2FkRnJlZXplRnJhbWVFdmVudDtcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fTG9nZ2VyID0gX193ZWJwYWNrX2V4cG9ydHNfXy5Mb2dnZXI7XG52YXIgX193ZWJwYWNrX2V4cG9ydHNfX01lc3NhZ2VSZWN2ID0gX193ZWJwYWNrX2V4cG9ydHNfXy5NZXNzYWdlUmVjdjtcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fTWVzc2FnZVNlbmQgPSBfX3dlYnBhY2tfZXhwb3J0c19fLk1lc3NhZ2VTZW5kO1xudmFyIF9fd2VicGFja19leHBvcnRzX19NZXNzYWdlU3RyZWFtZXJMaXN0ID0gX193ZWJwYWNrX2V4cG9ydHNfXy5NZXNzYWdlU3RyZWFtZXJMaXN0O1xudmFyIF9fd2VicGFja19leHBvcnRzX19OdW1lcmljUGFyYW1ldGVycyA9IF9fd2VicGFja19leHBvcnRzX18uTnVtZXJpY1BhcmFtZXRlcnM7XG52YXIgX193ZWJwYWNrX2V4cG9ydHNfX09wdGlvblBhcmFtZXRlcnMgPSBfX3dlYnBhY2tfZXhwb3J0c19fLk9wdGlvblBhcmFtZXRlcnM7XG52YXIgX193ZWJwYWNrX2V4cG9ydHNfX091dEJvdW5kVmlkZW9TdGF0cyA9IF9fd2VicGFja19leHBvcnRzX18uT3V0Qm91bmRWaWRlb1N0YXRzO1xudmFyIF9fd2VicGFja19leHBvcnRzX19QaXhlbFN0cmVhbWluZyA9IF9fd2VicGFja19leHBvcnRzX18uUGl4ZWxTdHJlYW1pbmc7XG52YXIgX193ZWJwYWNrX2V4cG9ydHNfX1BsYXlTdHJlYW1FcnJvckV2ZW50ID0gX193ZWJwYWNrX2V4cG9ydHNfXy5QbGF5U3RyZWFtRXJyb3JFdmVudDtcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fUGxheVN0cmVhbUV2ZW50ID0gX193ZWJwYWNrX2V4cG9ydHNfXy5QbGF5U3RyZWFtRXZlbnQ7XG52YXIgX193ZWJwYWNrX2V4cG9ydHNfX1BsYXlTdHJlYW1SZWplY3RlZEV2ZW50ID0gX193ZWJwYWNrX2V4cG9ydHNfXy5QbGF5U3RyZWFtUmVqZWN0ZWRFdmVudDtcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fU2V0dGluZ0Jhc2UgPSBfX3dlYnBhY2tfZXhwb3J0c19fLlNldHRpbmdCYXNlO1xudmFyIF9fd2VicGFja19leHBvcnRzX19TZXR0aW5nRmxhZyA9IF9fd2VicGFja19leHBvcnRzX18uU2V0dGluZ0ZsYWc7XG52YXIgX193ZWJwYWNrX2V4cG9ydHNfX1NldHRpbmdOdW1iZXIgPSBfX3dlYnBhY2tfZXhwb3J0c19fLlNldHRpbmdOdW1iZXI7XG52YXIgX193ZWJwYWNrX2V4cG9ydHNfX1NldHRpbmdPcHRpb24gPSBfX3dlYnBhY2tfZXhwb3J0c19fLlNldHRpbmdPcHRpb247XG52YXIgX193ZWJwYWNrX2V4cG9ydHNfX1NldHRpbmdUZXh0ID0gX193ZWJwYWNrX2V4cG9ydHNfXy5TZXR0aW5nVGV4dDtcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fU2V0dGluZ3NDaGFuZ2VkRXZlbnQgPSBfX3dlYnBhY2tfZXhwb3J0c19fLlNldHRpbmdzQ2hhbmdlZEV2ZW50O1xudmFyIF9fd2VicGFja19leHBvcnRzX19TaWduYWxsaW5nUHJvdG9jb2wgPSBfX3dlYnBhY2tfZXhwb3J0c19fLlNpZ25hbGxpbmdQcm90b2NvbDtcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fU3RhdHNSZWNlaXZlZEV2ZW50ID0gX193ZWJwYWNrX2V4cG9ydHNfXy5TdGF0c1JlY2VpdmVkRXZlbnQ7XG52YXIgX193ZWJwYWNrX2V4cG9ydHNfX1N0cmVhbUxvYWRpbmdFdmVudCA9IF9fd2VicGFja19leHBvcnRzX18uU3RyZWFtTG9hZGluZ0V2ZW50O1xudmFyIF9fd2VicGFja19leHBvcnRzX19TdHJlYW1QcmVDb25uZWN0RXZlbnQgPSBfX3dlYnBhY2tfZXhwb3J0c19fLlN0cmVhbVByZUNvbm5lY3RFdmVudDtcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fU3RyZWFtUHJlRGlzY29ubmVjdEV2ZW50ID0gX193ZWJwYWNrX2V4cG9ydHNfXy5TdHJlYW1QcmVEaXNjb25uZWN0RXZlbnQ7XG52YXIgX193ZWJwYWNrX2V4cG9ydHNfX1N0cmVhbVJlY29ubmVjdEV2ZW50ID0gX193ZWJwYWNrX2V4cG9ydHNfXy5TdHJlYW1SZWNvbm5lY3RFdmVudDtcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fU3RyZWFtZXJMaXN0TWVzc2FnZUV2ZW50ID0gX193ZWJwYWNrX2V4cG9ydHNfXy5TdHJlYW1lckxpc3RNZXNzYWdlRXZlbnQ7XG52YXIgX193ZWJwYWNrX2V4cG9ydHNfX1RleHRQYXJhbWV0ZXJzID0gX193ZWJwYWNrX2V4cG9ydHNfXy5UZXh0UGFyYW1ldGVycztcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fVW5xdWFudGl6ZWRBbmREZW5vcm1hbGl6ZVVuc2lnbmVkID0gX193ZWJwYWNrX2V4cG9ydHNfXy5VbnF1YW50aXplZEFuZERlbm9ybWFsaXplVW5zaWduZWQ7XG52YXIgX193ZWJwYWNrX2V4cG9ydHNfX1ZpZGVvRW5jb2RlckF2Z1FQRXZlbnQgPSBfX3dlYnBhY2tfZXhwb3J0c19fLlZpZGVvRW5jb2RlckF2Z1FQRXZlbnQ7XG52YXIgX193ZWJwYWNrX2V4cG9ydHNfX1ZpZGVvSW5pdGlhbGl6ZWRFdmVudCA9IF9fd2VicGFja19leHBvcnRzX18uVmlkZW9Jbml0aWFsaXplZEV2ZW50O1xudmFyIF9fd2VicGFja19leHBvcnRzX19XZWJSVENTZXR0aW5ncyA9IF9fd2VicGFja19leHBvcnRzX18uV2ViUlRDU2V0dGluZ3M7XG52YXIgX193ZWJwYWNrX2V4cG9ydHNfX1dlYlJ0Y0F1dG9Db25uZWN0RXZlbnQgPSBfX3dlYnBhY2tfZXhwb3J0c19fLldlYlJ0Y0F1dG9Db25uZWN0RXZlbnQ7XG52YXIgX193ZWJwYWNrX2V4cG9ydHNfX1dlYlJ0Y0Nvbm5lY3RlZEV2ZW50ID0gX193ZWJwYWNrX2V4cG9ydHNfXy5XZWJSdGNDb25uZWN0ZWRFdmVudDtcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fV2ViUnRjQ29ubmVjdGluZ0V2ZW50ID0gX193ZWJwYWNrX2V4cG9ydHNfXy5XZWJSdGNDb25uZWN0aW5nRXZlbnQ7XG52YXIgX193ZWJwYWNrX2V4cG9ydHNfX1dlYlJ0Y0Rpc2Nvbm5lY3RlZEV2ZW50ID0gX193ZWJwYWNrX2V4cG9ydHNfXy5XZWJSdGNEaXNjb25uZWN0ZWRFdmVudDtcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fV2ViUnRjRmFpbGVkRXZlbnQgPSBfX3dlYnBhY2tfZXhwb3J0c19fLldlYlJ0Y0ZhaWxlZEV2ZW50O1xudmFyIF9fd2VicGFja19leHBvcnRzX19XZWJSdGNQbGF5ZXJDb250cm9sbGVyID0gX193ZWJwYWNrX2V4cG9ydHNfXy5XZWJSdGNQbGF5ZXJDb250cm9sbGVyO1xudmFyIF9fd2VicGFja19leHBvcnRzX19XZWJSdGNTZHBFdmVudCA9IF9fd2VicGFja19leHBvcnRzX18uV2ViUnRjU2RwRXZlbnQ7XG52YXIgX193ZWJwYWNrX2V4cG9ydHNfX1dlYlNvY2tldENvbnRyb2xsZXIgPSBfX3dlYnBhY2tfZXhwb3J0c19fLldlYlNvY2tldENvbnRyb2xsZXI7XG52YXIgX193ZWJwYWNrX2V4cG9ydHNfX1dlYlhSQ29udHJvbGxlciA9IF9fd2VicGFja19leHBvcnRzX18uV2ViWFJDb250cm9sbGVyO1xudmFyIF9fd2VicGFja19leHBvcnRzX19YckZyYW1lRXZlbnQgPSBfX3dlYnBhY2tfZXhwb3J0c19fLlhyRnJhbWVFdmVudDtcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fWHJTZXNzaW9uRW5kZWRFdmVudCA9IF9fd2VicGFja19leHBvcnRzX18uWHJTZXNzaW9uRW5kZWRFdmVudDtcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fWHJTZXNzaW9uU3RhcnRlZEV2ZW50ID0gX193ZWJwYWNrX2V4cG9ydHNfXy5YclNlc3Npb25TdGFydGVkRXZlbnQ7XG5leHBvcnQgeyBfX3dlYnBhY2tfZXhwb3J0c19fQWZrTG9naWMgYXMgQWZrTG9naWMsIF9fd2VicGFja19leHBvcnRzX19BZmtUaW1lZE91dEV2ZW50IGFzIEFma1RpbWVkT3V0RXZlbnQsIF9fd2VicGFja19leHBvcnRzX19BZmtXYXJuaW5nQWN0aXZhdGVFdmVudCBhcyBBZmtXYXJuaW5nQWN0aXZhdGVFdmVudCwgX193ZWJwYWNrX2V4cG9ydHNfX0Fma1dhcm5pbmdEZWFjdGl2YXRlRXZlbnQgYXMgQWZrV2FybmluZ0RlYWN0aXZhdGVFdmVudCwgX193ZWJwYWNrX2V4cG9ydHNfX0Fma1dhcm5pbmdVcGRhdGVFdmVudCBhcyBBZmtXYXJuaW5nVXBkYXRlRXZlbnQsIF9fd2VicGFja19leHBvcnRzX19BZ2dyZWdhdGVkU3RhdHMgYXMgQWdncmVnYXRlZFN0YXRzLCBfX3dlYnBhY2tfZXhwb3J0c19fQ2FuZGlkYXRlUGFpclN0YXRzIGFzIENhbmRpZGF0ZVBhaXJTdGF0cywgX193ZWJwYWNrX2V4cG9ydHNfX0NhbmRpZGF0ZVN0YXQgYXMgQ2FuZGlkYXRlU3RhdCwgX193ZWJwYWNrX2V4cG9ydHNfX0NvbmZpZyBhcyBDb25maWcsIF9fd2VicGFja19leHBvcnRzX19Db250cm9sU2NoZW1lVHlwZSBhcyBDb250cm9sU2NoZW1lVHlwZSwgX193ZWJwYWNrX2V4cG9ydHNfX0RhdGFDaGFubmVsQ2xvc2VFdmVudCBhcyBEYXRhQ2hhbm5lbENsb3NlRXZlbnQsIF9fd2VicGFja19leHBvcnRzX19EYXRhQ2hhbm5lbEVycm9yRXZlbnQgYXMgRGF0YUNoYW5uZWxFcnJvckV2ZW50LCBfX3dlYnBhY2tfZXhwb3J0c19fRGF0YUNoYW5uZWxPcGVuRXZlbnQgYXMgRGF0YUNoYW5uZWxPcGVuRXZlbnQsIF9fd2VicGFja19leHBvcnRzX19EYXRhQ2hhbm5lbFN0YXRzIGFzIERhdGFDaGFubmVsU3RhdHMsIF9fd2VicGFja19leHBvcnRzX19FbmNvZGVyU2V0dGluZ3MgYXMgRW5jb2RlclNldHRpbmdzLCBfX3dlYnBhY2tfZXhwb3J0c19fRXZlbnRFbWl0dGVyIGFzIEV2ZW50RW1pdHRlciwgX193ZWJwYWNrX2V4cG9ydHNfX0ZsYWdzIGFzIEZsYWdzLCBfX3dlYnBhY2tfZXhwb3J0c19fSGlkZUZyZWV6ZUZyYW1lRXZlbnQgYXMgSGlkZUZyZWV6ZUZyYW1lRXZlbnQsIF9fd2VicGFja19leHBvcnRzX19JbmJvdW5kQXVkaW9TdGF0cyBhcyBJbmJvdW5kQXVkaW9TdGF0cywgX193ZWJwYWNrX2V4cG9ydHNfX0luYm91bmRWaWRlb1N0YXRzIGFzIEluYm91bmRWaWRlb1N0YXRzLCBfX3dlYnBhY2tfZXhwb3J0c19fSW5pdGlhbFNldHRpbmdzIGFzIEluaXRpYWxTZXR0aW5ncywgX193ZWJwYWNrX2V4cG9ydHNfX0luaXRpYWxTZXR0aW5nc0V2ZW50IGFzIEluaXRpYWxTZXR0aW5nc0V2ZW50LCBfX3dlYnBhY2tfZXhwb3J0c19fTGF0ZW5jeVRlc3RSZXN1bHRFdmVudCBhcyBMYXRlbmN5VGVzdFJlc3VsdEV2ZW50LCBfX3dlYnBhY2tfZXhwb3J0c19fTGF0ZW5jeVRlc3RSZXN1bHRzIGFzIExhdGVuY3lUZXN0UmVzdWx0cywgX193ZWJwYWNrX2V4cG9ydHNfX0xvYWRGcmVlemVGcmFtZUV2ZW50IGFzIExvYWRGcmVlemVGcmFtZUV2ZW50LCBfX3dlYnBhY2tfZXhwb3J0c19fTG9nZ2VyIGFzIExvZ2dlciwgX193ZWJwYWNrX2V4cG9ydHNfX01lc3NhZ2VSZWN2IGFzIE1lc3NhZ2VSZWN2LCBfX3dlYnBhY2tfZXhwb3J0c19fTWVzc2FnZVNlbmQgYXMgTWVzc2FnZVNlbmQsIF9fd2VicGFja19leHBvcnRzX19NZXNzYWdlU3RyZWFtZXJMaXN0IGFzIE1lc3NhZ2VTdHJlYW1lckxpc3QsIF9fd2VicGFja19leHBvcnRzX19OdW1lcmljUGFyYW1ldGVycyBhcyBOdW1lcmljUGFyYW1ldGVycywgX193ZWJwYWNrX2V4cG9ydHNfX09wdGlvblBhcmFtZXRlcnMgYXMgT3B0aW9uUGFyYW1ldGVycywgX193ZWJwYWNrX2V4cG9ydHNfX091dEJvdW5kVmlkZW9TdGF0cyBhcyBPdXRCb3VuZFZpZGVvU3RhdHMsIF9fd2VicGFja19leHBvcnRzX19QaXhlbFN0cmVhbWluZyBhcyBQaXhlbFN0cmVhbWluZywgX193ZWJwYWNrX2V4cG9ydHNfX1BsYXlTdHJlYW1FcnJvckV2ZW50IGFzIFBsYXlTdHJlYW1FcnJvckV2ZW50LCBfX3dlYnBhY2tfZXhwb3J0c19fUGxheVN0cmVhbUV2ZW50IGFzIFBsYXlTdHJlYW1FdmVudCwgX193ZWJwYWNrX2V4cG9ydHNfX1BsYXlTdHJlYW1SZWplY3RlZEV2ZW50IGFzIFBsYXlTdHJlYW1SZWplY3RlZEV2ZW50LCBfX3dlYnBhY2tfZXhwb3J0c19fU2V0dGluZ0Jhc2UgYXMgU2V0dGluZ0Jhc2UsIF9fd2VicGFja19leHBvcnRzX19TZXR0aW5nRmxhZyBhcyBTZXR0aW5nRmxhZywgX193ZWJwYWNrX2V4cG9ydHNfX1NldHRpbmdOdW1iZXIgYXMgU2V0dGluZ051bWJlciwgX193ZWJwYWNrX2V4cG9ydHNfX1NldHRpbmdPcHRpb24gYXMgU2V0dGluZ09wdGlvbiwgX193ZWJwYWNrX2V4cG9ydHNfX1NldHRpbmdUZXh0IGFzIFNldHRpbmdUZXh0LCBfX3dlYnBhY2tfZXhwb3J0c19fU2V0dGluZ3NDaGFuZ2VkRXZlbnQgYXMgU2V0dGluZ3NDaGFuZ2VkRXZlbnQsIF9fd2VicGFja19leHBvcnRzX19TaWduYWxsaW5nUHJvdG9jb2wgYXMgU2lnbmFsbGluZ1Byb3RvY29sLCBfX3dlYnBhY2tfZXhwb3J0c19fU3RhdHNSZWNlaXZlZEV2ZW50IGFzIFN0YXRzUmVjZWl2ZWRFdmVudCwgX193ZWJwYWNrX2V4cG9ydHNfX1N0cmVhbUxvYWRpbmdFdmVudCBhcyBTdHJlYW1Mb2FkaW5nRXZlbnQsIF9fd2VicGFja19leHBvcnRzX19TdHJlYW1QcmVDb25uZWN0RXZlbnQgYXMgU3RyZWFtUHJlQ29ubmVjdEV2ZW50LCBfX3dlYnBhY2tfZXhwb3J0c19fU3RyZWFtUHJlRGlzY29ubmVjdEV2ZW50IGFzIFN0cmVhbVByZURpc2Nvbm5lY3RFdmVudCwgX193ZWJwYWNrX2V4cG9ydHNfX1N0cmVhbVJlY29ubmVjdEV2ZW50IGFzIFN0cmVhbVJlY29ubmVjdEV2ZW50LCBfX3dlYnBhY2tfZXhwb3J0c19fU3RyZWFtZXJMaXN0TWVzc2FnZUV2ZW50IGFzIFN0cmVhbWVyTGlzdE1lc3NhZ2VFdmVudCwgX193ZWJwYWNrX2V4cG9ydHNfX1RleHRQYXJhbWV0ZXJzIGFzIFRleHRQYXJhbWV0ZXJzLCBfX3dlYnBhY2tfZXhwb3J0c19fVW5xdWFudGl6ZWRBbmREZW5vcm1hbGl6ZVVuc2lnbmVkIGFzIFVucXVhbnRpemVkQW5kRGVub3JtYWxpemVVbnNpZ25lZCwgX193ZWJwYWNrX2V4cG9ydHNfX1ZpZGVvRW5jb2RlckF2Z1FQRXZlbnQgYXMgVmlkZW9FbmNvZGVyQXZnUVBFdmVudCwgX193ZWJwYWNrX2V4cG9ydHNfX1ZpZGVvSW5pdGlhbGl6ZWRFdmVudCBhcyBWaWRlb0luaXRpYWxpemVkRXZlbnQsIF9fd2VicGFja19leHBvcnRzX19XZWJSVENTZXR0aW5ncyBhcyBXZWJSVENTZXR0aW5ncywgX193ZWJwYWNrX2V4cG9ydHNfX1dlYlJ0Y0F1dG9Db25uZWN0RXZlbnQgYXMgV2ViUnRjQXV0b0Nvbm5lY3RFdmVudCwgX193ZWJwYWNrX2V4cG9ydHNfX1dlYlJ0Y0Nvbm5lY3RlZEV2ZW50IGFzIFdlYlJ0Y0Nvbm5lY3RlZEV2ZW50LCBfX3dlYnBhY2tfZXhwb3J0c19fV2ViUnRjQ29ubmVjdGluZ0V2ZW50IGFzIFdlYlJ0Y0Nvbm5lY3RpbmdFdmVudCwgX193ZWJwYWNrX2V4cG9ydHNfX1dlYlJ0Y0Rpc2Nvbm5lY3RlZEV2ZW50IGFzIFdlYlJ0Y0Rpc2Nvbm5lY3RlZEV2ZW50LCBfX3dlYnBhY2tfZXhwb3J0c19fV2ViUnRjRmFpbGVkRXZlbnQgYXMgV2ViUnRjRmFpbGVkRXZlbnQsIF9fd2VicGFja19leHBvcnRzX19XZWJSdGNQbGF5ZXJDb250cm9sbGVyIGFzIFdlYlJ0Y1BsYXllckNvbnRyb2xsZXIsIF9fd2VicGFja19leHBvcnRzX19XZWJSdGNTZHBFdmVudCBhcyBXZWJSdGNTZHBFdmVudCwgX193ZWJwYWNrX2V4cG9ydHNfX1dlYlNvY2tldENvbnRyb2xsZXIgYXMgV2ViU29ja2V0Q29udHJvbGxlciwgX193ZWJwYWNrX2V4cG9ydHNfX1dlYlhSQ29udHJvbGxlciBhcyBXZWJYUkNvbnRyb2xsZXIsIF9fd2VicGFja19leHBvcnRzX19YckZyYW1lRXZlbnQgYXMgWHJGcmFtZUV2ZW50LCBfX3dlYnBhY2tfZXhwb3J0c19fWHJTZXNzaW9uRW5kZWRFdmVudCBhcyBYclNlc3Npb25FbmRlZEV2ZW50LCBfX3dlYnBhY2tfZXhwb3J0c19fWHJTZXNzaW9uU3RhcnRlZEV2ZW50IGFzIFhyU2Vzc2lvblN0YXJ0ZWRFdmVudCB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWJHbGlMWEJwZUdWc2MzUnlaV0Z0YVc1blpuSnZiblJsYm1RdVpYTnRMbXB6SWl3aWJXRndjR2x1WjNNaU9pSTdPenM3T3pzN096czdPenM3T3pzN1FVRkJRU3hyUkVGQmEwUTdRVUZGYTBJN1FVRkRNVUk3UVVGUFdqdEJRVVYyUWl4TlFVRk5MR0ZCUVdFN1NVRmpkRUlzV1VGRFNTeE5RVUZqTEVWQlEyUXNZMEZCT0VJc1JVRkRPVUlzV1VGQmQwSTdVVUZvUWpWQ0xIbENRVUY1UWp0UlFVTjZRaXhwUWtGQldTeEhRVUZITEVWQlFVVXNRMEZCUXp0UlFVTnNRaXhYUVVGTkxFZEJRVWNzUzBGQlN5eERRVUZETzFGQlEyWXNiMEpCUVdVc1IwRkJSeXhMUVVGTExFTkJRVU03VVVGRGVFSXNZMEZCVXl4SFFVRnJReXhUUVVGVExFTkJRVU03VVVGRGNrUXNZMEZCVXl4SFFVRkhMRU5CUVVNc1EwRkJRenRSUVVOa0xHMUNRVUZqTEVkQlFXMURMRk5CUVZNc1EwRkJRenRSUVZsMlJDeEpRVUZKTEVOQlFVTXNUVUZCVFN4SFFVRkhMRTFCUVUwc1EwRkJRenRSUVVOeVFpeEpRVUZKTEVOQlFVTXNZMEZCWXl4SFFVRkhMR05CUVdNc1EwRkJRenRSUVVOeVF5eEpRVUZKTEVOQlFVTXNXVUZCV1N4SFFVRkhMRmxCUVZrc1EwRkJRenRSUVVOcVF5eEpRVUZKTEVOQlFVTXNjVUpCUVhGQ0xFZEJRVWNzUjBGQlJ5eEZRVUZGTzFsQlF6bENMRTlCUVU4c1EwRkJReXhIUVVGSExFTkJRMUFzZDBSQlFYZEVMRU5CUXpORUxFTkJRVU03VVVGRFRpeERRVUZETEVOQlFVTTdTVUZEVGl4RFFVRkRPMGxCUlVRN08wOUJSVWM3U1VGRFNDeFZRVUZWTzFGQlEwNHNZVUZCWVN4RFFVRkRMRWxCUVVrc1EwRkJReXhqUVVGakxFTkJRVU1zUTBGQlF6dFJRVVZ1UXl4SlFVRkpMRWxCUVVrc1EwRkJReXhOUVVGTkxFbEJRVWtzU1VGQlNTeERRVUZETEdWQlFXVXNSVUZCUlR0WlFVTnlReXhKUVVGSkxFTkJRVU1zYjBKQlFXOUNMRVZCUVVVc1EwRkJRenRaUVVNMVFpeEpRVUZKTEVOQlFVTXNZMEZCWXl4RFFVRkRMR0ZCUVdFc1EwRkROMElzU1VGQlNTeDVSVUZCZVVJc1JVRkJSU3hEUVVOc1F5eERRVUZETzFOQlEwdzdTVUZEVEN4RFFVRkRPMGxCUlVRN08wOUJSVWM3U1VGRFNDeHZRa0ZCYjBJN1VVRkRhRUlzU1VGRFNTeEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMSE5DUVVGelFpeERRVU01UWl3MFJVRkJaME1zUTBGRGJrTXNSMEZCUnl4RFFVRkRPMWxCUTB3c1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eGhRVUZoTEVOQlFVTXNPRVJCUVd0Q0xFTkJRVU1zUlVGREwwTTdXVUZEUlN4SlFVRkpMRU5CUVVNc1RVRkJUU3hIUVVGSExFbEJRVWtzUTBGQlF6dFRRVU4wUWp0aFFVRk5PMWxCUTBnc1NVRkJTU3hEUVVGRExFMUJRVTBzUjBGQlJ5eExRVUZMTEVOQlFVTTdVMEZEZGtJN1VVRkRSQ3hKUVVGSkxFTkJRVU1zYjBKQlFXOUNMRVZCUVVVc1EwRkJRenRKUVVOb1F5eERRVUZETzBsQlJVUTdPMDlCUlVjN1NVRkRTQ3h0UWtGQmJVSTdVVUZEWml4SlFVRkpMRU5CUVVNc1RVRkJUU3hIUVVGSExFdEJRVXNzUTBGQlF6dFJRVU53UWl4SlFVRkpMRU5CUVVNc1pVRkJaU3hIUVVGSExFdEJRVXNzUTBGQlF6dFJRVU0zUWl4WlFVRlpMRU5CUVVNc1NVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZETzFGQlF6ZENMR0ZCUVdFc1EwRkJReXhKUVVGSkxFTkJRVU1zWTBGQll5eERRVUZETEVOQlFVTTdTVUZEZGtNc1EwRkJRenRKUVVWRU96dFBRVVZITzBsQlEwZ3NiMEpCUVc5Q08xRkJRMmhDTEVsQlFVa3NRMEZCUXl4TlFVRk5MRWRCUVVjc1MwRkJTeXhEUVVGRE8wbEJRM2hDTEVOQlFVTTdTVUZGUkRzN1QwRkZSenRKUVVOSUxHOUNRVUZ2UWp0UlFVTm9RaXhKUVVGSkxFbEJRVWtzUTBGQlF5eE5RVUZOTEVsQlFVa3NTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhoUVVGaExFTkJRVU1zT0VSQlFXdENMRU5CUVVNc1JVRkJSVHRaUVVNNVJDeFpRVUZaTEVOQlFVTXNTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJReXhEUVVGRE8xbEJRemRDTEVsQlFVa3NRMEZCUXl4VFFVRlRMRWRCUVVjc1ZVRkJWU3hEUVVOMlFpeEhRVUZITEVWQlFVVXNRMEZCUXl4SlFVRkpMRU5CUVVNc1owSkJRV2RDTEVWQlFVVXNSVUZETjBJc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eHpRa0ZCYzBJc1EwRkRPVUlzTkVWQlFXZERMRU5CUTI1RExFZEJRVWNzU1VGQlNTeERRVU5ZTEVOQlFVTTdVMEZEVER0SlFVTk1MRU5CUVVNN1NVRkZSRHM3VDBGRlJ6dEpRVU5JTEdkQ1FVRm5RanRSUVVOYUxEaEZRVUU0UlR0UlFVTTVSU3hKUVVGSkxFTkJRVU1zYjBKQlFXOUNMRVZCUVVVc1EwRkJRenRSUVVVMVFpdzBRa0ZCTkVJN1VVRkROVUlzU1VGQlNTeERRVUZETEdOQlFXTXNRMEZCUXl4aFFVRmhMRU5CUXpkQ0xFbEJRVWtzZFVWQlFYVkNMRU5CUVVNN1dVRkRlRUlzVTBGQlV5eEZRVUZGTEVsQlFVa3NRMEZCUXl4VFFVRlRPMWxCUTNwQ0xGVkJRVlVzUlVGQlJTeEpRVUZKTEVOQlFVTXNXVUZCV1R0VFFVTm9ReXhEUVVGRExFTkJRMHdzUTBGQlF6dFJRVVZHTEd0RVFVRnJSRHRSUVVOc1JDeEpRVUZKTEVOQlFVTXNVMEZCVXl4SFFVRkhMRWxCUVVrc1EwRkJReXhaUVVGWkxFTkJRVU03VVVGRGJrTXNTVUZCU1N4RFFVRkRMR1ZCUVdVc1IwRkJSeXhKUVVGSkxFTkJRVU03VVVGRE5VSXNTVUZCU1N4RFFVRkRMR05CUVdNc1EwRkJReXhoUVVGaExFTkJRemRDTEVsQlFVa3NjVVZCUVhGQ0xFTkJRVU1zUlVGQlJTeFRRVUZUTEVWQlFVVXNTVUZCU1N4RFFVRkRMRk5CUVZNc1JVRkJSU3hEUVVGRExFTkJRek5FTEVOQlFVTTdVVUZGUml3MlEwRkJOa003VVVGRE4wTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zWVVGQllTeERRVUZETEcxRlFVRjFRaXhEUVVGRExFVkJRVVU3V1VGRGNrUXNlVVJCUVhsRU8xbEJRM3BFTEVsQlFVa3NVVUZCVVN4RFFVRkRMR1ZCUVdVc1JVRkJSVHRuUWtGRE1VSXNVVUZCVVN4RFFVRkRMR1ZCUVdVc1JVRkJSU3hEUVVGRE8yRkJRemxDTzFOQlEwbzdVVUZGUkN3eVEwRkJNa003VVVGRE0wTXNTVUZCU1N4RFFVRkRMR05CUVdNc1IwRkJSeXhYUVVGWExFTkJRVU1zUjBGQlJ5eEZRVUZGTzFsQlEyNURMRWxCUVVrc1EwRkJReXhUUVVGVExFVkJRVVVzUTBGQlF6dFpRVU5xUWl4SlFVRkpMRWxCUVVrc1EwRkJReXhUUVVGVExFbEJRVWtzUTBGQlF5eEZRVUZGTzJkQ1FVTnlRaXh2UlVGQmIwVTdaMEpCUTNCRkxFbEJRVWtzUTBGQlF5eGpRVUZqTEVOQlFVTXNZVUZCWVN4RFFVTTNRaXhKUVVGSkxHZEZRVUZuUWl4RlFVRkZMRU5CUTNwQ0xFTkJRVU03WjBKQlEwWXNTVUZCU1N4RFFVRkRMSEZDUVVGeFFpeEZRVUZGTEVOQlFVTTdaMEpCUXpkQ0xITkVRVUZWTEVOQlEwNHNaMFZCUVc5Q0xFVkJRVVVzUlVGRGRFSXNPRU5CUVRoRExFTkJRMnBFTEVOQlFVTTdaMEpCUlVZc2EwUkJRV3RFTzJkQ1FVTnNSQ3hKUVVGSkxFTkJRVU1zYlVKQlFXMUNMRVZCUVVVc1EwRkJRenRoUVVNNVFqdHBRa0ZCVFR0blFrRkRTQ3hKUVVGSkxFTkJRVU1zWTBGQll5eERRVUZETEdGQlFXRXNRMEZETjBJc1NVRkJTU3h4UlVGQmNVSXNRMEZCUXl4RlFVRkZMRk5CUVZNc1JVRkJSU3hKUVVGSkxFTkJRVU1zVTBGQlV5eEZRVUZGTEVOQlFVTXNRMEZETTBRc1EwRkJRenRoUVVOTU8xRkJRMHdzUTBGQlF5eEZRVUZGTEVsQlFVa3NRMEZCUXl4RFFVRkRPMGxCUTJJc1EwRkJRenREUVVOS096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3p0QlF6ZEtSQ3hyUkVGQmEwUTdRVUZGVWp0QlFVTkZPMEZCUTBrN1FVRkRTanRCUVVOSk8wRkJRekJDTzBGQlJ6RkZPenM3UjBGSFJ6dEJRVU5KTEUxQlFVMHNTMEZCU3pzN1FVRkRVQ3hwUWtGQlZ5eEhRVUZITEdGQlFYTkNMRU5CUVVNN1FVRkRja01zYlVKQlFXRXNSMEZCUnl4bFFVRjNRaXhEUVVGRE8wRkJRM3BETEd0Q1FVRlpMRWRCUVVjc1pVRkJkMElzUTBGQlF6dEJRVU40UXl4elFrRkJaMElzUjBGQlJ5eG5Ra0ZCZVVJc1EwRkJRenRCUVVNM1F5eDFRa0ZCYVVJc1IwRkJSeXhsUVVGM1FpeERRVUZETzBGQlF6ZERMRzlDUVVGakxFZEJRVWNzWjBKQlFYbENMRU5CUVVNN1FVRkRNME1zWlVGQlV5eEhRVUZITEZkQlFXOUNMRU5CUVVNN1FVRkRha01zTUVKQlFXOUNMRWRCUVVjc2MwSkJRU3RDTEVOQlFVTTdRVUZEZGtRc2VVSkJRVzFDTEVkQlFVY3NhVUpCUVRCQ0xFTkJRVU03UVVGRGFrUXNOa0pCUVhWQ0xFZEJRVWNzYTBKQlFUSkNMRU5CUVVNN1FVRkRkRVFzWlVGQlV5eEhRVUZITEZkQlFXOUNMRU5CUVVNN1FVRkRha01zY1VKQlFXVXNSMEZCUnl4cFFrRkJNRUlzUTBGQlF6dEJRVU0zUXl4NVFrRkJiVUlzUjBGQlJ5eHhRa0ZCT0VJc1EwRkJRenRCUVVOeVJDeFpRVUZOTEVkQlFVY3NVVUZCYVVJc1EwRkJRenRCUVVNelFpeHRRa0ZCWVN4SFFVRkhMR1ZCUVhkQ0xFTkJRVU03UVVGRGVrTXNaMEpCUVZVc1IwRkJSeXhaUVVGeFFpeERRVUZETzBGQlEyNURMR2RDUVVGVkxFZEJRVWNzV1VGQmNVSXNRMEZCUXp0QlFVTnVReXhyUWtGQldTeEhRVUZITEdOQlFYVkNMRU5CUVVNN1FVRkRka01zZFVKQlFXbENMRWRCUVVjc2JVSkJRVFJDTEVOQlFVTTdRVUZOTlVRc1RVRkJUU3hSUVVGUkxFZEJRVWNzUTBGQlF5eEZRVUZWTEVWQlFXdENMRVZCUVVVc1EwRkROVU1zVFVGQlRTeERRVUZETEcxQ1FVRnRRaXhEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETEVsQlFVa3NRMEZEYkVNc1EwRkJReXhKUVVGbExFVkJRVVVzUlVGQlJTeERRVUZETEV0QlFVc3NRMEZCUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhGUVVGRkxFTkJRekZETEVOQlFVTTdRVUZGVGpzN08wZEJSMGM3UVVGRFNTeE5RVUZOTEdsQ1FVRnBRanM3UVVGRGJrSXNaME5CUVdNc1IwRkJSeXhaUVVGeFFpeERRVUZETzBGQlEzWkRMSFZDUVVGTExFZEJRVWNzVDBGQlowSXNRMEZCUXp0QlFVTjZRaXgxUWtGQlN5eEhRVUZITEU5QlFXZENMRU5CUVVNN1FVRkRla0lzTWtKQlFWTXNSMEZCUnl4WFFVRnZRaXhEUVVGRE8wRkJRMnBETEd0RFFVRm5RaXhIUVVGSExHdENRVUV5UWl4RFFVRkRPMEZCUXk5RExHdERRVUZuUWl4SFFVRkhMR3RDUVVFeVFpeERRVUZETzBGQlF5OURMSE5EUVVGdlFpeEhRVUZITEhOQ1FVRXJRaXhEUVVGRE8wRkJWV3hGTEUxQlFVMHNWMEZCVnl4SFFVRkhMRU5CUVVNc1JVRkJWU3hGUVVFNFFpeEZRVUZGTEVOQlF6TkVMRTFCUVUwc1EwRkJReXh0UWtGQmJVSXNRMEZCUXl4cFFrRkJhVUlzUTBGQlF5eERRVUZETEVsQlFVa3NRMEZET1VNc1EwRkJReXhKUVVFeVFpeEZRVUZGTEVWQlFVVXNRMEZCUXl4cFFrRkJhVUlzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RlFVRkZMRU5CUTJ4RkxFTkJRVU03UVVGRlRqczdPMGRCUjBjN1FVRkRTU3hOUVVGTkxHTkJRV003TzBGQlEyaENMR3REUVVGdFFpeEhRVUZITEVsQlFXRXNRMEZCUXp0QlFWTXZReXhOUVVGTkxGRkJRVkVzUjBGQlJ5eERRVUZETEVWQlFWVXNSVUZCTWtJc1JVRkJSU3hEUVVOeVJDeE5RVUZOTEVOQlFVTXNiVUpCUVcxQ0xFTkJRVU1zWTBGQll5eERRVUZETEVOQlFVTXNTVUZCU1N4RFFVTXpReXhEUVVGRExFbEJRWGRDTEVWQlFVVXNSVUZCUlN4RFFVRkRMR05CUVdNc1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eEZRVUZGTEVOQlF6VkVMRU5CUVVNN1FVRkZUanM3TzBkQlIwYzdRVUZEU1N4TlFVRk5MR2RDUVVGblFqczdRVUZEYkVJc0swSkJRV01zUjBGQlJ5eG5Ra0ZCZVVJc1EwRkJRenRCUVVNelF5d3lRa0ZCVlN4SFFVRkhMRmxCUVhGQ0xFTkJRVU03UVVGVE9VTXNUVUZCVFN4VlFVRlZMRWRCUVVjc1EwRkJReXhGUVVGVkxFVkJRVFpDTEVWQlFVVXNRMEZEZWtRc1RVRkJUU3hEUVVGRExHMUNRVUZ0UWl4RFFVRkRMR2RDUVVGblFpeERRVUZETEVOQlFVTXNTVUZCU1N4RFFVTTNReXhEUVVGRExFbEJRVEJDTEVWQlFVVXNSVUZCUlN4RFFVRkRMR2RDUVVGblFpeERRVUZETEVsQlFVa3NRMEZCUXl4TFFVRkxMRVZCUVVVc1EwRkRhRVVzUTBGQlF6dEJRVGhDUXl4TlFVRk5MRTFCUVUwN1NVRmxaaXd3UTBGQk1FTTdTVUZGTVVNc1dVRkJXU3hUUVVGMVFpeEZRVUZGTzFGQmFFSnlReXh4UjBGQmNVYzdVVUZETjBZc1ZVRkJTeXhIUVVGSExFbEJRVWtzUjBGQlJ5eEZRVUY1UWl4RFFVRkRPMUZCUldwRUxEUkdRVUUwUmp0UlFVTndSaXh6UWtGQmFVSXNSMEZCUnl4SlFVRkpMRWRCUVVjc1JVRkJkVU1zUTBGQlF6dFJRVVV6UlN4NVJFRkJlVVE3VVVGRGFrUXNiVUpCUVdNc1IwRkJSeXhKUVVGSkxFZEJRVWNzUlVGQmEwTXNRMEZCUXp0UlFVVnVSU3g1UkVGQmVVUTdVVUZEYWtRc2NVSkJRV2RDTEVkQlFVY3NTVUZCU1N4SFFVRkhMRVZCUVhORExFTkJRVU03VVVGUGNrVXNUVUZCVFN4RlFVRkZMR1ZCUVdVc1JVRkJSU3haUVVGWkxFVkJRVVVzUjBGQlJ5eE5RVUZOTEVOQlFVTTdVVUZEYWtRc1NVRkJTU3hEUVVGRExHRkJRV0VzUjBGQlJ5eERRVUZETEVOQlFVTXNXVUZCV1N4RFFVRkRPMUZCUTNCRExFbEJRVWtzUTBGQlF5eDFRa0ZCZFVJc1EwRkJReXhKUVVGSkxFTkJRVU1zWVVGQllTeERRVUZETEVOQlFVTTdVVUZEYWtRc1NVRkJTU3hsUVVGbExFVkJRVVU3V1VGRGFrSXNTVUZCU1N4RFFVRkRMRmRCUVZjc1EwRkJReXhsUVVGbExFTkJRVU1zUTBGQlF6dFRRVU55UXp0SlFVTk1MRU5CUVVNN1NVRkZSRHM3TzA5QlIwYzdTVUZEU0N4SlFVRlhMRmxCUVZrN1VVRkRia0lzVDBGQlR5eEpRVUZKTEVOQlFVTXNZVUZCWVN4RFFVRkRPMGxCUXpsQ0xFTkJRVU03U1VGRlJEczdUMEZGUnp0SlFVTkxMSFZDUVVGMVFpeERRVUZETEZsQlFYRkNPMUZCUTJwRU96dFhRVVZITzFGQlJVZ3NTVUZCU1N4RFFVRkRMR05CUVdNc1EwRkJReXhIUVVGSExFTkJRMjVDTEdOQlFXTXNRMEZCUXl4dFFrRkJiVUlzUlVGRGJFTXNTVUZCU1N4eFJFRkJWeXhEUVVOWUxHTkJRV01zUTBGQlF5eHRRa0ZCYlVJc1JVRkRiRU1zWjBKQlFXZENMRVZCUTJoQ0xEaENRVUU0UWl4RlFVTTVRaXhEUVVGRExGRkJRVkVzUTBGQlF5eFJRVUZSTEV0QlFVc3NVVUZCVVN4RFFVRkRMRU5CUVVNc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF5eERRVUZETEU5QlFVOHNRMEZCUXp0WlFVTnFSQ3hOUVVGTkxFTkJRVU1zVVVGQlVTeERRVUZETEZGQlFWRTdXVUZEZUVJc0swTkJRU3RETzFsQlF5OURMRU5CUVVNc1RVRkJUU3hEUVVGRExGRkJRVkVzUTBGQlF5eEpRVUZKTEV0QlFVc3NTVUZCU1R0blFrRkRPVUlzVFVGQlRTeERRVUZETEZGQlFWRXNRMEZCUXl4SlFVRkpMRXRCUVVzc1JVRkJSVHRuUWtGRGRrSXNRMEZCUXl4RFFVRkRMRVZCUVVVN1owSkJRMG9zUTBGQlF5eERRVUZETEVsQlFVa3NUVUZCVFN4RFFVRkRMRkZCUVZFc1EwRkJReXhKUVVGSkxFVkJRVVVzUTBGQlF5eEZRVU55UXl4WlFVRlpMRU5CUTJZc1EwRkRTaXhEUVVGRE8xRkJSVVlzU1VGQlNTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExFZEJRVWNzUTBGRGNrSXNaMEpCUVdkQ0xFTkJRVU1zVlVGQlZTeEZRVU16UWl4SlFVRkpMSGxFUVVGaExFTkJRMklzWjBKQlFXZENMRU5CUVVNc1ZVRkJWU3hGUVVNelFpeGhRVUZoTEVWQlEySXNiVU5CUVcxRExFVkJRMjVETEVWQlFVVXNSVUZEUml4RlFVRkZMRVZCUTBZc1dVRkJXU3hEUVVObUxFTkJRMG9zUTBGQlF6dFJRVVZHT3p0WFFVVkhPMUZCUTBnc1NVRkJTU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMRWRCUVVjc1EwRkRja0lzWjBKQlFXZENMRU5CUVVNc1kwRkJZeXhGUVVNdlFpeEpRVUZKTEhsRVFVRmhMRU5CUTJJc1owSkJRV2RDTEVOQlFVTXNZMEZCWXl4RlFVTXZRaXhwUWtGQmFVSXNSVUZEYWtJc2VVUkJRWGxFTEVWQlEzcEVMRFpGUVVFMlJTeEZRVU0zUlN4RFFVRkRPMWxCUTBjc1RVRkJUU3h6UWtGQmMwSXNSMEZCYTBJc1JVRkJSU3hEUVVGRE8xbEJRMnBFTEc5R1FVRnZSanRaUVVOd1JpeEpRVUZKTEVOQlFVTXNZMEZCWXl4RFFVRkRMR1ZCUVdVc1JVRkJSVHRuUWtGRGFrTXNjMEpCUVhOQ0xFTkJRVU1zU1VGQlNTeERRVUZETERCQ1FVRXdRaXhEUVVGRExFTkJRVU03WjBKQlEzaEVMRTlCUVU4c2MwSkJRWE5DTEVOQlFVTTdZVUZEYWtNN1dVRkZSQ3hOUVVGTkxFOUJRVThzUjBGQlJ5eHZRa0ZCYjBJc1EwRkJRenRaUVVOeVF5eE5RVUZOTEUxQlFVMHNSMEZEVWl4alFVRmpMRU5CUVVNc1pVRkJaU3hEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETEUxQlFVMHNRMEZCUXp0WlFVTnVSQ3hOUVVGTkxFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVTXNTMEZCU3l4RlFVRkZMRVZCUVVVN1owSkJRM0pDTEUxQlFVMHNSMEZCUnl4SFFVTk1MRXRCUVVzc1EwRkJReXhSUVVGUkxFTkJRVU1zUzBGQlN5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenR2UWtGRE5VSXNSMEZCUnp0dlFrRkRTQ3hEUVVGRExFdEJRVXNzUTBGQlF5eFhRVUZYTEVsQlFVa3NSVUZCUlN4RFFVRkRMRU5CUVVNN1owSkJRemxDTEUxQlFVMHNTMEZCU3l4SFFVRkhMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTTdaMEpCUTJoRExFbEJRVWtzUzBGQlN5eExRVUZMTEVsQlFVa3NSVUZCUlR0dlFrRkRhRUlzYzBKQlFYTkNMRU5CUVVNc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETzJsQ1FVTndRenRaUVVOTUxFTkJRVU1zUTBGQlF5eERRVUZETzFsQlEwZ3NUMEZCVHl4elFrRkJjMElzUTBGQlF6dFJRVU5zUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hGUVVOS0xGbEJRVmtzUTBGRFppeERRVU5LTEVOQlFVTTdVVUZGUmpzN1YwRkZSenRSUVVWSUxFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNSMEZCUnl4RFFVTldMRXRCUVVzc1EwRkJReXhYUVVGWExFVkJRMnBDTEVsQlFVa3NjVVJCUVZjc1EwRkRXQ3hMUVVGTExFTkJRVU1zVjBGQlZ5eEZRVU5xUWl4M1FrRkJkMElzUlVGRGVFSXNjVWRCUVhGSExFVkJRM0pITEV0QlFVc3NSVUZEVEN4WlFVRlpMRU5CUTJZc1EwRkRTaXhEUVVGRE8xRkJSVVlzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4SFFVRkhMRU5CUTFZc1MwRkJTeXhEUVVGRExHRkJRV0VzUlVGRGJrSXNTVUZCU1N4eFJFRkJWeXhEUVVOWUxFdEJRVXNzUTBGQlF5eGhRVUZoTEVWQlEyNUNMR2xDUVVGcFFpeEZRVU5xUWl4NVJrRkJlVVlzUlVGRGVrWXNTVUZCU1N4RlFVTktMRmxCUVZrc1EwRkRaaXhEUVVOS0xFTkJRVU03VVVGRlJpeEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWRCUVVjc1EwRkRWaXhMUVVGTExFTkJRVU1zWjBKQlFXZENMRVZCUTNSQ0xFbEJRVWtzY1VSQlFWY3NRMEZEV0N4TFFVRkxMRU5CUVVNc1owSkJRV2RDTEVWQlEzUkNMRzlDUVVGdlFpeEZRVU53UWl4cFJrRkJhVVlzUlVGRGFrWXNTMEZCU3l4RlFVTk1MRmxCUVZrc1EwRkRaaXhEUVVOS0xFTkJRVU03VVVGRlJpeEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWRCUVVjc1EwRkRWaXhMUVVGTExFTkJRVU1zVFVGQlRTeEZRVU5hTEVsQlFVa3NjVVJCUVZjc1EwRkRXQ3hMUVVGTExFTkJRVU1zVFVGQlRTeEZRVU5hTEdkQ1FVRm5RaXhGUVVOb1FpeDFSVUZCZFVVc1JVRkRka1VzUzBGQlN5eEZRVU5NTEZsQlFWa3NRMEZEWml4RFFVTktMRU5CUVVNN1VVRkZSaXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVkQlFVY3NRMEZEVml4TFFVRkxMRU5CUVVNc1pVRkJaU3hGUVVOeVFpeEpRVUZKTEhGRVFVRlhMRU5CUTFnc1MwRkJTeXhEUVVGRExHVkJRV1VzUlVGRGNrSXNiVUpCUVcxQ0xFVkJRMjVDTEdsRFFVRnBReXhGUVVOcVF5eExRVUZMTEVWQlEwd3NXVUZCV1N4RFFVTm1MRU5CUTBvc1EwRkJRenRSUVVWR0xFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNSMEZCUnl4RFFVTldMRXRCUVVzc1EwRkJReXh0UWtGQmJVSXNSVUZEZWtJc1NVRkJTU3h4UkVGQlZ5eERRVU5ZTEV0QlFVc3NRMEZCUXl4dFFrRkJiVUlzUlVGRGVrSXNkVUpCUVhWQ0xFVkJRM1pDTEhkSVFVRjNTQ3hGUVVONFNDeEpRVUZKTEVWQlEwb3NXVUZCV1N4RFFVTm1MRU5CUTBvc1EwRkJRenRSUVVWR0xFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNSMEZCUnl4RFFVTldMRXRCUVVzc1EwRkJReXhUUVVGVExFVkJRMllzU1VGQlNTeHhSRUZCVnl4RFFVTllMRXRCUVVzc1EwRkJReXhUUVVGVExFVkJRMllzV1VGQldTeEZRVU5hTERKRFFVRXlReXhGUVVNelF5eExRVUZMTEVWQlEwd3NXVUZCV1N4RFFVTm1MRU5CUTBvc1EwRkJRenRSUVVWR0xFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNSMEZCUnl4RFFVTldMRXRCUVVzc1EwRkJReXh0UWtGQmJVSXNSVUZEZWtJc1NVRkJTU3h4UkVGQlZ5eERRVU5ZTEV0QlFVc3NRMEZCUXl4dFFrRkJiVUlzUlVGRGVrSXNkMEpCUVhkQ0xFVkJRM2hDTERKRFFVRXlReXhGUVVNelF5eEpRVUZKTEVWQlEwb3NXVUZCV1N4RFFVTm1MRU5CUTBvc1EwRkJRenRSUVVWR0xFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNSMEZCUnl4RFFVTldMRXRCUVVzc1EwRkJReXhqUVVGakxFVkJRM0JDTEVsQlFVa3NjVVJCUVZjc1EwRkRXQ3hMUVVGTExFTkJRVU1zWTBGQll5eEZRVU53UWl4clFrRkJhMElzUlVGRGJFSXNaMFJCUVdkRUxFVkJRMmhFTEV0QlFVc3NSVUZEVEN4WlFVRlpMRU5CUTJZc1EwRkRTaXhEUVVGRE8xRkJSVVlzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4SFFVRkhMRU5CUTFZc1MwRkJTeXhEUVVGRExGTkJRVk1zUlVGRFppeEpRVUZKTEhGRVFVRlhMRU5CUTFnc1MwRkJTeXhEUVVGRExGTkJRVk1zUlVGRFppeFpRVUZaTEVWQlExb3NORU5CUVRSRExFVkJRelZETEV0QlFVc3NSVUZEVEN4WlFVRlpMRU5CUTJZc1EwRkRTaXhEUVVGRE8xRkJSVVlzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4SFFVRkhMRU5CUTFZc1MwRkJTeXhEUVVGRExGbEJRVmtzUlVGRGJFSXNTVUZCU1N4eFJFRkJWeXhEUVVOWUxFdEJRVXNzUTBGQlF5eFpRVUZaTEVWQlEyeENMR0ZCUVdFc1JVRkRZaXh4UkVGQmNVUXNSVUZEY2tRc1MwRkJTeXhGUVVOTUxGbEJRVmtzUTBGRFppeERRVU5LTEVOQlFVTTdVVUZGUml4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFZEJRVWNzUTBGRFZpeExRVUZMTEVOQlFVTXNkVUpCUVhWQ0xFVkJRemRDTEVsQlFVa3NjVVJCUVZjc1EwRkRXQ3hMUVVGTExFTkJRVU1zZFVKQlFYVkNMRVZCUXpkQ0xESkNRVUV5UWl4RlFVTXpRaXh0U0VGQmJVZ3NSVUZEYmtnc1MwRkJTeXhGUVVOTUxGbEJRVmtzUTBGRFppeERRVU5LTEVOQlFVTTdVVUZGUml4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFZEJRVWNzUTBGRFZpeExRVUZMTEVOQlFVTXNhVUpCUVdsQ0xFVkJRM1pDTEVsQlFVa3NjVVJCUVZjc1EwRkRXQ3hMUVVGTExFTkJRVU1zYVVKQlFXbENMRVZCUTNaQ0xEaENRVUU0UWl4RlFVTTVRaXgxU1VGQmRVa3NSVUZEZGtrc1MwRkJTeXhGUVVOTUxGbEJRVmtzUlVGRFdpeERRVUZETEdWQlFYZENMRVZCUVVVc1QwRkJiMElzUlVGQlJTeEZRVUZGTzFsQlF5OURMRTlCUVU4c1EwRkJReXhMUVVGTExFZEJRVWNzYlVKQlFXMUNMR1ZCUVdVc1EwRkJReXhEUVVGRExFTkJRVU1zVlVGQlZTeERRVUZETEVOQlFVTXNRMEZCUXl4UlFVRlJMRkZCUVZFc1EwRkJRenRSUVVOMlJpeERRVUZETEVOQlEwb3NRMEZEU2l4RFFVRkRPMUZCUlVZc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eEhRVUZITEVOQlExWXNTMEZCU3l4RFFVRkRMRzlDUVVGdlFpeEZRVU14UWl4SlFVRkpMSEZFUVVGWExFTkJRMWdzUzBGQlN5eERRVUZETEc5Q1FVRnZRaXhGUVVNeFFpeDVRa0ZCZVVJc1JVRkRla0lzTWtsQlFUSkpMRVZCUXpOSkxFdEJRVXNzUlVGRFRDeFpRVUZaTEVOQlEyWXNRMEZEU2l4RFFVRkRPMUZCUlVZc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eEhRVUZITEVOQlExWXNTMEZCU3l4RFFVRkRMR0ZCUVdFc1JVRkRia0lzU1VGQlNTeHhSRUZCVnl4RFFVTllMRXRCUVVzc1EwRkJReXhoUVVGaExFVkJRMjVDTEdkQ1FVRm5RaXhGUVVOb1FpdzRRMEZCT0VNc1JVRkRPVU1zU1VGQlNTeEZRVU5LTEZsQlFWa3NRMEZEWml4RFFVTktMRU5CUVVNN1VVRkZSaXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVkQlFVY3NRMEZEVml4TFFVRkxMRU5CUVVNc1ZVRkJWU3hGUVVOb1FpeEpRVUZKTEhGRVFVRlhMRU5CUTFnc1MwRkJTeXhEUVVGRExGVkJRVlVzUlVGRGFFSXNZVUZCWVN4RlFVTmlMREpEUVVFeVF5eEZRVU16UXl4SlFVRkpMRVZCUTBvc1dVRkJXU3hEUVVObUxFTkJRMG9zUTBGQlF6dFJRVVZHTEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1IwRkJSeXhEUVVOV0xFdEJRVXNzUTBGQlF5eFZRVUZWTEVWQlEyaENMRWxCUVVrc2NVUkJRVmNzUTBGRFdDeExRVUZMTEVOQlFVTXNWVUZCVlN4RlFVTm9RaXhoUVVGaExFVkJRMklzTWtOQlFUSkRMRVZCUXpORExFbEJRVWtzUlVGRFNpeFpRVUZaTEVOQlEyWXNRMEZEU2l4RFFVRkRPMUZCUlVZc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eEhRVUZITEVOQlExWXNTMEZCU3l4RFFVRkRMRmxCUVZrc1JVRkRiRUlzU1VGQlNTeHhSRUZCVnl4RFFVTllMRXRCUVVzc1EwRkJReXhaUVVGWkxFVkJRMnhDTEdWQlFXVXNSVUZEWml3MlEwRkJOa01zUlVGRE4wTXNTVUZCU1N4RlFVTktMRmxCUVZrc1EwRkRaaXhEUVVOS0xFTkJRVU03VVVGRlJpeEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWRCUVVjc1EwRkRWaXhMUVVGTExFTkJRVU1zYVVKQlFXbENMRVZCUTNaQ0xFbEJRVWtzY1VSQlFWY3NRMEZEV0N4TFFVRkxMRU5CUVVNc2FVSkJRV2xDTEVWQlEzWkNMSEZDUVVGeFFpeEZRVU55UWl4dFJFRkJiVVFzUlVGRGJrUXNTVUZCU1N4RlFVTktMRmxCUVZrc1EwRkRaaXhEUVVOS0xFTkJRVU03VVVGRlJqczdWMEZGUnp0UlFVVklMRWxCUVVrc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4SFFVRkhMRU5CUTNSQ0xHbENRVUZwUWl4RFFVRkRMR05CUVdNc1JVRkRhRU1zU1VGQlNTeDVSRUZCWVN4RFFVTmlMR2xDUVVGcFFpeERRVUZETEdOQlFXTXNSVUZEYUVNc1lVRkJZU3hGUVVOaUxESkdRVUV5Uml4RlFVTXpSaXhEUVVGRExFTkJRVU1zVDBGQlR5eEZRVU5VTEVkQlFVY3NRMEZCUXl4UFFVRlBMRVZCUTFnc1IwRkJSeXhEUVVGRExGTkJRVk1zUlVGRFlpeFpRVUZaTEVOQlEyWXNRMEZEU2l4RFFVRkRPMUZCUlVZc1NVRkJTU3hEUVVGRExHbENRVUZwUWl4RFFVRkRMRWRCUVVjc1EwRkRkRUlzYVVKQlFXbENMRU5CUVVNc2IwSkJRVzlDTEVWQlEzUkRMRWxCUVVrc2VVUkJRV0VzUTBGRFlpeHBRa0ZCYVVJc1EwRkJReXh2UWtGQmIwSXNSVUZEZEVNc1owSkJRV2RDTEVWQlEyaENMSGRHUVVGM1JpeEZRVU40Uml4RFFVRkRMRU5CUVVNc1QwRkJUeXhGUVVOVUxFZEJRVWNzUTBGQlF5eFBRVUZQTEVWQlExZ3NRMEZCUXl4RFFVRkRMRk5CUVZNc1JVRkRXQ3haUVVGWkxFTkJRMllzUTBGRFNpeERRVUZETzFGQlJVWXNTVUZCU1N4RFFVRkRMR2xDUVVGcFFpeERRVUZETEVkQlFVY3NRMEZEZEVJc2FVSkJRV2xDTEVOQlFVTXNTMEZCU3l4RlFVTjJRaXhKUVVGSkxIbEVRVUZoTEVOQlEySXNhVUpCUVdsQ0xFTkJRVU1zUzBGQlN5eEZRVU4yUWl4UlFVRlJMRVZCUTFJc01rZEJRVEpITEVWQlF6TkhMRU5CUVVNc1EwRkJReXhQUVVGUExFVkJRMVFzUlVGQlJTeERRVUZETEU5QlFVOHNSVUZEVml4RFFVRkRMRU5CUVVNc1UwRkJVeXhGUVVOWUxGbEJRVmtzUTBGRFppeERRVU5LTEVOQlFVTTdVVUZGUml4SlFVRkpMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTXNSMEZCUnl4RFFVTjBRaXhwUWtGQmFVSXNRMEZCUXl4TFFVRkxMRVZCUTNaQ0xFbEJRVWtzZVVSQlFXRXNRMEZEWWl4cFFrRkJhVUlzUTBGQlF5eExRVUZMTEVWQlEzWkNMRkZCUVZFc1JVRkRVaXd5UjBGQk1rY3NSVUZETTBjc1EwRkJReXhEUVVGRExFOUJRVThzUlVGRFZDeEZRVUZGTEVOQlFVTXNUMEZCVHl4RlFVTldMRVZCUVVVc1EwRkJReXhUUVVGVExFVkJRMW9zV1VGQldTeERRVU5tTEVOQlEwb3NRMEZCUXp0UlFVVkdMRWxCUVVrc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4SFFVRkhMRU5CUTNSQ0xHbENRVUZwUWl4RFFVRkRMRk5CUVZNc1JVRkRNMElzU1VGQlNTeDVSRUZCWVN4RFFVTmlMR2xDUVVGcFFpeERRVUZETEZOQlFWTXNSVUZETTBJc1UwRkJVeXhGUVVOVUxEWkVRVUUyUkN4RlFVTTNSQ3hEUVVGRExFTkJRVU1zVDBGQlR5eEZRVU5VTEVkQlFVY3NRMEZCUXl4UFFVRlBMRVZCUTFnc1JVRkJSU3hEUVVGRExGTkJRVk1zUlVGRFdpeFpRVUZaTEVOQlEyWXNRMEZEU2l4RFFVRkRPMUZCUlVZc1NVRkJTU3hEUVVGRExHbENRVUZwUWl4RFFVRkRMRWRCUVVjc1EwRkRkRUlzYVVKQlFXbENMRU5CUVVNc1owSkJRV2RDTEVWQlEyeERMRWxCUVVrc2VVUkJRV0VzUTBGRFlpeHBRa0ZCYVVJc1EwRkJReXhuUWtGQlowSXNSVUZEYkVNc2IwSkJRVzlDTEVWQlEzQkNMRFpEUVVFMlF5eEZRVU0zUXl4RFFVRkRMRU5CUVVNc1QwRkJUeXhGUVVOVUxFMUJRVTBzUTBGQlF5eFBRVUZQTEVWQlEyUXNRMEZCUXl4RFFVRkRMRk5CUVZNc1JVRkRXQ3haUVVGWkxFTkJRMllzUTBGRFNpeERRVUZETzFGQlJVWXNTVUZCU1N4RFFVRkRMR2xDUVVGcFFpeERRVUZETEVkQlFVY3NRMEZEZEVJc2FVSkJRV2xDTEVOQlFVTXNaMEpCUVdkQ0xFVkJRMnhETEVsQlFVa3NlVVJCUVdFc1EwRkRZaXhwUWtGQmFVSXNRMEZCUXl4blFrRkJaMElzUlVGRGJFTXNiMEpCUVc5Q0xFVkJRM0JDTERaRFFVRTJReXhGUVVNM1F5eERRVUZETEVOQlFVTXNUMEZCVHl4RlFVTlVMRTFCUVUwc1EwRkJReXhQUVVGUExFVkJRMlFzUTBGQlF5eERRVUZETEZOQlFWTXNSVUZEV0N4WlFVRlpMRU5CUTJZc1EwRkRTaXhEUVVGRE8wbEJRMDRzUTBGQlF6dEpRVVZFT3pzN08wOUJTVWM3U1VGRFNDeHRRMEZCYlVNc1EwRkRMMElzUlVGQmQwSXNSVUZEZUVJc2FVSkJRVFpETzFGQlJUZERMRWxCUVVrc1NVRkJTU3hEUVVGRExHbENRVUZwUWl4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRkxFTkJRVU1zUlVGQlJUdFpRVU5vUXl4SlFVRkpMRU5CUVVNc2FVSkJRV2xDTzJsQ1FVTnFRaXhIUVVGSExFTkJRVU1zUlVGQlJTeERRVUZETzJsQ1FVTlFMRzlDUVVGdlFpeERRVUZETEdsQ1FVRnBRaXhEUVVGRExFTkJRVU03VTBGRGFFUTdTVUZEVEN4RFFVRkRPMGxCUlVRc2EwTkJRV3RETEVOQlF6bENMRVZCUVhWQ0xFVkJRM1pDTEdsQ1FVRTJRenRSUVVVM1F5eEpRVUZKTEVsQlFVa3NRMEZCUXl4blFrRkJaMElzUTBGQlF5eEhRVUZITEVOQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVVN1dVRkRMMElzU1VGQlNTeERRVUZETEdkQ1FVRm5RanRwUWtGRGFFSXNSMEZCUnl4RFFVRkRMRVZCUVVVc1EwRkJRenRwUWtGRFVDeHZRa0ZCYjBJc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4RFFVRkRPMU5CUTJoRU8wbEJRMHdzUTBGQlF6dEpRVVZFT3pzN1QwRkhSenRKUVVOSUxITkNRVUZ6UWl4RFFVRkRMRVZCUVhkQ08xRkJRek5ETEVsQlFVa3NTVUZCU1N4RFFVRkRMR2xDUVVGcFFpeERRVUZETEVkQlFVY3NRMEZCUXl4RlFVRkZMRU5CUVVNc1JVRkJSVHRaUVVOb1F5eFBRVUZQTEVsQlFVa3NRMEZCUXl4cFFrRkJhVUlzUTBGQlF5eEhRVUZITEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1RVRkJUU3hEUVVGRE8xTkJRMmhFTzJGQlFVMDdXVUZEU0N4TlFVRk5MRWxCUVVrc1MwRkJTeXhEUVVGRExEaERRVUU0UXl4RlFVRkZMRVZCUVVVc1EwRkJReXhEUVVGRE8xTkJRM1pGTzBsQlEwd3NRMEZCUXp0SlFVVkVPenM3VDBGSFJ6dEpRVU5JTEcxQ1FVRnRRaXhEUVVGRExFVkJRWEZDTzFGQlEzSkRMRWxCUVVrc1NVRkJTU3hEUVVGRExHTkJRV01zUTBGQlF5eEhRVUZITEVOQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVVN1dVRkROMElzVDBGQlR5eEpRVUZKTEVOQlFVTXNZMEZCWXl4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF5eExRVUZsTEVOQlFVTTdVMEZEZEVRN1lVRkJUVHRaUVVOSUxFMUJRVTBzU1VGQlNTeExRVUZMTEVOQlFVTXNPRU5CUVRoRExFVkJRVVVzUlVGQlJTeERRVUZETEVOQlFVTTdVMEZEZGtVN1NVRkRUQ3hEUVVGRE8wbEJSVVE3T3pzN1QwRkpSenRKUVVOSUxHbENRVUZwUWl4RFFVRkRMRVZCUVhkQ0xFVkJRVVVzUzBGQllUdFJRVU55UkN4SlFVRkpMRWxCUVVrc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkJSU3hEUVVGRExFVkJRVVU3V1VGRGFFTXNTVUZCU1N4RFFVRkRMR2xDUVVGcFFpeERRVUZETEVkQlFVY3NRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJReXhOUVVGTkxFZEJRVWNzUzBGQlN5eERRVUZETzFOQlEycEVPMkZCUVUwN1dVRkRTQ3hOUVVGTkxFbEJRVWtzUzBGQlN5eERRVUZETERoRFFVRTRReXhGUVVGRkxFVkJRVVVzUTBGQlF5eERRVUZETzFOQlEzWkZPMGxCUTB3c1EwRkJRenRKUVVWRU96czdPMDlCU1VjN1NVRkRTQ3cwUWtGQk5FSXNRMEZEZUVJc1JVRkJXU3hGUVVOYUxHZENRVUZwUkR0UlFVVnFSQ3hKUVVGSkxFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNSMEZCUnl4RFFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRk8xbEJRM0JDTEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1IwRkJSeXhEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETEZGQlFWRXNSMEZCUnl4blFrRkJaMElzUTBGQlF6dFRRVU5zUkR0SlFVTk1MRU5CUVVNN1NVRkZSRHM3T3p0UFFVbEhPMGxCUTBnc1owTkJRV2RETEVOQlF6VkNMRVZCUVhGQ0xFVkJRM0pDTEdkQ1FVRm5SRHRSUVVWb1JDeEpRVUZKTEVsQlFVa3NRMEZCUXl4alFVRmpMRU5CUVVNc1IwRkJSeXhEUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZGTzFsQlF6ZENMRWxCUVVrc1EwRkJReXhqUVVGakxFTkJRVU1zUjBGQlJ5eERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRMRkZCUVZFc1IwRkJSeXhuUWtGQlowSXNRMEZCUXp0VFFVTXpSRHRKUVVOTUxFTkJRVU03U1VGRlJEczdPenRQUVVsSE8wbEJRMGdzWjBKQlFXZENMRU5CUVVNc1JVRkJkVUk3VVVGRGNFTXNUMEZCVHl4SlFVRkpMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNSMEZCUnl4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRE8wbEJRM3BETEVOQlFVTTdTVUZGUkRzN096dFBRVWxITzBsQlEwZ3NZVUZCWVN4RFFVRkRMRVZCUVZrN1VVRkRkRUlzVDBGQlR5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF5eEpRVUZsTEVOQlFVTTdTVUZET1VNc1EwRkJRenRKUVVWRU96czdPMDlCU1VjN1NVRkRTQ3hqUVVGakxFTkJRVU1zUlVGQldTeEZRVUZGTEZkQlFXOUNPMUZCUXpkRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRkxFTkJRVU1zUlVGQlJUdFpRVU55UWl3d1JFRkJZeXhEUVVOV0xHZEZRVUZ2UWl4RlFVRkZMRVZCUTNSQ0xEWkNRVUUyUWl4RlFVRkZMQ3REUVVFclF5eERRVU5xUml4RFFVRkRPMU5CUTB3N1lVRkJUVHRaUVVOSUxFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNSMEZCUnl4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRExFbEJRVWtzUjBGQlJ5eFhRVUZYTEVOQlFVTTdVMEZEZWtNN1NVRkRUQ3hEUVVGRE8wbEJSVVE3T3pzN1QwRkpSenRKUVVOSUxHTkJRV01zUTBGQlF5eEZRVUZ4UWl4RlFVRkZMRmxCUVc5Q08xRkJRM1JFTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1kwRkJZeXhEUVVGRExFZEJRVWNzUTBGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUlR0WlFVTTVRaXd3UkVGQll5eERRVU5XTEdkRlFVRnZRaXhGUVVGRkxFVkJRM1JDTEd0RFFVRnJReXhGUVVGRkxIZEVRVUYzUkN4RFFVTXZSaXhEUVVGRE8xTkJRMHc3WVVGQlRUdFpRVU5JTEVsQlFVa3NRMEZCUXl4alFVRmpMRU5CUVVNc1IwRkJSeXhEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETEVsQlFVa3NSMEZCUnl4WlFVRlpMRU5CUVVNN1UwRkRia1E3U1VGRFRDeERRVUZETzBsQlJVUTdPenM3VDBGSlJ6dEpRVU5JTEhWQ1FVRjFRaXhEUVVOdVFpeEZRVUYxUWl4RlFVTjJRaXhqUVVFMlFqdFJRVVUzUWl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRkxFTkJRVU1zUlVGQlJUdFpRVU5vUXl3d1JFRkJZeXhEUVVOV0xHZEZRVUZ2UWl4RlFVRkZMRVZCUTNSQ0xHdERRVUZyUXl4RlFVRkZMREJFUVVFd1JDeERRVU5xUnl4RFFVRkRPMU5CUTB3N1lVRkJUVHRaUVVOSUxFbEJRVWtzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhIUVVGSExFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTXNUMEZCVHl4SFFVRkhMR05CUVdNc1EwRkJRenRUUVVNeFJEdEpRVU5NTEVOQlFVTTdTVUZGUkRzN096dFBRVWxITzBsQlEwZ3NjVUpCUVhGQ0xFTkJRVU1zUlVGQmRVSXNSVUZCUlN4WlFVRnZRanRSUVVNdlJDeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMR2RDUVVGblFpeERRVUZETEVkQlFVY3NRMEZCUXl4RlFVRkZMRU5CUVVNc1JVRkJSVHRaUVVOb1F5d3dSRUZCWXl4RFFVTldMR2RGUVVGdlFpeEZRVUZGTEVWQlEzUkNMR3REUVVGclF5eEZRVUZGTEhkRVFVRjNSQ3hEUVVNdlJpeERRVUZETzFOQlEwdzdZVUZCVFR0WlFVTklMRWxCUVVrc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU1zVVVGQlVTeEhRVUZITEZsQlFWa3NRMEZCUXp0VFFVTjZSRHRKUVVOTUxFTkJRVU03U1VGRlJEczdPenRQUVVsSE8wbEJRMGdzV1VGQldTeERRVUZETEVWQlFWa3NSVUZCUlN4TFFVRmhPMUZCUTNCRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRkxFTkJRVU1zUlVGQlJUdFpRVU55UWl3d1JFRkJZeXhEUVVOV0xHZEZRVUZ2UWl4RlFVRkZMRVZCUTNSQ0xHOURRVUZ2UXl4RlFVRkZMQ3REUVVFclF5eERRVU40Uml4RFFVRkRPMU5CUTB3N1lVRkJUVHRaUVVOSUxFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNSMEZCUnl4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRExFdEJRVXNzUjBGQlJ5eExRVUZMTEVOQlFVTTdVMEZEY0VNN1NVRkRUQ3hEUVVGRE8wbEJSVVE3T3pzN1QwRkpSenRKUVVOSUxGZEJRVmNzUTBGQlF5eFJRVUU0UWp0UlFVTjBReXhMUVVGTExFMUJRVTBzUjBGQlJ5eEpRVUZKTEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFVkJRVVU3V1VGRGNrTXNTVUZCU1N4UlFVRlJMRU5CUVVNc1IwRkJSeXhEUVVGRExFVkJRVVU3WjBKQlEyWXNTVUZCU1N4RFFVRkRMR05CUVdNc1EwRkJReXhIUVVGSExFVkJRVVVzVVVGQlVTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNN1lVRkRNME03YVVKQlFVMHNTVUZCU1N4WFFVRlhMRU5CUVVNc1IwRkJSeXhEUVVGRExFVkJRVVU3WjBKQlEzcENMRWxCUVVrc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4SFFVRkhMRVZCUVVVc1VVRkJVU3hEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEVOQlFVTTdZVUZET1VNN2FVSkJRVTBzU1VGQlNTeFJRVUZSTEVOQlFVTXNSMEZCUnl4RFFVRkRMRVZCUVVVN1owSkJRM1JDTEVsQlFVa3NRMEZCUXl4alFVRmpMRU5CUVVNc1IwRkJSeXhGUVVGRkxGRkJRVkVzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRPMkZCUXpORE8ybENRVUZOTEVsQlFVa3NWVUZCVlN4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRk8yZENRVU40UWl4SlFVRkpMRU5CUVVNc2NVSkJRWEZDTEVOQlFVTXNSMEZCUnl4RlFVRkZMRkZCUVZFc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZETzJGQlEyeEVPMU5CUTBvN1NVRkRUQ3hEUVVGRE8wbEJSVVE3T3p0UFFVZEhPMGxCUTBnc1YwRkJWenRSUVVOUUxFMUJRVTBzVVVGQlVTeEhRVUY1UWl4RlFVRkZMRU5CUVVNN1VVRkRNVU1zUzBGQlN5eE5RVUZOTEVOQlFVTXNSMEZCUnl4RlFVRkZMRXRCUVVzc1EwRkJReXhKUVVGSkxFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNUMEZCVHl4RlFVRkZMRVZCUVVVN1dVRkROME1zVVVGQlVTeERRVUZETEVkQlFVY3NRMEZCUXl4SFFVRkhMRXRCUVVzc1EwRkJReXhKUVVGSkxFTkJRVU03VTBGRE9VSTdVVUZEUkN4TFFVRkxMRTFCUVUwc1EwRkJReXhIUVVGSExFVkJRVVVzUzBGQlN5eERRVUZETEVsQlFVa3NTVUZCU1N4RFFVRkRMR2xDUVVGcFFpeERRVUZETEU5QlFVOHNSVUZCUlN4RlFVRkZPMWxCUTNwRUxGRkJRVkVzUTBGQlF5eEhRVUZITEVOQlFVTXNSMEZCUnl4TFFVRkxMRU5CUVVNc1RVRkJUU3hEUVVGRE8xTkJRMmhETzFGQlEwUXNTMEZCU3l4TlFVRk5MRU5CUVVNc1IwRkJSeXhGUVVGRkxFdEJRVXNzUTBGQlF5eEpRVUZKTEVsQlFVa3NRMEZCUXl4alFVRmpMRU5CUVVNc1QwRkJUeXhGUVVGRkxFVkJRVVU3V1VGRGRFUXNVVUZCVVN4RFFVRkRMRWRCUVVjc1EwRkJReXhIUVVGSExFdEJRVXNzUTBGQlF5eEpRVUZKTEVOQlFVTTdVMEZET1VJN1VVRkRSQ3hMUVVGTExFMUJRVTBzUTBGQlF5eEhRVUZITEVWQlFVVXNTMEZCU3l4RFFVRkRMRWxCUVVrc1NVRkJTU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMRTlCUVU4c1JVRkJSU3hGUVVGRk8xbEJRM2hFTEZGQlFWRXNRMEZCUXl4SFFVRkhMRU5CUVVNc1IwRkJSeXhMUVVGTExFTkJRVU1zVVVGQlVTeERRVUZETzFOQlEyeERPMUZCUTBRc1QwRkJUeXhSUVVGUkxFTkJRVU03U1VGRGNFSXNRMEZCUXp0SlFVVkVPenM3VDBGSFJ6dEpRVU5JTEZGQlFWRTdVVUZEU2l4UFFVRlBMRXRCUVVzc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4TlFVRk5MRVZCUVVVc1EwRkJReXhEUVVGRE8wbEJRek5ETEVOQlFVTTdTVUZGUkRzN08wOUJSMGM3U1VGRFNDeGxRVUZsTzFGQlExZ3NUMEZCVHl4TFFVRkxMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eGpRVUZqTEVOQlFVTXNUVUZCVFN4RlFVRkZMRU5CUVVNc1EwRkJRenRKUVVOd1JDeERRVUZETzBsQlJVUTdPenRQUVVkSE8wbEJRMGdzYTBKQlFXdENPMUZCUTJRc1QwRkJUeXhMUVVGTExFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4cFFrRkJhVUlzUTBGQlF5eE5RVUZOTEVWQlFVVXNRMEZCUXl4RFFVRkRPMGxCUTNaRUxFTkJRVU03U1VGRlJEczdPMDlCUjBjN1NVRkRTQ3hwUWtGQmFVSTdVVUZEWWl4UFFVRlBMRXRCUVVzc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExFMUJRVTBzUlVGQlJTeERRVUZETEVOQlFVTTdTVUZEZEVRc1EwRkJRenRKUVVWRU96czdUMEZIUnp0SlFVTklMSFZDUVVGMVFpeERRVUZETEZsQlFUQkNPMUZCUXpsRExFdEJRVXNzVFVGQlRTeEhRVUZITEVsQlFVa3NTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhKUVVGSkxFVkJRVVVzUlVGQlJUdFpRVU5xUXl4TlFVRk5MRWxCUVVrc1IwRkJSeXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVkQlFVY3NRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRenRaUVVOcVF5eEpRVUZKTEVsQlFVa3NSVUZCUlR0blFrRkRUaXhKUVVGSkxFTkJRVU1zV1VGQldTeEhRVUZITEVOQlFVTXNVVUZCYVVJc1JVRkJSU3hGUVVGRkxFTkJRM1JETEZsQlFWa3NRMEZCUXl4aFFVRmhMRU5CUTNSQ0xFbEJRVWtzYjBWQlFXOUNMRU5CUVVNN2IwSkJRM0pDTEVWQlFVVXNSVUZCUlN4SlFVRkpMRU5CUVVNc1JVRkJSVHR2UWtGRFdDeEpRVUZKTEVWQlFVVXNUVUZCVFR0dlFrRkRXaXhMUVVGTExFVkJRVVVzVVVGQlVUdHZRa0ZEWml4TlFVRk5MRVZCUVVVc1NVRkJTVHRwUWtGRFppeERRVUZETEVOQlEwd3NRMEZCUXp0aFFVTlVPMU5CUTBvN1VVRkRSQ3hMUVVGTExFMUJRVTBzUjBGQlJ5eEpRVUZKTEVsQlFVa3NRMEZCUXl4cFFrRkJhVUlzUTBGQlF5eEpRVUZKTEVWQlFVVXNSVUZCUlR0WlFVTTNReXhOUVVGTkxFMUJRVTBzUjBGQlJ5eEpRVUZKTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zUjBGQlJ5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMWxCUXk5RExFbEJRVWtzVFVGQlRTeEZRVUZGTzJkQ1FVTlNMRTFCUVUwc1EwRkJReXhaUVVGWkxFZEJRVWNzUTBGQlF5eFJRVUZuUWl4RlFVRkZMRVZCUVVVc1EwRkRka01zV1VGQldTeERRVUZETEdGQlFXRXNRMEZEZEVJc1NVRkJTU3h2UlVGQmIwSXNRMEZCUXp0dlFrRkRja0lzUlVGQlJTeEZRVUZGTEUxQlFVMHNRMEZCUXl4RlFVRkZPMjlDUVVOaUxFbEJRVWtzUlVGQlJTeFJRVUZSTzI5Q1FVTmtMRXRCUVVzc1JVRkJSU3hSUVVGUk8yOUNRVU5tTEUxQlFVMHNSVUZCUlN4TlFVRk5PMmxDUVVOcVFpeERRVUZETEVOQlEwd3NRMEZCUXp0aFFVTlVPMU5CUTBvN1VVRkRSQ3hMUVVGTExFMUJRVTBzUjBGQlJ5eEpRVUZKTEVsQlFVa3NRMEZCUXl4alFVRmpMRU5CUVVNc1NVRkJTU3hGUVVGRkxFVkJRVVU3V1VGRE1VTXNUVUZCVFN4SlFVRkpMRWRCUVVjc1NVRkJTU3hEUVVGRExHTkJRV01zUTBGQlF5eEhRVUZITEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNN1dVRkRNVU1zU1VGQlNTeEpRVUZKTEVWQlFVVTdaMEpCUTA0c1NVRkJTU3hEUVVGRExGbEJRVmtzUjBGQlJ5eERRVUZETEZGQlFXZENMRVZCUVVVc1JVRkJSU3hEUVVOeVF5eFpRVUZaTEVOQlFVTXNZVUZCWVN4RFFVTjBRaXhKUVVGSkxHOUZRVUZ2UWl4RFFVRkRPMjlDUVVOeVFpeEZRVUZGTEVWQlFVVXNTVUZCU1N4RFFVRkRMRVZCUVVVN2IwSkJRMWdzU1VGQlNTeEZRVUZGTEUxQlFVMDdiMEpCUTFvc1MwRkJTeXhGUVVGRkxGRkJRVkU3YjBKQlEyWXNUVUZCVFN4RlFVRkZMRWxCUVVrN2FVSkJRMllzUTBGQlF5eERRVU5NTEVOQlFVTTdZVUZEVkR0VFFVTktPMUZCUTBRc1MwRkJTeXhOUVVGTkxFZEJRVWNzU1VGQlNTeEpRVUZKTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zU1VGQlNTeEZRVUZGTEVWQlFVVTdXVUZETlVNc1RVRkJUU3hOUVVGTkxFZEJRVWNzU1VGQlNTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExFZEJRVWNzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0WlFVTTVReXhKUVVGSkxFMUJRVTBzUlVGQlJUdG5Ra0ZEVWl4TlFVRk5MRU5CUVVNc1dVRkJXU3hIUVVGSExFTkJRVU1zVVVGQlowSXNSVUZCUlN4RlFVRkZMRU5CUTNaRExGbEJRVmtzUTBGQlF5eGhRVUZoTEVOQlEzUkNMRWxCUVVrc2IwVkJRVzlDTEVOQlFVTTdiMEpCUTNKQ0xFVkJRVVVzUlVGQlJTeE5RVUZOTEVOQlFVTXNSVUZCUlR0dlFrRkRZaXhKUVVGSkxFVkJRVVVzVVVGQlVUdHZRa0ZEWkN4TFFVRkxMRVZCUVVVc1VVRkJVVHR2UWtGRFppeE5RVUZOTEVWQlFVVXNUVUZCVFR0cFFrRkRha0lzUTBGQlF5eERRVU5NTEVOQlFVTTdZVUZEVkR0VFFVTktPMGxCUTB3c1EwRkJRenREUVVOS08wRkJSVVE3TzBkQlJVYzdRVUZEU0N4SlFVRlpMR2xDUVVkWU8wRkJTRVFzVjBGQldTeHBRa0ZCYVVJN1NVRkRla0lzZFVWQlFXVTdTVUZEWml3eVJVRkJhVUk3UVVGRGNrSXNRMEZCUXl4RlFVaFhMR2xDUVVGcFFpeExRVUZxUWl4cFFrRkJhVUlzVVVGSE5VSTdPenM3T3pzN096czdPenM3T3p0QlF6VXpRa1FzYTBSQlFXdEVPMEZCUld4RU96dEhRVVZITzBGQlEwa3NUVUZCVFN4WFFVRlhPMGxCVVhCQ0xGbEJRMGtzUlVGQlZTeEZRVU5XTEV0QlFXRXNSVUZEWWl4WFFVRnRRaXhGUVVOdVFpeHRRa0ZCTkVJN1NVRkRiRU1zWjBWQlFXZEZPMGxCUTJoRkxEQkNRVUZwUml4SFFVRkhMRVZCUVVVc1IwRkJkVU1zUTBGQlF6dFJRVVY0U0N4SlFVRkpMRU5CUVVNc1VVRkJVU3hIUVVGSExIVkNRVUYxUWl4RFFVRkRPMUZCUlhoRExFbEJRVWtzUTBGQlF5eFpRVUZaTEVkQlFVY3NSMEZCUnl4RlFVRkZPMWxCUTNKQ0xHMURRVUZ0UXp0UlFVTjJReXhEUVVGRExFTkJRVU03VVVGRFJpeEpRVUZKTEVOQlFVTXNSVUZCUlN4SFFVRkhMRVZCUVVVc1EwRkJRenRSUVVOaUxFbEJRVWtzUTBGQlF5eFhRVUZYTEVkQlFVY3NWMEZCVnl4RFFVRkRPMUZCUXk5Q0xFbEJRVWtzUTBGQlF5eExRVUZMTEVkQlFVY3NTMEZCU3l4RFFVRkRPMUZCUTI1Q0xFbEJRVWtzUTBGQlF5eExRVUZMTEVkQlFVY3NiVUpCUVcxQ0xFTkJRVU03U1VGRGNrTXNRMEZCUXp0SlFVVkVPenM3VDBGSFJ6dEpRVU5JTEVsQlFWY3NTMEZCU3l4RFFVRkRMRTlCUVdVN1VVRkROVUlzU1VGQlNTeERRVUZETEUxQlFVMHNSMEZCUnl4UFFVRlBMRU5CUVVNN1VVRkRkRUlzU1VGQlNTeERRVUZETEZsQlFWa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU03U1VGRGJrTXNRMEZCUXp0SlFVVkVPenRQUVVWSE8wbEJRMGdzU1VGQlZ5eExRVUZMTzFGQlExb3NUMEZCVHl4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRE8wbEJRM1pDTEVOQlFVTTdTVUZGUkRzN1QwRkZSenRKUVVOSUxFbEJRVmNzUzBGQlN6dFJRVU5hTEU5QlFVOHNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJRenRKUVVOMlFpeERRVUZETzBsQlJVUTdPenRQUVVkSE8wbEJRMGdzU1VGQlZ5eExRVUZMTEVOQlFVTXNUMEZCWjBJN1VVRkROMElzU1VGQlNTeERRVUZETEUxQlFVMHNSMEZCUnl4UFFVRlBMRU5CUVVNN1VVRkRkRUlzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4SlFVRkpMRU5CUVVNc1RVRkJUU3hGUVVGRkxFbEJRVWtzUTBGQlF5eERRVUZETzFGQlEycERMRWxCUVVrc1EwRkJReXhaUVVGWkxFTkJRVU1zU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRPMGxCUTI1RExFTkJRVU03UTBGRFNqczdPenM3T3pzN096czdPenM3T3p0QlEyaEZSQ3hyUkVGQmEwUTdRVUZIVGp0QlFVVTFRenM3UjBGRlJ6dEJRVU5KTEUxQlFVMHNWMEZGV0N4VFFVRlJMSEZFUVVGWE8wbEJTMnBDTEZsQlEwa3NSVUZCZDBJc1JVRkRlRUlzUzBGQllTeEZRVU5pTEZkQlFXMUNMRVZCUTI1Q0xHZENRVUY1UWl4RlFVTjZRaXhaUVVGeFFqdEpRVU16UWl4blJVRkJaMFU3U1VGRGFFVXNNRUpCUVdsR0xFZEJRVWNzUlVGQlJTeEhRVUYxUXl4RFFVRkRPMUZCUlhoSUxFdEJRVXNzUTBGQlF5eEZRVUZGTEVWQlFVVXNTMEZCU3l4RlFVRkZMRmRCUVZjc1JVRkJSU3huUWtGQlowSXNSVUZCUlN4MVFrRkJkVUlzUTBGQlF5eERRVUZETzFGQlJYcEZMRTFCUVUwc1UwRkJVeXhIUVVGSExFbEJRVWtzWlVGQlpTeERRVUZETEUxQlFVMHNRMEZCUXl4UlFVRlJMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU03VVVGRE9VUXNTVUZCU1N4RFFVRkRMRmxCUVZrc1NVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlF5eEhRVUZITEVOQlFVTXNTVUZCU1N4RFFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRk8xbEJRekZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRWRCUVVjc1owSkJRV2RDTEVOQlFVTTdVMEZEYUVNN1lVRkJUVHRaUVVOSUxHbERRVUZwUXp0WlFVTnFReXhOUVVGTkxGbEJRVmtzUjBGQlJ5eEpRVUZKTEVOQlFVTXNaVUZCWlN4RlFVRkZMRU5CUVVNN1dVRkROVU1zU1VGQlNTeERRVUZETEVsQlFVa3NSMEZCUnl4WlFVRlpMRU5CUVVNN1UwRkROVUk3VVVGRFJDeEpRVUZKTEVOQlFVTXNXVUZCV1N4SFFVRkhMRmxCUVZrc1EwRkJRenRKUVVOeVF5eERRVUZETzBsQlJVUTdPenRQUVVkSE8wbEJRMGdzWlVGQlpUdFJRVU5ZTEUxQlFVMHNVMEZCVXl4SFFVRkhMRWxCUVVrc1pVRkJaU3hEUVVGRExFMUJRVTBzUTBGQlF5eFJRVUZSTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNN1VVRkRPVVFzU1VGQlNTeFRRVUZUTEVOQlFVTXNSMEZCUnl4RFFVRkRMRWxCUVVrc1EwRkJReXhGUVVGRkxFTkJRVU1zUlVGQlJUdFpRVU40UWl4SlFVTkpMRk5CUVZNc1EwRkJReXhIUVVGSExFTkJRVU1zU1VGQlNTeERRVUZETEVWQlFVVXNRMEZCUXl4TFFVRkxMRTlCUVU4N1owSkJRMnhETEZOQlFWTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1NVRkJTU3hEUVVGRExFVkJRVVVzUTBGQlF5eExRVUZMTEU5QlFVOHNSVUZEY0VNN1owSkJRMFVzVDBGQlR5eExRVUZMTEVOQlFVTTdZVUZEYUVJN1dVRkRSQ3hQUVVGUExFbEJRVWtzUTBGQlF6dFRRVU5tTzFGQlEwUXNUMEZCVHl4TFFVRkxMRU5CUVVNN1NVRkRha0lzUTBGQlF6dEpRVVZFT3p0UFFVVkhPMGxCUTBrc1pVRkJaVHRSUVVOc1FpeEpRVUZKTEVsQlFVa3NRMEZCUXl4WlFVRlpMRVZCUVVVN1dVRkRia0lzYVVKQlFXbENPMWxCUTJwQ0xFMUJRVTBzVTBGQlV5eEhRVUZITEVsQlFVa3NaVUZCWlN4RFFVRkRMRTFCUVUwc1EwRkJReXhSUVVGUkxFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTTdXVUZET1VRc1NVRkJTU3hKUVVGSkxFTkJRVU1zU1VGQlNTeExRVUZMTEVsQlFVa3NSVUZCUlR0blFrRkRjRUlzVTBGQlV5eERRVUZETEVkQlFVY3NRMEZCUXl4SlFVRkpMRU5CUVVNc1JVRkJSU3hGUVVGRkxFMUJRVTBzUTBGQlF5eERRVUZETzJGQlEyeERPMmxDUVVGTk8yZENRVU5JTEZOQlFWTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1NVRkJTU3hEUVVGRExFVkJRVVVzUlVGQlJTeFBRVUZQTEVOQlFVTXNRMEZCUXp0aFFVTnVRenRaUVVORUxFMUJRVTBzUTBGQlF5eFBRVUZQTEVOQlFVTXNXVUZCV1N4RFFVTjJRaXhGUVVGRkxFVkJRMFlzUlVGQlJTeEZRVU5HTEZOQlFWTXNRMEZCUXl4UlFVRlJMRVZCUVVVc1MwRkJTeXhGUVVGRk8yZENRVU4yUWl4RFFVRkRMRU5CUVVNc1IwRkJSeXhSUVVGUkxFTkJRVU1zVVVGQlVTeEpRVUZKTEZOQlFWTXNSVUZCUlR0blFrRkRja01zUTBGQlF5eERRVUZETEVkQlFVY3NVVUZCVVN4RFFVRkRMRkZCUVZFc1JVRkJSU3hEUVVNdlFpeERRVUZETzFOQlEwdzdTVUZEVEN4RFFVRkRPMGxCUlVRN08wOUJSVWM3U1VGRFNTeE5RVUZOTzFGQlExUXNTVUZCU1N4RFFVRkRMRWxCUVVrc1IwRkJSeXhKUVVGSkxFTkJRVU03U1VGRGNrSXNRMEZCUXp0SlFVVkVPenRQUVVWSE8wbEJRMGdzU1VGQlZ5eEpRVUZKTzFGQlExZ3NUMEZCVHl4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF6dEpRVU40UWl4RFFVRkRPMGxCUlVRN096dFBRVWRITzBsQlEwZ3NTVUZCVnl4SlFVRkpMRU5CUVVNc1QwRkJaMEk3VVVGRE5VSXNTVUZCU1N4RFFVRkRMRXRCUVVzc1IwRkJSeXhQUVVGUExFTkJRVU03U1VGRGVrSXNRMEZCUXp0RFFVTktPenM3T3pzN096czdPenM3T3pzN08wRkRiRWRFTEd0RVFVRnJSRHRCUVVkT08wRkJSVFZET3p0SFFVVkhPMEZCUTBrc1RVRkJUU3hoUVVWWUxGTkJRVkVzY1VSQlFWYzdTVUZSYWtJc1dVRkRTU3hGUVVGdlF5eEZRVU53UXl4TFFVRmhMRVZCUTJJc1YwRkJiVUlzUlVGRGJrSXNSMEZCVnl4RlFVTllMRWRCUVZjc1JVRkRXQ3hoUVVGeFFpeEZRVU55UWl4WlFVRnhRanRKUVVNelFpeG5SVUZCWjBVN1NVRkRhRVVzTUVKQlFXbEdMRWRCUVVjc1JVRkJSU3hIUVVGMVF5eERRVUZETzFGQlJYaElMRXRCUVVzc1EwRkJReXhGUVVGRkxFVkJRVVVzUzBGQlN5eEZRVUZGTEZkQlFWY3NSVUZCUlN4aFFVRmhMRVZCUVVVc2RVSkJRWFZDTEVOQlFVTXNRMEZCUXp0UlFVVjBSU3hKUVVGSkxFTkJRVU1zU1VGQlNTeEhRVUZITEVkQlFVY3NRMEZCUXp0UlFVTm9RaXhKUVVGSkxFTkJRVU1zU1VGQlNTeEhRVUZITEVkQlFVY3NRMEZCUXp0UlFVVm9RaXhwUkVGQmFVUTdVVUZEYWtRc1RVRkJUU3hUUVVGVExFZEJRVWNzU1VGQlNTeGxRVUZsTEVOQlFVTXNUVUZCVFN4RFFVRkRMRkZCUVZFc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF6dFJRVU01UkN4SlFVRkpMRU5CUVVNc1dVRkJXU3hKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETEVkQlFVY3NRMEZCUXl4SlFVRkpMRU5CUVVNc1JVRkJSU3hEUVVGRExFVkJRVVU3V1VGRE1VTXNTVUZCU1N4RFFVRkRMRTFCUVUwc1IwRkJSeXhoUVVGaExFTkJRVU03VTBGREwwSTdZVUZCVFR0WlFVTklMRTFCUVUwc1YwRkJWeXhIUVVGSExFMUJRVTBzUTBGQlF5eFJRVUZSTEVOQlFVTXNVMEZCVXl4RFFVRkRMRWRCUVVjc1EwRkJReXhKUVVGSkxFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTTFSQ3hKUVVGSkxFTkJRVU1zVFVGQlRTeEhRVUZITEUxQlFVMHNRMEZCUXl4TFFVRkxMRU5CUVVNc1YwRkJWeXhEUVVGRE8yZENRVU51UXl4RFFVRkRMRU5CUVVNc1lVRkJZVHRuUWtGRFppeERRVUZETEVOQlFVTXNWMEZCVnl4RFFVRkRPMU5CUTNKQ08xRkJRMFFzU1VGQlNTeERRVUZETEZsQlFWa3NSMEZCUnl4WlFVRlpMRU5CUVVNN1NVRkRja01zUTBGQlF6dEpRVVZFT3p0UFFVVkhPMGxCUTBrc1pVRkJaVHRSUVVOc1FpeEpRVUZKTEVsQlFVa3NRMEZCUXl4WlFVRlpMRVZCUVVVN1dVRkRia0lzYVVOQlFXbERPMWxCUTJwRExFMUJRVTBzVTBGQlV5eEhRVUZITEVsQlFVa3NaVUZCWlN4RFFVRkRMRTFCUVUwc1EwRkJReXhSUVVGUkxFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTTdXVUZET1VRc1UwRkJVeXhEUVVGRExFZEJRVWNzUTBGQlF5eEpRVUZKTEVOQlFVTXNSVUZCUlN4RlFVRkZMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zVVVGQlVTeEZRVUZGTEVOQlFVTXNRMEZCUXp0WlFVTXZReXhOUVVGTkxFTkJRVU1zVDBGQlR5eERRVUZETEZsQlFWa3NRMEZEZGtJc1JVRkJSU3hGUVVOR0xFVkJRVVVzUlVGRFJpeFRRVUZUTEVOQlFVTXNVVUZCVVN4RlFVRkZMRXRCUVVzc1JVRkJSVHRuUWtGRGRrSXNRMEZCUXl4RFFVRkRMRWRCUVVjc1VVRkJVU3hEUVVGRExGRkJRVkVzU1VGQlNTeFRRVUZUTEVWQlFVVTdaMEpCUTNKRExFTkJRVU1zUTBGQlF5eEhRVUZITEZGQlFWRXNRMEZCUXl4UlFVRlJMRVZCUVVVc1EwRkRMMElzUTBGQlF6dFRRVU5NTzBsQlEwd3NRMEZCUXp0SlFVVkVPenRQUVVWSE8wbEJRMGdzU1VGQlZ5eE5RVUZOTEVOQlFVTXNVMEZCYVVJN1VVRkRMMElzU1VGQlNTeERRVUZETEV0QlFVc3NSMEZCUnl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZETzBsQlEzWkRMRU5CUVVNN1NVRkZSRHM3VDBGRlJ6dEpRVU5JTEVsQlFWY3NUVUZCVFR0UlFVTmlMRTlCUVU4c1NVRkJTU3hEUVVGRExFdEJRV1VzUTBGQlF6dEpRVU5vUXl4RFFVRkRPMGxCUlVRN096czdUMEZKUnp0SlFVTkpMRXRCUVVzc1EwRkJReXhSUVVGblFqdFJRVU42UWl4UFFVRlBMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hGUVVGRkxGRkJRVkVzUTBGQlF5eEZRVUZGTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenRKUVVNNVJDeERRVUZETzBsQlJVUTdPenRQUVVkSE8wbEJRMGdzU1VGQlZ5eEhRVUZITzFGQlExWXNUMEZCVHl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRE8wbEJRM0pDTEVOQlFVTTdTVUZGUkRzN08wOUJSMGM3U1VGRFNDeEpRVUZYTEVkQlFVYzdVVUZEVml4UFFVRlBMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU03U1VGRGNrSXNRMEZCUXp0SlFVVkVPenRQUVVWSE8wbEJRMGtzYjBKQlFXOUNMRU5CUVVNc1lVRkJNRU03VVVGRGJFVXNTVUZCU1N4RFFVRkRMRkZCUVZFc1IwRkJSeXhoUVVGaExFTkJRVU03U1VGRGJFTXNRMEZCUXp0RFFVTktPenM3T3pzN096czdPenM3T3pzN08wRkRPVWRFTEd0RVFVRnJSRHRCUVVkT08wRkJSVFZET3p0SFFVVkhPMEZCUTBrc1RVRkJUU3hoUVVWWUxGTkJRVkVzY1VSQlFWYzdTVUZOYWtJc1dVRkRTU3hGUVVGdFF5eEZRVU51UXl4TFFVRmhMRVZCUTJJc1YwRkJiVUlzUlVGRGJrSXNaMEpCUVhkQ0xFVkJRM2hDTEU5QlFYTkNMRVZCUTNSQ0xGbEJRWEZDTzBsQlF6TkNMR2RGUVVGblJUdEpRVU5vUlN3d1FrRkJhVVlzUjBGQlJ5eEZRVUZGTEVkQlFYVkRMRU5CUVVNN1VVRkZlRWdzUzBGQlN5eERRVUZETEVWQlFVVXNSVUZCUlN4TFFVRkxMRVZCUVVVc1YwRkJWeXhGUVVGRkxFTkJRVU1zWjBKQlFXZENMRVZCUVVVc1owSkJRV2RDTEVOQlFVTXNSVUZCUlN4MVFrRkJkVUlzUTBGQlF5eERRVUZETzFGQlJUZEdMRWxCUVVrc1EwRkJReXhQUVVGUExFZEJRVWNzVDBGQlR5eERRVUZETzFGQlEzWkNMRTFCUVUwc1UwRkJVeXhIUVVGSExFbEJRVWtzWlVGQlpTeERRVUZETEUxQlFVMHNRMEZCUXl4UlFVRlJMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU03VVVGRE9VUXNUVUZCVFN4aFFVRmhMRWRCUTJZc1dVRkJXU3hKUVVGSkxGTkJRVk1zUTBGQlF5eEhRVUZITEVOQlFVTXNTVUZCU1N4RFFVRkRMRVZCUVVVc1EwRkJRenRaUVVOc1F5eERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRMR1ZCUVdVc1JVRkJSVHRaUVVONFFpeERRVUZETEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU03VVVGRE0wSXNTVUZCU1N4RFFVRkRMRkZCUVZFc1IwRkJSeXhoUVVGaExFTkJRVU03VVVGRE9VSXNTVUZCU1N4RFFVRkRMRmxCUVZrc1IwRkJSeXhaUVVGWkxFTkJRVU03U1VGRGNrTXNRMEZCUXp0SlFVVkVPenM3VDBGSFJ6dEpRVU5JTEdWQlFXVTdPMUZCUTFnc1RVRkJUU3hUUVVGVExFZEJRVWNzU1VGQlNTeGxRVUZsTEVOQlFVTXNUVUZCVFN4RFFVRkRMRkZCUVZFc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF6dFJRVU01UkN4SlFVRkpMRk5CUVZNc1EwRkJReXhIUVVGSExFTkJRVU1zU1VGQlNTeERRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkZPMWxCUTNoQ0xFOUJRVThzWlVGQlV5eERRVUZETEVkQlFVY3NRMEZCUXl4SlFVRkpMRU5CUVVNc1JVRkJSU3hEUVVGRExHMURRVUZKTEVWQlFVVXNRMEZCUXp0VFFVTjJRenRSUVVORUxFOUJRVThzUlVGQlJTeERRVUZETzBsQlEyUXNRMEZCUXp0SlFVVkVPenRQUVVWSE8wbEJRMGtzWlVGQlpUdFJRVU5zUWl4SlFVRkpMRWxCUVVrc1EwRkJReXhaUVVGWkxFVkJRVVU3V1VGRGJrSXNhVUpCUVdsQ08xbEJRMnBDTEUxQlFVMHNVMEZCVXl4SFFVRkhMRWxCUVVrc1pVRkJaU3hEUVVGRExFMUJRVTBzUTBGQlF5eFJRVUZSTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNN1dVRkRPVVFzVTBGQlV5eERRVUZETEVkQlFVY3NRMEZCUXl4SlFVRkpMRU5CUVVNc1JVRkJSU3hGUVVGRkxFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXp0WlFVTjBReXhOUVVGTkxFTkJRVU1zVDBGQlR5eERRVUZETEZsQlFWa3NRMEZEZGtJc1JVRkJSU3hGUVVOR0xFVkJRVVVzUlVGRFJpeFRRVUZUTEVOQlFVTXNVVUZCVVN4RlFVRkZMRXRCUVVzc1JVRkJSVHRuUWtGRGRrSXNRMEZCUXl4RFFVRkRMRWRCUVVjc1VVRkJVU3hEUVVGRExGRkJRVkVzU1VGQlNTeFRRVUZUTEVWQlFVVTdaMEpCUTNKRExFTkJRVU1zUTBGQlF5eEhRVUZITEZGQlFWRXNRMEZCUXl4UlFVRlJMRVZCUVVVc1EwRkRMMElzUTBGQlF6dFRRVU5NTzBsQlEwd3NRMEZCUXp0SlFVVkVPenRQUVVWSE8wbEJRMGtzYjBKQlFXOUNMRU5CUVVNc1lVRkJlVU03VVVGRGFrVXNTVUZCU1N4RFFVRkRMRkZCUVZFc1IwRkJSeXhoUVVGaExFTkJRVU03U1VGRGJFTXNRMEZCUXp0SlFVVkVPenRQUVVWSE8wbEJRMGdzU1VGQlZ5eFBRVUZQTzFGQlEyUXNUMEZCVHl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRE8wbEJRM3BDTEVOQlFVTTdTVUZGUkRzN08wOUJSMGM3U1VGRFNDeEpRVUZYTEU5QlFVOHNRMEZCUXl4TlFVRnhRanRSUVVOd1F5eEpRVUZKTEVOQlFVTXNVVUZCVVN4SFFVRkhMRTFCUVUwc1EwRkJRenRSUVVOMlFpeEpRVUZKTEVOQlFVTXNXVUZCV1N4RFFVRkRMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF6dEpRVU55UXl4RFFVRkRPMGxCUlVRN08wOUJSVWM3U1VGRFNDeEpRVUZYTEZGQlFWRTdVVUZEWml4UFFVRlBMRWxCUVVrc1EwRkJReXhMUVVGbExFTkJRVU03U1VGRGFFTXNRMEZCUXp0SlFVVkVPenM3VDBGSFJ6dEpRVU5JTEVsQlFWY3NVVUZCVVN4RFFVRkRMRXRCUVdFN1VVRkROMElzYzBaQlFYTkdPMUZCUTNSR0xEQkhRVUV3Unp0UlFVTXhSeXhOUVVGTkxGbEJRVmtzUjBGQlJ5eEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRTFCUVUwc1EwRkRjRU1zUTBGQlF5eE5RVUZqTEVWQlFVVXNSVUZCUlN4RFFVRkRMRTFCUVUwc1EwRkJReXhQUVVGUExFTkJRVU1zUzBGQlN5eERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRMRU5CUTI1RUxFTkJRVU03VVVGRFJpeEpRVUZKTEZsQlFWa3NRMEZCUXl4TlFVRk5MRVZCUVVVN1dVRkRja0lzU1VGQlNTeERRVUZETEV0QlFVc3NSMEZCUnl4WlFVRlpMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03VTBGRGFFTTdTVUZEVEN4RFFVRkRPME5CUTBvN096czdPenM3T3pzN096czdPenM3UVVOb1NFUXNhMFJCUVd0RU8wRkJSMDQ3UVVGRk5VTTdPMGRCUlVjN1FVRkRTU3hOUVVGTkxGZEJSVmdzVTBGQlVTeHhSRUZCVnp0SlFVdHFRaXhaUVVOSkxFVkJRV2xETEVWQlEycERMRXRCUVdFc1JVRkRZaXhYUVVGdFFpeEZRVU51UWl4blFrRkJkMElzUlVGRGVFSXNXVUZCY1VJN1NVRkRNMElzWjBWQlFXZEZPMGxCUTJoRkxEQkNRVUZwUml4SFFVRkhMRVZCUVVVc1IwRkJkVU1zUTBGQlF6dFJRVVY0U0N4TFFVRkxMRU5CUVVNc1JVRkJSU3hGUVVGRkxFdEJRVXNzUlVGQlJTeFhRVUZYTEVWQlFVVXNaMEpCUVdkQ0xFVkJRVVVzZFVKQlFYVkNMRU5CUVVNc1EwRkJRenRSUVVWNlJTeE5RVUZOTEZOQlFWTXNSMEZCUnl4SlFVRkpMR1ZCUVdVc1EwRkJReXhOUVVGTkxFTkJRVU1zVVVGQlVTeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRPMUZCUXpsRUxFbEJRVWtzUTBGQlF5eFpRVUZaTEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNc1IwRkJSeXhEUVVGRExFbEJRVWtzUTBGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUlR0WlFVTXhReXhKUVVGSkxFTkJRVU1zU1VGQlNTeEhRVUZITEdkQ1FVRm5RaXhEUVVGRE8xTkJRMmhETzJGQlFVMDdXVUZEU0N4cFEwRkJhVU03V1VGRGFrTXNUVUZCVFN4WlFVRlpMRWRCUVVjc1NVRkJTU3hEUVVGRExHVkJRV1VzUlVGQlJTeERRVUZETzFsQlF6VkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFZEJRVWNzV1VGQldTeERRVUZETzFOQlF6VkNPMUZCUTBRc1NVRkJTU3hEUVVGRExGbEJRVmtzUjBGQlJ5eFpRVUZaTEVOQlFVTTdTVUZEY2tNc1EwRkJRenRKUVVWRU96czdUMEZIUnp0SlFVTklMR1ZCUVdVN08xRkJRMWdzVFVGQlRTeFRRVUZUTEVkQlFVY3NTVUZCU1N4bFFVRmxMRU5CUVVNc1RVRkJUU3hEUVVGRExGRkJRVkVzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXp0UlFVTTVSQ3hKUVVGSkxGTkJRVk1zUTBGQlF5eEhRVUZITEVOQlFVTXNTVUZCU1N4RFFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRk8xbEJRM2hDTEU5QlFVOHNaVUZCVXl4RFFVRkRMRWRCUVVjc1EwRkJReXhKUVVGSkxFTkJRVU1zUlVGQlJTeERRVUZETEcxRFFVRkpMRVZCUVVVc1EwRkJRenRUUVVOMlF6dFJRVU5FTEU5QlFVOHNSVUZCUlN4RFFVRkRPMGxCUTJRc1EwRkJRenRKUVVWRU96dFBRVVZITzBsQlEwa3NaVUZCWlR0UlFVTnNRaXhKUVVGSkxFbEJRVWtzUTBGQlF5eFpRVUZaTEVWQlFVVTdXVUZEYmtJc2FVSkJRV2xDTzFsQlEycENMRTFCUVUwc1UwRkJVeXhIUVVGSExFbEJRVWtzWlVGQlpTeERRVUZETEUxQlFVMHNRMEZCUXl4UlFVRlJMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU03V1VGRE9VUXNVMEZCVXl4RFFVRkRMRWRCUVVjc1EwRkJReXhKUVVGSkxFTkJRVU1zUlVGQlJTeEZRVUZGTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenRaUVVOc1F5eE5RVUZOTEVOQlFVTXNUMEZCVHl4RFFVRkRMRmxCUVZrc1EwRkRka0lzUlVGQlJTeEZRVU5HTEVWQlFVVXNSVUZEUml4VFFVRlRMRU5CUVVNc1VVRkJVU3hGUVVGRkxFdEJRVXNzUlVGQlJUdG5Ra0ZEZGtJc1EwRkJReXhEUVVGRExFZEJRVWNzVVVGQlVTeERRVUZETEZGQlFWRXNTVUZCU1N4VFFVRlRMRVZCUVVVN1owSkJRM0pETEVOQlFVTXNRMEZCUXl4SFFVRkhMRkZCUVZFc1EwRkJReXhSUVVGUkxFVkJRVVVzUTBGREwwSXNRMEZCUXp0VFFVTk1PMGxCUTB3c1EwRkJRenRKUVVWRU96dFBRVVZITzBsQlEwZ3NTVUZCVnl4SlFVRkpPMUZCUTFnc1QwRkJUeXhKUVVGSkxFTkJRVU1zUzBGQlpTeERRVUZETzBsQlEyaERMRU5CUVVNN1NVRkZSRHM3TzA5QlIwYzdTVUZEU0N4SlFVRlhMRWxCUVVrc1EwRkJReXhQUVVGbE8xRkJRek5DTEVsQlFVa3NRMEZCUXl4TFFVRkxMRWRCUVVjc1QwRkJUeXhEUVVGRE8wbEJRM3BDTEVOQlFVTTdRMEZEU2pzN096czdPenM3T3pzN096czdPenRCUTJwR1JDeHJSRUZCYTBRN1FVRkZVanRCUVVVeFF6czdSMEZGUnp0QlFVTkpMRTFCUVUwc2NVSkJRWEZDTzBsQlFXeERPMUZCUzBrc01rSkJRWE5DTEVkQlFVY3NTMEZCU3l4RFFVRkRPMGxCTmtodVF5eERRVUZETzBsQk0waEhPenM3VDBGSFJ6dEpRVU5JTEhOQ1FVRnpRanRSUVVOc1FpeFBRVUZQTEVsQlFVa3NRMEZCUXp0SlFVTm9RaXhEUVVGRE8wbEJSVVE3T3pzN08wOUJTMGM3U1VGRFNDeHBRa0ZCYVVJc1EwRkRZaXhqUVVGcFF5eEZRVU5xUXl4TFFVRmhMRVZCUTJJc2EwSkJRWFZETzFGQlJYWkRMRWxCUVVrc1EwRkJReXhqUVVGakxFZEJRVWNzWTBGQll5eERRVUZETzFGQlEzSkRMRWxCUVVrc1EwRkJReXhMUVVGTExFZEJRVWNzUzBGQlN5eERRVUZETzFGQlEyNUNMRWxCUVVrc1EwRkJReXhyUWtGQmEwSXNSMEZCUnl4clFrRkJhMElzUTBGQlF6dFJRVU0zUXl4SlFVRkpMR3RDUVVGclFpeEpRVUZKTEVsQlFVa3NSVUZCUlR0WlFVTTFRaXhKUVVGSkxFTkJRVU1zYTBKQlFXdENMRWRCUVVjc1JVRkJkMElzUTBGQlF6dFpRVU51UkN4SlFVRkpMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNUMEZCVHl4SFFVRkhMRWxCUVVrc1EwRkJRenRUUVVNeFF6dFJRVVZFTEVsQlFVa3NRMEZCUXl4WFFVRlhMRWRCUVVjc1NVRkJTU3hEUVVGRExHTkJRV01zUTBGQlF5eHBRa0ZCYVVJc1EwRkRjRVFzU1VGQlNTeERRVUZETEV0QlFVc3NSVUZEVml4SlFVRkpMRU5CUVVNc2EwSkJRV3RDTEVOQlF6RkNMRU5CUVVNN1VVRkRSaXhKUVVGSkxFTkJRVU1zWjBKQlFXZENMRVZCUVVVc1EwRkJRenRKUVVNMVFpeERRVUZETzBsQlJVUXNaMEpCUVdkQ08xRkJRMW9zYjBOQlFXOURPMUZCUTNCRExFbEJRVWtzUTBGQlF5eFhRVUZYTEVOQlFVTXNWVUZCVlN4SFFVRkhMR0ZCUVdFc1EwRkJRenRSUVVNMVF5eEpRVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkRMRTFCUVUwc1IwRkJSeXhEUVVGRExFVkJRVk1zUlVGQlJTeEZRVUZGTEVOQlFVTXNTVUZCU1N4RFFVRkRMRmxCUVZrc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF6dFJRVU12UkN4SlFVRkpMRU5CUVVNc1YwRkJWeXhEUVVGRExFOUJRVThzUjBGQlJ5eERRVUZETEVWQlFWTXNSVUZCUlN4RlFVRkZMRU5CUVVNc1NVRkJTU3hEUVVGRExHRkJRV0VzUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXp0UlFVTnFSU3hKUVVGSkxFTkJRVU1zVjBGQlZ5eERRVUZETEZOQlFWTXNSMEZCUnl4RFFVRkRMRVZCUVdkQ0xFVkJRVVVzUlVGQlJTeERRVU01UXl4SlFVRkpMRU5CUVVNc1pVRkJaU3hEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETzFGQlF6ZENMRWxCUVVrc1EwRkJReXhYUVVGWExFTkJRVU1zVDBGQlR5eEhRVUZITEVOQlFVTXNSVUZCWjBJc1JVRkJSU3hGUVVGRkxFTkJRVU1zU1VGQlNTeERRVUZETEdGQlFXRXNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJRenRKUVVNMVJTeERRVUZETzBsQlJVUTdPMDlCUlVjN1NVRkRTQ3haUVVGWkxFTkJRVU1zUlVGQlV6czdVVUZEYkVJc2MwUkJRVlVzUTBGRFRpeG5SVUZCYjBJc1JVRkJSU3hGUVVOMFFpeHBRa0ZCYVVJc1NVRkJTU3hEUVVGRExFdEJRVXNzVjBGQlZ5eEZRVU4wUXl4RFFVRkRMRU5CUTBvc1EwRkJRenRSUVVOR0xFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNWVUZCU1N4RFFVRkRMRmRCUVZjc01FTkJRVVVzUzBGQlN5eEZRVUZGTEVWQlFVVXNRMEZCUXl4RFFVRkRPMGxCUXpkRExFTkJRVU03U1VGRlJEczdUMEZGUnp0SlFVTklMR0ZCUVdFc1EwRkJReXhGUVVGVE96dFJRVU51UWl4elJFRkJWU3hEUVVOT0xHZEZRVUZ2UWl4RlFVRkZMRVZCUTNSQ0xHbENRVUZwUWl4SlFVRkpMRU5CUVVNc1MwRkJTeXhYUVVGWExFVkJRM1JETEVOQlFVTXNRMEZEU2l4RFFVRkRPMUZCUTBZc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eFZRVUZKTEVOQlFVTXNWMEZCVnl3d1EwRkJSU3hMUVVGTExFVkJRVVVzUlVGQlJTeERRVUZETEVOQlFVTTdTVUZET1VNc1EwRkJRenRKUVVWRU96czdUMEZIUnp0SlFVTklMR1ZCUVdVc1EwRkJReXhMUVVGdFFqdFJRVU12UWl3NFJFRkJPRVE3VVVGRE9VUXNjMFJCUVZVc1EwRkRUaXhuUlVGQmIwSXNSVUZCUlN4RlFVTjBRaXhwUWtGQmFVSXNTVUZCU1N4RFFVRkRMRXRCUVVzc1kwRkJZeXhMUVVGTExFVkJRVVVzUlVGRGFFUXNRMEZCUXl4RFFVTktMRU5CUVVNN1NVRkRUaXhEUVVGRE8wbEJSVVE3T3p0UFFVZEhPMGxCUTBnc1lVRkJZU3hEUVVGRExFdEJRVzFDT3p0UlFVTTNRaXh6UkVGQlZTeERRVU5PTEdkRlFVRnZRaXhGUVVGRkxFVkJRM1JDTEdsQ1FVRnBRaXhKUVVGSkxFTkJRVU1zUzBGQlN5eFpRVUZaTEV0QlFVc3NSVUZCUlN4RlFVTTVReXhEUVVGRExFTkJRMG9zUTBGQlF6dFJRVU5HTEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1ZVRkJTU3hEUVVGRExGZEJRVmNzTUVOQlFVVXNTMEZCU3l4RlFVRkZMRXRCUVVzc1EwRkJReXhEUVVGRE8wbEJRMnBFTEVOQlFVTTdTVUZGUkRzN096dFBRVWxITzBsQlEwZ3NOa1JCUVRaRU8wbEJRemRFTEUxQlFVMHNRMEZCUXl4TFFVRmhMRVZCUVVVc1JVRkJVenRSUVVNelFpd3JRa0ZCSzBJN1NVRkRia01zUTBGQlF6dEpRVVZFT3pzN08wOUJTVWM3U1VGRFNDdzJSRUZCTmtRN1NVRkROMFFzVDBGQlR5eERRVUZETEV0QlFXRXNSVUZCUlN4RlFVRlRPMUZCUXpWQ0xDdENRVUVyUWp0SlFVTnVReXhEUVVGRE8wbEJSVVE3T3pzN1QwRkpSenRKUVVOSUxEWkVRVUUyUkR0SlFVTTNSQ3hQUVVGUExFTkJRVU1zUzBGQllTeEZRVUZGTEVWQlFWTTdVVUZETlVJc0swSkJRU3RDTzBsQlEyNURMRU5CUVVNN1EwRkRTanM3T3pzN096czdPenM3T3pzN096dEJRM3BKUkN4clJFRkJhMFE3UVVGRlVqdEJRVWN4UXpzN1IwRkZSenRCUVVOSkxFMUJRVTBzYVVKQlFXbENPMGxCUnpGQ096dFBRVVZITzBsQlEwZ3NXVUZCV1N4dFFrRkJNRU03VVVGRGJFUXNTVUZCU1N4RFFVRkRMRzFDUVVGdFFpeEhRVUZITEcxQ1FVRnRRaXhEUVVGRE8wbEJRMjVFTEVOQlFVTTdTVUZGUkN4UFFVRlBPMUZCUTBnc1QwRkJUeXhEUVVOSUxFbEJRVWtzUTBGQlF5eHRRa0ZCYlVJc1EwRkJReXh6UWtGQmMwSXNSVUZCUlN4RFFVRkRMRmRCUVZjN1dVRkRla1FzVTBGQlV6dFpRVU5pTEVsQlFVa3NRMEZCUXl4dFFrRkJiVUlzUTBGQlF5eHpRa0ZCYzBJc1JVRkJSU3hEUVVGRExGZEJRVmM3YVVKQlEzaEVMRlZCUVZVc1NVRkJTU3hOUVVGTkxFTkJRelZDTEVOQlFVTTdTVUZEVGl4RFFVRkRPMGxCUlVRN096dFBRVWRITzBsQlEwZ3NVVUZCVVN4RFFVRkRMRWxCUVdsQ08xRkJRM1JDTERKQ1FVRXlRanRSUVVNelFpeE5RVUZOTEcxQ1FVRnRRaXhIUVVOeVFpeEpRVUZKTEVOQlFVTXNiVUpCUVcxQ0xFTkJRVU1zYzBKQlFYTkNMRVZCUVVVc1EwRkJRenRSUVVWMFJDeEpRVUZKTEcxQ1FVRnRRaXhEUVVGRExGZEJRVmNzUTBGQlF5eFZRVUZWTEVsQlFVa3NUVUZCVFN4RlFVRkZPMWxCUTNSRUxHMUNRVUZ0UWl4RFFVRkRMRmRCUVZjc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdXVUZETTBNc2MwUkJRVlVzUTBGRFRpeG5SVUZCYjBJc1JVRkJSU3hGUVVOMFFpeHBRa0ZCYVVJc1NVRkJTU3hWUVVGVkxFTkJRVU1zU1VGQlNTeERRVUZETEVWQlFVVXNSVUZEZGtNc1EwRkJReXhEUVVOS0xFTkJRVU03V1VGRFJpeEpRVUZKTEVOQlFVTXNPRUpCUVRoQ0xFVkJRVVVzUTBGQlF6dFRRVU42UXp0aFFVRk5PMWxCUTBnc2QwUkJRVmtzUTBGRFVpeG5SVUZCYjBJc1JVRkJSU3hGUVVOMFFpeHRRa0ZCYlVJc1NVRkJTU3hWUVVGVkxFTkJRVU1zU1VGQlNTeERRVUZETEVWQlFVVXNRMEZETlVNc1EwRkJRenRUUVVOTU8wbEJRMHdzUTBGQlF6dEpRVVZFT3p0UFFVVkhPMGxCUTBnc09FSkJRVGhDTzFGQlF6RkNMR2xEUVVGcFF6dEpRVU55UXl4RFFVRkRPME5CUTBvN096czdPenM3T3pzN096czdPenM3T3p0QlF6RkVSQ3hyUkVGQmEwUTdRVUZGYkVRN08wZEJSVWM3UVVGRFNTeE5RVUZOTEdWQlFXVTdTVUZMZUVJN1VVRkRTU3hKUVVGSkxFTkJRVU1zYzBKQlFYTkNMRWRCUVVjc1NVRkJTU3h6UWtGQmMwSXNSVUZCUlN4RFFVRkRPMUZCUXpORUxFbEJRVWtzUTBGQlF5eGxRVUZsTEVkQlFVY3NTVUZCU1N4bFFVRmxMRVZCUVVVc1EwRkJRenRSUVVNM1F5eEpRVUZKTEVOQlFVTXNZMEZCWXl4SFFVRkhMRWxCUVVrc1kwRkJZeXhGUVVGRkxFTkJRVU03U1VGREwwTXNRMEZCUXp0SlFVVkVPenRQUVVWSE8wbEJRMGdzV1VGQldUdFJRVU5TTEVsQlFVa3NTVUZCU1N4RFFVRkRMR05CUVdNc1EwRkJReXhOUVVGTkxFbEJRVWtzU1VGQlNTeEZRVUZGTzFsQlEzQkRMRWxCUVVrc1EwRkJReXhqUVVGakxFTkJRVU1zUjBGQlJ5eEhRVUZITEVsQlFVa3NRMEZCUXl4alFVRmpMRU5CUVVNc1RVRkJUU3hEUVVGRE8xTkJRM2hFTzBsQlEwd3NRMEZCUXp0RFFVTktPMEZCUlVRN08wZEJSVWM3UVVGRFNTeE5RVUZOTEhOQ1FVRnpRanREUVVkc1F6dEJRVVZFT3p0SFFVVkhPMEZCUTBrc1RVRkJUU3hsUVVGbE8wTkJVVE5DTzBGQlJVUTdPMGRCUlVjN1FVRkRTU3hOUVVGTkxHTkJRV003UTBGVk1VSTdPenM3T3pzN096czdPenM3T3pzN1FVTTFSRVFzYTBSQlFXdEVPMEZCUlZJN1FVRkRNVU03TzBkQlJVYzdRVUZEU1N4TlFVRk5MR3RDUVVGclFqdEpRVUV2UWp0UlFVTkpMREpFUVVFeVJEdFJRVU16UkN4clFrRkJZU3hIUVVGWExFbEJRVWtzUTBGQlF6dFJRVU0zUWl4MVFrRkJhMElzUjBGQlZ5eEpRVUZKTEVOQlFVTTdVVUZGYkVNc2FVUkJRV2xFTzFGQlEycEVMSEZDUVVGblFpeEhRVUZYTEVsQlFVa3NRMEZCUXp0UlFVTm9ReXh6UWtGQmFVSXNSMEZCVnl4SlFVRkpMRU5CUVVNN1VVRkRha01zYjBKQlFXVXNSMEZCVnl4SlFVRkpMRU5CUVVNN1VVRkRMMElzY1VKQlFXZENMRWRCUVZjc1NVRkJTU3hEUVVGRE8xRkJSV2hETERoRFFVRTRRenRSUVVNNVF5eGhRVUZSTEVkQlFWY3NTVUZCU1N4RFFVRkRPMUZCUTNoQ0xHOUNRVUZsTEVkQlFWY3NTVUZCU1N4RFFVRkRPMUZCUlM5Q0xESkNRVUV5UWp0UlFVTXpRaXh2UWtGQlpTeEhRVUZITEVOQlFVTXNRMEZCUXp0UlFVTndRaXg1UWtGQmIwSXNSMEZCUnl4RFFVRkRMRU5CUVVNN1VVRkZla0lzT0VKQlFUaENPMUZCUXpsQ0xESkNRVUZ6UWl4SFFVRkhMRU5CUVVNc1EwRkJRenRSUVVNelFpeHBRa0ZCV1N4SFFVRkhMRU5CUVVNc1EwRkJRenRSUVVOcVFpeDNRa0ZCZDBJN1VVRkRlRUlzYlVKQlFXTXNSMEZCUnl4RFFVRkRMRU5CUVVNN1VVRkRia0lzZFVKQlFXdENMRWRCUVVjc1EwRkJReXhEUVVGRE8xRkJRM1pDTERSQ1FVRjFRaXhIUVVGSExFTkJRVU1zUTBGQlF6dFJRVU0xUWl4dlFrRkJaU3hIUVVGSExFTkJRVU1zUTBGQlF6dFJRVU53UWl4dFEwRkJiVU03VVVGRGJrTXNhMEpCUVdFc1IwRkJSeXhEUVVGRExFTkJRVU03U1VGNVEzUkNMRU5CUVVNN1NVRjJRMGM3T3p0UFFVZEhPMGxCUTBnc2QwSkJRWGRDTEVOQlFVTXNWMEZCYlVJN1VVRkRlRU1zU1VGQlNTeEpRVUZKTEVOQlFVTXNkVUpCUVhWQ0xFbEJRVWtzUTBGQlF5eEZRVUZGTzFsQlEyNURMRWxCUVVrc1EwRkJReXgxUWtGQmRVSXNSMEZCUnl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExGZEJRVmNzUTBGQlF5eERRVUZETzFOQlF6RkVPMGxCUTB3c1EwRkJRenRKUVVWRU96dFBRVVZITzBsQlEwZ3NZVUZCWVR0UlFVTlVMRWxCUTBrc1NVRkJTU3hEUVVGRExGRkJRVkVzU1VGQlNTeEpRVUZKTzFsQlEzSkNMRU5CUVVNc1NVRkJTU3hEUVVGRExHVkJRV1VzU1VGQlNTeEpRVUZKTEVsQlFVa3NTVUZCU1N4RFFVRkRMR2RDUVVGblFpeEpRVUZKTEVsQlFVa3NRMEZCUXl4RlFVTnFSVHRaUVVORkxITkVRVUZWTEVOQlEwNHNaMFZCUVc5Q0xFVkJRVVVzUlVGRGRFSXNkMEpCUVhkQ0xFbEJRVWtzUTBGQlF5eG5Ra0ZCWjBJc1QwRkJUeXhKUVVGSkxFTkJRVU1zWlVGQlpTeEZRVUZGTEVWQlF6RkZMRU5CUVVNc1EwRkRTaXhEUVVGRE8xbEJRMFlzU1VGQlNTeERRVUZETEZGQlFWRXNSMEZCUnl4SlFVRkpMRU5CUVVNc1owSkJRV2RDTEVkQlFVY3NTVUZCU1N4RFFVRkRMR1ZCUVdVc1EwRkJRenRUUVVOb1JUdFJRVVZFTEVsQlEwa3NTVUZCU1N4RFFVRkRMR1ZCUVdVc1NVRkJTU3hKUVVGSk8xbEJRelZDTEVOQlFVTXNTVUZCU1N4RFFVRkRMR2RDUVVGblFpeEpRVUZKTEVsQlFVa3NTVUZCU1N4SlFVRkpMRU5CUVVNc2FVSkJRV2xDTEVsQlFVa3NTVUZCU1N4RFFVRkRMRVZCUTI1Rk8xbEJRMFVzYzBSQlFWVXNRMEZEVGl4blJVRkJiMElzUlVGQlJTeEZRVU4wUWl4cFEwRkJhVU1zU1VGQlNTeERRVUZETEdsQ1FVRnBRaXhQUVVGUExFbEJRVWtzUTBGQlF5eG5Ra0ZCWjBJc1JVRkJSU3hGUVVOeVJpeERRVUZETEVOQlEwb3NRMEZCUXp0WlFVTkdMRWxCUVVrc1EwRkJReXhsUVVGbE8yZENRVU5vUWl4SlFVRkpMRU5CUVVNc2FVSkJRV2xDTEVkQlFVY3NTVUZCU1N4RFFVRkRMR2RDUVVGblFpeERRVUZETzFOQlEzUkVPMGxCUTB3c1EwRkJRenREUVVOS096czdPenM3T3pzN096czdPenM3UVVNelJVUXNhMFJCUVd0RU8wRkJSV3hFT3p0SFFVVkhPMEZCUTBrc1RVRkJUU3hYUVVGWE8wbEJUM0JDT3pzN1QwRkhSenRKUVVOSUxGbEJRVmtzVDBGQmIwSTdVVUZRYUVNc2MwSkJRV2xDTEVkQlFVY3NRMEZCUXl4RFFVRkRPMUZCUTNSQ0xIRkNRVUZuUWl4SFFVRkhMRU5CUVVNc1EwRkJRenRSUVU5cVFpeEpRVUZKTEVOQlFVTXNUMEZCVHl4SFFVRkhMRTlCUVU4c1EwRkJRenRSUVVWMlFpeHhRa0ZCY1VJN1VVRkRja0lzU1VGQlNTeERRVUZETEZkQlFWY3NSMEZCUnl4UlFVRlJMRU5CUVVNc1lVRkJZU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETzFGQlEycEVMRWxCUVVrc1EwRkJReXhYUVVGWExFTkJRVU1zUlVGQlJTeEhRVUZITEdGQlFXRXNRMEZCUXp0UlFVTndReXhKUVVGSkxFTkJRVU1zVjBGQlZ5eERRVUZETEV0QlFVc3NRMEZCUXl4UFFVRlBMRWRCUVVjc1RVRkJUU3hEUVVGRE8xRkJRM2hETEVsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVNc1MwRkJTeXhEUVVGRExHRkJRV0VzUjBGQlJ5eE5RVUZOTEVOQlFVTTdVVUZET1VNc1NVRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF5eExRVUZMTEVOQlFVTXNVVUZCVVN4SFFVRkhMRlZCUVZVc1EwRkJRenRSUVVNM1F5eEpRVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkRMRXRCUVVzc1EwRkJReXhOUVVGTkxFZEJRVWNzU1VGQlNTeERRVUZETzFGQlJYSkRMR2REUVVGblF6dFJRVU5vUXl4SlFVRkpMRU5CUVVNc1dVRkJXU3hIUVVGSExGRkJRVkVzUTBGQlF5eGhRVUZoTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNN1VVRkRiRVFzU1VGQlNTeERRVUZETEZsQlFWa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1VVRkJVU3hIUVVGSExGVkJRVlVzUTBGQlF6dFJRVVU1UXl4blJrRkJaMFk3VVVGRGFFWXNTVUZCU1N4RFFVRkRMRmRCUVZjc1EwRkJReXhYUVVGWExFTkJRVU1zU1VGQlNTeERRVUZETEZsQlFWa3NRMEZCUXl4RFFVRkRPMUZCUTJoRUxFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNWMEZCVnl4RFFVRkRMRWxCUVVrc1EwRkJReXhYUVVGWExFTkJRVU1zUTBGQlF6dEpRVU12UXl4RFFVRkRPMGxCUlVRN08wOUJSVWM3U1VGRFNDeHBRa0ZCYVVJN1VVRkRZaXhKUVVGSkxFTkJRVU1zVjBGQlZ5eERRVUZETEV0QlFVc3NRMEZCUXl4UFFVRlBMRWRCUVVjc1QwRkJUeXhEUVVGRE8wbEJRemRETEVOQlFVTTdTVUZGUkRzN1QwRkZSenRKUVVOSUxHbENRVUZwUWp0UlFVTmlMRWxCUVVrc1EwRkJReXhYUVVGWExFTkJRVU1zUzBGQlN5eERRVUZETEU5QlFVOHNSMEZCUnl4TlFVRk5MRU5CUVVNN1NVRkROVU1zUTBGQlF6dEpRVVZFT3pzN1QwRkhSenRKUVVOSUxIZENRVUYzUWl4RFFVRkRMRWxCUVdkQ08xRkJRM0pETEUxQlFVMHNUVUZCVFN4SFFVRkhMRWxCUVVrc1EwRkRaaXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTXNTVUZCU1N4RlFVRkZMRWxCUVVrc1JVRkJSU3hGUVVGRkxFTkJRVU1zU1VGQlNTeEhRVUZITEUxQlFVMHNRMEZCUXl4WlFVRlpMRU5CUVVNc1NVRkJTU3hEUVVGRExFVkJRVVVzUlVGQlJTeERRVUZETEVOQlEzQkZMRU5CUVVNN1VVRkRSaXhKUVVGSkxFTkJRVU1zV1VGQldTeERRVUZETEVkQlFVY3NSMEZCUnl4NVFrRkJlVUlzUjBGQlJ5eE5RVUZOTEVOQlFVTTdTVUZETDBRc1EwRkJRenRKUVVWRU96dFBRVVZITzBsQlEwZ3NhVU5CUVdsRE8xRkJRemRDTEVsQlFVa3NRMEZCUXl4cFFrRkJhVUlzUjBGQlJ5eEpRVUZKTEVOQlFVTXNXVUZCV1N4RFFVRkRMR0ZCUVdFc1EwRkJRenRSUVVONlJDeEpRVUZKTEVOQlFVTXNaMEpCUVdkQ0xFZEJRVWNzU1VGQlNTeERRVUZETEZsQlFWa3NRMEZCUXl4WlFVRlpMRU5CUVVNN1VVRkRka1FzU1VGQlNTeERRVUZETEUxQlFVMHNSVUZCUlN4RFFVRkRPMGxCUTJ4Q0xFTkJRVU03U1VGRlJEczdUMEZGUnp0SlFVTklMRTFCUVUwN1VVRkRSaXhKUVVGSkxFbEJRVWtzUTBGQlF5eG5Ra0ZCWjBJc1MwRkJTeXhEUVVGRExFbEJRVWtzU1VGQlNTeERRVUZETEdsQ1FVRnBRaXhMUVVGTExFTkJRVU1zUlVGQlJUdFpRVU0zUkN4SlFVRkpMRmxCUVZrc1IwRkJSeXhEUVVGRExFTkJRVU03V1VGRGNrSXNTVUZCU1N4aFFVRmhMRWRCUVVjc1EwRkJReXhEUVVGRE8xbEJRM1JDTEVsQlFVa3NWVUZCVlN4SFFVRkhMRU5CUVVNc1EwRkJRenRaUVVOdVFpeEpRVUZKTEZkQlFWY3NSMEZCUnl4RFFVRkRMRU5CUVVNN1dVRkRjRUlzVFVGQlRTeHBRa0ZCYVVJc1IwRkRia0lzU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4WFFVRlhMRWRCUVVjc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eFpRVUZaTEVOQlFVTTdXVUZEZWtRc1RVRkJUU3huUWtGQlowSXNSMEZEYkVJc1NVRkJTU3hEUVVGRExHZENRVUZuUWl4SFFVRkhMRWxCUVVrc1EwRkJReXhwUWtGQmFVSXNRMEZCUXp0WlFVTnVSQ3hKUVVGSkxHbENRVUZwUWl4SFFVRkhMR2RDUVVGblFpeEZRVUZGTzJkQ1FVTjBReXhaUVVGWkxFZEJRVWNzU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4WFFVRlhMRU5CUVVNN1owSkJRM2hETEdGQlFXRXNSMEZCUnl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVOMFFpeEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRmRCUVZjc1IwRkJSeXhuUWtGQlowSXNRMEZET1VNc1EwRkJRenRuUWtGRFJpeFZRVUZWTEVkQlFVY3NTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkRia0lzUTBGQlF5eEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRmxCUVZrc1IwRkJSeXhoUVVGaExFTkJRVU1zUjBGQlJ5eEhRVUZITEVOQlEzQkVMRU5CUVVNN1owSkJRMFlzVjBGQlZ5eEhRVUZITEVOQlFVTXNRMEZCUXp0aFFVTnVRanRwUWtGQlRUdG5Ra0ZEU0N4WlFVRlpMRWRCUVVjc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGRGNrSXNTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhaUVVGWkxFZEJRVWNzWjBKQlFXZENMRU5CUXk5RExFTkJRVU03WjBKQlEwWXNZVUZCWVN4SFFVRkhMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zV1VGQldTeERRVUZETzJkQ1FVTXhReXhWUVVGVkxFZEJRVWNzUTBGQlF5eERRVUZETzJkQ1FVTm1MRmRCUVZjc1IwRkJSeXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVU53UWl4RFFVRkRMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zVjBGQlZ5eEhRVUZITEZsQlFWa3NRMEZCUXl4SFFVRkhMRWRCUVVjc1EwRkRiRVFzUTBGQlF6dGhRVU5NTzFsQlEwUXNTVUZCU1N4RFFVRkRMRmRCUVZjc1EwRkJReXhMUVVGTExFTkJRVU1zUzBGQlN5eEhRVUZITEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1YwRkJWeXhIUVVGSExFbEJRVWtzUTBGQlF6dFpRVU12UkN4SlFVRkpMRU5CUVVNc1YwRkJWeXhEUVVGRExFdEJRVXNzUTBGQlF5eE5RVUZOTEVkQlFVY3NTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhaUVVGWkxFZEJRVWNzU1VGQlNTeERRVUZETzFsQlEycEZMRWxCUVVrc1EwRkJReXhYUVVGWExFTkJRVU1zUzBGQlN5eERRVUZETEVsQlFVa3NSMEZCUnl4RFFVRkRMRWRCUVVjc1NVRkJTU3hEUVVGRE8xbEJRM1pETEVsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVNc1MwRkJTeXhEUVVGRExFZEJRVWNzUjBGQlJ5eERRVUZETEVkQlFVY3NTVUZCU1N4RFFVRkRPMWxCUlhSRExFbEJRVWtzUTBGQlF5eFpRVUZaTEVOQlFVTXNTMEZCU3l4RFFVRkRMRXRCUVVzc1IwRkJSeXhaUVVGWkxFZEJRVWNzU1VGQlNTeERRVUZETzFsQlEzQkVMRWxCUVVrc1EwRkJReXhaUVVGWkxFTkJRVU1zUzBGQlN5eERRVUZETEUxQlFVMHNSMEZCUnl4aFFVRmhMRWRCUVVjc1NVRkJTU3hEUVVGRE8xbEJRM1JFTEVsQlFVa3NRMEZCUXl4WlFVRlpMRU5CUVVNc1MwRkJTeXhEUVVGRExFbEJRVWtzUjBGQlJ5eFhRVUZYTEVkQlFVY3NTVUZCU1N4RFFVRkRPMWxCUTJ4RUxFbEJRVWtzUTBGQlF5eFpRVUZaTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWRCUVVjc1IwRkJSeXhWUVVGVkxFZEJRVWNzU1VGQlNTeERRVUZETzFOQlEyNUVPMGxCUTB3c1EwRkJRenREUVVOS096czdPenM3T3pzN096czdPenM3T3p0QlEycElSQ3hyUkVGQmEwUTdRVUZGVWp0QlFVTkZPMEZCUlRWRE96dEhRVVZITzBGQlEwa3NUVUZCVFN4eFFrRkJjVUk3U1VGUk9VSTdPenRQUVVkSE8wbEJRMGdzV1VGQldTeFBRVUZ2UWp0UlFWWm9ReXhqUVVGVExFZEJRVWNzUzBGQlN5eERRVUZETzFGQlEyeENMRk5CUVVrc1IwRkJSeXhEUVVGRExFTkJRVU03VVVGRFZDeFRRVUZKTEVkQlFXVXNVMEZCVXl4RFFVRkRPMUZCUXpkQ0xGVkJRVXNzUjBGQlJ5eExRVUZMTEVOQlFVTTdVVUZEWkN4eFFrRkJaMElzUjBGQlJ5eEZRVUZGTEVOQlFVTTdVVUZQYkVJc1NVRkJTU3hEUVVGRExGZEJRVmNzUjBGQlJ5eEpRVUZKTEhGRVFVRlhMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU03U1VGRGFFUXNRMEZCUXp0SlFVVkVPenRQUVVWSE8wbEJRMGdzWlVGQlpUdFJRVU5ZTEVsQlFVa3NTVUZCU1N4RFFVRkRMRXRCUVVzc1JVRkJSVHRaUVVOYUxFbEJRVWtzUTBGQlF5eFhRVUZYTEVOQlFVTXNhVUpCUVdsQ0xFVkJRVVVzUTBGQlF6dFRRVU40UXp0SlFVTk1MRU5CUVVNN1NVRkZSRHM3VDBGRlJ6dEpRVU5JTEdWQlFXVTdVVUZEV0N4SlFVRkpMRU5CUVVNc1MwRkJTeXhIUVVGSExFdEJRVXNzUTBGQlF6dFJRVU51UWl4SlFVRkpMRU5CUVVNc1YwRkJWeXhEUVVGRExHbENRVUZwUWl4RlFVRkZMRU5CUVVNN1NVRkRla01zUTBGQlF6dEpRVVZFT3pzN08wOUJTVWM3U1VGRFNDeDNRa0ZCZDBJc1EwRkJReXhKUVVGblFpeEZRVUZGTEdOQlFUQkNPMUZCUTJwRkxFbEJRVWtzUTBGQlF5eFhRVUZYTEVOQlFVTXNkMEpCUVhkQ0xFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdVVUZEYUVRc1NVRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF5eFpRVUZaTEVOQlFVTXNUVUZCVFN4SFFVRkhMRWRCUVVjc1JVRkJSVHRaUVVONFF5eEpRVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkRMR2xEUVVGcFF5eEZRVUZGTEVOQlFVTTdXVUZEY2tRc1kwRkJZeXhGUVVGRkxFTkJRVU03VVVGRGNrSXNRMEZCUXl4RFFVRkRPMGxCUTA0c1EwRkJRenRKUVVWRU96czdPMDlCU1VjN1NVRkRTQ3g1UWtGQmVVSXNRMEZCUXl4SlFVRm5RaXhGUVVGRkxHTkJRVEJDTzFGQlEyeEZMSE5HUVVGelJqdFJRVU4wUml4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExGTkJRVk1zUlVGQlJUdFpRVU5xUWl4SlFVRkpMRU5CUVVNc1UwRkJVeXhIUVVGSExFbEJRVWtzUTBGQlF6dFpRVU4wUWl4SlFVRkpMRU5CUVVNc1MwRkJTeXhIUVVGSExFdEJRVXNzUTBGQlF6dFpRVU51UWl4SlFVRkpMRU5CUVVNc1NVRkJTU3hIUVVGSExFTkJRVU1zUTBGQlF6dFpRVU5rTEVsQlFVa3NRMEZCUXl4SlFVRkpMRWRCUVVjc1UwRkJVeXhEUVVGRE8xTkJRM3BDTzFGQlJVUXNlVVJCUVhsRU8xRkJRM3BFTEVsQlFVa3NRMEZCUXl4SlFVRkpMRWRCUVVjc1NVRkJTU3hSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNc1JVRkJSU3hKUVVGSkxFTkJRVU1zUTBGQlF6dFJRVVZ3UlN4dFEwRkJiVU03VVVGRGJrTXNUVUZCVFN4VFFVRlRMRWRCUVVjc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkZjRU1zYzBSQlFYTkVPMUZCUTNSRUxFbEJRVWtzU1VGQlNTeERRVUZETEVsQlFVa3NSVUZCUlR0WlFVTllMRTFCUVUwc1NVRkJTU3hIUVVGSExFbEJRVWtzVlVGQlZTeERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1RVRkJUU3hIUVVGSExGTkJRVk1zUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXp0WlFVTnFSU3hKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU03V1VGRGRrSXNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhUUVVGVExFVkJRVVVzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJRenRaUVVOMFF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4SFFVRkhMRWxCUVVrc1EwRkJRenRUUVVOd1FqdFJRVU5FTERCRFFVRXdRenRoUVVOeVF6dFpRVU5FTEVsQlFVa3NRMEZCUXl4SlFVRkpMRWRCUVVjc1UwRkJVeXhEUVVGRE8xbEJRM1JDTEVsQlFVa3NRMEZCUXl4VFFVRlRMRWRCUVVjc1NVRkJTU3hEUVVGRE8xbEJRM1JDTEhORVFVRlZMRU5CUTA0c1owVkJRVzlDTEVWQlFVVXNSVUZEZEVJc2VVTkJRWGxETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1RVRkJUU3hKUVVGSkxFbEJRVWtzUTBGQlF5eEpRVUZKTEVWQlFVVXNSVUZEZUVVc1EwRkJReXhEUVVOS0xFTkJRVU03VTBGRFREdFJRVVZFTEhORVFVRnpSRHRSUVVOMFJDeEpRVUZKTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1RVRkJUU3hMUVVGTExFbEJRVWtzUTBGQlF5eEpRVUZKTEVWQlFVVTdXVUZEYUVNc1NVRkJTU3hEUVVGRExGTkJRVk1zUjBGQlJ5eExRVUZMTEVOQlFVTTdXVUZEZGtJc1NVRkJTU3hEUVVGRExFdEJRVXNzUjBGQlJ5eEpRVUZKTEVOQlFVTTdXVUZEYkVJc2MwUkJRVlVzUTBGRFRpeG5SVUZCYjBJc1JVRkJSU3hGUVVOMFFpeHJRMEZCYTBNc1NVRkJTU3hEUVVGRExFbEJRVWtzUlVGQlJTeEZRVU0zUXl4RFFVRkRMRU5CUTBvc1EwRkJRenRaUVVOR0xFbEJRVWtzUTBGQlF5eDNRa0ZCZDBJc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeEZRVUZGTEdOQlFXTXNRMEZCUXl4RFFVRkRPMU5CUXpWRU8xRkJRMFFzTUVaQlFUQkdPMkZCUTNKR0xFbEJRVWtzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4TlFVRk5MRWRCUVVjc1NVRkJTU3hEUVVGRExFbEJRVWtzUlVGQlJUdFpRVU51UXl4M1JFRkJXU3hEUVVOU0xHZEZRVUZ2UWl4RlFVRkZMRVZCUTNSQ0xHbEVRVUZwUkN4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFMUJRVTBzU1VGQlNTeEpRVUZKTEVOQlFVTXNTVUZCU1N4RlFVRkZMRU5CUTI1R0xFTkJRVU03V1VGRFJpeEpRVUZKTEVOQlFVTXNTVUZCU1N4SFFVRkhMRk5CUVZNc1EwRkJRenRaUVVOMFFpeEpRVUZKTEVOQlFVTXNVMEZCVXl4SFFVRkhMRXRCUVVzc1EwRkJRenRUUVVNeFFqdEpRVU5NTEVOQlFVTTdRMEZEU2pzN096czdPenM3T3pzN096czdPenM3TzBGRGFraEVMR3RFUVVGclJEdEJRVTFNTzBGQlEzVkNPMEZCUlhCRk96czdPMGRCU1VjN1FVRkRTU3hOUVVGTkxHMUNRVUZ0UWp0SlFWVTFRanM3T3p0UFFVbEhPMGxCUTBnc1dVRkRTU3d3UWtGQmJVUXNSVUZEYmtRc2IwSkJRV2xETEVWQlEycERMRzFDUVVGM1F6dFJRVmcxUXl4eFJVRkJjVVU3VVVGRE4wUXNPRUpCUVhsQ0xFZEJRVWNzU1VGQlNTdzBSVUZCYjBJc1JVRkJSU3hEUVVGRE8xRkJXVE5FTEVsQlFVa3NRMEZCUXl3d1FrRkJNRUlzUjBGQlJ5d3dRa0ZCTUVJc1EwRkJRenRSUVVNM1JDeEpRVUZKTEVOQlFVTXNiMEpCUVc5Q0xFZEJRVWNzYjBKQlFXOUNMRU5CUVVNN1VVRkRha1FzU1VGQlNTeERRVUZETEcxQ1FVRnRRaXhIUVVGSExHMUNRVUZ0UWl4RFFVRkRPMUZCUXk5RExFMUJRVTBzV1VGQldTeEhRVUZITEVOQlFVTXNSVUZCWXl4RlFVRkZMRVZCUVVVc1EwRkJReXhKUVVGSkxFTkJRVU1zV1VGQldTeERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRPMUZCUXk5RUxFMUJRVTBzVlVGQlZTeEhRVUZITEVOQlFVTXNSVUZCWXl4RlFVRkZMRVZCUVVVc1EwRkJReXhKUVVGSkxFTkJRVU1zVlVGQlZTeERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRPMUZCUXpORUxFMUJRVTBzVjBGQlZ5eEhRVUZITEVOQlFVTXNSVUZCWXl4RlFVRkZMRVZCUVVVc1EwRkJReXhKUVVGSkxFTkJRVU1zVjBGQlZ5eERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRPMUZCUXpkRUxGRkJRVkVzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhaUVVGWkxFVkJRVVVzV1VGQldTeEZRVUZGTEVWQlFVVXNUMEZCVHl4RlFVRkZMRXRCUVVzc1JVRkJSU3hEUVVGRExFTkJRVU03VVVGRE1VVXNVVUZCVVN4RFFVRkRMR2RDUVVGblFpeERRVUZETEZWQlFWVXNSVUZCUlN4VlFVRlZMRVZCUVVVc1JVRkJSU3hQUVVGUExFVkJRVVVzUzBGQlN5eEZRVUZGTEVOQlFVTXNRMEZCUXp0UlFVTjBSU3hSUVVGUkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1YwRkJWeXhGUVVGRkxGZEJRVmNzUlVGQlJTeEZRVUZGTEU5QlFVOHNSVUZCUlN4TFFVRkxMRVZCUVVVc1EwRkJReXhEUVVGRE8xRkJRM2hGTEVsQlFVa3NRMEZCUXl4NVFrRkJlVUlzUTBGQlF5eHhRa0ZCY1VJc1EwRkRhRVFzUjBGQlJ5eEZRVUZGTEVOQlFVTXNVVUZCVVN4RFFVRkRMRzFDUVVGdFFpeERRVUZETEZsQlFWa3NSVUZCUlN4WlFVRlpMRU5CUVVNc1EwRkRha1VzUTBGQlF6dFJRVU5HTEVsQlFVa3NRMEZCUXl4NVFrRkJlVUlzUTBGQlF5eHhRa0ZCY1VJc1EwRkRhRVFzUjBGQlJ5eEZRVUZGTEVOQlFVTXNVVUZCVVN4RFFVRkRMRzFDUVVGdFFpeERRVUZETEZWQlFWVXNSVUZCUlN4VlFVRlZMRU5CUVVNc1EwRkROMFFzUTBGQlF6dFJRVU5HTEVsQlFVa3NRMEZCUXl4NVFrRkJlVUlzUTBGQlF5eHhRa0ZCY1VJc1EwRkRhRVFzUjBGQlJ5eEZRVUZGTEVOQlFVTXNVVUZCVVN4RFFVRkRMRzFDUVVGdFFpeERRVUZETEZkQlFWY3NSVUZCUlN4WFFVRlhMRU5CUVVNc1EwRkRMMFFzUTBGQlF6dEpRVU5PTEVOQlFVTTdTVUZGUkRzN1QwRkZSenRKUVVOSUxIRkNRVUZ4UWp0UlFVTnFRaXhKUVVGSkxFTkJRVU1zZVVKQlFYbENMRU5CUVVNc1lVRkJZU3hGUVVGRkxFTkJRVU03U1VGRGJrUXNRMEZCUXp0SlFVVkVPenM3VDBGSFJ6dEpRVU5JTEN0Q1FVRXJRaXhEUVVGRExEUkNRVUZ4UXp0UlFVTnFSU3hKUVVGSkxFTkJRVU1zTkVKQlFUUkNMRWRCUVVjc05FSkJRVFJDTEVOQlFVTTdTVUZEY2tVc1EwRkJRenRKUVVWRU96czdUMEZIUnp0SlFVTklMRmxCUVZrc1EwRkJReXhMUVVGcFFqdFJRVU14UWl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExHOUNRVUZ2UWl4RFFVRkRMRmxCUVZrc1JVRkJSU3hGUVVGRk8xbEJRek5ETEU5QlFVODdVMEZEVmp0UlFVTkVMRWxCUVVrc1NVRkJTU3hEUVVGRExHVkJRV1VzU1VGQlNTeEpRVUZKTEVWQlFVVTdXVUZET1VJc1RVRkJUU3hYUVVGWExFZEJRVWNzUzBGQlN5eERRVUZETEdOQlFXTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRaUVVNMVF5eEpRVUZKTEVOQlFVTXNaVUZCWlN4SFFVRkhMRWxCUVVrc1pVRkJaU3hEUVVOMFF5eFhRVUZYTEVOQlFVTXNWVUZCVlN4RlFVTjBRaXhYUVVGWExFTkJRVU1zVDBGQlR5eEhRVUZITEVsQlFVa3NRMEZCUXl3MFFrRkJORUlzUTBGQlF5eEpRVUZKTEVWQlF6VkVMRmRCUVZjc1EwRkJReXhQUVVGUExFZEJRVWNzU1VGQlNTeERRVUZETERSQ1FVRTBRaXhEUVVGRExFZEJRVWNzUTBGRE9VUXNRMEZCUXp0WlFVVkdMRTFCUVUwc2EwSkJRV3RDTEVkQlEzQkNMRWxCUVVrc1EwRkJReXh2UWtGQmIwSXNRMEZCUXl4eFFrRkJjVUlzUlVGQmIwSXNRMEZCUXp0WlFVTjRSU3hOUVVGTkxGVkJRVlVzUjBGQlJ5eEpRVUZKTEZWQlFWVXNRMEZCUXl4WlFVRlpMRVZCUVVVc1YwRkJWeXhEUVVGRExFTkJRVU03V1VGRE4wUXNhMEpCUVd0Q0xFTkJRVU1zWVVGQllTeERRVUZETEZWQlFWVXNRMEZCUXl4RFFVRkRPMWxCUlRkRExFMUJRVTBzUzBGQlN5eEhRVUZITEVsQlFVa3NRMEZCUXl4dFFrRkJiVUlzUTBGQlF5dzBRa0ZCTkVJc1EwRkRMMFFzU1VGQlNTeERRVUZETEdWQlFXVXNRMEZCUXl4RFFVRkRMRVZCUTNSQ0xFbEJRVWtzUTBGQlF5eGxRVUZsTEVOQlFVTXNRMEZCUXl4RFFVTjZRaXhEUVVGRE8xbEJRMFlzVFVGQlRTeHJRa0ZCYTBJc1IwRkRjRUlzU1VGQlNTeERRVUZETERCQ1FVRXdRaXhEUVVGRExHdENRVUZyUWl4RFFVRkRPMWxCUTNaRUxHdENRVUZyUWl4RFFVRkRMRWRCUVVjc1EwRkJReXhYUVVGWExFTkJRVU1zUTBGQlF6dG5Ra0ZEYUVNc2FVVkJRWE5DTzJkQ1FVTjBRaXhMUVVGTExFTkJRVU1zUTBGQlF6dG5Ra0ZEVUN4TFFVRkxMRU5CUVVNc1EwRkJRenRoUVVOV0xFTkJRVU1zUTBGQlF6dFRRVU5PTzFGQlEwUXNTMEZCU3l4RFFVRkRMR05CUVdNc1JVRkJSU3hEUVVGRE8wbEJRek5DTEVOQlFVTTdTVUZGUkRzN08wOUJSMGM3U1VGRFNDeFZRVUZWTEVOQlFVTXNWVUZCYzBJN1VVRkROMElzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4dlFrRkJiMElzUTBGQlF5eFpRVUZaTEVWQlFVVXNSVUZCUlR0WlFVTXpReXhQUVVGUE8xTkJRMVk3VVVGRFJDeE5RVUZOTEd0Q1FVRnJRaXhIUVVOd1FpeEpRVUZKTEVOQlFVTXNiMEpCUVc5Q0xFTkJRVU1zY1VKQlFYRkNMRVZCUVVVc1EwRkJRenRSUVVOMFJDeE5RVUZOTEd0Q1FVRnJRaXhIUVVOd1FpeEpRVUZKTEVOQlFVTXNNRUpCUVRCQ0xFTkJRVU1zYTBKQlFXdENMRU5CUVVNN1VVRkZka1FzUzBGQlN5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRVZCUVVVc1EwRkJReXhIUVVGSExGVkJRVlVzUTBGQlF5eGpRVUZqTEVOQlFVTXNUVUZCVFN4RlFVRkZMRU5CUVVNc1JVRkJSU3hGUVVGRk8xbEJRM1pFTEUxQlFVMHNTMEZCU3l4SFFVRkhMRlZCUVZVc1EwRkJReXhqUVVGakxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdXVUZETTBNc1NVRkJTU3hMUVVGTExFTkJRVU1zVlVGQlZTeExRVUZMTEVsQlFVa3NRMEZCUXl4bFFVRmxMRU5CUVVNc1JVRkJSU3hGUVVGRk8yZENRVU01UXl4TlFVRk5MRU5CUVVNc1IwRkRTQ3hMUVVGTExFTkJRVU1zVDBGQlR5eEhRVUZITEVsQlFVa3NRMEZCUXl3MFFrRkJORUlzUTBGQlF5eEpRVUZKTEVOQlFVTTdaMEpCUXpORUxFMUJRVTBzUTBGQlF5eEhRVUZITEV0QlFVc3NRMEZCUXl4UFFVRlBMRWRCUVVjc1NVRkJTU3hEUVVGRExEUkNRVUUwUWl4RFFVRkRMRWRCUVVjc1EwRkJRenRuUWtGRGFFVXNUVUZCVFN4TFFVRkxMRWRCUTFBc1NVRkJTU3hEUVVGRExHMUNRVUZ0UWl4RFFVRkRMRFJDUVVFMFFpeERRVUZETEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJRenRuUWtGRGFFVXNhMEpCUVd0Q0xFTkJRVU1zUjBGQlJ5eERRVUZETEZOQlFWTXNRMEZCUXl4RFFVRkRPMjlDUVVNNVFpeHBSVUZCYzBJN2IwSkJRM1JDTEV0QlFVc3NRMEZCUXl4RFFVRkRPMjlDUVVOUUxFdEJRVXNzUTBGQlF5eERRVUZETzJsQ1FVTldMRU5CUVVNc1EwRkJRenRuUWtGRlNDeE5RVUZOTEZWQlFWVXNSMEZCUnl4SlFVRkpMRlZCUVZVc1EwRkJReXhaUVVGWkxFVkJRVVVzUzBGQlN5eERRVUZETEVOQlFVTTdaMEpCUTNaRUxHdENRVUZyUWl4RFFVRkRMR0ZCUVdFc1EwRkJReXhWUVVGVkxFTkJRVU1zUTBGQlF6dG5Ra0ZETjBNc1NVRkJTU3hEUVVGRExHVkJRV1VzUjBGQlJ5eEpRVUZKTEVOQlFVTTdaMEpCUXpWQ0xFMUJRVTA3WVVGRFZEdFRRVU5LTzFGQlEwUXNWVUZCVlN4RFFVRkRMR05CUVdNc1JVRkJSU3hEUVVGRE8wbEJRMmhETEVOQlFVTTdTVUZGUkRzN08wOUJSMGM3U1VGRFNDeFhRVUZYTEVOQlFVTXNWVUZCYzBJN1VVRkRPVUlzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4dlFrRkJiMElzUTBGQlF5eFpRVUZaTEVWQlFVVXNSVUZCUlR0WlFVTXpReXhQUVVGUE8xTkJRMVk3VVVGRFJDeE5RVUZOTEd0Q1FVRnJRaXhIUVVOd1FpeEpRVUZKTEVOQlFVTXNNRUpCUVRCQ0xFTkJRVU1zYTBKQlFXdENMRU5CUVVNN1VVRkZka1FzUzBGQlN5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRVZCUVVVc1EwRkJReXhIUVVGSExGVkJRVlVzUTBGQlF5eFBRVUZQTEVOQlFVTXNUVUZCVFN4RlFVRkZMRU5CUVVNc1JVRkJSU3hGUVVGRk8xbEJRMmhFTEUxQlFVMHNTMEZCU3l4SFFVRkhMRlZCUVZVc1EwRkJReXhQUVVGUExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdXVUZEY0VNc1NVRkJTU3hMUVVGTExFTkJRVU1zVlVGQlZTeExRVUZMTEVsQlFVa3NRMEZCUXl4bFFVRmxMRU5CUVVNc1JVRkJSU3hGUVVGRk8yZENRVU01UXl4TlFVRk5MRU5CUVVNc1IwRkRTQ3hMUVVGTExFTkJRVU1zVDBGQlR5eEhRVUZITEVsQlFVa3NRMEZCUXl3MFFrRkJORUlzUTBGQlF5eEpRVUZKTEVOQlFVTTdaMEpCUXpORUxFMUJRVTBzUTBGQlF5eEhRVUZITEV0QlFVc3NRMEZCUXl4UFFVRlBMRWRCUVVjc1NVRkJTU3hEUVVGRExEUkNRVUUwUWl4RFFVRkRMRWRCUVVjc1EwRkJRenRuUWtGRGFFVXNUVUZCVFN4TFFVRkxMRWRCUTFBc1NVRkJTU3hEUVVGRExHMUNRVUZ0UWl4RFFVRkRMRFJDUVVFMFFpeERRVUZETEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJRenRuUWtGRGFFVXNUVUZCVFN4TFFVRkxMRWRCUTFBc1NVRkJTU3hEUVVGRExHMUNRVUZ0UWl4RFFVRkRMREJDUVVFd1FpeERRVU12UXl4RFFVRkRMRWRCUVVjc1NVRkJTU3hEUVVGRExHVkJRV1VzUTBGQlF5eERRVUZETEVWQlF6RkNMRU5CUVVNc1IwRkJSeXhKUVVGSkxFTkJRVU1zWlVGQlpTeERRVUZETEVOQlFVTXNRMEZETjBJc1EwRkJRenRuUWtGRFRpeHJRa0ZCYTBJc1EwRkJReXhIUVVGSExFTkJRVU1zVjBGQlZ5eERRVUZETEVOQlFVTTdiMEpCUTJoRExFdEJRVXNzUTBGQlF5eERRVUZETzI5Q1FVTlFMRXRCUVVzc1EwRkJReXhEUVVGRE8yOUNRVU5RTEV0QlFVc3NRMEZCUXl4RFFVRkRPMjlDUVVOUUxFdEJRVXNzUTBGQlF5eERRVUZETzJsQ1FVTldMRU5CUVVNc1EwRkJRenRuUWtGRFNDeEpRVUZKTEVOQlFVTXNaVUZCWlN4RFFVRkRMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU03WjBKQlF6TkNMRWxCUVVrc1EwRkJReXhsUVVGbExFTkJRVU1zUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0blFrRkRNMElzVFVGQlRUdGhRVU5VTzFOQlEwbzdVVUZEUkN4VlFVRlZMRU5CUVVNc1kwRkJZeXhGUVVGRkxFTkJRVU03U1VGRGFFTXNRMEZCUXp0RFFVTktPMEZCUlVRN08wZEJSVWM3UVVGRFNTeE5RVUZOTEdWQlFXVTdTVUZMZUVJN096czdUMEZKUnp0SlFVTklMRmxCUVZrc1JVRkJWU3hGUVVGRkxFTkJRVk1zUlVGQlJTeERRVUZUTzFGQlEzaERMRWxCUVVrc1EwRkJReXhGUVVGRkxFZEJRVWNzUlVGQlJTeERRVUZETzFGQlEySXNTVUZCU1N4RFFVRkRMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU03VVVGRFdDeEpRVUZKTEVOQlFVTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRenRKUVVObUxFTkJRVU03UTBGRFNqczdPenM3T3pzN096czdPenM3T3pzN08wRkRkRTFFTEd0RVFVRnJSRHRCUVVWU08wRkJSVEJDTzBGQlIzQkZPenRIUVVWSE8wRkJRMGtzVFVGQlRTeHBRa0ZCYVVJN1NVRlJNVUk3TzA5QlJVYzdTVUZEU0N4WlFVRlpMREJDUVVGdFJEdFJRVTR2UkN4eFJVRkJjVVU3VVVGRE4wUXNaME5CUVRKQ0xFZEJRVWNzU1VGQlNTdzBSVUZCYjBJc1JVRkJSU3hEUVVGRE8xRkJUVGRFTEVsQlFVa3NRMEZCUXl3d1FrRkJNRUlzUjBGQlJ5d3dRa0ZCTUVJc1EwRkJRenRSUVVVM1JDeEpRVUZKTEVOQlFVTXNjVUpCUVhGQ0xFZEJRVWNzUTBGRGVrSXNUVUZCVFN4RFFVRkRMSGRDUVVGM1FqdFpRVU12UWl4TlFVRk5MRU5CUVVNc01rSkJRVEpDTzFsQlEyeERMRTFCUVUwc1EwRkJReXh4UWtGQmNVSXNRMEZETDBJc1EwRkJReXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTTdVVUZEWml4TlFVRk5MR0ZCUVdFc1IwRkJSeXhOUVVGblFpeERRVUZETzFGQlEzWkRMRWxCUVVrc1kwRkJZeXhKUVVGSkxHRkJRV0VzUlVGQlJUdFpRVU5xUXl4TlFVRk5MR3RDUVVGclFpeEhRVUZITEVOQlFVTXNSVUZCWjBJc1JVRkJSU3hGUVVGRkxFTkJRelZETEVsQlFVa3NRMEZCUXl4eFFrRkJjVUlzUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXp0WlFVTnVReXhOUVVGTkxIRkNRVUZ4UWl4SFFVRkhMRU5CUVVNc1JVRkJaMElzUlVGQlJTeEZRVUZGTEVOQlF5OURMRWxCUVVrc1EwRkJReXgzUWtGQmQwSXNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJRenRaUVVOMFF5eE5RVUZOTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zYTBKQlFXdENMRVZCUVVVc2EwSkJRV3RDTEVOQlFVTXNRMEZCUXp0WlFVTm9SU3hOUVVGTkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc2NVSkJRWEZDTEVWQlFVVXNjVUpCUVhGQ0xFTkJRVU1zUTBGQlF6dFpRVU4wUlN4SlFVRkpMRU5CUVVNc01rSkJRVEpDTEVOQlFVTXNjVUpCUVhGQ0xFTkJRMnhFTEVkQlFVY3NSVUZCUlN4RFFVRkRMRTFCUVUwc1EwRkJReXh0UWtGQmJVSXNRMEZCUXl4clFrRkJhMElzUlVGQlJTeHJRa0ZCYTBJc1EwRkJReXhEUVVNelJTeERRVUZETzFsQlEwWXNTVUZCU1N4RFFVRkRMREpDUVVFeVFpeERRVUZETEhGQ1FVRnhRaXhEUVVOc1JDeEhRVUZITEVWQlFVVXNRMEZCUXl4TlFVRk5MRU5CUVVNc2JVSkJRVzFDTEVOQlFVTXNjVUpCUVhGQ0xFVkJRVVVzY1VKQlFYRkNMRU5CUVVNc1EwRkRha1lzUTBGQlF6dFRRVU5NTzJGQlFVMHNTVUZCU1N4dlFrRkJiMElzU1VGQlNTeGhRVUZoTEVWQlFVVTdXVUZET1VNc1RVRkJUU3gzUWtGQmQwSXNSMEZCUnl4RFFVRkRMRVZCUVdkQ0xFVkJRVVVzUlVGQlJTeERRVUZETEVsQlFVa3NRMEZCUXl4eFFrRkJjVUlzUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXp0WlFVTjBSaXhOUVVGTkxESkNRVUV5UWl4SFFVRkhMRU5CUVVNc1JVRkJaMElzUlVGQlJTeEZRVUZGTEVOQlFVTXNTVUZCU1N4RFFVRkRMSGRDUVVGM1FpeERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRPMWxCUXpWR0xFMUJRVTBzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXgzUWtGQmQwSXNSVUZCUlN4M1FrRkJkMElzUTBGQlF5eERRVUZETzFsQlF6VkZMRTFCUVUwc1EwRkJReXhuUWtGQlowSXNRMEZCUXl3eVFrRkJNa0lzUlVGQlJTd3lRa0ZCTWtJc1EwRkJReXhEUVVGRE8xbEJRMnhHTEVsQlFVa3NRMEZCUXl3eVFrRkJNa0lzUTBGQlF5eHhRa0ZCY1VJc1EwRkRiRVFzUjBGQlJ5eEZRVUZGTEVOQlFVTXNUVUZCVFN4RFFVRkRMRzFDUVVGdFFpeERRVUZETEhkQ1FVRjNRaXhGUVVGRkxIZENRVUYzUWl4RFFVRkRMRU5CUTNaR0xFTkJRVU03V1VGRFJpeEpRVUZKTEVOQlFVTXNNa0pCUVRKQ0xFTkJRVU1zY1VKQlFYRkNMRU5CUTJ4RUxFZEJRVWNzUlVGQlJTeERRVUZETEUxQlFVMHNRMEZCUXl4dFFrRkJiVUlzUTBGQlF5d3lRa0ZCTWtJc1JVRkJSU3d5UWtGQk1rSXNRMEZCUXl4RFFVTTNSaXhEUVVGRE8xTkJRMHc3VVVGRFJDeEpRVUZKTEVOQlFVTXNWMEZCVnl4SFFVRkhMRVZCUVVVc1EwRkJRenRSUVVOMFFpeEpRVUZKTEZOQlFWTXNRMEZCUXl4WFFVRlhMRVZCUVVVN1dVRkRka0lzUzBGQlN5eE5RVUZOTEU5QlFVOHNTVUZCU1N4VFFVRlRMRU5CUVVNc1YwRkJWeXhGUVVGRkxFVkJRVVU3WjBKQlF6TkRMRWxCUVVrc1QwRkJUeXhGUVVGRk8yOUNRVU5VTEVsQlFVa3NRMEZCUXl4eFFrRkJjVUlzUTBGQlF5eEpRVUZKTEZsQlFWa3NRMEZCUXl4clFrRkJhMElzUlVGQlJTeEZRVUZGTEU5QlFVOHNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJRenRwUWtGRGFrWTdZVUZEU2p0VFFVTktPMGxCUTB3c1EwRkJRenRKUVVWRU96dFBRVVZITzBsQlEwZ3NkVUpCUVhWQ08xRkJRMjVDTEVsQlFVa3NRMEZCUXl3eVFrRkJNa0lzUTBGQlF5eGhRVUZoTEVWQlFVVXNRMEZCUXp0UlFVTnFSQ3hMUVVGSkxFMUJRVTBzVlVGQlZTeEpRVUZKTEVsQlFVa3NRMEZCUXl4WFFVRlhMRVZCUVVVN1dVRkRkRU1zU1VGQlJ5eFZRVUZWTEVOQlFVTXNSVUZCUlN4TFFVRkxMRk5CUVZNc1JVRkJSVHRuUWtGRE5VSXNTVUZCU1N4RFFVRkRMSEZDUVVGeFFpeERRVUZETEZWQlFWVXNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJRenRoUVVNM1F6dFRRVU5LTzFGQlEwUXNTVUZCU1N4RFFVRkRMRmRCUVZjc1IwRkJSeXhGUVVGRkxFTkJRVU03VVVGRGRFSXNTVUZCU1N4RFFVRkRMR3RDUVVGclFpeEhRVUZITEVkQlFVY3NSVUZCUlN4SFFVRlRMRU5CUVVNc1EwRkJRenRSUVVNeFF5eEpRVUZKTEVOQlFVTXNjVUpCUVhGQ0xFZEJRVWNzUjBGQlJ5eEZRVUZGTEVkQlFWTXNRMEZCUXl4RFFVRkRPMGxCUTJwRUxFTkJRVU03U1VGRlJEczdPMDlCUjBjN1NVRkRTQ3h4UWtGQmNVSXNRMEZCUXl4WlFVRXdRanRSUVVNMVF5eHpSRUZCVlN4RFFVRkRMR2RGUVVGdlFpeEZRVUZGTEVWQlFVVXNlVUpCUVhsQ0xFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTTdVVUZEYWtVc1RVRkJUU3hQUVVGUExFZEJRVWNzV1VGQldTeERRVUZETEU5QlFVOHNRMEZCUXp0UlFVVnlReXhOUVVGTkxFbEJRVWtzUjBGQlpUdFpRVU55UWl4WlFVRlpMRVZCUVVVc1QwRkJUenRaUVVOeVFpeFRRVUZUTEVWQlFVVXNUMEZCVHp0WlFVTnNRaXhGUVVGRkxFVkJRVVVzVTBGQlV6dFRRVU5vUWl4RFFVRkRPMUZCUlVZc1NVRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1VVRkROVUlzU1VGQlNTeERRVUZETEZkQlFWY3NRMEZCUXl4UFFVRlBMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU1zV1VGQldTeEhRVUZITEU5QlFVOHNRMEZCUXp0UlFVTjJSQ3hKUVVGSkxFTkJRVU1zVjBGQlZ5eERRVUZETEU5QlFVOHNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJReXhUUVVGVExFZEJRVWNzVDBGQlR5eERRVUZETzFGQlEzQkVMSE5FUVVGVkxFTkJRMDRzWjBWQlFXOUNMRVZCUVVVc1JVRkRkRUlzVjBGQlZ5eEhRVUZITEU5QlFVOHNRMEZCUXl4RlFVRkZMRWRCUVVjc1dVRkJXU3hGUVVOMlF5eERRVUZETEVOQlEwb3NRMEZCUXp0UlFVTkdMRTFCUVUwc1EwRkJReXh4UWtGQmNVSXNRMEZCUXl4SFFVRkhMRVZCUVVVc1EwRkJReXhKUVVGSkxFTkJRVU1zV1VGQldTeEZRVUZGTEVOQlFVTXNRMEZCUXp0UlFVTjRSQ3hKUVVGSkxFTkJRVU1zYTBKQlFXdENMRVZCUVVVc1EwRkJRenRKUVVNNVFpeERRVUZETzBsQlJVUTdPenRQUVVkSE8wbEJRMGdzZDBKQlFYZENMRU5CUVVNc1dVRkJNRUk3VVVGREwwTXNjMFJCUVZVc1EwRkJReXhuUlVGQmIwSXNSVUZCUlN4RlFVRkZMRFJDUVVFMFFpeEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRPMUZCUTNCRkxITkVRVUZWTEVOQlEwNHNaMFZCUVc5Q0xFVkJRVVVzUlVGRGRFSXNWMEZCVnl4SFFVRkhMRmxCUVZrc1EwRkJReXhQUVVGUExFTkJRVU1zUlVGQlJTeEhRVUZITEdWQlFXVXNSVUZEZGtRc1EwRkJReXhEUVVOS0xFTkJRVU03VVVGRFJpeE5RVUZOTEdsQ1FVRnBRaXhIUVVGSExFbEJRVWtzUTBGQlF5eFhRVUZYTEVOQlFVTXNXVUZCV1N4RFFVRkRMRTlCUVU4c1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF6dFJRVU4yUlN4UFFVRlBMRWxCUVVrc1EwRkJReXhYUVVGWExFTkJRVU1zV1VGQldTeERRVUZETEU5QlFVOHNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRenRSUVVOd1JDeEpRVUZKTEVOQlFVTXNWMEZCVnl4SFFVRkhMRWxCUVVrc1EwRkJReXhYUVVGWExFTkJRVU1zVFVGQlRTeERRVU4wUXl4RFFVRkRMRlZCUVZVc1JVRkJSU3hGUVVGRkxFTkJRVU1zVlVGQlZTeExRVUZMTEZOQlFWTXNRMEZETTBNc1EwRkJRenRSUVVOR0xFbEJRVWtzUTBGQlF5eHhRa0ZCY1VJc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJRenRKUVVOeVJDeERRVUZETzBsQlJVUTdPMDlCUlVjN1NVRkRTQ3haUVVGWk8xRkJRMUlzVFVGQlRTeFJRVUZSTEVkQlFVY3NVMEZCVXl4RFFVRkRMRmRCUVZjN1dVRkRiRU1zUTBGQlF5eERRVUZETEZOQlFWTXNRMEZCUXl4WFFVRlhMRVZCUVVVN1dVRkRla0lzUTBGQlF5eERRVUZETEZOQlFWTXNRMEZCUXl4cFFrRkJhVUk3WjBKQlF6ZENMRU5CUVVNc1EwRkJReXhUUVVGVExFTkJRVU1zYVVKQlFXbENMRVZCUVVVN1owSkJReTlDTEVOQlFVTXNRMEZCUXl4RlFVRkZMRU5CUVVNN1VVRkRWQ3hMUVVGTExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNSVUZCUlN4RFFVRkRMRWRCUVVjc1VVRkJVU3hEUVVGRExFMUJRVTBzUlVGQlJTeERRVUZETEVWQlFVVXNSVUZCUlR0WlFVTjBReXhKUVVGSkxGRkJRVkVzUTBGQlF5eERRVUZETEVOQlFVTXNTVUZCU1N4UlFVRlJMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUzBGQlN5eEpRVUZKTEVsQlFVa3NRMEZCUXl4WFFVRlhMRVZCUVVVN1owSkJRM1JFTEVsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRMRmxCUVZrc1IwRkJSeXhSUVVGUkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdZVUZEYkVVN1UwRkRTanRKUVVOTUxFTkJRVU03U1VGRlJEczdUMEZGUnp0SlFVTklMRmxCUVZrN1VVRkRVaXhKUVVGSkxFTkJRVU1zV1VGQldTeEZRVUZGTEVOQlFVTTdVVUZEY0VJc1RVRkJUU3hyUWtGQmEwSXNSMEZEY0VJc1NVRkJTU3hEUVVGRExEQkNRVUV3UWl4RFFVRkRMR3RDUVVGclFpeERRVUZETzFGQlJYWkVMRzlHUVVGdlJqdFJRVU53Uml4TFFVRkxMRTFCUVUwc1ZVRkJWU3hKUVVGSkxFbEJRVWtzUTBGQlF5eFhRVUZYTEVWQlFVVTdXVUZEZGtNc05FZEJRVFJITzFsQlF6VkhMRTFCUVUwc1pVRkJaU3hIUVVGSExFTkJRVU1zVlVGQlZTeERRVUZETEVWQlFVVXNTMEZCU3l4VFFVRlRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETEZkQlFWY3NRMEZCUXl4UFFVRlBMRU5CUVVNc1ZVRkJWU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEZWQlFWVXNRMEZCUXl4RlFVRkZMRU5CUVVNN1dVRkROMGNzVFVGQlRTeFpRVUZaTEVkQlFVY3NWVUZCVlN4RFFVRkRMRmxCUVZrc1EwRkJRenRaUVVNM1F5eExRVUZMTEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkJSU3hEUVVGRExFZEJRVWNzVlVGQlZTeERRVUZETEZsQlFWa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1RVRkJUU3hGUVVGRkxFTkJRVU1zUlVGQlJTeEZRVUZGTzJkQ1FVTTNSQ3hOUVVGTkxHRkJRV0VzUjBGQlJ5eFZRVUZWTEVOQlFVTXNXVUZCV1N4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dG5Ra0ZEZWtRc1RVRkJUU3hqUVVGakxFZEJRVWNzVlVGQlZTeERRVUZETEZOQlFWTXNRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03WjBKQlEzWkVMRWxCUVVrc1lVRkJZU3hEUVVGRExFOUJRVThzUlVGQlJUdHZRa0ZEZGtJc1VVRkJVVHR2UWtGRFVpeEpRVUZKTEVOQlFVTXNTVUZCU1N4aFFVRmhMRU5CUVVNc1YwRkJWeXhGUVVGRk8zZENRVU5vUXl4blJVRkJaMFU3ZDBKQlEyaEZMR3RDUVVGclFpeERRVUZETEVkQlFVY3NRMEZCUXl4bFFVRmxMRU5CUVVNc1EwRkJRenMwUWtGRGNFTXNaVUZCWlRzMFFrRkRaaXhEUVVGRE96UkNRVU5FTEdGQlFXRXNRMEZCUXl4TFFVRkxPM2xDUVVOMFFpeERRVUZETEVOQlFVTTdjVUpCUTA0N2VVSkJRVTBzU1VGQlNTeERRVUZETEVsQlFVa3NZVUZCWVN4RFFVRkRMRmxCUVZrc1JVRkJSVHQzUWtGRGVFTXNhVVZCUVdsRk8zZENRVU5xUlN4clFrRkJhMElzUTBGQlF5eEhRVUZITEVOQlFVTXNaVUZCWlN4RFFVRkRMRU5CUVVNN05FSkJRM0JETEdWQlFXVTdORUpCUTJZc1EwRkJRenMwUWtGRFJDeGhRVUZoTEVOQlFVTXNTMEZCU3p0NVFrRkRkRUlzUTBGQlF5eERRVUZETzNGQ1FVTk9PM2xDUVVGTk8zZENRVU5JTEd0Q1FVRnJRaXhEUVVGRExFZEJRVWNzUTBGQlF5eHpRa0ZCYzBJc1EwRkJReXhEUVVGRE96UkNRVU16UXl4bFFVRmxPelJDUVVObUxFTkJRVU03TkVKQlEwUXNZMEZCWXl4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPM2xDUVVOcVF5eERRVUZETEVOQlFVTTdjVUpCUTA0N2FVSkJRMG83Y1VKQlFVMHNTVUZCU1N4RFFVRkRMR0ZCUVdFc1EwRkJReXhQUVVGUExFbEJRVWtzWTBGQll5eERRVUZETEU5QlFVOHNSVUZCUlR0dlFrRkRla1FzVlVGQlZUdHZRa0ZEVml4SlFVRkpMRU5CUVVNc1NVRkJTU3hoUVVGaExFTkJRVU1zVjBGQlZ5eEZRVUZGTzNkQ1FVTm9ReXhuUlVGQlowVTdkMEpCUTJoRkxHdENRVUZyUWl4RFFVRkRMRWRCUVVjc1EwRkJReXhsUVVGbExFTkJRVU1zUTBGQlF6czBRa0ZEY0VNc1pVRkJaVHMwUWtGRFppeERRVUZET3pSQ1FVTkVMRU5CUVVNN2VVSkJRMG9zUTBGQlF5eERRVUZETzNGQ1FVTk9PM2xDUVVGTkxFbEJRVWtzUTBGQlF5eEpRVUZKTEdGQlFXRXNRMEZCUXl4WlFVRlpMRVZCUVVVN2QwSkJRM2hETEdsRlFVRnBSVHQzUWtGRGFrVXNhMEpCUVd0Q0xFTkJRVU1zUjBGQlJ5eERRVUZETEdWQlFXVXNRMEZCUXl4RFFVRkRPelJDUVVOd1F5eGxRVUZsT3pSQ1FVTm1MRU5CUVVNN05FSkJRMFFzUTBGQlF6dDVRa0ZEU2l4RFFVRkRMRU5CUVVNN2NVSkJRMDQ3ZVVKQlFVMDdkMEpCUTBnc2EwSkJRV3RDTEVOQlFVTXNSMEZCUnl4RFFVRkRMSFZDUVVGMVFpeERRVUZETEVOQlFVTTdORUpCUXpWRExHVkJRV1U3TkVKQlEyWXNRMEZCUXp0NVFrRkRTaXhEUVVGRExFTkJRVU03Y1VKQlEwNDdhVUpCUTBvN1lVRkRTanRaUVVORUxEQkdRVUV3Ump0WlFVTXhSaXhMUVVGTExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNSVUZCUlN4RFFVRkRMRWRCUVVjc1dVRkJXU3hEUVVGRExFbEJRVWtzUTBGQlF5eE5RVUZOTEVWQlFVVXNRMEZCUXl4SlFVRkpMRU5CUVVNc1JVRkJSVHRuUWtGRGJFUXNiME5CUVc5RE8yZENRVU53UXl4TlFVRk5MRU5CUVVNc1IwRkJSeXhWUVVGVkxFTkJRVU1zV1VGQldTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhQUVVGUExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0blFrRkZkRVFzYVVOQlFXbERPMmRDUVVOcVF5dzJTa0ZCTmtvN1owSkJRemRLTEUxQlFVMHNRMEZCUXl4SFFVRkhMRU5CUVVNc1ZVRkJWU3hEUVVGRExGbEJRVmtzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMmRDUVVVelJDeDVSMEZCZVVjN1owSkJRM3BITEd0Q1FVRnJRaXhEUVVGRExFZEJRVWNzUTBGQlF5eGxRVUZsTEVOQlFVTXNRMEZCUXp0dlFrRkRjRU1zWlVGQlpUdHZRa0ZEWml4RFFVRkRMRWRCUVVjc1EwRkJRenR2UWtGRFRDeERRVUZETzJsQ1FVTktMRU5CUVVNc1EwRkJReXhEUVVGRExHOURRVUZ2UXp0blFrRkRlRU1zYTBKQlFXdENMRU5CUVVNc1IwRkJSeXhEUVVGRExHVkJRV1VzUTBGQlF5eERRVUZETzI5Q1FVTndReXhsUVVGbE8yOUNRVU5tTEVOQlFVTXNSMEZCUnl4RFFVRkRPMjlDUVVOTUxFTkJRVU03YVVKQlEwb3NRMEZCUXl4RFFVRkRMRU5CUVVNc2VVZEJRWGxITzJGQlEyaElPMWxCUTBRc1NVRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF5eGxRVUZsTEVOQlFVTXNRMEZCUXl4VFFVRlRMRWRCUVVjc1dVRkJXU3hEUVVGRE8xTkJRemxFTzFGQlEwUXNTVUZCU1N4SlFVRkpMRU5CUVVNc1YwRkJWeXhEUVVGRExFMUJRVTBzUjBGQlJ5eERRVUZETEVWQlFVVTdXVUZETjBJc1NVRkJTU3hEUVVGRExIRkNRVUZ4UWl4RFFVRkRMRWRCUVVjc1JVRkJSU3hEUVVGRExFbEJRVWtzUTBGQlF5eFpRVUZaTEVWQlFVVXNRMEZCUXl4RFFVRkRPMU5CUTNwRU8wbEJRMHdzUTBGQlF6dEpRVVZFTEhsQ1FVRjVRaXhEUVVGRExGTkJRV2xDTzFGQlEzWkRMRXRCUVVrc1RVRkJUU3hWUVVGVkxFbEJRVWtzU1VGQlNTeERRVUZETEZkQlFWY3NSVUZCUlR0WlFVTjBReXhKUVVGSExGVkJRVlVzUTBGQlF5eEZRVUZGTEV0QlFVc3NVMEZCVXl4RlFVRkZPMmRDUVVNMVFpeFZRVUZWTEVOQlFVTXNSVUZCUlN4SFFVRkhMRk5CUVZNc1EwRkJRenRuUWtGRE1VSXNUVUZCVFR0aFFVTlVPMU5CUTBvN1NVRkRUQ3hEUVVGRE8wbEJSVVE3TzA5QlJVYzdTVUZEU0N4clFrRkJhMEk3VVVGRFpDeHZRMEZCYjBNN1NVRkRlRU1zUTBGQlF6dEpRVVZFT3p0UFFVVkhPMGxCUTBnc05rUkJRVFpFTzBsQlF6ZEVMSEZDUVVGeFFpeERRVUZETEdGQlFYRkNPMUZCUTNaRExHOURRVUZ2UXp0SlFVTjRReXhEUVVGRE8wTkJRMG83UVVGclFrUTdPMGRCUlVjN1FVRkRTQ3hKUVVGWkxHRkJkVUpZTzBGQmRrSkVMRmRCUVZrc1lVRkJZVHRKUVVOeVFpeDVSa0ZCTkVJN1NVRkROVUlzZFVaQlFUSkNPMGxCUXpOQ0xIRkdRVUV3UWp0SlFVTXhRaXh0UmtGQmVVSTdTVUZEZWtJc2FVVkJRV2RDTzBsQlEyaENMRzFGUVVGcFFqdEpRVU5xUWl3clJFRkJaVHRKUVVObUxHbEZRVUZuUWp0SlFVTm9RaXhwUlVGQlowSTdTVUZEYUVJc2NVVkJRV3RDTzBsQlEyeENMSGRGUVVGdlFqdEpRVU53UWl3d1JVRkJjVUk3U1VGRGNrSXNhMFpCUVhsQ08wbEJRM3BDTEhkR1FVRTBRanRKUVVNMVFpeHZSa0ZCTUVJN1NVRkRNVUlzYzBaQlFUSkNPMGxCUXpOQ0xHdEZRVUZwUWp0SlFVTnFRaXhQUVVGUE8wbEJRMUFzSzBWQlFYVkNPMGxCUTNaQ0xESkZRVUZ4UWp0SlFVTnlRaXhwUmtGQmQwSTdTVUZEZUVJc05rVkJRWE5DTzBGQlF6RkNMRU5CUVVNc1JVRjJRbGNzWVVGQllTeExRVUZpTEdGQlFXRXNVVUYxUW5oQ096czdPenM3T3pzN096czdPenM3TzBGRE0xTkVMR3RFUVVGclJEdEJRVWRTTzBGQlJ6RkRPenRIUVVWSE8wRkJRMGtzVFVGQlRTeHRRa0ZCYlVJN1NVRkhOVUk3TzA5QlJVYzdTVUZEU0N4WlFVRlpMR1ZCUVdkRE8xRkJRM2hETEVsQlFVa3NRMEZCUXl4bFFVRmxMRWRCUVVjc1pVRkJaU3hEUVVGRE8wbEJRek5ETEVOQlFVTTdTVUZGUkRzN1QwRkZSenRKUVVOSUxIRkNRVUZ4UWp0UlFVTnFRaXdyUTBGQkswTTdTVUZEYmtRc1EwRkJRenRKUVVWRU96czdUMEZIUnp0SlFVTklMSFZDUVVGMVFpeERRVUZETEZWQlFYTkNPMUZCUXpGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNaVUZCWlN4RFFVRkRMRzlDUVVGdlFpeERRVUZETEZsQlFWa3NSVUZCUlN4RlFVRkZPMWxCUXpORUxFOUJRVTg3VTBGRFZqdFJRVU5FTEhORVFVRlZMRU5CUVVNc1owVkJRVzlDTEVWQlFVVXNSVUZCUlN4WFFVRlhMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRGJrUXNUVUZCVFN4TFFVRkxMRWRCUTFBc1NVRkJTU3hEUVVGRExHVkJRV1VzUTBGQlF5eHRRa0ZCYlVJc1EwRkJReXcwUWtGQk5FSXNRMEZEYWtVc1ZVRkJWU3hEUVVGRExFOUJRVThzUlVGRGJFSXNWVUZCVlN4RFFVRkRMRTlCUVU4c1EwRkRja0lzUTBGQlF6dFJRVU5PTEUxQlFVMHNTMEZCU3l4SFFVTlFMRWxCUVVrc1EwRkJReXhsUVVGbExFTkJRVU1zYlVKQlFXMUNMRU5CUVVNc01FSkJRVEJDTEVOQlF5OUVMRlZCUVZVc1EwRkJReXhUUVVGVExFVkJRM0JDTEZWQlFWVXNRMEZCUXl4VFFVRlRMRU5CUTNaQ0xFTkJRVU03VVVGRFRpeE5RVUZOTEd0Q1FVRnJRaXhIUVVOd1FpeEpRVUZKTEVOQlFVTXNaVUZCWlN4RFFVRkRMREJDUVVFd1FpeERRVUZETEd0Q1FVRnJRaXhEUVVGRE8xRkJRM1pGTEd0Q1FVRnJRaXhEUVVGRExFZEJRVWNzUTBGQlF5eFhRVUZYTEVOQlFVTXNRMEZCUXp0WlFVTm9ReXhMUVVGTExFTkJRVU1zUTBGQlF6dFpRVU5RTEV0QlFVc3NRMEZCUXl4RFFVRkRPMWxCUTFBc1MwRkJTeXhEUVVGRExFTkJRVU03V1VGRFVDeExRVUZMTEVOQlFVTXNRMEZCUXp0VFFVTldMRU5CUVVNc1EwRkJRenRSUVVOSUxGVkJRVlVzUTBGQlF5eGpRVUZqTEVWQlFVVXNRMEZCUXp0SlFVTm9ReXhEUVVGRE8wbEJSVVE3T3p0UFFVZEhPMGxCUTBnc1pVRkJaU3hEUVVGRExGVkJRWE5DTzFGQlEyeERMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zWlVGQlpTeERRVUZETEc5Q1FVRnZRaXhEUVVGRExGbEJRVmtzUlVGQlJTeEZRVUZGTzFsQlF6TkVMRTlCUVU4N1UwRkRWanRSUVVORUxITkVRVUZWTEVOQlFVTXNaMFZCUVc5Q0xFVkJRVVVzUlVGQlJTeGpRVUZqTEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRkRVFzVFVGQlRTeExRVUZMTEVkQlExQXNTVUZCU1N4RFFVRkRMR1ZCUVdVc1EwRkJReXh0UWtGQmJVSXNRMEZCUXl3MFFrRkJORUlzUTBGRGFrVXNWVUZCVlN4RFFVRkRMRTlCUVU4c1JVRkRiRUlzVlVGQlZTeERRVUZETEU5QlFVOHNRMEZEY2tJc1EwRkJRenRSUVVOT0xFMUJRVTBzYTBKQlFXdENMRWRCUTNCQ0xFbEJRVWtzUTBGQlF5eGxRVUZsTEVOQlFVTXNNRUpCUVRCQ0xFTkJRVU1zYTBKQlFXdENMRU5CUVVNN1VVRkRka1VzYTBKQlFXdENMRU5CUVVNc1IwRkJSeXhEUVVGRExGZEJRVmNzUTBGQlF5eERRVUZETzFsQlEyaERMRlZCUVZVc1EwRkJReXhOUVVGTk8xbEJRMnBDTEV0QlFVc3NRMEZCUXl4RFFVRkRPMWxCUTFBc1MwRkJTeXhEUVVGRExFTkJRVU03VTBGRFZpeERRVUZETEVOQlFVTTdVVUZEU0N4VlFVRlZMRU5CUVVNc1kwRkJZeXhGUVVGRkxFTkJRVU03U1VGRGFFTXNRMEZCUXp0SlFVVkVPenM3VDBGSFJ6dEpRVU5JTEdGQlFXRXNRMEZCUXl4VlFVRnpRanRSUVVOb1F5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMR1ZCUVdVc1EwRkJReXh2UWtGQmIwSXNRMEZCUXl4WlFVRlpMRVZCUVVVc1JVRkJSVHRaUVVNelJDeFBRVUZQTzFOQlExWTdVVUZEUkN4TlFVRk5MRXRCUVVzc1IwRkRVQ3hKUVVGSkxFTkJRVU1zWlVGQlpTeERRVUZETEcxQ1FVRnRRaXhEUVVGRExEUkNRVUUwUWl4RFFVTnFSU3hWUVVGVkxFTkJRVU1zVDBGQlR5eEZRVU5zUWl4VlFVRlZMRU5CUVVNc1QwRkJUeXhEUVVOeVFpeERRVUZETzFGQlEwNHNUVUZCVFN4clFrRkJhMElzUjBGRGNFSXNTVUZCU1N4RFFVRkRMR1ZCUVdVc1EwRkJReXd3UWtGQk1FSXNRMEZCUXl4clFrRkJhMElzUTBGQlF6dFJRVU4yUlN4clFrRkJhMElzUTBGQlF5eEhRVUZITEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVNN1dVRkRPVUlzVlVGQlZTeERRVUZETEUxQlFVMDdXVUZEYWtJc1MwRkJTeXhEUVVGRExFTkJRVU03V1VGRFVDeExRVUZMTEVOQlFVTXNRMEZCUXp0VFFVTldMRU5CUVVNc1EwRkJRenRSUVVOSUxGVkJRVlVzUTBGQlF5eGpRVUZqTEVWQlFVVXNRMEZCUXp0SlFVTm9ReXhEUVVGRE8wbEJSVVE3T3p0UFFVZEhPMGxCUTBnc2FVSkJRV2xDTEVOQlFVTXNWVUZCYzBJN1VVRkRjRU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4bFFVRmxMRU5CUVVNc2IwSkJRVzlDTEVOQlFVTXNXVUZCV1N4RlFVRkZMRVZCUVVVN1dVRkRNMFFzVDBGQlR6dFRRVU5XTzFGQlEwUXNUVUZCVFN4TFFVRkxMRWRCUTFBc1NVRkJTU3hEUVVGRExHVkJRV1VzUTBGQlF5eHRRa0ZCYlVJc1EwRkJReXcwUWtGQk5FSXNRMEZEYWtVc1ZVRkJWU3hEUVVGRExFOUJRVThzUlVGRGJFSXNWVUZCVlN4RFFVRkRMRTlCUVU4c1EwRkRja0lzUTBGQlF6dFJRVU5PTEUxQlFVMHNhMEpCUVd0Q0xFZEJRM0JDTEVsQlFVa3NRMEZCUXl4bFFVRmxMRU5CUVVNc01FSkJRVEJDTEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU03VVVGRGRrVXNhMEpCUVd0Q0xFTkJRVU1zUjBGQlJ5eERRVUZETEZOQlFWTXNRMEZCUXl4RFFVRkRPMWxCUXpsQ0xGVkJRVlVzUTBGQlF5eE5RVUZOTzFsQlEycENMRXRCUVVzc1EwRkJReXhEUVVGRE8xbEJRMUFzUzBGQlN5eERRVUZETEVOQlFVTTdVMEZEVml4RFFVRkRMRU5CUVVNN1VVRkRTQ3hWUVVGVkxFTkJRVU1zWTBGQll5eEZRVUZGTEVOQlFVTTdTVUZEYUVNc1EwRkJRenRKUVVWRU96czdUMEZIUnp0SlFVTklMR2RDUVVGblFpeERRVUZETEZWQlFYTkNPMUZCUTI1RExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNaVUZCWlN4RFFVRkRMRzlDUVVGdlFpeERRVUZETEZsQlFWa3NSVUZCUlN4RlFVRkZPMWxCUXpORUxFOUJRVTg3VTBGRFZqdFJRVU5FTEUxQlFVMHNTMEZCU3l4SFFVTlFMRWxCUVVrc1EwRkJReXhsUVVGbExFTkJRVU1zYlVKQlFXMUNMRU5CUVVNc05FSkJRVFJDTEVOQlEycEZMRlZCUVZVc1EwRkJReXhQUVVGUExFVkJRMnhDTEZWQlFWVXNRMEZCUXl4UFFVRlBMRU5CUTNKQ0xFTkJRVU03VVVGRFRpeE5RVUZOTEd0Q1FVRnJRaXhIUVVOd1FpeEpRVUZKTEVOQlFVTXNaVUZCWlN4RFFVRkRMREJDUVVFd1FpeERRVUZETEd0Q1FVRnJRaXhEUVVGRE8xRkJRM1pGTEd0Q1FVRnJRaXhEUVVGRExFZEJRVWNzUTBGQlF5eFpRVUZaTEVOQlFVTXNRMEZCUXp0WlFVTnFReXhWUVVGVkxFTkJRVU1zVlVGQlZUdFpRVU55UWl4TFFVRkxMRU5CUVVNc1EwRkJRenRaUVVOUUxFdEJRVXNzUTBGQlF5eERRVUZETzFOQlExWXNRMEZCUXl4RFFVRkRPMUZCUTBnc1ZVRkJWU3hEUVVGRExHTkJRV01zUlVGQlJTeERRVUZETzBsQlEyaERMRU5CUVVNN1NVRkZSRHM3TzA5QlIwYzdTVUZEU0N4cFFrRkJhVUlzUTBGQlF5eFZRVUZ6UWp0UlFVTndReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEdWQlFXVXNRMEZCUXl4dlFrRkJiMElzUTBGQlF5eFpRVUZaTEVWQlFVVXNSVUZCUlR0WlFVTXpSQ3hQUVVGUE8xTkJRMVk3VVVGRFJDeE5RVUZOTEV0QlFVc3NSMEZEVUN4SlFVRkpMRU5CUVVNc1pVRkJaU3hEUVVGRExHMUNRVUZ0UWl4RFFVRkRMRFJDUVVFMFFpeERRVU5xUlN4VlFVRlZMRU5CUVVNc1QwRkJUeXhGUVVOc1FpeFZRVUZWTEVOQlFVTXNUMEZCVHl4RFFVTnlRaXhEUVVGRE8xRkJRMDRzVFVGQlRTeHJRa0ZCYTBJc1IwRkRjRUlzU1VGQlNTeERRVUZETEdWQlFXVXNRMEZCUXl3d1FrRkJNRUlzUTBGQlF5eHJRa0ZCYTBJc1EwRkJRenRSUVVOMlJTeHJRa0ZCYTBJc1EwRkJReXhIUVVGSExFTkJRVU1zWVVGQllTeERRVUZETEVOQlFVTTdXVUZEYkVNc1ZVRkJWU3hEUVVGRExFMUJRVTA3V1VGRGFrSXNTMEZCU3l4RFFVRkRMRU5CUVVNN1dVRkRVQ3hMUVVGTExFTkJRVU1zUTBGQlF6dFRRVU5XTEVOQlFVTXNRMEZCUXp0SlFVTlFMRU5CUVVNN1NVRkZSRHM3TzA5QlIwYzdTVUZEU0N4MVFrRkJkVUlzUTBGQlF5eFZRVUZ6UWp0UlFVTXhReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEdWQlFXVXNRMEZCUXl4dlFrRkJiMElzUTBGQlF5eFpRVUZaTEVWQlFVVXNSVUZCUlR0WlFVTXpSQ3hQUVVGUE8xTkJRMVk3VVVGRFJDeEpRVUZKTEVOQlFVTXNaVUZCWlN4RFFVRkRMR2xDUVVGcFFpeERRVU5zUXl4VlFVRlZMRU5CUVVNc1QwRkJUeXhGUVVOc1FpeFZRVUZWTEVOQlFVTXNUMEZCVHl4RlFVTnNRaXhWUVVGVkxFTkJRVU1zVDBGQlR5eERRVU55UWl4RFFVRkRPMGxCUTA0c1EwRkJRenRKUVVWRU96czdUMEZIUnp0SlFVTklMSGxDUVVGNVFpeERRVUZETEZWQlFYTkNPMUZCUXpWRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNaVUZCWlN4RFFVRkRMRzlDUVVGdlFpeERRVUZETEZsQlFWa3NSVUZCUlN4RlFVRkZPMWxCUXpORUxFOUJRVTg3VTBGRFZqdFJRVU5FTEVsQlFVa3NRMEZCUXl4bFFVRmxMRU5CUVVNc2JVSkJRVzFDTEVOQlEzQkRMRlZCUVZVc1EwRkJReXhQUVVGUExFVkJRMnhDTEZWQlFWVXNRMEZCUXl4UFFVRlBMRVZCUTJ4Q0xGVkJRVlVzUTBGQlF5eFBRVUZQTEVOQlEzSkNMRU5CUVVNN1NVRkRUaXhEUVVGRE8wTkJRMG83T3pzN096czdPenM3T3pzN096czdPenM3T3pzN08wRkRlRTFFTEd0RVFVRnJSRHRCUVVWVk8wRkJRMFk3UVVGRFRqdEJRVU5CTzBGQlEwazdRVUZEU3p0QlFVTnVRanRCUVVzeFF6czdSMEZGUnp0QlFVTkpMRTFCUVUwc2JVSkJRVzFDTzBsQlRUVkNPenM3TzA5QlNVYzdTVUZEU0N4WlFVTkpMREJDUVVGdFJDeEZRVU51UkN4dlFrRkJhVU1zUlVGRGFrTXNiVUpCUVhkRE8xRkJWalZETEdWQlFWVXNSMEZCWlN4SlFVRkpMRlZCUVZVc1JVRkJSU3hEUVVGRE8xRkJXWFJETEVsQlFVa3NRMEZCUXl3d1FrRkJNRUlzUjBGQlJ5d3dRa0ZCTUVJc1EwRkJRenRSUVVNM1JDeEpRVUZKTEVOQlFVTXNiMEpCUVc5Q0xFZEJRVWNzYjBKQlFXOUNMRU5CUVVNN1VVRkRha1FzU1VGQlNTeERRVUZETEcxQ1FVRnRRaXhIUVVGSExHMUNRVUZ0UWl4RFFVRkRPMGxCUTI1RUxFTkJRVU03U1VGRlJEczdUMEZGUnp0SlFVTklMR2RDUVVGblFpeERRVUZETEUxQlFXTTdVVUZETTBJc2MwUkJRVlVzUTBGQlF5eG5SVUZCYjBJc1JVRkJSU3hGUVVGRkxEQkNRVUV3UWl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRE8xRkJRMnhGTEUxQlFVMHNhMEpCUVd0Q0xFZEJRVWNzU1VGQlNTeHRSVUZCYTBJc1EwRkROME1zU1VGQlNTeERRVUZETERCQ1FVRXdRaXhGUVVNdlFpeE5RVUZOTEVWQlEwNHNTVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkRiRUlzUTBGQlF6dFJRVU5HTEd0Q1FVRnJRaXhEUVVGRExITkNRVUZ6UWl4RlFVRkZMRU5CUVVNN1VVRkROVU1zVDBGQlR5eHJRa0ZCYTBJc1EwRkJRenRKUVVNNVFpeERRVUZETzBsQlJVUTdPenRQUVVkSE8wbEJRMGdzWVVGQllTeERRVUZETEdGQlFXZERPMUZCUXpGRExITkVRVUZWTEVOQlFVTXNaMFZCUVc5Q0xFVkJRVVVzUlVGQlJTeDFRa0ZCZFVJc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF6dFJRVU12UkN4TlFVRk5MR1ZCUVdVc1IwRkJSeXhKUVVGSkxEWkVRVUZsTEVOQlEzWkRMRWxCUVVrc1EwRkJReXd3UWtGQk1FSXNSVUZETDBJc1NVRkJTU3hEUVVGRExHOUNRVUZ2UWl4RlFVTjZRaXhKUVVGSkxFTkJRVU1zYlVKQlFXMUNMRVZCUTNoQ0xFbEJRVWtzUTBGQlF5eFZRVUZWTEVOQlEyeENMRU5CUVVNN1VVRkZSaXhSUVVGUkxHRkJRV0VzUlVGQlJUdFpRVU51UWl4TFFVRkxMSGxGUVVFMlFqdG5Ra0ZET1VJc1pVRkJaU3hEUVVGRExIbENRVUY1UWl4RFFVRkRMR1ZCUVdVc1EwRkJReXhEUVVGRE8yZENRVU16UkN4TlFVRk5PMWxCUTFZc1MwRkJTeXd5UlVGQkswSTdaMEpCUTJoRExHVkJRV1VzUTBGQlF5d3lRa0ZCTWtJc1EwRkJReXhsUVVGbExFTkJRVU1zUTBGQlF6dG5Ra0ZETjBRc1RVRkJUVHRaUVVOV08yZENRVU5KTEhWRVFVRlhMRU5CUTFBc1owVkJRVzlDTEVWQlFVVXNSVUZEZEVJc0swUkJRU3RFTEVOQlEyeEZMRU5CUVVNN1owSkJRMFlzWlVGQlpTeERRVUZETEhsQ1FVRjVRaXhEUVVGRExHVkJRV1VzUTBGQlF5eERRVUZETzJkQ1FVTXpSQ3hOUVVGTk8xTkJRMkk3VVVGRlJDeFBRVUZQTEdWQlFXVXNRMEZCUXp0SlFVTXpRaXhEUVVGRE8wbEJSVVE3T3p0UFFVZEhPMGxCUTBnc1lVRkJZU3hEUVVOVUxHTkJRWFZDTEVWQlEzWkNMRFJDUVVGeFF6dFJRVVZ5UXl4elJFRkJWU3hEUVVGRExHZEZRVUZ2UWl4RlFVRkZMRVZCUVVVc2JVSkJRVzFDTEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRNMFFzU1VGQlNTeGpRVUZqTEVWQlFVVTdXVUZEYUVJc1RVRkJUU3h0UWtGQmJVSXNSMEZCUnl4SlFVRkpMSEZGUVVGdFFpeERRVU12UXl4SlFVRkpMRU5CUVVNc01FSkJRVEJDTEVWQlF5OUNMRWxCUVVrc1EwRkJReXh2UWtGQmIwSXNSVUZEZWtJc1NVRkJTU3hEUVVGRExHMUNRVUZ0UWl4RFFVTXpRaXhEUVVGRE8xbEJRMFlzYlVKQlFXMUNMRU5CUVVNc0swSkJRU3RDTEVOQlF5OURMRFJDUVVFMFFpeERRVU12UWl4RFFVRkRPMWxCUTBZc1QwRkJUeXh0UWtGQmJVSXNRMEZCUXp0VFFVTTVRanRoUVVGTk8xbEJRMGdzVDBGQlR5eEpRVUZKTERaRVFVRmxMRU5CUTNSQ0xFbEJRVWtzUTBGQlF5d3dRa0ZCTUVJc1JVRkRMMElzU1VGQlNTeERRVUZETEc5Q1FVRnZRaXhGUVVONlFpeEpRVUZKTEVOQlFVTXNiVUpCUVcxQ0xFTkJRek5DTEVOQlFVTTdVMEZEVER0SlFVTk1MRU5CUVVNN1NVRkZSRHM3VDBGRlJ6dEpRVU5JTEdWQlFXVTdVVUZEV0N4elJFRkJWU3hEUVVGRExHZEZRVUZ2UWl4RlFVRkZMRVZCUVVVc2JVSkJRVzFDTEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRNMFFzVFVGQlRTeHBRa0ZCYVVJc1IwRkJSeXhKUVVGSkxHbEZRVUZwUWl4RFFVTXpReXhKUVVGSkxFTkJRVU1zTUVKQlFUQkNMRU5CUTJ4RExFTkJRVU03VVVGRFJpeFBRVUZQTEdsQ1FVRnBRaXhEUVVGRE8wbEJRemRDTEVOQlFVTTdRMEZEU2p0QlFVVkVPenRIUVVWSE8wRkJRMGtzVFVGQlRTeFZRVUZWTzBsQlJXNUNPMUZCUkVFc1pVRkJWU3hIUVVGclFpeEZRVUZGTEVOQlFVTTdVVUZGTTBJc1NVRkJTU3hEUVVGRExGVkJRVlVzUjBGQlJ5eEZRVUZGTEVOQlFVTTdTVUZEZWtJc1EwRkJRenRKUVVWRU96czdUMEZIUnp0SlFVTklMR0ZCUVdFN1VVRkRWQ3hQUVVGUExFbEJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTTdTVUZETTBJc1EwRkJRenREUVVOS096czdPenM3T3pzN096czdPenM3T3pzN08wRkRNMGxFTEd0RVFVRnJSRHRCUVVWRk8wRkJRMVk3UVVGSFR6dEJRVU50UWp0QlFVMXdSVHM3UjBGRlJ6dEJRVU5KTEUxQlFVMHNhMEpCUVd0Q08wbEJjVWd6UWpzN096dFBRVWxITzBsQlEwZ3NXVUZEU1N3d1FrRkJiVVFzUlVGRGJrUXNUVUZCWXl4RlFVTmtMR3RDUVVFNFFqdFJRWGhJYkVNc2NVVkJRWEZGTzFGQlF6ZEVMR2xEUVVFMFFpeEhRVUZITEVsQlFVa3NORVZCUVc5Q0xFVkJRVVVzUTBGQlF6dFJRVVZzUlRzN096czdWMEZMUnp0UlFVTklMR3RDUVVGaExFZEJRVzFDTzFsQlF6VkNMRTFCUVUwc1JVRkJSU3hGUVVGRk8xbEJRMVlzVFVGQlRTeEZRVUZGTEVWQlFVVTdXVUZEVml4TlFVRk5MRVZCUVVVc1JVRkJSVHRaUVVOV0xFMUJRVTBzUlVGQlJTeEZRVUZGTzFsQlExWXNUVUZCVFN4RlFVRkZMRVZCUVVVN1dVRkRWaXhOUVVGTkxFVkJRVVVzUlVGQlJUdFpRVU5XTEUxQlFVMHNSVUZCUlN4RlFVRkZPMWxCUTFZc1RVRkJUU3hGUVVGRkxFVkJRVVU3V1VGRFZpeE5RVUZOTEVWQlFVVXNSVUZCUlR0WlFVTldMRTFCUVUwc1JVRkJSU3hGUVVGRk8xbEJRMVlzVFVGQlRTeEZRVUZGTEVWQlFVVTdXVUZEVml4TFFVRkxMRVZCUVVVc1IwRkJSenRaUVVOV0xFdEJRVXNzUlVGQlJTeEhRVUZITzFsQlExWXNVMEZCVXl4RlFVRkZMRU5CUVVNN1dVRkRXaXhIUVVGSExFVkJRVVVzUTBGQlF6dFpRVU5PTEVsQlFVa3NSVUZCUlN4RlFVRkZPMWxCUTFJc1NVRkJTU3hGUVVGRkxFVkJRVVU3V1VGRFVpeEpRVUZKTEVWQlFVVXNSVUZCUlR0WlFVTlNMRWxCUVVrc1JVRkJSU3hGUVVGRk8xbEJRMUlzU1VGQlNTeEZRVUZGTEVWQlFVVTdXVUZEVWl4SlFVRkpMRVZCUVVVc1JVRkJSVHRaUVVOU0xFbEJRVWtzUlVGQlJTeEZRVUZGTzFsQlExSXNTVUZCU1N4RlFVRkZMRVZCUVVVN1dVRkRVaXhKUVVGSkxFVkJRVVVzUlVGQlJUdFpRVU5TTEVsQlFVa3NSVUZCUlN4RlFVRkZPMWxCUTFJc1YwRkJWeXhGUVVGRkxFZEJRVWM3V1VGRGFFSXNXVUZCV1N4RlFVRkZMRWRCUVVjN1dVRkRha0lzUzBGQlN5eEZRVUZGTEVWQlFVVTdXVUZEVkN4WFFVRlhMRVZCUVVVc1JVRkJSVHRaUVVObUxFbEJRVWtzUlVGQlJTeEZRVUZGTzFsQlExSXNTVUZCU1N4RlFVRkZMRVZCUVVVN1dVRkRVaXhKUVVGSkxFVkJRVVVzUlVGQlJUdFpRVU5TTEVsQlFVa3NSVUZCUlN4RlFVRkZPMWxCUTFJc1NVRkJTU3hGUVVGRkxFVkJRVVU3V1VGRFVpeEpRVUZKTEVWQlFVVXNSVUZCUlR0WlFVTlNMRWxCUVVrc1JVRkJSU3hGUVVGRk8xbEJRMUlzU1VGQlNTeEZRVUZGTEVWQlFVVTdXVUZEVWl4SlFVRkpMRVZCUVVVc1JVRkJSVHRaUVVOU0xGTkJRVk1zUlVGQlJTeEhRVUZITzFsQlEyUXNTMEZCU3l4RlFVRkZMRWRCUVVjN1dVRkRWaXhUUVVGVExFVkJRVVVzUjBGQlJ6dFpRVU5rTEZOQlFWTXNSVUZCUlN4RlFVRkZPMWxCUTJJc1UwRkJVeXhGUVVGRkxFZEJRVWM3V1VGRFpDeEpRVUZKTEVWQlFVVXNSVUZCUlR0WlFVTlNMRWxCUVVrc1JVRkJSU3hGUVVGRk8xbEJRMUlzU1VGQlNTeEZRVUZGTEVWQlFVVTdXVUZEVWl4SlFVRkpMRVZCUVVVc1JVRkJSVHRaUVVOU0xFbEJRVWtzUlVGQlJTeEZRVUZGTzFsQlExSXNTVUZCU1N4RlFVRkZMRVZCUVVVN1dVRkRVaXhKUVVGSkxFVkJRVVVzUlVGQlJUdFpRVU5TTEV0QlFVc3NSVUZCUlN4SFFVRkhPMWxCUTFZc1RVRkJUU3hGUVVGRkxFZEJRVWM3V1VGRFdDeExRVUZMTEVWQlFVVXNSMEZCUnp0WlFVTldMRlZCUVZVc1JVRkJSU3hIUVVGSE8xbEJRMllzVDBGQlR5eEZRVUZGTEVWQlFVVTdXVUZEV0N4TFFVRkxMRVZCUVVVc1JVRkJSVHRaUVVOVUxGRkJRVkVzUlVGQlJTeEZRVUZGTzFsQlExb3NSVUZCUlN4RlFVRkZMRWRCUVVjN1dVRkRVQ3hGUVVGRkxFVkJRVVVzUjBGQlJ6dFpRVU5RTEVWQlFVVXNSVUZCUlN4SFFVRkhPMWxCUTFBc1JVRkJSU3hGUVVGRkxFZEJRVWM3V1VGRFVDeEZRVUZGTEVWQlFVVXNSMEZCUnp0WlFVTlFMRVZCUVVVc1JVRkJSU3hIUVVGSE8xbEJRMUFzUlVGQlJTeEZRVUZGTEVkQlFVYzdXVUZEVUN4RlFVRkZMRVZCUVVVc1IwRkJSenRaUVVOUUxFVkJRVVVzUlVGQlJTeEhRVUZITzFsQlExQXNSMEZCUnl4RlFVRkZMRWRCUVVjN1dVRkRVaXhIUVVGSExFVkJRVVVzUjBGQlJ6dFpRVU5TTEVkQlFVY3NSVUZCUlN4SFFVRkhPMWxCUTFJc1MwRkJTeXhGUVVGRkxFVkJRVVU3V1VGRFZDeFZRVUZWTEVWQlFVVXNSMEZCUnp0WlFVTm1MRmxCUVZrc1JVRkJSU3hIUVVGSE8xbEJRMnBDTEdOQlFXTXNSVUZCUlN4SFFVRkhPMWxCUTI1Q0xHTkJRV01zUlVGQlJTeEhRVUZITzFsQlEyNUNMRk5CUVZNc1JVRkJSU3hIUVVGSE8xbEJRMlFzWVVGQllTeEZRVUZGTEVkQlFVYzdXVUZEYkVJc1QwRkJUeXhGUVVGRkxFZEJRVWM3V1VGRFdpeFBRVUZQTEVWQlFVVXNSMEZCUnp0WlFVTmFMRTlCUVU4c1JVRkJSU3hIUVVGSE8xbEJRMW9zVDBGQlR5eEZRVUZGTEVkQlFVYzdXVUZEV2l4UFFVRlBMRVZCUVVVc1IwRkJSenRaUVVOYUxFOUJRVThzUlVGQlJTeEhRVUZITzFsQlExb3NUMEZCVHl4RlFVRkZMRVZCUVVVN1dVRkRXQ3hQUVVGUExFVkJRVVVzUlVGQlJUdFpRVU5ZTEU5QlFVOHNSVUZCUlN4RlFVRkZPMWxCUTFnc1QwRkJUeXhGUVVGRkxFVkJRVVU3V1VGRFdDeFBRVUZQTEVWQlFVVXNSMEZCUnp0WlFVTmFMRmxCUVZrc1JVRkJSU3hIUVVGSE8xbEJRMnBDTEZGQlFWRXNSVUZCUlN4SFFVRkhPMWxCUTJJc1NVRkJTU3hGUVVGRkxFVkJRVVU3V1VGRFVpeEhRVUZITEVWQlFVVXNSVUZCUlR0WlFVTlFMRTlCUVU4c1JVRkJSU3hGUVVGRk8xbEJRMWdzVTBGQlV5eEZRVUZGTEVWQlFVVTdXVUZEWWl4VlFVRlZMRVZCUVVVc1JVRkJSVHRaUVVOa0xGTkJRVk1zUlVGQlJTeEZRVUZGTzFsQlEySXNUVUZCVFN4RlFVRkZMRVZCUVVVN1dVRkRWaXhSUVVGUkxFVkJRVVVzUlVGQlJUdFpRVU5hTEUxQlFVMHNSVUZCUlN4RlFVRkZPMWxCUTFZc1RVRkJUU3hGUVVGRkxFVkJRVVU3V1VGRFZpeFhRVUZYTEVWQlFVVXNSVUZCUlR0VFFVTnNRaXhEUVVGRE8xRkJXVVVzU1VGQlNTeERRVUZETERCQ1FVRXdRaXhIUVVGSExEQkNRVUV3UWl4RFFVRkRPMUZCUXpkRUxFbEJRVWtzUTBGQlF5eE5RVUZOTEVkQlFVY3NUVUZCVFN4RFFVRkRPMUZCUTNKQ0xFbEJRVWtzUTBGQlF5eHJRa0ZCYTBJc1IwRkJSeXhyUWtGQmEwSXNRMEZCUXp0SlFVTnFSQ3hEUVVGRE8wbEJSVVE3TzA5QlJVYzdTVUZEU0N4elFrRkJjMEk3VVVGRGJFSXNUVUZCVFN4alFVRmpMRWRCUVVjc1EwRkJReXhGUVVGcFFpeEZRVUZGTEVWQlFVVXNRMEZCUXl4SlFVRkpMRU5CUVVNc1pVRkJaU3hEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETzFGQlEzWkZMRTFCUVUwc1dVRkJXU3hIUVVGSExFTkJRVU1zUlVGQmFVSXNSVUZCUlN4RlFVRkZMRU5CUVVNc1NVRkJTU3hEUVVGRExHRkJRV0VzUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXp0UlFVTnVSU3hOUVVGTkxHVkJRV1VzUjBGQlJ5eERRVUZETEVWQlFXbENMRVZCUVVVc1JVRkJSU3hEUVVGRExFbEJRVWtzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF6dFJRVVY2UlN4UlFVRlJMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNVMEZCVXl4RlFVRkZMR05CUVdNc1EwRkJReXhEUVVGRE8xRkJRM0pFTEZGQlFWRXNRMEZCUXl4blFrRkJaMElzUTBGQlF5eFBRVUZQTEVWQlFVVXNXVUZCV1N4RFFVRkRMRU5CUVVNN1VVRkZha1FzTkVOQlFUUkRPMUZCUXpWRExGRkJRVkVzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhWUVVGVkxFVkJRVVVzWlVGQlpTeERRVUZETEVOQlFVTTdVVUZGZGtRc1NVRkJTU3hEUVVGRExEUkNRVUUwUWl4RFFVRkRMSEZDUVVGeFFpeERRVU51UkN4SFFVRkhMRVZCUVVVc1EwRkJReXhSUVVGUkxFTkJRVU1zYlVKQlFXMUNMRU5CUVVNc1UwRkJVeXhGUVVGRkxHTkJRV01zUTBGQlF5eERRVU5vUlN4RFFVRkRPMUZCUTBZc1NVRkJTU3hEUVVGRExEUkNRVUUwUWl4RFFVRkRMSEZDUVVGeFFpeERRVU51UkN4SFFVRkhMRVZCUVVVc1EwRkJReXhSUVVGUkxFTkJRVU1zYlVKQlFXMUNMRU5CUVVNc1QwRkJUeXhGUVVGRkxGbEJRVmtzUTBGQlF5eERRVU0xUkN4RFFVRkRPMUZCUTBZc1NVRkJTU3hEUVVGRExEUkNRVUUwUWl4RFFVRkRMSEZDUVVGeFFpeERRVU51UkN4SFFVRkhMRVZCUVVVc1EwRkJReXhSUVVGUkxFTkJRVU1zYlVKQlFXMUNMRU5CUVVNc1ZVRkJWU3hGUVVGRkxHVkJRV1VzUTBGQlF5eERRVU5zUlN4RFFVRkRPMGxCUTA0c1EwRkJRenRKUVVWRU96dFBRVVZITzBsQlEwZ3NkMEpCUVhkQ08xRkJRM0JDTEVsQlFVa3NRMEZCUXl3MFFrRkJORUlzUTBGQlF5eGhRVUZoTEVWQlFVVXNRMEZCUXp0SlFVTjBSQ3hEUVVGRE8wbEJSVVE3T3p0UFFVZEhPMGxCUTBnc1pVRkJaU3hEUVVGRExHRkJRVFJDTzFGQlEzaERMRTFCUVUwc1QwRkJUeXhIUVVGSExFbEJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTXNZVUZCWVN4RFFVRkRMRU5CUVVNN1VVRkRMME1zU1VGQlNTeERRVUZETEU5QlFVOHNSVUZCUlR0WlFVTldMRTlCUVU4N1UwRkRWanRSUVVWRUxITkVRVUZWTEVOQlEwNHNaMFZCUVc5Q0xFVkJRVVVzUlVGRGRFSXNXVUZCV1N4UFFVRlBMR05CUVdNc1lVRkJZU3hEUVVGRExFMUJRVTBzUlVGQlJTeEZRVU4yUkN4RFFVRkRMRU5CUTBvc1EwRkJRenRSUVVOR0xFMUJRVTBzYTBKQlFXdENMRWRCUTNCQ0xFbEJRVWtzUTBGQlF5d3dRa0ZCTUVJc1EwRkJReXhyUWtGQmEwSXNRMEZCUXp0UlFVTjJSQ3hyUWtGQmEwSXNRMEZCUXl4SFFVRkhMRU5CUVVNc1UwRkJVeXhEUVVGRExFTkJRVU03V1VGRE9VSXNTVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJReXhoUVVGaExFTkJRVU03V1VGRE9VSXNZVUZCWVN4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMU5CUXk5Q0xFTkJRVU1zUTBGQlF6dFJRVU5JTEUxQlFVMHNWVUZCVlN4SFFVRkhMRWxCUVVrc1EwRkJReXhyUWtGQmEwSXNRMEZCUXl4aFFVRmhMRVZCUVVVc1EwRkJRenRSUVVNelJDeFZRVUZWTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRE8xRkJRM3BDTEhORlFVRnpSVHRSUVVOMFJTd3JSRUZCSzBRN1VVRkRMMFFzU1VGQlNTeFBRVUZQTEV0QlFVc3NkVVZCUVhsQ0xFVkJRVVU3V1VGRGRrTXNVVUZCVVN4RFFVRkRMR0ZCUVdFc1EwRkRiRUlzU1VGQlNTeGhRVUZoTEVOQlFVTXNWVUZCVlN4RlFVRkZPMmRDUVVNeFFpeFJRVUZSTEVWQlFVVXNkVVZCUVhsQ08yRkJRM1JETEVOQlFVTXNRMEZEVEN4RFFVRkRPMU5CUTB3N1VVRkZSQ3hKUVVOSkxFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNZVUZCWVN4RFFVRkRMSEZGUVVGNVFpeERRVUZETzFsQlEzQkVMRWxCUVVrc1EwRkJReXh0UWtGQmJVSXNRMEZCUXl4UFFVRlBMRU5CUVVNc1JVRkRia003V1VGRFJTeGhRVUZoTEVOQlFVTXNZMEZCWXl4RlFVRkZMRU5CUVVNN1UwRkRiRU03U1VGRFRDeERRVUZETzBsQlJVUTdPenRQUVVkSE8wbEJRMGdzWVVGQllTeERRVUZETEdGQlFUUkNPMUZCUTNSRExFMUJRVTBzVDBGQlR5eEhRVUZITEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc1lVRkJZU3hEUVVGRExFTkJRVU03VVVGREwwTXNTVUZCU1N4RFFVRkRMRTlCUVU4c1JVRkJSVHRaUVVOV0xFOUJRVTg3VTBGRFZqdFJRVVZFTEhORVFVRlZMRU5CUVVNc1owVkJRVzlDTEVWQlFVVXNSVUZCUlN4VlFVRlZMRTlCUVU4c1JVRkJSU3hGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETzFGQlF6TkVMRTFCUVUwc2EwSkJRV3RDTEVkQlEzQkNMRWxCUVVrc1EwRkJReXd3UWtGQk1FSXNRMEZCUXl4clFrRkJhMElzUTBGQlF6dFJRVU4yUkN4clFrRkJhMElzUTBGQlF5eEhRVUZITEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNN1dVRkROVUlzVDBGQlR6dFpRVU5RTEdGQlFXRXNRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0VFFVTXZRaXhEUVVGRExFTkJRVU03VVVGRlNDeEpRVU5KTEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1lVRkJZU3hEUVVGRExIRkZRVUY1UWl4RFFVRkRPMWxCUTNCRUxFbEJRVWtzUTBGQlF5eHRRa0ZCYlVJc1EwRkJReXhQUVVGUExFTkJRVU1zUlVGRGJrTTdXVUZEUlN4aFFVRmhMRU5CUVVNc1kwRkJZeXhGUVVGRkxFTkJRVU03VTBGRGJFTTdTVUZEVEN4RFFVRkRPMGxCUlVRN096dFBRVWRITzBsQlEwZ3NaMEpCUVdkQ0xFTkJRVU1zVVVGQmRVSTdVVUZEY0VNc1NVRkJTU3hEUVVGRExFTkJRVU1zVlVGQlZTeEpRVUZKTEZGQlFWRXNRMEZCUXl4RlFVRkZPMWxCUXpOQ0xEQkVRVUZqTEVOQlExWXNaMFZCUVc5Q0xFVkJRVVVzUlVGRGRFSXNPRVZCUVRoRkxFTkJRMnBHTEVOQlFVTTdXVUZEUml4UFFVRlBPMU5CUTFZN1VVRkZSQ3hOUVVGTkxGRkJRVkVzUjBGQlJ5eFJRVUZSTEVOQlFVTXNVVUZCVVN4RFFVRkRPMUZCUTI1RExITkVRVUZWTEVOQlFVTXNaMFZCUVc5Q0xFVkJRVVVzUlVGQlJTeGhRVUZoTEZGQlFWRXNSVUZCUlN4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRE8xRkJSUzlFTEUxQlFVMHNhMEpCUVd0Q0xFZEJRM0JDTEVsQlFVa3NRMEZCUXl3d1FrRkJNRUlzUTBGQlF5eHJRa0ZCYTBJc1EwRkJRenRSUVVOMlJDeHJRa0ZCYTBJc1EwRkJReXhIUVVGSExFTkJRVU1zVlVGQlZTeERRVUZETEVOQlFVTXNRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJReXhEUVVGRE8wbEJRMjVFTEVOQlFVTTdTVUZGUkRzN096dFBRVWxITzBsQlEwZ3NWVUZCVlN4RFFVRkRMR0ZCUVRSQ08xRkJRMjVETERKSFFVRXlSenRSUVVNelJ5d3dSMEZCTUVjN1VVRkRNVWNzU1VGQlNTeERRVUZETEVOQlFVTXNVMEZCVXl4SlFVRkpMR0ZCUVdFc1EwRkJReXhGUVVGRk8xbEJReTlDTEhGSFFVRnhSenRaUVVOeVJ5eE5RVUZOTEV0QlFVc3NSMEZCUnl4aFFVRTRRaXhEUVVGRE8xbEJRemRETEVsQlFVa3NTMEZCU3l4RFFVRkRMRWxCUVVrc1NVRkJTU3hKUVVGSkxFTkJRVU1zWVVGQllTeEZRVUZGTzJkQ1FVTnNReXhQUVVGUExFbEJRVWtzUTBGQlF5eGhRVUZoTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8yRkJRM3BETzJsQ1FVRk5PMmRDUVVOSUxEQkVRVUZqTEVOQlExWXNaMFZCUVc5Q0xFVkJRVVVzUlVGRGRFSXNiMEpCUVc5Q0xFdEJRVXNzUTBGQlF5eEpRVUZKTEhORVFVRnpSQ3hEUVVOMlJpeERRVUZETzJkQ1FVTkdMRTlCUVU4c1NVRkJTU3hEUVVGRE8yRkJRMlk3VTBGRFNqdFJRVVZFTEhWR1FVRjFSanRSUVVWMlJpeEpRVU5KTEdGQlFXRXNRMEZCUXl4UFFVRlBMRXRCUVVzc2JVVkJRWEZDTzFsQlF5OURMR0ZCUVdFc1EwRkJReXhKUVVGSkxFdEJRVXNzV1VGQldTeEZRVU55UXp0WlFVTkZMRTlCUVU4c2QwVkJRVEJDTEVOQlFVTTdVMEZEY2tNN1lVRkJUU3hKUVVOSUxHRkJRV0VzUTBGQlF5eFBRVUZQTEV0QlFVc3NjVVZCUVhWQ08xbEJRMnBFTEdGQlFXRXNRMEZCUXl4SlFVRkpMRXRCUVVzc1kwRkJZeXhGUVVOMlF6dFpRVU5GTEU5QlFVOHNNRVZCUVRSQ0xFTkJRVU03VTBGRGRrTTdZVUZCVFN4SlFVTklMR0ZCUVdFc1EwRkJReXhQUVVGUExFdEJRVXNzYVVWQlFXMUNPMWxCUXpkRExHRkJRV0VzUTBGQlF5eEpRVUZKTEV0QlFVc3NWVUZCVlN4RlFVTnVRenRaUVVORkxFOUJRVThzYzBWQlFYZENMRU5CUVVNN1UwRkRia003WVVGQlRUdFpRVU5JTEU5QlFVOHNZVUZCWVN4RFFVRkRMRTlCUVU4c1EwRkJRenRUUVVOb1F6dEpRVU5NTEVOQlFVTTdTVUZGUkRzN08wOUJSMGM3U1VGRFNDeHRRa0ZCYlVJc1EwRkJReXhQUVVGbE8xRkJReTlDTEcxSlFVRnRTVHRSUVVOdVNTeFBRVUZQTEVOQlFVTXNUMEZCVHl4SlFVRkpMRWRCUVVjc1NVRkJTU3hQUVVGUExFbEJRVWtzUjBGQlJ5eERRVUZETEVsQlFVa3NUMEZCVHl4TFFVRkxMRU5CUVVNc1EwRkJRenRKUVVNdlJDeERRVUZETzBOQlEwbzdPenM3T3pzN096czdPenM3T3pzN08wRkRhRlZFTEd0RVFVRnJSRHRCUVVkU08wRkJTekJDTzBGQlJYQkZPenRIUVVWSE8wRkJRMGtzVFVGQlRTeHBRa0ZCYVVJN1NVRmpNVUk3T3pzN08wOUJTMGM3U1VGRFNDeFpRVU5KTEc5Q1FVRnBReXhGUVVOcVF5eGxRVUZuUXl4RlFVTm9ReXhyUWtGQk9FSTdVVUYwUW14RExFMUJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTTdVVUZEVGl4TlFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8xRkJTMDRzYVVOQlFUUkNMRWRCUVVjc1EwRkJReXhWUVVGelFpeEZRVUZGTEVWQlFVVTdXVUZEZEVRc1NVRkJTU3hEUVVGRExIVkNRVUYxUWl4RFFVRkRMRlZCUVZVc1EwRkJReXhEUVVGRE8xRkJRemRETEVOQlFVTXNRMEZCUXp0UlFVVkdMSEZGUVVGeFJUdFJRVU0zUkN3NFFrRkJlVUlzUjBGQlJ5eEpRVUZKTERSRlFVRnZRaXhGUVVGRkxFTkJRVU03VVVGaE0wUXNTVUZCU1N4RFFVRkRMRzlDUVVGdlFpeEhRVUZITEc5Q1FVRnZRaXhEUVVGRE8xRkJRMnBFTEVsQlFVa3NRMEZCUXl4bFFVRmxMRWRCUVVjc1pVRkJaU3hEUVVGRE8xRkJRM1pETEVsQlFVa3NRMEZCUXl4clFrRkJhMElzUjBGQlJ5eHJRa0ZCYTBJc1EwRkJRenRSUVVNM1F5eE5RVUZOTEd0Q1FVRnJRaXhIUVVOd1FpeEpRVUZKTEVOQlFVTXNiMEpCUVc5Q0xFTkJRVU1zY1VKQlFYRkNMRVZCUVVVc1EwRkJRenRSUVVOMFJDeEpRVUZKTEVOQlFVTXNRMEZCUXl4SFFVRkhMR3RDUVVGclFpeERRVUZETEhGQ1FVRnhRaXhGUVVGRkxFTkJRVU1zUzBGQlN5eEhRVUZITEVOQlFVTXNRMEZCUXp0UlFVTTVSQ3hKUVVGSkxFTkJRVU1zUTBGQlF5eEhRVUZITEd0Q1FVRnJRaXhEUVVGRExIRkNRVUZ4UWl4RlFVRkZMRU5CUVVNc1RVRkJUU3hIUVVGSExFTkJRVU1zUTBGQlF6dFJRVU12UkN4SlFVRkpMRU5CUVVNc1MwRkJTenRaUVVOT0xFbEJRVWtzUTBGQlF5eGxRVUZsTEVOQlFVTXNiVUpCUVcxQ0xFTkJRVU1zTkVKQlFUUkNMRU5CUTJwRkxFbEJRVWtzUTBGQlF5eERRVUZETEVWQlEwNHNTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkRWQ3hEUVVGRE8wbEJRMVlzUTBGQlF6dEpRVVZFT3p0UFFVVkhPMGxCUTBnc2NVSkJRWEZDTzFGQlEycENMRWxCUVVrc1EwRkJReXg1UWtGQmVVSXNRMEZCUXl4aFFVRmhMRVZCUVVVc1EwRkJRenRKUVVOdVJDeERRVUZETzBsQlJVUTdPMDlCUlVjN1NVRkRTQ3hsUVVGbE8xRkJRMWdzVFVGQlRTeHJRa0ZCYTBJc1IwRkRjRUlzU1VGQlNTeERRVUZETEc5Q1FVRnZRaXhEUVVGRExIRkNRVUZ4UWl4RlFVRkZMRU5CUVVNN1VVRkRkRVFzVFVGQlRTeHJRa0ZCYTBJc1IwRkRjRUlzU1VGQlNTeERRVUZETEdWQlFXVXNRMEZCUXl3d1FrRkJNRUlzUTBGQlF5eHJRa0ZCYTBJc1EwRkJRenRSUVVWMlJTeEpRVU5KTEZGQlFWRXNRMEZCUXl4clFrRkJhMElzUzBGQlN5eHJRa0ZCYTBJN1dVRkRiRVFzVVVGQlVTeERRVUZETEhGQ1FVRnhRaXhMUVVGTExHdENRVUZyUWl4RlFVTjJSRHRaUVVORkxITkVRVUZWTEVOQlFVTXNaMFZCUVc5Q0xFVkJRVVVzUlVGQlJTeG5Ra0ZCWjBJc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF6dFpRVU40UkN4UlFVRlJMRU5CUVVNc1owSkJRV2RDTEVOQlEzSkNMRmRCUVZjc1JVRkRXQ3hKUVVGSkxFTkJRVU1zTkVKQlFUUkNMRVZCUTJwRExFdEJRVXNzUTBGRFVpeERRVUZETzFsQlEwWXNTVUZCU1N4RFFVRkRMSGxDUVVGNVFpeERRVUZETEhGQ1FVRnhRaXhEUVVOb1JDeEhRVUZITEVWQlFVVXNRMEZCUXl4UlFVRlJMRU5CUVVNc2JVSkJRVzFDTEVOQlF6bENMRmRCUVZjc1JVRkRXQ3hKUVVGSkxFTkJRVU1zTkVKQlFUUkNMRVZCUTJwRExFdEJRVXNzUTBGRFVpeERRVU5LTEVOQlFVTTdVMEZEVER0aFFVRk5PMWxCUTBnc2MwUkJRVlVzUTBGRFRpeG5SVUZCYjBJc1JVRkJSU3hGUVVOMFFpeDVRMEZCZVVNc1JVRkRla01zUTBGQlF5eERRVU5LTEVOQlFVTTdXVUZEUml3MlIwRkJOa2M3V1VGRE4wY3NVVUZCVVN4RFFVRkRMRzFDUVVGdFFpeERRVU40UWl4WFFVRlhMRVZCUTFnc1NVRkJTU3hEUVVGRExEUkNRVUUwUWl4RlFVTnFReXhMUVVGTExFTkJRMUlzUTBGQlF6dFpRVVZHTERoRlFVRTRSVHRaUVVNNVJTeHpSMEZCYzBjN1dVRkRkRWNzY1VOQlFYRkRPMWxCUTNKRExFbEJRVWtzVlVGQlZTeEhRVUZITEVsQlFVa3NRMEZCUXl4clFrRkJhMElzUTBGQlF5eGhRVUZoTEVWQlFVVXNRMEZCUXp0WlFVTjZSQ3hOUVVGTkxFOUJRVThzUjBGQlJ5eEpRVUZKTEVkQlFVY3NRMEZCUXl4VlFVRlZMRU5CUVVNc1EwRkJRenRaUVVOd1F5eE5RVUZOTEdWQlFXVXNSMEZCYTBJc1JVRkJSU3hEUVVGRE8xbEJSVEZETEU5QlFVOHNRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJReXhOUVVGakxFVkJRVVVzUlVGQlJUdG5Ra0ZETDBJc1pVRkJaU3hEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETzFsQlF6VkNMRU5CUVVNc1EwRkJReXhEUVVGRE8xbEJSVWdzWlVGQlpTeERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRMR0ZCUVdFc1JVRkJSU3hGUVVGRk8yZENRVU4wUXl4clFrRkJhMElzUTBGQlF5eEhRVUZITEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNc1EwRkJReXhoUVVGaExFTkJRVU1zUTBGQlF5eERRVUZETzFsQlEzSkVMRU5CUVVNc1EwRkJReXhEUVVGRE8xbEJRMGdzZDBOQlFYZERPMWxCUTNoRExGVkJRVlVzUjBGQlJ5eEZRVUZGTEVOQlFVTTdVMEZEYmtJN1NVRkRUQ3hEUVVGRE8wbEJSVVE3T3p0UFFVZEhPMGxCUTBnc2RVSkJRWFZDTEVOQlFVTXNWVUZCYzBJN1VVRkRNVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4dlFrRkJiMElzUTBGQlF5eFpRVUZaTEVWQlFVVXNSVUZCUlR0WlFVTXpReXhQUVVGUE8xTkJRMVk3VVVGRFJDeE5RVUZOTEd0Q1FVRnJRaXhIUVVOd1FpeEpRVUZKTEVOQlFVTXNaVUZCWlN4RFFVRkRMREJDUVVFd1FpeERRVUZETEd0Q1FVRnJRaXhEUVVGRE8xRkJRM1pGTEUxQlFVMHNWVUZCVlN4SFFVTmFMRWxCUVVrc1EwRkJReXh2UWtGQmIwSXNRMEZCUXl4eFFrRkJjVUlzUlVGQlJTeERRVUZETEZkQlFWY3NRMEZCUXp0UlFVTnNSU3hOUVVGTkxGZEJRVmNzUjBGRFlpeEpRVUZKTEVOQlFVTXNiMEpCUVc5Q0xFTkJRVU1zY1VKQlFYRkNMRVZCUVVVc1EwRkJReXhaUVVGWkxFTkJRVU03VVVGRmJrVXNTVUZCU1N4RFFVRkRMRU5CUVVNc1NVRkJTU3hWUVVGVkxFTkJRVU1zVTBGQlV5eERRVUZETzFGQlF5OUNMRWxCUVVrc1EwRkJReXhEUVVGRExFbEJRVWtzVlVGQlZTeERRVUZETEZOQlFWTXNRMEZCUXp0UlFVVXZRaXhKUVVGSkxFbEJRVWtzUTBGQlF5eERRVUZETEVkQlFVY3NWVUZCVlN4RlFVRkZPMWxCUTNKQ0xFbEJRVWtzUTBGQlF5eERRVUZETEVsQlFVa3NWVUZCVlN4RFFVRkRPMU5CUTNoQ08xRkJRMFFzU1VGQlNTeEpRVUZKTEVOQlFVTXNRMEZCUXl4SFFVRkhMRmRCUVZjc1JVRkJSVHRaUVVOMFFpeEpRVUZKTEVOQlFVTXNRMEZCUXl4SlFVRkpMRmRCUVZjc1EwRkJRenRUUVVONlFqdFJRVU5FTEVsQlFVa3NTVUZCU1N4RFFVRkRMRU5CUVVNc1IwRkJSeXhEUVVGRExFVkJRVVU3V1VGRFdpeEpRVUZKTEVOQlFVTXNRMEZCUXl4SFFVRkhMRlZCUVZVc1IwRkJSeXhKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETzFOQlEyaERPMUZCUTBRc1NVRkJTU3hKUVVGSkxFTkJRVU1zUTBGQlF5eEhRVUZITEVOQlFVTXNSVUZCUlR0WlFVTmFMRWxCUVVrc1EwRkJReXhEUVVGRExFZEJRVWNzVjBGQlZ5eEhRVUZITEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNN1UwRkRha003VVVGRlJDeEpRVUZKTEVOQlFVTXNTMEZCU3p0WlFVTk9MRWxCUVVrc1EwRkJReXhsUVVGbExFTkJRVU1zYlVKQlFXMUNMRU5CUVVNc05FSkJRVFJDTEVOQlEycEZMRWxCUVVrc1EwRkJReXhEUVVGRExFVkJRMDRzU1VGQlNTeERRVUZETEVOQlFVTXNRMEZEVkN4RFFVRkRPMUZCUTA0c1RVRkJUU3hMUVVGTExFZEJRMUFzU1VGQlNTeERRVUZETEdWQlFXVXNRMEZCUXl4dFFrRkJiVUlzUTBGQlF5d3dRa0ZCTUVJc1EwRkRMMFFzVlVGQlZTeERRVUZETEZOQlFWTXNSVUZEY0VJc1ZVRkJWU3hEUVVGRExGTkJRVk1zUTBGRGRrSXNRMEZCUXp0UlFVTk9MR3RDUVVGclFpeERRVUZETEVkQlFVY3NRMEZCUXl4WFFVRlhMRU5CUVVNc1EwRkJRenRaUVVOb1F5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNN1dVRkRXaXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTTdXVUZEV2l4TFFVRkxMRU5CUVVNc1EwRkJRenRaUVVOUUxFdEJRVXNzUTBGQlF5eERRVUZETzFOQlExWXNRMEZCUXl4RFFVRkRPMGxCUTFBc1EwRkJRenRKUVVWRU96czdUMEZIUnp0SlFVTklMR1ZCUVdVc1EwRkJReXhWUVVGelFqdFJRVU5zUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExHOUNRVUZ2UWl4RFFVRkRMRmxCUVZrc1JVRkJSU3hGUVVGRk8xbEJRek5ETEU5QlFVODdVMEZEVmp0UlFVVkVMRTFCUVUwc2EwSkJRV3RDTEVkQlEzQkNMRWxCUVVrc1EwRkJReXhsUVVGbExFTkJRVU1zTUVKQlFUQkNMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTTdVVUZEZGtVc2EwSkJRV3RDTEVOQlFVTXNSMEZCUnl4RFFVRkRMRmRCUVZjc1EwRkJReXhEUVVGRE8xbEJRMmhETEZWQlFWVXNRMEZCUXl4TlFVRk5PMWxCUTJwQ0xHMUhRVUZ0Unp0WlFVTnVSeXh4UkVGQmNVUTdXVUZEY2tRc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETzFsQlExb3NTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRE8xTkJRMllzUTBGQlF5eERRVUZETzBsQlExQXNRMEZCUXp0SlFVVkVPenM3VDBGSFJ6dEpRVU5JTEdGQlFXRXNRMEZCUXl4VlFVRnpRanRSUVVOb1F5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRzlDUVVGdlFpeERRVUZETEZsQlFWa3NSVUZCUlN4RlFVRkZPMWxCUXpORExFOUJRVTg3VTBGRFZqdFJRVU5FTEUxQlFVMHNhMEpCUVd0Q0xFZEJRM0JDTEVsQlFVa3NRMEZCUXl4bFFVRmxMRU5CUVVNc01FSkJRVEJDTEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU03VVVGRGRrVXNhMEpCUVd0Q0xFTkJRVU1zUjBGQlJ5eERRVUZETEZOQlFWTXNRMEZCUXl4RFFVRkRPMWxCUXpsQ0xGVkJRVlVzUTBGQlF5eE5RVUZOTzFsQlEycENMRzFIUVVGdFJ6dFpRVU51Unl4eFJFRkJjVVE3V1VGRGNrUXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRE8xbEJRMW9zU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRPMU5CUTJZc1EwRkJReXhEUVVGRE8wbEJRMUFzUTBGQlF6dEpRVVZFT3pzN1QwRkhSenRKUVVOSUxHZENRVUZuUWl4RFFVRkRMRlZCUVhOQ08xRkJRMjVETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc2IwSkJRVzlDTEVOQlFVTXNXVUZCV1N4RlFVRkZMRVZCUVVVN1dVRkRNME1zVDBGQlR6dFRRVU5XTzFGQlEwUXNUVUZCVFN4clFrRkJhMElzUjBGRGNFSXNTVUZCU1N4RFFVRkRMR1ZCUVdVc1EwRkJReXd3UWtGQk1FSXNRMEZCUXl4clFrRkJhMElzUTBGQlF6dFJRVU4yUlN4clFrRkJhMElzUTBGQlF5eEhRVUZITEVOQlFVTXNXVUZCV1N4RFFVRkRMRU5CUVVNN1dVRkRha01zVlVGQlZTeERRVUZETEZWQlFWVTdXVUZEY2tJc2JVZEJRVzFITzFsQlEyNUhMSEZFUVVGeFJEdFpRVU55UkN4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU03V1VGRFdpeEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNN1UwRkRaaXhEUVVGRExFTkJRVU03U1VGRFVDeERRVUZETzBsQlJVUTdPenRQUVVkSE8wbEJRMGdzYVVKQlFXbENMRU5CUVVNc1ZVRkJjMEk3VVVGRGNFTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXh2UWtGQmIwSXNRMEZCUXl4WlFVRlpMRVZCUVVVc1JVRkJSVHRaUVVNelF5eFBRVUZQTzFOQlExWTdVVUZEUkN4TlFVRk5MR3RDUVVGclFpeEhRVU53UWl4SlFVRkpMRU5CUVVNc1pVRkJaU3hEUVVGRExEQkNRVUV3UWl4RFFVRkRMR3RDUVVGclFpeERRVUZETzFGQlEzWkZMR3RDUVVGclFpeERRVUZETEVkQlFVY3NRMEZCUXl4aFFVRmhMRU5CUVVNc1EwRkJRenRaUVVOc1F5eFZRVUZWTEVOQlFVTXNUVUZCVFR0WlFVTnFRaXh0UjBGQmJVYzdXVUZEYmtjc2NVUkJRWEZFTzFsQlEzSkVMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF6dFpRVU5hTEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRenRUUVVObUxFTkJRVU1zUTBGQlF6dEpRVU5RTEVOQlFVTTdTVUZGUkRzN08wOUJSMGM3U1VGRFNDeDFRa0ZCZFVJc1EwRkJReXhWUVVGelFqdFJRVU14UXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExHOUNRVUZ2UWl4RFFVRkRMRmxCUVZrc1JVRkJSU3hGUVVGRk8xbEJRek5ETEU5QlFVODdVMEZEVmp0UlFVTkVMRWxCUVVrc1EwRkJReXhsUVVGbExFTkJRVU1zYVVKQlFXbENMRU5CUTJ4RExGVkJRVlVzUTBGQlF5eFBRVUZQTEVWQlEyeENMRWxCUVVrc1EwRkJReXhEUVVGRExFVkJRMDRzU1VGQlNTeERRVUZETEVOQlFVTXNRMEZEVkN4RFFVRkRPMGxCUTA0c1EwRkJRenRKUVVWRU96czdUMEZIUnp0SlFVTklMSGxDUVVGNVFpeERRVUZETEZWQlFYTkNPMUZCUXpWRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNiMEpCUVc5Q0xFTkJRVU1zV1VGQldTeEZRVUZGTEVWQlFVVTdXVUZETTBNc1QwRkJUenRUUVVOV08xRkJRMFFzU1VGQlNTeERRVUZETEdWQlFXVXNRMEZCUXl4dFFrRkJiVUlzUTBGRGNFTXNWVUZCVlN4RFFVRkRMRTlCUVU4c1JVRkRiRUlzU1VGQlNTeERRVUZETEVOQlFVTXNSVUZEVGl4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVOVUxFTkJRVU03U1VGRFRpeERRVUZETzBOQlEwbzdPenM3T3pzN096czdPenM3T3pzN1FVTm9Va1FzYTBSQlFXdEVPMEZCUld4RU96czdSMEZIUnp0QlFVTkpMRTFCUVUwc1YwRkJWenM3UVVGRFlpeHpRa0ZCVlN4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRExHVkJRV1U3UVVGREwwSXNNa0pCUVdVc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF5eG5Ra0ZCWjBJN1FVRkRja01zTWtKQlFXVXNSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJReXhuUWtGQlowSTdRVUZEY2tNc2QwSkJRVmtzUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXl4MVFrRkJkVUk3UVVGRGVrTXNkVUpCUVZjc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF5d3dRa0ZCTUVJN1FVRkhkRVE3T3p0SFFVZEhPMEZCUTBrc1RVRkJUU3huUWtGQlowSTdPMEZCUTJ4Q0xEaENRVUZoTEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNc1pVRkJaVHRCUVVOc1F5eG5RMEZCWlN4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRExHZENRVUZuUWp0QlFVTnlReXhuUTBGQlpTeEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRMR2RDUVVGblFqdEJRVU55UXl3MlFrRkJXU3hIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZETEhWQ1FVRjFRanRCUVVONlF5dzBRa0ZCVnl4SFFVRkhMRVZCUVVVc1EwRkJReXhEUVVGRExEQkNRVUV3UWpzN096czdPenM3T3pzN096czdPenM3T3pzN1FVTjJRblpFTEd0RVFVRnJSRHRCUVVWaE8wRkJRM0pDTzBGQlMyTTdRVUZEU1R0QlFVVlJPMEZCUlhCRk96dEhRVVZITzBGQlEwa3NUVUZCVFN4bFFVRmxPMGxCVTNoQ096czdPMDlCU1VjN1NVRkRTQ3haUVVOSkxEQkNRVUZ0UkN4RlFVTnVSQ3h2UWtGQmFVTXNSVUZEYWtNc2JVSkJRWGRETEVWQlEzaERMR3RDUVVFNFFqdFJRVnBzUXl4eFJVRkJjVVU3VVVGRE4wUXNPRUpCUVhsQ0xFZEJRVWNzU1VGQlNTdzBSVUZCYjBJc1JVRkJSU3hEUVVGRE8xRkJZVE5FTEVsQlFVa3NRMEZCUXl3d1FrRkJNRUlzUjBGQlJ5d3dRa0ZCTUVJc1EwRkJRenRSUVVNM1JDeEpRVUZKTEVOQlFVTXNiVUpCUVcxQ0xFZEJRVWNzYlVKQlFXMUNMRU5CUVVNN1VVRkRMME1zU1VGQlNTeERRVUZETEc5Q1FVRnZRaXhIUVVGSExHOUNRVUZ2UWl4RFFVRkRPMUZCUTJwRUxFbEJRVWtzUTBGQlF5eHJRa0ZCYTBJc1IwRkJSeXhyUWtGQmEwSXNRMEZCUXp0UlFVTTNReXhKUVVGSkxFTkJRVU1zWjBOQlFXZERMRVZCUVVVc1EwRkJRenRKUVVNMVF5eERRVUZETzBsQlJVUTdPMDlCUlVjN1NVRkRTQ3h4UWtGQmNVSTdVVUZEYWtJc1NVRkJTU3hEUVVGRExIbENRVUY1UWl4RFFVRkRMR0ZCUVdFc1JVRkJSU3hEUVVGRE8wbEJRMjVFTEVOQlFVTTdTVUZGUkRzN096dFBRVWxITzBsQlEwZ3NlVUpCUVhsQ0xFTkJRVU1zWlVGQlowTTdVVUZEZEVRc1RVRkJUU3hyUWtGQmEwSXNSMEZEY0VJc1NVRkJTU3hEUVVGRExHOUNRVUZ2UWl4RFFVRkRMSEZDUVVGeFFpeEZRVUZ2UWl4RFFVRkRPMUZCUTNoRkxFMUJRVTBzYVVKQlFXbENMRWRCUVdsQ0xFbEJRVWtzYVVWQlFXbENMRU5CUTNwRUxFbEJRVWtzUTBGQlF5eHZRa0ZCYjBJc1JVRkRla0lzWlVGQlpTeEZRVU5tTEVsQlFVa3NRMEZCUXl4clFrRkJhMElzUTBGRE1VSXNRMEZCUXp0UlFVVkdMR3RDUVVGclFpeERRVUZETEd0Q1FVRnJRanRaUVVOcVF5eHJRa0ZCYTBJc1EwRkJReXhyUWtGQmEwSTdaMEpCUTNKRExHdENRVUZyUWl4RFFVRkRMSEZDUVVGeFFpeERRVUZETzFGQlF6ZERMRkZCUVZFc1EwRkJReXhsUVVGbE8xbEJRM0JDTEZGQlFWRXNRMEZCUXl4bFFVRmxMRWxCUVVrc1VVRkJVU3hEUVVGRExHdENRVUZyUWl4RFFVRkRPMUZCUlRWRUxIbEVRVUY1UkR0UlFVTjZSQ3hKUVVGSkxHdENRVUZyUWl4RFFVRkRMR3RDUVVGclFpeEZRVUZGTzFsQlEzWkRMRTFCUVUwc1QwRkJUeXhIUVVGSExFZEJRVWNzUlVGQlJUdG5Ra0ZEYWtJc2EwSkJRV3RDTEVOQlFVTXNhMEpCUVd0Q0xFVkJRVVVzUTBGQlF6dFpRVU0xUXl4RFFVRkRMRU5CUVVNN1dVRkRSaXhyUWtGQmEwSXNRMEZCUXl4blFrRkJaMElzUTBGQlF5eFBRVUZQTEVWQlFVVXNUMEZCVHl4RFFVRkRMRU5CUVVNN1dVRkRkRVFzU1VGQlNTeERRVUZETEhsQ1FVRjVRaXhEUVVGRExIRkNRVUZ4UWl4RFFVTm9SQ3hIUVVGSExFVkJRVVVzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXh0UWtGQmJVSXNRMEZCUXl4UFFVRlBMRVZCUVVVc1QwRkJUeXhEUVVGRExFTkJRMnBGTEVOQlFVTTdVMEZEVER0UlFVVkVMRTFCUVUwc2RVSkJRWFZDTEVkQlFVY3NSMEZCUnl4RlFVRkZMRU5CUTJwRExHbENRVUZwUWl4RFFVRkRMR1ZCUVdVc1JVRkJSU3hEUVVGRE8xRkJRM2hETEZGQlFWRXNRMEZCUXl4blFrRkJaMElzUTBGRGNrSXNiVUpCUVcxQ0xFVkJRMjVDTEhWQ1FVRjFRaXhGUVVOMlFpeExRVUZMTEVOQlExSXNRMEZCUXp0UlFVTkdMRkZCUVZFc1EwRkJReXhuUWtGQlowSXNRMEZEY2tJc2MwSkJRWE5DTEVWQlEzUkNMSFZDUVVGMVFpeEZRVU4yUWl4TFFVRkxMRU5CUTFJc1EwRkJRenRSUVVOR0xFbEJRVWtzUTBGQlF5eDVRa0ZCZVVJc1EwRkJReXh4UWtGQmNVSXNRMEZEYUVRc1IwRkJSeXhGUVVGRkxFTkJRVU1zVVVGQlVTeERRVUZETEcxQ1FVRnRRaXhEUVVNNVFpeHRRa0ZCYlVJc1JVRkRia0lzZFVKQlFYVkNMRVZCUTNaQ0xFdEJRVXNzUTBGRFVpeERRVU5LTEVOQlFVTTdVVUZEUml4SlFVRkpMRU5CUVVNc2VVSkJRWGxDTEVOQlFVTXNjVUpCUVhGQ0xFTkJRMmhFTEVkQlFVY3NSVUZCUlN4RFFVRkRMRkZCUVZFc1EwRkJReXh0UWtGQmJVSXNRMEZET1VJc2MwSkJRWE5DTEVWQlEzUkNMSFZDUVVGMVFpeEZRVU4yUWl4TFFVRkxMRU5CUTFJc1EwRkRTaXhEUVVGRE8xRkJSVVlzVFVGQlRTeFhRVUZYTEVkQlFVY3NRMEZCUXl4VlFVRnpRaXhGUVVGRkxFVkJRVVVzUTBGRE0wTXNhVUpCUVdsQ0xFTkJRVU1zWlVGQlpTeERRVUZETEZWQlFWVXNRMEZCUXl4RFFVRkRPMUZCUTJ4RUxFMUJRVTBzVTBGQlV5eEhRVUZITEVOQlFVTXNWVUZCYzBJc1JVRkJSU3hGUVVGRkxFTkJRM3BETEdsQ1FVRnBRaXhEUVVGRExHRkJRV0VzUTBGQlF5eFZRVUZWTEVOQlFVTXNRMEZCUXp0UlFVTm9SQ3hOUVVGTkxFOUJRVThzUjBGQlJ5eERRVUZETEZWQlFYTkNMRVZCUVVVc1JVRkJSU3hEUVVOMlF5eHBRa0ZCYVVJc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4VlFVRlZMRU5CUVVNc1EwRkJRenRSUVVOdVJDeE5RVUZOTEZWQlFWVXNSMEZCUnl4RFFVRkRMRlZCUVhOQ0xFVkJRVVVzUlVGQlJTeERRVU14UXl4cFFrRkJhVUlzUTBGQlF5eHBRa0ZCYVVJc1EwRkJReXhWUVVGVkxFTkJRVU1zUTBGQlF6dFJRVU53UkN4clFrRkJhMElzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhYUVVGWExFVkJRVVVzVjBGQlZ5eERRVUZETEVOQlFVTTdVVUZET1VRc2EwSkJRV3RDTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zVTBGQlV5eEZRVUZGTEZOQlFWTXNRMEZCUXl4RFFVRkRPMUZCUXpGRUxHdENRVUZyUWl4RFFVRkRMR2RDUVVGblFpeERRVUZETEU5QlFVOHNSVUZCUlN4UFFVRlBMRU5CUVVNc1EwRkJRenRSUVVOMFJDeHJRa0ZCYTBJc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4VlFVRlZMRVZCUVVVc1ZVRkJWU3hEUVVGRExFTkJRVU03VVVGRk5VUXNTVUZCU1N4RFFVRkRMSGxDUVVGNVFpeERRVUZETEhGQ1FVRnhRaXhEUVVOb1JDeEhRVUZITEVWQlFVVXNRMEZCUXl4clFrRkJhMElzUTBGQlF5eHRRa0ZCYlVJc1EwRkJReXhYUVVGWExFVkJRVVVzVjBGQlZ5eERRVUZETEVOQlEzcEZMRU5CUVVNN1VVRkRSaXhKUVVGSkxFTkJRVU1zZVVKQlFYbENMRU5CUVVNc2NVSkJRWEZDTEVOQlEyaEVMRWRCUVVjc1JVRkJSU3hEUVVGRExHdENRVUZyUWl4RFFVRkRMRzFDUVVGdFFpeERRVUZETEZOQlFWTXNSVUZCUlN4VFFVRlRMRU5CUVVNc1EwRkRja1VzUTBGQlF6dFJRVU5HTEVsQlFVa3NRMEZCUXl4NVFrRkJlVUlzUTBGQlF5eHhRa0ZCY1VJc1EwRkRhRVFzUjBGQlJ5eEZRVUZGTEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU1zYlVKQlFXMUNMRU5CUVVNc1QwRkJUeXhGUVVGRkxFOUJRVThzUTBGQlF5eERRVU5xUlN4RFFVRkRPMUZCUTBZc1NVRkJTU3hEUVVGRExIbENRVUY1UWl4RFFVRkRMSEZDUVVGeFFpeERRVU5vUkN4SFFVRkhMRVZCUVVVc1EwRkJReXhyUWtGQmEwSXNRMEZCUXl4dFFrRkJiVUlzUTBGQlF5eFZRVUZWTEVWQlFVVXNWVUZCVlN4RFFVRkRMRU5CUTNaRkxFTkJRVU03VVVGRFJpeEpRVUZKTEVOQlFVTXNlVUpCUVhsQ0xFTkJRVU1zY1VKQlFYRkNMRU5CUTJoRUxFZEJRVWNzUlVGQlJTeERRVUZETEdsQ1FVRnBRaXhEUVVGRExIRkNRVUZ4UWl4RlFVRkZMRU5CUTJ4RUxFTkJRVU03VVVGRFJpeEpRVUZKTEVOQlFVTXNlVUpCUVhsQ0xFTkJRVU1zY1VKQlFYRkNMRU5CUVVNc1IwRkJSeXhGUVVGRk8xbEJRM1JFTEVsQlEwa3NVVUZCVVN4RFFVRkRMR1ZCUVdVN1owSkJRM2hDTEVOQlFVTXNVVUZCVVN4RFFVRkRMR3RDUVVGclFpeExRVUZMTEd0Q1FVRnJRanR2UWtGREwwTXNVVUZCVVN4RFFVRkRMSEZDUVVGeFFpeExRVUZMTEd0Q1FVRnJRaXhEUVVGRExFVkJRelZFTzJkQ1FVTkZMRkZCUVZFc1EwRkJReXhsUVVGbExFVkJRVVVzUTBGQlF6dGhRVU01UWp0UlFVTk1MRU5CUVVNc1EwRkJReXhEUVVGRE8wbEJRMUFzUTBGQlF6dEpRVVZFT3pzN1QwRkhSenRKUVVOSUxESkNRVUV5UWl4RFFVRkRMR1ZCUVdkRE8xRkJRM2hFTEUxQlFVMHNhMEpCUVd0Q0xFZEJRM0JDTEVsQlFVa3NRMEZCUXl4dlFrRkJiMElzUTBGQlF5eHhRa0ZCY1VJc1JVRkJiMElzUTBGQlF6dFJRVU40UlN4TlFVRk5MRzFDUVVGdFFpeEhRVUZITEVsQlFVa3NjVVZCUVcxQ0xFTkJRVU1zWlVGQlpTeERRVUZETEVOQlFVTTdVVUZGY2tVc1RVRkJUU3hYUVVGWExFZEJRVWNzUTBGQlF5eFZRVUZ6UWl4RlFVRkZMRVZCUVVVc1EwRkRNME1zYlVKQlFXMUNMRU5CUVVNc2RVSkJRWFZDTEVOQlFVTXNWVUZCVlN4RFFVRkRMRU5CUVVNN1VVRkROVVFzVFVGQlRTeFhRVUZYTEVkQlFVY3NRMEZCUXl4VlFVRnpRaXhGUVVGRkxFVkJRVVVzUTBGRE0wTXNiVUpCUVcxQ0xFTkJRVU1zWlVGQlpTeERRVUZETEZWQlFWVXNRMEZCUXl4RFFVRkRPMUZCUTNCRUxFMUJRVTBzVTBGQlV5eEhRVUZITEVOQlFVTXNWVUZCYzBJc1JVRkJSU3hGUVVGRkxFTkJRM3BETEcxQ1FVRnRRaXhEUVVGRExHRkJRV0VzUTBGQlF5eFZRVUZWTEVOQlFVTXNRMEZCUXp0UlFVTnNSQ3hOUVVGTkxHRkJRV0VzUjBGQlJ5eERRVUZETEZWQlFYTkNMRVZCUVVVc1JVRkJSU3hEUVVNM1F5eHRRa0ZCYlVJc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4VlFVRlZMRU5CUVVNc1EwRkJRenRSUVVOMFJDeE5RVUZOTEU5QlFVOHNSMEZCUnl4RFFVRkRMRlZCUVhOQ0xFVkJRVVVzUlVGQlJTeERRVU4yUXl4dFFrRkJiVUlzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhWUVVGVkxFTkJRVU1zUTBGQlF6dFJRVU55UkN4TlFVRk5MRlZCUVZVc1IwRkJSeXhEUVVGRExGVkJRWE5DTEVWQlFVVXNSVUZCUlN4RFFVTXhReXh0UWtGQmJVSXNRMEZCUXl4cFFrRkJhVUlzUTBGQlF5eFZRVUZWTEVOQlFVTXNRMEZCUXp0UlFVTjBSQ3hyUWtGQmEwSXNRMEZCUXl4blFrRkJaMElzUTBGQlF5eFhRVUZYTEVWQlFVVXNWMEZCVnl4RFFVRkRMRU5CUVVNN1VVRkRPVVFzYTBKQlFXdENMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNWMEZCVnl4RlFVRkZMRmRCUVZjc1EwRkJReXhEUVVGRE8xRkJRemxFTEd0Q1FVRnJRaXhEUVVGRExHZENRVUZuUWl4RFFVRkRMRk5CUVZNc1JVRkJSU3hUUVVGVExFTkJRVU1zUTBGQlF6dFJRVU14UkN4clFrRkJhMElzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhoUVVGaExFVkJRVVVzWVVGQllTeERRVUZETEVOQlFVTTdVVUZEYkVVc2EwSkJRV3RDTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zVDBGQlR5eEZRVUZGTEU5QlFVOHNRMEZCUXl4RFFVRkRPMUZCUTNSRUxHdENRVUZyUWl4RFFVRkRMR2RDUVVGblFpeERRVUZETEZWQlFWVXNSVUZCUlN4VlFVRlZMRU5CUVVNc1EwRkJRenRSUVVVMVJDeEpRVUZKTEVOQlFVTXNlVUpCUVhsQ0xFTkJRVU1zY1VKQlFYRkNMRU5CUTJoRUxFZEJRVWNzUlVGQlJTeERRVUZETEd0Q1FVRnJRaXhEUVVGRExHMUNRVUZ0UWl4RFFVRkRMRmRCUVZjc1JVRkJSU3hYUVVGWExFTkJRVU1zUTBGRGVrVXNRMEZCUXp0UlFVTkdMRWxCUVVrc1EwRkJReXg1UWtGQmVVSXNRMEZCUXl4eFFrRkJjVUlzUTBGRGFFUXNSMEZCUnl4RlFVRkZMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNiVUpCUVcxQ0xFTkJRVU1zVjBGQlZ5eEZRVUZGTEZkQlFWY3NRMEZCUXl4RFFVTjZSU3hEUVVGRE8xRkJRMFlzU1VGQlNTeERRVUZETEhsQ1FVRjVRaXhEUVVGRExIRkNRVUZ4UWl4RFFVTm9SQ3hIUVVGSExFVkJRVVVzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXh0UWtGQmJVSXNRMEZCUXl4VFFVRlRMRVZCUVVVc1UwRkJVeXhEUVVGRExFTkJRM0pGTEVOQlFVTTdVVUZEUml4SlFVRkpMRU5CUVVNc2VVSkJRWGxDTEVOQlFVTXNjVUpCUVhGQ0xFTkJRMmhFTEVkQlFVY3NSVUZCUlN4RFFVRkRMR3RDUVVGclFpeERRVUZETEcxQ1FVRnRRaXhEUVVGRExHRkJRV0VzUlVGQlJTeGhRVUZoTEVOQlFVTXNRMEZETjBVc1EwRkJRenRSUVVOR0xFbEJRVWtzUTBGQlF5eDVRa0ZCZVVJc1EwRkJReXh4UWtGQmNVSXNRMEZEYUVRc1IwRkJSeXhGUVVGRkxFTkJRVU1zYTBKQlFXdENMRU5CUVVNc2JVSkJRVzFDTEVOQlFVTXNUMEZCVHl4RlFVRkZMRTlCUVU4c1EwRkJReXhEUVVOcVJTeERRVUZETzFGQlEwWXNTVUZCU1N4RFFVRkRMSGxDUVVGNVFpeERRVUZETEhGQ1FVRnhRaXhEUVVOb1JDeEhRVUZITEVWQlFVVXNRMEZCUXl4clFrRkJhMElzUTBGQlF5eHRRa0ZCYlVJc1EwRkJReXhWUVVGVkxFVkJRVVVzVlVGQlZTeERRVUZETEVOQlEzWkZMRU5CUVVNN1VVRkRSaXhKUVVGSkxFTkJRVU1zZVVKQlFYbENMRU5CUVVNc2NVSkJRWEZDTEVOQlEyaEVMRWRCUVVjc1JVRkJSU3hEUVVGRExHMUNRVUZ0UWl4RFFVRkRMSEZDUVVGeFFpeEZRVUZGTEVOQlEzQkVMRU5CUVVNN1NVRkRUaXhEUVVGRE8wbEJSVVE3TzA5QlJVYzdTVUZEU0N4blEwRkJaME03VVVGRE5VSXNUVUZCVFN4clFrRkJhMElzUjBGRGNFSXNTVUZCU1N4RFFVRkRMRzlDUVVGdlFpeERRVUZETEhGQ1FVRnhRaXhGUVVGdlFpeERRVUZETzFGQlJYaEZMR2RFUVVGblJEdFJRVU5vUkN4TlFVRk5MRmxCUVZrc1IwRkJSeXhEUVVGRExFdEJRV2xDTEVWQlFVVXNSVUZCUlR0WlFVTjJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEc5Q1FVRnZRaXhEUVVGRExGbEJRVmtzUlVGQlJTeEZRVUZGTzJkQ1FVTXpReXhQUVVGUE8yRkJRMVk3V1VGRFJDeHpSRUZCVlN4RFFVRkRMR2RGUVVGdlFpeEZRVUZGTEVWQlFVVXNaVUZCWlN4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRE8xbEJRM1pFTEVsQlFVa3NRMEZCUXl4alFVRmpMRVZCUVVVc1EwRkJRenRaUVVOMFFpeEpRVUZKTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zUzBGQlN5eERRVUZETEU5QlFVOHNSVUZCUlN4TFFVRkxMRU5CUVVNc1EwRkJReXhGUVVGRkxFdEJRVXNzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0UlFVTTFSQ3hEUVVGRExFTkJRVU03VVVGRlJpdzRRMEZCT0VNN1VVRkRPVU1zVFVGQlRTeFpRVUZaTEVkQlFVY3NRMEZCUXl4TFFVRnBRaXhGUVVGRkxFVkJRVVU3V1VGRGRrTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXh2UWtGQmIwSXNRMEZCUXl4WlFVRlpMRVZCUVVVc1JVRkJSVHRuUWtGRE0wTXNUMEZCVHp0aFFVTldPMWxCUTBRc2MwUkJRVlVzUTBGQlF5eG5SVUZCYjBJc1JVRkJSU3hGUVVGRkxGbEJRVmtzUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTndSQ3hKUVVGSkxFTkJRVU1zWTBGQll5eEZRVUZGTEVOQlFVTTdXVUZEZEVJc1NVRkJTU3hEUVVGRExHMUNRVUZ0UWl4RFFVRkRMRXRCUVVzc1EwRkJReXhQUVVGUExFVkJRVVVzUzBGQlN5eERRVUZETEVOQlFVTXNSVUZCUlN4TFFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRE9VUXNRMEZCUXl4RFFVRkRPMUZCUTBZc2EwSkJRV3RDTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zV1VGQldTeEZRVUZGTEZsQlFWa3NRMEZCUXl4RFFVRkRPMUZCUTJoRkxHdENRVUZyUWl4RFFVRkRMR2RDUVVGblFpeERRVUZETEZsQlFWa3NSVUZCUlN4WlFVRlpMRU5CUVVNc1EwRkJRenRSUVVWb1JTeEpRVUZKTEVOQlFVTXNlVUpCUVhsQ0xFTkJRVU1zY1VKQlFYRkNMRU5CUTJoRUxFZEJRVWNzUlVGQlJTeERRVUZETEd0Q1FVRnJRaXhEUVVGRExHMUNRVUZ0UWl4RFFVRkRMRmxCUVZrc1JVRkJSU3haUVVGWkxFTkJRVU1zUTBGRE0wVXNRMEZCUXp0UlFVTkdMRWxCUVVrc1EwRkJReXg1UWtGQmVVSXNRMEZCUXl4eFFrRkJjVUlzUTBGRGFFUXNSMEZCUnl4RlFVRkZMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNiVUpCUVcxQ0xFTkJRVU1zV1VGQldTeEZRVUZGTEZsQlFWa3NRMEZCUXl4RFFVTXpSU3hEUVVGRE8wbEJRMDRzUTBGQlF6dEpRVVZFT3pzN096dFBRVXRITzBsQlEwZ3NiVUpCUVcxQ0xFTkJRVU1zVDBGQlpTeEZRVUZGTEVOQlFWTXNSVUZCUlN4RFFVRlRPMUZCUTNKRUxFMUJRVTBzUzBGQlN5eEhRVUZITEVsQlFVa3NRMEZCUXl4dFFrRkJiVUlzUTBGQlF5dzBRa0ZCTkVJc1EwRkRMMFFzUTBGQlF5eEZRVU5FTEVOQlFVTXNRMEZEU2l4RFFVRkRPMUZCUTBZc1NVRkJTU3hQUVVGUExFZEJRVWNzZVVWQlFUaENMRVZCUVVVN1dVRkRNVU1zU1VGQlNTeERRVUZETEZkQlFWY3NRMEZCUXl4cFJVRkJjMElzUlVGQlJTeExRVUZMTEVOQlFVTXNRMEZCUXl4RlFVRkZMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dFRRVU01UkR0UlFVTkVMRWxCUVVrc1QwRkJUeXhIUVVGSExESkZRVUZuUXl4RlFVRkZPMWxCUXpWRExFbEJRVWtzUTBGQlF5eFhRVUZYTEVOQlFVTXNjMFZCUVRKQ0xFVkJRVVVzUzBGQlN5eERRVUZETEVOQlFVTXNSVUZCUlN4TFFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03VTBGRGJrVTdVVUZEUkN4SlFVRkpMRTlCUVU4c1IwRkJSeXd5UlVGQlowTXNSVUZCUlR0WlFVTTFReXhKUVVGSkxFTkJRVU1zVjBGQlZ5eERRVUZETEhORlFVRXlRaXhGUVVGRkxFdEJRVXNzUTBGQlF5eERRVUZETEVWQlFVVXNTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8xTkJRMjVGTzFGQlEwUXNTVUZCU1N4UFFVRlBMRWRCUVVjc2QwVkJRVFpDTEVWQlFVVTdXVUZEZWtNc1NVRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF5eHRSVUZCZDBJc1JVRkJSU3hMUVVGTExFTkJRVU1zUTBGQlF5eEZRVUZGTEV0QlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRUUVVOb1JUdFJRVU5FTEVsQlFVa3NUMEZCVHl4SFFVRkhMSFZGUVVFMFFpeEZRVUZGTzFsQlEzaERMRWxCUVVrc1EwRkJReXhYUVVGWExFTkJRVU1zYTBWQlFYVkNMRVZCUVVVc1MwRkJTeXhEUVVGRExFTkJRVU1zUlVGQlJTeExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1UwRkRMMFE3U1VGRFRDeERRVUZETzBsQlJVUTdPenM3TzA5QlMwYzdTVUZEU0N4cFFrRkJhVUlzUTBGQlF5eFBRVUZsTEVWQlFVVXNRMEZCVXl4RlFVRkZMRU5CUVZNN1VVRkRia1FzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4dlFrRkJiMElzUTBGQlF5eFpRVUZaTEVWQlFVVXNSVUZCUlR0WlFVTXpReXhQUVVGUE8xTkJRMVk3VVVGRFJDeE5RVUZOTEV0QlFVc3NSMEZCUnl4SlFVRkpMRU5CUVVNc2JVSkJRVzFDTEVOQlFVTXNORUpCUVRSQ0xFTkJReTlFTEVOQlFVTXNSVUZEUkN4RFFVRkRMRU5CUTBvc1EwRkJRenRSUVVOR0xFbEJRVWtzVDBGQlR5eEhRVUZITEhsRlFVRTRRaXhGUVVGRk8xbEJRekZETEVsQlFVa3NRMEZCUXl4aFFVRmhMRU5CUVVNc2FVVkJRWE5DTEVWQlFVVXNTMEZCU3l4RFFVRkRMRU5CUVVNc1JVRkJSU3hMUVVGTExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdVMEZEYUVVN1VVRkRSQ3hKUVVGSkxFOUJRVThzUjBGQlJ5d3lSVUZCWjBNc1JVRkJSVHRaUVVNMVF5eEpRVUZKTEVOQlFVTXNZVUZCWVN4RFFVRkRMSE5GUVVFeVFpeEZRVUZGTEV0QlFVc3NRMEZCUXl4RFFVRkRMRVZCUVVVc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzFOQlEzSkZPMUZCUTBRc1NVRkJTU3hQUVVGUExFZEJRVWNzTWtWQlFXZERMRVZCUVVVN1dVRkROVU1zU1VGQlNTeERRVUZETEdGQlFXRXNRMEZCUXl4elJVRkJNa0lzUlVGQlJTeExRVUZMTEVOQlFVTXNRMEZCUXl4RlFVRkZMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dFRRVU55UlR0UlFVTkVMRWxCUVVrc1QwRkJUeXhIUVVGSExIZEZRVUUyUWl4RlFVRkZPMWxCUTNwRExFbEJRVWtzUTBGQlF5eGhRVUZoTEVOQlFVTXNiVVZCUVhkQ0xFVkJRVVVzUzBGQlN5eERRVUZETEVOQlFVTXNSVUZCUlN4TFFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03VTBGRGJFVTdVVUZEUkN4SlFVRkpMRTlCUVU4c1IwRkJSeXgxUlVGQk5FSXNSVUZCUlR0WlFVTjRReXhKUVVGSkxFTkJRVU1zWVVGQllTeERRVUZETEd0RlFVRjFRaXhGUVVGRkxFdEJRVXNzUTBGQlF5eERRVUZETEVWQlFVVXNTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8xTkJRMnBGTzBsQlEwd3NRMEZCUXp0SlFVVkVPenRQUVVWSE8wbEJRMGdzWTBGQll6dFJRVU5XTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc2IwSkJRVzlDTEVOQlFVTXNXVUZCV1N4RlFVRkZMRVZCUVVVN1dVRkRNME1zVDBGQlR6dFRRVU5XTzFGQlEwUXNUVUZCVFN4clFrRkJhMElzUjBGRGNFSXNTVUZCU1N4RFFVRkRMREJDUVVFd1FpeERRVUZETEd0Q1FVRnJRaXhEUVVGRE8xRkJRM1pFTEd0Q1FVRnJRaXhEUVVGRExFZEJRVWNzUTBGQlF5eFpRVUZaTEVOQlFVTXNSVUZCUlN4RFFVRkRPMGxCUXpORExFTkJRVU03U1VGRlJEczdUMEZGUnp0SlFVTklMR05CUVdNN1VVRkRWaXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEc5Q1FVRnZRaXhEUVVGRExGbEJRVmtzUlVGQlJTeEZRVUZGTzFsQlF6TkRMRTlCUVU4N1UwRkRWanRSUVVORUxFMUJRVTBzYTBKQlFXdENMRWRCUTNCQ0xFbEJRVWtzUTBGQlF5d3dRa0ZCTUVJc1EwRkJReXhyUWtGQmEwSXNRMEZCUXp0UlFVTjJSQ3hyUWtGQmEwSXNRMEZCUXl4SFFVRkhMRU5CUVVNc1dVRkJXU3hEUVVGRExFVkJRVVVzUTBGQlF6dEpRVU16UXl4RFFVRkRPMGxCUlVRN096czdPMDlCUzBjN1NVRkRTQ3hoUVVGaExFTkJRVU1zVFVGQll5eEZRVUZGTEVOQlFWTXNSVUZCUlN4RFFVRlRPMUZCUXpsRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNiMEpCUVc5Q0xFTkJRVU1zV1VGQldTeEZRVUZGTEVWQlFVVTdXVUZETTBNc1QwRkJUenRUUVVOV08xRkJRMFFzYzBSQlFWVXNRMEZEVGl4blJVRkJiMElzUlVGQlJTeEZRVU4wUWl4blFrRkJaMElzVFVGQlRTeGhRVUZoTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWRCUVVjc1JVRkROME1zUTBGQlF5eERRVU5LTEVOQlFVTTdVVUZEUml4TlFVRk5MR3RDUVVGclFpeEhRVU53UWl4SlFVRkpMRU5CUVVNc01FSkJRVEJDTEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU03VVVGRGRrUXNhMEpCUVd0Q0xFTkJRVU1zUjBGQlJ5eERRVUZETEZkQlFWY3NRMEZCUXl4RFFVRkRMRU5CUVVNc1RVRkJUU3hGUVVGRkxFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMGxCUTNoRUxFTkJRVU03U1VGRlJEczdPenM3VDBGTFJ6dEpRVU5JTEZkQlFWY3NRMEZCUXl4TlFVRmpMRVZCUVVVc1EwRkJVeXhGUVVGRkxFTkJRVk03VVVGRE5VTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXh2UWtGQmIwSXNRMEZCUXl4WlFVRlpMRVZCUVVVc1JVRkJSVHRaUVVNelF5eFBRVUZQTzFOQlExWTdVVUZEUkN4elJFRkJWU3hEUVVOT0xHZEZRVUZ2UWl4RlFVRkZMRVZCUTNSQ0xHZENRVUZuUWl4TlFVRk5MRmRCUVZjc1EwRkJReXhMUVVGTExFTkJRVU1zUjBGQlJ5eEZRVU16UXl4RFFVRkRMRU5CUTBvc1EwRkJRenRSUVVOR0xFMUJRVTBzUzBGQlN5eEhRVUZITEVsQlFVa3NRMEZCUXl4dFFrRkJiVUlzUTBGQlF5dzBRa0ZCTkVJc1EwRkRMMFFzUTBGQlF5eEZRVU5FTEVOQlFVTXNRMEZEU2l4RFFVRkRPMUZCUTBZc1RVRkJUU3hyUWtGQmEwSXNSMEZEY0VJc1NVRkJTU3hEUVVGRExEQkNRVUV3UWl4RFFVRkRMR3RDUVVGclFpeERRVUZETzFGQlEzWkVMR3RDUVVGclFpeERRVUZETEVkQlFVY3NRMEZCUXl4VFFVRlRMRU5CUVVNc1EwRkJReXhEUVVGRExFMUJRVTBzUlVGQlJTeExRVUZMTEVOQlFVTXNRMEZCUXl4RlFVRkZMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzBsQlEyeEZMRU5CUVVNN1EwRkRTanM3T3pzN096czdPenM3T3pzN08wRkRlbGRFTEd0RVFVRnJSRHRCUVVWc1JEczdPenRIUVVsSE8wRkJRMGtzVFVGQlRTeGxRVUZsT3p0QlFVTnFRaXg1UWtGQlV5eEhRVUZITEVOQlFVTXNRMEZCUXp0QlFVTmtMSEZDUVVGTExFZEJRVWNzUlVGQlJTeERRVUZETzBGQlExZ3NkVUpCUVU4c1IwRkJSeXhGUVVGRkxFTkJRVU03UVVGRFlpeHRRa0ZCUnl4SFFVRkhMRVZCUVVVc1EwRkJRenRCUVVOVUxEQkNRVUZWTEVkQlFVY3NSMEZCUnl4RFFVRkRPMEZCUTJwQ0xEUkNRVUZaTEVkQlFVY3NSMEZCUnl4RFFVRkRPMEZCUTI1Q0xIZENRVUZSTEVkQlFVY3NSMEZCUnl4RFFVRkRPenM3T3pzN096czdPenM3T3pzN096dEJRMlF4UWl4clJFRkJhMFE3UVVGRlVqdEJRVXN3UWp0QlFVTndSVHM3UjBGRlJ6dEJRVU5KTEUxQlFVMHNaVUZCWlR0SlFWbDRRanM3T3p0UFFVbEhPMGxCUTBnc1dVRkRTU3d3UWtGQmJVUXNSVUZEYmtRc2IwSkJRV2xETEVWQlEycERMRzFDUVVGM1F6dFJRV1kxUXl4WlFVRlBMRWRCUVVjc1EwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRkxFTkJRVU1zUlVGQlJTeERRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkZMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF6dFJRVU42UXl4alFVRlRMRWRCUVVjc1NVRkJTU3hIUVVGSExFVkJRVVVzUTBGQlF6dFJRVU4wUWl4cFFrRkJXU3hIUVVGSExFZEJRVWNzUTBGQlF6dFJRVVZ1UWl4eFJVRkJjVVU3VVVGRE4wUXNPRUpCUVhsQ0xFZEJRVWNzU1VGQlNTdzBSVUZCYjBJc1JVRkJSU3hEUVVGRE8xRkJXVE5FTEVsQlFVa3NRMEZCUXl3d1FrRkJNRUlzUjBGQlJ5d3dRa0ZCTUVJc1EwRkJRenRSUVVNM1JDeEpRVUZKTEVOQlFVTXNiMEpCUVc5Q0xFZEJRVWNzYjBKQlFXOUNMRU5CUVVNN1VVRkRha1FzU1VGQlNTeERRVUZETEcxQ1FVRnRRaXhIUVVGSExHMUNRVUZ0UWl4RFFVRkRPMUZCUXk5RExFbEJRVWtzUTBGQlF5eHJRa0ZCYTBJc1IwRkJSeXh2UWtGQmIwSXNRMEZCUXl4bFFVRmxMRVZCUVVVc1EwRkJRenRSUVVOcVJTeE5RVUZOTEZsQlFWa3NSMEZCUnl4RFFVRkRMRVZCUVdNc1JVRkJSU3hGUVVGRkxFTkJRM0JETEVsQlFVa3NRMEZCUXl4WlFVRlpMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU03VVVGRE1VSXNUVUZCVFN4VlFVRlZMRWRCUVVjc1EwRkJReXhGUVVGakxFVkJRVVVzUlVGQlJTeERRVU5zUXl4SlFVRkpMRU5CUVVNc1ZVRkJWU3hEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETzFGQlEzaENMRTFCUVUwc1YwRkJWeXhIUVVGSExFTkJRVU1zUlVGQll5eEZRVUZGTEVWQlFVVXNRMEZEYmtNc1NVRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXp0UlFVTjZRaXhKUVVGSkxFTkJRVU1zYTBKQlFXdENMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNXVUZCV1N4RlFVRkZMRmxCUVZrc1JVRkJSU3hGUVVGRkxFOUJRVThzUlVGQlJTeExRVUZMTEVWQlFVVXNRMEZCUXl4RFFVRkRPMUZCUTNwR0xFbEJRVWtzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4VlFVRlZMRVZCUVVVc1ZVRkJWU3hGUVVGRkxFVkJRVVVzVDBGQlR5eEZRVUZGTEV0QlFVc3NSVUZCUlN4RFFVRkRMRU5CUVVNN1VVRkRja1lzU1VGQlNTeERRVUZETEd0Q1FVRnJRaXhEUVVGRExHZENRVUZuUWl4RFFVRkRMRmRCUVZjc1JVRkJSU3hYUVVGWExFVkJRVVVzUlVGQlJTeFBRVUZQTEVWQlFVVXNTMEZCU3l4RlFVRkZMRU5CUVVNc1EwRkJRenRSUVVOMlJpeEpRVUZKTEVOQlFVTXNlVUpCUVhsQ0xFTkJRVU1zY1VKQlFYRkNMRU5CUTJoRUxFZEJRVWNzUlVGQlJTeERRVUZETEVsQlFVa3NRMEZCUXl4clFrRkJhMElzUTBGQlF5eHRRa0ZCYlVJc1EwRkJReXhaUVVGWkxFVkJRVVVzV1VGQldTeERRVUZETEVOQlEyaEdMRU5CUVVNN1VVRkRSaXhKUVVGSkxFTkJRVU1zZVVKQlFYbENMRU5CUVVNc2NVSkJRWEZDTEVOQlEyaEVMRWRCUVVjc1JVRkJSU3hEUVVGRExFbEJRVWtzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXh0UWtGQmJVSXNRMEZCUXl4VlFVRlZMRVZCUVVVc1ZVRkJWU3hEUVVGRExFTkJRelZGTEVOQlFVTTdVVUZEUml4SlFVRkpMRU5CUVVNc2VVSkJRWGxDTEVOQlFVTXNjVUpCUVhGQ0xFTkJRMmhFTEVkQlFVY3NSVUZCUlN4RFFVRkRMRWxCUVVrc1EwRkJReXhyUWtGQmEwSXNRMEZCUXl4dFFrRkJiVUlzUTBGQlF5eFhRVUZYTEVWQlFVVXNWMEZCVnl4RFFVRkRMRU5CUXpsRkxFTkJRVU03VVVGRFJpeHpSRUZCVlN4RFFVRkRMR2RGUVVGdlFpeEZRVUZGTEVWQlFVVXNlVUpCUVhsQ0xFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTTdVVUZGYWtVc09FSkJRVGhDTzFGQlF6bENMRTFCUVUwc2EwSkJRV3RDTEVkQlFVY3NRMEZCUXl4TFFVRnBRaXhGUVVGRkxFVkJRVVU3V1VGRE4wTXNTMEZCU3l4RFFVRkRMR05CUVdNc1JVRkJSU3hEUVVGRE8xRkJRek5DTEVOQlFVTXNRMEZCUXp0UlFVTkdMRkZCUVZFc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4WFFVRlhMRVZCUVVVc2EwSkJRV3RDTEVWQlFVVXNSVUZCUlN4UFFVRlBMRVZCUVVVc1MwRkJTeXhGUVVGRkxFTkJRVU1zUTBGQlF6dFJRVU12UlN4SlFVRkpMRU5CUVVNc2VVSkJRWGxDTEVOQlFVTXNjVUpCUVhGQ0xFTkJRMmhFTEVkQlFVY3NSVUZCUlN4RFFVRkRMRkZCUVZFc1EwRkJReXh0UWtGQmJVSXNRMEZCUXl4WFFVRlhMRVZCUVVVc2EwSkJRV3RDTEVOQlFVTXNRMEZEZEVVc1EwRkJRenRKUVVOT0xFTkJRVU03U1VGRlJEczdUMEZGUnp0SlFVTklMSEZDUVVGeFFqdFJRVU5xUWl4SlFVRkpMRU5CUVVNc2VVSkJRWGxDTEVOQlFVTXNZVUZCWVN4RlFVRkZMRU5CUVVNN1NVRkRia1FzUTBGQlF6dEpRVVZFT3pzN1QwRkhSenRKUVVOSUxHRkJRV0VzUTBGQlF5eExRVUZaTzFGQlEzUkNMRTFCUVUwc1RVRkJUU3hIUVVGSExFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNSMEZCUnl4RlFVRkZMRU5CUVVNN1VVRkRiRU1zU1VGQlNTeE5RVUZOTEV0QlFVc3NVMEZCVXl4RlFVRkZPMWxCUTNSQ0xITkVRVUZWTEVOQlEwNHNaMFZCUVc5Q0xFVkJRVVVzUlVGRGRFSXNOa0pCUVRaQ0xFVkJRemRDTEVOQlFVTXNRMEZEU2l4RFFVRkRPMU5CUTB3N1VVRkRSQ3hKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETEVkQlFVY3NRMEZCUXl4TFFVRkxMRU5CUVVNc1ZVRkJWU3hGUVVGRkxFMUJRVTBzUTBGQlF5eERRVUZETzBsQlEycEVMRU5CUVVNN1NVRkZSRHM3TzA5QlIwYzdTVUZEU0N4WFFVRlhMRU5CUVVNc1MwRkJXVHRSUVVOd1FpeEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETEVkQlFVY3NRMEZCUXl4TFFVRkxMRU5CUVVNc1ZVRkJWU3hEUVVGRExFTkJRVU1zUTBGQlF6dFJRVU40UkN4MVNrRkJkVW83VVVGRGRrb3NTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zVlVGQlZTeERRVUZETEVWQlFVVXNRMEZCUXp0WlFVTTFRaXhQUVVGUExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTTdVVUZEYWtJc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRFNDeEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMRTFCUVUwc1EwRkJReXhMUVVGTExFTkJRVU1zVlVGQlZTeERRVUZETEVOQlFVTTdTVUZETlVNc1EwRkJRenRKUVVWRU96czdUMEZIUnp0SlFVTklMRmxCUVZrc1EwRkJReXhWUVVGelFqdFJRVU12UWl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExHOUNRVUZ2UWl4RFFVRkRMRmxCUVZrc1JVRkJSU3hGUVVGRk8xbEJRek5ETEU5QlFVODdVMEZEVmp0UlFVTkVMRXRCUVVzc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eEZRVUZGTEVOQlFVTXNSMEZCUnl4VlFVRlZMRU5CUVVNc1kwRkJZeXhEUVVGRExFMUJRVTBzUlVGQlJTeERRVUZETEVWQlFVVXNSVUZCUlR0WlFVTjJSQ3hKUVVGSkxFTkJRVU1zWVVGQllTeERRVUZETEZWQlFWVXNRMEZCUXl4alFVRmpMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dFRRVU53UkR0UlFVTkVMSE5FUVVGVkxFTkJRVU1zWjBWQlFXOUNMRVZCUVVVc1JVRkJSU3hoUVVGaExFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTTdVVUZGY2tRc1NVRkJTU3hEUVVGRExHRkJRV0VzUTBGQlF5eFpRVUZaTEVWQlFVVXNWVUZCVlN4RFFVRkRMR05CUVdNc1EwRkJReXhEUVVGRE8xRkJRelZFTEZWQlFWVXNRMEZCUXl4alFVRmpMRVZCUVVVc1EwRkJRenRKUVVOb1F5eERRVUZETzBsQlJVUTdPenRQUVVkSE8wbEJRMGdzVlVGQlZTeERRVUZETEZWQlFYTkNPMUZCUXpkQ0xFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNiMEpCUVc5Q0xFTkJRVU1zV1VGQldTeEZRVUZGTEVWQlFVVTdXVUZETTBNc1QwRkJUenRUUVVOV08xRkJRMFFzYzBSQlFWVXNRMEZCUXl4blJVRkJiMElzUlVGQlJTeEZRVUZGTEZkQlFWY3NSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJRenRSUVVOdVJDeEpRVUZKTEVOQlFVTXNZVUZCWVN4RFFVRkRMRlZCUVZVc1JVRkJSU3hWUVVGVkxFTkJRVU1zWTBGQll5eERRVUZETEVOQlFVTTdVVUZETVVRc2FVVkJRV2xGTzFGQlEycEZMRXRCUVVzc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eEZRVUZGTEVOQlFVTXNSMEZCUnl4VlFVRlZMRU5CUVVNc1kwRkJZeXhEUVVGRExFMUJRVTBzUlVGQlJTeERRVUZETEVWQlFVVXNSVUZCUlR0WlFVTjJSQ3hKUVVGSkxFTkJRVU1zVjBGQlZ5eERRVUZETEZWQlFWVXNRMEZCUXl4alFVRmpMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dFRRVU5zUkR0UlFVTkVMRlZCUVZVc1EwRkJReXhqUVVGakxFVkJRVVVzUTBGQlF6dEpRVU5vUXl4RFFVRkRPMGxCUlVRN096dFBRVWRITzBsQlEwZ3NWMEZCVnl4RFFVRkRMRlZCUVhOQ08xRkJRemxDTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc2IwSkJRVzlDTEVOQlFVTXNXVUZCV1N4RlFVRkZMRVZCUVVVN1dVRkRNME1zVDBGQlR6dFRRVU5XTzFGQlEwUXNjMFJCUVZVc1EwRkJReXhuUlVGQmIwSXNSVUZCUlN4RlFVRkZMRmxCUVZrc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF6dFJRVU53UkN4SlFVRkpMRU5CUVVNc1lVRkJZU3hEUVVGRExGZEJRVmNzUlVGQlJTeFZRVUZWTEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNN1VVRkRjRVFzVlVGQlZTeERRVUZETEdOQlFXTXNSVUZCUlN4RFFVRkRPMGxCUTJoRExFTkJRVU03U1VGRlJDeGhRVUZoTEVOQlFVTXNTVUZCV1N4RlFVRkZMRTlCUVd0Q08xRkJRekZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc2IwSkJRVzlDTEVOQlFVTXNXVUZCV1N4RlFVRkZMRVZCUVVVN1dVRkRNME1zVDBGQlR6dFRRVU5XTzFGQlEwUXNUVUZCVFN4clFrRkJhMElzUjBGRGNFSXNTVUZCU1N4RFFVRkRMRzlDUVVGdlFpeERRVUZETEhGQ1FVRnhRaXhGUVVGRkxFTkJRVU03VVVGRGRFUXNUVUZCVFN4clFrRkJhMElzUjBGRGNFSXNTVUZCU1N4RFFVRkRMREJDUVVFd1FpeERRVUZETEd0Q1FVRnJRaXhEUVVGRE8xRkJSWFpFTEV0QlFVc3NTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRkxFTkJRVU1zUjBGQlJ5eFBRVUZQTEVOQlFVTXNUVUZCVFN4RlFVRkZMRU5CUVVNc1JVRkJSU3hGUVVGRk8xbEJRM0pETEUxQlFVMHNWVUZCVlN4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRExHZEVRVUZuUkR0WlFVTjBSU3hOUVVGTkxFdEJRVXNzUjBGQlJ5eFBRVUZQTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1dVRkRla0lzVFVGQlRTeERRVUZETEVkQlFVY3NTMEZCU3l4RFFVRkRMRTlCUVU4c1IwRkJSeXhyUWtGQmEwSXNRMEZCUXl4VlFVRlZMRU5CUVVNN1dVRkRlRVFzVFVGQlRTeERRVUZETEVkQlFVY3NTMEZCU3l4RFFVRkRMRTlCUVU4c1IwRkJSeXhyUWtGQmEwSXNRMEZCUXl4VFFVRlRMRU5CUVVNN1dVRkRka1FzYzBSQlFWVXNRMEZEVGl4blJVRkJiMElzUlVGQlJTeEZRVU4wUWl4SlFVRkpMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zUjBGQlJ5eERRVUZETEV0QlFVc3NRMEZCUXl4VlFVRlZMRU5CUVVNc1MwRkJTeXhEUVVGRExFdEJRVXNzUTBGQlF5eEhRVUZITEVWQlEzWkVMRU5CUVVNc1EwRkRTaXhEUVVGRE8xbEJSVVlzVFVGQlRTeExRVUZMTEVkQlFVY3NTVUZCU1N4RFFVRkRMRzFDUVVGdFFpeERRVUZETERSQ1FVRTBRaXhEUVVNdlJDeERRVUZETEVWQlEwUXNRMEZCUXl4RFFVTktMRU5CUVVNN1dVRkRSaXhSUVVGUkxFbEJRVWtzUlVGQlJUdG5Ra0ZEVml4TFFVRkxMRmxCUVZrN2IwSkJRMklzYTBKQlFXdENMRU5CUVVNc1IwRkJSeXhEUVVGRExGbEJRVmtzUTBGQlF5eERRVUZETzNkQ1FVTnFReXhWUVVGVk8zZENRVU5XTEV0QlFVc3NRMEZCUXl4RFFVRkRPM2RDUVVOUUxFdEJRVXNzUTBGQlF5eERRVUZETzNkQ1FVTlFMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zUjBGQlJ5eERRVUZETEV0QlFVc3NRMEZCUXl4VlFVRlZMRU5CUVVNN2QwSkJRM0JETEVsQlFVa3NRMEZCUXl4WlFVRlpMRWRCUVVjc1MwRkJTeXhEUVVGRExFdEJRVXM3ZDBKQlF5OUNMRXRCUVVzc1EwRkJReXhQUVVGUExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenR4UWtGRGVFSXNRMEZCUXl4RFFVRkRPMjlDUVVOSUxFMUJRVTA3WjBKQlExWXNTMEZCU3l4VlFVRlZPMjlDUVVOWUxHdENRVUZyUWl4RFFVRkRMRWRCUVVjc1EwRkJReXhWUVVGVkxFTkJRVU1zUTBGQlF6dDNRa0ZETDBJc1ZVRkJWVHQzUWtGRFZpeExRVUZMTEVOQlFVTXNRMEZCUXp0M1FrRkRVQ3hMUVVGTExFTkJRVU1zUTBGQlF6dDNRa0ZEVUN4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRExFZEJRVWNzUTBGQlF5eExRVUZMTEVOQlFVTXNWVUZCVlN4RFFVRkRPM2RDUVVOd1F5eEpRVUZKTEVOQlFVTXNXVUZCV1N4SFFVRkhMRXRCUVVzc1EwRkJReXhMUVVGTE8zZENRVU12UWl4TFFVRkxMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN2NVSkJRM2hDTEVOQlFVTXNRMEZCUXp0dlFrRkRTQ3hOUVVGTk8yZENRVU5XTEV0QlFVc3NWMEZCVnp0dlFrRkRXaXhyUWtGQmEwSXNRMEZCUXl4SFFVRkhMRU5CUVVNc1YwRkJWeXhEUVVGRExFTkJRVU03ZDBKQlEyaERMRlZCUVZVN2QwSkJRMVlzUzBGQlN5eERRVUZETEVOQlFVTTdkMEpCUTFBc1MwRkJTeXhEUVVGRExFTkJRVU03ZDBKQlExQXNTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJReXhIUVVGSExFTkJRVU1zUzBGQlN5eERRVUZETEZWQlFWVXNRMEZCUXp0M1FrRkRjRU1zU1VGQlNTeERRVUZETEZsQlFWa3NSMEZCUnl4TFFVRkxMRU5CUVVNc1MwRkJTenQzUWtGREwwSXNTMEZCU3l4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPM0ZDUVVONFFpeERRVUZETEVOQlFVTTdiMEpCUTBnc1RVRkJUVHRoUVVOaU8xTkJRMG83U1VGRFRDeERRVUZETzBOQlEwbzdPenM3T3pzN096czdPenM3T3pzN1FVTm9Ua1FzYTBSQlFXdEVPMEZCU1VZN1FVRkZhRVE3TzBkQlJVYzdRVUZEU1N4TlFVRk5MRzFDUVVGdFFqdEpRVWsxUWpzN1QwRkZSenRKUVVOSUxGbEJRVmtzTUVKQlFXMUVPMUZCUXpORUxFbEJRVWtzUTBGQlF5d3dRa0ZCTUVJc1IwRkJSeXd3UWtGQk1FSXNRMEZCUXp0UlFVTTNSQ3hKUVVGSkxFTkJRVU1zVjBGQlZ5eEhRVUZITEVWQlFVVXNRMEZCUXp0SlFVTXhRaXhEUVVGRE8wbEJSVVFzV1VGQldTeERRVU5TTEUxQlFYRkNMRVZCUTNKQ0xFdEJRV01zUlVGRFpDeFJRVUV3UWp0UlFVVXhRaXhKUVVGSkxFMUJRVTBzUTBGQlF5eFBRVUZQTEVWQlFVVTdXVUZEYUVJc1RVRkJUU3hYUVVGWExFZEJRVWNzUzBGQlN5eERRVUZETEU5QlFVOHNRMEZCUXl4TlFVRk5MRU5CUVVNc1UwRkJVeXhGUVVGRkxGRkJRVkVzUTBGQlF5eERRVUZETzFsQlF6bEVMRWxCUVVrc1EwRkJReXhYUVVGWExFVkJRVVU3WjBKQlEyUXNUMEZCVHp0aFFVTldPMWxCUlVRc1NVRkJTU3hOUVVGTkxFZEJRVWNzUTBGQlF5eERRVUZETzFsQlEyWXNTVUZCU1N4TlFVRk5MRU5CUVVNc1VVRkJVU3hEUVVGRExGRkJRVkVzUTBGQlF5eFZRVUZWTEVOQlFVTXNSVUZCUlR0blFrRkRkRU1zVFVGQlRTeEhRVUZITEVOQlFVTXNRMEZCUXp0aFFVTmtPMmxDUVVGTkxFbEJRVWtzVFVGQlRTeERRVUZETEZGQlFWRXNRMEZCUXl4UlFVRlJMRU5CUVVNc1kwRkJZeXhEUVVGRExFVkJRVVU3WjBKQlEycEVMRTFCUVUwc1IwRkJSeXhEUVVGRExFTkJRVU03WVVGRFpEdFpRVU5FTEcxR1FVRnRSanRaUVVOdVJpeEpRVUZKTEVOQlFVTXNNRUpCUVRCQ0xFTkJRVU1zYTBKQlFXdENMRU5CUVVNc1IwRkJSeXhEUVVGRExGVkJRVlVzUTBGQlF5eERRVUZETzJkQ1FVTXZSQ3hOUVVGTk8yRkJRMVFzUTBGQlF5eERRVUZETzFsQlJVZ3NkVUpCUVhWQ08xbEJRM1pDTEVsQlFVa3NWVUZCVlN4SFFVRkhMRU5CUVVNc1EwRkJRenRaUVVOdVFpeFJRVUZSTEUxQlFVMHNRMEZCUXl4VlFVRlZMRVZCUVVVN1owSkJRM1pDTEV0QlFVc3NUVUZCVFR0dlFrRkRVQ3hWUVVGVkxFZEJRVWNzUTBGQlF5eERRVUZETzI5Q1FVTm1MRTFCUVUwN1owSkJRMVlzUzBGQlN5eFBRVUZQTzI5Q1FVTlNMRlZCUVZVc1IwRkJSeXhEUVVGRExFTkJRVU03YjBKQlEyWXNUVUZCVFR0aFFVTmlPMWxCUlVRc05FSkJRVFJDTzFsQlF6VkNMRTFCUVUwc1RVRkJUU3hIUVVGSExGZEJRVmNzUTBGQlF5eFRRVUZUTEVOQlFVTXNUVUZCVFN4RFFVRkRPMWxCUXpWRExFMUJRVTBzUjBGQlJ5eEhRVUZITEVWQlFVVXNRMEZCUXp0WlFVTm1MRXRCUVVzc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eEZRVUZGTEVOQlFVTXNSMEZCUnl4RlFVRkZMRVZCUVVVc1EwRkJReXhGUVVGRkxFVkJRVVU3WjBKQlEzcENMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU1zUjBGQlJ5eEpRVUZKTEZsQlFWa3NRMEZCUXl4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1lVRkROME03V1VGRlJDeHJRa0ZCYTBJN1dVRkRiRUlzU1VGQlNTeERRVUZETERCQ1FVRXdRaXhEUVVGRExHdENRVUZyUWl4RFFVRkRMRWRCUVVjc1EwRkJReXgxUWtGQmRVSXNRMEZCUXl4RFFVRkRPMmRDUVVNMVJTeEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVVc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hIUVVGSExFTkJRVU1zUlVGQlJTeERRVUZETzJkQ1FVTXZRaXhIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZETEVWQlFVVXNSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRkxFZEJRVWNzUTBGQlF5eERRVUZETEVOQlFVTXNSVUZCUlN4SFFVRkhMRU5CUVVNc1JVRkJSU3hEUVVGRE8yZENRVU12UWl4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVVzUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZMRWRCUVVjc1EwRkJReXhGUVVGRkxFTkJRVU1zUlVGQlJTeEhRVUZITEVOQlFVTXNSVUZCUlN4RFFVRkRPMmRDUVVOb1F5eEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVVc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEVkQlFVY3NRMEZCUXl4RlFVRkZMRU5CUVVNc1JVRkJSU3hIUVVGSExFTkJRVU1zUlVGQlJTeERRVUZETzJkQ1FVTm9ReXhWUVVGVk8yRkJRMklzUTBGQlF5eERRVUZETzFsQlJVZ3NjVU5CUVhGRE8xbEJRM0pETEVsQlFVa3NTVUZCU1N4RFFVRkRMRmRCUVZjc1EwRkJReXhWUVVGVkxFTkJRVU1zUzBGQlN5eFRRVUZUTEVWQlFVVTdaMEpCUXpWRExFbEJRVWtzUTBGQlF5eFhRVUZYTEVOQlFVTXNWVUZCVlN4RFFVRkRMRWRCUVVjN2IwSkJRek5DTEZOQlFWTXNSVUZCUlN4VFFVRlRPMjlDUVVOd1FpeFpRVUZaTEVWQlFVVXNVMEZCVXp0dlFrRkRkRU1zUlVGQlJTeEZRVUZGTEZOQlFWTTdhVUpCUTBRc1EwRkJRenRuUWtGRFJpeEpRVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkRMRlZCUVZVc1EwRkJReXhEUVVGRExGTkJRVk03YjBKQlEyeERMSGRGUVVFd1FpeERRVUZETEUxQlFVMHNRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJRenRoUVVOc1JEdFpRVVZFTEVsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVNc1ZVRkJWU3hEUVVGRExFTkJRVU1zV1VGQldUdG5Ra0ZEY2tNc2QwVkJRVEJDTEVOQlFVTXNUVUZCVFN4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRE8xbEJSUzlETEUxQlFVMHNWVUZCVlN4SFFVRkhMRWxCUVVrc1EwRkJReXhYUVVGWExFTkJRVU1zVlVGQlZTeERRVUZETEVOQlFVTTdXVUZEYUVRc1RVRkJUU3hUUVVGVExFZEJRVWNzVlVGQlZTeERRVUZETEZsQlFWa3NRMEZCUXp0WlFVTXhReXhOUVVGTkxGTkJRVk1zUjBGQlJ5eFZRVUZWTEVOQlFVTXNVMEZCVXl4RFFVRkRPMWxCUTNaRExIVkNRVUYxUWp0WlFVTjJRaXhMUVVGTExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNSVUZCUlN4RFFVRkRMRWRCUVVjc1UwRkJVeXhEUVVGRExFOUJRVThzUTBGQlF5eE5RVUZOTEVWQlFVVXNRMEZCUXl4RlFVRkZMRVZCUVVVN1owSkJReTlETEUxQlFVMHNWVUZCVlN4SFFVRkhMRk5CUVZNc1EwRkJReXhQUVVGUExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdaMEpCUTNoRExFMUJRVTBzVlVGQlZTeEhRVUZITEZOQlFWTXNRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03WjBKQlJYaERMRWxCUVVrc1ZVRkJWU3hEUVVGRExFOUJRVThzUlVGQlJUdHZRa0ZEY0VJc1VVRkJVVHR2UWtGRFVpeEpRVUZKTEVOQlFVTXNNRUpCUVRCQ0xFTkJRVU1zYTBKQlFXdENMRU5CUVVNc1IwRkJSeXhEUVVOc1JDeHBRa0ZCYVVJc1EwRkRjRUlzUTBGQlF5eERRVUZETEZWQlFWVXNSVUZCUlN4RFFVRkRMRVZCUVVVc1ZVRkJWU3hEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzJsQ1FVTnNSRHR4UWtGQlRTeEpRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRMRTlCUVU4c1NVRkJTU3hWUVVGVkxFTkJRVU1zVDBGQlR5eEZRVUZGTzI5Q1FVTnNSQ3hKUVVGSkxFTkJRVU1zTUVKQlFUQkNMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNSMEZCUnl4RFFVTnNSQ3hyUWtGQmEwSXNRMEZEY2tJc1EwRkJReXhEUVVGRExGVkJRVlVzUlVGQlJTeERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRwUWtGRGVrSTdaMEpCUlVRc1NVRkJTU3hWUVVGVkxFTkJRVU1zVDBGQlR5eEpRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRMRTlCUVU4c1JVRkJSVHR2UWtGRE0wTXNVVUZCVVR0dlFrRkRVaXhKUVVGSkxFTkJRVU1zTUVKQlFUQkNMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNSMEZCUnl4RFFVTnNSQ3hwUWtGQmFVSXNRMEZEY0VJc1EwRkJReXhEUVVGRExGVkJRVlVzUlVGQlJTeERRVUZETEVWQlFVVXNWVUZCVlN4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8ybENRVU5zUkR0eFFrRkJUU3hKUVVGSkxFTkJRVU1zVlVGQlZTeERRVUZETEU5QlFVOHNTVUZCU1N4VlFVRlZMRU5CUVVNc1QwRkJUeXhGUVVGRk8yOUNRVU5zUkN4SlFVRkpMRU5CUVVNc01FSkJRVEJDTEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU1zUjBGQlJ5eERRVU5zUkN4clFrRkJhMElzUTBGRGNrSXNRMEZCUXl4RFFVRkRMRlZCUVZVc1JVRkJSU3hEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0cFFrRkRla0k3WVVGRFNqdFpRVVZFTERSQ1FVRTBRanRaUVVNMVFpeExRVUZMTEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkJSU3hEUVVGRExFZEJRVWNzVTBGQlV5eERRVUZETEVsQlFVa3NRMEZCUXl4TlFVRk5MRVZCUVVVc1EwRkJReXhGUVVGRkxFVkJRVVU3WjBKQlF6VkRMRWxCUVVrc1EwRkJReXd3UWtGQk1FSXNRMEZCUXl4clFrRkJhMElzUTBGQlF5eEhRVUZITEVOQlEyeEVMRlZCUVZVc1EwRkRZaXhEUVVGRExFTkJRVU1zVlVGQlZTeEZRVUZGTEVOQlFVTXNSVUZCUlN4VFFVRlRMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0aFFVTjZRenRaUVVWRUxFbEJRVWtzUTBGQlF5eFhRVUZYTEVOQlFVTXNWVUZCVlN4RFFVRkRMRU5CUVVNc1UwRkJVeXhIUVVGSExGTkJRVk1zUTBGQlF6dFRRVU4wUkR0SlFVTk1MRU5CUVVNN1EwRkRTanM3T3pzN096czdPenM3T3pzN08wRkROMGhFTEd0RVFVRnJSRHRCUVVVelF5eE5RVUZOTEUxQlFVMDdTVUZIWmpzN08wOUJSMGM3U1VGRFNDeE5RVUZOTEVOQlFVTXNZVUZCWVR0UlFVTm9RaXhOUVVGTkxFdEJRVXNzUjBGQlJ5eEpRVUZKTEV0QlFVc3NSVUZCUlN4RFFVRkRPMUZCUXpGQ0xFbEJRVWtzWTBGQll5eEhRVUZITEhGRFFVRnhReXhEUVVGRE8xRkJSVE5FTEcxQ1FVRnRRanRSUVVOdVFpeEpRVUZKTEV0QlFVc3NRMEZCUXl4TFFVRkxMRVZCUVVVN1dVRkRZaXhqUVVGakxFZEJRVWNzUzBGQlN5eERRVUZETEV0QlFVc3NRMEZCUXl4UlFVRlJMRVZCUVVVc1EwRkJReXhQUVVGUExFTkJRVU1zVVVGQlVTeEZRVUZGTEVWQlFVVXNRMEZCUXl4RFFVRkRPMU5CUTJwRk8xRkJSVVFzVDBGQlR5eGpRVUZqTEVOQlFVTTdTVUZETVVJc1EwRkJRenRKUVVWRU96dFBRVVZITzBsQlEwZ3NUVUZCVFN4RFFVRkRMR3RDUVVGclFpeERRVUZETEdWQlFYVkNPMUZCUXpkRExFbEJRVWtzU1VGQlNTeERRVUZETEdWQlFXVXNTVUZCU1N4SlFVRkpMRVZCUVVVN1dVRkRPVUlzU1VGQlNTeERRVUZETEdWQlFXVXNSMEZCUnl4bFFVRmxMRU5CUVVNN1UwRkRNVU03U1VGRFRDeERRVUZETzBsQlJVUTdPenM3TzA5QlMwYzdTVUZEU0N4TlFVRk5MRU5CUVVNc1IwRkJSeXhEUVVGRExFdEJRV0VzUlVGQlJTeFBRVUZsTEVWQlFVVXNVMEZCYTBJN1VVRkRla1FzU1VGQlNTeFRRVUZUTEVkQlFVY3NTVUZCU1N4RFFVRkRMR1ZCUVdVc1JVRkJSVHRaUVVOc1F5eFBRVUZQTzFOQlExWTdVVUZGUkN4TlFVRk5MRmxCUVZrc1IwRkJSeXh2UWtGQmIwSXNUMEZCVHl4aFFVRmhMRXRCUVVzc1JVRkJSU3hEUVVGRE8xRkJRM0pGTEU5QlFVOHNRMEZCUXl4SFFVRkhMRU5CUVVNc1dVRkJXU3hEUVVGRExFTkJRVU03U1VGRE9VSXNRMEZCUXp0SlFVVkVPenM3T3p0UFFVdEhPMGxCUTBnc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eExRVUZoTEVWQlFVVXNUMEZCWlN4RlFVRkZMRk5CUVd0Q08xRkJRekZFTEVsQlFVa3NVMEZCVXl4SFFVRkhMRWxCUVVrc1EwRkJReXhsUVVGbExFVkJRVVU3V1VGRGJFTXNUMEZCVHp0VFFVTldPMUZCUlVRc1RVRkJUU3haUVVGWkxFZEJRVWNzY1VKQlFYRkNMRTlCUVU4c1JVRkJSU3hEUVVGRE8xRkJRM0JFTEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNc1dVRkJXU3hEUVVGRExFTkJRVU03U1VGREwwSXNRMEZCUXp0SlFVVkVPenM3TzA5QlNVYzdTVUZEU0N4TlFVRk5MRU5CUVVNc1MwRkJTeXhEUVVGRExFdEJRV0VzUlVGQlJTeFBRVUZsTzFGQlEzWkRMRTFCUVUwc1dVRkJXU3hIUVVGSExITkNRVUZ6UWl4UFFVRlBMR0ZCUVdFc1MwRkJTeXhGUVVGRkxFTkJRVU03VVVGRGRrVXNUMEZCVHl4RFFVRkRMRXRCUVVzc1EwRkJReXhaUVVGWkxFTkJRVU1zUTBGQlF6dEpRVU5vUXl4RFFVRkRPMGxCUlVRN096czdUMEZKUnp0SlFVTklMRTFCUVUwc1EwRkJReXhQUVVGUExFTkJRVU1zUzBGQllTeEZRVUZGTEU5QlFXVTdVVUZEZWtNc1RVRkJUU3haUVVGWkxFZEJRVWNzTWtKQlFUSkNMRXRCUVVzc1ZVRkJWU3hQUVVGUExFVkJRVVVzUTBGQlF6dFJRVU42UlN4UFFVRlBMRU5CUVVNc1NVRkJTU3hEUVVGRExGbEJRVmtzUTBGQlF5eERRVUZETzBsQlF5OUNMRU5CUVVNN08wRkJNMFZOTEhOQ1FVRmxMRWRCUVVjc1EwRkJReXhEUVVGRE96czdPenM3T3pzN096czdPenM3T3pzN096czdPenRCUTBndlFpeHJSRUZCYTBRN1FVRk5ka0k3UVVGRk1rSTdRVUZEVGp0QlFVTlZPMEZCUTJkQ08wRkJRelZDTzBGQlEwWTdRVUZGUmp0QlFVOXVReXhOUVVGTkxHVkJRV1U3U1VGamVFSTdVVUZEU1N4SlFVRkpMRU5CUVVNc2FVSkJRV2xDTEVkQlFVY3NTVUZCU1N3clJFRkJhVUlzUlVGQlJTeERRVUZETzFGQlEycEVMRWxCUVVrc1EwRkJReXhwUWtGQmFVSXNSMEZCUnl4SlFVRkpMQ3RFUVVGcFFpeEZRVUZGTEVOQlFVTTdVVUZEYWtRc1NVRkJTU3hEUVVGRExHRkJRV0VzUjBGQlJ5eEpRVUZKTEcxRlFVRnJRaXhGUVVGRkxFTkJRVU03VVVGRE9VTXNTVUZCU1N4RFFVRkRMR2RDUVVGblFpeEhRVUZITEVsQlFVa3NLMFJCUVdkQ0xFVkJRVVVzUTBGQlF6dFJRVU12UXl4SlFVRkpMRU5CUVVNc2EwSkJRV3RDTEVkQlFVY3NTVUZCU1N4cFJVRkJhMElzUlVGQlJTeERRVUZETzFGQlEyNUVMRWxCUVVrc1EwRkJReXhaUVVGWkxFZEJRVWNzU1VGQlNTeDFSRUZCV1N4RlFVRkZMRU5CUVVNN1VVRkRka01zU1VGQlNTeERRVUZETEZkQlFWY3NSMEZCUnl4SlFVRkpMSEZFUVVGWExFVkJRVVVzUTBGQlF6dFJRVU55UXl4SlFVRkpMRU5CUVVNc1RVRkJUU3hIUVVGSExFbEJRVWtzUjBGQlJ5eEZRVUZyUWl4RFFVRkRPMGxCUXpWRExFTkJRVU03U1VGRlJEczdPMDlCUjBjN1NVRkRTQ3haUVVGWkxFTkJRVU1zWTBGQk9FSTdVVUZEZGtNc1NVRkJTU3hEUVVGRExHVkJRV1VzUjBGQlJ5eEpRVUZKTEV0QlFVc3NSVUZCYVVJc1EwRkJRenRSUVVOc1JDeEpRVUZKTEVOQlFVTXNaMEpCUVdkQ0xFZEJRVWNzU1VGQlNTeExRVUZMTEVWQlFXbENMRU5CUVVNN1VVRkZia1FzWTBGQll5eERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRMRWxCUVVrc1JVRkJSU3hGUVVGRk8xbEJRelZDTEUxQlFVMHNTVUZCU1N4SFFVRnRRaXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETzFsQlJYWkRMRkZCUVZFc1NVRkJTU3hGUVVGRk8yZENRVU5XTEV0QlFVc3NaMEpCUVdkQ08yOUNRVU5xUWl4SlFVRkpMRU5CUVVNc2JVSkJRVzFDTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN2IwSkJReTlDTEUxQlFVMDdaMEpCUTFZc1MwRkJTeXhoUVVGaE8yOUNRVU5rTEUxQlFVMDdaMEpCUTFZc1MwRkJTeXhQUVVGUE8yOUNRVU5TTEVsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03YjBKQlEzWkNMRTFCUVUwN1owSkJRMVlzUzBGQlN5eGpRVUZqTzI5Q1FVTm1MRWxCUVVrc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenR2UWtGRE4wSXNUVUZCVFR0blFrRkRWaXhMUVVGTExHRkJRV0U3YjBKQlEyUXNTVUZCU1N4RFFVRkRMR2RDUVVGblFpeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMjlDUVVNMVFpeE5RVUZOTzJkQ1FVTldMRXRCUVVzc2FVSkJRV2xDTzI5Q1FVTnNRaXhKUVVGSkxFTkJRVU1zYjBKQlFXOUNMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03YjBKQlEyaERMRTFCUVUwN1owSkJRMVlzUzBGQlN5eGpRVUZqTzI5Q1FVTm1MRTFCUVUwN1owSkJRMVlzUzBGQlN5eGxRVUZsTzI5Q1FVTm9RaXhOUVVGTk8yZENRVU5XTEV0QlFVc3NZMEZCWXp0dlFrRkRaaXhOUVVGTk8yZENRVU5XTEV0QlFVc3NhVUpCUVdsQ08yOUNRVU5zUWl4TlFVRk5PMmRDUVVOV0xFdEJRVXNzYTBKQlFXdENPMjlDUVVOdVFpeEpRVUZKTEVOQlFVTXNjVUpCUVhGQ0xFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdiMEpCUTJwRExFMUJRVTA3WjBKQlExWXNTMEZCU3l4dlFrRkJiMEk3YjBKQlEzSkNMRTFCUVUwN1owSkJRMVlzUzBGQlN5eHhRa0ZCY1VJN2IwSkJRM1JDTEVsQlFVa3NRMEZCUXl4dlFrRkJiMElzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0dlFrRkRhRU1zVFVGQlRUdG5Ra0ZEVml4TFFVRkxMRTlCUVU4N2IwSkJRMUlzU1VGQlNTeERRVUZETEZkQlFWY3NRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenR2UWtGRGRrSXNUVUZCVFR0blFrRkRWaXhMUVVGTExGZEJRVmM3YjBKQlExb3NUVUZCVFR0blFrRkRWaXhMUVVGTExGRkJRVkU3YjBKQlExUXNTVUZCU1N4RFFVRkRMRmxCUVZrc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dHZRa0ZEZUVJc1RVRkJUVHRuUWtGRFZqdHZRa0ZEU1N4M1JFRkJXU3hEUVVGRExHZEZRVUZ2UWl4RlFVRkZMRVZCUVVVc2NVSkJRWEZDTEVOQlFVTXNRMEZCUXp0dlFrRkROVVFzYzBSQlFWVXNRMEZCUXl4blJVRkJiMElzUlVGQlJTeEZRVUZGTEVsQlFVa3NRMEZCUXl4RFFVRkRPMjlDUVVONlF5eE5RVUZOTzJGQlEySTdVVUZEVEN4RFFVRkRMRU5CUVVNc1EwRkJRenRKUVVOUUxFTkJRVU03U1VGRlJEczdPenRQUVVsSE8wbEJRMGdzV1VGQldTeERRVUZETEVsQlFXbENPMUZCUXpGQ0xFbEJRVWtzUTBGQlF5eFhRVUZYTEVkQlFVY3NTVUZCU1N4RFFVRkRPMGxCUXpWQ0xFTkJRVU03U1VGRlJEczdPMDlCUjBjN1NVRkRTQ3h0UWtGQmJVSXNRMEZCUXl4SlFVRjNRanRSUVVONFF5eEpRVUZKTEVOQlFVTXNZVUZCWVN4RFFVRkRMR0ZCUVdFc1IwRkJSeXhKUVVGSkxFTkJRVU1zWVVGQllTeERRVUZETzFGQlEzUkVMRWxCUVVrc1EwRkJReXhoUVVGaExFTkJRVU1zVTBGQlV5eEhRVUZITEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNN1VVRkRPVU1zU1VGQlNTeERRVUZETEdGQlFXRXNRMEZCUXl4blFrRkJaMElzUjBGQlJ5eEpRVUZKTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU03VVVGRE5VUXNTVUZCU1N4RFFVRkRMR0ZCUVdFc1EwRkJReXhwUWtGQmFVSXNSMEZCUnl4SlFVRkpMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTTdVVUZET1VRc1NVRkJTU3hEUVVGRExHRkJRV0VzUTBGQlF5eFRRVUZUTEVkQlFVY3NTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJRenRSUVVNNVF5eEpRVUZKTEVOQlFVTXNZVUZCWVN4RFFVRkRMRkZCUVZFc1IwRkJSeXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETzFGQlF6VkRMRWxCUVVrc1EwRkJReXhoUVVGaExFTkJRVU1zVVVGQlVTeEhRVUZITEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNN1VVRkROVU1zU1VGQlNTeERRVUZETEdGQlFXRXNRMEZCUXl4UlFVRlJMRWRCUVVjc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF6dFJRVU0xUXl4SlFVRkpMRU5CUVVNc1lVRkJZU3hEUVVGRExFdEJRVXNzUjBGQlJ5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRPMUZCUTNSRExFbEJRVWtzUTBGQlF5eGhRVUZoTEVOQlFVTXNiMEpCUVc5Q0xFZEJRVWNzU1VGQlNTeERRVUZETEc5Q1FVRnZRaXhEUVVGRE8wbEJRM2hGTEVOQlFVTTdTVUZGUkRzN08wOUJSMGM3U1VGRFNDeHBRa0ZCYVVJc1EwRkJReXhKUVVGelFqdFJRVU53UXl4SlFVRkpMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNZVUZCWVN4SFFVRkhMRWxCUVVrc1EwRkJReXhoUVVGaExFTkJRVU03VVVGRGVrUXNTVUZCU1N4RFFVRkRMR2RDUVVGblFpeERRVUZETEZOQlFWTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRE8xRkJRMnBFTEVsQlFVa3NRMEZCUXl4blFrRkJaMElzUTBGQlF5eHhRa0ZCY1VJN1dVRkRka01zU1VGQlNTeERRVUZETEhGQ1FVRnhRaXhEUVVGRE8xRkJReTlDTEVsQlFVa3NRMEZCUXl4blFrRkJaMElzUTBGQlF5eEZRVUZGTEVkQlFVY3NTVUZCU1N4RFFVRkRMRVZCUVVVc1EwRkJRenRSUVVOdVF5eEpRVUZKTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zUzBGQlN5eEhRVUZITEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNN1VVRkRla01zU1VGQlNTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExHZENRVUZuUWl4SFFVRkhMRWxCUVVrc1EwRkJReXhuUWtGQlowSXNRMEZCUXp0UlFVTXZSQ3hKUVVGSkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1dVRkJXU3hIUVVGSExFbEJRVWtzUTBGQlF5eFpRVUZaTEVOQlFVTTdVVUZEZGtRc1NVRkJTU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMRkZCUVZFc1IwRkJSeXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETzFGQlF5OURMRWxCUVVrc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4TFFVRkxMRWRCUVVjc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF6dFJRVU42UXl4SlFVRkpMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNVMEZCVXl4SFFVRkhMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU03U1VGRGNrUXNRMEZCUXp0SlFVVkVPenM3VDBGSFJ6dEpRVU5JTEc5Q1FVRnZRaXhEUVVGRExFbEJRVzFDTzFGQlEzQkRMRTFCUVUwc1kwRkJZeXhIUVVGSExFbEJRVWtzZVVSQlFXRXNSVUZCUlN4RFFVRkRPMUZCUXpORExHTkJRV01zUTBGQlF5eExRVUZMTEVkQlFVY3NhVUpCUVdsQ0xFTkJRVU03VVVGRGVrTXNZMEZCWXl4RFFVRkRMRTlCUVU4c1IwRkJSeXhKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETzFGQlEzUkRMR05CUVdNc1EwRkJReXhKUVVGSkxFZEJRVWNzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXp0UlFVTm9ReXhqUVVGakxFTkJRVU1zVVVGQlVTeEhRVUZITEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNN1VVRkRlRU1zWTBGQll5eERRVUZETEdGQlFXRXNSMEZCUnl4SlFVRkpMRU5CUVVNc1lVRkJZU3hEUVVGRE8xRkJRMnhFTEdOQlFXTXNRMEZCUXl4RlFVRkZMRWRCUVVjc1NVRkJTU3hEUVVGRExFVkJRVVVzUTBGQlF6dFJRVU0xUWl4SlFVRkpMRU5CUVVNc1pVRkJaU3hEUVVGRExFbEJRVWtzUTBGQlF5eGpRVUZqTEVOQlFVTXNRMEZCUXp0SlFVTTVReXhEUVVGRE8wbEJSVVE3T3p0UFFVZEhPMGxCUTBnc2NVSkJRWEZDTEVOQlFVTXNTVUZCYlVJN1VVRkRja01zVFVGQlRTeGxRVUZsTEVkQlFVY3NTVUZCU1N4NVJFRkJZU3hGUVVGRkxFTkJRVU03VVVGRE5VTXNaVUZCWlN4RFFVRkRMRXRCUVVzc1IwRkJSeXhwUWtGQmFVSXNRMEZCUXp0UlFVTXhReXhsUVVGbExFTkJRVU1zVDBGQlR5eEhRVUZITEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNN1VVRkRka01zWlVGQlpTeERRVUZETEVsQlFVa3NSMEZCUnl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRE8xRkJRMnBETEdWQlFXVXNRMEZCUXl4UlFVRlJMRWRCUVVjc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF6dFJRVU42UXl4bFFVRmxMRU5CUVVNc1JVRkJSU3hIUVVGSExFbEJRVWtzUTBGQlF5eEZRVUZGTEVOQlFVTTdVVUZETjBJc1pVRkJaU3hEUVVGRExHRkJRV0VzUjBGQlJ5eEpRVUZKTEVOQlFVTXNZVUZCWVN4RFFVRkRPMUZCUTI1RUxFbEJRVWtzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhKUVVGSkxFTkJRVU1zWlVGQlpTeERRVUZETEVOQlFVTTdTVUZEYUVRc1EwRkJRenRKUVVWRU96czdUMEZIUnp0SlFVTklMR2RDUVVGblFpeERRVUZETEVsQlFYRkNPMUZCUTJ4RExGRkJRVkVzU1VGQlNTeERRVUZETEVsQlFVa3NSVUZCUlR0WlFVTm1MRXRCUVVzc1QwRkJUenRuUWtGRFVpdzJSRUZCTmtRN1owSkJRemRFTEcxRlFVRnRSVHRuUWtGRGJrVXNjMEpCUVhOQ08yZENRVU4wUWl4SlFVRkpMRU5CUVVNc2FVSkJRV2xDTEVkQlFVY3NTVUZCYjBNc1EwRkJRenRuUWtGRk9VUXNTVUZCU1N4SlFVRkpMRU5CUVVNc1kwRkJZeXhKUVVGSkxGTkJRVk1zUlVGQlJUdHZRa0ZEYkVNc1NVRkJTU3hEUVVGRExHbENRVUZwUWl4RFFVRkRMRTlCUVU4N2QwSkJRekZDTEVOQlFVTXNRMEZCUXpzMFFrRkRSU3hEUVVGRExFbEJRVWtzUTBGQlF5eHBRa0ZCYVVJc1EwRkJReXhoUVVGaE8yZERRVU5xUXl4SlFVRkpMRU5CUVVNc1kwRkJZeXhEUVVGRExHRkJRV0VzUTBGQlF5eERRVUZET3pSQ1FVTXpReXhEUVVGRExFbEJRVWtzUTBGQlF5eHBRa0ZCYVVJc1EwRkJReXhUUVVGVE8yZERRVU0zUWl4SlFVRkpMRU5CUVVNc1kwRkJZeXhEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZETzI5Q1FVTjJReXhKUVVGSkxFTkJRVU1zYVVKQlFXbENMRU5CUVVNc1QwRkJUeXhIUVVGSExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlEzWkRMRWxCUVVrc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4UFFVRlBMRU5CUTJwRExFTkJRVU03YVVKQlEwdzdaMEpCUTBRc1NVRkJTU3hEUVVGRExHTkJRV01zY1VKQlFWRXNTVUZCU1N4RFFVRkRMR2xDUVVGcFFpeERRVUZGTEVOQlFVTTdaMEpCUTNCRUxFMUJRVTA3V1VGRFZpeExRVUZMTEU5QlFVODdaMEpCUTFJc05rUkJRVFpFTzJkQ1FVTTNSQ3h0UlVGQmJVVTdaMEpCUTI1RkxITkNRVUZ6UWp0blFrRkRkRUlzU1VGQlNTeERRVUZETEdsQ1FVRnBRaXhIUVVGSExFbEJRVzlETEVOQlFVTTdaMEpCUlRsRUxFbEJRVWtzU1VGQlNTeERRVUZETEdOQlFXTXNTVUZCU1N4VFFVRlRMRVZCUVVVN2IwSkJRMnhETEVsQlFVa3NRMEZCUXl4cFFrRkJhVUlzUTBGQlF5eFBRVUZQTzNkQ1FVTXhRaXhEUVVGRExFTkJRVU03TkVKQlEwVXNRMEZCUXl4SlFVRkpMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTXNZVUZCWVR0blEwRkRha01zU1VGQlNTeERRVUZETEdOQlFXTXNRMEZCUXl4aFFVRmhMRU5CUVVNc1EwRkJRenMwUWtGRE0wTXNRMEZCUXl4SlFVRkpMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTXNVMEZCVXp0blEwRkROMElzU1VGQlNTeERRVUZETEdOQlFXTXNRMEZCUXl4VFFVRlRMRU5CUVVNc1EwRkJRenR2UWtGRGRrTXNTVUZCU1N4RFFVRkRMR2xDUVVGcFFpeERRVUZETEU5QlFVOHNSMEZCUnl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVOMlF5eEpRVUZKTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zVDBGQlR5eERRVU5xUXl4RFFVRkRPMmxDUVVOTU8yZENRVU5FTEVsQlFVa3NRMEZCUXl4alFVRmpMSEZDUVVGUkxFbEJRVWtzUTBGQlF5eHBRa0ZCYVVJc1EwRkJSU3hEUVVGRE8yZENRVU53UkN4TlFVRk5PMWxCUTFZN1owSkJRMGtzYzBSQlFWVXNRMEZCUXl4blJVRkJiMElzUlVGQlJTeEZRVUZGTEhGQ1FVRnhRaXhEUVVGRExFTkJRVU03WjBKQlF6RkVMRTFCUVUwN1UwRkRZanRKUVVOTUxFTkJRVU03U1VGRlJEczdPMDlCUjBjN1NVRkRTQ3h2UWtGQmIwSXNRMEZCUXl4SlFVRnpRanRSUVVOMlF5eFJRVUZSTEVsQlFVa3NRMEZCUXl4SlFVRkpMRVZCUVVVN1dVRkRaaXhMUVVGTExFOUJRVTg3WjBKQlExSXNTVUZCU1N4RFFVRkRMR3RDUVVGclFpeERRVUZETEZOQlFWTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRE8yZENRVU51UkN4SlFVRkpMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNSVUZCUlN4SFFVRkhMRWxCUVVrc1EwRkJReXhGUVVGRkxFTkJRVU03WjBKQlEzSkRMRWxCUVVrc1EwRkJReXhyUWtGQmEwSXNRMEZCUXl4UFFVRlBMRWRCUVVjc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF6dG5Ra0ZETDBNc1NVRkJTU3hEUVVGRExHdENRVUZyUWl4RFFVRkRMRmRCUVZjc1IwRkJSeXhKUVVGSkxFTkJRVU1zVjBGQlZ5eERRVUZETzJkQ1FVTjJSQ3hKUVVGSkxFTkJRVU1zYTBKQlFXdENMRU5CUVVNc1pVRkJaU3hIUVVGSExFbEJRVWtzUTBGQlF5eGxRVUZsTEVOQlFVTTdaMEpCUXk5RUxFbEJRVWtzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhUUVVGVExFZEJRVWNzU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXp0blFrRkRia1FzVFVGQlRUdFpRVU5XTEV0QlFVc3NUMEZCVHp0blFrRkRVaXhOUVVGTk8xbEJSVlk3WjBKQlEwa3NUVUZCVFR0VFFVTmlPMGxCUTB3c1EwRkJRenRKUVVWRU96czdUMEZIUnp0SlFVTklMRmRCUVZjc1EwRkJReXhKUVVGMVFqdFJRVU12UWl4eFJFRkJjVVE3VVVGRGNrUXNTVUZEU1N4SlFVRkpMRU5CUVVNc1NVRkJTU3hMUVVGTExFOUJRVTg3V1VGRGNrSXNRMEZCUXl4SlFVRkpMRU5CUVVNc1pVRkJaU3hMUVVGTExHRkJRV0VzU1VGQlNTeEpRVUZKTEVOQlFVTXNTVUZCU1N4TFFVRkxMRTlCUVU4c1EwRkJReXhGUVVOdVJUdFpRVU5GTEVsQlFVa3NRMEZCUXl4cFFrRkJhVUlzUTBGQlF5eGhRVUZoTEVkQlFVY3NTVUZCU1N4RFFVRkRMR0ZCUVdFc1EwRkJRenRaUVVNeFJDeEpRVUZKTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zWTBGQll5eEhRVUZITEVsQlFVa3NRMEZCUXl4alFVRmpMRU5CUVVNN1dVRkROVVFzU1VGQlNTeERRVUZETEdsQ1FVRnBRaXhEUVVGRExGZEJRVmNzUjBGQlJ5eEpRVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkRPMWxCUTNSRUxFbEJRVWtzUTBGQlF5eHBRa0ZCYVVJc1EwRkJReXhWUVVGVkxFZEJRVWNzU1VGQlNTeERRVUZETEZWQlFWVXNRMEZCUXp0VFFVTjJSRHRKUVVOTUxFTkJRVU03U1VGRlJDeFhRVUZYTEVOQlFVTXNTVUZCWjBJN1VVRkRlRUlzVFVGQlRTeFBRVUZQTEVkQlFVY3NTVUZCU1N4RFFVRkRMRVZCUVVVc1EwRkJRenRSUVVONFFpeE5RVUZOTEZOQlFWTXNSMEZCUnl4SFFVRkhMRWxCUVVrc1EwRkJReXhSUVVGUk8yRkJRemRDTEU5QlFVOHNRMEZCUXl4UlFVRlJMRVZCUVVVc1JVRkJSU3hEUVVGRE8yRkJRM0pDTEU5QlFVOHNRMEZCUXl4UlFVRlJMRVZCUVVVc1JVRkJSU3hEUVVGRExFZEJRM1JDTEVsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVNc1EwRkJReXhEUVVGRExFbEJRVWtzU1VGQlNTeERRVUZETEZkQlFWY3NSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVOb1JDeEZRVUZGTEVOQlFVTTdVVUZEU0N4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExFZEJRVWNzUTBGQlF5eFBRVUZQTEVWQlFVVXNVMEZCVXl4RFFVRkRMRU5CUVVNN1NVRkRlRU1zUTBGQlF6dEpRVVZFTEhWQ1FVRjFRaXhEUVVOdVFpeGpRVUZ6UWl4RlFVTjBRaXhsUVVFclFpeEZRVU12UWl4cFFrRkJlVUk3VVVGRmVrSXNUVUZCVFN4VFFVRlRMRWRCUVVjc1NVRkJTU3hEUVVGRExFZEJRVWNzUlVGQlJTeEhRVUZITEdOQlFXTXNRMEZCUXp0UlFVTTVReXhKUVVGSkxFTkJRVU1zV1VGQldTeERRVUZETEU5QlFVOHNSMEZCUnl4SlFVRkpMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU03WVVGRE1VTXNWMEZCVnl4RlFVRkZPMkZCUTJJc1RVRkJUU3hEUVVGRExFVkJRVVVzUlVGQlJTeERRVUZETEVOQlFVTTdZVUZEWWl4UlFVRlJMRVZCUVVVc1EwRkJRenRSUVVWb1FpeE5RVUZOTEcxQ1FVRnRRaXhIUVVOeVFpeGxRVUZsTEV0QlFVc3NTVUZCU1R0WlFVTndRaXhEUVVGRExFTkJRVU1zWTBGQll6dFpRVU5vUWl4RFFVRkRMRU5CUVVNc1pVRkJaVHRuUWtGRGFrSXNRMEZCUXl4RFFVRkRMRTFCUVUwN1owSkJRMUlzUTBGQlF5eERRVUZETEU5QlFVOHNRMEZCUXp0UlFVTnNRaXhKUVVGSkxFTkJRVU1zV1VGQldTeERRVUZETEcxQ1FVRnRRaXhIUVVGSExHMUNRVUZ0UWl4RFFVRkRPMUZCUlRWRUxFbEJRVWtzUTBGQlF5eFpRVUZaTEVOQlFVTXNhVUpCUVdsQ0xFZEJRVWNzYVVKQlFXbENMRU5CUVVNN1NVRkROVVFzUTBGQlF6dEpRVVZFT3pzN1QwRkhSenRKUVVOSUxGRkJRVkVzUTBGQlF5eExRVUZqTzFGQlEyNUNMRTlCUVU4c1QwRkJUeXhMUVVGTExFdEJRVXNzVVVGQlVTeEpRVUZKTEZGQlFWRXNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRenRKUVVONFJDeERRVUZETzBOQlEwbzdPenM3T3pzN096czdPenM3T3p0QlEzUlVSQ3hyUkVGQmEwUTdRVUZGYkVRN08wZEJSVWM3UVVGRFNTeE5RVUZOTEd0Q1FVRnJRanREUVZjNVFqczdPenM3T3pzN096czdPenM3TzBGRGFFSkVMR3RFUVVGclJEdEJRVVZzUkRzN1IwRkZSenRCUVVOSkxFMUJRVTBzWVVGQllUdERRVTk2UWpzN096czdPenM3T3pzN096czdPMEZEV2tRc2EwUkJRV3RFTzBGQlJXeEVPenRIUVVWSE8wRkJRMGtzVFVGQlRTeG5Ra0ZCWjBJN1EwRlhOVUk3T3pzN096czdPenM3T3pzN096czdPMEZEYUVKRUxHdEVRVUZyUkR0QlFVVnNSRHM3UjBGRlJ6dEJRVU5KTEUxQlFVMHNhVUpCUVdsQ08wTkJiME0zUWp0QlFVVkVPenRIUVVWSE8wRkJRMGtzVFVGQlRTeHBRa0ZCYVVJN1EwRXlRemRDTzBGQlJVUTdPMGRCUlVjN1FVRkRTU3hOUVVGTkxHVkJRV1U3UTBFeVJETkNPenM3T3pzN096czdPenM3T3pzN08wRkRla3BFTEd0RVFVRnJSRHRCUVVWc1JEczdSMEZGUnp0QlFVTkpMRTFCUVUwc2EwSkJRV3RDTzBOQlR6bENPMEZCUlVRN08wZEJSVWM3UVVGRFNTeE5RVUZOTEdkQ1FVRm5RanREUVZFMVFqczdPenM3T3pzN096czdPenM3T3pzN096dEJRM3BDUkN4clJFRkJhMFE3T3pzN096czdPenM3UVVGRlVqdEJRVU41UWp0QlFVTm1PMEZCUTBrN1FVRkZlRVE3TzBkQlJVYzdRVUZEU1N4TlFVRk5MSGRDUVVGM1FqdEpRVTlxUXpzN096dFBRVWxITzBsQlEwZ3NXVUZEU1N4UFFVRjVRaXhGUVVONlFpeE5RVUZqTEVWQlEyUXNZMEZCYzBJN1VVRkZkRUlzU1VGQlNTeERRVUZETEUxQlFVMHNSMEZCUnl4TlFVRk5MRU5CUVVNN1VVRkRja0lzU1VGQlNTeERRVUZETEc5Q1FVRnZRaXhEUVVGRExFOUJRVThzUlVGQlJTeGpRVUZqTEVOQlFVTXNRMEZCUXp0SlFVTjJSQ3hEUVVGRE8wbEJSVVFzYjBKQlFXOUNMRU5CUVVNc1QwRkJlVUlzUlVGQlJTeGpRVUZ6UWp0UlFVTnNSU3hwUkVGQmFVUTdVVUZEYWtRc1NVRkJTU3hKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEdGQlFXRXNRMEZCUXl3eVJFRkJaU3hEUVVGRExFVkJRVVU3V1VGRE5VTXNUMEZCVHl4RFFVRkRMR3RDUVVGclFpeEhRVUZITEU5QlFVOHNRMEZCUXp0WlFVTnlReXh6UkVGQlZTeERRVU5PTEdkRlFVRnZRaXhGUVVGRkxFVkJRM1JDTEN0RlFVRXJSU3hEUVVOc1JpeERRVUZETzFOQlEwdzdVVUZGUkN3clEwRkJLME03VVVGREwwTXNTVUZCU1N4RFFVRkRMR05CUVdNc1IwRkJSeXhKUVVGSkxHbENRVUZwUWl4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRE8xRkJRM0pFTEVsQlFVa3NRMEZCUXl4alFVRmpMRU5CUVVNc2MwSkJRWE5DTEVkQlFVY3NRMEZCUXl4RlFVRlRMRVZCUVVVc1JVRkJSU3hEUVVOMlJDeEpRVUZKTEVOQlFVTXNkVUpCUVhWQ0xFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTTdVVUZEY2tNc1NVRkJTU3hEUVVGRExHTkJRV01zUTBGQlF5d3dRa0ZCTUVJc1IwRkJSeXhEUVVGRExFVkJRVk1zUlVGQlJTeEZRVUZGTEVOQlF6TkVMRWxCUVVrc1EwRkJReXc0UWtGQk9FSXNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJRenRSUVVNMVF5eEpRVUZKTEVOQlFVTXNZMEZCWXl4RFFVRkRMSGxDUVVGNVFpeEhRVUZITEVOQlFVTXNSVUZCVXl4RlFVRkZMRVZCUVVVc1EwRkRNVVFzU1VGQlNTeERRVUZETERaQ1FVRTJRaXhEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETzFGQlF6TkRMRWxCUVVrc1EwRkJReXhqUVVGakxFTkJRVU1zVDBGQlR5eEhRVUZITEVOQlFVTXNSVUZCYVVJc1JVRkJSU3hGUVVGRkxFTkJRMmhFTEVsQlFVa3NRMEZCUXl4aFFVRmhMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU03VVVGRE0wSXNTVUZCU1N4RFFVRkRMR05CUVdNc1EwRkJReXhqUVVGakxFZEJRVWNzUTBGQlF5eEZRVUUyUWl4RlFVRkZMRVZCUVVVc1EwRkRia1VzU1VGQlNTeERRVUZETEd0Q1FVRnJRaXhEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETzFGQlEyaERMRWxCUVVrc1EwRkJReXhqUVVGakxFTkJRVU1zWVVGQllTeEhRVUZITEVOQlFVTXNSVUZCZFVJc1JVRkJSU3hGUVVGRkxFTkJRelZFTEVsQlFVa3NRMEZCUXl4cFFrRkJhVUlzUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXp0UlFVTXZRaXhKUVVGSkxFTkJRVU1zWlVGQlpTeEhRVUZITEVsQlFVa3NOa1JCUVdVc1JVRkJSU3hEUVVGRE8xRkJRemRETEVsQlFVa3NRMEZCUXl4alFVRmpMRWRCUVVjc1kwRkJZeXhEUVVGRE8xRkJRM0pETEVsQlFVa3NRMEZCUXl4dlFrRkJiMElzUjBGQlJ5eEpRVUZKTEVOQlFVTTdTVUZEY2tNc1EwRkJRenRKUVVWRU96czdUMEZIUnp0SlFVTkhMRmRCUVZjc1EwRkJReXhaUVVFMlFpeEZRVUZGTEUxQlFXTTdPMWxCUXpORUxITkVRVUZWTEVOQlFVTXNaMFZCUVc5Q0xFVkJRVVVzUlVGQlJTeGpRVUZqTEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNN1dVRkZkRVFzVFVGQlRTeHhRa0ZCY1VJc1IwRkRka0lzVVVGQlVTeERRVUZETEZGQlFWRXNTMEZCU3l4WFFVRlhPMmRDUVVOcVF5eFJRVUZSTEVOQlFVTXNVVUZCVVN4TFFVRkxMRmRCUVZjc1EwRkJRenRaUVVOMFF5eE5RVUZOTEdsQ1FVRnBRaXhIUVVGSExGRkJRVkVzUTBGQlF5eFJRVUZSTEV0QlFVc3NVVUZCVVN4RFFVRkRPMWxCUTNwRUxFbEJRVWtzVFVGQlRTeEhRVUZITEUxQlFVMHNRMEZCUXl4aFFVRmhMRU5CUVVNc2QwUkJRVmtzUTBGQlF5eERRVUZETzFsQlEyaEVMRWxCUVVrc1RVRkJUU3hKUVVGSkxFTkJRVU1zUTBGQlF5eHhRa0ZCY1VJc1NVRkJTU3hwUWtGQmFVSXNRMEZCUXl4RlFVRkZPMmRDUVVONlJDeE5RVUZOTEVkQlFVY3NTMEZCU3l4RFFVRkRPMmRDUVVObUxIZEVRVUZaTEVOQlExSXNaMFZCUVc5Q0xFVkJRVVVzUlVGRGRFSXNORWRCUVRSSExFTkJReTlITEVOQlFVTTdaMEpCUTBZc2QwUkJRVmtzUTBGRFVpeG5SVUZCYjBJc1JVRkJSU3hGUVVOMFFpdzRTVUZCT0Vrc1EwRkRha29zUTBGQlF6dGhRVU5NTzFsQlJVUXNTVUZCU1N4RFFVRkRMSE5DUVVGelFpeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRMRTlCUVU4c1EwRkJReXhIUVVGSExFVkJRVVU3TzJkQ1FVTTNReXhWUVVGSkxFTkJRVU1zWTBGQll5d3dRMEZEWWl4WFFVRlhMRU5CUVVNc1dVRkJXU3hGUVVONlFpeEpRVUZKTEVOQlFVTXNRMEZCUXl4TFFVRm5ReXhGUVVGRkxFVkJRVVU3TzI5Q1FVTjJReXhKUVVGSkxFTkJRVU1zZVVKQlFYbENMRVZCUVVVc1EwRkJRenR2UWtGRGFrTXNTMEZCU3l4RFFVRkRMRWRCUVVjc1IwRkJSeXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEV0QlFVc3NRMEZCUXl4SFFVRkhMRVZCUVVVc1RVRkJUU3hEUVVGRExFTkJRVU03YjBKQlF6ZERMRlZCUVVrc1EwRkJReXhqUVVGakxEQkRRVUZGTEcxQ1FVRnRRaXhEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETzI5Q1FVTm9SQ3hKUVVGSkxFTkJRVU1zYVVKQlFXbENMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU03WjBKQlEyeERMRU5CUVVNc1JVRkRRU3hMUVVGTExFTkJRVU1zUjBGQlJ5eEZRVUZGTzI5Q1FVTlNMRWxCUVVrc1EwRkJReXd5UWtGQk1rSXNSVUZCUlN4RFFVRkRPMmRDUVVOMlF5eERRVUZETEVOQlFVTXNRMEZCUXp0WlFVTllMRU5CUVVNc1EwRkJReXhEUVVGRE8xRkJRMUFzUTBGQlF6dExRVUZCTzBsQlJVUTdPMDlCUlVjN1NVRkRSeXhaUVVGWkxFTkJRVU1zUzBGQlowTXNSVUZCUlN4TlFVRmpPenM3V1VGREwwUXNjMFJCUVZVc1EwRkJReXhuUlVGQmIwSXNSVUZCUlN4RlFVRkZMR1ZCUVdVc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF6dFpRVVYyUkN4VlFVRkpMRU5CUVVNc1kwRkJZeXd3UTBGQlJTeHZRa0ZCYjBJc1EwRkJReXhMUVVGTExFVkJRVVVzU1VGQlNTeERRVUZETEVkQlFVY3NSVUZCUlR0blFrRkRka1FzVFVGQlRTeHhRa0ZCY1VJc1IwRkRka0lzVVVGQlVTeERRVUZETEZGQlFWRXNTMEZCU3l4WFFVRlhPMjlDUVVOcVF5eFJRVUZSTEVOQlFVTXNVVUZCVVN4TFFVRkxMRmRCUVZjc1EwRkJRenRuUWtGRGRFTXNUVUZCVFN4cFFrRkJhVUlzUjBGQlJ5eFJRVUZSTEVOQlFVTXNVVUZCVVN4TFFVRkxMRkZCUVZFc1EwRkJRenRuUWtGRGVrUXNTVUZCU1N4TlFVRk5MRWRCUVVjc1RVRkJUU3hEUVVGRExHRkJRV0VzUTBGQlF5eDNSRUZCV1N4RFFVRkRMRU5CUVVNN1owSkJRMmhFTEVsQlFVa3NUVUZCVFN4SlFVRkpMRU5CUVVNc1EwRkJReXh4UWtGQmNVSXNTVUZCU1N4cFFrRkJhVUlzUTBGQlF5eEZRVUZGTzI5Q1FVTjZSQ3hOUVVGTkxFZEJRVWNzUzBGQlN5eERRVUZETzI5Q1FVTm1MSGRFUVVGWkxFTkJRMUlzWjBWQlFXOUNMRVZCUVVVc1JVRkRkRUlzTkVkQlFUUkhMRU5CUXk5SExFTkJRVU03YjBKQlEwWXNkMFJCUVZrc1EwRkRVaXhuUlVGQmIwSXNSVUZCUlN4RlFVTjBRaXc0U1VGQk9Fa3NRMEZEYWtvc1EwRkJRenRwUWtGRFREdG5Ra0ZGUkN4SlFVRkpMRU5CUVVNc2MwSkJRWE5DTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNc1QwRkJUeXhEUVVGRExFZEJRVWNzUlVGQlJUczdiMEpCUXpkRExGVkJRVWtzUTBGQlF5eGpRVUZqTERCRFFVTmlMRmxCUVZrc1IwRkRZaXhKUVVGSkxFTkJRVU1zUTBGQlF5eE5RVUZwUXl4RlFVRkZMRVZCUVVVN08zZENRVU40UXl4TlFVRk5MRU5CUVVNc1IwRkJSeXhIUVVGSExFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNUVUZCVFN4RFFVRkRMRWRCUVVjc1JVRkJSU3hOUVVGTkxFTkJRVU1zUTBGQlF6dDNRa0ZETDBNc1QwRkJUeXhWUVVGSkxFTkJRVU1zWTBGQll5d3dRMEZCUlN4dFFrRkJiVUlzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXp0dlFrRkROVVFzUTBGQlF5eEZRVU5CTEVsQlFVa3NRMEZCUXl4SFFVRkhMRVZCUVVVN08zZENRVU5RTEVsQlFVa3NRMEZCUXl4clFrRkJhMElzUTBGRGJrSXNWVUZCU1N4RFFVRkRMR05CUVdNc01FTkJRVVVzZFVKQlFYVkNMRU5CUXk5RExFTkJRVU03YjBKQlEwNHNRMEZCUXl4RlFVTkJMRXRCUVVzc1EwRkJReXhIUVVGSExFVkJRVVU3ZDBKQlExSXNkMFJCUVZrc1EwRkRVaXhuUlVGQmIwSXNSVUZCUlN4RlFVTjBRaXgxUWtGQmRVSXNRMEZETVVJc1EwRkJRenR2UWtGRFRpeERRVUZETEVOQlFVTXNRMEZCUXp0blFrRkRXQ3hEUVVGRExFTkJRVU1zUTBGQlF6dFpRVU5RTEVOQlFVTXNRMEZCUXl4RFFVRkRPMWxCUlVnc01FZEJRVEJITzFsQlF6RkhMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zZFVKQlFYVkNMRU5CUXk5Q0xESkZRVUVyUWl4RlFVTXZRaXhKUVVGSkxFTkJRVU1zYjBKQlFXOUNMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTXNTMEZCU3l4RlFVRkZMRVZCUVVVc1EwRkRPVU1zU1VGQlNTeERRVUZETEUxQlFVMDdhVUpCUTA0c1owSkJRV2RDTEVOQlFVTXNNa1ZCUVN0Q0xFTkJRVU03YVVKQlEycEVMRTlCUVU4c1EwRkJReXhSUVVGUkxFTkJRVU1zUzBGQlN5eERRVUZETEVOQlF5OUNMRU5CUTBvc1EwRkJRenM3UzBGRFREdEpRVVZFT3pzN1QwRkhSenRKUVVOSUxHRkJRV0VzUTBGQlF5eE5RVUZwUXpzN1VVRkRNME1zVlVGQlNTeERRVUZETEdOQlFXTXNNRU5CUVVVc2IwSkJRVzlDTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNN1VVRkRiRVFzTUVkQlFUQkhPMUZCUXpGSExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNkVUpCUVhWQ0xFTkJReTlDTERKRlFVRXJRaXhGUVVNdlFpeEpRVUZKTEVOQlFVTXNiMEpCUVc5Q0xFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNc1MwRkJTeXhGUVVGRkxFVkJRVVVzUTBGREwwTXNTVUZCU1N4RFFVRkRMRTFCUVUwN1lVRkRUaXhuUWtGQlowSXNRMEZCUXl3eVJVRkJLMElzUTBGQlF6dGhRVU5xUkN4UFFVRlBMRU5CUVVNc1VVRkJVU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVU12UWl4RFFVTktMRU5CUVVNN1NVRkRUaXhEUVVGRE8wbEJSVVE3TzA5QlJVYzdTVUZEU0N4aFFVRmhPenRSUVVOVUxGVkJRVWtzUTBGQlF5eGpRVUZqTERCRFFVRkZMRkZCUVZFc1EwRkJReXhKUVVGSkxFVkJRVVVzU1VGQlNTeERRVUZETEVOQlFVTXNVMEZCZVVJc1JVRkJSU3hGUVVGRk8xbEJRMjVGTEVsQlFVa3NRMEZCUXl4bFFVRmxMRU5CUVVNc1dVRkJXU3hEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZETzFsQlF6ZERMRWxCUVVrc1EwRkJReXhaUVVGWkxFTkJRVU1zU1VGQlNTeERRVUZETEdWQlFXVXNRMEZCUXl4RFFVRkRPMWxCUlhoRExEWkZRVUUyUlR0WlFVTTNSU3hKUVVGSkxFbEJRVWtzUTBGQlF5eHZRa0ZCYjBJc1JVRkJSVHRuUWtGRE0wSXNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXh4UWtGQmNVSXNRMEZETjBJc01rVkJRU3RDTEVWQlF5OUNMRWxCUVVrc1EwRkJReXhsUVVGbExFTkJRVU1zVFVGQlRTeERRVUZETEVkQlFVY3NRMEZETTBJc1NVRkJTU3hEUVVGRExHVkJRV1VzUTBGQlF5eHBRa0ZCYVVJc1EwRkJReXhQUVVGUExFTkJRMnBFTEVOQlEwb3NRMEZCUXp0aFFVTk1PMUZCUTB3c1EwRkJReXhEUVVGRExFTkJRVU03U1VGRFVDeERRVUZETzBsQlJVUTdPMDlCUlVjN1NVRkRTQ3hMUVVGTE8xRkJRMFFzU1VGQlNTeEpRVUZKTEVOQlFVTXNZMEZCWXl4RlFVRkZPMWxCUTNKQ0xFbEJRVWtzUTBGQlF5eGpRVUZqTEVOQlFVTXNTMEZCU3l4RlFVRkZMRU5CUVVNN1dVRkROVUlzU1VGQlNTeERRVUZETEdOQlFXTXNSMEZCUnl4SlFVRkpMRU5CUVVNN1UwRkRPVUk3U1VGRFRDeERRVUZETzBsQlJVUTdPenM3TzA5QlMwYzdTVUZEU0N4UlFVRlJMRU5CUVVNc1IwRkJWeXhGUVVGRkxFMUJRV1U3VVVGRGFrTXNUVUZCVFN4VFFVRlRMRWRCUVVjc1IwRkJSeXhEUVVGRE8xRkJRM1JDTEZOQlFWTXNRMEZCUXl4UFFVRlBMRU5CUTJJc2FVUkJRV2xFTEVWQlEycEVMR2xGUVVGcFJTeERRVU53UlN4RFFVRkRPMUZCUlVZc1NVRkJTU3hSUVVGUkxFZEJRVWNzUlVGQlJTeERRVUZETzFGQlJXeENMRzFFUVVGdFJEdFJRVU51UkN4UlFVRlJMRWxCUVVrc01rSkJRVEpDTEVOQlFVTTdVVUZGZUVNc1NVRkJTU3hOUVVGTkxFVkJRVVU3V1VGRFVpeHBSa0ZCYVVZN1dVRkRha1lzVVVGQlVTeEpRVUZKTERaQ1FVRTJRaXhEUVVGRE8xTkJRemRETzFGQlJVUXNjVVZCUVhGRk8xRkJRM0pGTEZGQlFWRXNTVUZCU1N4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExHRkJRV0VzUTBGQlF5eG5SVUZCYjBJc1EwRkJRenRaUVVOMlJDeERRVUZETEVOQlFVTXNWMEZCVnp0WlFVTmlMRU5CUVVNc1EwRkJReXhYUVVGWExFTkJRVU03VVVGRmJFSXNlVVJCUVhsRU8xRkJRM3BFTEZGQlFWRXNTVUZCU1N4blFrRkJaMElzUTBGQlF6dFJRVVUzUWl4blIwRkJaMGM3VVVGRGFFY3NVMEZCVXl4RFFVRkRMRTlCUVU4c1EwRkJReXhuUWtGQlowSXNSVUZCUlN4UlFVRlJMRU5CUVVNc1EwRkJRenRSUVVVNVF5eFBRVUZQTEZOQlFWTXNRMEZCUXp0SlFVTnlRaXhEUVVGRE8wbEJSVVE3T3p0UFFVZEhPMGxCUTBnc1YwRkJWeXhEUVVGRExGbEJRVFpDT3p0UlFVTnlReXh6UkVGQlZTeERRVUZETEdkRlFVRnZRaXhGUVVGRkxFVkJRVVVzTkVKQlFUUkNMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRmNFVXNjMFJCUVhORU8xRkJRM1JFTEVsQlFVa3NTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhoUVVGaExFTkJRVU1zTWtSQlFXVXNRMEZCUXl4RlFVRkZPMWxCUXpWRExIRkdRVUZ4Ump0WlFVTnlSaXhKUVVGSkxGbEJRVmtzUTBGQlF5eFRRVUZUTEVOQlFVTXNUMEZCVHl4RFFVRkRMRTlCUVU4c1EwRkJReXhIUVVGSExFTkJRVU1zUlVGQlJUdG5Ra0ZETjBNc2RVUkJRVmNzUTBGRFVDeG5SVUZCYjBJc1JVRkJSU3hGUVVOMFFpdzJSRUZCTmtRc1dVRkJXU3hEUVVGRExFbEJRVWtzWjBKQlFXZENMRmxCUVZrc1EwRkJReXhSUVVGUkxHTkJRV01zV1VGQldTeERRVUZETEU5QlFVOHNWMEZCVnl4WlFVRlpMRU5CUVVNc1NVRkJTU3hKUVVGSkxFVkJRM0pNTEVOQlFVTXNRMEZEU2l4RFFVRkRPMmRDUVVOR0xFOUJRVTg3WVVGRFZqdFRRVU5LTzFGQlJVUXNWVUZCU1N4RFFVRkRMR05CUVdNc01FTkJRVVVzWlVGQlpTeERRVUZETEZsQlFWa3NRMEZCUXl4RFFVRkRPMGxCUTNaRUxFTkJRVU03U1VGRlJEczdPMDlCUjBjN1NVRkRTQ3gxUWtGQmRVSXNRMEZCUXl4TFFVRlpPMUZCUTJoRExITkVRVUZWTEVOQlEwNHNaMFZCUVc5Q0xFVkJRVVVzUlVGRGRFSXNNRUpCUVRCQ0xFZEJRVWNzUzBGQlN5eEZRVU5zUXl4RFFVRkRMRU5CUTBvc1EwRkJRenRKUVVOT0xFTkJRVU03U1VGRlJEczdPMDlCUjBjN1NVRkRTQ3c0UWtGQk9FSXNRMEZCUXl4TFFVRlpPMUZCUTNaRExITkVRVUZWTEVOQlEwNHNaMFZCUVc5Q0xFVkJRVVVzUlVGRGRFSXNLMEpCUVN0Q0xFZEJRVWNzUzBGQlN5eEZRVU4yUXl4RFFVRkRMRU5CUTBvc1EwRkJRenRSUVVOR0xFbEJRVWtzUTBGQlF5d3dRa0ZCTUVJc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF6dEpRVU16UXl4RFFVRkRPMGxCUlVRN096dFBRVWRITzBsQlEwZ3NOa0pCUVRaQ0xFTkJRVU1zUzBGQldUdFJRVU4wUXl4elJFRkJWU3hEUVVOT0xHZEZRVUZ2UWl4RlFVRkZMRVZCUTNSQ0xEaENRVUU0UWl4SFFVRkhMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zUzBGQlN5eERRVUZETEVWQlEzUkVMRU5CUVVNc1EwRkRTaXhEUVVGRE8wbEJRMDRzUTBGQlF6dEpRVVZFT3pzN1QwRkhSenRKUVVOSUxHRkJRV0VzUTBGQlF5eExRVUZ2UWp0UlFVTTVRaXhKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRPMGxCUTNoQ0xFTkJRVU03U1VGRlJEczdPMDlCUjBjN1NVRkRTQ3hyUWtGQmEwSXNRMEZCUXl4TFFVRm5RenRSUVVNdlF5eEpRVUZKTEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTTdTVUZEYmtNc1EwRkJRenRKUVVWRU96czdUMEZIUnp0SlFVTklMR2xDUVVGcFFpeERRVUZETEV0QlFUQkNPMUZCUTNoRExFbEJRVWtzUTBGQlF5eGhRVUZoTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNN1NVRkRPVUlzUTBGQlF6dEpRVVZFT3pzN1QwRkhSenRKUVVOSUxEWkVRVUUyUkR0SlFVTTNSQ3hQUVVGUExFTkJRVU1zVlVGQmVVSTdVVUZETjBJc2IwTkJRVzlETzBsQlEzaERMRU5CUVVNN1NVRkZSRHM3TzA5QlIwYzdTVUZEU0N3MlJFRkJOa1E3U1VGRE4wUXNNRUpCUVRCQ0xFTkJRVU1zUzBGQldUdFJRVU51UXl4dlEwRkJiME03U1VGRGVFTXNRMEZCUXp0SlFVVkVPenM3VDBGSFJ6dEpRVU5JTERaRVFVRTJSRHRKUVVNM1JDeHJRa0ZCYTBJc1EwRkJReXh6UWtGQmFVUTdVVUZEYUVVc2IwTkJRVzlETzBsQlEzaERMRU5CUVVNN1NVRkZSRHM3TzA5QlIwYzdTVUZEU0N3MlJFRkJOa1E3U1VGRE4wUXNZVUZCWVN4RFFVRkRMR2RDUVVGeFF6dFJRVU12UXl4dlEwRkJiME03U1VGRGVFTXNRMEZCUXp0SlFVVkVPenM3VDBGSFJ6dEpRVU5ITEhOQ1FVRnpRaXhEUVVGRExFMUJRV1U3T3p0WlFVTjRReXhOUVVGTkxHVkJRV1VzUjBGRGFrSXNWMEZCU1N4RFFVRkRMR05CUVdNc01FTkJRVVVzWlVGQlpTeEhRVUZITEUxQlFVMHNTVUZCUnl4RFFVRkRMRU5CUVVNN1dVRkZkRVFzTWtOQlFUSkRPMWxCUXpORExGVkJRVWtzUTBGQlF5eGpRVUZqTERCRFFVRkZMR05CUVdNc1EwRkJReXhQUVVGUExFVkJRVVVzUlVGQlJTeFRRVUZUTEVWQlFVVXNWVUZCVlN4RlFVRkZMRU5CUVVNc1EwRkJRenRaUVVWNFJTdzBRMEZCTkVNN1dVRkROVU1zU1VGQlNTeGpRVUZqTEVOQlFVTXNaVUZCWlN4SlFVRkpMRWxCUVVrc1EwRkJReXhqUVVGakxFbEJRVWtzUlVGQlJTeEZRVUZGTzJkQ1FVTTNSQ3hMUVVGTExFMUJRVTBzVjBGQlZ5eEpRVUZKTEdkQ1FVRkpMRU5CUVVNc1kwRkJZeXd3UTBGQlJTeGxRVUZsTEVWQlFVVXNiVU5CUVVrc1JVRkJSU3hGUVVGRk8yOUNRVU53UlN4SlFVTkpMRmRCUVZjN2QwSkJRMWdzVjBGQlZ5eERRVUZETEZGQlFWRTdkMEpCUTNCQ0xGZEJRVmNzUTBGQlF5eFJRVUZSTEVOQlFVTXNTMEZCU3p0M1FrRkRNVUlzVjBGQlZ5eERRVUZETEZGQlFWRXNRMEZCUXl4TFFVRkxMRU5CUVVNc1NVRkJTU3hMUVVGTExFOUJRVThzUlVGRE4wTTdkMEpCUTBVc1RVRkJUU3hwUWtGQmFVSXNSMEZCUnl4SlFVRkpMRU5CUVVNc1kwRkJZeXhEUVVGRExFdEJRVXNzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0M1FrRkRla1FzVFVGQlRTeE5RVUZOTEVkQlFVYzdORUpCUTFnN1owTkJRMGtzVVVGQlVTeEZRVU5LTEZGQlFWRXNSMEZCUnl4cFFrRkJhVUlzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4VlFVRlZPMmREUVVNNVF5eFRRVUZUTEVWQlFVVXNTMEZCU3p0blEwRkRhRUlzVjBGQlZ5eEZRVUZGTEdsQ1FVRnBRaXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEdsQ1FVRnBRanR2UTBGREwwTXNRMEZCUXl4RFFVRkRMR2xDUVVGcFFpeERRVUZETEVOQlFVTXNRMEZCUXp0dlEwRkRkRUlzUTBGQlF5eERRVUZETEVWQlFVVTdOa0pCUTFnN2VVSkJRMG9zUTBGQlF6dDNRa0ZGUml4SlFVRkpMRU5CUVVNc1RVRkJUVHMyUWtGRFRpeG5Ra0ZCWjBJc1EwRkJReXd5UlVGQkswSXNRMEZCUXpzMlFrRkRha1FzVDBGQlR5eERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRMRTFCUVUwc1JVRkJSU3hGUVVGRk96UkNRVU4yUWl4elJrRkJjMFk3TkVKQlEzUkdMRTlCUVU4c1RVRkJUU3hKUVVGSkxFbEJRVWtzUTBGQlF5eGpRVUZqTEVOQlFVTTdkMEpCUTNwRExFTkJRVU1zUTBGQlF6czJRa0ZEUkN4UFFVRlBMRU5CUVVNc1EwRkJReXhOUVVGTkxFVkJRVVVzUlVGQlJUczBRa0ZEYUVJc2JVUkJRVzFFT3pSQ1FVTnVSQ3hOUVVGTkxGRkJRVkVzUjBGQlJ5eE5RVUZOTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE96UkNRVU51UXl4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRE8yZERRVU5TTEZGQlFWRXNSVUZCUlN4UlFVRlJMRWRCUVVjc1VVRkJVU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEZWQlFWVTdaME5CUXpORExGTkJRVk1zUlVGQlJTeExRVUZMTzJkRFFVTm9RaXhYUVVGWExFVkJRVVVzVVVGQlVTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMR2xDUVVGcFFqdHZRMEZEZEVNc1EwRkJReXhEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETEVOQlFVTTdiME5CUTJJc1EwRkJReXhEUVVGRExFVkJRVVU3TmtKQlExZ3NRMEZCUXl4RFFVRkRPM2RDUVVOUUxFTkJRVU1zUTBGQlF5eERRVUZETzNkQ1FVVlFMRXRCUVVzc1RVRkJUU3hMUVVGTExFbEJRVWtzVFVGQlRTeEZRVUZGT3pSQ1FVTjRRaXhKUVVGSkxFdEJRVXNzUTBGQlF5eFhRVUZYTEV0QlFVc3NSVUZCUlN4RlFVRkZPMmREUVVNeFFpd3lSa0ZCTWtZN1owTkJRek5HTEU5QlFVOHNTMEZCU3l4RFFVRkRMRmRCUVZjc1EwRkJRenMyUWtGRE5VSTdlVUpCUTBvN2QwSkJSVVFzVjBGQlZ5eERRVUZETEcxQ1FVRnRRaXhEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETzNGQ1FVTXpRenRwUWtGRFNqdGhRVU5LTzFsQlJVUXNPRVZCUVRoRk8xbEJRemxGTEVsQlFVa3NRMEZCUXl4TlFVRk5MRVZCUVVVN1owSkJRMVFzVlVGQlNTeERRVUZETEdOQlFXTXNNRU5CUVVVc1kwRkJZeXhEUVVGRExFOUJRVThzUlVGQlJUdHZRa0ZEZWtNc1UwRkJVeXhGUVVGRkxGVkJRVlU3YVVKQlEzaENMRU5CUVVNc1EwRkJRenRoUVVOT08ybENRVUZOTzJkQ1FVTklMREpEUVVFeVF6dG5Ra0ZETTBNc1RVRkJUU3haUVVGWkxFZEJRVWNzVFVGQlRUdHZRa0ZEZGtJc1EwRkJReXhEUVVGRE8zZENRVU5KTEdWQlFXVXNSVUZCUlN4TFFVRkxPM2RDUVVOMFFpeFpRVUZaTEVWQlFVVXNRMEZCUXp0M1FrRkRaaXhuUWtGQlowSXNSVUZCUlN4TFFVRkxPM2RDUVVOMlFpeFBRVUZQTEVWQlFVVXNRMEZCUXp0M1FrRkRWaXhuUWtGQlowSXNSVUZCUlN4TFFVRkxPM2RDUVVOMlFpeFZRVUZWTEVWQlFVVXNTMEZCU3p0M1FrRkRha0lzVlVGQlZTeEZRVUZGTEVWQlFVVTdkMEpCUTJRc1RVRkJUU3hGUVVGRkxFZEJRVWM3Y1VKQlEyUTdiMEpCUTBnc1EwRkJReXhEUVVGRExFdEJRVXNzUTBGQlF6dG5Ra0ZGV2l3MlFrRkJOa0k3WjBKQlF6ZENMRTFCUVUwc1owSkJRV2RDTEVkQlFUSkNPMjlDUVVNM1F5eExRVUZMTEVWQlFVVXNTMEZCU3p0dlFrRkRXaXhMUVVGTExFVkJRVVVzV1VGQldUdHBRa0ZEZEVJc1EwRkJRenRuUWtGRlJpdzRSMEZCT0VjN1owSkJRemxITEUxQlFVMHNUVUZCVFN4SFFVRkhMRTFCUVUwc1UwRkJVeXhEUVVGRExGbEJRVmtzUTBGQlF5eFpRVUZaTEVOQlEzQkVMR2RDUVVGblFpeERRVU51UWl4RFFVRkRPMmRDUVVOR0xFbEJRVWtzVFVGQlRTeEZRVUZGTzI5Q1FVTlNMRWxCUVVrc1pVRkJaU3hGUVVGRk8zZENRVU5xUWl4TFFVRkxMRTFCUVUwc1YwRkJWeXhKUVVGSkxHZENRVUZKTEVOQlFVTXNZMEZCWXl3d1EwRkJSU3hsUVVGbExFVkJRVVVzYlVOQlFVa3NSVUZCUlN4RlFVRkZPelJDUVVOd1JTeEpRVU5KTEZkQlFWYzdaME5CUTFnc1YwRkJWeXhEUVVGRExGRkJRVkU3WjBOQlEzQkNMRmRCUVZjc1EwRkJReXhSUVVGUkxFTkJRVU1zUzBGQlN6dG5RMEZETVVJc1YwRkJWeXhEUVVGRExGRkJRVkVzUTBGQlF5eExRVUZMTEVOQlFVTXNTVUZCU1N4TFFVRkxMRTlCUVU4c1JVRkROME03WjBOQlEwVXNTMEZCU3l4TlFVRk5MRXRCUVVzc1NVRkJTU3hOUVVGTkxFTkJRVU1zVTBGQlV5eEZRVUZGTEVWQlFVVTdiME5CUTNCRExFbEJRVWtzUzBGQlN5eERRVUZETEVsQlFVa3NTVUZCU1N4TFFVRkxMRU5CUVVNc1NVRkJTU3hKUVVGSkxFOUJRVThzUlVGQlJUdDNRMEZEY2tNc1YwRkJWeXhEUVVGRExFMUJRVTBzUTBGQlF5eFpRVUZaTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNN2QwTkJRM1pETEZkQlFWY3NRMEZCUXl4VFFVRlRMRWRCUVVjc1ZVRkJWU3hEUVVGRE8zRkRRVU4wUXp0cFEwRkRTanMyUWtGRFNqdDVRa0ZEU2p0eFFrRkRTanQ1UWtGQlRUdDNRa0ZEU0N4TFFVRkxMRTFCUVUwc1MwRkJTeXhKUVVGSkxFMUJRVTBzUTBGQlF5eFRRVUZUTEVWQlFVVXNSVUZCUlRzMFFrRkRjRU1zU1VGQlNTeExRVUZMTEVOQlFVTXNTVUZCU1N4SlFVRkpMRXRCUVVzc1EwRkJReXhKUVVGSkxFbEJRVWtzVDBGQlR5eEZRVUZGTzJkRFFVTnlReXhWUVVGSkxFTkJRVU1zWTBGQll5d3dRMEZCUlN4alFVRmpMRU5CUVVNc1MwRkJTeXhGUVVGRk8yOURRVU4yUXl4VFFVRlRMRVZCUVVVc1ZVRkJWVHRwUTBGRGVFSXNRMEZCUXl4RFFVRkRPelpDUVVOT08zbENRVU5LTzNGQ1FVTktPMmxDUVVOS08zRkNRVUZOTzI5Q1FVTklMRlZCUVVrc1EwRkJReXhqUVVGakxEQkRRVUZGTEdOQlFXTXNRMEZCUXl4UFFVRlBMRVZCUVVVN2QwSkJRM3BETEZOQlFWTXNSVUZCUlN4VlFVRlZPM0ZDUVVONFFpeERRVUZETEVOQlFVTTdhVUpCUTA0N1lVRkRTanM3UzBGRFNqdEpRVVZFT3pzN1QwRkhSenRKUVVOSUxEWkVRVUUyUkR0SlFVTTNSQ3haUVVGWkxFTkJRVU1zUzBGQmMwSTdVVUZETDBJc2IwTkJRVzlETzBsQlEzaERMRU5CUVVNN1NVRkZSRHM3TzA5QlIwYzdTVUZEU0N3MlJFRkJOa1E3U1VGRE4wUXNhVUpCUVdsQ0xFTkJRVU1zUzBGQlowTTdVVUZET1VNc2IwTkJRVzlETzBsQlEzaERMRU5CUVVNN1NVRkZSRHM3TzA5QlIwYzdTVUZEU0N3MlJFRkJOa1E3U1VGRE4wUXNhMEpCUVd0Q0xFTkJRVU1zVFVGQmFVTTdVVUZEYUVRc2IwTkJRVzlETzBsQlEzaERMRU5CUVVNN1NVRkZSRHM3VDBGRlJ6dEpRVU5JTEhsQ1FVRjVRanRSUVVOeVFpeHZRMEZCYjBNN1NVRkRlRU1zUTBGQlF6dEpRVVZFT3p0UFFVVkhPMGxCUTBnc01rSkJRVEpDTzFGQlEzWkNMRzlEUVVGdlF6dEpRVU40UXl4RFFVRkRPMGxCUlVRc2IwSkJRVzlDTEVOQlEyaENMSEZDUVVGblJEdFJRVVZvUkN4eFJFRkJjVVE3VVVGRGNrUXNTVUZCU1N4RFFVRkRMR05CUVdNc1EwRkJReXhsUVVGbE8xbEJReTlDTEU5QlFVOHNRMEZCUXl3d1FrRkJNRUlzUTBGQlF5eERRVUZETzFGQlJYaERMRTFCUVUwc2FVSkJRV2xDTEVkQlFXdENMRVZCUVVVc1EwRkJRenRSUVVNMVF5eE5RVUZOTEZGQlFWRXNSMEZCUnl4clJFRkJZU3hEUVVGRExIRkNRVUZ4UWl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8xRkJRekZFTEhGRlFVRnhSVHRSUVVOeVJTeFJRVUZSTEVOQlFVTXNTMEZCU3l4RlFVRkZMRU5CUVVNN1VVRkRha0lzVVVGQlVTeERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRMRmxCUVZrc1JVRkJSU3hGUVVGRk8xbEJRemxDTEUxQlFVMHNSVUZCUlN4TlFVRk5MRVZCUVVVc1IwRkJSeXgxUkVGQmEwSXNRMEZCUXl4WlFVRlpMRU5CUVVNc1EwRkJRenRaUVVOd1JDeHRRMEZCYlVNN1dVRkRia01zVFVGQlRTeFBRVUZQTEVkQlFVY3NiMEpCUVc5Q0xFTkJRVU03V1VGRGNrTXNUVUZCVFN4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJTeEZRVUZGTzJkQ1FVTnFRaXhOUVVGTkxFZEJRVWNzUjBGRFRDeERRVUZETEVOQlFVTXNTVUZCU1R0dlFrRkRUaXhIUVVGSE8yOUNRVU5JTEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRExGVkJRVlVzU1VGQlNTeEZRVUZGTEVOQlFVTTdlVUpCUXpGQ0xFZEJRVWNzUTBGQlF5eERRVUZETEVOQlFVTXNSVUZCUlN4RlFVRkZMRU5CUVVNc1EwRkJReXhIUVVGSExFZEJRVWNzUjBGQlJ5eERRVUZETEVOQlFVTXNWVUZCVlN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8zbENRVU55UXl4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU03WjBKQlEyNUNMRTFCUVUwc1MwRkJTeXhIUVVGSExFOUJRVThzUTBGQlF5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNN1owSkJRMmhETEVsQlFVa3NTMEZCU3l4TFFVRkxMRWxCUVVrc1JVRkJSVHR2UWtGRGFFSXNTVUZCU1N4RFFVRkRMRU5CUVVNc1NVRkJTU3hKUVVGSkxFdEJRVXNzUlVGQlJUdDNRa0ZEYWtJc2FVVkJRV2xGTzNkQ1FVTnFSU3hEUVVGRExFTkJRVU1zVlVGQlZTeEhRVUZIT3pSQ1FVTllMRmxCUVZrc1JVRkJSU3hIUVVGSE8zbENRVU53UWl4RFFVRkRPM0ZDUVVOTU8yOUNRVU5FTEUxQlFVMHNVVUZCVVN4SFFVTldMRU5CUVVNc1EwRkJReXhKUVVGSk8zZENRVU5PTEVkQlFVYzdkMEpCUTBnc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETEVOQlFVTXNWVUZCVlN4SlFVRkpMRVZCUVVVc1EwRkJRenMyUWtGRE1VSXNSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRkxFVkJRVVVzUTBGQlF5eERRVUZETEVkQlFVY3NSMEZCUnl4SFFVRkhMRU5CUVVNc1EwRkJReXhWUVVGVkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdOa0pCUTNKRExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0dlFrRkRia0lzYVVKQlFXbENMRU5CUVVNc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETzJsQ1FVTndRenRaUVVOTUxFTkJRVU1zUTBGQlF5eERRVUZETzFGQlExQXNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkZTQ3hQUVVGUExHbENRVUZwUWl4RFFVRkRPMGxCUXpkQ0xFTkJRVU03UTBGRFNqczdPenM3T3pzN096czdPenM3TzBGRGVtcENSQ3hyUkVGQmEwUTdRVUZGYkVRN08wZEJSVWM3UVVGRFNTeE5RVUZOTEZsQlFWazdRMEZKZUVJN096czdPenM3T3pzN096czdPenRCUTFSRUxHdEVRVUZyUkR0QlFVVnNSRHM3UjBGRlJ6dEJRVU5KTEUxQlFVMHNWMEZCVnp0RFFVdDJRanM3T3pzN096czdPenM3T3pzN096czdPenM3TzBGRFZrUXNhMFJCUVd0RU8wRkJSVlU3UVVGSGIwSTdRVUZEY0VJN1FVRkRiRUk3UVVGRlowSTdRVUZ0UWpWQ08wRkJSVFpDTzBGQlZUTkVPenM3T3p0SFFVdEhPMEZCUTBrc1RVRkJUU3hqUVVGak8wbEJjVUoyUWpzN096dFBRVWxITzBsQlEwZ3NXVUZCV1N4TlFVRmpMRVZCUVVVc1UwRkJiVU03VVVGbUwwUXNiVU5CUVRoQ0xFZEJRVWNzU1VGQlNTeERRVUZETzFGQlF6bENMSGxDUVVGdlFpeEhRVUZITEV0QlFVc3NRMEZCUXp0UlFXVnFReXhKUVVGSkxFTkJRVU1zVFVGQlRTeEhRVUZITEUxQlFVMHNRMEZCUXp0UlFVVnlRaXhKUVVGSkxGTkJRVk1zWVVGQlZDeFRRVUZUTEhWQ1FVRlVMRk5CUVZNc1EwRkJSU3hyUWtGQmEwSXNSVUZCUlR0WlFVTXZRaXhKUVVGSkxFTkJRVU1zYlVKQlFXMUNMRWRCUVVjc1UwRkJVeXhEUVVGRExHdENRVUZyUWl4RFFVRkRPMU5CUXpORU8xRkJSVVFzU1VGQlNTeERRVUZETEdGQlFXRXNSMEZCUnl4SlFVRkpMRFJFUVVGWkxFVkJRVVVzUTBGQlF6dFJRVVY0UXl4SlFVRkpMRU5CUVVNc2FVSkJRV2xDTEVWQlFVVXNRMEZCUXp0UlFVVjZRaXhsUVVGbE8xRkJRMllzU1VGQlNTeERRVUZETEhsQ1FVRjVRaXhEUVVNeFFpeEpRVUZKTEhkR1FVRnpRaXhEUVVGRExFbEJRVWtzUTBGQlF5eE5RVUZOTEVWQlFVVXNTVUZCU1N4RFFVRkRMRU5CUTJoRUxFTkJRVU03VVVGRlJpeHZRa0ZCYjBJN1VVRkRjRUlzU1VGQlNTeERRVUZETEhOQ1FVRnpRaXhIUVVGSExFbEJRVWtzYTBWQlFXZENMRU5CUXpsRExFbEJRVWtzUTBGQlF5eHJRa0ZCYTBJc1EwRkRNVUlzUTBGQlF6dFJRVU5HTEVsQlFVa3NRMEZCUXl4elFrRkJjMElzUTBGQlF5eG5RMEZCWjBNc1IwRkJSeXhEUVVNelJDeERRVUZUTEVWQlExUXNRMEZCVXl4RlFVTllMRVZCUVVVc1EwRkRRU3hKUVVGSkxFTkJRVU1zYVVKQlFXbENMRU5CUVVNc2QwTkJRWGRETEVOQlF6TkVMRU5CUVVNc1JVRkRSQ3hEUVVGRExFTkJRMG9zUTBGQlF6dFJRVU5PTEVsQlFVa3NRMEZCUXl4NVFrRkJlVUlzUjBGQlJ5eERRVUZETEU5QlFXZERMRVZCUVVVc1JVRkJSU3hEUVVOc1JTeEpRVUZKTEVOQlFVTXNjMEpCUVhOQ0xFTkJRVU1zYjBKQlFXOUNMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU03VVVGRk9VUXNTVUZCU1N4RFFVRkRMR2RDUVVGblFpeEhRVUZITEVsQlFVa3NiVVZCUVdVc1EwRkJReXhKUVVGSkxFTkJRVU1zYVVKQlFXbENMRU5CUVVNc1EwRkJRenRKUVVONFJTeERRVUZETzBsQlJVUTdPMDlCUlVjN1NVRkRTQ3hKUVVGWExHdENRVUZyUWp0UlFVTjZRaXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEcxQ1FVRnRRaXhGUVVGRk8xbEJRek5DTEVsQlFVa3NRMEZCUXl4dFFrRkJiVUlzUjBGQlJ5eFJRVUZSTEVOQlFVTXNZVUZCWVN4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRE8xbEJRM3BFTEVsQlFVa3NRMEZCUXl4dFFrRkJiVUlzUTBGQlF5eEZRVUZGTEVkQlFVY3NiMEpCUVc5Q0xFTkJRVU03VTBGRGRFUTdVVUZEUkN4UFFVRlBMRWxCUVVrc1EwRkJReXh0UWtGQmJVSXNRMEZCUXp0SlFVTndReXhEUVVGRE8wbEJSVVE3TzA5QlJVYzdTVUZEU3l4cFFrRkJhVUk3VVVGRGNrSXNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXcwUWtGQk5FSXNRMEZEY0VNc2NVVkJRWGxDTEVWQlEzcENMRU5CUVVNc2MwSkJRU3RDTEVWQlFVVXNSVUZCUlR0WlFVTm9ReXhyUjBGQmEwYzdXVUZEYkVjc0swUkJRU3RFTzFsQlF5OUVMRWxCUTBrc2MwSkJRWE5DTEV0QlFVc3NTVUZCU1R0blFrRkRMMElzUTBGQlF5eEpRVUZKTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zYlVKQlFXMUNMRVZCUXpkRE8yZENRVU5GTEVsQlFVa3NRMEZCUXl4cFFrRkJhVUlzUTBGQlF5eHJRMEZCYTBNc1JVRkJSU3hEUVVGRE8yRkJReTlFTzFGQlEwd3NRMEZCUXl4RFFVTktMRU5CUVVNN1VVRkZSaXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETERSQ1FVRTBRaXhEUVVOd1F5dzRSRUZCYTBJc1JVRkRiRUlzUTBGQlF5eFpRVUZ4UWl4RlFVRkZMRVZCUVVVN1dVRkRkRUlzU1VGQlNTeERRVUZETEdsQ1FVRnBRaXhEUVVGRExHRkJRV0VzUTBGQlF5eFpRVUZaTEVOQlFVTXNRMEZCUXp0UlFVTjJSQ3hEUVVGRExFTkJRMG9zUTBGQlF6dFJRVVZHTEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc05FSkJRVFJDTEVOQlEzQkRMSGxGUVVFMlFpeEZRVU0zUWl4SFFVRkhMRVZCUVVVN1dVRkRSQ3hKUVVGSkxFTkJRVU1zYVVKQlFXbENMRU5CUVVNc1YwRkJWeXhEUVVGRExIRkNRVUZ4UWl4RlFVRkZMRU5CUVVNN1VVRkRMMFFzUTBGQlF5eERRVU5LTEVOQlFVTTdVVUZGUml4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExEUkNRVUUwUWl4RFFVTndReXh0UlVGQmRVSXNSVUZEZGtJc1EwRkJReXhsUVVGM1FpeEZRVUZGTEVWQlFVVTdXVUZEZWtJc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eFpRVUZaTEVOQlEzQkNMRzFGUVVGMVFpeEZRVU4yUWl4dFFrRkRTU3hsUVVGbExFTkJRVU1zUTBGQlF5eERRVUZETEZWQlFWVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1VVRkRia01zVVVGQlVTeERRVU5ZTEVOQlFVTTdXVUZEUml4SlFVRkpMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTXNiMEpCUVc5Q0xFTkJRVU1zU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4aFFVRmhMRU5CUVVNc05FUkJRV2RDTEVOQlFVTXNRMEZCUXl4RFFVRkRPMUZCUXpkR0xFTkJRVU1zUTBGRFNpeERRVUZETzFGQlJVWXNZVUZCWVR0UlFVTmlMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zTkVKQlFUUkNMRU5CUTNCRExDdEVRVUZ0UWl4RlFVTnVRaXhEUVVGRExGTkJRV3RDTEVWQlFVVXNSVUZCUlR0WlFVTnVRaXhKUVVGSkxFTkJRVU1zYVVKQlFXbENMRU5CUVVNc2RVSkJRWFZDTEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVNN1VVRkRPVVFzUTBGQlF5eERRVU5LTEVOQlFVTTdVVUZGUml4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExEUkNRVUUwUWl4RFFVTndReXcwUkVGQlowSXNSVUZEYUVJc1EwRkJReXhUUVVGclFpeEZRVUZGTEVWQlFVVTdXVUZEYmtJc1NVRkJTU3hEUVVGRExHbENRVUZwUWl4RFFVRkRMRzlDUVVGdlFpeERRVUZETEZOQlFWTXNRMEZCUXl4RFFVRkRPMUZCUXpORUxFTkJRVU1zUTBGRFNpeERRVUZETzFGQlJVWXNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXcwUWtGQk5FSXNRMEZEY0VNc05FUkJRV2RDTEVWQlEyaENMRU5CUVVNc1UwRkJhMElzUlVGQlJTeEZRVUZGTzFsQlEyNUNMRWxCUVVrc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4dlFrRkJiMElzUTBGQlF5eFRRVUZUTEVOQlFVTXNRMEZCUXp0UlFVTXpSQ3hEUVVGRExFTkJRMG9zUTBGQlF6dFJRVVZHTEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc05FSkJRVFJDTEVOQlEzQkRMRGhFUVVGclFpeEZRVU5zUWl4RFFVRkRMRk5CUVd0Q0xFVkJRVVVzUlVGQlJUdFpRVU51UWl4SlFVRkpMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTXNjMEpCUVhOQ0xFTkJRVU1zVTBGQlV5eERRVUZETEVOQlFVTTdVVUZETjBRc1EwRkJReXhEUVVOS0xFTkJRVU03VVVGRlJpeHRRa0ZCYlVJN1VVRkRia0lzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4dFEwRkJiVU1zUTBGRE0wTXNiVVZCUVhWQ0xFVkJRM1pDTEVOQlFVTXNVVUZCWjBJc1JVRkJSU3hGUVVGRk8xbEJRMnBDTEhORVFVRlZMRU5CUTA0c1owVkJRVzlDTEVWQlFVVXNSVUZEZEVJc2JVTkJRVzFETEVWQlEyNURMRU5CUVVNc1EwRkRTaXhEUVVGRE8xbEJRMFlzU1VGQlNTeERRVUZETEdsQ1FVRnBRaXhEUVVGRExHZENRVUZuUWl4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRE8xbEJRMnhFTEhORVFVRlZMRU5CUTA0c1owVkJRVzlDTEVWQlFVVXNSVUZEZEVJc05rTkJRVFpETEVWQlF6ZERMRU5CUVVNc1EwRkRTaXhEUVVGRE8xRkJRMDRzUTBGQlF5eERRVU5LTEVOQlFVTTdVVUZGUml4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExHMURRVUZ0UXl4RFFVTXpReXh0UlVGQmRVSXNSVUZEZGtJc1EwRkJReXhSUVVGblFpeEZRVUZGTEVWQlFVVTdXVUZEYWtJc2MwUkJRVlVzUTBGRFRpeG5SVUZCYjBJc1JVRkJSU3hGUVVOMFFpdzRRMEZCT0VNc1JVRkRPVU1zUTBGQlF5eERRVU5LTEVOQlFVTTdXVUZEUml4SlFVRkpMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTTdXVUZEYkVRc2MwUkJRVlVzUTBGRFRpeG5SVUZCYjBJc1JVRkJSU3hGUVVOMFFpdzJRMEZCTmtNc1JVRkROME1zUTBGQlF5eERRVU5LTEVOQlFVTTdVVUZEVGl4RFFVRkRMRU5CUTBvc1EwRkJRenRSUVVWR0xHdENRVUZyUWp0UlFVTnNRaXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEcxRFFVRnRReXhEUVVNelF5dzRSVUZCYTBNc1JVRkRiRU1zUTBGQlF5eFJRVUZuUWl4RlFVRkZMRVZCUVVVN1dVRkRha0lzYzBSQlFWVXNRMEZEVGl4blJVRkJiMElzUlVGQlJTeEZRVU4wUWl3NFEwRkJPRU1zUlVGRE9VTXNRMEZCUXl4RFFVTktMRU5CUVVNN1dVRkRSaXhKUVVGSkxFTkJRVU1zYVVKQlFXbENMRU5CUVVNc2IwSkJRVzlDTEVOQlFVTXNVVUZCVVN4SFFVRkhMRWxCUVVrc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4RFFVRkRPMWxCUXk5RkxITkVRVUZWTEVOQlEwNHNaMFZCUVc5Q0xFVkJRVVVzUlVGRGRFSXNOa05CUVRaRExFVkJRemRETEVOQlFVTXNRMEZEU2l4RFFVRkRPMUZCUTA0c1EwRkJReXhEUVVOS0xFTkJRVU03VVVGRlJpeEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMRzFEUVVGdFF5eERRVU16UXl3NFJVRkJhME1zUlVGRGJFTXNRMEZCUXl4UlFVRm5RaXhGUVVGRkxFVkJRVVU3V1VGRGFrSXNjMFJCUVZVc1EwRkRUaXhuUlVGQmIwSXNSVUZCUlN4RlFVTjBRaXc0UTBGQk9FTXNSVUZET1VNc1EwRkJReXhEUVVOS0xFTkJRVU03V1VGRFJpeEpRVUZKTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zYjBKQlFXOUNMRU5CUVVNc1VVRkJVU3hIUVVGSExFbEJRVWtzUTBGQlF5eHBRa0ZCYVVJc1EwRkJReXhEUVVGRE8xbEJReTlGTEhORVFVRlZMRU5CUTA0c1owVkJRVzlDTEVWQlFVVXNSVUZEZEVJc05rTkJRVFpETEVWQlF6ZERMRU5CUVVNc1EwRkRTaXhEUVVGRE8xRkJRMDRzUTBGQlF5eERRVU5LTEVOQlFVTTdVVUZGUml4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExHMURRVUZ0UXl4RFFVTXpReXgxUlVGQk1rSXNSVUZETTBJc1EwRkJReXhSUVVGblFpeEZRVUZGTEVWQlFVVTdXVUZEYWtJc2MwUkJRVlVzUTBGRFRpeG5SVUZCYjBJc1JVRkJSU3hGUVVOMFFpdzRRMEZCT0VNc1JVRkRPVU1zUTBGQlF5eERRVU5LTEVOQlFVTTdXVUZEUml4SlFVRkpMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTXNZVUZCWVN4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRE8xbEJReTlETEhORVFVRlZMRU5CUTA0c1owVkJRVzlDTEVWQlFVVXNSVUZEZEVJc05rTkJRVFpETEVWQlF6ZERMRU5CUVVNc1EwRkRTaXhEUVVGRE8xRkJRMDRzUTBGQlF5eERRVU5LTEVOQlFVTTdVVUZGUml4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExHdERRVUZyUXl4RFFVTXhReXd5UlVGQkswSXNSVUZETDBJc1EwRkJReXhSUVVGblFpeEZRVUZGTEVWQlFVVTdXVUZEYWtJc1NVRkJTU3hKUVVGSkxFTkJRVU1zYVVKQlFXbENMRVZCUVVVN1owSkJRM2hDTEVsQlFVa3NRMEZCUXl4cFFrRkJhVUlzUTBGQlF5eHBRa0ZCYVVJc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF6dGhRVU4wUkR0UlFVTk1MRU5CUVVNc1EwRkRTaXhEUVVGRE8xRkJSVVlzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4MVFrRkJkVUlzUTBGQlF5eEpRVUZKTEVOQlFVTXNZVUZCWVN4RFFVRkRMRU5CUVVNN1NVRkROVVFzUTBGQlF6dEpRVVZFT3pzN1QwRkhSenRKUVVOSUxEWkVRVUUyUkR0SlFVTTNSQ3g1UWtGQmVVSXNRMEZCUXl4UFFVRm5RenRSUVVOMFJDeE5RVUZOTEVsQlFVa3NTMEZCU3l4RFFVRkRMSGxDUVVGNVFpeERRVUZETEVOQlFVTTdTVUZETDBNc1EwRkJRenRKUVVWRU96czdUMEZIUnp0SlFVTklMSGRDUVVGM1FpeERRVUZETEhGQ1FVRTRRanRSUVVOdVJDeEpRVUZKTEVOQlFVTXNaMEpCUVdkQ0xFZEJRVWNzY1VKQlFYRkNMRU5CUVVNN1NVRkRiRVFzUTBGQlF6dEpRVVZFT3pzN1QwRkhSenRKUVVOTExIbENRVUY1UWl4RFFVTTNRaXh6UWtGQk9FTTdVVUZGT1VNc1NVRkJTU3hEUVVGRExHbENRVUZwUWl4SFFVRkhMSE5DUVVGelFpeERRVUZETzFGQlJXaEVMRWxCUVVrc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4cFFrRkJhVUlzUTBGRGNFTXNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhuUWtGQlowSXNRMEZCUXl3eVJVRkJLMElzUTBGQlF6dGhRVU40UkN4UlFVRlJMRU5CUTJoQ0xFTkJRVU03VVVGRFJpeEpRVUZKTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zYVVKQlFXbENMRVZCUVVVc1EwRkJRenRSUVVVelF5d3dRMEZCTUVNN1VVRkRNVU1zU1VGQlNTeERRVUZETEcxQ1FVRnRRaXhGUVVGRkxFTkJRVU03U1VGREwwSXNRMEZCUXp0SlFVVkVPenRQUVVWSE8wbEJRMGtzVDBGQlR6dFJRVU5XTEVsQlFVa3NRMEZCUXl4aFFVRmhMRU5CUVVNc1lVRkJZU3hEUVVGRExFbEJRVWtzY1VWQlFYRkNMRVZCUVVVc1EwRkJReXhEUVVGRE8xRkJRemxFTEVsQlFVa3NRMEZCUXl4cFFrRkJhVUlzUTBGQlF5eDVRa0ZCZVVJc1JVRkJSU3hEUVVGRE8wbEJRM1pFTEVOQlFVTTdTVUZGUkRzN08wOUJSMGM3U1VGRFNTeFRRVUZUTzFGQlExb3NTVUZCU1N4RFFVRkRMR0ZCUVdFc1EwRkJReXhoUVVGaExFTkJRVU1zU1VGQlNTeHZSVUZCYjBJc1JVRkJSU3hEUVVGRExFTkJRVU03VVVGRE4wUXNTVUZCU1N4RFFVRkRMR2xDUVVGcFFpeERRVUZETERCQ1FVRXdRaXhGUVVGRkxFTkJRVU03U1VGRGVFUXNRMEZCUXp0SlFVVkVPenRQUVVWSE8wbEJRMGtzVlVGQlZUdFJRVU5pTEVsQlFVa3NRMEZCUXl4aFFVRmhMRU5CUVVNc1lVRkJZU3hEUVVGRExFbEJRVWtzZDBWQlFYZENMRVZCUVVVc1EwRkJReXhEUVVGRE8xRkJRMnBGTEVsQlFVa3NRMEZCUXl4cFFrRkJhVUlzUTBGQlF5eExRVUZMTEVWQlFVVXNRMEZCUXp0SlFVTnVReXhEUVVGRE8wbEJSVVE3TzA5QlJVYzdTVUZEU1N4SlFVRkpPMUZCUTFBc1NVRkJTU3hEUVVGRExHZENRVUZuUWl4RlFVRkZMRU5CUVVNN1VVRkRlRUlzU1VGQlNTeERRVUZETEdsQ1FVRnBRaXhEUVVGRExGVkJRVlVzUlVGQlJTeERRVUZETzBsQlEzaERMRU5CUVVNN1NVRkZSRHM3VDBGRlJ6dEpRVU5MTEcxQ1FVRnRRanRSUVVOMlFpeHBSVUZCYVVVN1VVRkRha1VzU1VGQlNTeEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMR0ZCUVdFc1EwRkJReXcyUkVGQmFVSXNRMEZCUXl4RlFVRkZPMWxCUXpsRExITkdRVUZ6Ump0WlFVTjBSaXhKUVVGSkxFTkJRVU1zYjBKQlFXOUNMRVZCUVVVc1EwRkJRenRaUVVNMVFpeEpRVUZKTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zZVVKQlFYbENMRVZCUVVVc1EwRkJRenRUUVVOMFJEdEpRVU5NTEVOQlFVTTdTVUZGUkRzN1QwRkZSenRKUVVOSUxHOUNRVUZ2UWp0UlFVTm9RaXhKUVVGSkxFTkJRVU1zWVVGQllTeERRVUZETEdGQlFXRXNRMEZCUXl4SlFVRkpMSE5GUVVGelFpeEZRVUZGTEVOQlFVTXNRMEZCUXp0UlFVTXZSQ3hKUVVGSkxFTkJRVU1zT0VKQlFUaENMRWRCUVVjc1NVRkJTU3hEUVVGRE8wbEJReTlETEVOQlFVTTdTVUZGUkRzN1QwRkZSenRKUVVOSUxGbEJRVms3VVVGRFVpeEpRVUZKTEVOQlFVTXNZVUZCWVN4RFFVRkRMR0ZCUVdFc1EwRkJReXhKUVVGSkxEaEVRVUZqTEVWQlFVVXNRMEZCUXl4RFFVRkRPMGxCUXpORUxFTkJRVU03U1VGRlJEczdUMEZGUnp0SlFVTklMR2RDUVVGblFqdFJRVU5hTEVsQlFVa3NRMEZCUXl4aFFVRmhMRU5CUVVNc1lVRkJZU3hEUVVGRExFbEJRVWtzYTBWQlFXdENMRVZCUVVVc1EwRkJReXhEUVVGRE8wbEJReTlFTEVOQlFVTTdTVUZGUkRzN096dFBRVWxITzBsQlEwZ3NZVUZCWVN4RFFVRkRMRmRCUVcxQ08xRkJRemRDTEhGR1FVRnhSanRSUVVOeVJpeEpRVU5KTEVsQlFVa3NRMEZCUXl4cFFrRkJhVUlzUTBGQlF5dzBRa0ZCTkVJc1JVRkJSU3hKUVVGSkxFVkJRVVU3V1VGRE0wUXNTVUZCU1N4RFFVRkRMR2xDUVVGcFFpeERRVUZETERSQ1FVRTBRaXhGUVVGRk8yZENRVU5xUkN4VFFVRlRPMWxCUTJJc1NVRkJTU3hEUVVGRExHbENRVUZwUWl4RFFVRkRMRFJDUVVFMFFpeEZRVUZGTEVsQlFVa3NTVUZCU1N4RlFVTXZSRHRaUVVORkxGZEJRVmNzUjBGQlJ5eEpRVUZKTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zTkVKQlFUUkNMRVZCUVVVc1EwRkJRenRaUVVOd1JTeEpRVUZKTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zTkVKQlFUUkNMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU03VTBGRE0wUTdVVUZGUkN4SlFVRkpMRU5CUVVNc1lVRkJZU3hEUVVGRExHRkJRV0VzUTBGRE5VSXNTVUZCU1N4MVJVRkJkVUlzUTBGQlF6dFpRVU40UWl4WFFVRlhPMWxCUTFnc05rSkJRVFpDTEVWQlEzcENMRWxCUVVrc1EwRkJReXc0UWtGQk9FSTdVMEZETVVNc1EwRkJReXhEUVVOTUxFTkJRVU03VVVGRFJpeEpRVUZKTEVsQlFVa3NRMEZCUXl3NFFrRkJPRUlzU1VGQlNTeExRVUZMTEVWQlFVVTdXVUZET1VNc1NVRkJTU3hEUVVGRExEaENRVUU0UWl4SFFVRkhMRWxCUVVrc1EwRkJRenRUUVVNNVF6dEpRVU5NTEVOQlFVTTdTVUZGUkRzN1QwRkZSenRKUVVOSUxHMUNRVUZ0UWp0UlFVTm1MRWxCUVVrc1EwRkJReXhoUVVGaExFTkJRVU1zWVVGQllTeERRVUZETEVsQlFVa3NjVVZCUVhGQ0xFVkJRVVVzUTBGQlF5eERRVUZETzBsQlEyeEZMRU5CUVVNN1NVRkZSRHM3VDBGRlJ6dEpRVU5JTEd0Q1FVRnJRanRSUVVOa0xFbEJRVWtzUTBGQlF5eGhRVUZoTEVOQlFVTXNZVUZCWVN4RFFVRkRMRWxCUVVrc2IwVkJRVzlDTEVWQlFVVXNRMEZCUXl4RFFVRkRPMGxCUTJwRkxFTkJRVU03U1VGRlJEczdUMEZGUnp0SlFVTklMR1ZCUVdVN1VVRkRXQ3hKUVVGSkxFTkJRVU1zWVVGQllTeERRVUZETEdGQlFXRXNRMEZCUXl4SlFVRkpMR2xGUVVGcFFpeEZRVUZGTEVOQlFVTXNRMEZCUXp0SlFVTTVSQ3hEUVVGRE8wbEJSVVE3TzA5QlJVYzdTVUZEU0N4dFFrRkJiVUk3VVVGRFppeEpRVUZKTEVOQlFVTXNZVUZCWVN4RFFVRkRMR0ZCUVdFc1EwRkJReXhKUVVGSkxIRkZRVUZ4UWl4RlFVRkZMRU5CUVVNc1EwRkJRenRSUVVNNVJDeEpRVUZKTEVOQlFVTXNaVUZCWlN4SFFVRkhMRWxCUVVrc1EwRkJReXhIUVVGSExFVkJRVVVzUTBGQlF6dEpRVU4wUXl4RFFVRkRPMGxCUlVRN096dFBRVWRITzBsQlEwZ3NiMEpCUVc5Q0xFTkJRVU1zWTBGQmEwTTdVVUZEYmtRc1NVRkJTU3hEUVVGRExHRkJRV0VzUTBGQlF5eGhRVUZoTEVOQlF6VkNMRWxCUVVrc2MwVkJRWE5DTEVOQlFVTXNSVUZCUlN4alFVRmpMRVZCUVVVc1EwRkJReXhEUVVOcVJDeERRVUZETzBsQlEwNHNRMEZCUXp0SlFVVkVPenM3VDBGSFJ6dEpRVU5JTEdGQlFXRXNRMEZCUXl4VlFVRXlRanRSUVVOeVF5eFhRVUZYTzFGQlExZ3NTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhsUVVGbExFbEJRVWtzU1VGQlNTeERRVUZETEdWQlFXVXNTMEZCU3l4VFFVRlRMRVZCUVVVN1dVRkROMFFzU1VGQlNTeERRVUZETEdWQlFXVXNSMEZCUnl4SlFVRkpMRU5CUVVNc1IwRkJSeXhGUVVGRkxFTkJRVU03VTBGRGNrTTdVVUZEUkN4VlFVRlZMRU5CUVVNc2RVSkJRWFZDTEVOQlF6bENMRWxCUVVrc1EwRkJReXhsUVVGbExFVkJRM0JDTEVsQlFVa3NRMEZCUXl4blFrRkJaMElzUlVGRGNrSXNTVUZCU1N4RFFVRkRMR2xDUVVGcFFpeERRVUZETEZWQlFWVXNRMEZEY0VNc1EwRkJRenRSUVVWR0xFbEJRVWtzUTBGQlF5eGhRVUZoTEVOQlFVTXNZVUZCWVN4RFFVTTFRaXhKUVVGSkxHdEZRVUZyUWl4RFFVRkRMRVZCUVVVc1pVRkJaU3hGUVVGRkxGVkJRVlVzUlVGQlJTeERRVUZETEVOQlF6RkVMRU5CUVVNN1NVRkRUaXhEUVVGRE8wbEJSVVE3T3p0UFFVZEhPMGxCUTBnc2IwSkJRVzlDTEVOQlFVTXNSVUZCVlR0UlFVTXpRaXhKUVVGSkxFTkJRVU1zWVVGQllTeERRVUZETEdGQlFXRXNRMEZETlVJc1NVRkJTU3h6UlVGQmMwSXNRMEZCUXl4RlFVRkZMRXRCUVVzc1JVRkJSU3hGUVVGRkxFVkJRVVVzUTBGQlF5eERRVU0xUXl4RFFVRkRPMGxCUTA0c1EwRkJRenRKUVVWRU96czdUMEZIUnp0SlFVTklMR3RDUVVGclFpeERRVUZETEZGQlFYbENPenRSUVVONFF5eEpRVUZKTEVOQlFVTXNZVUZCWVN4RFFVRkRMR0ZCUVdFc1EwRkROVUlzU1VGQlNTeHZSVUZCYjBJc1EwRkJReXhGUVVGRkxGRkJRVkVzUlVGQlJTeERRVUZETEVOQlEzcERMRU5CUVVNN1VVRkRSaXhKUVVGSkxGRkJRVkVzUTBGQlF5eHpRa0ZCYzBJc1JVRkJSVHRaUVVOcVF5eEpRVUZKTEVOQlFVTXNiMEpCUVc5Q08yZENRVU55UWl4alFVRlJMRU5CUVVNc2MwSkJRWE5DTEVOQlFVTXNNa0pCUVRKQ0xHMURRVUZKTEV0QlFVc3NRMEZCUXp0WlFVTjZSU3hKUVVGSkxFbEJRVWtzUTBGQlF5eHZRa0ZCYjBJc1MwRkJTeXhMUVVGTExFVkJRVVU3WjBKQlEzSkRMSFZFUVVGWExFTkJRMUFzWjBWQlFXOUNMRVZCUVVVc1JVRkRkRUlzZDBkQlFYZEhMRU5CUXpOSExFTkJRVU03WVVGRFREdFRRVU5LTzFGQlJVUXNUVUZCVFN4WlFVRlpMRWRCUVVjc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eFpRVUZaTEVOQlFVTTdVVUZET1VNc1RVRkJUU3hUUVVGVExFZEJRVWNzU1VGQlNTeGxRVUZsTEVOQlFVTXNUVUZCVFN4RFFVRkRMRkZCUVZFc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF6dFJRVU01UkN4SlFVRkpMRkZCUVZFc1EwRkJReXhsUVVGbExFVkJRVVU3V1VGRE1VSXNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhwUWtGQmFVSXNRMEZEZWtJc2JVVkJRWFZDTzFsQlEzWkNMRGhIUVVFNFJ6dFpRVU01Unl4RFFVRkRMRmxCUVZrc1NVRkJTU3hUUVVGVExFTkJRVU1zUjBGQlJ5eERRVUZETEcxRlFVRjFRaXhEUVVGRExFTkJRVU03WjBKQlEzQkVMRU5CUVVNc1EwRkJReXhOUVVGTkxFTkJRVU1zVVVGQlVTeERRVUZETEZOQlFWTXNRMEZCUXl4SFFVRkhMRU5CUVVNc2JVVkJRWFZDTEVOQlFVTXNRMEZCUXp0blFrRkRla1FzUTBGQlF5eERRVUZETEZGQlFWRXNRMEZCUXl4bFFVRmxMRU5CUVVNc1MwRkJTeXhEUVVOMlF5eERRVUZETzFsQlIwWXNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhwUWtGQmFVSXNRMEZEZWtJc2JVVkJRWFZDTEVWQlEzWkNMRU5CUVVNc1dVRkJXU3hKUVVGSkxGTkJRVk1zUTBGQlF5eEhRVUZITEVOQlFVTXNiVVZCUVhWQ0xFTkJRVU1zUTBGQlF6dG5Ra0ZEY0VRc1EwRkJReXhEUVVGRExFMUJRVTBzUTBGQlF5eFJRVUZSTEVOQlFVTXNVMEZCVXl4RFFVRkRMRWRCUVVjc1EwRkJReXh0UlVGQmRVSXNRMEZCUXl4RFFVRkRPMmRDUVVONlJDeERRVUZETEVOQlFVTXNVVUZCVVN4RFFVRkRMR1ZCUVdVc1EwRkJReXhMUVVGTExFTkJRM1pETEVOQlFVTTdVMEZEVER0UlFVTkVMRWxCUVVrc1VVRkJVU3hEUVVGRExHTkJRV01zUlVGQlJUdFpRVU42UWl4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExHbENRVUZwUWl4RFFVTjZRaXc0UlVGQmEwTXNSVUZEYkVNc1EwRkJReXhaUVVGWkxFbEJRVWtzVTBGQlV5eERRVUZETEVkQlFVY3NRMEZCUXl3NFJVRkJhME1zUTBGQlF5eERRVUZETzJkQ1FVTXZSQ3hEUVVGRExFTkJRVU1zVFVGQlRTeERRVUZETEZGQlFWRXNRMEZCUXl4VFFVRlRMRU5CUVVNc1IwRkJSeXhEUVVGRExEaEZRVUZyUXl4RFFVRkRMRU5CUVVNc1IwRkJSeXhKUVVGSkxFTkJRVU1zYVVKQlFXbENPMmRDUVVNM1JpeERRVUZETEVOQlFVTXNVVUZCVVN4RFFVRkRMR05CUVdNc1EwRkJReXhWUVVGVkxFZEJRVWNzU1VGQlNTeERRVUZETEdsQ1FVRnBRaXhEUVVOd1JTeERRVUZETzFsQlEwWXNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhwUWtGQmFVSXNRMEZEZWtJc09FVkJRV3RETEVWQlEyeERMRU5CUVVNc1dVRkJXU3hKUVVGSkxGTkJRVk1zUTBGQlF5eEhRVUZITEVOQlFVTXNPRVZCUVd0RExFTkJRVU1zUTBGQlF6dG5Ra0ZETDBRc1EwRkJReXhEUVVGRExFMUJRVTBzUTBGQlF5eFJRVUZSTEVOQlFVTXNVMEZCVXl4RFFVRkRMRWRCUVVjc1EwRkJReXc0UlVGQmEwTXNRMEZCUXl4RFFVRkRMRWRCUVVjc1NVRkJTU3hEUVVGRExHbENRVUZwUWp0blFrRkROMFlzUTBGQlF5eERRVUZETEZGQlFWRXNRMEZCUXl4alFVRmpMRU5CUVVNc1ZVRkJWU3hIUVVGSExFbEJRVWtzUTBGQlF5eHBRa0ZCYVVJc1EwRkZjRVVzUTBGQlF6dFpRVU5HTEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc2FVSkJRV2xDTEVOQlEzcENMSFZGUVVFeVFpeEZRVU16UWl4RFFVRkRMRmxCUVZrc1NVRkJTU3hUUVVGVExFTkJRVU1zUjBGQlJ5eERRVUZETEhWRlFVRXlRaXhEUVVGRExFTkJRVU03WjBKQlEzaEVMRU5CUVVNc1EwRkJReXhOUVVGTkxFTkJRVU1zVVVGQlVTeERRVUZETEZOQlFWTXNRMEZCUXl4SFFVRkhMRU5CUVVNc2RVVkJRVEpDTEVOQlFVTXNRMEZCUXp0blFrRkROMFFzUTBGQlF5eERRVUZETEZGQlFWRXNRMEZCUXl4alFVRmpMRU5CUVVNc1IwRkJSeXhEUVVOd1F5eERRVUZETzFOQlEwdzdTVUZEVEN4RFFVRkRPMGxCUlVRN096dFBRVWRITzBsQlEwZ3NNRUpCUVRCQ0xFTkJRVU1zYlVKQlFUUkNPMUZCUTI1RUxFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNZMEZCWXl4RFFVTjBRaXh4UlVGQmVVSXNSVUZEZWtJc2JVSkJRVzFDTEVOQlEzUkNMRU5CUVVNN1NVRkRUaXhEUVVGRE8wbEJSVVE3T3pzN1QwRkpSenRKUVVOSkxHdENRVUZyUWp0UlFVTnlRaXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEdsQ1FVRnBRaXhEUVVGRExGZEJRVmNzUTBGQlF5eFpRVUZaTEVWQlFVVXNSVUZCUlR0WlFVTndSQ3hQUVVGUExFdEJRVXNzUTBGQlF6dFRRVU5vUWp0UlFVTkVMRWxCUVVrc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4bFFVRmxMRVZCUVVVc1EwRkJRenRSUVVONlF5eFBRVUZQTEVsQlFVa3NRMEZCUXp0SlFVTm9RaXhEUVVGRE8wbEJSVVE3T3pzN1QwRkpSenRKUVVOSkxHTkJRV003VVVGRGFrSXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4WFFVRlhMRU5CUVVNc1dVRkJXU3hGUVVGRkxFVkJRVVU3V1VGRGNFUXNUMEZCVHl4TFFVRkxMRU5CUVVNN1UwRkRhRUk3VVVGRFJDeEpRVUZKTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zVjBGQlZ5eEZRVUZGTEVOQlFVTTdVVUZEY2tNc1QwRkJUeXhKUVVGSkxFTkJRVU03U1VGRGFFSXNRMEZCUXp0SlFVVkVPenM3TzA5QlNVYzdTVUZEU1N4aFFVRmhPMUZCUTJoQ0xFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zVjBGQlZ5eERRVUZETEZsQlFWa3NSVUZCUlN4RlFVRkZPMWxCUTNCRUxFOUJRVThzUzBGQlN5eERRVUZETzFOQlEyaENPMUZCUTBRc1NVRkJTU3hEUVVGRExHbENRVUZwUWl4RFFVRkRMR2xDUVVGcFFpeEZRVUZGTEVOQlFVTTdVVUZETTBNc1QwRkJUeXhKUVVGSkxFTkJRVU03U1VGRGFFSXNRMEZCUXp0SlFVVkVPenM3TzA5QlNVYzdTVUZEU1N4cFFrRkJhVUlzUTBGQlF5eFZRVUV5UWp0UlFVTm9SQ3hKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEdsQ1FVRnBRaXhEUVVGRExGZEJRVmNzUTBGQlF5eFpRVUZaTEVWQlFVVXNSVUZCUlR0WlFVTndSQ3hQUVVGUExFdEJRVXNzUTBGQlF6dFRRVU5vUWp0UlFVTkVMRWxCUVVrc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4cFFrRkJhVUlzUTBGQlF5eFZRVUZWTEVOQlFVTXNRMEZCUXp0UlFVTnlSQ3hQUVVGUExFbEJRVWtzUTBGQlF6dEpRVU5vUWl4RFFVRkRPMGxCUlVRN096czdUMEZKUnp0SlFVTkpMRmRCUVZjc1EwRkJReXhWUVVGclFqdFJRVU5xUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExHbENRVUZwUWl4RFFVRkRMRmRCUVZjc1EwRkJReXhaUVVGWkxFVkJRVVVzUlVGQlJUdFpRVU53UkN4UFFVRlBMRXRCUVVzc1EwRkJRenRUUVVOb1FqdFJRVU5FTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc2IwSkJRVzlDTEVsQlFVa3NaMEpCUVdkQ0xFbEJRVWtzVlVGQlZTeEZRVUZGTzFsQlF6bEVMRTlCUVU4c1MwRkJTeXhEUVVGRE8xTkJRMmhDTzFGQlEwUXNTVUZCU1N4RFFVRkRMR2xDUVVGcFFpeERRVUZETEZkQlFWY3NRMEZCUXl4VlFVRlZMRU5CUVVNc1EwRkJRenRSUVVNdlF5eFBRVUZQTEVsQlFVa3NRMEZCUXp0SlFVTm9RaXhEUVVGRE8wbEJSVVE3T3pzN1QwRkpSenRKUVVOSkxHdENRVUZyUWl4RFFVRkRMRTlCUVdVN1VVRkRja01zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4dlFrRkJiMElzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4cFFrRkJhVUlzUTBGQlF5eFhRVUZYTEVOQlFVTXNXVUZCV1N4RlFVRkZMRVZCUVVVN1dVRkRiRVlzVDBGQlR5eExRVUZMTEVOQlFVTTdVMEZEYUVJN1VVRkRSQ3hKUVVGSkxFTkJRVU1zYVVKQlFXbENMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNN1VVRkRia1FzVDBGQlR5eEpRVUZKTEVOQlFVTTdTVUZEYUVJc1EwRkJRenRKUVVWRU96czdPMDlCU1VjN1NVRkRTU3gzUWtGQmQwSXNRMEZETTBJc1NVRkJXU3hGUVVOYUxGRkJRVzlETzFGQlJYQkRMRWxCUVVrc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4clFrRkJhMElzUTBGQlF5eDNRa0ZCZDBJc1EwRkJReXhKUVVGSkxFVkJRVVVzVVVGQlVTeERRVUZETEVOQlFVTTdTVUZEZGtZc1EwRkJRenRKUVVWRU96czdUMEZIUnp0SlFVTkpMREpDUVVFeVFpeERRVUZETEVsQlFWazdVVUZETTBNc1NVRkJTU3hEUVVGRExHbENRVUZwUWl4RFFVRkRMR3RDUVVGclFpeERRVUZETERKQ1FVRXlRaXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzBsQlEyaEdMRU5CUVVNN1NVRkZSRHM3T3p0UFFVbEhPMGxCUTBrc1lVRkJZU3hEUVVGRExFTkJRWE5DTzFGQlEzWkRMRTlCUVU4c1NVRkJTU3hEUVVGRExHRkJRV0VzUTBGQlF5eGhRVUZoTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1NVRkRMME1zUTBGQlF6dEpRVVZFT3pzN08wOUJTVWM3U1VGRFNTeG5Ra0ZCWjBJc1EwRkhja0lzU1VGQlR5eEZRVUZGTEZGQlFXZERPMUZCUTNaRExFbEJRVWtzUTBGQlF5eGhRVUZoTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zU1VGQlNTeEZRVUZGTEZGQlFWRXNRMEZCUXl4RFFVRkRPMGxCUTNoRUxFTkJRVU03U1VGRlJEczdPenRQUVVsSE8wbEJRMGtzYlVKQlFXMUNMRU5CUjNoQ0xFbEJRVThzUlVGQlJTeFJRVUZuUXp0UlFVTjJReXhKUVVGSkxFTkJRVU1zWVVGQllTeERRVUZETEcxQ1FVRnRRaXhEUVVGRExFbEJRVWtzUlVGQlJTeFJRVUZSTEVOQlFVTXNRMEZCUXp0SlFVTXpSQ3hEUVVGRE8wbEJSVVE3TzA5QlJVYzdTVUZEU1N4UlFVRlJPMUZCUTFnc1NVRkJTU3hEUVVGRExHVkJRV1VzUTBGQlF5eFRRVUZUTEVWQlFVVXNRMEZCUXp0SlFVTnlReXhEUVVGRE8wbEJSVVE3T3pzN1QwRkpSenRKUVVOSkxIVkNRVUYxUWl4RFFVRkRMSGRDUVVGdlF6dFJRVU12UkN4SlFVRkpMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTXNiMEpCUVc5Q0xFZEJRVWNzZDBKQlFYZENMRU5CUVVNN1NVRkRNMFVzUTBGQlF6dEpRVVZFT3pzN1QwRkhSenRKUVVOSUxFbEJRVmNzYlVKQlFXMUNPMUZCUXpGQ0xFOUJRVThzU1VGQlNTeERRVUZETEdsQ1FVRnBRaXhEUVVGRExHMUNRVUZ0UWl4RFFVRkRPMGxCUTNSRUxFTkJRVU03U1VGRlJEczdUMEZGUnp0SlFVTklMRWxCUVZjc1pVRkJaVHRSUVVOMFFpeFBRVUZQTEVsQlFVa3NRMEZCUXl4blFrRkJaMElzUTBGQlF6dEpRVU5xUXl4RFFVRkRPME5CUTBvN096czdPenM3T3pzN096czdPenRCUTNaMFFrUXNhMFJCUVd0RU8wRkJTMnhFT3p0SFFVVkhPMEZCUTBrc1RVRkJUU3huUWtGQlowSTdTVUZWZWtJN096dFBRVWRITzBsQlEwZ3NXVUZCV1N4clFrRkJLMEk3VVVGRGRrTXNTVUZCU1N4RFFVRkRMR05CUVdNc1IwRkJSeXhKUVVGSkxFTkJRVU03VVVGRE0wSXNTVUZCU1N4RFFVRkRMRmRCUVZjc1IwRkJSeXhKUVVGSkxFTkJRVU03VVVGRmVFSXNTVUZCU1N4alFVRmpMRWxCUVVrc1VVRkJVU3hEUVVGRExHVkJRV1VzUlVGQlJUdFpRVU0xUXl4SlFVRkpMRU5CUVVNc05rSkJRVFpDTEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU1zUTBGQlF6dFRRVU14UkR0SlFVTk1MRU5CUVVNN1NVRkZSRHM3T3pzN1QwRkxSenRKUVVOSUxEWkVRVUUyUkR0SlFVTTNSQ3huUTBGQlowTXNRMEZETlVJc1EwRkJVeXhGUVVOVUxFTkJRVk03VVVGRlZDeFBRVUZQTEVsQlFVa3NRMEZCUXp0SlFVTm9RaXhEUVVGRE8wbEJSVVE3T3p0UFFVZEhPMGxCUTBnc05rSkJRVFpDTEVOQlFVTXNhMEpCUVN0Q08xRkJRM3BFTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1YwRkJWeXhGUVVGRk8xbEJRMjVDTEVsQlFVa3NRMEZCUXl4WFFVRlhMRWRCUVVjc1VVRkJVU3hEUVVGRExHRkJRV0VzUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXp0WlFVTnVSQ3hKUVVGSkxFTkJRVU1zVjBGQlZ5eERRVUZETEVWQlFVVXNSMEZCUnl4aFFVRmhMRU5CUVVNN1dVRkRjRU1zU1VGQlNTeERRVUZETEZkQlFWY3NRMEZCUXl4VFFVRlRMRWRCUVVjc1EwRkJReXhEUVVGRE8xbEJReTlDTEd0Q1FVRnJRaXhEUVVGRExGZEJRVmNzUTBGQlF5eEpRVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkRMRU5CUVVNN1UwRkRjRVE3VVVGRlJDeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMR05CUVdNc1JVRkJSVHRaUVVOMFFpeEpRVUZKTEVOQlFVTXNZMEZCWXl4SFFVRkhMRkZCUVZFc1EwRkJReXhoUVVGaExFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTTdXVUZEZGtRc1NVRkJTU3hEUVVGRExHTkJRV01zUTBGQlF5eEZRVUZGTEVkQlFVY3NaMEpCUVdkQ0xFTkJRVU03V1VGRE1VTXNTVUZCU1N4RFFVRkRMR05CUVdNc1EwRkJReXhUUVVGVExFZEJRVWNzVjBGQlZ5eERRVUZETzFsQlF6VkRMR3RDUVVGclFpeERRVUZETEZkQlFWY3NRMEZCUXl4SlFVRkpMRU5CUVVNc1kwRkJZeXhEUVVGRExFTkJRVU03V1VGRmNFUXNLMEpCUVN0Q08xbEJReTlDTEVsQlFVa3NRMEZCUXl4alFVRmpMRU5CUVVNc1UwRkJVeXhEUVVGRExFZEJRVWNzUTBGQlF5eGhRVUZoTEVOQlFVTXNRMEZCUXp0WlFVVnFSQ3hKUVVGSkxFTkJRVU1zWTBGQll5eERRVUZETEdkQ1FVRm5RaXhEUVVGRExGVkJRVlVzUlVGQlJTeERRVUZETEV0QlFWa3NSVUZCUlN4RlFVRkZPMmRDUVVNNVJDd3JRa0ZCSzBJN1owSkJReTlDTEVsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVNc1MwRkJTeXhGUVVGRkxFTkJRVU03WjBKQlEzcENMRXRCUVVzc1EwRkJReXhqUVVGakxFVkJRVVVzUTBGQlF6dFpRVU16UWl4RFFVRkRMRU5CUVVNc1EwRkJRenRUUVVOT08wbEJRMHdzUTBGQlF6dEpRVVZFT3pzN1QwRkhSenRKUVVOSUxHOUNRVUZ2UWl4RFFVRkRMRTlCUVdkRE8xRkJRMnBFTEVsQlFVa3NUMEZCVHl4RFFVRkRMRzlDUVVGdlFpeEZRVUZGTzFsQlF6bENMQ3RDUVVFclFqdFpRVU12UWl4SlFVRkpMRU5CUVVNc1kwRkJZeXhEUVVGRExGTkJRVk1zUTBGQlF5eE5RVUZOTEVOQlFVTXNZVUZCWVN4RFFVRkRMRU5CUVVNN1dVRkRjRVFzZVVSQlFYbEVPMWxCUTNwRUxFMUJRVTBzUjBGQlJ5eEhRVUZITEVsQlFVa3NRMEZCUXl4blEwRkJaME1zUTBGRE4wTXNUMEZCVHl4RFFVRkRMRU5CUVVNc1JVRkRWQ3hQUVVGUExFTkJRVU1zUTBGQlF5eERRVU5hTEVOQlFVTTdXVUZEUml4SlFVRkpMRU5CUVVNc1kwRkJZeXhEUVVGRExFdEJRVXNzUTBGQlF5eEhRVUZITEVkQlFVY3NSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJReXhSUVVGUkxFVkJRVVVzUjBGQlJ5eEpRVUZKTEVOQlFVTTdXVUZEZUVRc1NVRkJTU3hEUVVGRExHTkJRV01zUTBGQlF5eExRVUZMTEVOQlFVTXNTVUZCU1N4SFFVRkhMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zUjBGQlJ5eEZRVUZGTEVOQlFVTXNRMEZCUXl4UlFVRlJMRVZCUVVVc1IwRkJSeXhKUVVGSkxFTkJRVU03VTBGRGJrVTdZVUZCVFR0WlFVTklMQ3RDUVVFclFqdFpRVU12UWl4SlFVRkpMRU5CUVVNc1kwRkJZeXhEUVVGRExGTkJRVk1zUTBGQlF5eEhRVUZITEVOQlFVTXNZVUZCWVN4RFFVRkRMRU5CUVVNN1dVRkRha1FzSzBKQlFTdENPMWxCUXk5Q0xFbEJRVWtzUTBGQlF5eFhRVUZYTEVOQlFVTXNTVUZCU1N4RlFVRkZMRU5CUVVNN1UwRkRNMEk3U1VGRFRDeERRVUZETzBOQlEwbzdPenM3T3pzN096czdPenM3T3pzN1FVTm9SMFFzYTBSQlFXdEVPMEZCUlZJN1FVRkZia01zVFVGQlRTeHJRa0ZCYTBJN1NVRkJMMEk3VVVGRFNTd3lRa0ZCYzBJc1IwRkJORU1zU1VGQlNTeEhRVUZITEVWQlFVVXNRMEZCUXp0SlFYbERhRVlzUTBGQlF6dEpRWFpEUnpzN096dFBRVWxITzBsQlEwZ3NkMEpCUVhkQ0xFTkJRM0JDTEVsQlFWa3NSVUZEV2l4UlFVRnZRenRSUVVWd1F5eEpRVUZKTEVOQlFVTXNjMEpCUVhOQ0xFTkJRVU1zUjBGQlJ5eERRVUZETEVsQlFVa3NSVUZCUlN4UlFVRlJMRU5CUVVNc1EwRkJRenRKUVVOd1JDeERRVUZETzBsQlJVUTdPenRQUVVkSE8wbEJRMGdzTWtKQlFUSkNMRU5CUVVNc1NVRkJXVHRSUVVOd1F5eEpRVUZKTEVOQlFVTXNjMEpCUVhOQ0xFTkJRVU1zVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMGxCUXpkRExFTkJRVU03U1VGRlJEczdPMDlCUjBjN1NVRkRTQ3hWUVVGVkxFTkJRVU1zVDBGQmIwSTdVVUZETTBJc2MwUkJRVlVzUTBGRFRpeG5SVUZCYjBJc1JVRkJSU3hGUVVOMFFpeDNRMEZCZDBNc1JVRkRlRU1zUTBGQlF5eERRVU5LTEVOQlFVTTdVVUZEUml4TlFVRk5MRk5CUVZNc1IwRkJSeXhKUVVGSkxGZEJRVmNzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXl4TlFVRk5MRU5CUVVNc1QwRkJUeXhEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMUZCUlhKRkxITkVRVUZWTEVOQlFVTXNaMFZCUVc5Q0xFVkJRVVVzUlVGQlJTeFRRVUZUTEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRha1FzU1VGQlNTeERRVUZETEhOQ1FVRnpRaXhEUVVGRExFOUJRVThzUTBGREwwSXNRMEZCUXl4UlFVRnZReXhGUVVGRkxFVkJRVVU3V1VGRGNrTXNVVUZCVVN4RFFVRkRMRk5CUVZNc1EwRkJReXhEUVVGRE8xRkJRM2hDTEVOQlFVTXNRMEZEU2l4RFFVRkRPMGxCUTA0c1EwRkJRenREUVVOS096czdPenM3T3pzN096czdPenM3TzBGRE9VTkVMR3RFUVVGclJEdEJRVWRTTzBGQlIyNURMRTFCUVUwc2QwSkJRWGRDTzBsQlNXcERMRmxCUTBrc2FVSkJRVzlETEVWQlEzQkRMRFpDUVVGelJEdFJRVVYwUkN4SlFVRkpMRU5CUVVNc2FVSkJRV2xDTEVkQlFVY3NhVUpCUVdsQ0xFTkJRVU03VVVGRE0wTXNTVUZCU1N4RFFVRkRMRFpDUVVFMlFpeEhRVUZITERaQ1FVRTJRaXhEUVVGRE8wbEJRM1pGTEVOQlFVTTdTVUZGUkRzN08wOUJSMGM3U1VGRFNDeGxRVUZsTEVOQlFVTXNWVUZCYTBJN1VVRkRPVUlzU1VGQlNTeERRVUZETEdOQlFXTXNRMEZCUXl4aFFVRmhMRVZCUVVVc1ZVRkJWU3hEUVVGRExFTkJRVU03U1VGRGJrUXNRMEZCUXp0SlFVVkVPenM3VDBGSFJ6dEpRVU5JTEZkQlFWY3NRMEZCUXl4VlFVRnJRanRSUVVNeFFpeEpRVUZKTEVOQlFVTXNZMEZCWXl4RFFVRkRMRk5CUVZNc1JVRkJSU3hWUVVGVkxFTkJRVU1zUTBGQlF6dEpRVU12UXl4RFFVRkRPMGxCUlVRN096dFBRVWRITzBsQlEwZ3NhVUpCUVdsQ0xFTkJRVU1zVlVGQk1rSTdVVUZEZWtNc1NVRkJTU3hEUVVGRExHTkJRV01zUTBGQlF5eGxRVUZsTEVWQlFVVXNWVUZCVlN4RFFVRkRMRU5CUVVNN1NVRkRja1FzUTBGQlF6dEpRVVZFT3pzN08wOUJTVWM3U1VGRFNDeGpRVUZqTEVOQlFVTXNWMEZCYlVJc1JVRkJSU3hWUVVFeVFqdFJRVU16UkN4dlJFRkJiMFE3VVVGRGNFUXNUVUZCVFN4clFrRkJhMElzUjBGQlJ5eEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMRlZCUVZVc1EwRkJReXhEUVVGRE8xRkJRM1JFTEUxQlFVMHNhMEpCUVd0Q0xFZEJRM0JDTEVsQlFVa3NRMEZCUXl3MlFrRkJOa0lzUTBGQlF5eHJRa0ZCYTBJc1EwRkJRenRSUVVNeFJDeE5RVUZOTEdGQlFXRXNSMEZCUnl4clFrRkJhMElzUTBGQlF5eFZRVUZWTEVOQlFVTXNWMEZCVnl4RFFVRkRMRU5CUVVNN1VVRkRha1VzU1VGQlNTeGhRVUZoTEV0QlFVc3NVMEZCVXl4RlFVRkZPMWxCUXpkQ0xIZEVRVUZaTEVOQlExSXNaMFZCUVc5Q0xFVkJRVVVzUlVGRGRFSXNiVVJCUVcxRUxGZEJRVmNzYlVoQlFXMUlMRU5CUTNCTUxFTkJRVU03VTBGRFREdFJRVVZFTEhORVFVRlZMRU5CUVVNc1owVkJRVzlDTEVWQlFVVXNSVUZCUlN4WFFVRlhMRWRCUVVjc1ZVRkJWU3hGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETzFGQlEyaEZMREJGUVVFd1JUdFJRVU14UlN4VlFVRlZPMUZCUTFZc1RVRkJUU3hKUVVGSkxFZEJRVWNzU1VGQlNTeFJRVUZSTEVOQlEzSkNMRWxCUVVrc1YwRkJWeXhEUVVGRExFTkJRVU1zUjBGQlJ5eERRVUZETEVkQlFVY3NRMEZCUXl4SFFVRkhMR3RDUVVGclFpeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVTjZSQ3hEUVVGRE8xRkJRMFlzU1VGQlNTeFBRVUZQTEVkQlFVY3NRMEZCUXl4RFFVRkRPMUZCUTJoQ0xFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNUMEZCVHl4RlFVRkZMR0ZCUVdFc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF6dFJRVU42UXl4UFFVRlBMRVZCUVVVc1EwRkJRenRSUVVOV0xFbEJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVTXNUMEZCVHl4RlFVRkZMR3RDUVVGclFpeERRVUZETEUxQlFVMHNSVUZCUlN4SlFVRkpMRU5CUVVNc1EwRkJRenRSUVVONlJDeFBRVUZQTEVsQlFVa3NRMEZCUXl4RFFVRkRPMUZCUTJJc1MwRkJTeXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVWQlFVVXNRMEZCUXl4SFFVRkhMR3RDUVVGclFpeERRVUZETEUxQlFVMHNSVUZCUlN4RFFVRkRMRVZCUVVVc1JVRkJSVHRaUVVOb1JDeEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMRTlCUVU4c1JVRkJSU3hyUWtGQmEwSXNRMEZCUXl4VlFVRlZMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVVzU1VGQlNTeERRVUZETEVOQlFVTTdXVUZEYUVVc1QwRkJUeXhKUVVGSkxFTkJRVU1zUTBGQlF6dFRRVU5vUWp0UlFVVkVMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zYVVKQlFXbENMRU5CUVVNc1QwRkJUeXhGUVVGRkxFVkJRVVU3V1VGRGJrTXNkVVJCUVZjc1EwRkRVQ3huUlVGQmIwSXNSVUZCUlN4RlFVTjBRaXh6UlVGQmMwVXNWMEZCVnl4TlFVRk5MR3RDUVVGclFpeEZRVUZGTEVOQlF6bEhMRU5CUVVNN1dVRkRSaXhQUVVGUE8xTkJRMVk3VVVGRlJDeEpRVUZKTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zVVVGQlVTeERRVUZETEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJRenRKUVVOcVJDeERRVUZETzBOQlEwbzdPenM3T3pzN096czdPenM3T3pzN1FVTjBSa1FzYTBSQlFXdEVPMEZCUjFJN1FVRkhia01zVFVGQlRTeHhRa0ZCY1VJN1NVRkpPVUk3T3p0UFFVZEhPMGxCUTBnc1dVRkRTU3hwUWtGQmIwTXNSVUZEY0VNc05rSkJRWE5FTzFGQlJYUkVMRWxCUVVrc1EwRkJReXhwUWtGQmFVSXNSMEZCUnl4cFFrRkJhVUlzUTBGQlF6dFJRVU16UXl4SlFVRkpMRU5CUVVNc05rSkJRVFpDTEVkQlFVY3NOa0pCUVRaQ0xFTkJRVU03U1VGRGRrVXNRMEZCUXp0SlFVVkVPenM3T3p0UFFVdEhPMGxCUTBnc2NVSkJRWEZDTEVOQlFVTXNWMEZCYlVJc1JVRkJSU3hYUVVFeVFqdFJRVU5zUlN4SlFVRkpMRmRCUVZjc1MwRkJTeXhUUVVGVExFVkJRVVU3V1VGRE0wSXNWMEZCVnl4SFFVRkhMRVZCUVVVc1EwRkJRenRUUVVOd1FqdFJRVVZFTEUxQlFVMHNhMEpCUVd0Q0xFZEJRM0JDTEVsQlFVa3NRMEZCUXl3MlFrRkJOa0lzUTBGQlF5eHJRa0ZCYTBJc1EwRkJRenRSUVVNeFJDeE5RVUZOTEdGQlFXRXNSMEZCUnl4clFrRkJhMElzUTBGQlF5eFZRVUZWTEVOQlFVTXNWMEZCVnl4RFFVRkRMRU5CUVVNN1VVRkRha1VzU1VGQlNTeGhRVUZoTEV0QlFVc3NVMEZCVXl4RlFVRkZPMWxCUXpkQ0xIZEVRVUZaTEVOQlExSXNaMFZCUVc5Q0xFVkJRVVVzUlVGRGRFSXNhMFZCUVd0RkxGZEJRVmNzYlVoQlFXMUlMRU5CUTI1TkxFTkJRVU03V1VGRFJpeFBRVUZQTzFOQlExWTdVVUZGUkN4TlFVRk5MRWxCUVVrc1IwRkJSeXhKUVVGSkxGRkJRVkVzUTBGRGNrSXNTVUZCU1N4WFFVRlhMRU5CUVVNc1lVRkJZU3hEUVVGRExGVkJRVlVzUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZEYUVRc1EwRkJRenRSUVVOR0xFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXl4RlFVRkZMR0ZCUVdFc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF6dFJRVU51UXl4SlFVRkpMRlZCUVZVc1IwRkJSeXhEUVVGRExFTkJRVU03VVVGRmJrSXNWMEZCVnl4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRExFOUJRV1VzUlVGQlJTeEhRVUZYTEVWQlFVVXNSVUZCUlR0WlFVTnFSQ3hOUVVGTkxFbEJRVWtzUjBGQlJ5eGhRVUZoTEVOQlFVTXNVMEZCVXl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8xbEJRekZETEZGQlFWRXNTVUZCU1N4RlFVRkZPMmRDUVVOV0xFdEJRVXNzVDBGQlR6dHZRa0ZEVWl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExGVkJRVlVzUlVGQlJTeFBRVUZQTEVOQlFVTXNRMEZCUXp0dlFrRkRia01zVlVGQlZTeEpRVUZKTEVOQlFVTXNRMEZCUXp0dlFrRkRhRUlzVFVGQlRUdG5Ra0ZGVml4TFFVRkxMRkZCUVZFN2IwSkJRMVFzU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4VlFVRlZMRVZCUVVVc1QwRkJUeXhGUVVGRkxFbEJRVWtzUTBGQlF5eERRVUZETzI5Q1FVTXhReXhWUVVGVkxFbEJRVWtzUTBGQlF5eERRVUZETzI5Q1FVTm9RaXhOUVVGTk8yZENRVVZXTEV0QlFVc3NUMEZCVHp0dlFrRkRVaXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEZWQlFWVXNSVUZCUlN4UFFVRlBMRVZCUVVVc1NVRkJTU3hEUVVGRExFTkJRVU03YjBKQlEzcERMRlZCUVZVc1NVRkJTU3hEUVVGRExFTkJRVU03YjBKQlEyaENMRTFCUVUwN1owSkJSVllzUzBGQlN5eFBRVUZQTzI5Q1FVTlNMRWxCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zVlVGQlZTeEZRVUZGTEU5QlFVOHNSVUZCUlN4SlFVRkpMRU5CUVVNc1EwRkJRenR2UWtGRE0wTXNWVUZCVlN4SlFVRkpMRU5CUVVNc1EwRkJRenR2UWtGRGFFSXNUVUZCVFR0blFrRkZWaXhMUVVGTExGRkJRVkU3YjBKQlExUXNTVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJReXhWUVVGVkxFVkJRVVVzVDBGQlR5eEZRVUZGTEVsQlFVa3NRMEZCUXl4RFFVRkRPMjlDUVVNelF5eFZRVUZWTEVsQlFVa3NRMEZCUXl4RFFVRkRPMjlDUVVOb1FpeE5RVUZOTzJGQlEySTdVVUZEVEN4RFFVRkRMRU5CUVVNc1EwRkJRenRSUVVWSUxFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zVDBGQlR5eEZRVUZGTEVWQlFVVTdXVUZEYmtNc2RVUkJRVmNzUTBGRFVDeG5SVUZCYjBJc1JVRkJSU3hGUVVOMFFpd3lSRUZCTWtRc1YwRkJWeXhOUVVGTkxFbEJRVWtzVlVGQlZTeERRVU4wUml4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVOa0xFVkJRVVVzUTBGRFRpeERRVUZETzFsQlEwWXNUMEZCVHp0VFFVTldPMkZCUVUwN1dVRkRTQ3hKUVVGSkxFTkJRVU1zYVVKQlFXbENMRU5CUVVNc1VVRkJVU3hEUVVGRExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXp0VFFVTm9SRHRKUVVOTUxFTkJRVU03UTBGRFNqczdPenM3T3pzN096czdPenM3T3pzN096dEJRelZHUkN4clJFRkJhMFE3UVVGRlZqdEJRVU5GTzBGQlJXNURMRTFCUVUwc2FVSkJRV2xDTzBOQlNUZENPMEZCUlUwc1RVRkJUU3gxUWtGQmRVSTdTVUZqYUVNN1VVRkRTU3hKUVVGSkxFTkJRVU1zYTBKQlFXdENMRWRCUVVjc1NVRkJTU3hIUVVGSExFVkJRVVVzUTBGQlF6dFJRVU53UXl4SlFVRkpMRU5CUVVNc2IwSkJRVzlDTEVkQlFVY3NTVUZCU1N4SFFVRkhMRVZCUVVVc1EwRkJRenRSUVVOMFF5eEpRVUZKTEVOQlFVTXNhMEpCUVd0Q0xFZEJRVWNzU1VGQlNTeHBSRUZCVXl4RlFVRkZMRU5CUVVNN1VVRkRNVU1zU1VGQlNTeERRVUZETEc5Q1FVRnZRaXhIUVVGSExFbEJRVWtzYVVSQlFWTXNSVUZCUlN4RFFVRkRPMGxCUTJoRUxFTkJRVU03U1VGRlJEczdUMEZGUnp0SlFVTklMSFZDUVVGMVFqdFJRVU51UWpzN1YwRkZSenRSUVVOSUxFbEJRVWtzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhIUVVGSExFTkJRVU1zWlVGQlpTeEZRVUZGTzFsQlEzcERMRVZCUVVVc1JVRkJSU3hEUVVGRE8xbEJRMHdzVlVGQlZTeEZRVUZGTEVOQlFVTTdXVUZEWWl4VFFVRlRMRVZCUVVVc1JVRkJSVHRUUVVOb1FpeERRVUZETEVOQlFVTTdVVUZEU0N4SlFVRkpMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNSMEZCUnl4RFFVRkRMSFZDUVVGMVFpeEZRVUZGTzFsQlEycEVMRVZCUVVVc1JVRkJSU3hEUVVGRE8xbEJRMHdzVlVGQlZTeEZRVUZGTEVOQlFVTTdXVUZEWWl4VFFVRlRMRVZCUVVVc1JVRkJSVHRUUVVOb1FpeERRVUZETEVOQlFVTTdVVUZEU0N4SlFVRkpMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNSMEZCUnl4RFFVRkRMRmxCUVZrc1JVRkJSVHRaUVVOMFF5eEZRVUZGTEVWQlFVVXNRMEZCUXp0WlFVTk1MRlZCUVZVc1JVRkJSU3hEUVVGRE8xbEJRMklzVTBGQlV5eEZRVUZGTEVWQlFVVTdVMEZEYUVJc1EwRkJReXhEUVVGRE8xRkJRMGdzU1VGQlNTeERRVUZETEd0Q1FVRnJRaXhEUVVGRExFZEJRVWNzUTBGQlF5eDFRa0ZCZFVJc1JVRkJSVHRaUVVOcVJDeEZRVUZGTEVWQlFVVXNRMEZCUXp0WlFVTk1MRlZCUVZVc1JVRkJSU3hEUVVGRE8xbEJRMklzVTBGQlV5eEZRVUZGTEVWQlFVVTdVMEZEYUVJc1EwRkJReXhEUVVGRE8xRkJRMGdzU1VGQlNTeERRVUZETEd0Q1FVRnJRaXhEUVVGRExFZEJRVWNzUTBGQlF5eG5Ra0ZCWjBJc1JVRkJSVHRaUVVNeFF5eEZRVUZGTEVWQlFVVXNRMEZCUXp0WlFVTk1MRlZCUVZVc1JVRkJSU3hEUVVGRE8xbEJRMklzVTBGQlV5eEZRVUZGTEVWQlFVVTdVMEZEYUVJc1EwRkJReXhEUVVGRE8xRkJRMGdzU1VGQlNTeERRVUZETEd0Q1FVRnJRaXhEUVVGRExFZEJRVWNzUTBGQlF5eGxRVUZsTEVWQlFVVTdXVUZEZWtNc1JVRkJSU3hGUVVGRkxFTkJRVU03V1VGRFRDeFZRVUZWTEVWQlFVVXNRMEZCUXp0WlFVTmlMRk5CUVZNc1JVRkJSU3hGUVVGRk8xTkJRMmhDTEVOQlFVTXNRMEZCUXp0UlFVTklMRWxCUVVrc1EwRkJReXhyUWtGQmEwSXNRMEZCUXl4SFFVRkhMRU5CUVVNc1lVRkJZU3hGUVVGRk8xbEJRM1pETEVWQlFVVXNSVUZCUlN4RFFVRkRPMWxCUTB3c1ZVRkJWU3hGUVVGRkxFTkJRVU03V1VGRFlpeFRRVUZUTEVWQlFVVXNSVUZCUlR0VFFVTm9RaXhEUVVGRExFTkJRVU03VVVGRFNDeEpRVUZKTEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU1zUjBGQlJ5eERRVUZETEhkQ1FVRjNRaXhGUVVGRk8xbEJRMnhFTEVWQlFVVXNSVUZCUlN4RFFVRkRPMWxCUTB3c1ZVRkJWU3hGUVVGRkxFTkJRVU03V1VGRFlpeFRRVUZUTEVWQlFVVXNSVUZCUlR0VFFVTm9RaXhEUVVGRExFTkJRVU03VVVGRFNDeEpRVUZKTEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU1zUjBGQlJ5eERRVUZETEZWQlFWVXNSVUZCUlR0WlFVTndReXhGUVVGRkxFVkJRVVVzUTBGQlF6dFpRVU5NTEZWQlFWVXNSVUZCUlN4RFFVRkRPMWxCUTJJc1UwRkJVeXhGUVVGRkxFVkJRVVU3VTBGRGFFSXNRMEZCUXl4RFFVRkRPMUZCUTBnN08xZEJSVWM3VVVGRFNDd3dRMEZCTUVNN1VVRkRNVU1zU1VGQlNTeERRVUZETEd0Q1FVRnJRaXhEUVVGRExFZEJRVWNzUTBGQlF5eGxRVUZsTEVWQlFVVTdXVUZEZWtNc1JVRkJSU3hGUVVGRkxFVkJRVVU3V1VGRFRpeFZRVUZWTEVWQlFVVXNRMEZCUXp0WlFVTmlMRk5CUVZNc1JVRkJSU3hGUVVGRk8xTkJRMmhDTEVOQlFVTXNRMEZCUXp0UlFVTklMRWxCUVVrc1EwRkJReXhyUWtGQmEwSXNRMEZCUXl4SFFVRkhMRU5CUVVNc1UwRkJVeXhGUVVGRk8xbEJRMjVETEVWQlFVVXNSVUZCUlN4RlFVRkZPMWxCUTA0c1ZVRkJWU3hGUVVGRkxFTkJRVU03V1VGRFlpeFRRVUZUTEVWQlFVVXNSVUZCUlR0VFFVTm9RaXhEUVVGRExFTkJRVU03VVVGRFNDd3dRMEZCTUVNN1VVRkRNVU1zU1VGQlNTeERRVUZETEd0Q1FVRnJRaXhEUVVGRExFZEJRVWNzUTBGQlF5eFRRVUZUTEVWQlFVVTdXVUZEYmtNc1JVRkJSU3hGUVVGRkxFVkJRVVU3V1VGRFRpeFZRVUZWTEVWQlFVVXNRMEZCUXp0WlFVTmlMQ3RDUVVFclFqdFpRVU12UWl4VFFVRlRMRVZCUVVVc1EwRkJReXhQUVVGUExFVkJRVVVzVDBGQlR5eERRVUZETzFOQlEyaERMRU5CUVVNc1EwRkJRenRSUVVOSUxFbEJRVWtzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhIUVVGSExFTkJRVU1zVDBGQlR5eEZRVUZGTzFsQlEycERMRVZCUVVVc1JVRkJSU3hGUVVGRk8xbEJRMDRzVlVGQlZTeEZRVUZGTEVOQlFVTTdXVUZEWWl4eFFrRkJjVUk3V1VGRGNrSXNVMEZCVXl4RlFVRkZMRU5CUVVNc1QwRkJUeXhEUVVGRE8xTkJRM1pDTEVOQlFVTXNRMEZCUXp0UlFVTklMRWxCUVVrc1EwRkJReXhyUWtGQmEwSXNRMEZCUXl4SFFVRkhMRU5CUVVNc1ZVRkJWU3hGUVVGRk8xbEJRM0JETEVWQlFVVXNSVUZCUlN4RlFVRkZPMWxCUTA0c1ZVRkJWU3hGUVVGRkxFTkJRVU03V1VGRFlpeHpRa0ZCYzBJN1dVRkRkRUlzVTBGQlV5eEZRVUZGTEVOQlFVTXNVVUZCVVN4RFFVRkRPMU5CUTNoQ0xFTkJRVU1zUTBGQlF6dFJRVU5JTEhkRFFVRjNRenRSUVVONFF5eEpRVUZKTEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU1zUjBGQlJ5eERRVUZETEZsQlFWa3NSVUZCUlR0WlFVTjBReXhGUVVGRkxFVkJRVVVzUlVGQlJUdFpRVU5PTEZWQlFWVXNSVUZCUlN4RFFVRkRPMWxCUTJJc1UwRkJVeXhGUVVGRkxFVkJRVVU3VTBGRGFFSXNRMEZCUXl4RFFVRkRPMUZCUTBnc1NVRkJTU3hEUVVGRExHdENRVUZyUWl4RFFVRkRMRWRCUVVjc1EwRkJReXhaUVVGWkxFVkJRVVU3V1VGRGRFTXNSVUZCUlN4RlFVRkZMRVZCUVVVN1dVRkRUaXhWUVVGVkxFVkJRVVVzUTBGQlF6dFpRVU5pTEZOQlFWTXNSVUZCUlN4RlFVRkZPMU5CUTJoQ0xFTkJRVU1zUTBGQlF6dFJRVU5JTEVsQlFVa3NRMEZCUXl4clFrRkJhMElzUTBGQlF5eEhRVUZITEVOQlFVTXNWMEZCVnl4RlFVRkZPMWxCUTNKRExFVkJRVVVzUlVGQlJTeEZRVUZGTzFsQlEwNHNWVUZCVlN4RlFVRkZMRU5CUVVNN1dVRkRZaXh6UTBGQmMwTTdXVUZEZEVNc1UwRkJVeXhGUVVGRkxFTkJRVU1zVDBGQlR5eEZRVUZGTEZGQlFWRXNSVUZCUlN4UlFVRlJMRU5CUVVNN1UwRkRNME1zUTBGQlF5eERRVUZETzFGQlEwZ3NTVUZCU1N4RFFVRkRMR3RDUVVGclFpeERRVUZETEVkQlFVY3NRMEZCUXl4VFFVRlRMRVZCUVVVN1dVRkRia01zUlVGQlJTeEZRVUZGTEVWQlFVVTdXVUZEVGl4VlFVRlZMRVZCUVVVc1EwRkJRenRaUVVOaUxITkRRVUZ6UXp0WlFVTjBReXhUUVVGVExFVkJRVVVzUTBGQlF5eFBRVUZQTEVWQlFVVXNVVUZCVVN4RlFVRkZMRkZCUVZFc1EwRkJRenRUUVVNelF5eERRVUZETEVOQlFVTTdVVUZEU0N4SlFVRkpMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNSMEZCUnl4RFFVRkRMRmRCUVZjc1JVRkJSVHRaUVVOeVF5eEZRVUZGTEVWQlFVVXNSVUZCUlR0WlFVTk9MRlZCUVZVc1JVRkJSU3hEUVVGRE8xbEJRMklzYlVSQlFXMUVPMWxCUTI1RUxGTkJRVk1zUlVGQlJTeERRVUZETEZGQlFWRXNSVUZCUlN4UlFVRlJMRVZCUVVVc1QwRkJUeXhGUVVGRkxFOUJRVThzUTBGQlF6dFRRVU53UkN4RFFVRkRMRU5CUVVNN1VVRkRTQ3hKUVVGSkxFTkJRVU1zYTBKQlFXdENMRU5CUVVNc1IwRkJSeXhEUVVGRExGbEJRVmtzUlVGQlJUdFpRVU4wUXl4RlFVRkZMRVZCUVVVc1JVRkJSVHRaUVVOT0xGVkJRVlVzUlVGQlJTeERRVUZETzFsQlEySXNjME5CUVhORE8xbEJRM1JETEZOQlFWTXNSVUZCUlN4RFFVRkRMRTlCUVU4c1JVRkJSU3hSUVVGUkxFVkJRVVVzVVVGQlVTeERRVUZETzFOQlF6TkRMRU5CUVVNc1EwRkJRenRSUVVOSUxFbEJRVWtzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhIUVVGSExFTkJRVU1zWVVGQllTeEZRVUZGTzFsQlEzWkRMRVZCUVVVc1JVRkJSU3hGUVVGRk8xbEJRMDRzVlVGQlZTeEZRVUZGTEVOQlFVTTdXVUZEWWl4elEwRkJjME03V1VGRGRFTXNVMEZCVXl4RlFVRkZMRU5CUVVNc1QwRkJUeXhGUVVGRkxGRkJRVkVzUlVGQlJTeFJRVUZSTEVOQlFVTTdVMEZETTBNc1EwRkJReXhEUVVGRE8xRkJRMGdzZDBOQlFYZERPMUZCUTNoRExFbEJRVWtzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhIUVVGSExFTkJRVU1zV1VGQldTeEZRVUZGTzFsQlEzUkRMRVZCUVVVc1JVRkJSU3hGUVVGRk8xbEJRMDRzVlVGQlZTeEZRVUZGTEVOQlFVTTdXVUZEWWl4dlJVRkJiMFU3V1VGRGNFVXNVMEZCVXl4RlFVRkZMRU5CUVVNc1QwRkJUeXhGUVVGRkxGRkJRVkVzUlVGQlJTeFJRVUZSTEVWQlFVVXNUMEZCVHl4RlFVRkZMRTlCUVU4c1JVRkJSU3hQUVVGUExFTkJRVU03VTBGRGRFVXNRMEZCUXl4RFFVRkRPMUZCUTBnc1NVRkJTU3hEUVVGRExHdENRVUZyUWl4RFFVRkRMRWRCUVVjc1EwRkJReXhWUVVGVkxFVkJRVVU3V1VGRGNFTXNSVUZCUlN4RlFVRkZMRVZCUVVVN1dVRkRUaXhWUVVGVkxFVkJRVVVzUTBGQlF6dFpRVU5pTEc5RlFVRnZSVHRaUVVOd1JTeFRRVUZUTEVWQlFVVXNRMEZCUXl4UFFVRlBMRVZCUVVVc1VVRkJVU3hGUVVGRkxGRkJRVkVzUlVGQlJTeFBRVUZQTEVWQlFVVXNUMEZCVHl4RlFVRkZMRTlCUVU4c1EwRkJRenRUUVVOMFJTeERRVUZETEVOQlFVTTdVVUZEU0N4SlFVRkpMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNSMEZCUnl4RFFVRkRMRmRCUVZjc1JVRkJSVHRaUVVOeVF5eEZRVUZGTEVWQlFVVXNSVUZCUlR0WlFVTk9MRlZCUVZVc1JVRkJSU3hEUVVGRE8xbEJRMklzYjBWQlFXOUZPMWxCUTNCRkxGTkJRVk1zUlVGQlJTeERRVUZETEU5QlFVOHNSVUZCUlN4UlFVRlJMRVZCUVVVc1VVRkJVU3hGUVVGRkxFOUJRVThzUlVGQlJTeFBRVUZQTEVWQlFVVXNUMEZCVHl4RFFVRkRPMU5CUTNSRkxFTkJRVU1zUTBGQlF6dFJRVU5JTEhsRFFVRjVRenRSUVVONlF5eEpRVUZKTEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU1zUjBGQlJ5eERRVUZETEd0Q1FVRnJRaXhGUVVGRk8xbEJRelZETEVWQlFVVXNSVUZCUlN4RlFVRkZPMWxCUTA0c1ZVRkJWU3hGUVVGRkxFTkJRVU03V1VGRFlpeFRRVUZUTEVWQlFVVXNSVUZCUlR0VFFVTm9RaXhEUVVGRExFTkJRVU03VVVGRFNDeEpRVUZKTEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU1zUjBGQlJ5eERRVUZETEhOQ1FVRnpRaXhGUVVGRk8xbEJRMmhFTEVWQlFVVXNSVUZCUlN4RlFVRkZPMWxCUTA0c1ZVRkJWU3hGUVVGRkxFTkJRVU03V1VGRFlpeDVRMEZCZVVNN1dVRkRla01zVTBGQlV5eEZRVUZGTEVOQlFVTXNUMEZCVHl4RlFVRkZMRTlCUVU4c1JVRkJSU3hQUVVGUExFTkJRVU03VTBGRGVrTXNRMEZCUXl4RFFVRkRPMUZCUTBnc1NVRkJTU3hEUVVGRExHdENRVUZyUWl4RFFVRkRMRWRCUVVjc1EwRkJReXgxUWtGQmRVSXNSVUZCUlR0WlFVTnFSQ3hGUVVGRkxFVkJRVVVzUlVGQlJUdFpRVU5PTEZWQlFWVXNSVUZCUlN4RFFVRkRPMWxCUTJJc05FTkJRVFJETzFsQlF6VkRMRk5CUVZNc1JVRkJSU3hEUVVGRExFOUJRVThzUlVGQlJTeFBRVUZQTEVWQlFVVXNUMEZCVHl4RFFVRkRPMU5CUTNwRExFTkJRVU1zUTBGQlF6dFJRVU5JTEVsQlFVa3NRMEZCUXl4clFrRkJhMElzUTBGQlF5eEhRVUZITEVOQlFVTXNaVUZCWlN4RlFVRkZPMWxCUTNwRExFVkJRVVVzUlVGQlJTeEZRVUZGTzFsQlEwNHNWVUZCVlN4RlFVRkZMRVZCUVVVN1dVRkRaQ3cwUTBGQk5FTTdXVUZETlVNc1UwRkJVeXhGUVVGRkxFTkJRVU1zVDBGQlR5eEZRVUZGTEU5QlFVOHNSVUZCUlN4UlFVRlJMRU5CUVVNN1UwRkRNVU1zUTBGQlF5eERRVUZETzFGQlEwZ3NTVUZCU1N4RFFVRkRMR3RDUVVGclFpeERRVUZETEVkQlFVY3NRMEZCUXl4eFFrRkJjVUlzUlVGQlJUdFpRVU12UXl4RlFVRkZMRVZCUVVVc1JVRkJSVHRaUVVOT0xGVkJRVlVzUlVGQlJTeERRVUZETzFsQlEySXNiMEpCUVc5Q08xbEJRM0JDTEZOQlFWTXNSVUZCUlN4RFFVRkRMRTlCUVU4c1EwRkJRenRUUVVOMlFpeERRVUZETEVOQlFVTTdVVUZGU0N4SlFVRkpMRU5CUVVNc2IwSkJRVzlDTEVOQlFVTXNSMEZCUnl4RFFVRkRMSGxDUVVGNVFpeEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRPMUZCUXpWRUxFbEJRVWtzUTBGQlF5eHZRa0ZCYjBJc1EwRkJReXhIUVVGSExFTkJRVU1zVlVGQlZTeEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRPMUZCUXpkRExFbEJRVWtzUTBGQlF5eHZRa0ZCYjBJc1EwRkJReXhIUVVGSExFTkJRVU1zVTBGQlV5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRPMUZCUXpWRExFbEJRVWtzUTBGQlF5eHZRa0ZCYjBJc1EwRkJReXhIUVVGSExFTkJRVU1zWVVGQllTeEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRPMUZCUTJoRUxFbEJRVWtzUTBGQlF5eHZRa0ZCYjBJc1EwRkJReXhIUVVGSExFTkJRVU1zWlVGQlpTeEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRPMUZCUTJ4RUxFbEJRVWtzUTBGQlF5eHZRa0ZCYjBJc1EwRkJReXhIUVVGSExFTkJRVU1zYlVKQlFXMUNMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRGRFUXNTVUZCU1N4RFFVRkRMRzlDUVVGdlFpeERRVUZETEVkQlFVY3NRMEZCUXl4aFFVRmhMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRGFFUXNTVUZCU1N4RFFVRkRMRzlDUVVGdlFpeERRVUZETEVkQlFVY3NRMEZCUXl4cFFrRkJhVUlzUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXp0UlFVTndSQ3hKUVVGSkxFTkJRVU1zYjBKQlFXOUNMRU5CUVVNc1IwRkJSeXhEUVVGRExHVkJRV1VzUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXp0UlFVTnNSQ3hKUVVGSkxFTkJRVU1zYjBKQlFXOUNMRU5CUVVNc1IwRkJSeXhEUVVGRExHTkJRV01zUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXp0UlFVTnFSQ3hKUVVGSkxFTkJRVU1zYjBKQlFXOUNMRU5CUVVNc1IwRkJSeXhEUVVGRExHTkJRV01zUlVGQlJTeEZRVUZGTEVOQlFVTXNRMEZCUXp0UlFVTnNSQ3hKUVVGSkxFTkJRVU1zYjBKQlFXOUNMRU5CUVVNc1IwRkJSeXhEUVVGRExGVkJRVlVzUlVGQlJTeEZRVUZGTEVOQlFVTXNRMEZCUXp0UlFVTTVReXhKUVVGSkxFTkJRVU1zYjBKQlFXOUNMRU5CUVVNc1IwRkJSeXhEUVVGRExIVkNRVUYxUWl4RlFVRkZMRVZCUVVVc1EwRkJReXhEUVVGRE8xRkJRek5FTEVsQlFVa3NRMEZCUXl4dlFrRkJiMElzUTBGQlF5eEhRVUZITEVOQlFVTXNhVUpCUVdsQ0xFVkJRVVVzUlVGQlJTeERRVUZETEVOQlFVTTdVVUZEY2tRc1NVRkJTU3hEUVVGRExHOUNRVUZ2UWl4RFFVRkRMRWRCUVVjc1EwRkJReXhWUVVGVkxFVkJRVVVzUjBGQlJ5eERRVUZETEVOQlFVTTdTVUZEYmtRc1EwRkJRenRKUVVWRU96czdPenRQUVV0SE8wbEJRMGdzYzBKQlFYTkNMRU5CUTJ4Q0xHZENRVUZyUXl4RlFVTnNReXhYUVVGdFFpeEZRVU51UWl4alFVRXlSRHRSUVVVelJDeFJRVUZSTEdkQ1FVRm5RaXhGUVVGRk8xbEJRM1JDTEV0QlFVc3NaMEpCUVdkQ0xFTkJRVU1zVlVGQlZUdG5Ra0ZETlVJc1NVRkJTU3hEUVVGRExHdENRVUZyUWl4RFFVRkRMRWRCUVVjc1EwRkJReXhYUVVGWExFVkJRVVVzWTBGQll5eERRVUZETEVOQlFVTTdaMEpCUTNwRUxFMUJRVTA3V1VGRFZpeExRVUZMTEdkQ1FVRm5RaXhEUVVGRExGbEJRVms3WjBKQlF6bENMRWxCUVVrc1EwRkJReXh2UWtGQmIwSXNRMEZCUXl4SFFVRkhMRU5CUVVNc1YwRkJWeXhGUVVGRkxHTkJRV01zUTBGQlF5eERRVUZETzJkQ1FVTXpSQ3hOUVVGTk8xbEJRMVk3WjBKQlEwa3NjMFJCUVZVc1EwRkRUaXhuUlVGQmIwSXNSVUZCUlN4RlFVTjBRaXcyUWtGQk5rSXNaMEpCUVdkQ0xFVkJRVVVzUTBGRGJFUXNRMEZCUXp0VFFVTlVPMGxCUTB3c1EwRkJRenREUVVOS08wRkJSVVE3TzBkQlJVYzdRVUZEU0N4SlFVRlpMR2RDUVVkWU8wRkJTRVFzVjBGQldTeG5Ra0ZCWjBJN1NVRkRlRUlzYlVWQlFXTTdTVUZEWkN4MVJVRkJaMEk3UVVGRGNFSXNRMEZCUXl4RlFVaFhMR2RDUVVGblFpeExRVUZvUWl4blFrRkJaMElzVVVGSE0wSTdPenM3T3pzN096czdPenM3T3p0QlEyeFJSQ3hyUkVGQmEwUTdRVUZKTTBNc1RVRkJUU3cwUWtGQk5FSTdTVUZIY2tNN08wOUJSVWM3U1VGRFNDeFpRVUZaTEhGQ1FVRTBRenRSUVVOd1JDeEpRVUZKTEVOQlFVTXNjVUpCUVhGQ0xFZEJRVWNzY1VKQlFYRkNMRU5CUVVNN1NVRkRka1FzUTBGQlF6dEpRVVZFT3p0UFFVVkhPMGxCUTBnc2VVSkJRWGxDTzFGQlEzSkNMRWxCUVVrc1EwRkJReXh4UWtGQmNVSXNRMEZCUXl4eFFrRkJjVUlzUTBGRE5VTXNkVUpCUVhWQ0xFTkJRekZDTEVOQlFVTTdTVUZEVGl4RFFVRkRPMGxCUlVRN08wOUJSVWM3U1VGRFNDeHBRa0ZCYVVJN1VVRkRZaXhKUVVGSkxFTkJRVU1zY1VKQlFYRkNMRU5CUVVNc2NVSkJRWEZDTEVOQlFVTXNXVUZCV1N4RFFVRkRMRU5CUVVNN1NVRkRia1VzUTBGQlF6dEpRVVZFT3p0UFFVVkhPMGxCUTBnc2VVSkJRWGxDTzFGQlEzSkNMRWxCUVVrc1EwRkJReXh4UWtGQmNVSXNRMEZCUXl4eFFrRkJjVUlzUTBGRE5VTXNkVUpCUVhWQ0xFTkJRekZDTEVOQlFVTTdTVUZEVGl4RFFVRkRPMGxCUlVRN08wOUJSVWM3U1VGRFNDeHJRa0ZCYTBJN1VVRkRaQ3hKUVVGSkxFTkJRVU1zY1VKQlFYRkNMRU5CUVVNc2NVSkJRWEZDTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zUTBGQlF6dEpRVU4yUlN4RFFVRkRPMGxCUlVRN08wOUJSVWM3U1VGRFNDeHBRa0ZCYVVJN1VVRkRZaXhKUVVGSkxFTkJRVU1zY1VKQlFYRkNMRU5CUVVNc2NVSkJRWEZDTEVOQlFVTXNaVUZCWlN4RFFVRkRMRU5CUVVNN1NVRkRkRVVzUTBGQlF6dEpRVVZFT3p0UFFVVkhPMGxCUTBnc01FSkJRVEJDTzFGQlEzUkNMRWxCUVVrc1EwRkJReXh4UWtGQmNVSXNRMEZCUXl4eFFrRkJjVUlzUTBGRE5VTXNkMEpCUVhkQ0xFTkJRek5DTEVOQlFVTTdTVUZEVGl4RFFVRkRPME5CUTBvN096czdPenM3T3pzN096czdPenRCUXpkRVJDeHJSRUZCYTBRN1FVRkZNME1zVFVGQlRTeFRRVUZUTzBsQlNXeENPenRQUVVWSE8wbEJRMGc3VVVGRFNTeEpRVUZKTEVOQlFVTXNSMEZCUnl4SFFVRkhMRWxCUVVrc1IwRkJSeXhGUVVGRkxFTkJRVU03VVVGRGNrSXNTVUZCU1N4RFFVRkRMRlZCUVZVc1IwRkJSeXhKUVVGSkxFZEJRVWNzUlVGQlJTeERRVUZETzBsQlEyaERMRU5CUVVNN1NVRkZSRHM3T3p0UFFVbEhPMGxCUTBnc1ZVRkJWU3hEUVVGRExFZEJRVms3VVVGRGJrSXNUMEZCVHl4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFZEJRVWNzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0SlFVTTNRaXhEUVVGRE8wbEJSVVE3T3pzN1QwRkpSenRKUVVOSUxGbEJRVmtzUTBGQlF5eExRVUZuUWp0UlFVTjZRaXhQUVVGUExFbEJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTXNSMEZCUnl4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRE8wbEJRM1JETEVOQlFVTTdTVUZGUkRzN096dFBRVWxITzBsQlEwZ3NSMEZCUnl4RFFVRkRMRWRCUVZrc1JVRkJSU3hMUVVGblFqdFJRVU01UWl4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFZEJRVWNzUTBGQlF5eEhRVUZITEVWQlFVVXNTMEZCU3l4RFFVRkRMRU5CUVVNN1VVRkRla0lzU1VGQlNTeERRVUZETEZWQlFWVXNRMEZCUXl4SFFVRkhMRU5CUVVNc1MwRkJTeXhGUVVGRkxFZEJRVWNzUTBGQlF5eERRVUZETzBsQlEzQkRMRU5CUVVNN1NVRkZSRHM3T3p0UFFVbEhPMGxCUTBnc1RVRkJUU3hEUVVGRExFZEJRVmtzUlVGQlJTeExRVUZuUWp0UlFVTnFReXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEUxQlFVMHNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRenRSUVVOeVFpeEpRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRMRTFCUVUwc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF6dEpRVU5zUXl4RFFVRkRPME5CUTBvN096czdPenM3T3pzN096czdPenM3T3pzN1FVTnVSRVFzYTBSQlFXdEVPMEZCUlZJN1FVRkhNVU03TzBkQlJVYzdRVUZEU1N4TlFVRk5MRzFDUVVGdFFqdEpRVzFDTlVJN08wOUJSVWM3U1VGRFNDeFpRVUZaTEc5Q1FVRnBRenRSUVVONlF5eEpRVUZKTEVOQlFVTXNiMEpCUVc5Q0xFZEJRVWNzYjBKQlFXOUNMRU5CUVVNN1VVRkRha1FzU1VGQlNTeERRVUZETEdkRFFVRm5ReXhIUVVGSExFZEJRVWNzUlVGQlJUdFpRVU42UXl4TlFVRk5MRWxCUVVrc1MwRkJTeXhEUVVOWUxEQkVRVUV3UkN4RFFVTTNSQ3hEUVVGRE8xRkJRMDRzUTBGQlF5eERRVUZETzFGQlEwWXNTVUZCU1N4RFFVRkRMRGhDUVVFNFFpeEhRVUZITEVkQlFVY3NSVUZCUlR0WlFVTjJReXhOUVVGTkxFbEJRVWtzUzBGQlN5eERRVU5ZTERCRVFVRXdSQ3hEUVVNM1JDeERRVUZETzFGQlEwNHNRMEZCUXl4RFFVRkRPMUZCUTBZc1NVRkJTU3hEUVVGRExHOURRVUZ2UXl4SFFVRkhMRWRCUVVjc1JVRkJSVHRaUVVNM1F5eE5RVUZOTEVsQlFVa3NTMEZCU3l4RFFVTllMRGhFUVVFNFJDeERRVU5xUlN4RFFVRkRPMUZCUTA0c1EwRkJReXhEUVVGRE8wbEJRMDRzUTBGQlF6dEpRVVZFT3pzN08wOUJTVWM3U1VGRFNDdzBRa0ZCTkVJc1EwRkRlRUlzUTBGQlV5eEZRVU5VTEVOQlFWTTdVVUZGVkN4UFFVRlBMRWxCUVVrc1EwRkJReXhuUTBGQlowTXNRMEZCUXl4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU03U1VGRGRrUXNRMEZCUXp0SlFVVkVPenM3TzA5QlNVYzdTVUZEU0N4blEwRkJaME1zUTBGRE5VSXNRMEZCVXl4RlFVTlVMRU5CUVZNN1VVRkZWQ3hQUVVGUExFbEJRVWtzUTBGQlF5eHZRMEZCYjBNc1EwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTTdTVUZETTBRc1EwRkJRenRKUVVWRU96czdPMDlCU1VjN1NVRkRTQ3d3UWtGQk1FSXNRMEZEZEVJc1EwRkJVeXhGUVVOVUxFTkJRVk03VVVGRlZDeFBRVUZQTEVsQlFVa3NRMEZCUXl3NFFrRkJPRUlzUTBGQlF5eERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNN1NVRkRja1FzUTBGQlF6dEpRVVZFT3p0UFFVVkhPMGxCUTBnc2VVSkJRWGxDTzFGQlEzSkNMRWxCUVVrc1EwRkJReXhyUWtGQmEwSTdXVUZEYmtJc1NVRkJTU3hEUVVGRExHOUNRVUZ2UWl4RFFVRkRMSEZDUVVGeFFpeEZRVUZGTEVOQlFVTTdVVUZEZEVRc1NVRkJTU3hEUVVGRExGbEJRVmtzUjBGQlJ5eEpRVUZKTEVOQlFVTXNiMEpCUVc5Q0xFTkJRVU1zWlVGQlpTeEZRVUZGTEVOQlFVTTdVVUZGYUVVc1NVRkJTU3hKUVVGSkxFTkJRVU1zYTBKQlFXdENMRWxCUVVrc1NVRkJTU3hEUVVGRExGbEJRVmtzUlVGQlJUdFpRVU01UXl4TlFVRk5MR2xDUVVGcFFpeEhRVU51UWl4SlFVRkpMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNXVUZCV1R0blFrRkRjRU1zU1VGQlNTeERRVUZETEd0Q1FVRnJRaXhEUVVGRExGZEJRVmNzUTBGQlF6dFpRVU40UXl4TlFVRk5MR2RDUVVGblFpeEhRVU5zUWl4SlFVRkpMRU5CUVVNc1dVRkJXU3hEUVVGRExGZEJRVmNzUjBGQlJ5eEpRVUZKTEVOQlFVTXNXVUZCV1N4RFFVRkRMRlZCUVZVc1EwRkJRenRaUVVOcVJTeEpRVUZKTEdsQ1FVRnBRaXhIUVVGSExHZENRVUZuUWl4RlFVRkZPMmRDUVVOMFF5eHpSRUZCVlN4RFFVTk9MR2RGUVVGdlFpeEZRVUZGTEVWQlEzUkNMSFZGUVVGMVJTeEZRVU4yUlN4RFFVRkRMRU5CUTBvc1EwRkJRenRuUWtGRFJpeEpRVUZKTEVOQlFVTXNTMEZCU3l4SFFVRkhMR2xDUVVGcFFpeEhRVUZITEdkQ1FVRm5RaXhEUVVGRE8yZENRVU5zUkN4SlFVRkpMRU5CUVVNc1owTkJRV2RETEVkQlFVY3NRMEZEY0VNc1EwRkJVeXhGUVVOVUxFTkJRVk1zUlVGRFdDeEZRVUZGTEVOQlFVTXNTVUZCU1N4RFFVRkRMSGREUVVGM1F5eERRVUZETEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJRenRuUWtGRGVrUXNTVUZCU1N4RFFVRkRMRGhDUVVFNFFpeEhRVUZITEVOQlFVTXNRMEZCVXl4RlFVRkZMRU5CUVZNc1JVRkJSU3hGUVVGRkxFTkJRek5FTEVsQlFVa3NRMEZCUXl4elEwRkJjME1zUTBGQlF5eERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNN1owSkJRM1JFTEVsQlFVa3NRMEZCUXl4dlEwRkJiME1zUjBGQlJ5eERRVU40UXl4RFFVRlRMRVZCUTFRc1EwRkJVeXhGUVVOWUxFVkJRVVVzUTBGQlF5eEpRVUZKTEVOQlFVTXNORU5CUVRSRExFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRPMkZCUTJoRk8ybENRVUZOTzJkQ1FVTklMSE5FUVVGVkxFTkJRMDRzWjBWQlFXOUNMRVZCUVVVc1JVRkRkRUlzZDBWQlFYZEZMRVZCUTNoRkxFTkJRVU1zUTBGRFNpeERRVUZETzJkQ1FVTkdMRWxCUVVrc1EwRkJReXhMUVVGTExFZEJRVWNzWjBKQlFXZENMRWRCUVVjc2FVSkJRV2xDTEVOQlFVTTdaMEpCUTJ4RUxFbEJRVWtzUTBGQlF5eG5RMEZCWjBNc1IwRkJSeXhEUVVOd1F5eERRVUZUTEVWQlExUXNRMEZCVXl4RlFVTllMRVZCUVVVc1EwRkJReXhKUVVGSkxFTkJRVU1zZVVOQlFYbERMRU5CUVVNc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETzJkQ1FVTXhSQ3hKUVVGSkxFTkJRVU1zT0VKQlFUaENMRWRCUVVjc1EwRkJReXhEUVVGVExFVkJRVVVzUTBGQlV5eEZRVUZGTEVWQlFVVXNRMEZETTBRc1NVRkJTU3hEUVVGRExIVkRRVUYxUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF6dG5Ra0ZEZGtRc1NVRkJTU3hEUVVGRExHOURRVUZ2UXl4SFFVRkhMRU5CUTNoRExFTkJRVk1zUlVGRFZDeERRVUZUTEVWQlExZ3NSVUZCUlN4RFFVRkRMRWxCUVVrc1EwRkJReXcyUTBGQk5rTXNRMEZCUXl4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU03WVVGRGFrVTdVMEZEU2p0SlFVTk1MRU5CUVVNN1NVRkZSRHM3T3p0UFFVbEhPMGxCUTBnc2QwTkJRWGRETEVOQlEzQkRMRU5CUVZNc1JVRkRWQ3hEUVVGVE8xRkJSVlFzVFVGQlRTeFhRVUZYTEVkQlFVY3NRMEZCUXl4SFFVRkhMRWxCUVVrc1EwRkJReXhyUWtGQmEwSXNRMEZCUXl4WFFVRlhMRU5CUVVNN1VVRkROVVFzVFVGQlRTeFhRVUZYTEVkQlEySXNTVUZCU1N4RFFVRkRMRXRCUVVzc1IwRkJSeXhEUVVGRExFTkJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU1zV1VGQldTeEhRVUZITEVkQlFVY3NRMEZCUXl4SFFVRkhMRWRCUVVjc1EwRkJRenRSUVVONFJTeEpRVU5KTEZkQlFWY3NSMEZCUnl4SFFVRkhPMWxCUTJwQ0xGZEJRVmNzUjBGQlJ5eEhRVUZITzFsQlEycENMRmRCUVZjc1IwRkJSeXhIUVVGSE8xbEJRMnBDTEZkQlFWY3NSMEZCUnl4SFFVRkhMRVZCUTI1Q08xbEJRMFVzVDBGQlR5eEpRVUZKTEdkRFFVRm5ReXhEUVVGRExFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVVXNTMEZCU3l4RFFVRkRMRU5CUVVNN1UwRkRjRVU3WVVGQlRUdFpRVU5JTEU5QlFVOHNTVUZCU1N4blEwRkJaME1zUTBGRGRrTXNTVUZCU1N4RlFVTktMRmRCUVZjc1IwRkJSeXhMUVVGTExFVkJRMjVDTEZkQlFWY3NSMEZCUnl4TFFVRkxMRU5CUTNSQ0xFTkJRVU03VTBGRFREdEpRVU5NTEVOQlFVTTdTVUZGUkRzN096dFBRVWxITzBsQlEwZ3NORU5CUVRSRExFTkJRVU1zUTBGQlV5eEZRVUZGTEVOQlFWTTdVVUZETjBRc1RVRkJUU3hYUVVGWExFZEJRVWNzUTBGQlF5eEhRVUZITEV0QlFVc3NRMEZCUXp0UlFVTTVRaXhOUVVGTkxGZEJRVmNzUjBGQlJ5eERRVUZETEVOQlFVTXNSMEZCUnl4TFFVRkxMRWRCUVVjc1IwRkJSeXhEUVVGRExFZEJRVWNzU1VGQlNTeERRVUZETEV0QlFVc3NSMEZCUnl4SFFVRkhMRU5CUVVNN1VVRkRla1FzVDBGQlR5eEpRVUZKTEc5RFFVRnZReXhEUVVNelF5eFhRVUZYTEVkQlFVY3NTVUZCU1N4RFFVRkRMR3RDUVVGclFpeERRVUZETEZkQlFWY3NSVUZEYWtRc1YwRkJWeXhIUVVGSExFbEJRVWtzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhaUVVGWkxFTkJRM0pFTEVOQlFVTTdTVUZEVGl4RFFVRkRPMGxCUlVRN096czdUMEZKUnp0SlFVTklMSE5EUVVGelF5eERRVUZETEVOQlFWTXNSVUZCUlN4RFFVRlRPMUZCUTNaRUxFMUJRVTBzVjBGQlZ5eEhRVUZITEVOQlFVTXNSMEZCUnl4RFFVRkRMRWRCUVVjc1IwRkJSeXhKUVVGSkxFTkJRVU1zYTBKQlFXdENMRU5CUVVNc1YwRkJWeXhEUVVGRExFTkJRVU03VVVGRGNFVXNUVUZCVFN4WFFVRlhMRWRCUTJJc1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eEhRVUZITEVOQlFVTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1IwRkJSeXhIUVVGSExFbEJRVWtzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhaUVVGWkxFTkJRVU1zUTBGQlF6dFJRVU53UlN4UFFVRlBMRWxCUVVrc09FSkJRVGhDTEVOQlEzSkRMRmRCUVZjc1IwRkJSeXhMUVVGTExFVkJRMjVDTEZkQlFWY3NSMEZCUnl4TFFVRkxMRU5CUTNSQ0xFTkJRVU03U1VGRFRpeERRVUZETzBsQlJVUTdPenM3VDBGSlJ6dEpRVU5JTEhsRFFVRjVReXhEUVVGRExFTkJRVk1zUlVGQlJTeERRVUZUTzFGQlF6RkVMRTFCUVUwc1YwRkJWeXhIUVVOaUxFbEJRVWtzUTBGQlF5eExRVUZMTEVkQlFVY3NRMEZCUXl4RFFVRkRMRWRCUVVjc1NVRkJTU3hEUVVGRExHdENRVUZyUWl4RFFVRkRMRmRCUVZjc1IwRkJSeXhIUVVGSExFTkJRVU1zUjBGQlJ5eEhRVUZITEVOQlFVTTdVVUZEZGtVc1RVRkJUU3hYUVVGWExFZEJRVWNzUTBGQlF5eEhRVUZITEVsQlFVa3NRMEZCUXl4clFrRkJhMElzUTBGQlF5eFpRVUZaTEVOQlFVTTdVVUZETjBRc1NVRkRTU3hYUVVGWExFZEJRVWNzUjBGQlJ6dFpRVU5xUWl4WFFVRlhMRWRCUVVjc1IwRkJSenRaUVVOcVFpeFhRVUZYTEVkQlFVY3NSMEZCUnp0WlFVTnFRaXhYUVVGWExFZEJRVWNzUjBGQlJ5eEZRVU51UWp0WlFVTkZMRTlCUVU4c1NVRkJTU3huUTBGQlowTXNRMEZCUXl4TFFVRkxMRVZCUVVVc1MwRkJTeXhGUVVGRkxFdEJRVXNzUTBGQlF5eERRVUZETzFOQlEzQkZPMkZCUVUwN1dVRkRTQ3hQUVVGUExFbEJRVWtzWjBOQlFXZERMRU5CUTNaRExFbEJRVWtzUlVGRFNpeFhRVUZYTEVkQlFVY3NTMEZCU3l4RlFVTnVRaXhYUVVGWExFZEJRVWNzUzBGQlN5eERRVU4wUWl4RFFVRkRPMU5CUTB3N1NVRkRUQ3hEUVVGRE8wbEJSVVE3T3pzN1QwRkpSenRKUVVOSUxEWkRRVUUyUXl4RFFVRkRMRU5CUVZNc1JVRkJSU3hEUVVGVE8xRkJRemxFTEUxQlFVMHNWMEZCVnl4SFFVRkhMRU5CUVVNc1EwRkJReXhIUVVGSExFdEJRVXNzUjBGQlJ5eEhRVUZITEVOQlFVTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1MwRkJTeXhIUVVGSExFZEJRVWNzUTBGQlF6dFJRVU42UkN4TlFVRk5MRmRCUVZjc1IwRkJSeXhEUVVGRExFZEJRVWNzUzBGQlN5eERRVUZETzFGQlF6bENMRTlCUVU4c1NVRkJTU3h2UTBGQmIwTXNRMEZETTBNc1YwRkJWeXhIUVVGSExFbEJRVWtzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhYUVVGWExFVkJRMnBFTEZkQlFWY3NSMEZCUnl4SlFVRkpMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNXVUZCV1N4RFFVTnlSQ3hEUVVGRE8wbEJRMDRzUTBGQlF6dEpRVVZFT3pzN08wOUJTVWM3U1VGRFNDeDFRMEZCZFVNc1EwRkJReXhEUVVGVExFVkJRVVVzUTBGQlV6dFJRVU40UkN4TlFVRk5MRmRCUVZjc1IwRkRZaXhEUVVGRExFbEJRVWtzUTBGQlF5eExRVUZMTEVkQlFVY3NRMEZCUXl4RFFVRkRMRWRCUVVjc1EwRkJReXhIUVVGSExFZEJRVWNzU1VGQlNTeERRVUZETEd0Q1FVRnJRaXhEUVVGRExGZEJRVmNzUTBGQlF5eERRVUZETzFGQlEyNUZMRTFCUVUwc1YwRkJWeXhIUVVGSExFTkJRVU1zUjBGQlJ5eERRVUZETEVkQlFVY3NSMEZCUnl4SlFVRkpMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNXVUZCV1N4RFFVRkRMRU5CUVVNN1VVRkRja1VzVDBGQlR5eEpRVUZKTERoQ1FVRTRRaXhEUVVOeVF5eFhRVUZYTEVkQlFVY3NTMEZCU3l4RlFVTnVRaXhYUVVGWExFZEJRVWNzUzBGQlN5eERRVU4wUWl4RFFVRkRPMGxCUTA0c1EwRkJRenREUVVOS08wRkJSVVE3TzBkQlJVYzdRVUZEU1N4TlFVRk5MR2REUVVGblF6dEpRVXQ2UXl4WlFVRlpMRTlCUVdkQ0xFVkJRVVVzUTBGQlV5eEZRVUZGTEVOQlFWTTdVVUZET1VNc1NVRkJTU3hEUVVGRExFOUJRVThzUjBGQlJ5eFBRVUZQTEVOQlFVTTdVVUZEZGtJc1NVRkJTU3hEUVVGRExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTTdVVUZEV0N4SlFVRkpMRU5CUVVNc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF6dEpRVU5tTEVOQlFVTTdRMEZEU2p0QlFVVkVPenRIUVVWSE8wRkJRMGtzVFVGQlRTeHZRMEZCYjBNN1NVRkpOME1zV1VGQldTeERRVUZUTEVWQlFVVXNRMEZCVXp0UlFVTTFRaXhKUVVGSkxFTkJRVU1zUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0UlFVTllMRWxCUVVrc1EwRkJReXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETzBsQlEyWXNRMEZCUXp0RFFVTktPMEZCUlVRN08wZEJSVWM3UVVGRFNTeE5RVUZOTERoQ1FVRTRRanRKUVVsMlF5eFpRVUZaTEVOQlFWTXNSVUZCUlN4RFFVRlRPMUZCUXpWQ0xFbEJRVWtzUTBGQlF5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMUZCUTFnc1NVRkJTU3hEUVVGRExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTTdTVUZEWml4RFFVRkRPME5CUTBvN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN08wRkRhbEpFT3pzN1IwRkhSenRCUVVOSkxFMUJRVTBzZFVKQlFYZENMRk5CUVZFc1MwRkJTenRKUVZFNVF5eFpRVUZaTEVsQlFYRkRPMUZCUXpkRExFdEJRVXNzUTBGQlF5eHZRa0ZCYjBJc1EwRkJReXhEUVVGRE8xRkJRelZDTEVsQlFVa3NRMEZCUXl4SlFVRkpMRWRCUVVjc1NVRkJTU3hEUVVGRE8wbEJRM0pDTEVOQlFVTTdRMEZEU2p0QlFVVkVPenRIUVVWSE8wRkJRMGtzVFVGQlRTeHhRa0ZCYzBJc1UwRkJVU3hMUVVGTE8wbEJUVFZETEZsQlFWa3NTVUZCYlVNN1VVRkRNME1zUzBGQlN5eERRVUZETEd0Q1FVRnJRaXhEUVVGRExFTkJRVU03VVVGRE1VSXNTVUZCU1N4RFFVRkRMRWxCUVVrc1IwRkJSeXhKUVVGSkxFTkJRVU03U1VGRGNrSXNRMEZCUXp0RFFVTktPMEZCUlVRN08wZEJSVWM3UVVGRFNTeE5RVUZOTEhsQ1FVRXdRaXhUUVVGUkxFdEJRVXM3U1VGRmFFUTdVVUZEU1N4TFFVRkxMRU5CUVVNc2MwSkJRWE5DTEVOQlFVTXNRMEZCUXp0SlFVTnNReXhEUVVGRE8wTkJRMG83UVVGRlJEczdSMEZGUnp0QlFVTkpMRTFCUVUwc1owSkJRV2xDTEZOQlFWRXNTMEZCU3p0SlFVVjJRenRSUVVOSkxFdEJRVXNzUTBGQlF5eGhRVUZoTEVOQlFVTXNRMEZCUXp0SlFVTjZRaXhEUVVGRE8wTkJRMG83UVVGRlJEczdSMEZGUnp0QlFVTkpMRTFCUVUwc2MwSkJRWFZDTEZOQlFWRXNTMEZCU3p0SlFVMDNReXhaUVVGWkxFbEJRVzlETzFGQlF6VkRMRXRCUVVzc1EwRkJReXh0UWtGQmJVSXNRMEZCUXl4RFFVRkRPMUZCUXpOQ0xFbEJRVWtzUTBGQlF5eEpRVUZKTEVkQlFVY3NTVUZCU1N4RFFVRkRPMGxCUTNKQ0xFTkJRVU03UTBGRFNqdEJRVVZFT3p0SFFVVkhPMEZCUTBrc1RVRkJUU3hqUVVGbExGTkJRVkVzUzBGQlN6dEpRVVZ5UXp0UlFVTkpMRXRCUVVzc1EwRkJReXhYUVVGWExFTkJRVU1zUTBGQlF6dEpRVU4yUWl4RFFVRkRPME5CUTBvN1FVRkZSRHM3UjBGRlJ6dEJRVU5KTEUxQlFVMHNjMEpCUVhWQ0xGTkJRVkVzUzBGQlN6dEpRVVUzUXp0UlFVTkpMRXRCUVVzc1EwRkJReXh0UWtGQmJVSXNRMEZCUXl4RFFVRkRPMGxCUXk5Q0xFTkJRVU03UTBGRFNqdEJRVVZFT3p0SFFVVkhPMEZCUTBrc1RVRkJUU3h4UWtGQmMwSXNVMEZCVVN4TFFVRkxPMGxCUlRWRE8xRkJRMGtzUzBGQlN5eERRVUZETEd0Q1FVRnJRaXhEUVVGRExFTkJRVU03U1VGRE9VSXNRMEZCUXp0RFFVTktPMEZCUlVRN08wZEJSVWM3UVVGRFNTeE5RVUZOTEc5Q1FVRnhRaXhUUVVGUkxFdEJRVXM3U1VGRk0wTTdVVUZEU1N4TFFVRkxMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTXNRMEZCUXp0SlFVTTNRaXhEUVVGRE8wTkJRMG83UVVGRlJEczdSMEZGUnp0QlFVTkpMRTFCUVUwc2FVSkJRV3RDTEZOQlFWRXNTMEZCU3p0SlFVVjRRenRSUVVOSkxFdEJRVXNzUTBGQlF5eGpRVUZqTEVOQlFVTXNRMEZCUXp0SlFVTXhRaXhEUVVGRE8wTkJRMG83UVVGRlJEczdSMEZGUnp0QlFVTkpMRTFCUVUwc2RVSkJRWGRDTEZOQlFWRXNTMEZCU3p0SlFWRTVReXhaUVVGWkxFbEJRWEZETzFGQlF6ZERMRXRCUVVzc1EwRkJReXh2UWtGQmIwSXNRMEZCUXl4RFFVRkRPMUZCUXpWQ0xFbEJRVWtzUTBGQlF5eEpRVUZKTEVkQlFVY3NTVUZCU1N4RFFVRkRPMGxCUTNKQ0xFTkJRVU03UTBGRFNqdEJRVVZFT3p0SFFVVkhPMEZCUTBrc1RVRkJUU3h2UWtGQmNVSXNVMEZCVVN4TFFVRkxPMGxCVVRORExGbEJRVmtzU1VGQmEwTTdVVUZETVVNc1MwRkJTeXhEUVVGRExHbENRVUZwUWl4RFFVRkRMRU5CUVVNN1VVRkRla0lzU1VGQlNTeERRVUZETEVsQlFVa3NSMEZCUnl4SlFVRkpMRU5CUVVNN1NVRkRja0lzUTBGQlF6dERRVU5LTzBGQlJVUTdPMGRCUlVjN1FVRkRTU3hOUVVGTkxIRkNRVUZ6UWl4VFFVRlJMRXRCUVVzN1NVRlJOVU1zV1VGQldTeEpRVUZ0UXp0UlFVTXpReXhMUVVGTExFTkJRVU1zYTBKQlFXdENMRU5CUVVNc1EwRkJRenRSUVVNeFFpeEpRVUZKTEVOQlFVTXNTVUZCU1N4SFFVRkhMRWxCUVVrc1EwRkJRenRKUVVOeVFpeERRVUZETzBOQlEwbzdRVUZGUkRzN1IwRkZSenRCUVVOSkxFMUJRVTBzY1VKQlFYTkNMRk5CUVZFc1MwRkJTenRKUVZFMVF5eFpRVUZaTEVsQlFXMURPMUZCUXpORExFdEJRVXNzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhEUVVGRE8xRkJRekZDTEVsQlFVa3NRMEZCUXl4SlFVRkpMRWRCUVVjc1NVRkJTU3hEUVVGRE8wbEJRM0pDTEVOQlFVTTdRMEZEU2p0QlFVVkVPenRIUVVWSE8wRkJRMGtzVFVGQlRTeHhRa0ZCYzBJc1UwRkJVU3hMUVVGTE8wbEJSVFZETzFGQlEwa3NTMEZCU3l4RFFVRkRMR3RDUVVGclFpeERRVUZETEVOQlFVTTdTVUZET1VJc1EwRkJRenREUVVOS08wRkJSVVE3TzBkQlJVYzdRVUZEU1N4TlFVRk5MR3RDUVVGdFFpeFRRVUZSTEV0QlFVczdTVUZGZWtNN1VVRkRTU3hMUVVGTExFTkJRVU1zWlVGQlpTeERRVUZETEVOQlFVTTdTVUZETTBJc1EwRkJRenREUVVOS08wRkJSVVE3TzBkQlJVYzdRVUZEU1N4TlFVRk5MSEZDUVVGelFpeFRRVUZSTEV0QlFVczdTVUZGTlVNN1VVRkRTU3hMUVVGTExFTkJRVU1zWlVGQlpTeERRVUZETEVOQlFVTTdTVUZETTBJc1EwRkJRenREUVVOS08wRkJSVVE3TzBkQlJVYzdRVUZEU1N4TlFVRk5MSGRDUVVGNVFpeFRRVUZSTEV0QlFVczdTVUZGTDBNN1VVRkRTU3hMUVVGTExFTkJRVU1zYTBKQlFXdENMRU5CUVVNc1EwRkJRenRKUVVNNVFpeERRVUZETzBOQlEwbzdRVUZGUkRzN1IwRkZSenRCUVVOSkxFMUJRVTBzYjBKQlFYRkNMRk5CUVZFc1MwRkJTenRKUVVVelF6dFJRVU5KTEV0QlFVc3NRMEZCUXl4cFFrRkJhVUlzUTBGQlF5eERRVUZETzBsQlF6ZENMRU5CUVVNN1EwRkRTanRCUVVWRU96dEhRVVZITzBGQlEwa3NUVUZCVFN4dlFrRkJjVUlzVTBGQlVTeExRVUZMTzBsQlRUTkRMRmxCUVZrc1NVRkJhME03VVVGRE1VTXNTMEZCU3l4RFFVRkRMR2xDUVVGcFFpeERRVUZETEVOQlFVTTdVVUZEZWtJc1NVRkJTU3hEUVVGRExFbEJRVWtzUjBGQlJ5eEpRVUZKTEVOQlFVTTdTVUZEY2tJc1EwRkJRenREUVVOS08wRkJSVVE3TzBkQlJVYzdRVUZEU1N4TlFVRk5MR1ZCUVdkQ0xGTkJRVkVzUzBGQlN6dEpRVVYwUXp0UlFVTkpMRXRCUVVzc1EwRkJReXhaUVVGWkxFTkJRVU1zUTBGQlF6dEpRVU40UWl4RFFVRkRPME5CUTBvN1FVRkZSRHM3TzBkQlIwYzdRVUZEU1N4TlFVRk5MSFZDUVVGM1FpeFRRVUZSTEV0QlFVczdTVUZOT1VNc1dVRkJXU3hKUVVGeFF6dFJRVU0zUXl4TFFVRkxMRU5CUVVNc2IwSkJRVzlDTEVOQlFVTXNRMEZCUXp0UlFVTTFRaXhKUVVGSkxFTkJRVU1zU1VGQlNTeEhRVUZITEVsQlFVa3NRMEZCUXp0SlFVTnlRaXhEUVVGRE8wTkJRMG83UVVGRlJEczdSMEZGUnp0QlFVTkpMRTFCUVUwc2IwSkJRWEZDTEZOQlFWRXNTMEZCU3p0SlFWVXpReXhaUVVGWkxFbEJRV3RETzFGQlF6RkRMRXRCUVVzc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4RFFVRkRPMUZCUTNwQ0xFbEJRVWtzUTBGQlF5eEpRVUZKTEVkQlFVY3NTVUZCU1N4RFFVRkRPMGxCUTNKQ0xFTkJRVU03UTBGRFNqdEJRVVZFT3p0SFFVVkhPMEZCUTBrc1RVRkJUU3h2UWtGQmNVSXNVMEZCVVN4TFFVRkxPMGxCUlRORE8xRkJRMGtzUzBGQlN5eERRVUZETEdsQ1FVRnBRaXhEUVVGRExFTkJRVU03U1VGRE4wSXNRMEZCUXp0RFFVTktPMEZCUlVRN08wZEJSVWM3UVVGRFNTeE5RVUZOTEd0Q1FVRnRRaXhUUVVGUkxFdEJRVXM3U1VGTmVrTXNXVUZCV1N4SlFVRm5RenRSUVVONFF5eExRVUZMTEVOQlFVTXNaVUZCWlN4RFFVRkRMRU5CUVVNN1VVRkRka0lzU1VGQlNTeERRVUZETEVsQlFVa3NSMEZCUnl4SlFVRkpMRU5CUVVNN1NVRkRja0lzUTBGQlF6dERRVU5LTzBGQlJVUTdPMGRCUlVjN1FVRkRTU3hOUVVGTkxIZENRVUY1UWl4VFFVRlJMRXRCUVVzN1NVRlJMME1zV1VGQldTeEpRVUZ6UXp0UlFVTTVReXhMUVVGTExFTkJRVU1zY1VKQlFYRkNMRU5CUVVNc1EwRkJRenRSUVVNM1FpeEpRVUZKTEVOQlFVTXNTVUZCU1N4SFFVRkhMRWxCUVVrc1EwRkJRenRKUVVOeVFpeERRVUZETzBOQlEwbzdRVUZGUkRzN1IwRkZSenRCUVVOSkxFMUJRVTBzYzBKQlFYVkNMRk5CUVZFc1MwRkJTenRKUVUwM1F5eFpRVUZaTEVsQlFXOURPMUZCUXpWRExFdEJRVXNzUTBGQlF5eHRRa0ZCYlVJc1EwRkJReXhEUVVGRE8xRkJRek5DTEVsQlFVa3NRMEZCUXl4SlFVRkpMRWRCUVVjc1NVRkJTU3hEUVVGRE8wbEJRM0pDTEVOQlFVTTdRMEZEU2p0QlFVVkVPenRIUVVWSE8wRkJRMGtzVFVGQlRTeHZRa0ZCY1VJc1UwRkJVU3hMUVVGTE8wbEJUVE5ETEZsQlFWa3NTVUZCYTBNN1VVRkRNVU1zUzBGQlN5eERRVUZETEdsQ1FVRnBRaXhEUVVGRExFTkJRVU03VVVGRGVrSXNTVUZCU1N4RFFVRkRMRWxCUVVrc1IwRkJSeXhKUVVGSkxFTkJRVU03U1VGRGNrSXNRMEZCUXp0RFFVTktPMEZCZDBORU96dEhRVVZITzBGQlEwa3NUVUZCVFN4dlFrRkJjVUlzVTBGQlVTeExRVUZMTzBsQlJ6TkRMRmxCUVZrc1NVRkJhME03VVVGRE1VTXNTMEZCU3l4RFFVRkRMR2xDUVVGcFFpeERRVUZETEVOQlFVTTdVVUZEZWtJc1NVRkJTU3hEUVVGRExFbEJRVWtzUjBGQlJ5eEpRVUZKTEVOQlFVTTdTVUZEY2tJc1EwRkJRenREUVVOS08wRkJSVVE3TzBkQlJVYzdRVUZEU1N4TlFVRk5MSEZDUVVGelFpeFRRVUZSTEV0QlFVczdTVUZGTlVNN1VVRkRTU3hMUVVGTExFTkJRVU1zYTBKQlFXdENMRU5CUVVNc1EwRkJRenRKUVVNNVFpeERRVUZETzBOQlEwbzdRVUZGUkRzN1IwRkZSenRCUVVOSkxFMUJRVTBzYlVKQlFXOUNMRk5CUVZFc1MwRkJTenRKUVVVeFF6dFJRVU5KTEV0QlFVc3NRMEZCUXl4blFrRkJaMElzUTBGQlF5eERRVUZETzBsQlF6VkNMRU5CUVVNN1EwRkRTanRCUVZORU96dEhRVVZITzBGQlEwa3NUVUZCVFN4WlFVRmhMRk5CUVZFc1MwRkJTenRKUVVkdVF5eFpRVUZaTEVsQlFUQkNPMUZCUTJ4RExFdEJRVXNzUTBGQlF5eFRRVUZUTEVOQlFVTXNRMEZCUXp0UlFVTnFRaXhKUVVGSkxFTkJRVU1zU1VGQlNTeEhRVUZITEVsQlFVa3NRMEZCUXp0SlFVTnlRaXhEUVVGRE8wTkJRMG83UVVGdlEwMHNUVUZCVFN4WlFVRmhMRk5CUVZFc1YwRkJWenRKUVVONlF6czdPenRQUVVsSE8wbEJRMGtzWVVGQllTeERRVUZETEVOQlFYTkNPMUZCUTNaRExFOUJRVThzUzBGQlN5eERRVUZETEdGQlFXRXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRKUVVOc1F5eERRVUZETzBsQlJVUTdPenM3VDBGSlJ6dEpRVU5KTEdkQ1FVRm5RaXhEUVVkeVFpeEpRVUZQTEVWQlFVVXNVVUZCWjBNN1VVRkRka01zUzBGQlN5eERRVUZETEdkQ1FVRm5RaXhEUVVGRExFbEJRVWtzUlVGQlJTeFJRVUZSTEVOQlFVTXNRMEZCUXp0SlFVTXpReXhEUVVGRE8wbEJSVVE3T3pzN1QwRkpSenRKUVVOSkxHMUNRVUZ0UWl4RFFVZDRRaXhKUVVGUExFVkJRVVVzVVVGQlowTTdVVUZEZGtNc1MwRkJTeXhEUVVGRExHMUNRVUZ0UWl4RFFVRkRMRWxCUVVrc1JVRkJSU3hSUVVGUkxFTkJRVU1zUTBGQlF6dEpRVU01UXl4RFFVRkRPME5CUTBvN096czdPenM3T3pzN096czdPenRCUXpOb1FrUXNhMFJCUVd0RU8wRkJTVE5ETEUxQlFVMHNiMEpCUVc5Q08wbEJSemRDTzFGQlEwa3NTVUZCU1N4RFFVRkRMRzFDUVVGdFFpeEhRVUZITEVWQlFVVXNRMEZCUXp0SlFVTnNReXhEUVVGRE8wbEJSVVE3T3p0UFFVZEhPMGxCUTBnc2NVSkJRWEZDTEVOQlFVTXNVVUZCTkVJN1VVRkRPVU1zU1VGQlNTeERRVUZETEcxQ1FVRnRRaXhEUVVGRExFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXp0SlFVTTFReXhEUVVGRE8wbEJSVVE3TzA5QlJVYzdTVUZEU0N4aFFVRmhPMUZCUTFRc1MwRkJTeXhOUVVGTkxGRkJRVkVzU1VGQlNTeEpRVUZKTEVOQlFVTXNiVUpCUVcxQ0xFVkJRVVU3V1VGRE4wTXNVVUZCVVN4RlFVRkZMRU5CUVVNN1UwRkRaRHRSUVVORUxFbEJRVWtzUTBGQlF5eHRRa0ZCYlVJc1IwRkJSeXhGUVVGRkxFTkJRVU03U1VGRGJFTXNRMEZCUXp0RFFVTktPenM3T3pzN096czdPenM3T3pzN096dEJRelZDUkN4clJFRkJhMFE3UVVGRlVqdEJRVVV4UXpzN1IwRkZSenRCUVVOSkxFMUJRVTBzVVVGQlVUdEpRVU5xUWpzN08wOUJSMGM3U1VGRFNDeE5RVUZOTEVOQlFVTXNjVUpCUVhGQ0xFTkJRVU1zU1VGQlowSXNSVUZCUlN4SlFVRnJRanRSUVVNM1JDeDNSVUZCZDBVN1VVRkRlRVVzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4VFFVRlRMRVZCUVVVN1dVRkRha0lzU1VGQlNTeERRVUZETEZGQlFWRXNSMEZCUnl4RlFVRkZMRU5CUVVNN1dVRkRia0lzU1VGQlNTeERRVUZETEZOQlFWTXNSMEZCUnl4RlFVRkZMRU5CUVVNN1dVRkRjRUlzU1VGQlNTeERRVUZETEZOQlFWTXNSMEZCUnl4SlFVRkpMRU5CUVVNN1dVRkRkRUlzU1VGQlNTeERRVUZETEV0QlFVc3NSMEZCUnl4TFFVRkxMRU5CUVVNN1dVRkRia0lzU1VGQlNTeERRVUZETEVsQlFVa3NSMEZCUnl4RFFVRkRMRU5CUVVNN1dVRkRaQ3hKUVVGSkxFTkJRVU1zU1VGQlNTeEhRVUZITEVWQlFVVXNRMEZCUXp0WlFVTm1MRWxCUVVrc1EwRkJReXhqUVVGakxFZEJRVWNzU1VGQlNTeEpRVUZKTEVWQlFVVXNRMEZCUXl4UFFVRlBMRVZCUVVVc1EwRkJRenRaUVVNelF5eHpSRUZCVlN4RFFVTk9MR2RGUVVGdlFpeEZRVUZGTEVWQlEzUkNMRGhDUVVFNFFpeEZRVU01UWl4RFFVRkRMRU5CUTBvc1EwRkJRenRUUVVOTU8xRkJSVVFzVFVGQlRTeHBRa0ZCYVVJc1IwRkJSeXhKUVVGSkxGZEJRVmNzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXl4TlFVRk5MRU5CUTNSRUxFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUTJoQ0xFTkJRVU03VVVGRFJpeHpSRUZCVlN4RFFVRkRMR2RGUVVGdlFpeEZRVUZGTEVWQlFVVXNhVUpCUVdsQ0xFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTTdVVUZEZWtRc1NVRkJTU3hEUVVGRExGTkJRVk1zUjBGQlJ5eHBRa0ZCYVVJc1EwRkJRenRKUVVOMlF5eERRVUZETzBsQlJVUTdPenRQUVVkSE8wbEJRMGdzVFVGQlRTeERRVUZETEc5Q1FVRnZRaXhEUVVGRExFbEJRV2RDTEVWQlFVVXNTVUZCYTBJN1VVRkROVVFzZDBWQlFYZEZPMUZCUTNoRkxFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNVMEZCVXl4RlFVRkZPMWxCUTJwQ0xFbEJRVWtzUTBGQlF5eFJRVUZSTEVkQlFVY3NSVUZCUlN4RFFVRkRPMWxCUTI1Q0xFbEJRVWtzUTBGQlF5eFRRVUZUTEVkQlFVY3NSVUZCUlN4RFFVRkRPMWxCUTNCQ0xFbEJRVWtzUTBGQlF5eFRRVUZUTEVkQlFVY3NTVUZCU1N4RFFVRkRPMWxCUTNSQ0xFbEJRVWtzUTBGQlF5eExRVUZMTEVkQlFVY3NTMEZCU3l4RFFVRkRPMWxCUTI1Q0xFbEJRVWtzUTBGQlF5eEpRVUZKTEVkQlFVY3NRMEZCUXl4RFFVRkRPMWxCUTJRc1NVRkJTU3hEUVVGRExFbEJRVWtzUjBGQlJ5eEZRVUZGTEVOQlFVTTdXVUZEWml4SlFVRkpMRU5CUVVNc1kwRkJZeXhIUVVGSExFbEJRVWtzU1VGQlNTeEZRVUZGTEVOQlFVTXNUMEZCVHl4RlFVRkZMRU5CUVVNN1dVRkRNME1zYzBSQlFWVXNRMEZEVGl4blJVRkJiMElzUlVGQlJTeEZRVU4wUWl3NFFrRkJPRUlzUlVGRE9VSXNRMEZCUXl4RFFVTktMRU5CUVVNN1UwRkRURHRSUVVWRUxFMUJRVTBzV1VGQldTeEhRVUZITEVsQlFVa3NWMEZCVnl4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRExFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRGNrVXNjMFJCUVZVc1EwRkJReXhuUlVGQmIwSXNSVUZCUlN4RlFVRkZMRmxCUVZrc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF6dFJRVU53UkN4SlFVRkpMRU5CUVVNc1VVRkJVU3hIUVVGSExGbEJRVmtzUTBGQlF6dEpRVU5xUXl4RFFVRkRPMGxCUlVRN096dFBRVWRITzBsQlEwZ3NUVUZCVFN4RFFVRkRMRzlDUVVGdlFpeERRVUZETEVsQlFXZENMRVZCUVVVc1NVRkJhMEk3VVVGRE5VUXNaMFZCUVdkRk8xRkJRMmhGTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1UwRkJVenRaUVVGRkxFOUJRVTg3VVVGRk5VSXNlVVJCUVhsRU8xRkJRM3BFTEVsQlFVa3NRMEZCUXl4SlFVRkpMRWRCUVVjc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGRGFrSXNTVUZCU1N4UlFVRlJMRU5CUVVNc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTXNSVUZCUlN4SlFVRkpMRU5CUVVNN1dVRkRia1FzUzBGQlN5eERRVUZETEcxRVFVRnRSQ3hEUVVOb1JTeERRVUZETzFGQlJVWXNiVU5CUVcxRE8xRkJRMjVETEUxQlFVMHNVMEZCVXl4SFFVRkhMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRPMUZCUlhCRExEaERRVUU0UXp0UlFVTTVReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNc1EwRkJRenRSUVVVeFFpeHpRa0ZCYzBJN1VVRkRkRUlzYzBSQlFWVXNRMEZEVGl4blJVRkJiMElzUlVGQlJTeEZRVU4wUWl4M1FrRkJkMElzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4TlFVRk5MRWxCUVVrc1NVRkJTU3hEUVVGRExFbEJRVWtzUlVGQlJTeEZRVU4yUkN4RFFVRkRMRU5CUTBvc1EwRkJRenRSUVVWR0xFbEJRVWtzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4TlFVRk5MRXRCUVVzc1NVRkJTU3hEUVVGRExFbEJRVWtzUlVGQlJUdFpRVU5vUXl4SlFVRkpMRU5CUVVNc1UwRkJVeXhIUVVGSExFdEJRVXNzUTBGQlF6dFpRVU4yUWl4SlFVRkpMRU5CUVVNc1MwRkJTeXhIUVVGSExFbEJRVWtzUTBGQlF6dFpRVU5zUWl4elJFRkJWU3hEUVVGRExHZEZRVUZ2UWl4RlFVRkZMRVZCUVVVc2QwSkJRWGRDTEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNN1dVRkRhRVVzVFVGQlRTeG5Ra0ZCWjBJc1IwRkJSeXhKUVVGSkxFbEJRVWtzUlVGQlJTeERRVUZETEU5QlFVOHNSVUZCUlN4SFFVRkhMRWxCUVVrc1EwRkJReXhqUVVGakxFTkJRVU03V1VGRGNFVXNUVUZCVFN4bFFVRmxMRWRCUVVjc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGRE9VSXNRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hIUVVGSExFVkJRVVVzUjBGQlJ5eEpRVUZKTEVOQlFVTXNSMEZCUnl4blFrRkJaMElzUTBGRE4wTXNRMEZCUXp0WlFVTkdMSE5FUVVGVkxFTkJRMDRzWjBWQlFXOUNMRVZCUVVVc1JVRkRkRUlzTmtKQlFUWkNMR1ZCUVdVc1lVRkRlRU1zWjBKQlFXZENMRWRCUVVjc1NVRkRka0lzVlVGQlZTeEZRVU5XTEVOQlFVTXNRMEZEU2l4RFFVRkRPMWxCUlVZc2MwSkJRWE5DTzFsQlEzUkNPenM3TzJWQlNVYzdXVUZEU0N4TlFVRk5MRkZCUVZFc1IwRkJSeXhKUVVGSkxFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RlFVRkZMRVZCUVVVc1NVRkJTU3hGUVVGRkxFbEJRVWtzUTBGQlF5eFJRVUZSTEVWQlFVVXNRMEZCUXl4RFFVRkRPMWxCUXpsRUxFMUJRVTBzUTBGQlF5eEhRVUZITEZGQlFWRXNRMEZCUXl4aFFVRmhMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU03V1VGRGRFTXNRMEZCUXl4RFFVRkRMRmxCUVZrc1EwRkJReXhOUVVGTkxFVkJRVVVzUjBGQlJ5eERRVUZETEdWQlFXVXNRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJReXhEUVVGRE8xbEJRM1JFTEVOQlFVTXNRMEZCUXl4WlFVRlpMRU5CUVVNc1ZVRkJWU3hGUVVGRkxGbEJRVmtzU1VGQlNTeERRVUZETEZOQlFWTXNSVUZCUlN4RFFVRkRMRU5CUVVNN1dVRkRla1FzVVVGQlVTeERRVUZETEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03V1VGRGVFSXNhVVpCUVdsR08xbEJRMnBHTEVOQlFVTXNRMEZCUXl4TlFVRk5MRVZCUVVVc1EwRkJRenRUUVVOa08yRkJRVTBzU1VGQlNTeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTFCUVUwc1IwRkJSeXhKUVVGSkxFTkJRVU1zU1VGQlNTeEZRVUZGTzFsQlEzSkRMRWxCUVVrc1EwRkJReXhUUVVGVExFZEJRVWNzUzBGQlN5eERRVUZETzFsQlEzWkNMSGRFUVVGWkxFTkJRMUlzWjBWQlFXOUNMRVZCUVVVc1JVRkRkRUlzZVVOQlFYbERMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zVFVGQlRTeEpRVUZKTEVsQlFVa3NRMEZCUXl4SlFVRkpMRVZCUVVVc1EwRkRNMFVzUTBGQlF6dFRRVU5NTzBsQlEwd3NRMEZCUXp0RFFVTktPMEZCUlVRN08wZEJSVWM3UVVGRFNTeE5RVUZOTEZsQlFWazdTVUZCZWtJN1VVRkRTU3hoUVVGUkxFZEJRVWNzUlVGQlJTeERRVUZETzFGQlEyUXNZMEZCVXl4SFFVRkhMRVZCUVVVc1EwRkJRenRSUVVObUxHTkJRVk1zUjBGQlJ5eExRVUZMTEVOQlFVTTdVVUZEYkVJc1UwRkJTU3hIUVVGSExFTkJRVU1zUTBGQlF6dFJRVU5VTEZOQlFVa3NSMEZCYzBJc1JVRkJSU3hEUVVGRE8xRkJRemRDTEZWQlFVc3NSMEZCUnl4TFFVRkxMRU5CUVVNN1NVRkZiRUlzUTBGQlF6dERRVUZCT3pzN096czdPenM3T3pzN096czdRVU16U1VRc2EwUkJRV3RFTzBGQlJUTkRMRTFCUVUwc1ZVRkJWVHRKUVVOdVFpeE5RVUZOTEVOQlFVTXNXVUZCV1R0UlFVTm1MRTlCUVU4N096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3TzBkQk1FSmFMRU5CUVVNN1NVRkRRU3hEUVVGRE8wbEJSVVFzVFVGQlRTeERRVUZETEdOQlFXTTdVVUZEYWtJc1QwRkJUenM3T3pzN096czdPenM3TzBkQldWb3NRMEZCUXp0SlFVTkJMRU5CUVVNN1EwRkRTanM3T3pzN096czdPenM3T3pzN08wRkRhRVJFTEd0RVFVRnJSRHRCUVVVelF5eE5RVUZOTEZWQlFWVTdTVUZEYmtJN096czdPMDlCUzBjN1NVRkRTQ3hOUVVGTkxFTkJRVU1zWlVGQlpTeERRVUZETEU5QlFXZENPMUZCUTI1RExFOUJRVThzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZEWWl4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRE8xbEJRMWdzVDBGQlR5eEZRVUZGTEU5QlFVOHNRMEZCUXl4UFFVRlBMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEVWQlFVVXNRMEZETDBJc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGRFRpeEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRPMmRDUVVOWUxFOUJRVThzUlVGQlJTeERRVUZETEVOQlFVTXNUMEZCVHp0blFrRkRiRUlzVDBGQlR5eEZRVUZGTEVOQlFVTXNRMEZCUXl4UFFVRlBPMkZCUTNKQ0xFTkJRVU1zUTBGRFRDeERRVU5LTzFsQlEwUXNTVUZCU1N4RlFVRkZMRTlCUVU4c1EwRkJReXhKUVVGSk8xTkJRM0pDTEVOQlFVTXNRMEZEVEN4RFFVRkRPMGxCUTA0c1EwRkJRenREUVVOS096czdPenM3T3pzN096czdPenM3TzBGRGVFSkVMR3RFUVVGclJEdEJRVWRTTzBGQlJ6RkRPenRIUVVWSE8wRkJRMGtzVFVGQlRTeG5Ra0ZCWjBJN1NVRkxla0k3TzA5QlJVYzdTVUZEU0N4WlFVRlpMRzlDUVVGcFF6dFJRVU42UXl4SlFVRkpMRU5CUVVNc2IwSkJRVzlDTEVkQlFVY3NiMEpCUVc5Q0xFTkJRVU03VVVGRGFrUXNTVUZCU1N4RFFVRkRMRmxCUVZrc1IwRkJSeXhSUVVGUkxFTkJRVU1zWVVGQllTeERRVUZETEU5QlFVOHNRMEZCY1VJc1EwRkJRenRKUVVNMVJTeERRVUZETzBsQlJVUTdPenRQUVVkSE8wbEJRMGdzWVVGQllTeERRVUZETEdGQlFUUkNPMUZCUTNSRExITkVRVUZWTEVOQlEwNHNaMFZCUVc5Q0xFVkJRVVVzUlVGRGRFSXNaMEpCUVdkQ0xFZEJRVWNzU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4aFFVRmhMRU5CUVVNc1QwRkJUeXhEUVVGRExFVkJRM2hFTEVOQlFVTXNRMEZEU2l4RFFVRkRPMUZCUTBZc1RVRkJUU3haUVVGWkxFZEJRVWNzU1VGQlNTeERRVUZETEc5Q1FVRnZRaXhEUVVGRExHVkJRV1VzUlVGQlJTeERRVUZETzFGQlJXcEZMRWxCUVVrc1lVRkJZU3hEUVVGRExFdEJRVXNzUlVGQlJUdFpRVU55UWl4elJFRkJWU3hEUVVOT0xHZEZRVUZ2UWl4RlFVRkZMRVZCUTNSQ0xHTkJRV003WjBKQlExWXNZVUZCWVN4RFFVRkRMRXRCUVVzc1EwRkJReXhKUVVGSk8yZENRVU40UWl4TlFVRk5PMmRDUVVOT0xHRkJRV0VzUTBGQlF5eExRVUZMTEVOQlFVTXNSVUZCUlR0blFrRkRkRUlzWTBGQll6dG5Ra0ZEWkN4aFFVRmhMRU5CUVVNc1MwRkJTeXhEUVVGRExGVkJRVlVzUlVGRGJFTXNRMEZCUXl4RFFVTktMRU5CUVVNN1UwRkRURHRSUVVWRUxFbEJRVWtzWVVGQllTeERRVUZETEV0QlFVc3NRMEZCUXl4SlFVRkpMRWxCUVVrc1QwRkJUeXhGUVVGRk8xbEJRM0pETEVsQlFVa3NRMEZCUXl4blFrRkJaMElzUTBGQlF5eGhRVUZoTEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03V1VGRGFFUXNUMEZCVHp0VFFVTldPMkZCUVUwc1NVRkRTQ3hoUVVGaExFTkJRVU1zUzBGQlN5eERRVUZETEVsQlFVa3NTVUZCU1N4UFFVRlBPMWxCUTI1RExGbEJRVmtzUTBGQlF5eFRRVUZUTEV0QlFVc3NZVUZCWVN4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRExFTkJRVU1zUlVGRGNrUTdXVUZEUlN4WlFVRlpMRU5CUVVNc1UwRkJVeXhIUVVGSExHRkJRV0VzUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1dVRkRiRVFzYzBSQlFWVXNRMEZEVGl4blJVRkJiMElzUlVGQlJTeEZRVU4wUWl3MFEwRkJORU1zUTBGREwwTXNRMEZCUXp0WlFVTkdMRTlCUVU4N1UwRkRWanRKUVVOTUxFTkJRVU03U1VGRlJEczdPMDlCUjBjN1NVRkRTQ3huUWtGQlowSXNRMEZCUXl4blFrRkJOa0k3VVVGRE1VTXNUVUZCVFN4WlFVRlpMRWRCUVVjc1NVRkJTU3hEUVVGRExHOUNRVUZ2UWl4RFFVRkRMR1ZCUVdVc1JVRkJSU3hEUVVGRE8xRkJSV3BGTEcxSFFVRnRSenRSUVVOdVJ5eEpRVUZKTEZsQlFWa3NRMEZCUXl4VFFVRlRMRWxCUVVrc1owSkJRV2RDTEVWQlFVVTdXVUZETlVNc1QwRkJUenRUUVVOV08xRkJRMFFzZVVaQlFYbEdPMkZCUTNCR0xFbEJRMFFzV1VGQldTeERRVUZETEZOQlFWTTdXVUZEZEVJc1dVRkJXU3hEUVVGRExGTkJRVk1zUzBGQlN5eG5Ra0ZCWjBJc1JVRkROME03V1VGRFJTdzJRa0ZCTmtJN1dVRkROMElzU1VGQlNTeERRVUZETEZsQlFWa3NRMEZCUXl4VFFVRlRMRWRCUVVjc1owSkJRV2RDTEVOQlFVTTdXVUZETDBNc2MwUkJRVlVzUTBGRFRpeG5SVUZCYjBJc1JVRkJSU3hGUVVOMFFpd3dSRUZCTUVRc1EwRkROMFFzUTBGQlF6dFRRVU5NTzBsQlEwd3NRMEZCUXp0RFFVTktPenM3T3pzN096czdPenM3T3pzN096dEJRM1pHUkN4clJFRkJhMFE3UVVGRlJEdEJRVU5RTzBGQlZ6RkRPenRIUVVWSE8wRkJRMGtzVFVGQlRTeFhRVUZYTzBsQlZYQkNPenM3VDBGSFJ6dEpRVU5JTEZsQlFWa3NhMEpCUVN0Q0xFVkJRVVVzVFVGQll6dFJRVlp1UkN4dlFrRkJaU3hIUVVGSExFbEJRVWtzU1VGQlNTeEZRVUZGTEVOQlFVTXNUMEZCVHl4RlFVRkZMRU5CUVVNN1VVRlhNME1zU1VGQlNTeERRVUZETEZsQlFWa3NSMEZCUnl4UlFVRlJMRU5CUVVNc1lVRkJZU3hEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETzFGQlEzQkVMRWxCUVVrc1EwRkJReXhOUVVGTkxFZEJRVWNzVFVGQlRTeERRVUZETzFGQlEzSkNMRWxCUVVrc1EwRkJReXhaUVVGWkxFTkJRVU1zUlVGQlJTeEhRVUZITEdkQ1FVRm5RaXhEUVVGRE8xRkJRM2hETEVsQlFVa3NRMEZCUXl4WlFVRlpMRU5CUVVNc2RVSkJRWFZDTEVkQlFVY3NTVUZCU1N4RFFVRkRPMUZCUTJwRUxFbEJRVWtzUTBGQlF5eFpRVUZaTEVOQlFVTXNWMEZCVnl4SFFVRkhMRWxCUVVrc1EwRkJRenRSUVVOeVF5eEpRVUZKTEVOQlFVTXNXVUZCV1N4RFFVRkRMRXRCUVVzc1EwRkJReXhMUVVGTExFZEJRVWNzVFVGQlRTeERRVUZETzFGQlEzWkRMRWxCUVVrc1EwRkJReXhaUVVGWkxFTkJRVU1zUzBGQlN5eERRVUZETEUxQlFVMHNSMEZCUnl4TlFVRk5MRU5CUVVNN1VVRkRlRU1zU1VGQlNTeERRVUZETEZsQlFWa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1VVRkJVU3hIUVVGSExGVkJRVlVzUTBGQlF6dFJRVU01UXl4SlFVRkpMRU5CUVVNc1dVRkJXU3hEUVVGRExFdEJRVXNzUTBGQlF5eGhRVUZoTEVkQlFVY3NTMEZCU3l4RFFVRkRPMUZCUXpsRExHdENRVUZyUWl4RFFVRkRMRmRCUVZjc1EwRkJReXhKUVVGSkxFTkJRVU1zV1VGQldTeERRVUZETEVOQlFVTTdVVUZGYkVRc1NVRkJTU3hEUVVGRExITkNRVUZ6UWl4SFFVRkhMRWRCUVVjc1JVRkJSVHRaUVVNdlFpeFBRVUZQTEVOQlFVTXNSMEZCUnl4RFFVTlFMR2xHUVVGcFJpeERRVU53Uml4RFFVRkRPMUZCUTA0c1EwRkJReXhEUVVGRE8xRkJRMFlzU1VGQlNTeERRVUZETEdsRFFVRnBReXhIUVVGSExFZEJRVWNzUlVGQlJUdFpRVU14UXl4UFFVRlBMRU5CUVVNc1IwRkJSeXhEUVVOUUxEQkhRVUV3Unl4RFFVTTNSeXhEUVVGRE8xRkJRMDRzUTBGQlF5eERRVUZETzFGQlJVWXNjVUpCUVhGQ08xRkJRM0pDTEVsQlFVa3NRMEZCUXl4WlFVRlpMRU5CUVVNc1QwRkJUeXhIUVVGSExFZEJRVWNzUlVGQlJUdFpRVU0zUWl4SlFVRkpMRWxCUVVrc1EwRkJReXhaUVVGWkxFTkJRVU1zVFVGQlRTeEZRVUZGTzJkQ1FVTXhRaXhKUVVGSkxFTkJRVU1zV1VGQldTeERRVUZETEVsQlFVa3NSVUZCUlN4RFFVRkRPMkZCUXpWQ08xRkJRMHdzUTBGQlF5eERRVUZETzFGQlJVWXNTVUZCU1N4RFFVRkRMRmxCUVZrc1EwRkJReXhuUWtGQlowSXNSMEZCUnl4SFFVRkhMRVZCUVVVN1dVRkRkRU1zU1VGQlNTeERRVUZETEd0Q1FVRnJRaXhGUVVGRkxFTkJRVU03VVVGRE9VSXNRMEZCUXl4RFFVRkRPMUZCUlVZc2EwWkJRV3RHTzFGQlEyeEdMRTFCUVUwc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4UlFVRlJMRVZCUVVVc1IwRkJSeXhGUVVGRkxFTkJRVU1zU1VGQlNTeERRVUZETEdsQ1FVRnBRaXhGUVVGRkxFVkJRVVVzU1VGQlNTeERRVUZETEVOQlFVTTdVVUZEZUVVc1RVRkJUU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMRzFDUVVGdFFpeEZRVUZGTEVkQlFVY3NSVUZCUlN4RFFVTTVReXhKUVVGSkxFTkJRVU1zYlVKQlFXMUNMRVZCUVVVc1EwRkROMElzUTBGQlF6dEpRVU5PTEVOQlFVTTdTVUZGUkRzN08wOUJSMGM3U1VGRFNDeEpRVUZKTzFGQlEwRXNTVUZCU1N4RFFVRkRMRmxCUVZrc1EwRkJReXhMUVVGTExFZEJRVWNzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4aFFVRmhMRU5CUXk5RExHbEZRVUZ4UWl4RFFVTjRRaXhEUVVGRE8xRkJRMFlzU1VGQlNTeERRVUZETEZsQlFWa3NRMEZCUXl4UlFVRlJMRWRCUVVjc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eGhRVUZoTEVOQlEyeEVMQ3RFUVVGdFFpeERRVU4wUWl4RFFVRkRPMUZCUTBZc1QwRkJUeXhKUVVGSkxFTkJRVU1zV1VGQldTeERRVUZETEVsQlFVa3NSVUZCUlN4RFFVRkRPMGxCUTNCRExFTkJRVU03U1VGRlJEczdUMEZGUnp0SlFVTklMRkZCUVZFN1VVRkRTaXhQUVVGUExFbEJRVWtzUTBGQlF5eFpRVUZaTEVOQlFVTXNUVUZCVFN4RFFVRkRPMGxCUTNCRExFTkJRVU03U1VGRlJEczdUMEZGUnp0SlFVTklMRmxCUVZrN1VVRkRVaXhQUVVGUExFTkJRMGdzU1VGQlNTeERRVUZETEZsQlFWa3NRMEZCUXl4VlFVRlZMRXRCUVVzc1UwRkJVenRaUVVNeFF5eEpRVUZKTEVOQlFVTXNXVUZCV1N4RFFVRkRMRlZCUVZVc1IwRkJSeXhEUVVGRExFTkJRMjVETEVOQlFVTTdTVUZEVGl4RFFVRkRPMGxCUlVRN08wOUJSVWM3U1VGRFNDeGpRVUZqTzFGQlExWXNUMEZCVHl4RFFVTklMRWxCUVVrc1EwRkJReXhaUVVGWkxFTkJRVU1zVTBGQlV5eExRVUZMTEZOQlFWTTdXVUZEZWtNc1NVRkJTU3hEUVVGRExGbEJRVmtzUTBGQlF5eFRRVUZUTEV0QlFVc3NTVUZCU1N4RFFVTjJReXhEUVVGRE8wbEJRMDRzUTBGQlF6dEpRVVZFT3pzN1QwRkhSenRKUVVOSUxHVkJRV1U3VVVGRFdDeFBRVUZQTEVsQlFVa3NRMEZCUXl4WlFVRlpMRU5CUVVNN1NVRkROMElzUTBGQlF6dEpRVVZFT3pzN1QwRkhSenRKUVVOSUxIRkNRVUZ4UWp0UlFVTnFRaXhQUVVGUExFbEJRVWtzUTBGQlF5eFpRVUZaTEVOQlFVTXNZVUZCWVN4RFFVRkRPMGxCUXpORExFTkJRVU03U1VGRlJEczdPMDlCUjBjN1NVRkRTQ3hsUVVGbExFTkJRVU1zVDBGQlowSTdVVUZETlVJc09FaEJRVGhJTzFGQlF6bElMRTFCUVUwc1dVRkJXU3hIUVVGSExFbEJRVWtzUTBGQlF5eFpRVUZaTEVOQlFVTTdVVUZEZWtJc1dVRkJXU3hEUVVGRExGTkJRVlU3WVVGRGFFTXNVMEZCVXl4RlFVRkZPMkZCUTFnc1QwRkJUeXhEUVVGRExFTkJRVU1zUzBGQmRVSXNSVUZCUlN4RlFVRkZMRU5CUVVNc1EwRkJReXhMUVVGTExFTkJRVU1zVDBGQlR5eEhRVUZITEU5QlFVOHNRMEZCUXl4RFFVRkRMRU5CUVVNN1NVRkRla1VzUTBGQlF6dEpRVVZFT3p0UFFVVkhPMGxCUTBnc2EwSkJRV3RDTzFGQlEyUXNiME5CUVc5RE8wbEJRM2hETEVOQlFVTTdTVUZGUkRzN1QwRkZSenRKUVVOSUxHMUNRVUZ0UWp0UlFVTm1MRmxCUVZrc1EwRkJReXhKUVVGSkxFTkJRVU1zZDBKQlFYZENMRU5CUVVNc1EwRkJRenRSUVVNMVF5eEpRVUZKTEVOQlFVTXNkMEpCUVhkQ0xFZEJRVWNzVFVGQlRTeERRVUZETEZWQlFWVXNRMEZCUXl4SFFVRkhMRVZCUVVVN1dVRkRia1FzU1VGQlNTeERRVUZETEdsQ1FVRnBRaXhGUVVGRkxFTkJRVU03VVVGRE4wSXNRMEZCUXl4RlFVRkZMRWRCUVVjc1EwRkJReXhEUVVGRE8wbEJRMW9zUTBGQlF6dEpRVVZFT3pzN1QwRkhSenRKUVVOSUxHbENRVUZwUWp0UlFVTmlMRTFCUVUwc2EwSkJRV3RDTEVkQlFVY3NTVUZCU1N4RFFVRkRMSEZDUVVGeFFpeEZRVUZGTEVOQlFVTTdVVUZGZUVRc1NVRkJTU3hEUVVGRExHdENRVUZyUWl4RlFVRkZPMWxCUTNKQ0xFOUJRVTg3VTBGRFZqdFJRVVZFTEVsQlFVa3NRMEZCUXl4eFFrRkJjVUlzUlVGQlJTeERRVUZETzFGQlJUZENMRWxCUVVrc2EwSkJRV3RDTEVOQlFVTXNVMEZCVXl4RFFVRkRMRkZCUVZFc1EwRkJReXhaUVVGWkxFTkJRVU1zUlVGQlJUdFpRVU55UkN4SlFVRkpMRU5CUVVNc2MwSkJRWE5DTEVWQlFVVXNRMEZCUXp0WlFVTTVRaXhQUVVGUE8xTkJRMVk3VVVGRlJDeHRRMEZCYlVNN1VVRkRia01zU1VGQlNTeERRVUZETEc5RFFVRnZReXhGUVVGRkxFTkJRVU03VVVGRE5VTXNTVUZCU1N4RFFVRkRMSE5DUVVGelFpeEZRVUZGTEVOQlFVTTdTVUZEYkVNc1EwRkJRenRKUVVWRU96dFBRVVZITzBsQlEwZ3NiME5CUVc5RE8xRkJRMmhETEUxQlFVMHNhMEpCUVd0Q0xFZEJRVWNzU1VGQlNTeERRVUZETEhGQ1FVRnhRaXhGUVVGRkxFTkJRVU03VVVGRmVFUXNhMFpCUVd0R08xRkJRMnhHTEUxQlFVMHNWVUZCVlN4SFFVRkhMRTFCUVUwc1EwRkJRenRSUVVNeFFpeE5RVUZOTEZkQlFWY3NSMEZCUnl4TlFVRk5MRU5CUVVNN1VVRkRNMElzVFVGQlRTeFJRVUZSTEVkQlFVY3NRMEZCUXl4RFFVRkRPMUZCUTI1Q0xFMUJRVTBzVTBGQlV5eEhRVUZITEVOQlFVTXNRMEZCUXp0UlFVTndRaXhyUWtGQmEwSXNRMEZCUXl4WlFVRlpMRU5CUXpOQ0xFOUJRVThzUlVGRFVDeFBRVUZQTzFsQlEwZ3NVVUZCVVR0WlFVTlNMRmxCUVZrN1dVRkRXaXhUUVVGVE8xbEJRMVFzWVVGQllUdFpRVU5pTEZWQlFWVTdXVUZEVml4WlFVRlpPMWxCUTFvc1YwRkJWenRaUVVOWUxHOUNRVUZ2UWl4RFFVTXpRaXhEUVVGRE8wbEJRMDRzUTBGQlF6dEpRVVZFTEhGQ1FVRnhRanRSUVVOcVFpeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhoUVVGaExFTkJRVU1zZVVWQlFUWkNMRU5CUVVNc1JVRkJSVHRaUVVNelJDeFBRVUZQTzFOQlExWTdVVUZGUkN4TlFVRk5MRWRCUVVjc1IwRkJSeXhKUVVGSkxFbEJRVWtzUlVGQlJTeERRVUZETEU5QlFVOHNSVUZCUlN4RFFVRkRPMUZCUTJwRExFbEJRVWtzUjBGQlJ5eEhRVUZITEVsQlFVa3NRMEZCUXl4bFFVRmxMRWRCUVVjc1IwRkJSeXhGUVVGRk8xbEJRMnhETEUxQlFVMHNhMEpCUVd0Q0xFZEJRVWNzU1VGQlNTeERRVUZETEhGQ1FVRnhRaXhGUVVGRkxFTkJRVU03V1VGRGVFUXNTVUZCU1N4RFFVRkRMR3RDUVVGclFpeEZRVUZGTzJkQ1FVTnlRaXhQUVVGUE8yRkJRMVk3V1VGRlJDeEpRVUZKTEVOQlFVTXNhVU5CUVdsRExFTkJRMnhETEd0Q1FVRnJRaXhEUVVGRExGZEJRVmNzUlVGRE9VSXNhMEpCUVd0Q0xFTkJRVU1zV1VGQldTeERRVU5zUXl4RFFVRkRPMWxCUlVZc1NVRkJTU3hEUVVGRExHVkJRV1VzUjBGQlJ5eEpRVUZKTEVsQlFVa3NSVUZCUlN4RFFVRkRMRTlCUVU4c1JVRkJSU3hEUVVGRE8xTkJReTlETzJGQlFVMDdXVUZEU0N4elJFRkJWU3hEUVVOT0xHZEZRVUZ2UWl4RlFVRkZMRVZCUTNSQ0xDdENRVUVyUWl4RlFVTXZRaXhEUVVGRExFTkJRMG9zUTBGQlF6dFpRVU5HTEZsQlFWa3NRMEZCUXl4SlFVRkpMRU5CUVVNc2JVSkJRVzFDTEVOQlFVTXNRMEZCUXp0WlFVTjJReXhKUVVGSkxFTkJRVU1zYlVKQlFXMUNMRWRCUVVjc1RVRkJUU3hEUVVGRExGVkJRVlVzUTBGRGVFTXNSMEZCUnl4RlFVRkZMRU5CUVVNc1NVRkJTU3hEUVVGRExIRkNRVUZ4UWl4RlFVRkZMRVZCUTJ4RExFZEJRVWNzUTBGRFRpeERRVUZETzFOQlEwdzdTVUZEVEN4RFFVRkRPME5CUTBvN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3p0QlF6ZFBSQ3hyUkVGQmEwUTdRVUZGYzBJN1FVRkRURHRCUVU5Vk8wRkJRM2hDTzBGQlEzZENPMEZCUTIxQ08wRkJWWFJGTzBGQlMyTTdRVUZESzBJN1FVRkROMEk3UVVGRFowSTdRVUZEVlR0QlFVTllPMEZCU1VnN1FVRkRkVUk3UVVGSFdUdEJRVU5PTzBGQlEyTTdRVUZITlVJN1FVRkphRU03UVVGaFVEdEJRVU01UWpzN1IwRkZSenRCUVVOSkxFMUJRVTBzYzBKQlFYTkNPMGxCSzBNdlFqczdPenRQUVVsSE8wbEJRMGdzV1VGQldTeE5RVUZqTEVWQlFVVXNZMEZCT0VJN1VVRndRekZFTERCQ1FVRnhRaXhIUVVGSExFbEJRVWtzUTBGQlF6dFJRWEZEZWtJc1NVRkJTU3hEUVVGRExFMUJRVTBzUjBGQlJ5eE5RVUZOTEVOQlFVTTdVVUZEY2tJc1NVRkJTU3hEUVVGRExHTkJRV01zUjBGQlJ5eGpRVUZqTEVOQlFVTTdVVUZEY2tNc1NVRkJTU3hEUVVGRExHdENRVUZyUWl4SFFVRkhMRWxCUVVrc2NVWkJRV3RDTEVWQlFVVXNRMEZCUXp0UlFVTnVSQ3hKUVVGSkxFTkJRVU1zU1VGQlNTeEhRVUZITEVsQlFVa3NkMFJCUVZrc1JVRkJSU3hEUVVGRE8xRkJSUzlDTEVsQlFVa3NRMEZCUXl4alFVRmpMRWRCUVVjN1dVRkRiRUlzYlVKQlFXMUNMRVZCUVVVc1NVRkJTVHRaUVVONlFpeHRRa0ZCYlVJc1JVRkJSU3hKUVVGSk8xTkJRelZDTEVOQlFVTTdVVUZGUml4M1JrRkJkMFk3VVVGRGVFWXNTVUZCU1N4RFFVRkRMR0ZCUVdFc1IwRkJSeXhKUVVGSkxEWkVRVUZoTEVOQlEyeERMRWxCUVVrc1EwRkJReXhOUVVGTkxFVkJRMWdzU1VGQlNTeERRVUZETEdOQlFXTXNSVUZEYmtJc1NVRkJTU3hEUVVGRExHTkJRV01zUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUTJwRExFTkJRVU03VVVGRFJpeEpRVUZKTEVOQlFVTXNZVUZCWVN4RFFVRkRMSEZDUVVGeFFpeEhRVUZITEVkQlFVY3NSVUZCUlR0WlFVTTFReXhKUVVGSkxFTkJRVU1zTkVKQlFUUkNMRU5CUXpkQ0xEaERRVUU0UXl4RFFVTnFSQ3hEUVVGRE8xbEJRMFlzU1VGQlNTeERRVUZETEc5Q1FVRnZRaXhGUVVGRkxFTkJRVU03VVVGRGFFTXNRMEZCUXl4RFFVRkRPMUZCUlVZc1NVRkJTU3hEUVVGRExIRkNRVUZ4UWl4SFFVRkhMRWxCUVVrc2NVWkJRWEZDTEVOQlEyeEVMRWxCUVVrc1EwRkJReXhqUVVGakxFTkJRVU1zYTBKQlFXdENMRU5CUTNwRExFTkJRVU03VVVGRlJpeEpRVUZKTEVOQlFVTXNWMEZCVnl4SFFVRkhMRWxCUVVrc2FVVkJRVmNzUTBGRE9VSXNTVUZCU1N4RFFVRkRMR05CUVdNc1EwRkJReXhyUWtGQmEwSXNSVUZEZEVNc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGRFpDeERRVUZETzFGQlEwWXNTVUZCU1N4RFFVRkRMRmRCUVZjc1EwRkJReXhyUWtGQmEwSXNSMEZCUnl4SFFVRkhMRVZCUVVVc1EwRkRka01zU1VGQlNTeERRVUZETEhOQ1FVRnpRaXhGUVVGRkxFTkJRVU03VVVGRmJFTXNiMGhCUVc5SU8xRkJRM0JJTEVsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVNc2FVTkJRV2xETEVkQlFVY3NRMEZEYWtRc1MwRkJZU3hGUVVOaUxFMUJRV01zUlVGRGFFSXNSVUZCUlR0WlFVTkJMRTFCUVUwc1ZVRkJWU3hIUVVGSE8yZENRVU5tTEd0Q1FVRnJRaXhGUVVGRkxFdEJRVXM3WjBKQlEzcENMRzFDUVVGdFFpeEZRVUZGTEUxQlFVMDdZVUZET1VJc1EwRkJRenRaUVVWR0xFbEJRVWtzUTBGQlF5eDNRa0ZCZDBJc1EwRkJReXhYUVVGWExFTkJRVU1zVlVGQlZTeERRVUZETEVOQlFVTTdVVUZETVVRc1EwRkJReXhEUVVGRE8xRkJSVVlzZFVsQlFYVkpPMUZCUTNaSkxFbEJRVWtzUTBGQlF5eFhRVUZYTEVOQlFVTXNjMEpCUVhOQ0xFZEJRVWNzUjBGQlJ5eEZRVUZGTzFsQlF6TkRMRWxCUVVrc1EwRkJReXgzUWtGQmQwSXNSVUZCUlN4RFFVRkRPMUZCUTNCRExFTkJRVU1zUTBGQlF6dFJRVVZHTEVsQlFVa3NRMEZCUXl4blFrRkJaMElzUjBGQlJ5eEpRVUZKTERKRlFVRm5RaXhEUVVGRExFbEJRVWtzUTBGQlF5eFhRVUZYTEVOQlFVTXNRMEZCUXp0UlFVVXZSQ3hKUVVGSkxFTkJRVU1zYlVKQlFXMUNMRWRCUVVjc1NVRkJTU3d3UlVGQmJVSXNRMEZCUXl4SlFVRkpMRU5CUVVNc1YwRkJWeXhEUVVGRExFTkJRVU03VVVGRmNrVXNTVUZCU1N4RFFVRkRMRFpDUVVFMlFpeEhRVUZITEVsQlFVa3NjVVpCUVhGQ0xFVkJRVVVzUTBGQlF6dFJRVU5xUlN4SlFVRkpMRU5CUVVNc2VVSkJRWGxDTEVkQlFVY3NTVUZCU1N4eFJrRkJjVUlzUlVGQlJTeERRVUZETzFGQlF6ZEVMRWxCUVVrc1EwRkJReXhuUTBGQlowTXNRMEZEYWtNc1NVRkJTU3hEUVVGRExEWkNRVUUyUWl4RFFVTnlReXhEUVVGRE8xRkJRMFlzU1VGQlNTeERRVUZETEdkRFFVRm5ReXhEUVVGRExFbEJRVWtzUTBGQlF5eDVRa0ZCZVVJc1EwRkJReXhEUVVGRE8xRkJRM1JGTEVsQlFVa3NRMEZCUXl4cFFrRkJhVUlzUjBGQlJ5eEpRVUZKTERaRlFVRnBRaXhEUVVNeFF5eEpRVUZKTEVOQlFVTXNOa0pCUVRaQ0xFTkJRM0pETEVOQlFVTTdVVUZEUml4SlFVRkpMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTXNPRUpCUVRoQ0xFZEJRVWNzUjBGQlJ5eEZRVUZGTEVOQlEzcEVMRWxCUVVrc1EwRkJReXhoUVVGaExFTkJRVU1zYjBKQlFXOUNMRVZCUVVVc1EwRkJRenRSUVVVNVF5eEpRVUZKTEVOQlFVTXNkVUpCUVhWQ0xFZEJRVWNzU1VGQlNTd3JSa0ZCZFVJc1JVRkJSU3hEUVVGRE8xRkJSVGRFTERKQ1FVRXlRanRSUVVNelFpeEpRVUZKTEVOQlFVTXNiVUpCUVcxQ0xFZEJRVWNzU1VGQlNTeHBSa0ZCYlVJc1JVRkJSU3hEUVVGRE8xRkJRM0pFTEVsQlFVa3NRMEZCUXl4dFFrRkJiVUlzUTBGQlF5eFJRVUZSTEVkQlFVY3NRMEZEYUVNc1lVRkJNa01zUlVGRE4wTXNSVUZCUlN4RFFVRkRMRWxCUVVrc1EwRkJReXh4UWtGQmNVSXNRMEZCUXl4aFFVRmhMRU5CUVVNc1EwRkJRenRSUVVNdlF5eEpRVUZKTEVOQlFVTXNiVUpCUVcxQ0xFTkJRVU1zWTBGQll5eEhRVUZITEVOQlEzUkRMRmRCUVN0RExFVkJRMnBFTEVWQlFVVXNRMEZCUXl4SlFVRkpMRU5CUVVNc2VVSkJRWGxDTEVOQlFVTXNWMEZCVnl4RFFVRkRMRU5CUVVNN1VVRkRha1FzU1VGQlNTeERRVUZETEcxQ1FVRnRRaXhEUVVGRExHZERRVUZuUXl4SFFVRkhMRU5CUVVNc1MwRkJTeXhGUVVGRkxFVkJRVVU3V1VGRGJFVXNTVUZCU1N4RFFVRkRMR05CUVdNc1EwRkJReXhoUVVGaExFTkJRemRDTEhsQ1FVRjVRaXhMUVVGTExFTkJRVU1zU1VGQlNTeExRVU12UWl4TFFVRkxMRU5CUVVNc1RVRkJUU3hKUVVGSkxFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTXNTVUZCU1N4SFFVRkhMRXRCUVVzc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF5eERRVUZETEVWQlF5OURMRVZCUVVVc1EwRkRUQ3hEUVVGRE8xbEJRMFlzU1VGQlNTeERRVUZETEc5Q1FVRnZRaXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzFGQlEycERMRU5CUVVNc1EwRkJRenRSUVVOR0xFbEJRVWtzUTBGQlF5eHRRa0ZCYlVJc1EwRkJReXhOUVVGTkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1RVRkJUU3hGUVVGRkxFZEJRVWNzUlVGQlJUdFpRVU14UkN4TlFVRk5MR2xDUVVGcFFpeEhRVUZITEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1lVRkJZU3hEUVVNdlF5eHRSVUZCYzBJc1EwRkRla0lzUTBGQlF6dFpRVU5HTEVsQlFVY3NRMEZCUXl4cFFrRkJhVUlzUlVGRGNrSTdaMEpCUTBrc1NVRkJTU3hEUVVGRExHMUNRVUZ0UWl4RFFVRkRMRzFDUVVGdFFpeEZRVUZGTEVOQlFVTTdZVUZEYkVRN1VVRkRUQ3hEUVVGRExFTkJRVU1zUTBGQlF6dFJRVU5JTEVsQlFVa3NRMEZCUXl4dFFrRkJiVUlzUTBGQlF5eFBRVUZQTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zVDBGQlR5eEZRVUZGTEVkQlFVY3NSVUZCUlR0WlFVTTFSQ3hKUVVGSkxFTkJRVU1zWVVGQllTeERRVUZETEcxQ1FVRnRRaXhGUVVGRkxFTkJRVU03V1VGRmVrTXNhMFZCUVd0Rk8xbEJRMnhGTEVsQlFVa3NTVUZCU1N4RFFVRkRMR2RDUVVGblFpeEpRVUZKTEVsQlFVa3NRMEZCUXl4blFrRkJaMElzUzBGQlN5eFRRVUZUTEVWQlFVVTdaMEpCUXpsRUxFMUJRVTBzUTBGQlF5eGhRVUZoTEVOQlFVTXNTVUZCU1N4RFFVRkRMR2RDUVVGblFpeERRVUZETEVOQlFVTTdZVUZETDBNN1dVRkZSQ3d5UkVGQk1rUTdXVUZETTBRc1NVRkJTU3hEUVVGRExHOUNRVUZ2UWl4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRE8xbEJRMnBETEVsQlFVa3NRMEZCUXl4dlFrRkJiMElzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXp0WlFVTnFReXhKUVVGSkxFTkJRVU1zZFVKQlFYVkNMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU03V1VGRGNFTXNTVUZCU1N4RFFVRkRMSE5DUVVGelFpeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRPMWxCUlc1RExFbEJRVWNzU1VGQlNTeERRVUZETEdWQlFXVXNTVUZCU1N4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExITkNRVUZ6UWl4RFFVRkRMRzFHUVVGelF5eERRVUZETEVkQlFVY3NRMEZCUXl4RlFVRkZPMmRDUVVOMlJ5eEpRVUZKTEVOQlFVTXNZMEZCWXl4SFFVRkhMRWxCUVVrc1EwRkJRenRuUWtGRE0wSXNTVUZCU1N4RFFVRkRMR2RDUVVGblFpeEZRVUZGTEVOQlFVTTdaMEpCUTNoQ0xFbEJRVWtzUTBGQlF5d3dRa0ZCTUVJc1JVRkJSU3hEUVVGRE8yRkJRM0pETzFGQlEwd3NRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkZTQ3hwU0VGQmFVZzdVVUZEYWtnc1NVRkJTU3hEUVVGRExIZENRVUYzUWl4SFFVRkhMRWxCUVVrc2EwZEJRWGRDTEVOQlEzaEVMRWxCUVVrc1EwRkJReXhwUWtGQmFVSXNSVUZEZEVJc1NVRkJTU3hEUVVGRExIVkNRVUYxUWl4RFFVTXZRaXhEUVVGRE8xRkJRMFlzU1VGQlNTeERRVUZETEhGQ1FVRnhRaXhIUVVGSExFbEJRVWtzTkVaQlFYRkNMRU5CUTJ4RUxFbEJRVWtzUTBGQlF5eHBRa0ZCYVVJc1JVRkRkRUlzU1VGQlNTeERRVUZETEhWQ1FVRjFRaXhEUVVNdlFpeERRVUZETzFGQlEwWXNTVUZCU1N4RFFVRkRMRFJDUVVFMFFpeEhRVUZITEVsQlFVa3NNRWRCUVRSQ0xFTkJRMmhGTEVsQlFVa3NRMEZCUXl4eFFrRkJjVUlzUTBGRE4wSXNRMEZCUXp0UlFVTkdMRWxCUVVrc1EwRkJReXgxUWtGQmRVSXNSVUZCUlN4RFFVRkRPMUZCUXk5Q0xFbEJRVWtzUTBGQlF5eDFRa0ZCZFVJc1EwRkJReXgxUWtGQmRVSXNSVUZCUlN4RFFVRkRPMUZCUlhaRUxFbEJRVWtzUTBGQlF5eHRRa0ZCYlVJc1IwRkJSeXhKUVVGSkxEWkZRVUZ0UWl4RFFVTTVReXhKUVVGSkxFTkJRVU1zZFVKQlFYVkNMRVZCUXpWQ0xFbEJRVWtzUTBGQlF5eFhRVUZYTEVWQlEyaENMRWxCUVVrc1EwRkJReXh0UWtGQmJVSXNRMEZETTBJc1EwRkJRenRSUVVWR0xFbEJRVWtzUTBGQlF5eFZRVUZWTEVkQlFVY3NTMEZCU3l4RFFVRkRPMUZCUTNoQ0xFbEJRVWtzUTBGQlF5eHRRa0ZCYlVJc1IwRkJSeXhMUVVGTExFTkJRVU03VVVGRGFrTXNTVUZCU1N4RFFVRkRMR05CUVdNc1IwRkJSeXhGUVVGRkxFTkJRVU03VVVGRGVrSXNTVUZCU1N4RFFVRkRMR1ZCUVdVc1IwRkJSeXhKUVVGSkxFTkJRVU03VVVGRE5VSXNTVUZCU1N4RFFVRkRMR05CUVdNc1IwRkJSeXhMUVVGTExFTkJRVU03VVVGRE5VSXNTVUZCU1N4RFFVRkRMR2RDUVVGblFpeEhRVUZITEVOQlFVTXNRMEZCUXp0UlFVVXhRaXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEd0RFFVRnJReXhEUVVNeFF5eDNSVUZCTWtJc1JVRkRNMElzUTBGQlF5eFZRVUZWTEVWQlFVVXNSVUZCUlR0WlFVTllMRWxCUVVjc1ZVRkJWU3hMUVVGTExFVkJRVVVzUlVGQlJUdG5Ra0ZEYkVJc1QwRkJUenRoUVVOV08xbEJSVVFzZVVSQlFYbEVPMWxCUTNwRUxFbEJRVWtzUTBGQlF5eDNRa0ZCZDBJc1EwRkJReXhqUVVGakxFTkJRVU1zUzBGQlN5eEZRVUZGTEVOQlFVTTdXVUZEY2tRc1NVRkJTU3hEUVVGRExIZENRVUYzUWl4RFFVRkRMRzlDUVVGdlFpeERRVU01UXl4SlFVRkpMRU5CUVVNc1ZVRkJWU3hGUVVObUxFbEJRVWtzUTBGQlF5eGpRVUZqTEVOQlEzUkNMRU5CUVVNN1dVRkRSaXhKUVVGSkxFTkJRVU1zWjBKQlFXZENMRWRCUVVjc1ZVRkJWU3hEUVVGRE8xbEJRMjVETEVsQlFVa3NRMEZCUXl4dFFrRkJiVUlzUTBGQlF5eGhRVUZoTEVOQlFVTXNWVUZCVlN4RFFVRkRMRU5CUVVNN1VVRkRka1FzUTBGQlF5eERRVU5LTEVOQlFVTTdVVUZGUml4SlFVRkpMRU5CUVVNc2IwSkJRVzlDTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRSUVVVNVFpeEpRVUZKTEVOQlFVTXNiMEpCUVc5Q0xFZEJRVWtzUjBGQlJ5eEZRVUZGTzFsQlF6bENMRWxCUVVrc2JVSkJRVzFDTEVkQlFVY3NTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXh0UWtGQmJVSXNRMEZEY2tRc0swVkJRV3RETEVOQlEzSkRMRU5CUVVNN1dVRkZSaXg1UlVGQmVVVTdXVUZEZWtVc1NVRkJTU3hKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEdGQlFXRXNRMEZCUXl4dFJVRkJjMElzUTBGQlF5eEZRVUZGTzJkQ1FVTnVSQ3h0UWtGQmJVSXNTVUZCU1N4SFFVRkhMRWRCUVVjc2JVVkJRWE5DTEVkQlFVY3NUMEZCVHl4RFFVRkRPMkZCUTJwRk8xbEJSVVFzZFVkQlFYVkhPMWxCUTNaSExESkVRVUV5UkR0WlFVTXpSQ3hwU0VGQmFVZzdXVUZEYWtnc1NVRkJTVHRaUVVWS0xFOUJRVThzYlVKQlFXMUNMRU5CUVVNN1VVRkRMMElzUTBGQlF6dEpRVU5NTEVOQlFVTTdTVUZGUkRzN096dFBRVWxITzBsQlEwZ3NkME5CUVhkRExFTkJRM0JETEVOQlFWTXNSVUZEVkN4RFFVRlRPMUZCUlZRc1QwRkJUeXhKUVVGSkxFTkJRVU1zYlVKQlFXMUNMRU5CUVVNc1owTkJRV2RETEVOQlFVTXNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRE8wbEJRek5GTEVOQlFVTTdTVUZGUkRzN08wOUJSMGM3U1VGRFNDeGxRVUZsTEVOQlFVTXNTMEZCYlVJN1VVRkRMMElzVFVGQlRTeFBRVUZQTEVkQlFVY3NTVUZCU1N4VlFVRlZMRU5CUVVNc1MwRkJTeXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzFGQlF6TkRMSFZFUVVGVkxFTkJRVU1zYVVWQlFXOUNMRVZCUVVVc1JVRkJSU3h0UWtGQmJVSXNSMEZCUnl4UFFVRlBMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU03VVVGRmNrVXNUMEZCVHp0UlFVTlFMRTFCUVUwc1YwRkJWeXhIUVVOaUxFbEJRVWtzUTBGQlF5eDFRa0ZCZFVJc1EwRkJReXh2UWtGQmIwSXNRMEZCUXl4WlFVRlpMRU5CUXpGRUxFOUJRVThzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZEWWl4RFFVRkRPMUZCUTA0c1NVRkJTU3hEUVVGRExIVkNRVUYxUWl4RFFVRkRMRzlDUVVGdlFpeERRVUZETEVkQlFVY3NRMEZCUXl4WFFVRlhMRU5CUVVNc1EwRkRPVVFzUzBGQlN5eERRVUZETEVsQlFVa3NRMEZEWWl4RFFVRkRPMUZCUTBZc1pVRkJaVHRSUVVObUxEWk9RVUUyVGp0UlFVTTNUaXhIUVVGSE8wbEJRMUFzUTBGQlF6dEpRVVZFT3p0UFFVVkhPMGxCUTBnc2RVSkJRWFZDTzFGQlEyNUNMR2RDUVVGblFqdFJRVU5vUWl4elNFRkJjMGc3VVVGRGRFZ3NTVUZCU1N4RFFVRkRMSFZDUVVGMVFpeERRVUZETEhOQ1FVRnpRaXhEUVVNdlF5eHhSMEZCTmtJc1JVRkROMElzZVVKQlFYbENMRVZCUTNwQ0xFTkJRVU1zU1VGQmFVSXNSVUZCUlN4RlFVRkZMRU5CUVVNc1NVRkJTU3hEUVVGRExIbENRVUY1UWl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVNNVJDeERRVUZETzFGQlEwWXNTVUZCU1N4RFFVRkRMSFZDUVVGMVFpeERRVUZETEhOQ1FVRnpRaXhEUVVNdlF5eHhSMEZCTmtJc1JVRkROMElzVlVGQlZTeEZRVU5XTEVOQlFVTXNTVUZCYVVJc1JVRkJSU3hGUVVGRkxFTkJRVU1zU1VGQlNTeERRVUZETEd0Q1FVRnJRaXhEUVVGRExGVkJRVlVzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZEYkVVc1EwRkJRenRSUVVOR0xFbEJRVWtzUTBGQlF5eDFRa0ZCZFVJc1EwRkJReXh6UWtGQmMwSXNRMEZETDBNc2NVZEJRVFpDTEVWQlF6ZENMRk5CUVZNc1JVRkRWQ3hEUVVGRExFbEJRV2xDTEVWQlFVVXNSVUZCUlR0WlFVTnNRaXhKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMUZCUTNwQ0xFTkJRVU1zUTBGRFNpeERRVUZETzFGQlEwWXNTVUZCU1N4RFFVRkRMSFZDUVVGMVFpeERRVUZETEhOQ1FVRnpRaXhEUVVNdlF5eHhSMEZCTmtJc1JVRkROMElzWVVGQllTeEZRVU5pTEVOQlFVTXNTVUZCYVVJc1JVRkJSU3hGUVVGRkxFTkJRVU1zU1VGQlNTeERRVUZETEc5Q1FVRnZRaXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVU42UkN4RFFVRkRPMUZCUTBZc1NVRkJTU3hEUVVGRExIVkNRVUYxUWl4RFFVRkRMSE5DUVVGelFpeERRVU12UXl4eFIwRkJOa0lzUlVGRE4wSXNaVUZCWlN4RlFVTm1MRWRCUVVjc1JVRkJSU3hEUVVGRExFbEJRVWtzUTBGQlF5eHRRMEZCYlVNc1JVRkJSU3hEUVVOdVJDeERRVUZETzFGQlEwWXNTVUZCU1N4RFFVRkRMSFZDUVVGMVFpeERRVUZETEhOQ1FVRnpRaXhEUVVNdlF5eHhSMEZCTmtJc1JVRkROMElzYlVKQlFXMUNMRVZCUTI1Q0xFTkJRVU1zU1VGQmFVSXNSVUZCUlN4RlFVRkZMRU5CUVVNc1NVRkJTU3hEUVVGRExIVkNRVUYxUWl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVNMVJDeERRVUZETzFGQlEwWXNTVUZCU1N4RFFVRkRMSFZDUVVGMVFpeERRVUZETEhOQ1FVRnpRaXhEUVVNdlF5eHhSMEZCTmtJc1JVRkROMElzWVVGQllTeEZRVU5pTEVOQlFVTXNTVUZCYVVJc1JVRkJSU3hGUVVGRkxFTkJRVU1zU1VGQlNTeERRVUZETEhWQ1FVRjFRaXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVU0xUkN4RFFVRkRPMUZCUTBZc1NVRkJTU3hEUVVGRExIVkNRVUYxUWl4RFFVRkRMSE5DUVVGelFpeERRVU12UXl4eFIwRkJOa0lzUlVGRE4wSXNhVUpCUVdsQ0xFVkJRMnBDTEVOQlFVTXNTVUZCYVVJc1JVRkJSU3hGUVVGRkxFTkJRVU1zU1VGQlNTeERRVUZETEhGQ1FVRnhRaXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVU14UkN4RFFVRkRPMUZCUTBZc1NVRkJTU3hEUVVGRExIVkNRVUYxUWl4RFFVRkRMSE5DUVVGelFpeERRVU12UXl4eFIwRkJOa0lzUlVGRE4wSXNaVUZCWlN4RlFVTm1MRU5CUVVNc1NVRkJhVUlzUlVGQlJTeEZRVUZGTEVOQlFVTXNTVUZCU1N4RFFVRkRMR1ZCUVdVc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGRGNFUXNRMEZCUXp0UlFVTkdMRWxCUVVrc1EwRkJReXgxUWtGQmRVSXNRMEZCUXl4elFrRkJjMElzUTBGREwwTXNjVWRCUVRaQ0xFVkJRemRDTEdOQlFXTXNSVUZEWkN4RFFVRkRMRWxCUVdsQ0xFVkJRVVVzUlVGQlJTeERRVUZETEVsQlFVa3NRMEZCUXl4alFVRmpMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRMjVFTEVOQlFVTTdVVUZEUml4SlFVRkpMRU5CUVVNc2RVSkJRWFZDTEVOQlFVTXNjMEpCUVhOQ0xFTkJReTlETEhGSFFVRTJRaXhGUVVNM1FpeGpRVUZqTEVWQlEyUXNRMEZCUXl4SlFVRnBRaXhGUVVGRkxFVkJRVVVzUTBGQlF5eEpRVUZKTEVOQlFVTXNZMEZCWXl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVOdVJDeERRVUZETzFGQlEwWXNTVUZCU1N4RFFVRkRMSFZDUVVGMVFpeERRVUZETEhOQ1FVRnpRaXhEUVVNdlF5eHhSMEZCTmtJc1JVRkROMElzVlVGQlZTeEZRVU5XTEVkQlFVY3NSVUZCUlR0WlFVTkVMR2RDUVVGblFqdFJRVU53UWl4RFFVRkRMRU5CUTBvc1EwRkJRenRSUVVOR0xFbEJRVWtzUTBGQlF5eDFRa0ZCZFVJc1EwRkJReXh6UWtGQmMwSXNRMEZETDBNc2NVZEJRVFpDTEVWQlF6ZENMSFZDUVVGMVFpeEZRVU4yUWl4RFFVRkRMRWxCUVdsQ0xFVkJRVVVzUlVGQlJTeERRVUZETEVsQlFVa3NRMEZCUXl4MVFrRkJkVUlzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZETlVRc1EwRkJRenRSUVVOR0xFbEJRVWtzUTBGQlF5eDFRa0ZCZFVJc1EwRkJReXh6UWtGQmMwSXNRMEZETDBNc2NVZEJRVFpDTEVWQlF6ZENMR2xDUVVGcFFpeEZRVU5xUWl4RFFVRkRMRWxCUVdsQ0xFVkJRVVVzUlVGQlJTeERRVUZETEVsQlFVa3NRMEZCUXl4cFFrRkJhVUlzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZEZEVRc1EwRkJRenRSUVVOR0xFbEJRVWtzUTBGQlF5eDFRa0ZCZFVJc1EwRkJReXh6UWtGQmMwSXNRMEZETDBNc2NVZEJRVFpDTEVWQlF6ZENMRlZCUVZVc1JVRkRWaXhEUVVGRExFbEJRV2xDTEVWQlFVVXNSVUZCUlN4RFFVRkRMRWxCUVVrc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkRkRVFzUTBGQlF6dFJRVVZHTEdOQlFXTTdVVUZEWkN4SlFVRkpMRU5CUVVNc2RVSkJRWFZDTEVOQlFVTXNjMEpCUVhOQ0xFTkJReTlETEcxSFFVRXlRaXhGUVVNelFpeGxRVUZsTEVWQlEyWXNSMEZCUnl4RlFVRkZMRU5CUTBRc1NVRkJTU3hEUVVGRExIRkNRVUZ4UWl4RFFVRkRMSEZDUVVGeFFpeERRVU0xUXl4bFFVRmxMRU5CUTJ4Q0xFTkJRMUlzUTBGQlF6dFJRVU5HTEVsQlFVa3NRMEZCUXl4MVFrRkJkVUlzUTBGQlF5eHpRa0ZCYzBJc1EwRkRMME1zYlVkQlFUSkNMRVZCUXpOQ0xIVkNRVUYxUWl4RlFVTjJRaXhIUVVGSExFVkJRVVVzUTBGRFJDeEpRVUZKTEVOQlFVTXNjVUpCUVhGQ0xFTkJRVU1zY1VKQlFYRkNMRU5CUXpWRExIVkNRVUYxUWl4RFFVTXhRaXhEUVVOU0xFTkJRVU03VVVGRFJpeEpRVUZKTEVOQlFVTXNkVUpCUVhWQ0xFTkJRVU1zYzBKQlFYTkNMRU5CUXk5RExHMUhRVUV5UWl4RlFVTXpRaXhaUVVGWkxFVkJRMW9zUjBGQlJ5eEZRVUZGTEVOQlFVTXNTVUZCU1N4RFFVRkRMSEZDUVVGeFFpeERRVUZETEhGQ1FVRnhRaXhEUVVGRExGbEJRVmtzUTBGQlF5eERRVU4yUlN4RFFVRkRPMUZCUTBZc1NVRkJTU3hEUVVGRExIVkNRVUYxUWl4RFFVRkRMSE5DUVVGelFpeERRVU12UXl4dFIwRkJNa0lzUlVGRE0wSXNkVUpCUVhWQ0xFVkJRM1pDTEVkQlFVY3NSVUZCUlN4RFFVTkVMRWxCUVVrc1EwRkJReXh4UWtGQmNVSXNRMEZCUXl4eFFrRkJjVUlzUTBGRE5VTXNkVUpCUVhWQ0xFTkJRekZDTEVOQlExSXNRMEZCUXp0UlFVTkdMRWxCUVVrc1EwRkJReXgxUWtGQmRVSXNRMEZCUXl4elFrRkJjMElzUTBGREwwTXNiVWRCUVRKQ0xFVkJRek5DTEdkQ1FVRm5RaXhGUVVOb1FpeEhRVUZITEVWQlFVVXNRMEZEUkN4SlFVRkpMRU5CUVVNc2NVSkJRWEZDTEVOQlFVTXNjVUpCUVhGQ0xFTkJRelZETEdkQ1FVRm5RaXhEUVVOdVFpeERRVU5TTEVOQlFVTTdVVUZEUml4SlFVRkpMRU5CUVVNc2RVSkJRWFZDTEVOQlFVTXNjMEpCUVhOQ0xFTkJReTlETEcxSFFVRXlRaXhGUVVNelFpeGxRVUZsTEVWQlEyWXNSMEZCUnl4RlFVRkZMRU5CUTBRc1NVRkJTU3hEUVVGRExIRkNRVUZ4UWl4RFFVRkRMSEZDUVVGeFFpeERRVU0xUXl4bFFVRmxMRU5CUTJ4Q0xFTkJRMUlzUTBGQlF6dFJRVU5HTEVsQlFVa3NRMEZCUXl4MVFrRkJkVUlzUTBGQlF5eHpRa0ZCYzBJc1EwRkRMME1zYlVkQlFUSkNMRVZCUXpOQ0xHRkJRV0VzUlVGRFlpeEhRVUZITEVWQlFVVXNRMEZEUkN4SlFVRkpMRU5CUVVNc2NVSkJRWEZDTEVOQlFVTXNjVUpCUVhGQ0xFTkJRVU1zWVVGQllTeERRVUZETEVOQlEzUkZMRU5CUVVNN1VVRkRSaXhKUVVGSkxFTkJRVU1zZFVKQlFYVkNMRU5CUVVNc2MwSkJRWE5DTEVOQlF5OURMRzFIUVVFeVFpeEZRVU16UWl4M1FrRkJkMElzUlVGRGVFSXNSMEZCUnl4RlFVRkZMRU5CUTBRc1NVRkJTU3hEUVVGRExIRkNRVUZ4UWl4RFFVRkRMSEZDUVVGeFFpeERRVU0xUXl4M1FrRkJkMElzUTBGRE0wSXNRMEZEVWl4RFFVRkRPMUZCUTBZc1NVRkJTU3hEUVVGRExIVkNRVUYxUWl4RFFVRkRMSE5DUVVGelFpeERRVU12UXl4dFIwRkJNa0lzUlVGRE0wSXNWVUZCVlN4RlFVTldMRWRCUVVjc1JVRkJSVHRaUVVORUxHZENRVUZuUWp0UlFVTndRaXhEUVVGRExFTkJRMG9zUTBGQlF6dFJRVU5HTEVsQlFVa3NRMEZCUXl4MVFrRkJkVUlzUTBGQlF5eHpRa0ZCYzBJc1EwRkRMME1zYlVkQlFUSkNMRVZCUXpOQ0xHVkJRV1VzUlVGRFppeERRVUZETEVsQlFWa3NSVUZCUlN4RlFVRkZMRU5CUTJJc1NVRkJTU3hEUVVGRExIZENRVUYzUWl4RFFVRkRMR2xDUVVGcFFpeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVTTFSQ3hEUVVGRE8xRkJRMFlzU1VGQlNTeERRVUZETEhWQ1FVRjFRaXhEUVVGRExITkNRVUZ6UWl4RFFVTXZReXh0UjBGQk1rSXNSVUZETTBJc1UwRkJVeXhGUVVOVUxFTkJRVU1zU1VGQldTeEZRVUZGTEVWQlFVVXNRMEZCUXl4SlFVRkpMRU5CUVVNc2QwSkJRWGRDTEVOQlFVTXNWMEZCVnl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVOd1JTeERRVUZETzFGQlEwWXNTVUZCU1N4RFFVRkRMSFZDUVVGMVFpeERRVUZETEhOQ1FVRnpRaXhEUVVNdlF5eHRSMEZCTWtJc1JVRkRNMElzVTBGQlV5eEZRVU5VTEVOQlFVTXNTVUZCYlVJc1JVRkJSU3hGUVVGRkxFTkJRM0JDTEVsQlFVa3NRMEZCUXl4eFFrRkJjVUlzUTBGQlF5eHhRa0ZCY1VJc1EwRkROVU1zVTBGQlV5eEZRVU5VTEVsQlFVa3NRMEZEVUN4RFFVTlNMRU5CUVVNN1VVRkRSaXhKUVVGSkxFTkJRVU1zZFVKQlFYVkNMRU5CUVVNc2MwSkJRWE5DTEVOQlF5OURMRzFIUVVFeVFpeEZRVU16UWl4UFFVRlBMRVZCUTFBc1EwRkJReXhKUVVGdFFpeEZRVUZGTEVWQlFVVXNRMEZEY0VJc1NVRkJTU3hEUVVGRExIRkNRVUZ4UWl4RFFVRkRMSEZDUVVGeFFpeERRVUZETEU5QlFVOHNSVUZCUlN4SlFVRkpMRU5CUVVNc1EwRkRkRVVzUTBGQlF6dFJRVU5HTEVsQlFVa3NRMEZCUXl4MVFrRkJkVUlzUTBGQlF5eHpRa0ZCYzBJc1EwRkRMME1zYlVkQlFUSkNMRVZCUXpOQ0xGVkJRVlVzUlVGRFZpeERRVUZETEVsQlFXMUNMRVZCUVVVc1JVRkJSU3hEUVVOd1FpeEpRVUZKTEVOQlFVTXNjVUpCUVhGQ0xFTkJRVU1zY1VKQlFYRkNMRU5CUXpWRExGVkJRVlVzUlVGRFZpeEpRVUZKTEVOQlExQXNRMEZEVWl4RFFVRkRPMUZCUTBZc1NVRkJTU3hEUVVGRExIVkNRVUYxUWl4RFFVRkRMSE5DUVVGelFpeERRVU12UXl4dFIwRkJNa0lzUlVGRE0wSXNXVUZCV1N4RlFVTmFMRU5CUVVNc1NVRkJiVUlzUlVGQlJTeEZRVUZGTEVOQlEzQkNMRWxCUVVrc1EwRkJReXh4UWtGQmNVSXNRMEZCUXl4eFFrRkJjVUlzUTBGRE5VTXNXVUZCV1N4RlFVTmFMRWxCUVVrc1EwRkRVQ3hEUVVOU0xFTkJRVU03VVVGRFJpeEpRVUZKTEVOQlFVTXNkVUpCUVhWQ0xFTkJRVU1zYzBKQlFYTkNMRU5CUXk5RExHMUhRVUV5UWl4RlFVTXpRaXhaUVVGWkxFVkJRMW9zUTBGQlF5eEpRVUZ0UWl4RlFVRkZMRVZCUVVVc1EwRkRjRUlzU1VGQlNTeERRVUZETEhGQ1FVRnhRaXhEUVVGRExIRkNRVUZ4UWl4RFFVTTFReXhaUVVGWkxFVkJRMW9zU1VGQlNTeERRVU5RTEVOQlExSXNRMEZCUXp0UlFVTkdMRWxCUVVrc1EwRkJReXgxUWtGQmRVSXNRMEZCUXl4elFrRkJjMElzUTBGREwwTXNiVWRCUVRKQ0xFVkJRek5DTEZkQlFWY3NSVUZEV0N4RFFVRkRMRWxCUVcxQ0xFVkJRVVVzUlVGQlJTeERRVU53UWl4SlFVRkpMRU5CUVVNc2NVSkJRWEZDTEVOQlFVTXNjVUpCUVhGQ0xFTkJRelZETEZkQlFWY3NSVUZEV0N4SlFVRkpMRU5CUTFBc1EwRkRVaXhEUVVGRE8xRkJRMFlzU1VGQlNTeERRVUZETEhWQ1FVRjFRaXhEUVVGRExITkNRVUZ6UWl4RFFVTXZReXh0UjBGQk1rSXNSVUZETTBJc1UwRkJVeXhGUVVOVUxFTkJRVU1zU1VGQmJVSXNSVUZCUlN4RlFVRkZMRU5CUTNCQ0xFbEJRVWtzUTBGQlF5eHhRa0ZCY1VJc1EwRkJReXh4UWtGQmNVSXNRMEZETlVNc1UwRkJVeXhGUVVOVUxFbEJRVWtzUTBGRFVDeERRVU5TTEVOQlFVTTdVVUZEUml4SlFVRkpMRU5CUVVNc2RVSkJRWFZDTEVOQlFVTXNjMEpCUVhOQ0xFTkJReTlETEcxSFFVRXlRaXhGUVVNelFpeFhRVUZYTEVWQlExZ3NRMEZCUXl4SlFVRnRRaXhGUVVGRkxFVkJRVVVzUTBGRGNFSXNTVUZCU1N4RFFVRkRMSEZDUVVGeFFpeERRVUZETEhGQ1FVRnhRaXhEUVVNMVF5eFhRVUZYTEVWQlExZ3NTVUZCU1N4RFFVTlFMRU5CUTFJc1EwRkJRenRSUVVOR0xFbEJRVWtzUTBGQlF5eDFRa0ZCZFVJc1EwRkJReXh6UWtGQmMwSXNRMEZETDBNc2JVZEJRVEpDTEVWQlF6TkNMRmxCUVZrc1JVRkRXaXhEUVVGRExFbEJRVzFDTEVWQlFVVXNSVUZCUlN4RFFVTndRaXhKUVVGSkxFTkJRVU1zY1VKQlFYRkNMRU5CUVVNc2NVSkJRWEZDTEVOQlF6VkRMRmxCUVZrc1JVRkRXaXhKUVVGSkxFTkJRMUFzUTBGRFVpeERRVUZETzFGQlEwWXNTVUZCU1N4RFFVRkRMSFZDUVVGMVFpeERRVUZETEhOQ1FVRnpRaXhEUVVNdlF5eHRSMEZCTWtJc1JVRkRNMElzWVVGQllTeEZRVU5pTEVOQlFVTXNTVUZCYlVJc1JVRkJSU3hGUVVGRkxFTkJRM0JDTEVsQlFVa3NRMEZCUXl4eFFrRkJjVUlzUTBGQlF5eHhRa0ZCY1VJc1EwRkROVU1zWVVGQllTeEZRVU5pTEVsQlFVa3NRMEZEVUN4RFFVTlNMRU5CUVVNN1VVRkRSaXhKUVVGSkxFTkJRVU1zZFVKQlFYVkNMRU5CUVVNc2MwSkJRWE5DTEVOQlF5OURMRzFIUVVFeVFpeEZRVU16UWl4WlFVRlpMRVZCUTFvc1EwRkJReXhKUVVGdFFpeEZRVUZGTEVWQlFVVXNRMEZEY0VJc1NVRkJTU3hEUVVGRExIRkNRVUZ4UWl4RFFVRkRMSEZDUVVGeFFpeERRVU0xUXl4WlFVRlpMRVZCUTFvc1NVRkJTU3hEUVVOUUxFTkJRMUlzUTBGQlF6dFJRVU5HTEVsQlFVa3NRMEZCUXl4MVFrRkJkVUlzUTBGQlF5eHpRa0ZCYzBJc1EwRkRMME1zYlVkQlFUSkNMRVZCUXpOQ0xGVkJRVlVzUlVGRFZpeERRVUZETEVsQlFXMUNMRVZCUVVVc1JVRkJSU3hEUVVOd1FpeEpRVUZKTEVOQlFVTXNjVUpCUVhGQ0xFTkJRVU1zY1VKQlFYRkNMRU5CUXpWRExGVkJRVlVzUlVGRFZpeEpRVUZKTEVOQlExQXNRMEZEVWl4RFFVRkRPMUZCUTBZc1NVRkJTU3hEUVVGRExIVkNRVUYxUWl4RFFVRkRMSE5DUVVGelFpeERRVU12UXl4dFIwRkJNa0lzUlVGRE0wSXNWMEZCVnl4RlFVTllMRU5CUVVNc1NVRkJiVUlzUlVGQlJTeEZRVUZGTEVOQlEzQkNMRWxCUVVrc1EwRkJReXh4UWtGQmNVSXNRMEZCUXl4eFFrRkJjVUlzUTBGRE5VTXNWMEZCVnl4RlFVTllMRWxCUVVrc1EwRkRVQ3hEUVVOU0xFTkJRVU03VVVGRFJpeEpRVUZKTEVOQlFVTXNkVUpCUVhWQ0xFTkJRVU1zYzBKQlFYTkNMRU5CUXk5RExHMUhRVUV5UWl4RlFVTXpRaXhyUWtGQmEwSXNSVUZEYkVJc1IwRkJSeXhGUVVGRkxFTkJRMFFzU1VGQlNTeERRVUZETEhGQ1FVRnhRaXhEUVVGRExIRkNRVUZ4UWl4RFFVTTFReXhyUWtGQmEwSXNRMEZEY2tJc1EwRkRVaXhEUVVGRE8xRkJRMFlzU1VGQlNTeERRVUZETEhWQ1FVRjFRaXhEUVVGRExITkNRVUZ6UWl4RFFVTXZReXh0UjBGQk1rSXNSVUZETTBJc2MwSkJRWE5DTEVWQlEzUkNMRU5CUVVNc1NVRkJiVUlzUlVGQlJTeEZRVUZGTEVOQlEzQkNMRWxCUVVrc1EwRkJReXh4UWtGQmNVSXNRMEZCUXl4eFFrRkJjVUlzUTBGRE5VTXNjMEpCUVhOQ0xFVkJRM1JDTEVsQlFVa3NRMEZEVUN4RFFVTlNMRU5CUVVNN1VVRkRSaXhKUVVGSkxFTkJRVU1zZFVKQlFYVkNMRU5CUVVNc2MwSkJRWE5DTEVOQlF5OURMRzFIUVVFeVFpeEZRVU16UWl4MVFrRkJkVUlzUlVGRGRrSXNRMEZCUXl4SlFVRnRRaXhGUVVGRkxFVkJRVVVzUTBGRGNFSXNTVUZCU1N4RFFVRkRMSEZDUVVGeFFpeERRVUZETEhGQ1FVRnhRaXhEUVVNMVF5eDFRa0ZCZFVJc1JVRkRka0lzU1VGQlNTeERRVU5RTEVOQlExSXNRMEZCUXp0UlFVTkdMRWxCUVVrc1EwRkJReXgxUWtGQmRVSXNRMEZCUXl4elFrRkJjMElzUTBGREwwTXNiVWRCUVRKQ0xFVkJRek5DTEdWQlFXVXNSVUZEWml4RFFVRkRMRWxCUVcxQ0xFVkJRVVVzUlVGQlJTeERRVU53UWl4SlFVRkpMRU5CUVVNc2NVSkJRWEZDTEVOQlFVTXNjVUpCUVhGQ0xFTkJRelZETEdWQlFXVXNSVUZEWml4SlFVRkpMRU5CUTFBc1EwRkRVaXhEUVVGRE8xRkJRMFlzU1VGQlNTeERRVUZETEhWQ1FVRjFRaXhEUVVGRExITkNRVUZ6UWl4RFFVTXZReXh0UjBGQk1rSXNSVUZETTBJc2NVSkJRWEZDTEVWQlEzSkNMRU5CUVVNc1NVRkJiVUlzUlVGQlJTeEZRVUZGTEVOQlEzQkNMRWxCUVVrc1EwRkJReXh4UWtGQmNVSXNRMEZCUXl4eFFrRkJjVUlzUTBGRE5VTXNjVUpCUVhGQ0xFVkJRM0pDTEVsQlFVa3NRMEZEVUN4RFFVTlNMRU5CUVVNN1VVRkRSaXhKUVVGSkxFTkJRVU1zZFVKQlFYVkNMRU5CUVVNc2MwSkJRWE5DTEVOQlF5OURMRzFIUVVFeVFpeEZRVU16UWl4blFrRkJaMElzUlVGRGFFSXNRMEZCUXl4SlFVRnRRaXhGUVVGRkxFVkJRVVVzUTBGRGNFSXNTVUZCU1N4RFFVRkRMSEZDUVVGeFFpeERRVUZETEhGQ1FVRnhRaXhEUVVNMVF5eG5Ra0ZCWjBJc1JVRkRhRUlzU1VGQlNTeERRVU5RTEVOQlExSXNRMEZCUXp0UlFVTkdMRWxCUVVrc1EwRkJReXgxUWtGQmRVSXNRMEZCUXl4elFrRkJjMElzUTBGREwwTXNiVWRCUVRKQ0xFVkJRek5DTEhWQ1FVRjFRaXhGUVVOMlFpeERRVUZETEVsQlFXMUNMRVZCUVVVc1JVRkJSU3hEUVVOd1FpeEpRVUZKTEVOQlFVTXNjVUpCUVhGQ0xFTkJRVU1zY1VKQlFYRkNMRU5CUXpWRExIVkNRVUYxUWl4RlFVTjJRaXhKUVVGSkxFTkJRMUFzUTBGRFVpeERRVUZETzFGQlEwWXNTVUZCU1N4RFFVRkRMSFZDUVVGMVFpeERRVUZETEhOQ1FVRnpRaXhEUVVNdlF5eHRSMEZCTWtJc1JVRkRNMElzVlVGQlZTeEZRVU5XTEVOQlFVTXNTVUZCYlVJc1JVRkJSU3hGUVVGRkxFTkJRM0JDTEVsQlFVa3NRMEZCUXl4eFFrRkJjVUlzUTBGQlF5eHhRa0ZCY1VJc1EwRkROVU1zVlVGQlZTeEZRVU5XTEVsQlFVa3NRMEZEVUN4RFFVTlNMRU5CUVVNN1VVRkRSaXhKUVVGSkxFTkJRVU1zZFVKQlFYVkNMRU5CUVVNc2MwSkJRWE5DTEVOQlF5OURMRzFIUVVFeVFpeEZRVU16UWl4cFFrRkJhVUlzUlVGRGFrSXNRMEZCUXl4SlFVRnRRaXhGUVVGRkxFVkJRVVVzUTBGRGNFSXNTVUZCU1N4RFFVRkRMSEZDUVVGeFFpeERRVUZETEhGQ1FVRnhRaXhEUVVNMVF5eHBRa0ZCYVVJc1JVRkRha0lzU1VGQlNTeERRVU5RTEVOQlExSXNRMEZCUXp0UlFVTkdMRWxCUVVrc1EwRkJReXgxUWtGQmRVSXNRMEZCUXl4elFrRkJjMElzUTBGREwwTXNiVWRCUVRKQ0xFVkJRek5DTEdsQ1FVRnBRaXhGUVVOcVFpeERRVUZETEVsQlFXMUNMRVZCUVVVc1JVRkJSU3hEUVVOd1FpeEpRVUZKTEVOQlFVTXNjVUpCUVhGQ0xFTkJRVU1zY1VKQlFYRkNMRU5CUXpWRExHbENRVUZwUWl4RlFVTnFRaXhKUVVGSkxFTkJRMUFzUTBGRFVpeERRVUZETzFGQlEwWXNTVUZCU1N4RFFVRkRMSFZDUVVGMVFpeERRVUZETEhOQ1FVRnpRaXhEUVVNdlF5eHRSMEZCTWtJc1JVRkRNMElzYTBKQlFXdENMRVZCUTJ4Q0xFTkJRVU1zU1VGQmJVSXNSVUZCUlN4RlFVRkZMRU5CUTNCQ0xFbEJRVWtzUTBGQlF5eHhRa0ZCY1VJc1EwRkJReXh4UWtGQmNVSXNRMEZETlVNc2EwSkJRV3RDTEVWQlEyeENMRWxCUVVrc1EwRkRVQ3hEUVVOU0xFTkJRVU03VVVGRFJpeEpRVUZKTEVOQlFVTXNkVUpCUVhWQ0xFTkJRVU1zYzBKQlFYTkNMRU5CUXk5RExHMUhRVUV5UWl4RlFVTXpRaXhWUVVGVkxFVkJRMVlzUTBGQlF5eEpRVUZ0UWl4RlFVRkZMRVZCUVVVc1EwRkRjRUlzU1VGQlNTeERRVUZETEhGQ1FVRnhRaXhEUVVGRExIRkNRVUZ4UWl4RFFVTTFReXhWUVVGVkxFVkJRMVlzU1VGQlNTeERRVU5RTEVOQlExSXNRMEZCUXp0SlFVTk9MRU5CUVVNN1NVRkZSRHM3TzA5QlIwYzdTVUZEU0N4VFFVRlRMRU5CUVVNc1QwRkJiMEk3VVVGRE1VSXNkVVJCUVZVc1EwRkRUaXhwUlVGQmIwSXNSVUZCUlN4RlFVTjBRaXgxUTBGQmRVTXNSVUZEZGtNc1EwRkJReXhEUVVOS0xFTkJRVU03VVVGRFJpeE5RVUZOTEdWQlFXVXNSMEZCUnl4SlFVRkpMRmRCUVZjc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF5eE5RVUZOTEVOQlEzQkVMRTlCUVU4c1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlEyNUNMRU5CUVVNN1VVRkZSaXgxUkVGQlZTeERRVU5PTEdsRlFVRnZRaXhGUVVGRkxFVkJRM1JDTEhkQ1FVRjNRaXhIUVVGSExHVkJRV1VzUlVGRE1VTXNRMEZCUXl4RFFVTktMRU5CUVVNN1VVRkRSaXhOUVVGTkxFOUJRVThzUjBGQk5FSXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhsUVVGbExFTkJRVU1zUTBGQlF6dFJRVU55UlN4SlFVRkpMRTlCUVU4c1EwRkJReXhQUVVGUExFdEJRVXNzYTBKQlFXdENMRVZCUVVVN1dVRkRlRU1zU1VGQlNTeERRVUZETEdOQlFXTXNRMEZCUXl4NVFrRkJlVUlzUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXp0VFFVTXhSRHRKUVVOTUxFTkJRVU03U1VGRlJEczdPMDlCUjBjN1NVRkRTQ3hwUWtGQmFVSXNRMEZCUXl4UFFVRnZRanRSUVVOc1F5eEpRVUZKTzFsQlEwRXNUVUZCVFN4alFVRmpMRWRCUVVjc1NVRkJTU3hYUVVGWExFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTXNUVUZCVFN4RFFVTnVSQ3hQUVVGUExFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVTnVRaXhEUVVGRE8xbEJRMFlzVFVGQlRTeFpRVUZaTEVkQlFVY3NTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhqUVVGakxFTkJRVU1zUTBGQlF6dFpRVU5vUkN4SlFVTkpMRU5CUVVNc1RVRkJUU3hEUVVGRExGTkJRVk1zUTBGQlF5eGpRVUZqTEVOQlFVTXNTVUZCU1N4RFFVRkRMRmxCUVZrc1JVRkJSU3hYUVVGWExFTkJRVU1zUlVGRGJFVTdaMEpCUTBVc2VVUkJRVmtzUTBGRFVpeHBSVUZCYjBJc1JVRkJSU3hGUVVOMFFpd3JSVUZCSzBVc1EwRkRiRVlzUTBGQlF6dGhRVU5NTzFsQlEwUXNUVUZCVFN4VFFVRlRMRWRCUVVjc1dVRkJXU3hEUVVGRExGTkJRVk1zUTBGQlF6dFpRVU42UXl4UFFVRlBMRmxCUVZrc1EwRkJReXhUUVVGVExFTkJRVU03V1VGRE9VSXNkVVJCUVZVc1EwRkRUaXhwUlVGQmIwSXNSVUZCUlN4RlFVTjBRaXhuUWtGRFNTeFRRVUZUTEVsQlFVa3NjVWRCUVRaQ08yZENRVU4wUXl4RFFVRkRMRU5CUVVNc1kwRkJZenRuUWtGRGFFSXNRMEZCUXl4RFFVRkRMRmxCUTFZc01FTkJRVEJETEVOQlF6ZERMRU5CUVVNN1dVRkRSaXhOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEZsQlFWa3NRMEZCUXl4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRExGZEJRVmNzUlVGQlJTeEZRVUZGTzJkQ1FVTTVReXhOUVVGTkxFOUJRVThzUjBGQlJ5eFpRVUZaTEVOQlFVTXNWMEZCVnl4RFFVRkRMRU5CUVVNN1owSkJRekZETEZGQlFWRXNVMEZCVXl4RlFVRkZPMjlDUVVObUxFdEJRVXNzYlVkQlFUSkNPM2RDUVVNMVFpd3dSRUZCTUVRN2QwSkJRekZFTEVsQlEwa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1UwRkJVeXhEUVVGRExHTkJRV01zUTBGQlF5eEpRVUZKTEVOQlEycERMRTlCUVU4c1JVRkRVQ3hKUVVGSkxFTkJRMUE3TkVKQlEwUXNRMEZCUXl4TlFVRk5MRU5CUVVNc1UwRkJVeXhEUVVGRExHTkJRV01zUTBGQlF5eEpRVUZKTEVOQlEycERMRTlCUVU4c1JVRkRVQ3haUVVGWkxFTkJRMllzUlVGRFNEczBRa0ZEUlN4NVJFRkJXU3hEUVVOU0xHbEZRVUZ2UWl4RlFVRkZMRVZCUTNSQ0xHVkJRV1VzVjBGQlZ6czJSRUZEUnl4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVNMVFpeFBRVUZQTEVWQlExQXNTVUZCU1N4RlFVTktMRU5CUVVNc1EwRkRTaXhGUVVGRkxFTkJRMnBDTEVOQlFVTTdORUpCUTBZc2RVVkJRWFZGT3pSQ1FVTjJSU3hQUVVGUE8zbENRVU5XTzNkQ1FVTkVMRWxCUTBrc1QwRkJUeXhEUVVGRExGVkJRVlVzUjBGQlJ5eERRVUZET3pSQ1FVTjBRaXhEUVVGRExFMUJRVTBzUTBGQlF5eFRRVUZUTEVOQlFVTXNZMEZCWXl4RFFVRkRMRWxCUVVrc1EwRkRha01zVDBGQlR5eEZRVU5RTEZkQlFWY3NRMEZEWkN4RlFVTklPelJDUVVORkxIVkZRVUYxUlRzMFFrRkRka1VzZVVSQlFWa3NRMEZEVWl4cFJVRkJiMElzUlVGQlJTeEZRVU4wUWl4bFFVRmxMRmRCUVZjc0swWkJRU3RHTEVOQlF6VklMRU5CUVVNN05FSkJRMFlzZFVWQlFYVkZPelJDUVVOMlJTeFBRVUZQTzNsQ1FVTldPM2RDUVVWRUxFbEJRMGtzU1VGQlNTeERRVUZETEhWQ1FVRjFRaXhEUVVGRExHdENRVUZyUWl4RFFVRkRMRWRCUVVjc1EwRkRMME1zVjBGQlZ5eERRVU5rTEVWQlEwZzdORUpCUTBVc09FaEJRVGhJT3pSQ1FVTTVTQ3hKUVVGSkxFTkJRVU1zZFVKQlFYVkNMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNSMEZCUnl4RFFVTXZReXhYUVVGWExFVkJRMWdzVDBGQlR5eERRVU5XTEVOQlFVTTdlVUpCUTB3N05rSkJRVTA3TkVKQlEwZ3NlVVJCUVZrc1EwRkRVaXhwUlVGQmIwSXNSVUZCUlN4RlFVTjBRaXgzUTBGQmQwTXNWMEZCVnl4cFJrRkJhVVlzVjBGQlZ5eGxRVUZsTEVOQlEycExMRU5CUVVNN2VVSkJRMHc3ZDBKQlEwUXNUVUZCVFR0dlFrRkRWaXhMUVVGTExIRkhRVUUyUWp0M1FrRkRPVUlzTUVSQlFUQkVPM2RDUVVNeFJDeEpRVU5KTEVOQlFVTXNUVUZCVFN4RFFVRkRMRk5CUVZNc1EwRkJReXhqUVVGakxFTkJRVU1zU1VGQlNTeERRVUZETEU5QlFVOHNSVUZCUlN4SlFVRkpMRU5CUVVNc1JVRkRkRVE3TkVKQlEwVXNlVVJCUVZrc1EwRkRVaXhwUlVGQmIwSXNSVUZCUlN4RlFVTjBRaXhwUWtGQmFVSXNWMEZCVnpzNFEwRkRaQ3hKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETEU5QlFVOHNSVUZCUlN4SlFVRkpMRVZCUVVVc1EwRkJReXhEUVVGRExFVkJRVVVzUTBGRGJrUXNRMEZCUXpzMFFrRkRSaXgxUlVGQmRVVTdORUpCUTNaRkxFOUJRVTg3ZVVKQlExWTdkMEpCUTBRc1NVRkRTU3hKUVVGSkxFTkJRVU1zZFVKQlFYVkNMRU5CUVVNc2IwSkJRVzlDTEVOQlFVTXNSMEZCUnl4RFFVTnFSQ3hYUVVGWExFTkJRMlFzUlVGRFNEczBRa0ZEUlN4elJrRkJjMFk3TkVKQlEzUkdMRWxCUVVrc1EwRkJReXgxUWtGQmRVSXNRMEZCUXl4dlFrRkJiMElzUTBGQlF5eEhRVUZITEVOQlEycEVMRmRCUVZjc1JVRkRXQ3hQUVVGUExFTkJRVU1zUlVGQlJTeERRVU5pTEVOQlFVTTdlVUpCUTB3N05rSkJRVTA3TkVKQlEwZ3NlVVJCUVZrc1EwRkRVaXhwUlVGQmIwSXNSVUZCUlN4RlFVTjBRaXgzUTBGQmQwTXNUMEZCVHl4dFJrRkJiVVlzVjBGQlZ5eGxRVUZsTEVOQlF5OUtMRU5CUVVNN2VVSkJRMHc3ZDBKQlEwUXNUVUZCVFR0dlFrRkRWanQzUWtGRFNTeDVSRUZCV1N4RFFVTlNMR2xGUVVGdlFpeEZRVUZGTEVWQlEzUkNMSE5DUVVGelFpeFRRVUZUTEVWQlFVVXNRMEZEY0VNc1EwRkJRenRwUWtGRFZEdFpRVU5NTEVOQlFVTXNRMEZCUXl4RFFVRkRPMWxCUlVnc2QwVkJRWGRGTzFsQlEzaEZMRWxCUVVrc1EwRkJReXcwUWtGQk5FSXNRMEZCUXl3d1FrRkJNRUlzUlVGQlJTeERRVUZETzFsQlF5OUVMRWxCUVVrc1EwRkJReXcwUWtGQk5FSXNRMEZCUXl4NVFrRkJlVUlzUlVGQlJTeERRVUZETzFOQlEycEZPMUZCUVVNc1QwRkJUeXhEUVVGRExFVkJRVVU3V1VGRFVpeDFSRUZCVlN4RFFVRkRMR2xGUVVGdlFpeEZRVUZGTEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNN1UwRkRla003U1VGRFRDeERRVUZETzBsQlJVUTdPenRQUVVkSE8wbEJRMGdzZFVKQlFYVkNMRU5CUVVNc1QwRkJiMEk3VVVGRGVFTXNUVUZCVFN4SlFVRkpMRWRCUVVjc1NVRkJTU3hWUVVGVkxFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVTTdVVUZEY2tNc2RVUkJRVlVzUTBGRFRpeHBSVUZCYjBJc1JVRkJSU3hGUVVOMFFpeHhSRUZCY1VRc1JVRkRja1FzUTBGQlF5eERRVU5LTEVOQlFVTTdVVUZEUml4TlFVRk5MSEZDUVVGeFFpeEhRVUZITEVsQlFVa3NUMEZCVHl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEU5QlFVOHNSVUZCUlN4RFFVRkRPMUZCUXpkRUxIVkVRVUZWTEVOQlEwNHNhVVZCUVc5Q0xFVkJRVVVzUlVGRGRFSXNNa1ZCUVRKRkxIRkNRVUZ4UWl4RlFVRkZMRU5CUTNKSExFTkJRVU03VVVGRFJpeEpRVUZKTEVOQlFVTXNZMEZCWXl4RFFVRkRMSGRDUVVGM1FpeERRVUZETEhGQ1FVRnhRaXhEUVVGRExFTkJRVU03U1VGRGVFVXNRMEZCUXp0SlFVVkVPenM3VDBGSFJ6dEpRVU5JTEdsQ1FVRnBRaXhEUVVGRExFOUJRVzlDTzFGQlEyeERMRTFCUVUwc1kwRkJZeXhIUVVGSExFbEJRVWtzVjBGQlZ5eERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRMRTFCUVUwc1EwRkJReXhQUVVGUExFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRNVVVzVFVGQlRTeFpRVUZaTEVkQlFVY3NTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhqUVVGakxFTkJRVU1zUTBGQlF6dFJRVU5vUkN4SlFVRkpMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTXNlVUpCUVhsQ0xFTkJRVU1zV1VGQldTeERRVUZETEZsQlFWa3NRMEZCUXl4RFFVRkRPMGxCUTJoR0xFTkJRVU03U1VGRlJDeGpRVUZqTzFGQlExWXNTVUZCU1N4RFFVRkRMR0ZCUVdFc1EwRkJReXhWUVVGVkxFVkJRVVVzUTBGQlF6dFJRVVZvUXl3MlEwRkJOa003VVVGRE4wTXNTVUZCU1N4SlFVRkpMRU5CUVVNc1YwRkJWeXhEUVVGRExGRkJRVkVzUlVGQlJTeEpRVUZKTEVsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVNc1kwRkJZeXhGUVVGRkxFVkJRVVU3V1VGRGJFVXNTVUZCU1N4RFFVRkRMRlZCUVZVc1JVRkJSU3hEUVVGRE8xTkJRM0pDTzBsQlEwd3NRMEZCUXp0SlFVVkVPenM3VDBGSFJ6dEpRVU5JTEdGQlFXRXNRMEZCUXl4VlFVRnRRanRSUVVNM1FpeEpRVUZKTEZWQlFWVXNSVUZCUlR0WlFVTmFMRWxCUVVrc1EwRkJReXhqUVVGakxFVkJRVVVzUTBGQlF6dFRRVU42UWp0aFFVRk5PMWxCUTBnc1NVRkJTU3hEUVVGRExHRkJRV0VzUTBGQlF5eHRRa0ZCYlVJc1JVRkJSU3hEUVVGRE8xTkJRelZETzBsQlEwd3NRMEZCUXp0SlFVVkVPenRQUVVWSE8wbEJRMGdzTUVKQlFUQkNPMUZCUTNSQ0xEaEZRVUU0UlR0UlFVTTVSU3hKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEcxQ1FVRnRRaXhGUVVGRk8xbEJRek5DTEhWRVFVRlZMRU5CUTA0c2FVVkJRVzlDTEVWQlFVVXNSVUZEZEVJc01rVkJRVEpGTEVOQlF6bEZMRU5CUVVNN1dVRkRSaXhQUVVGUE8xTkJRMVk3VVVGRlJDdzRSVUZCT0VVN1VVRkRPVVVzU1VGRFNTeERRVUZETEVsQlFVa3NRMEZCUXl4dFFrRkJiVUlzUTBGQlF5eFRRVUZUTzFsQlEyNURMRWxCUVVrc1EwRkJReXh0UWtGQmJVSXNRMEZCUXl4VFFVRlRMRU5CUVVNc1ZVRkJWU3hMUVVGTExGTkJRVk1zUTBGQlF5eE5RVUZOTEVWQlEzQkZPMWxCUTBVc2RVUkJRVlVzUTBGRFRpeHBSVUZCYjBJc1JVRkJSU3hGUVVOMFFpd3dSVUZCTUVVc1EwRkROMFVzUTBGQlF6dFpRVU5HTEVsQlFVa3NRMEZCUXl4alFVRmpMRU5CUVVNc2IwSkJRVzlDTEVWQlFVVXNRMEZCUXp0WlFVTXpReXhKUVVGSkxFTkJRVU1zZVVKQlFYbENMRVZCUVVVc1EwRkJRenRUUVVOd1F6dGhRVUZOTzFsQlEwZ3NkMFZCUVhkRk8xbEJRM2hGTEVsQlFVa3NRMEZCUXl4alFVRmpMRU5CUVVNc09FSkJRVGhDTEVkQlFVY3NTMEZCU3l4RFFVRkRPMWxCUlRORUxEWkNRVUUyUWp0WlFVTTNRaXhKUVVGSkxFTkJRVU1zTkVKQlFUUkNMRU5CUVVNc2MwSkJRWE5DTEVOQlFVTXNRMEZCUXp0WlFVVXhSQ3gxUWtGQmRVSTdXVUZEZGtJc1NVRkJTU3hEUVVGRExHOUNRVUZ2UWl4RlFVRkZMRU5CUVVNN1dVRkZOVUlzT0VSQlFUaEVPMWxCUXpsRUxFMUJRVTBzYTBKQlFXdENMRWRCUVVjc1ZVRkJWU3hEUVVGRExFZEJRVWNzUlVGQlJUdG5Ra0ZEZGtNc1NVRkJTU3hEUVVGRExHTkJRV01zUTBGQlF5eHZRa0ZCYjBJc1JVRkJSU3hEUVVGRE8yZENRVU16UXl4SlFVRkpMRU5CUVVNc2VVSkJRWGxDTEVWQlFVVXNRMEZCUXp0blFrRkRha01zV1VGQldTeERRVUZETEd0Q1FVRnJRaXhEUVVGRExFTkJRVU03V1VGRGNrTXNRMEZCUXl4RlFVRkZMRWxCUVVrc1EwRkJReXhEUVVGRE8xTkJRMW83U1VGRFRDeERRVUZETzBsQlJVUTdPMDlCUlVjN1NVRkRTQ3huUTBGQlowTTdVVUZETlVJc1NVRkJTU3hEUVVGRExHTkJRV01zUTBGQlF5eGhRVUZoTEVOQlF6ZENMRWxCUVVrc2NVVkJRVzlDTEVOQlFVTTdXVUZEY2tJc2NVSkJRWEZDTEVWQlFVVXNTVUZCU1N4RFFVRkRMSEZDUVVGeFFqdFpRVU5xUkN4UFFVRlBMRVZCUVVVc1NVRkJTU3hEUVVGRExIRkNRVUZ4UWl4RFFVRkRMRXRCUVVzN1dVRkRla01zVVVGQlVTeEZRVUZGTEVsQlFVa3NRMEZCUXl4eFFrRkJjVUlzUTBGQlF5eEpRVUZKTzFOQlF6VkRMRU5CUVVNc1EwRkRUQ3hEUVVGRE8xRkJRMFlzU1VGQlNTeEpRVUZKTEVOQlFVTXNjVUpCUVhGQ0xFdEJRVXNzU1VGQlNTeEZRVUZGTzFsQlEzSkRMSFZFUVVGVkxFTkJRVU1zYVVWQlFXOUNMRVZCUVVVc1JVRkJSU3h6UWtGQmMwSXNRMEZCUXl4RFFVRkRPMWxCUXpORUxFbEJRVWtzUTBGQlF5eHBRa0ZCYVVJc1JVRkJSU3hEUVVGRE8xTkJRelZDTzJGQlFVMDdXVUZEU0N4MVJFRkJWU3hEUVVGRExHbEZRVUZ2UWl4RlFVRkZMRVZCUVVVc2MwSkJRWE5DTEVOQlFVTXNRMEZCUXp0WlFVTXpSQ3hKUVVGSkxFTkJRVU1zY1VKQlFYRkNMRU5CUVVNc1pVRkJaU3hGUVVGRkxFTkJRVU03VTBGRGFFUTdVVUZEUkN4VlFVRlZMRU5CUVVNc1IwRkJSeXhGUVVGRk8xbEJRMW9zU1VGQlNTeERRVUZETEZkQlFWY3NRMEZCUXl4bFFVRmxMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU03VVVGRE5VTXNRMEZCUXl4RlFVRkZMRWxCUVVrc1EwRkJReXh4UWtGQmNVSXNRMEZCUXl4blFrRkJaMElzUTBGQlF5eERRVUZETzBsQlEzQkVMRU5CUVVNN1NVRkZSRHM3TzA5QlIwYzdTVUZEU0N4dlFrRkJiMElzUTBGQlF5eFBRVUZ2UWp0UlFVTnlReXgxUkVGQlZTeERRVU5PTEdsRlFVRnZRaXhGUVVGRkxFVkJRM1JDTERKRFFVRXlReXhGUVVNelF5eERRVUZETEVOQlEwb3NRMEZCUXp0UlFVTkdMRTFCUVUwc1NVRkJTU3hIUVVGSExFbEJRVWtzVlVGQlZTeERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRPMUZCUTNKRExFbEJRVWtzUTBGQlF5eHhRa0ZCY1VJc1EwRkJReXg1UWtGQmVVSXNRMEZCUXl4SlFVRkpMRVZCUVVVc1IwRkJSeXhGUVVGRkxFTkJRelZFTEVsQlFVa3NRMEZCUXl4blEwRkJaME1zUlVGQlJTeERRVU14UXl4RFFVRkRPMGxCUTA0c1EwRkJRenRKUVVWRU96dFBRVVZITzBsQlEwZ3NiVU5CUVcxRE8xRkJReTlDTEhWRVFVRlZMRU5CUTA0c2FVVkJRVzlDTEVWQlFVVXNSVUZEZEVJc01rTkJRVEpETEVWQlF6TkRMRU5CUVVNc1EwRkRTaXhEUVVGRE8xRkJRMFlzVlVGQlZTeERRVUZETEVkQlFVY3NSVUZCUlR0WlFVTmFMRWxCUVVrc1EwRkJReXhqUVVGakxFTkJRVU1zWVVGQllTeERRVU0zUWl4SlFVRkpMSEZGUVVGdlFpeEZRVUZGTEVOQlF6ZENMRU5CUVVNN1dVRkRSaXhKUVVGSkxFTkJRVU1zY1VKQlFYRkNMRU5CUVVNc1pVRkJaU3hGUVVGRkxFTkJRVU03VVVGRGFrUXNRMEZCUXl4RlFVRkZMRWxCUVVrc1EwRkJReXh4UWtGQmNVSXNRMEZCUXl4blFrRkJaMElzUTBGQlF5eERRVUZETzFGQlEyaEVMRWxCUVVrc1NVRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF5eGxRVUZsTEVWQlFVVXNSVUZCUlR0WlFVTndReXhKUVVGSkxFTkJRVU1zVjBGQlZ5eERRVUZETEdWQlFXVXNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenRUUVVNeFF6dEpRVU5NTEVOQlFVTTdTVUZGUkRzN08wOUJSMGM3U1VGRFNDeGxRVUZsTEVOQlFVTXNTVUZCYVVJN1VVRkROMElzVFVGQlRTeEpRVUZKTEVkQlFVY3NTVUZCU1N4VlFVRlZMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03VVVGRGJFTXNNRVZCUVRoQ0xFTkJRVU1zU1VGQlNTeEZRVUZGTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenRKUVVOd1JDeERRVUZETzBsQlJVUTdPenRQUVVkSE8wbEJRMGdzWTBGQll5eERRVUZETEVsQlFXbENPMUZCUXpWQ0xFMUJRVTBzU1VGQlNTeEhRVUZITEVsQlFVa3NWVUZCVlN4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8xRkJRMnhETEhsRlFVRTJRaXhEUVVGRExFbEJRVWtzUlVGQlJTeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1NVRkRia1FzUTBGQlF6dEpRVVZFT3pzN1QwRkhSenRKUVVOSUxHTkJRV01zUTBGQlF5eEpRVUZwUWp0UlFVTTFRaXhOUVVGTkxFbEJRVWtzUjBGQlJ5eEpRVUZKTEZWQlFWVXNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenRSUVVOc1F5eDVSVUZCTmtJc1EwRkJReXhKUVVGSkxFVkJRVVVzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMGxCUTI1RUxFTkJRVU03U1VGRlJEczdUMEZGUnp0SlFVTklMRlZCUVZVN1VVRkRUaXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEZkQlFWY3NRMEZCUXl4bFFVRmxMRVZCUVVVc1JVRkJSVHRaUVVOeVF5eE5RVUZOTEU5QlFVOHNSMEZEVkN4eFJrRkJjVVlzUTBGQlF6dFpRVU14Uml4SlFVRkpMRU5CUVVNc1kwRkJZeXhEUVVGRExHRkJRV0VzUTBGRE4wSXNTVUZCU1N4eFJVRkJiMElzUTBGQlF5eEZRVUZGTEU5QlFVOHNSVUZCUlN4RFFVRkRMRU5CUTNoRExFTkJRVU03V1VGRFJpeDVSRUZCV1N4RFFVRkRMR2xGUVVGdlFpeEZRVUZGTEVWQlFVVXNUMEZCVHl4RFFVRkRMRU5CUVVNN1dVRkZPVU1zTmtKQlFUWkNPMWxCUXpkQ0xFbEJRVWtzUTBGQlF5dzBRa0ZCTkVJc1EwRkROMElzYTBOQlFXdERMRU5CUTNKRExFTkJRVU03V1VGRlJpeDFRa0ZCZFVJN1dVRkRka0lzU1VGQlNTeERRVUZETEc5Q1FVRnZRaXhGUVVGRkxFTkJRVU03V1VGRE5VSXNUMEZCVHp0VFFVTldPMUZCUlVRc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eFhRVUZYTEVOQlFVTXNZMEZCWXl4RlFVRkZMRVZCUVVVN1dVRkRjRU1zTWtSQlFXTXNRMEZEVml4cFJVRkJiMElzUlVGQlJTeEZRVU4wUWl4cFJVRkJhVVVzUTBGRGNFVXNRMEZCUXp0WlFVTkdMRTlCUVU4N1UwRkRWanRSUVVWRUxFbEJRVWtzUTBGQlF5eHZRa0ZCYjBJc1EwRkJReXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEdGQlFXRXNRMEZCUXl3MlJFRkJaMElzUTBGQlF5eERRVUZETEVOQlFVTTdVVUZEZGtVc1NVRkJTU3hEUVVGRExHTkJRV01zUTBGQlF5eGhRVUZoTEVOQlFVTXNTVUZCU1N4blJVRkJaU3hGUVVGRkxFTkJRVU1zUTBGQlF6dFJRVVY2UkN4SlFVRkpMRWxCUVVrc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4WlFVRlpMRU5CUVVNc1UwRkJVeXhGUVVGRk8xbEJRemxETEVsQlFVa3NRMEZCUXl4blFrRkJaMElzUTBGQlF5eFpRVUZaTEVOQlFVTXNTMEZCU3p0blFrRkRjRU1zU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4aFFVRmhMRU5CUVVNc2EwVkJRWEZDTEVOQlFVTXNRMEZCUXp0WlFVVnlSQ3hKUVVGSkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1dVRkJXVHRwUWtGRE4wSXNTVUZCU1N4RlFVRkZPMmxDUVVOT0xFbEJRVWtzUTBGQlF5eEhRVUZITEVWQlFVVTdaMEpCUTFBc1NVRkJTU3hEUVVGRExGTkJRVk1zUlVGQlJTeERRVUZETzFsQlEzSkNMRU5CUVVNc1EwRkJRenRwUWtGRFJDeExRVUZMTEVOQlFVTXNRMEZCUXl4blFrRkJaMElzUlVGQlJTeEZRVUZGTzJkQ1FVTjRRaXgxUkVGQlZTeERRVUZETEdsRlFVRnZRaXhGUVVGRkxFVkJRVVVzWjBKQlFXZENMRU5CUVVNc1EwRkJRenRuUWtGRGNrUXNkVVJCUVZVc1EwRkRUaXhwUlVGQmIwSXNSVUZCUlN4RlFVTjBRaXhuU1VGQlowa3NRMEZEYmtrc1EwRkJRenRuUWtGRFJpeEpRVUZKTEVOQlFVTXNZMEZCWXl4RFFVRkRMR0ZCUVdFc1EwRkROMElzU1VGQlNTeDNSVUZCZFVJc1EwRkJRenR2UWtGRGVFSXNUVUZCVFN4RlFVRkZMR2RDUVVGblFqdHBRa0ZETTBJc1EwRkJReXhEUVVOTUxFTkJRVU03V1VGRFRpeERRVUZETEVOQlFVTXNRMEZCUXp0VFFVTldPMkZCUVUwN1dVRkRTQ3hKUVVGSkxFTkJRVU1zVTBGQlV5eEZRVUZGTEVOQlFVTTdVMEZEY0VJN1VVRkZSQ3hKUVVGSkxFTkJRVU1zY1VKQlFYRkNMRWRCUVVjc1MwRkJTeXhEUVVGRE8xRkJRMjVETEVsQlFVa3NRMEZCUXl4eFFrRkJjVUlzUTBGQlF5eGxRVUZsTEVWQlFVVXNRMEZCUXp0SlFVTnFSQ3hEUVVGRE8wbEJSVVE3TzA5QlJVYzdTVUZEU3l4VFFVRlRPMUZCUTJJc01rUkJRVEpFTzFGQlF6TkVMRWxCUVVrc1EwRkJReXhYUVVGWExFTkJRVU1zU1VGQlNTeEZRVUZGTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1owSkJRWGRDTEVWQlFVVXNSVUZCUlR0WlFVTjJSQ3hKUVVGSkxFbEJRVWtzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhaUVVGWkxFTkJRVU1zVTBGQlV5eEZRVUZGTzJkQ1FVTTVReXhKUVVGSkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1dVRkJXU3hEUVVGRExFdEJRVXNzUlVGQlJTeERRVUZETzJGQlF6bERPMWxCUTBRc2RVUkJRVlVzUTBGQlF5eHBSVUZCYjBJc1JVRkJSU3hGUVVGRkxHZENRVUZuUWl4RFFVRkRMRU5CUVVNN1dVRkRja1FzZFVSQlFWVXNRMEZEVGl4cFJVRkJiMElzUlVGQlJTeEZRVU4wUWl4blNVRkJaMGtzUTBGRGJra3NRMEZCUXp0WlFVTkdMRWxCUVVrc1EwRkJReXhqUVVGakxFTkJRVU1zWVVGQllTeERRVU0zUWl4SlFVRkpMSGRGUVVGMVFpeERRVUZETEVWQlFVVXNUVUZCVFN4RlFVRkZMR2RDUVVGblFpeEZRVUZGTEVOQlFVTXNRMEZETlVRc1EwRkJRenRSUVVOT0xFTkJRVU1zUTBGQlF5eERRVUZETzBsQlExQXNRMEZCUXp0SlFVVkVPenRQUVVWSE8wbEJRMGdzSzBKQlFTdENPMUZCUXpOQ0xFbEJRVWtzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4aFFVRmhMRU5CUVVNc1owVkJRVzFDTEVOQlFVTXNSVUZCUlR0WlFVTm9SQ3cwUWtGQk5FSTdXVUZETlVJc1NVRkJTU3hEUVVGRExGVkJRVlVzUlVGQlJTeERRVUZETzFOQlEzSkNPMUZCUTBRc1NVRkJTU3hEUVVGRExHbENRVUZwUWl4RlFVRkZMRU5CUVVNN1NVRkROMElzUTBGQlF6dEpRVVZFT3p0UFFVVkhPMGxCUTBnc2VVSkJRWGxDTzFGQlEzSkNMRTFCUVUwc1lVRkJZU3hIUVVGSExFbEJRVWtzUTBGQlF5eHZRa0ZCYjBJc1JVRkJSU3hEUVVGRE8xRkJRMnhFTEVsQlFVa3NRMEZCUXl4dFFrRkJiVUlzUTBGQlF5eFBRVUZQTEVOQlFVTXNZVUZCWVN4RFFVRkRMRU5CUVVNN1NVRkRjRVFzUTBGQlF6dEpRVVZFT3pzN08wOUJTVWM3U1VGRFNDeFpRVUZaTEVOQlFVTXNWVUZCTkVJN1VVRkRja01zU1VGQlNTeERRVUZETEZWQlFWVXNSMEZCUnl4VlFVRlZMRU5CUVVNN1VVRkROMElzZVVKQlFYbENPMUZCUTNwQ0xFbEJRVWtzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4aFFVRmhMRU5CUVVNc05FUkJRV1VzUTBGQlF5eEZRVUZGTzFsQlF6VkRMREJDUVVFd1FqdFpRVU14UWl4TlFVRk5MR0ZCUVdFc1IwRkJSeXhKUVVGSkxFTkJRVU1zTWtKQlFUSkNMRU5CUVVNc1ZVRkJWU3hEUVVGRExFTkJRVU03V1VGRmJrVXNaMFZCUVdkRk8xbEJRMmhGTEVsQlFVa3NRMEZCUXl4aFFVRmhMRVZCUVVVN1owSkJRMmhDTEhkRVFVRlhMRU5CUTFBc2FVVkJRVzlDTEVWQlFVVXNSVUZEZEVJc05raEJRVFpJTEVOQlEyaEpMRU5CUVVNN1owSkJRMFlzU1VGQlNTeERRVUZETERSQ1FVRTBRaXhEUVVNM1FpeHhSVUZCY1VVc1EwRkRlRVVzUTBGQlF6dG5Ra0ZEUml4SlFVRkpMRU5CUVVNc2IwSkJRVzlDTEVWQlFVVXNRMEZCUXp0blFrRkROVUlzVDBGQlR6dGhRVU5XTzFOQlEwbzdVVUZGUkN4M1EwRkJkME03VVVGRGVFTXNTVUZCU1N4RFFVRkRMSGRDUVVGM1FpeEhRVUZITEVsQlFVa3NlVWRCUVhkQ0xFTkJRM2hFTEVsQlFVa3NRMEZCUXl4VlFVRlZMRVZCUTJZc1NVRkJTU3hEUVVGRExFMUJRVTBzUlVGRFdDeEpRVUZKTEVOQlFVTXNZMEZCWXl4RFFVTjBRaXhEUVVGRE8xRkJSVVlzWjBSQlFXZEVPMUZCUTJoRUxFbEJRVWtzUTBGQlF5eDNRa0ZCZDBJc1EwRkJReXhaUVVGWkxFZEJRVWNzUTBGQlF5eExRVUZ6UWl4RlFVRkZMRVZCUVVVc1EwRkRjRVVzU1VGQlNTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETzFGQlJXcERMSEZGUVVGeFJUdFJRVU55UlN4SlFVRkpMRU5CUVVNc2QwSkJRWGRDTEVOQlFVTXNhVUpCUVdsQ0xFZEJRVWNzUTBGRE9VTXNTMEZCWjBNc1JVRkRiRU1zUlVGQlJTeERRVUZETEVsQlFVa3NRMEZCUXl4eFFrRkJjVUlzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXp0UlFVVjJReXh6UlVGQmMwVTdVVUZEZEVVc1NVRkJTU3hEUVVGRExIZENRVUYzUWl4RFFVRkRMR3RDUVVGclFpeEhRVUZITEVOQlF5OURMRXRCUVdkRExFVkJRMnhETEVWQlFVVXNRMEZCUXl4SlFVRkpMRU5CUVVNc2MwSkJRWE5DTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNN1VVRkZlRU1zY1VWQlFYRkZPMUZCUTNKRkxFbEJRVWtzUTBGQlF5eDNRa0ZCZDBJc1EwRkJReXhyUWtGQmEwSXNSMEZCUnl4RFFVTXZReXh6UWtGQmFVUXNSVUZEYmtRc1JVRkJSU3hEUVVGRExFbEJRVWtzUTBGQlF5eHpRa0ZCYzBJc1EwRkJReXh6UWtGQmMwSXNRMEZCUXl4RFFVRkRPMUZCUlhwRUxEQkdRVUV3Ump0UlFVTXhSaXhKUVVGSkxFTkJRVU1zZDBKQlFYZENMRU5CUVVNc1lVRkJZU3hIUVVGSExFTkJRekZETEdkQ1FVRnhReXhGUVVOMlF5eEZRVUZGTEVOQlFVTXNTVUZCU1N4RFFVRkRMR2xDUVVGcFFpeERRVUZETEdkQ1FVRm5RaXhEUVVGRExFTkJRVU03VVVGRk9VTXNPRUpCUVRoQ08xRkJRemxDTEVsQlFVa3NRMEZCUXl4M1FrRkJkMElzUTBGQlF5eDVRa0ZCZVVJc1IwRkJSeXhIUVVGSExFVkJRVVVzUTBGRE0wUXNTVUZCU1N4RFFVRkRMR05CUVdNc1EwRkJReXh0UWtGQmJVSXNSVUZCUlN4RFFVRkRPMUZCUXpsRExFbEJRVWtzUTBGQlF5eDNRa0ZCZDBJc1EwRkJReXd5UWtGQk1rSXNSMEZCUnl4SFFVRkhMRVZCUVVVc1EwRkROMFFzU1VGQlNTeERRVUZETEdOQlFXTXNRMEZCUXl4bFFVRmxMRVZCUVVVc1EwRkJRenRSUVVNeFF5eEpRVUZKTEcxQ1FVRnRRaXhIUVVGSExFdEJRVXNzUTBGQlF6dFJRVU5vUXl4SlFVRkpMRU5CUVVNc2QwSkJRWGRDTEVOQlFVTXNNRUpCUVRCQ0xFZEJRVWNzUjBGQlJ5eEZRVUZGTzFsQlF6VkVMSGxHUVVGNVJqdFpRVU42Uml4clIwRkJhMGM3V1VGRGJFY3NORVpCUVRSR08xbEJRelZHTEVsQlFVa3NRMEZCUXl4dFFrRkJiVUk3WjBKQlEzQkNMRU5CUVVNc1YwRkJWeXhGUVVGRkxGZEJRVmNzUTBGQlF5eERRVUZETEZGQlFWRXNRMEZCUXl4SlFVRkpMRU5CUVVNc2QwSkJRWGRDTEVOQlFVTXNZMEZCWXl4RFFVRkRMR3RDUVVGclFpeERRVUZETEVWQlFVVTdaMEpCUTNSSExFbEJRVWtzUTBGQlF5eGpRVUZqTEVOQlFVTXNhMEpCUVd0Q0xFVkJRVVVzUTBGQlF6dG5Ra0ZEZWtNc2JVSkJRVzFDTEVkQlFVY3NTVUZCU1N4RFFVRkRPMkZCUXpsQ08xRkJRMHdzUTBGQlF5eERRVUZETzFGQlJVWXNNa1JCUVRKRU8xRkJRek5FTEVsQlFVa3NRMEZCUXl4M1FrRkJkMElzUTBGQlF5eFBRVUZQTEVkQlFVY3NRMEZCUXl4VlFVRjVRaXhGUVVGRkxFVkJRVVVzUTBGRGJFVXNTVUZCU1N4RFFVRkRMR2RDUVVGblFpeERRVUZETEdGQlFXRXNRMEZCUXl4VlFVRlZMRU5CUVVNc1EwRkJRenRSUVVWd1JDeDFSRUZCZFVRN1VVRkRka1FzVFVGQlRTeHBRa0ZCYVVJc1IwRkJSeXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEdGQlFXRXNRMEZETDBNc2JVVkJRWE5DTEVOQlEzcENMRU5CUVVNN1VVRkRSaXhKUVVGSkxHbENRVUZwUWl4RlFVRkZPMWxCUTI1Q0xDdEZRVUVyUlR0WlFVTXZSU3hKUVVGSkxFTkJRVU1zTmtKQlFUWkNMRU5CUVVNc2FVSkJRV2xDTEVOQlEyaEVMRWxCUVVrc1EwRkJReXgzUWtGQmQwSXNRMEZCUXl4alFVRmpMRVZCUXpWRExGRkJRVkVzUlVGRFVpeEpRVUZKTEVOQlFVTXNhMEpCUVd0Q0xFTkJRekZDTEVOQlFVTTdXVUZEUml4SlFVRkpMRU5CUVVNc05rSkJRVFpDTEVOQlFVTXNaVUZCWlN4SFFVRkhMRU5CUTJwRUxFVkJRVFpDTEVWQlF5OUNMRVZCUVVVc1EwRkJReXhKUVVGSkxFTkJRVU1zWlVGQlpTeERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRPMWxCUXpsQ0xFbEJRVWtzUTBGQlF5eDNRa0ZCZDBJc1EwRkJReXhYUVVGWExFTkJRM0pETEVsQlFVa3NRMEZCUXl4alFVRmpMRVZCUTI1Q0xFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlEyUXNRMEZCUXp0VFFVTk1PMGxCUTB3c1EwRkJRenRKUVVWRU96dFBRVVZITzBsQlEwZ3NNa0pCUVRKQ0xFTkJRVU1zVDBGQmVVSTdVVUZEYWtRc2FVZEJRV2xITzFGQlEycEhMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zVlVGQlZTeEZRVUZGTzFsQlEzSkNMSGRFUVVGWExFTkJRVU1zYVVWQlFXOUNMRVZCUVVVc1JVRkJSU3cwUWtGQk5FSXNRMEZCUXl4RFFVRkRPMWxCUTJ4RkxFOUJRVThzUzBGQlN5eERRVUZETzFOQlEyaENPMUZCUlVRc2RVUkJRWFZFTzFGQlEzWkVMRXRCUVVzc1RVRkJUU3hUUVVGVExFbEJRVWtzVDBGQlR5eERRVUZETEZWQlFWVXNSVUZCUlR0WlFVTjRReXhMUVVGTExFMUJRVTBzUjBGQlJ5eEpRVUZKTEZOQlFWTXNRMEZCUXl4SlFVRkpMRVZCUVVVN1owSkJRemxDTEVsQlFVa3NSMEZCUnl4RFFVRkRMRkZCUVZFc1EwRkJReXhOUVVGTkxFTkJRVU1zUlVGQlJUdHZRa0ZEZEVJc2RVUkJRVlVzUTBGRFRpeHBSVUZCYjBJc1JVRkJSU3hGUVVOMFFpdzJRa0ZCTmtJc1IwRkJSeXhGUVVGRkxFTkJRM0pETEVOQlFVTTdiMEpCUTBZc1QwRkJUeXhKUVVGSkxFTkJRVU03YVVKQlEyWTdZVUZEU2p0VFFVTktPMUZCUlVRc2QwUkJRVmNzUTBGQlF5eHBSVUZCYjBJc1JVRkJSU3hGUVVGRkxEUkNRVUUwUWl4RFFVRkRMRU5CUVVNN1VVRkRiRVVzVDBGQlR5eExRVUZMTEVOQlFVTTdTVUZEYWtJc1EwRkJRenRKUVVWRU96czdUMEZIUnp0SlFVTklMSEZDUVVGeFFpeERRVUZETEdGQlFUUkNPMUZCUXpsRExFbEJRVWtzUTBGQlF5eHBRa0ZCYVVJc1JVRkJSU3hEUVVGRE8xRkJSWHBDTEc5SFFVRnZSenRSUVVOd1J5eEpRVUZKTEVOQlFVTXNXVUZCV1N4RFFVRkRMR0ZCUVdFc1EwRkJReXh4UWtGQmNVSXNRMEZCUXl4RFFVRkRPMUZCUlhaRUxEWklRVUUyU0R0UlFVTTNTQ3hKUVVGSkxFTkJRVU1zYlVKQlFXMUNMRU5CUVVNc1kwRkJZeXhIUVVGSExFTkJRM1JETEdGQlFUSkRMRVZCUXpkRExFVkJRVVVzUTBGQlF5eEpRVUZKTEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU1zWVVGQllTeERRVUZETEVOQlFVTTdVVUZETlVNc1NVRkJTU3hEUVVGRExHMUNRVUZ0UWl4RFFVRkRMR0ZCUVdFc1IwRkJSeXhEUVVOeVF5eFpRVUY1UXl4RlFVTXpReXhGUVVGRkxFTkJRVU1zU1VGQlNTeERRVUZETEdsQ1FVRnBRaXhEUVVGRExGbEJRVmtzUTBGQlF5eERRVUZETzFGQlF6RkRMRWxCUVVrc1EwRkJReXh0UWtGQmJVSXNRMEZCUXl4M1FrRkJkMElzUjBGQlJ5eERRVU5vUkN4dFFrRkJNa1FzUlVGRE4wUXNSVUZCUlN4RFFVRkRMRWxCUVVrc1EwRkJReXdyUWtGQkswSXNRMEZCUXl4dFFrRkJiVUlzUTBGQlF5eERRVUZETzFGQlJTOUVMRFJJUVVFMFNEdFJRVU0xU0N4SlFVRkpMRU5CUVVNc2JVSkJRVzFDTEVOQlFVTXNZMEZCWXl4SFFVRkhMRU5CUTNSRExGbEJRV2xETEVWQlEyNURMRVZCUVVVc1EwRkJReXhKUVVGSkxFTkJRVU1zYTBKQlFXdENMRU5CUVVNc1dVRkJXU3hEUVVGRExFTkJRVU03U1VGREwwTXNRMEZCUXp0SlFVVkVPenRQUVVWSE8wbEJRMGdzZVVKQlFYbENMRU5CUVVNc2JVSkJRWGRETzFGQlF6bEVMSFZFUVVGVkxFTkJRMDRzYVVWQlFXOUNMRVZCUVVVc1JVRkRkRUlzY1VKQlFYRkNMRzFDUVVGdFFpeERRVUZETEVkQlFVY3NSVUZCUlN4RlFVTTVReXhEUVVGRExFTkJRMG9zUTBGQlF6dFJRVVZHTEVsQlFVY3NTVUZCU1N4RFFVRkRMR05CUVdNc1JVRkJSVHRaUVVOd1FpeEpRVUZITEcxQ1FVRnRRaXhEUVVGRExFZEJRVWNzUTBGQlF5eFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRMR2RDUVVGblFpeERRVUZETEVWQlFVVTdaMEpCUTNoRUxEaEdRVUU0Ump0blFrRkRPVVlzU1VGQlNTeERRVUZETEdOQlFXTXNSMEZCUnl4TFFVRkxMRU5CUVVNN1owSkJRelZDTEVsQlFVa3NRMEZCUXl4blFrRkJaMElzUjBGQlJ5eERRVUZETEVOQlFVTTdaMEpCUXpGQ0xFbEJRVWtzUTBGQlF5eHRRa0ZCYlVJc1EwRkJReXhoUVVGaExFTkJRVU1zU1VGQlNTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExFTkJRVU03WVVGRGFrVTdhVUpCUVUwc1NVRkJSeXhKUVVGSkxFTkJRVU1zWjBKQlFXZENMRWRCUVVjc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eHpRa0ZCYzBJc1EwRkJReXh0UmtGQmMwTXNRMEZCUXl4RlFVRkZPMmRDUVVNeFJ5d3dSa0ZCTUVZN1owSkJRekZHTEVsQlFVa3NRMEZCUXl4blFrRkJaMElzUlVGQlJTeERRVUZETzJkQ1FVTjRRaXhWUVVGVkxFTkJRVU1zUjBGQlJ5eEZRVUZGTzI5Q1FVTmFMRWxCUVVrc1EwRkJReXh0UWtGQmJVSXNRMEZCUXl4dFFrRkJiVUlzUlVGQlJTeERRVUZETzJkQ1FVTnVSQ3hEUVVGRExFVkJRVVVzU1VGQlNTeERRVUZETzJGQlExZzdhVUpCUVUwN1owSkJRMGdzWjBWQlFXZEZPMmRDUVVOb1JTeEpRVUZKTEVOQlFVTXNaMEpCUVdkQ0xFZEJRVWNzUTBGQlF5eERRVUZETzJkQ1FVTXhRaXhKUVVGSkxFTkJRVU1zWTBGQll5eEhRVUZITEV0QlFVc3NRMEZCUXp0blFrRkROVUlzU1VGQlNTeERRVUZETEdWQlFXVXNSMEZCUnl4TFFVRkxMRU5CUVVNN1owSkJRemRDTEVsQlFVa3NRMEZCUXl4dFFrRkJiVUlzUTBGQlF5eExRVUZMTEVWQlFVVXNRMEZCUXp0blFrRkZha01zU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4eFFrRkJjVUlzUTBGRE4wSXNkMFZCUVRKQ0xFVkJRek5DTEVWQlFVVXNRMEZEVEN4RFFVRkRPMmRDUVVOR0xFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNkVUpCUVhWQ0xFTkJReTlDTEhkRlFVRXlRaXhGUVVNelFpeEZRVUZGTEVOQlEwd3NRMEZCUXp0aFFVTk1PMU5CUTBvN1lVRkJUVHRaUVVOSUxFMUJRVTBzWTBGQll5eEhRVUZITEVOQlFVTXNSMEZCUnl4dFFrRkJiVUlzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRMRFJEUVVFMFF6dFpRVU5xUnl4alFVRmpMRU5CUVVNc1QwRkJUeXhEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTXNhVU5CUVdsRE8xbEJRemRFTEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc2RVSkJRWFZDTEVOQlF5OUNMSGRGUVVFeVFpeEZRVU16UWl4alFVRmpMRU5CUTJwQ0xFTkJRVU03V1VGRlJpeE5RVUZOTEZOQlFWTXNSMEZCUnl4SlFVRkpMR1ZCUVdVc1EwRkJReXhOUVVGTkxFTkJRVU1zVVVGQlVTeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRPMWxCUXpsRUxFbEJRVWtzYzBKQlFYTkNMRWRCUVd0Q0xFbEJRVWtzUTBGQlF6dFpRVU5xUkN4SlFVRkpMRzFDUVVGdFFpeERRVUZETEVkQlFVY3NRMEZCUXl4TlFVRk5MRWxCUVVrc1EwRkJReXhGUVVGRk8yZENRVU55UXl4elJrRkJjMFk3WjBKQlEzUkdMSE5DUVVGelFpeEhRVUZITEcxQ1FVRnRRaXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0aFFVTjJSRHRwUWtGQlRTeEpRVU5JTEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1lVRkJZU3hEUVVGRExEUkVRVUZsTEVOQlFVTTdaMEpCUXpGRExHMUNRVUZ0UWl4RFFVRkRMRWRCUVVjc1EwRkJReXhSUVVGUkxFTkJRVU1zUzBGQlN5eERRVUZETEVWQlEzcERPMmRDUVVORkxIbEhRVUY1Unp0blFrRkRla2NzYzBKQlFYTkNMRWRCUVVjc1MwRkJTeXhEUVVGRE8yRkJRMnhETzJsQ1FVRk5MRWxCUTBnc1UwRkJVeXhEUVVGRExFZEJRVWNzUTBGQlF5eDNSVUZCTWtJc1EwRkJRenRuUWtGRE1VTXNiVUpCUVcxQ0xFTkJRVU1zUjBGQlJ5eERRVUZETEZGQlFWRXNRMEZETlVJc1UwRkJVeXhEUVVGRExFZEJRVWNzUTBGQlF5eDNSVUZCTWtJc1EwRkJReXhEUVVNM1F5eEZRVU5JTzJkQ1FVTkZMR2RJUVVGblNEdG5Ra0ZEYUVnc2MwSkJRWE5DTEVkQlFVY3NVMEZCVXl4RFFVRkRMRWRCUVVjc1EwRkJReXgzUlVGQk1rSXNRMEZCUXl4RFFVRkRPMkZCUTNaRk8xbEJRMFFzU1VGQlNTeHpRa0ZCYzBJc1MwRkJTeXhKUVVGSkxFVkJRVVU3WjBKQlEycERMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zY1VKQlFYRkNMRU5CUXpkQ0xIZEZRVUV5UWl4RlFVTXpRaXh6UWtGQmMwSXNRMEZEZWtJc1EwRkJRenRoUVVOTU8xbEJRMFFzU1VGQlNTeERRVUZETEdOQlFXTXNRMEZCUXl4aFFVRmhMRU5CUXpkQ0xFbEJRVWtzZVVWQlFYZENMRU5CUVVNN1owSkJRM3BDTEcxQ1FVRnRRanRuUWtGRGJrSXNjMEpCUVhOQ08yRkJRM3BDTEVOQlFVTXNRMEZEVEN4RFFVRkRPMU5CUTB3N1NVRkRUQ3hEUVVGRE8wbEJSVVE3T3p0UFFVZEhPMGxCUTBnc2EwSkJRV3RDTEVOQlFVTXNUVUZCY1VJN1VVRkRjRU1zZFVSQlFWVXNRMEZCUXl4cFJVRkJiMElzUlVGQlJTeEZRVUZGTEd0Q1FVRnJRaXhOUVVGTkxFTkJRVU1zUjBGQlJ5eEZRVUZGTEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkZkRVVzVFVGQlRTeFRRVUZUTEVkQlFUaENPMWxCUTNwRExFZEJRVWNzUlVGQlJTeE5RVUZOTEVOQlFVTXNSMEZCUnp0WlFVTm1MRWxCUVVrc1JVRkJSU3hSUVVGUk8xTkJRMnBDTEVOQlFVTTdVVUZGUml4SlFVRkpMRU5CUVVNc2QwSkJRWGRDTEVOQlFVTXNZVUZCWVN4RFFVRkRMRk5CUVZNc1EwRkJReXhEUVVGRE8xRkJRM1pFTEVsQlFVa3NRMEZCUXl3eVFrRkJNa0lzUlVGQlJTeERRVUZETzBsQlEzWkRMRU5CUVVNN1NVRkZSRHM3TzA5QlIwYzdTVUZEU0N4cFFrRkJhVUlzUTBGQlF5eExRVUZ0UWp0UlFVTnFReXgxUkVGQlZTeERRVUZETEdsRlFVRnZRaXhGUVVGRkxFVkJRVVVzYVVKQlFXbENMRXRCUVVzc1EwRkJReXhIUVVGSExFVkJRVVVzUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXp0UlFVVndSU3hKUVVGSkxFTkJRVU1zVlVGQlZTeEhRVUZITEV0QlFVc3NRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRExFdEJRVXNzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRMRXRCUVVzc1EwRkJRenRSUVVOb1JDeEpRVUZKTEVsQlFVa3NRMEZCUXl4VlFVRlZMRVZCUVVVN1dVRkRha0lzWjBaQlFXZEdPMWxCUTJoR0xFbEJRVWtzUTBGQlF5eDNRa0ZCZDBJc1EwRkJReXhqUVVGakxFZEJRVWNzUlVGQlJTeERRVUZETzFOQlEzSkVPMUZCUlVRc1RVRkJUU3hSUVVGUkxFZEJRVGhDTzFsQlEzaERMRWRCUVVjc1JVRkJSU3hMUVVGTExFTkJRVU1zUjBGQlJ6dFpRVU5rTEVsQlFVa3NSVUZCUlN4UFFVRlBPMU5CUTJoQ0xFTkJRVU03VVVGRlJpeEpRVUZKTEVOQlFVTXNkMEpCUVhkQ0xFTkJRVU1zV1VGQldTeERRVUZETEZGQlFWRXNSVUZCUlN4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU03VVVGRGJFVXNTVUZCU1N4RFFVRkRMREpDUVVFeVFpeEZRVUZGTEVOQlFVTTdTVUZEZGtNc1EwRkJRenRKUVVWRU96czdUMEZIUnp0SlFVTklMQ3RDUVVFclFpeERRVU16UWl4WlFVRnZSRHRSUVVWd1JDeE5RVUZOTEZkQlFWY3NSMEZCZFVJN1dVRkRjRU1zVDBGQlR5eEZRVUZGTEVsQlFVazdXVUZEWWl4VlFVRlZMRVZCUVVVc1NVRkJTVHRaUVVOb1FpeEZRVUZGTEVWQlFVVXNXVUZCV1N4RFFVRkRMRmxCUVZrN1UwRkRhRU1zUTBGQlF6dFJRVVZHTEUxQlFVMHNZMEZCWXl4SFFVTm9RaXhaUVVGWkxFTkJRVU1zV1VGQldTeEpRVUZKTEZsQlFWa3NRMEZCUXl4WlFVRlpMRU5CUVVNN1VVRkZNMFFzU1VGQlNTeERRVUZETERaQ1FVRTJRaXhEUVVGRExHbENRVUZwUWl4RFFVTm9SQ3hKUVVGSkxFTkJRVU1zZDBKQlFYZENMRU5CUVVNc1kwRkJZeXhGUVVNMVF5eGpRVUZqTEVOQlFVTXNRMEZCUXl4RFFVRkRMR3RDUVVGclFpeERRVUZETEVOQlFVTXNRMEZCUXl4aFFVRmhMRVZCUTI1RUxGZEJRVmNzUTBGRFpDeERRVUZETzFGQlJVWXNTVUZCU1N4alFVRmpMRVZCUVVVN1dVRkRhRUlzVFVGQlRTeFhRVUZYTEVkQlFYVkNPMmRDUVVOd1F5eFBRVUZQTEVWQlFVVXNTVUZCU1R0blFrRkRZaXhWUVVGVkxFVkJRVVVzU1VGQlNUdG5Ra0ZEYUVJc1JVRkJSU3hGUVVGRkxGbEJRVmtzUTBGQlF5eFpRVUZaTzJGQlEyaERMRU5CUVVNN1dVRkZSaXhKUVVGSkxFTkJRVU1zZVVKQlFYbENMRU5CUVVNc2FVSkJRV2xDTEVOQlF6VkRMRWxCUVVrc1EwRkJReXgzUWtGQmQwSXNRMEZCUXl4alFVRmpMRVZCUXpWRExHdENRVUZyUWl4RlFVTnNRaXhYUVVGWExFTkJRMlFzUTBGQlF6dFpRVU5HTEVsQlFVa3NRMEZCUXl4NVFrRkJlVUlzUTBGQlF5eFpRVUZaTEVkQlFVY3NSMEZCUnl4RlFVRkZMRU5CUXk5RExFbEJRVWtzUTBGQlF5eHRRa0ZCYlVJc1EwRkJReXd5UWtGQk1rSXNSVUZCUlN4RFFVRkRPMWxCUXpORUxIVkdRVUYxUmp0WlFVTjJSaXhKUVVGSkxFTkJRVU1zZVVKQlFYbENMRU5CUVVNc1pVRkJaU3hIUVVGSExFTkJRemRETEVWQlFXZENMRVZCUTJ4Q0xFVkJRVVVzUTBGQlF5eEpRVUZKTEVOQlFVTXNaVUZCWlN4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRE8xTkJRMnBETzJGQlFVMDdXVUZEU0N3clJVRkJLMFU3V1VGREwwVXNTVUZCU1N4RFFVRkRMRFpDUVVFMlFpeERRVUZETEdWQlFXVXNSMEZCUnl4RFFVTnFSQ3hGUVVGblFpeEZRVU5zUWl4RlFVRkZMRU5CUVVNc1NVRkJTU3hEUVVGRExHVkJRV1VzUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXp0VFFVTnFRenRKUVVOTUxFTkJRVU03U1VGRlJDd3lRa0ZCTWtJN1VVRkRka0lzYlVSQlFXMUVPMUZCUTI1RUxFbEJRVWtzUTBGQlF5eGhRVUZoTEVOQlFVTXNiMEpCUVc5Q0xFVkJRVVVzUTBGQlF6dFJRVU14UXl4M1JFRkJkMFE3VVVGRGVFUXNTVUZCU1N4RFFVRkRMR05CUVdNc1EwRkJReXhaUVVGWkxFVkJRVVVzUTBGQlF6dFJRVVZ1UXl4SlFVRkpMRWxCUVVrc1EwRkJReXhuUWtGQlowSXNTVUZCU1N4SlFVRkpMRU5CUVVNc1owSkJRV2RDTEV0QlFVc3NVMEZCVXl4RlFVRkZPMWxCUXpsRUxFMUJRVTBzUTBGQlF5eGhRVUZoTEVOQlFVTXNTVUZCU1N4RFFVRkRMR2RDUVVGblFpeERRVUZETEVOQlFVTTdVMEZETDBNN1VVRkZSQ3hKUVVGSkxFTkJRVU1zWjBKQlFXZENMRWRCUVVjc1RVRkJUU3hEUVVGRExGZEJRVmNzUTBGQlF5eEhRVUZITEVWQlFVVXNRMEZCUXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hGUVVGRkxFVkJRVVVzU1VGQlNTeERRVUZETEVOQlFVTTdVVUZGZUVVc1RVRkJUVHRSUVVOT0xFbEJRVWtzUTBGQlF5eHZRa0ZCYjBJc1EwRkJReXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEdGQlFXRXNRMEZCUXl3MlJFRkJaMElzUTBGQlF5eERRVUZETEVOQlFVTTdVVUZEZGtVc1NVRkJTU3hEUVVGRExIVkNRVUYxUWl4RFFVRkRMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zWVVGQllTeERRVUZETEdkRlFVRnRRaXhEUVVGRExFTkJRVU1zUTBGQlF6dFJRVU0zUlN4SlFVRkpMRU5CUVVNc2MwSkJRWE5DTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhoUVVGaExFTkJRVU1zSzBSQlFXdENMRU5CUVVNc1EwRkJReXhEUVVGRE8wbEJReTlGTEVOQlFVTTdTVUZGUkRzN08wOUJSMGM3U1VGRFNDeHJRa0ZCYTBJc1EwRkJReXhaUVVGcFF6dFJRVU5vUkN4MVJFRkJWU3hEUVVOT0xHbEZRVUZ2UWl4RlFVRkZMRVZCUTNSQ0xHbERRVUZwUXl4RlFVTnFReXhEUVVGRExFTkJRMG9zUTBGQlF6dFJRVVZHTEUxQlFVMHNVMEZCVXl4SFFVRkhMRWxCUVVrc1pVRkJaU3hEUVVGRExGbEJRVmtzUTBGQlF5eERRVUZETzFGQlEzQkVMRWxCUVVrc1EwRkJReXgzUWtGQmQwSXNRMEZCUXl4WFFVRlhMRU5CUVVNc1UwRkJVeXhEUVVGRExFTkJRVU03U1VGRGVrUXNRMEZCUXp0SlFVVkVPenM3VDBGSFJ6dEpRVU5JTEhOQ1FVRnpRaXhEUVVGRExGRkJRVzFETzFGQlEzUkVMSFZFUVVGVkxFTkJRVU1zYVVWQlFXOUNMRVZCUVVVc1JVRkJSU3huUWtGQlowSXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJRenRSUVVONFJDeEpRVUZKTEZGQlFWRXNRMEZCUXl4VFFVRlRMRWxCUVVrc1VVRkJVU3hEUVVGRExGTkJRVk1zUTBGQlF5eFRRVUZUTEVWQlFVVTdXVUZEY0VRc1NVRkJTU3hEUVVGRExHMUNRVUZ0UWl4RFFVRkRMR2RDUVVGblFpeERRVUZETEZGQlFWRXNRMEZCUXl4VFFVRlRMRU5CUVVNc1EwRkJRenRUUVVOcVJUdEpRVU5NTEVOQlFVTTdTVUZGUkRzN08wOUJSMGM3U1VGRFNDeHBRa0ZCYVVJc1EwRkJReXhuUWtGQmNVTTdVVUZEYmtRc2RVUkJRVlVzUTBGRFRpeHBSVUZCYjBJc1JVRkJSU3hGUVVOMFFpeHZSVUZCYjBVc1JVRkRjRVVzUTBGQlF5eERRVU5LTEVOQlFVTTdVVUZEUml4SlFVRkpMRU5CUVVNc05rSkJRVFpDTEVOQlFVTXNWMEZCVnp0WlFVTXhReXhuUWtGQlowSXNRMEZCUXl4UFFVRlBMRU5CUVVNN1VVRkROMElzZVVaQlFYbEdPMUZCUTNwR0xFbEJRVWtzUTBGQlF5dzJRa0ZCTmtJc1EwRkJReXhuUWtGQlowSXNSVUZCUlN4RFFVRkRPMUZCUTNSRUxFbEJRVWtzUTBGQlF5dzJRa0ZCTmtJc1EwRkJReXhsUVVGbExFZEJRVWNzUTBGRGFrUXNSVUZCTmtJc1JVRkRMMElzUlVGQlJTeERRVUZETEVsQlFVa3NRMEZCUXl4bFFVRmxMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU03U1VGRGJFTXNRMEZCUXp0SlFVVkVPenM3VDBGSFJ6dEpRVU5JTEhGQ1FVRnhRaXhEUVVGRExFdEJRV2RETzFGQlEyeEVMSFZFUVVGVkxFTkJRMDRzYVVWQlFXOUNMRVZCUVVVc1JVRkRkRUlzYVVOQlFXbERMRVZCUTJwRExFTkJRVU1zUTBGRFNpeERRVUZETzFGQlEwWXNTVUZCU1N4RFFVRkRMRzFDUVVGdFFpeERRVUZETEdWQlFXVXNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRenRKUVVOd1JDeERRVUZETzBsQlJVUTdPenRQUVVkSE8wbEJRMGdzYzBKQlFYTkNMRU5CUVVNc1RVRkJhVU03VVVGRGNFUXNkVVJCUVZVc1EwRkRUaXhwUlVGQmIwSXNSVUZCUlN4RlFVTjBRaXhyUTBGQmEwTXNSVUZEYkVNc1EwRkJReXhEUVVOS0xFTkJRVU03VVVGRFJpeEpRVUZKTEVOQlFVTXNiVUpCUVcxQ0xFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU03VVVGRmJFUXNTVUZCU1N4SlFVRkpMRU5CUVVNc1ZVRkJWU3hGUVVGRk8xbEJRMnBDTEVsQlFVa3NRMEZCUXl4dFFrRkJiVUlzUTBGQlF5dzBRa0ZCTkVJc1JVRkJSU3hEUVVGRE8xTkJRek5FTzBsQlEwd3NRMEZCUXp0SlFVVkVPenRQUVVWSE8wbEJRMGdzZDBKQlFYZENPMUZCUTNCQ0xIVkdRVUYxUmp0UlFVTjJSaXhKUVVGSkxFTkJRVU1zTkVKQlFUUkNMRWRCUVVjc1NVRkJTU3hEUVVGRExGZEJRVmM3WVVGREwwTXNjVUpCUVhGQ0xFVkJRVVU3WVVGRGRrSXNjVUpCUVhGQ0xFVkJRVVVzUTBGQlF6dFJRVU0zUWl4SlFVRkpMRU5CUVVNc2JVSkJRVzFDTEVOQlFVTXNlVUpCUVhsQ0xFVkJRVVVzUTBGQlF6dFJRVU55UkN4SlFVRkpMRU5CUVVNc2NVSkJRWEZDTEVOQlFVTXNWMEZCVnl4RFFVRkRMRTFCUVUwc1JVRkJSU3hEUVVGRE8wbEJRM0JFTEVOQlFVTTdTVUZGUkRzN1QwRkZSenRKUVVOSUxHOUNRVUZ2UWpzN1VVRkRhRUlzWjBaQlFXZEdPMUZCUTJoR0xFbEJRVWtzUTBGQlF5eGxRVUZsTEVkQlFVY3NTMEZCU3l4RFFVRkRPMUZCUXpkQ0xGVkJRVWtzUTBGQlF5eHRRa0ZCYlVJc01FTkJRVVVzUzBGQlN5eEZRVUZGTEVOQlFVTTdTVUZEZEVNc1EwRkJRenRKUVVWRU96dFBRVVZITzBsQlEwZ3NiVUpCUVcxQ096dFJRVU5tTEZWQlFVa3NRMEZCUXl4M1FrRkJkMElzTUVOQlFVVXNTMEZCU3l4RlFVRkZMRU5CUVVNN1NVRkRNME1zUTBGQlF6dEpRVVZFT3p0UFFVVkhPMGxCUTBnc1MwRkJTenRSUVVORUxFbEJRVWtzUTBGQlF5eHZRa0ZCYjBJc1JVRkJSU3hEUVVGRE8xRkJRelZDTEVsQlFVa3NRMEZCUXl4dFFrRkJiVUlzUlVGQlJTeERRVUZETzBsQlF5OUNMRU5CUVVNN1NVRkZSRHM3VDBGRlJ6dEpRVU5JTEZGQlFWRTdVVUZEU2l4SlFVRkpMRU5CUVVNc2QwSkJRWGRDTEVOQlFVTXNZVUZCWVN4RlFVRkZMRU5CUVVNN1NVRkRiRVFzUTBGQlF6dEpRVVZFT3p0UFFVVkhPMGxCUTBnc1pVRkJaVHRSUVVOWUxFbEJRVWtzUTBGQlF5eG5Ra0ZCWjBJc1IwRkJSeXhKUVVGSkxFTkJRVU1zUjBGQlJ5eEZRVUZGTEVOQlFVTTdVVUZEYmtNc1NVRkJTU3hEUVVGRExIZENRVUYzUWl4RFFVRkRMR1ZCUVdVc1EwRkJRenRaUVVNeFF5eFRRVUZUTEVWQlFVVXNTVUZCU1N4RFFVRkRMR2RDUVVGblFqdFRRVU51UXl4RFFVRkRMRU5CUVVNN1NVRkRVQ3hEUVVGRE8wbEJSVVE3T3pzN096czdPMDlCVVVjN1NVRkRTQ3huUWtGQlowSXNRMEZCUXl4TFFVRmhPMUZCUXpGQ0xIVkVRVUZWTEVOQlFVTXNhVVZCUVc5Q0xFVkJRVVVzUlVGQlJTeFRRVUZUTEV0QlFVc3NTVUZCU1N4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRE8xRkJSVEZFTEVsQlFVa3NTMEZCU3l4SlFVRkpMRWxCUVVrc1JVRkJSVHRaUVVObUxFbEJRVWtzUTBGQlF5eDNRa0ZCZDBJc1EwRkJReXhYUVVGWExFTkJRVU03WjBKQlEzUkRMR1ZCUVdVc1JVRkJSU3hMUVVGTE8yRkJRM3BDTEVOQlFVTXNRMEZCUXp0VFFVTk9PMGxCUTB3c1EwRkJRenRKUVVWRU96czdPenM3T3p0UFFWRkhPMGxCUTBZc1owSkJRV2RDTEVOQlFVTXNTMEZCWVR0UlFVTXpRaXgxUkVGQlZTeERRVUZETEdsRlFVRnZRaXhGUVVGRkxFVkJRVVVzVTBGQlV5eExRVUZMTEVsQlFVa3NSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJRenRSUVVVeFJDeEpRVUZKTEV0QlFVc3NTVUZCU1N4SlFVRkpMRVZCUVVVN1dVRkRaaXhKUVVGSkxFTkJRVU1zZDBKQlFYZENMRU5CUVVNc1YwRkJWeXhEUVVGRE8yZENRVU4wUXl4bFFVRmxMRVZCUVVVc1MwRkJTenRoUVVONlFpeERRVUZETEVOQlFVTTdVMEZEVGp0SlFVTk1MRU5CUVVNN1NVRkZSRHM3T3pzN1QwRkxSenRKUVVOSUxHOUNRVUZ2UWl4RFFVRkRMRlZCUVd0Q08xRkJRMjVETEhWRVFVRlZMRU5CUVVNc2FVVkJRVzlDTEVWQlFVVXNSVUZCUlN4elFrRkJjMElzVlVGQlZTeEZRVUZGTEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRNVVVzU1VGQlNTeFZRVUZWTEVsQlFVa3NTVUZCU1N4RlFVRkZPMWxCUTNCQ0xFbEJRVWtzUTBGQlF5eDNRa0ZCZDBJc1EwRkJReXhYUVVGWExFTkJRVU03WjBKQlEzUkRMRzFDUVVGdFFpeEZRVUZGTEZWQlFWVTdZVUZEYkVNc1EwRkJReXhEUVVGRE8xTkJRMDQ3U1VGRFRDeERRVUZETzBsQlJVUTdPenM3TzA5QlMwYzdTVUZEUml4dlFrRkJiMElzUTBGQlF5eFZRVUZyUWp0UlFVTndReXgxUkVGQlZTeERRVUZETEdsRlFVRnZRaXhGUVVGRkxFVkJRVVVzYzBKQlFYTkNMRlZCUVZVc1JVRkJSU3hGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETzFGQlF6RkZMRWxCUVVrc1ZVRkJWU3hKUVVGSkxFbEJRVWtzUlVGQlJUdFpRVU53UWl4SlFVRkpMRU5CUVVNc2QwSkJRWGRDTEVOQlFVTXNWMEZCVnl4RFFVRkRPMmRDUVVOMFF5eHRRa0ZCYlVJc1JVRkJSU3hWUVVGVk8yRkJRMnhETEVOQlFVTXNRMEZCUXp0VFFVTk9PMGxCUTB3c1EwRkJRenRKUVVWRU96czdPenRQUVV0SE8wbEJRMFlzWVVGQllTeERRVUZETEVkQlFWYzdVVUZEZEVJc2RVUkJRVlVzUTBGQlF5eHBSVUZCYjBJc1JVRkJSU3hGUVVGRkxHTkJRV01zUjBGQlJ5eEZRVUZGTEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRNMFFzU1VGQlNTeEhRVUZITEVsQlFVa3NTVUZCU1N4RlFVRkZPMWxCUTJJc1NVRkJTU3hEUVVGRExIZENRVUYzUWl4RFFVRkRMRmRCUVZjc1EwRkJReXhGUVVGRExGbEJRVmtzUlVGQlJTeEhRVUZITEVWQlFVTXNRMEZCUXl4RFFVRkRPMWxCUXk5RUxFbEJRVWtzUTBGQlF5eDNRa0ZCZDBJc1EwRkJReXhYUVVGWExFTkJRVU1zUlVGQlF5eGxRVUZsTEVWQlFVVXNSMEZCUnl4RlFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExEUkRRVUUwUXp0VFFVTnNTRHRKUVVOTUxFTkJRVU03U1VGRlJEczdUMEZGUnp0SlFVTklMRmRCUVZjN1VVRkRVQ3gxUkVGQlZTeERRVU5PTEdsRlFVRnZRaXhGUVVGRkxFVkJRM1JDTEhWRFFVRjFReXhGUVVOMlF5eERRVUZETEVOQlEwb3NRMEZCUXp0UlFVTkdMRWxCUVVrc1EwRkJReXgzUWtGQmQwSXNRMEZCUXl4WFFVRlhMRU5CUVVNc1JVRkJSU3hWUVVGVkxFVkJRVVVzUlVGQlJTeEZRVUZGTEVOQlFVTXNRMEZCUXp0SlFVTnNSU3hEUVVGRE8wbEJSVVE3TzA5QlJVYzdTVUZEU0N4cFFrRkJhVUk3VVVGRFlpeDFSRUZCVlN4RFFVTk9MR2xGUVVGdlFpeEZRVUZGTEVWQlEzUkNMRFJEUVVFMFF5eEZRVU0xUXl4RFFVRkRMRU5CUTBvc1EwRkJRenRSUVVOR0xFbEJRVWtzUTBGQlF5eDFRa0ZCZFVJc1EwRkJReXhyUWtGQmEwSXNRMEZCUXl4SFFVRkhMRU5CUVVNc1pVRkJaU3hEUVVGRExFVkJRVVVzUTBGQlF6dEpRVU16UlN4RFFVRkRPMGxCUlVRN08wOUJSVWM3U1VGRFNDeHBRa0ZCYVVJc1EwRkJReXhWUVVFeVFqdFJRVU42UXl4MVJFRkJWU3hEUVVOT0xHbEZRVUZ2UWl4RlFVRkZMRVZCUTNSQ0xHOUVRVUZ2UkN4RlFVTndSQ3hEUVVGRExFTkJRMG9zUTBGQlF6dFJRVU5HTEVsQlFVa3NRMEZCUXl4M1FrRkJkMElzUTBGQlF5eHBRa0ZCYVVJc1EwRkJReXhWUVVGVkxFTkJRVU1zUTBGQlF6dEpRVU5vUlN4RFFVRkRPMGxCUlVRN08wOUJSVWM3U1VGRFNDeFhRVUZYTEVOQlFVTXNWVUZCYTBJN1VVRkRNVUlzZFVSQlFWVXNRMEZEVGl4cFJVRkJiMElzUlVGQlJTeEZRVU4wUWl3NFEwRkJPRU1zUlVGRE9VTXNRMEZCUXl4RFFVTktMRU5CUVVNN1VVRkRSaXhKUVVGSkxFTkJRVU1zZDBKQlFYZENMRU5CUVVNc1YwRkJWeXhEUVVGRExGVkJRVlVzUTBGQlF5eERRVUZETzBsQlF6RkVMRU5CUVVNN1NVRkZSRHM3VDBGRlJ6dEpRVU5JTEd0Q1FVRnJRaXhEUVVGRExFOUJRV1U3VVVGRE9VSXNkVVJCUVZVc1EwRkRUaXhwUlVGQmIwSXNSVUZCUlN4RlFVTjBRaXcyUkVGQk5rUXNSVUZETjBRc1EwRkJReXhEUVVOS0xFTkJRVU03VVVGRFJpeEpRVUZKTEVOQlFVTXNkMEpCUVhkQ0xFTkJRVU1zVjBGQlZ5eERRVUZETzFsQlEzUkRMR05CUVdNc1JVRkJSU3hQUVVGUE8xTkJRekZDTEVOQlFVTXNRMEZCUXp0SlFVTlFMRU5CUVVNN1NVRkZSRHM3VDBGRlJ6dEpRVU5JTEd0RFFVRnJRenRSUVVNNVFpeDFSRUZCVlN4RFFVTk9MR2xGUVVGdlFpeEZRVUZGTEVWQlEzUkNMR2xFUVVGcFJDeEZRVU5xUkN4RFFVRkRMRU5CUTBvc1EwRkJRenRSUVVOR0xFbEJRVWtzUTBGQlF5dzBRa0ZCTkVJc1EwRkJReXg1UWtGQmVVSXNSVUZCUlN4RFFVRkRPMGxCUTJ4RkxFTkJRVU03U1VGRlJEczdPMDlCUjBjN1NVRkRTQ3gxUWtGQmRVSXNRMEZCUXl4UFFVRnZRanRSUVVONFF5eDFSRUZCVlN4RFFVTk9MR2xGUVVGdlFpeEZRVUZGTEVWQlEzUkNMREpEUVVFeVF5eEZRVU16UXl4RFFVRkRMRU5CUTBvc1EwRkJRenRSUVVOR0xFMUJRVTBzWlVGQlpTeEhRVUZITEVsQlFVa3NWMEZCVnl4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRExFMUJRVTBzUTBGRGNFUXNUMEZCVHl4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGRGJrSXNRMEZCUXp0UlFVTkdMRTFCUVUwc2EwSkJRV3RDTEVkQlFYVkNMRWxCUVVrc1owWkJRV3RDTEVWQlFVVXNRMEZCUXp0UlFVTjRSU3hOUVVGTkxFTkJRVU1zVFVGQlRTeERRVUZETEd0Q1FVRnJRaXhGUVVGRkxFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNaVUZCWlN4RFFVRkRMRU5CUVVNc1EwRkJRenRSUVVNdlJDeHJRa0ZCYTBJc1EwRkJReXhoUVVGaExFVkJRVVVzUTBGQlF6dFJRVVZ1UXl4clFrRkJhMElzUTBGQlF5eGxRVUZsTEVkQlFVY3NTVUZCU1N4RFFVRkRMR2RDUVVGblFpeERRVUZETzFGQlF6TkVMR3RDUVVGclFpeERRVUZETEc5Q1FVRnZRaXhIUVVGSExFbEJRVWtzUTBGQlF5eEhRVUZITEVWQlFVVXNRMEZCUXp0UlFVVnlSQ3hyUWtGQmEwSXNRMEZCUXl4elFrRkJjMElzUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZETVVNc2EwSkJRV3RDTEVOQlFVTXNiMEpCUVc5Q08xbEJRM1pETEd0Q1FVRnJRaXhEUVVGRExHVkJRV1VzUTBGRGNrTXNRMEZCUXp0UlFVTkdMR3RDUVVGclFpeERRVUZETEZsQlFWa3NSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkRhRU1zYTBKQlFXdENMRU5CUVVNc2EwSkJRV3RDTzFsQlEzSkRMR3RDUVVGclFpeERRVUZETEdGQlFXRXNRMEZEYmtNc1EwRkJRenRSUVVOR0xHdENRVUZyUWl4RFFVRkRMR05CUVdNc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGRGJFTXNhMEpCUVd0Q0xFTkJRVU1zYzBKQlFYTkNPMWxCUTNwRExHdENRVUZyUWl4RFFVRkRMRmxCUVZrc1EwRkRiRU1zUTBGQlF6dFJRVVZHTEVsQlEwa3NhMEpCUVd0Q0xFTkJRVU1zZFVKQlFYVkNPMWxCUXpGRExHdENRVUZyUWl4RFFVRkRMRzlDUVVGdlFpeEZRVU42UXp0WlFVTkZMR3RDUVVGclFpeERRVUZETEdWQlFXVTdaMEpCUXpsQ0xFTkJRVU1zUTBGQlF5eERRVUZETEd0Q1FVRnJRaXhEUVVGRExIVkNRVUYxUWp0dlFrRkRla01zYTBKQlFXdENMRU5CUVVNc1kwRkJZenR2UWtGRGNrTXNRMEZCUXl4clFrRkJhMElzUTBGQlF5eGxRVUZsTEVOQlFVTXNRMEZCUXp0VFFVTTFRenRSUVVORUxFbEJRVWtzUTBGQlF5eGpRVUZqTEVOQlFVTXNiMEpCUVc5Q0xFTkJRVU1zYTBKQlFXdENMRU5CUVVNc1EwRkJRenRKUVVOcVJTeERRVUZETzBsQlJVUTdPenRQUVVkSE8wbEJRMGdzY1VKQlFYRkNMRU5CUVVNc1QwRkJiMEk3VVVGRGRFTXNkVVJCUVZVc1EwRkRUaXhwUlVGQmIwSXNSVUZCUlN4RlFVTjBRaXdyUTBGQkswTXNSVUZETDBNc1EwRkJReXhEUVVOS0xFTkJRVU03VVVGRFJpeE5RVUZOTEdWQlFXVXNSMEZCUnl4SlFVRkpMRmRCUVZjc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF5eE5RVUZOTEVOQlEzQkVMRTlCUVU4c1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlEyNUNMRU5CUVVNN1VVRkRSaXhOUVVGTkxIRkNRVUZ4UWl4SFFVRkhMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zWlVGQlpTeERRVUZETEVOQlFVTTdVVUZGTVVRc1RVRkJUU3hsUVVGbExFZEJRVzlDTEVsQlFVa3NNRVZCUVdVc1JVRkJSU3hEUVVGRE8xRkJSUzlFTEVsQlFVa3NjVUpCUVhGQ0xFTkJRVU1zVDBGQlR5eEZRVUZGTzFsQlF5OUNMR1ZCUVdVc1EwRkJReXhsUVVGbExFZEJRVWNzY1VKQlFYRkNMRU5CUVVNc1QwRkJUeXhEUVVGRE8xTkJRMjVGTzFGQlJVUXNTVUZCU1N4eFFrRkJjVUlzUTBGQlF5eE5RVUZOTEVWQlFVVTdXVUZET1VJc1pVRkJaU3hEUVVGRExHTkJRV01zUjBGQlJ5eHhRa0ZCY1VJc1EwRkJReXhOUVVGTkxFTkJRVU03VTBGRGFrVTdVVUZGUkN4SlFVRkpMSEZDUVVGeFFpeERRVUZETEdOQlFXTXNSVUZCUlR0WlFVTjBReXhsUVVGbExFTkJRVU1zYzBKQlFYTkNPMmRDUVVOc1F5eHhRa0ZCY1VJc1EwRkJReXhqUVVGakxFTkJRVU03VTBGRE5VTTdVVUZGUkN4SlFVRkpMSEZDUVVGeFFpeERRVUZETEdGQlFXRXNTVUZCU1N4eFFrRkJjVUlzUTBGQlF5eGhRVUZoTEVOQlFVTXNZMEZCWXl4TFFVRkxMRk5CUVZNc1JVRkJSVHRaUVVONlJ5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMR05CUVdNc1EwRkRkRUlzYjBWQlFYVkNMRVZCUTNaQ0xFTkJRVU1zUTBGQlF5eHhRa0ZCY1VJc1EwRkJReXhoUVVGaExFTkJRVU1zWTBGQll5eERRVU4yUkN4RFFVRkRPMU5CUTB3N1VVRkZSQ3hsUVVGbExFTkJRVU1zV1VGQldTeEZRVUZGTEVOQlFVTTdVVUZETDBJc2RVUkJRVlVzUTBGQlF5eHBSVUZCYjBJc1JVRkJSU3hGUVVGRkxHVkJRV1VzUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXp0UlFVVjJSQ3hKUVVGSkxFTkJRVU1zWTBGQll5eERRVUZETEd0Q1FVRnJRaXhEUVVGRExHVkJRV1VzUTBGQlF5eERRVUZETzBsQlF6VkVMRU5CUVVNN1NVRkZSRHM3TzA5QlIwYzdTVUZEU0N4MVFrRkJkVUlzUTBGQlF5eFBRVUZ2UWp0UlFVTjRReXgxUkVGQlZTeERRVU5PTEdsRlFVRnZRaXhGUVVGRkxFVkJRM1JDTEdsRVFVRnBSQ3hGUVVOcVJDeERRVUZETEVOQlEwb3NRMEZCUXp0UlFVTkdMRTFCUVUwc1MwRkJTeXhIUVVGSExFMUJRVTBzUTBGRGFFSXNTVUZCU1N4WFFVRlhMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU1zVFVGQlRTeERRVUZETEU5QlFVOHNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGRGNrUXNRMEZCUXp0UlFVTkdMRWxCUVVrc1EwRkJReXh2UWtGQmIwSXNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRenRKUVVOeVF5eERRVUZETzBsQlJVUTdPMDlCUlVjN1NVRkRTQ3h6UWtGQmMwSTdVVUZEYkVJc1NVRkJTU3hEUVVGRExHTkJRV01zUTBGQlF5eHRRa0ZCYlVJc1JVRkJSU3hEUVVGRE8xRkJSVEZETEhWRVFVRjFSRHRSUVVOMlJDeEpRVUZKTEVOQlFVTXNLMEpCUVN0Q0xFVkJRVVVzUTBGQlF6dFJRVU4yUXl4SlFVRkpMRU5CUVVNc2FVSkJRV2xDTEVWQlFVVXNRMEZCUXp0UlFVTjZRaXhKUVVGSkxFTkJRVU1zVjBGQlZ5eERRVUZETEhGQ1FVRnhRaXhGUVVGRkxFTkJRVU03U1VGRE4wTXNRMEZCUXp0SlFVVkVPenM3VDBGSFJ6dEpRVU5JTEhsQ1FVRjVRaXhEUVVGRExFOUJRVzlDTzFGQlF6RkRMRTFCUVUwc1NVRkJTU3hIUVVGSExFbEJRVWtzVlVGQlZTeERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRPMUZCUTNKRExIVkVRVUZWTEVOQlEwNHNhVVZCUVc5Q0xFVkJRVVVzUlVGRGRFSXNkVVJCUVhWRUxFVkJRM1pFTEVOQlFVTXNRMEZEU2l4RFFVRkRPMUZCUTBZc1NVRkJTU3hEUVVGRExHMUNRVUZ0UWl4SFFVRkhMRWxCUVVrc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRTlCUVU4c1JVRkJSU3hEUVVGRE8xRkJRekZFTEhWRVFVRlZMRU5CUTA0c2FVVkJRVzlDTEVWQlFVVXNSVUZEZEVJc09FUkJRVGhFTEVsQlFVa3NRMEZCUXl4dFFrRkJiVUlzUlVGQlJTeERRVU16Uml4RFFVRkRPMUZCUTBZc1NVRkJTU3hEUVVGRExHTkJRV01zUTBGQlF5d3dRa0ZCTUVJc1EwRkRNVU1zU1VGQlNTeERRVUZETEcxQ1FVRnRRaXhEUVVNelFpeERRVUZETzBsQlEwNHNRMEZCUXp0SlFVVkVPenM3VDBGSFJ6dEpRVU5JTEdkQ1FVRm5RaXhEUVVGRExFdEJRWE5DTzFGQlEyNURMRWxCUVVrc1EwRkJReXhqUVVGakxFTkJRVU1zWVVGQllTeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRPMGxCUXpkRExFTkJRVU03U1VGRlJEczdUMEZGUnp0SlFVTklMR2xDUVVGcFFqdFJRVU5pTEVsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVNc2FVSkJRV2xDTEVWQlFVVXNRMEZCUXp0SlFVTjZReXhEUVVGRE8wbEJSVVE3TzA5QlJVYzdTVUZEU0N3MFFrRkJORUk3VVVGRGVFSXNUMEZCVHl4SlFVRkpMRU5CUVVNc2VVSkJRWGxDTEVOQlFVTTdTVUZETVVNc1EwRkJRenRKUVVWRU96dFBRVVZITzBsQlEwZ3NORUpCUVRSQ0xFTkJRVU1zVDBGQlpUdFJRVU40UXl4SlFVRkpMRU5CUVVNc2VVSkJRWGxDTEVkQlFVY3NUMEZCVHl4RFFVRkRPMGxCUXpkRExFTkJRVU03U1VGRlJDeHBRa0ZCYVVJc1EwRkJReXhMUVVGaE8xRkJRek5DTEVsQlFVa3NRMEZCUXl4alFVRmpMRWRCUVVjc1MwRkJTeXhEUVVGRE8xRkJRelZDTEVsQlFVa3NTVUZCU1N4RFFVRkRMSGRDUVVGM1FpeEZRVUZGTzFsQlF5OUNMRWxCUVVrc1EwRkJReXgzUWtGQmQwSXNRMEZCUXl4alFVRmpMRWRCUVVjc1MwRkJTeXhEUVVGRE8xbEJRM0pFTEVsQlFVa3NRMEZCUXl4M1FrRkJkMElzUTBGQlF5eHZRa0ZCYjBJc1IwRkJSeXhMUVVGTExFTkJRVU03VTBGRE9VUTdTVUZEVEN4RFFVRkRPMGxCUlVRc2IwSkJRVzlDTEVOQlFVTXNTMEZCWVR0UlFVTTVRaXhKUVVGSkxFTkJRVU1zVlVGQlZTeEhRVUZITEV0QlFVc3NRMEZCUXp0UlFVTjRRaXhKUVVGSkxFTkJRVU1zWTBGQll5eERRVUZETEc5Q1FVRnZRaXhEUVVGRExFbEJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTXNRMEZCUXp0SlFVTTVSQ3hEUVVGRE8wbEJSVVE3TzA5QlJVYzdTVUZEU0N4MVFrRkJkVUlzUTBGQlF5eFRRVUZyUWpzN1VVRkRkRU1zVlVGQlNTeERRVUZETEd0Q1FVRnJRaXd3UTBGQlJTeDNRa0ZCZDBJc1JVRkJSU3hEUVVGRE8xRkJRM0JFTEVsQlFVa3NVMEZCVXl4RlFVRkZPMWxCUTFnc1NVRkJTU3hEUVVGRExHdENRVUZyUWl4SFFVRkhMRWxCUVVrc1EwRkJReXh0UWtGQmJVSXNRMEZCUXl4blFrRkJaMElzUTBGREwwUXNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkRaQ3hEUVVGRE8xTkJRMHc3U1VGRFRDeERRVUZETzBsQlJVUTdPMDlCUlVjN1NVRkRTQ3h2UWtGQmIwSXNRMEZCUXl4VFFVRnJRanM3VVVGRGJrTXNWVUZCU1N4RFFVRkRMR1ZCUVdVc01FTkJRVVVzY1VKQlFYRkNMRVZCUVVVc1EwRkJRenRSUVVNNVF5eEpRVUZKTEZOQlFWTXNSVUZCUlR0WlFVTllMRTFCUVUwc1UwRkJVeXhIUVVGSExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNZVUZCWVN4RFFVRkRMRzlGUVVGMVFpeERRVUZETzJkQ1FVTndSU3hEUVVGRExFTkJRVU1zTkVWQlFTdENPMmRDUVVOcVF5eERRVUZETEVOQlFVTXNNRVZCUVRaQ0xFTkJRVU03V1VGRGFFTXNTVUZCU1N4RFFVRkRMR1ZCUVdVN1owSkJRM0JDTEVsQlFVa3NRMEZCUXl4dFFrRkJiVUlzUTBGQlF5eGhRVUZoTEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVNN1UwRkRja1E3U1VGRFRDeERRVUZETzBsQlJVUTdPMDlCUlVjN1NVRkRTQ3h2UWtGQmIwSXNRMEZCUXl4VFFVRnJRanM3VVVGRGJrTXNWVUZCU1N4RFFVRkRMR1ZCUVdVc01FTkJRVVVzY1VKQlFYRkNMRVZCUVVVc1EwRkJRenRSUVVNNVF5eEpRVUZKTEZOQlFWTXNSVUZCUlR0WlFVTllMRWxCUVVrc1EwRkJReXhsUVVGbExFZEJRVWNzU1VGQlNTeERRVUZETEcxQ1FVRnRRaXhEUVVGRExHRkJRV0VzUTBGRGVrUXNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhoUVVGaExFTkJRVU1zZFVWQlFUQkNMRU5CUVVNc1JVRkRja1FzU1VGQlNTeERRVUZETERSQ1FVRTBRaXhEUVVOd1F5eERRVUZETzFOQlEwdzdTVUZEVEN4RFFVRkRPMGxCUlVRN08wOUJSVWM3U1VGRFNDeHpRa0ZCYzBJc1EwRkJReXhUUVVGclFqczdVVUZEY2tNc1ZVRkJTU3hEUVVGRExHbENRVUZwUWl3d1EwRkJSU3gxUWtGQmRVSXNSVUZCUlN4RFFVRkRPMUZCUTJ4RUxFbEJRVWtzVTBGQlV5eEZRVUZGTzFsQlExZ3NTVUZCU1N4RFFVRkRMR2xDUVVGcFFpeEhRVUZITEVsQlFVa3NRMEZCUXl4dFFrRkJiVUlzUTBGQlF5eGxRVUZsTEVWQlFVVXNRMEZCUXp0WlFVTndSU3hKUVVGSkxFTkJRVU1zYVVKQlFXbENMRU5CUVVNc2EwSkJRV3RDTEVkQlFVY3NSMEZCUnl4RlFVRkZPMmRDUVVNM1F5eEpRVUZKTEVOQlFVTXNkVUpCUVhWQ0xFTkJRVU1zYTBKQlFXdENMRU5CUVVNc1IwRkJSeXhEUVVGRExHdENRVUZyUWl4RFFVRkRMRVZCUVVVc1EwRkJRenRaUVVNNVJTeERRVUZETzFsQlEwUXNTVUZCU1N4RFFVRkRMR2xDUVVGcFFpeERRVUZETEhGQ1FVRnhRaXhIUVVGSExFTkJRVU1zWVVGQmNVSXNSVUZCUlN4RlFVRkZPMmRDUVVOeVJTeEpRVUZKTEVOQlFVTXNkVUpCUVhWQ0xFTkJRVU1zYTBKQlFXdENMRU5CUVVNc1IwRkJSeXhEUVVGRExIRkNRVUZ4UWl4RFFVRkRMRU5CUVVNc1EwRkJReXhoUVVGaExFTkJRVU1zUTBGQlF5eERRVUZETzFsQlEyaEhMRU5CUVVNN1UwRkRTanRKUVVOTUxFTkJRVU03U1VGRlJDeG5RMEZCWjBNc1EwRkJReXhYUVVGclF6dFJRVU12UkN4WFFVRlhMRU5CUVVNc1RVRkJUU3hIUVVGSExFTkJRVU1zUzBGQlN5eEZRVUZGTEV0QlFVc3NSVUZCUlN4RlFVRkZMRU5CUTJ4RExFbEJRVWtzUTBGQlF5eGpRVUZqTEVOQlFVTXNZVUZCWVN4RFFVTTNRaXhKUVVGSkxIRkZRVUZ2UWl4RFFVRkRMRVZCUVVVc1MwRkJTeXhGUVVGRkxFdEJRVXNzUlVGQlJTeERRVUZETEVOQlF6ZERMRU5CUVVNN1VVRkRUaXhYUVVGWExFTkJRVU1zVDBGQlR5eEhRVUZITEVOQlFVTXNTMEZCU3l4RlFVRkZMRXRCUVVzc1JVRkJSU3hGUVVGRkxFTkJRMjVETEVsQlFVa3NRMEZCUXl4alFVRmpMRU5CUVVNc1lVRkJZU3hEUVVNM1FpeEpRVUZKTEhORlFVRnhRaXhEUVVGRExFVkJRVVVzUzBGQlN5eEZRVUZGTEV0QlFVc3NSVUZCUlN4RFFVRkRMRU5CUXpsRExFTkJRVU03VVVGRFRpeFhRVUZYTEVOQlFVTXNUMEZCVHl4SFFVRkhMRU5CUVVNc1MwRkJTeXhGUVVGRkxFdEJRVXNzUlVGQlJTeEZRVUZGTEVOQlEyNURMRWxCUVVrc1EwRkJReXhqUVVGakxFTkJRVU1zWVVGQllTeERRVU0zUWl4SlFVRkpMSE5GUVVGeFFpeERRVUZETEVWQlFVVXNTMEZCU3l4RlFVRkZMRXRCUVVzc1JVRkJSU3hEUVVGRExFTkJRemxETEVOQlFVTTdTVUZEVml4RFFVRkRPME5CUTBvN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3UVVOb0wwUkVMR3RFUVVGclJEdEJRVVZzUkRzN1IwRkZSenRCUVVOSUxFbEJRVmtzWjBKQlZWZzdRVUZXUkN4WFFVRlpMR2RDUVVGblFqdEpRVU40UWl4eFEwRkJhVUk3U1VGRGFrSXNhMFJCUVRoQ08wbEJRemxDTEdkRVFVRTBRanRKUVVNMVFpeHRRMEZCWlR0SlFVTm1MSEZEUVVGcFFqdEpRVU5xUWl4clJFRkJPRUk3U1VGRE9VSXNNa1JCUVhWRE8wbEJRM1pETEdsRFFVRmhPMGxCUTJJc2RVTkJRVzFDTzBGQlEzWkNMRU5CUVVNc1JVRldWeXhuUWtGQlowSXNTMEZCYUVJc1owSkJRV2RDTEZGQlZUTkNPMEZCUlVRN08wZEJSVWM3UVVGRFNTeE5RVUZOTEZkQlFWYzdRMEZIZGtJN1FVRkZSRHM3UjBGRlJ6dEJRVU5KTEUxQlFVMHNiVUpCUVc5Q0xGTkJRVkVzVjBGQlZ6dERRVUZITzBGQlJYWkVPenRIUVVWSE8wRkJRMGtzVFVGQlRTeGhRVUZqTEZOQlFWRXNWMEZCVnp0RFFVVTNRenRCUVVWRU96dEhRVVZITzBGQlEwa3NUVUZCVFN4dFFrRkJiMElzVTBGQlVTeFhRVUZYTzBOQlJXNUVPMEZCUlVRN08wZEJSVWM3UVVGRFNTeE5RVUZOTEd0Q1FVRnRRaXhUUVVGUkxGZEJRVmM3UTBGRmJFUTdRVUZGUkRzN1IwRkZSenRCUVVOSkxFMUJRVTBzWVVGQll5eFRRVUZSTEZkQlFWYzdRMEZGTjBNN1FVRkZSRHM3UjBGRlJ6dEJRVU5KTEUxQlFVMHNXVUZCWVN4VFFVRlJMRmRCUVZjN1EwRkpOVU03UVVGRlJEczdSMEZGUnp0QlFVTkpMRTFCUVUwc2JVSkJRVzlDTEZOQlFWRXNWMEZCVnp0RFFVVnVSRHRCUVVWRU96dEhRVVZITzBGQlEwa3NUVUZCVFN4MVFrRkJkMElzVTBGQlVTeFhRVUZYTzBOQlNYWkVPMEZCUlUwc1RVRkJUU3gxUWtGQmRVSTdRMEZMYmtNN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3TzBGRGVFWkVMR3RFUVVGclJEdEJRVVZTTzBGQlJURkRPenRIUVVWSE8wRkJRMGdzU1VGQldTeG5Ra0ZWV0R0QlFWWkVMRmRCUVZrc1owSkJRV2RDTzBsQlEzaENMRzlFUVVGblF6dEpRVU5vUXl3eVEwRkJkVUk3U1VGRGRrSXNLME5CUVRKQ08wbEJRek5DTEd0RVFVRTRRanRKUVVNNVFpeHRRMEZCWlR0SlFVTm1MSEZEUVVGcFFqdEpRVU5xUWl3MlJFRkJlVU03U1VGRGVrTXNjVVZCUVdsRU8wbEJRMnBFTEdsRFFVRmhPMEZCUTJwQ0xFTkJRVU1zUlVGV1Z5eG5Ra0ZCWjBJc1MwRkJhRUlzWjBKQlFXZENMRkZCVlROQ08wRkJSVVE3TzBkQlJVYzdRVUZEU1N4TlFVRk5MRmRCUVZjN1NVRkpjRUk3T3p0UFFVZEhPMGxCUTBnc1QwRkJUenRSUVVOSUxITkVRVUZWTEVOQlEwNHNaMFZCUVc5Q0xFVkJRVVVzUlVGRGRFSXNaVUZCWlN4SFFVRkhMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zU1VGQlNTeEZRVUZGTEZOQlFWTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1JVRkRjRVFzUTBGQlF5eERRVU5LTEVOQlFVTTdVVUZEUml4UFFVRlBMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTTdTVUZEYUVNc1EwRkJRenREUVVOS08wRkJWVTBzVFVGQlRTeHZRa0ZCY1VJc1UwRkJVU3hYUVVGWE8wbEJRMnBFTzFGQlEwa3NTMEZCU3l4RlFVRkZMRU5CUVVNN1VVRkRVaXhKUVVGSkxFTkJRVU1zU1VGQlNTeEhRVUZITEdkQ1FVRm5RaXhEUVVGRExHTkJRV01zUTBGQlF6dEpRVU5vUkN4RFFVRkRPME5CUTBvN1FVRkZUU3hOUVVGTkxHZENRVUZwUWl4VFFVRlJMRmRCUVZjN1NVRkhOME1zV1VGQldTeFZRVUZyUWp0UlFVTXhRaXhMUVVGTExFVkJRVVVzUTBGQlF6dFJRVU5TTEVsQlFVa3NRMEZCUXl4SlFVRkpMRWRCUVVjc1owSkJRV2RDTEVOQlFVTXNVMEZCVXl4RFFVRkRPMUZCUTNaRExFbEJRVWtzUTBGQlF5eFZRVUZWTEVkQlFVY3NWVUZCVlN4RFFVRkRPMGxCUTJwRExFTkJRVU03UTBGRFNqdEJRVVZOTEUxQlFVMHNhMEpCUVcxQ0xGTkJRVkVzVjBGQlZ6dEpRVU12UXp0UlFVTkpMRXRCUVVzc1JVRkJSU3hEUVVGRE8xRkJRMUlzU1VGQlNTeERRVUZETEVsQlFVa3NSMEZCUnl4blFrRkJaMElzUTBGQlF5eFhRVUZYTEVOQlFVTTdTVUZETjBNc1EwRkJRenREUVVOS08wRkJSVVE3TzBkQlJVYzdRVUZEU1N4TlFVRk5MRmRCUVZrc1UwRkJVU3hYUVVGWE8wbEJSM2hETEZsQlFWa3NTVUZCV1R0UlFVTndRaXhMUVVGTExFVkJRVVVzUTBGQlF6dFJRVU5TTEVsQlFVa3NRMEZCUXl4SlFVRkpMRWRCUVVjc1owSkJRV2RDTEVOQlFVTXNTVUZCU1N4RFFVRkRPMUZCUTJ4RExFbEJRVWtzUTBGQlF5eEpRVUZKTEVkQlFVY3NTVUZCU1N4RFFVRkRPMGxCUTNKQ0xFTkJRVU03UTBGRFNqdEJRVVZFT3p0SFFVVkhPMEZCUTBrc1RVRkJUU3hyUWtGQmJVSXNVMEZCVVN4WFFVRlhPMGxCUnk5RE96dFBRVVZITzBsQlEwZ3NXVUZCV1N4TFFVRnBRenRSUVVONlF5eExRVUZMTEVWQlFVVXNRMEZCUXp0UlFVTlNMRWxCUVVrc1EwRkJReXhKUVVGSkxFZEJRVWNzWjBKQlFXZENMRU5CUVVNc1MwRkJTeXhEUVVGRE8xRkJSVzVETEVsQlFVa3NTMEZCU3l4RlFVRkZPMWxCUTFBc1NVRkJTU3hEUVVGRExFbEJRVWtzUjBGQlJ5eExRVUZMTEVOQlFVTXNTVUZCZDBJc1EwRkJRenRaUVVNelF5eEpRVUZKTEVOQlFVTXNSMEZCUnl4SFFVRkhMRXRCUVVzc1EwRkJReXhIUVVGSExFTkJRVU03VTBGRGVFSTdTVUZEVEN4RFFVRkRPME5CUTBvN1FVRkZSRHM3UjBGRlJ6dEJRVU5KTEUxQlFVMHNiVUpCUVc5Q0xGTkJRVkVzVjBGQlZ6dEpRVWRvUkRzN1QwRkZSenRKUVVOSUxGbEJRVmtzVFVGQmEwTTdVVUZETVVNc1MwRkJTeXhGUVVGRkxFTkJRVU03VVVGRFVpeEpRVUZKTEVOQlFVTXNTVUZCU1N4SFFVRkhMR2RDUVVGblFpeERRVUZETEUxQlFVMHNRMEZCUXp0UlFVVndReXhKUVVGSkxFMUJRVTBzUlVGQlJUdFpRVU5TTEVsQlFVa3NRMEZCUXl4SlFVRkpMRWRCUVVjc1RVRkJUU3hEUVVGRExFbEJRWGRDTEVOQlFVTTdXVUZETlVNc1NVRkJTU3hEUVVGRExFZEJRVWNzUjBGQlJ5eE5RVUZOTEVOQlFVTXNSMEZCUnl4RFFVRkRPMU5CUTNwQ08wbEJRMHdzUTBGQlF6dERRVU5LTzBGQlJVUTdPMGRCUlVjN1FVRkRTU3hOUVVGTkxDdENRVUZuUXl4VFFVRlJMRmRCUVZjN1NVRkROVVE3VVVGRFNTeExRVUZMTEVWQlFVVXNRMEZCUXp0UlFVTlNMRWxCUVVrc1EwRkJReXhKUVVGSkxFZEJRVWNzWjBKQlFXZENMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTTdTVUZEY0VRc1EwRkJRenREUVVOS08wRkJSVVE3TzBkQlJVYzdRVUZEU1N4TlFVRk5MRGhDUVVFclFpeFRRVUZSTEZkQlFWYzdTVUZETTBRN1VVRkRTU3hMUVVGTExFVkJRVVVzUTBGQlF6dFJRVU5TTEVsQlFVa3NRMEZCUXl4SlFVRkpMRWRCUVVjc1owSkJRV2RDTEVOQlFVTXNkVUpCUVhWQ0xFTkJRVU03U1VGRGVrUXNRMEZCUXp0RFFVTktPMEZCUlVRN08wZEJSVWM3UVVGRFNTeE5RVUZOTEcxQ1FVRnRRanRKUVVrMVFqczdUMEZGUnp0SlFVTklMRmxCUVZrc1UwRkJNRUk3VVVGRGJFTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1IwRkJSeXhuUWtGQlowSXNRMEZCUXl4aFFVRmhMRU5CUVVNN1VVRkRNME1zU1VGQlNTeERRVUZETEZOQlFWTXNSMEZCUnl4VFFVRlRMRU5CUVVNN1NVRkRMMElzUTBGQlF6dEpRVVZFT3pzN1QwRkhSenRKUVVOSUxFOUJRVTg3VVVGRFNDeHpSRUZCVlN4RFFVTk9MR2RGUVVGdlFpeEZRVUZGTEVWQlEzUkNMR1ZCUVdVc1IwRkJSeXhKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETEVsQlFVa3NSVUZCUlN4VFFVRlRMRVZCUVVVc1EwRkJReXhEUVVGRExFVkJRM0JFTEVOQlFVTXNRMEZEU2l4RFFVRkRPMUZCUTBZc1QwRkJUeXhKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMGxCUTJoRExFTkJRVU03UTBGRFNqczdPenM3T3pzN096czdPenM3T3pzN08wRkROVXRFTEd0RVFVRnJSRHRCUVVWU08wRkJWMmhDTzBGQlEydENPMEZCUlRWRE96dEhRVVZITzBGQlEwa3NUVUZCVFN4clFrRkJhMEk3U1VGSE0wSTdVVUZEU1N4SlFVRkpMRU5CUVVNc2NVSkJRWEZDTEVkQlFVY3NTVUZCU1N4SFFVRkhMRVZCUjJwRExFTkJRVU03U1VGRFVpeERRVUZETzBsQlJVUXNhVUpCUVdsQ0xFTkJRMklzVTBGQmFVSXNSVUZEYWtJc1kwRkJlVU03VVVGRmVrTXNTVUZCU1N4RFFVRkRMSEZDUVVGeFFpeERRVUZETEVkQlFVY3NRMEZCUXl4VFFVRlRMRVZCUVVVc1kwRkJZeXhEUVVGRExFTkJRVU03U1VGRE9VUXNRMEZCUXp0SlFVVkVMR0ZCUVdFc1EwRkJReXhUUVVGcFFpeEZRVUZGTEZkQlFXMUNPMUZCUTJoRUxFbEJRVWtzU1VGQlNTeERRVUZETEhGQ1FVRnhRaXhEUVVGRExFZEJRVWNzUTBGQlF5eFRRVUZUTEVOQlFVTXNSVUZCUlR0WlFVTXpReXhKUVVGSkxFTkJRVU1zY1VKQlFYRkNMRU5CUVVNc1IwRkJSeXhEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZETEZkQlFWY3NRMEZCUXl4RFFVRkRPMU5CUXpGRU8yRkJRVTA3V1VGRFNDeDNSRUZCV1N4RFFVTlNMR2RGUVVGdlFpeEZRVUZGTEVWQlEzUkNMRzFDUVVGdFFpeFRRVUZUTEdsR1FVRnBSaXhEUVVOb1NDeERRVUZETzFOQlEwdzdTVUZEVEN4RFFVRkRPMGxCUlVRN096dFBRVWRITzBsQlEwZ3NUVUZCVFN4RFFVRkRMRzlDUVVGdlFpeERRVUZETEcxQ1FVRjNRenRSUVVOb1JTeFBRVUZQTzFGQlExQXNiVUpCUVcxQ0xFTkJRVU1zYTBKQlFXdENMRU5CUVVNc2FVSkJRV2xDTEVOQlEzQkVMR3RGUVVGeFFpeEZRVU55UWl4RFFVRkRMRmRCUVcxQ0xFVkJRVVVzUlVGQlJUdFpRVU53UWl4elJFRkJjMFE3V1VGRGRFUXNUVUZCVFN4WFFVRlhMRWRCUVVjc1NVRkJTU3h4UkVGQlZ5eERRVU12UWl4SlFVRkpMRWxCUVVrc1JVRkJSU3hEUVVGRExFOUJRVThzUlVGQlJTeERRVU4yUWl4RFFVRkRMRTlCUVU4c1JVRkJSU3hEUVVGRE8xbEJRMW9zYzBSQlFWVXNRMEZEVGl4blJVRkJiMElzUlVGQlJTeEZRVU4wUWl4clJVRkJjVUlzUjBGQlJ5eEpRVUZKTEVkQlFVY3NWMEZCVnl4RlFVTXhReXhEUVVGRExFTkJRMG9zUTBGQlF6dFpRVU5HTEcxQ1FVRnRRaXhEUVVGRExGTkJRVk1zUTBGQlF5eEpRVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkRMRU5CUVVNN1VVRkRjRVFzUTBGQlF5eERRVU5LTEVOQlFVTTdVVUZGUml4VFFVRlRPMUZCUTFRc2JVSkJRVzFDTEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU1zYVVKQlFXbENMRU5CUTNCRUxHOUZRVUYxUWl4RlFVTjJRaXhEUVVGRExHRkJRWEZDTEVWQlFVVXNSVUZCUlR0WlFVTjBRaXh6UkVGQlZTeERRVUZETEdkRlFVRnZRaXhGUVVGRkxFVkJRVVVzYjBWQlFYVkNMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU03V1VGREwwUXNUVUZCVFN4TlFVRk5MRWRCUVd0Q0xFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNZVUZCWVN4RFFVRkRMRU5CUVVNN1dVRkRlRVFzYlVKQlFXMUNMRU5CUVVNc1VVRkJVU3hEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETzFGQlEzcERMRU5CUVVNc1EwRkRTaXhEUVVGRE8xRkJSVVlzWjBKQlFXZENPMUZCUTJoQ0xHMUNRVUZ0UWl4RFFVRkRMR3RDUVVGclFpeERRVUZETEdsQ1FVRnBRaXhEUVVOd1JDd3lSVUZCT0VJc1JVRkRPVUlzUTBGQlF5eFhRVUZ0UWl4RlFVRkZMRVZCUVVVN1dVRkRjRUlzYzBSQlFWVXNRMEZEVGl4blJVRkJiMElzUlVGQlJTeEZRVU4wUWl3eVJVRkJPRUlzUlVGRE9VSXNRMEZCUXl4RFFVTktMRU5CUVVNN1dVRkRSaXhOUVVGTkxGbEJRVmtzUjBGRFpDeEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRmRCUVZjc1EwRkJReXhEUVVGRE8xbEJRelZDTEcxQ1FVRnRRaXhEUVVGRExHTkJRV01zUTBGQlF5eFpRVUZaTEVOQlFVTXNRMEZCUXp0UlFVTnlSQ3hEUVVGRExFTkJRMG9zUTBGQlF6dFJRVVZHTEdWQlFXVTdVVUZEWml4dFFrRkJiVUlzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhwUWtGQmFVSXNRMEZEY0VRc01FVkJRVFpDTEVWQlF6ZENMRU5CUVVNc2EwSkJRVEJDTEVWQlFVVXNSVUZCUlR0WlFVTXpRaXh6UkVGQlZTeERRVU5PTEdkRlFVRnZRaXhGUVVGRkxFVkJRM1JDTERCRlFVRTJRaXhGUVVNM1FpeERRVUZETEVOQlEwb3NRMEZCUXp0WlFVTkdMRTFCUVUwc1YwRkJWeXhIUVVOaUxFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU1zUTBGQlF6dFpRVU51UXl4elJFRkJWU3hEUVVOT0xHZEZRVUZ2UWl4RlFVRkZMRVZCUTNSQ0xHZENRVUZuUWl4SFFVRkhMRmRCUVZjc1EwRkJReXhMUVVGTExFVkJRM0JETEVOQlFVTXNRMEZEU2l4RFFVRkRPMUZCUTA0c1EwRkJReXhEUVVOS0xFTkJRVU03VVVGRlJpeFRRVUZUTzFGQlExUXNiVUpCUVcxQ0xFTkJRVU1zYTBKQlFXdENMRU5CUVVNc2FVSkJRV2xDTEVOQlEzQkVMRzlGUVVGMVFpeEZRVU4yUWl4RFFVRkRMR0ZCUVhGQ0xFVkJRVVVzUlVGQlJUdFpRVU4wUWl4elJFRkJjMFE3V1VGRGRFUXNjMFJCUVZVc1EwRkJReXhuUlVGQmIwSXNSVUZCUlN4RlFVRkZMRzlGUVVGMVFpeEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRPMWxCUXk5RUxFMUJRVTBzVFVGQlRTeEhRVUZyUWl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExHRkJRV0VzUTBGQlF5eERRVUZETzFsQlEzaEVMRzFDUVVGdFFpeERRVUZETEdOQlFXTXNRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJRenRSUVVNdlF5eERRVUZETEVOQlEwb3NRMEZCUXp0UlFVVkdMRkZCUVZFN1VVRkRVaXh0UWtGQmJVSXNRMEZCUXl4clFrRkJhMElzUTBGQlF5eHBRa0ZCYVVJc1EwRkRjRVFzYlVWQlFYTkNMRVZCUTNSQ0xFTkJRVU1zV1VGQmIwSXNSVUZCUlN4RlFVRkZPMWxCUTNKQ0xITkVRVUZ6UkR0WlFVTjBSQ3h6UkVGQlZTeERRVUZETEdkRlFVRnZRaXhGUVVGRkxFVkJRVVVzYlVWQlFYTkNMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU03V1VGRE9VUXNUVUZCVFN4TFFVRkxMRWRCUVdsQ0xFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNXVUZCV1N4RFFVRkRMRU5CUVVNN1dVRkRja1FzYlVKQlFXMUNMRU5CUVVNc1lVRkJZU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETzFGQlF6ZERMRU5CUVVNc1EwRkRTaXhEUVVGRE8xRkJSVVlzWjBKQlFXZENPMUZCUTJoQ0xHMUNRVUZ0UWl4RFFVRkRMR3RDUVVGclFpeERRVUZETEdsQ1FVRnBRaXhEUVVOd1JDd3lSVUZCT0VJc1JVRkRPVUlzUTBGQlF5eHRRa0ZCTWtJc1JVRkJSU3hGUVVGRk8xbEJRelZDTEhORVFVRnpSRHRaUVVOMFJDeHpSRUZCVlN4RFFVTk9MR2RGUVVGdlFpeEZRVUZGTEVWQlEzUkNMREpGUVVFNFFpeEZRVU01UWl4RFFVRkRMRU5CUTBvc1EwRkJRenRaUVVOR0xFMUJRVTBzV1VGQldTeEhRVU5rTEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc2JVSkJRVzFDTEVOQlFVTXNRMEZCUXp0WlFVTndReXh0UWtGQmJVSXNRMEZCUXl4alFVRmpMRU5CUVVNc1dVRkJXU3hEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZETzFGQlF5OUVMRU5CUVVNc1EwRkRTaXhEUVVGRE8xRkJSVVlzVlVGQlZUdFJRVU5XTEcxQ1FVRnRRaXhEUVVGRExHdENRVUZyUWl4RFFVRkRMR2xDUVVGcFFpeERRVU53UkN4eFJVRkJkMElzUlVGRGVFSXNRMEZCUXl4alFVRnpRaXhGUVVGRkxFVkJRVVU3V1VGRGRrSXNNRVJCUVdNc1EwRkRWaXhuUlVGQmIwSXNSVUZCUlN4RlFVTjBRaXh4UWtGQmNVSXNZMEZCWXl4RlFVRkZMRU5CUTNoRExFTkJRVU03VVVGRFRpeERRVUZETEVOQlEwb3NRMEZCUXp0UlFVVkdMSEZDUVVGeFFqdFJRVU55UWl4dFFrRkJiVUlzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhwUWtGQmFVSXNRMEZEY0VRc1owWkJRVzFETEVWQlEyNURMRU5CUVVNc2RVSkJRU3RDTEVWQlFVVXNSVUZCUlR0WlFVTm9ReXh6UkVGQlZTeERRVU5PTEdkRlFVRnZRaXhGUVVGRkxFVkJRM1JDTEdkR1FVRnRReXhGUVVOdVF5eERRVUZETEVOQlEwb3NRMEZCUXp0WlFVTkdMRTFCUVUwc1owSkJRV2RDTEVkQlFUUkNMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRM2hFTEhWQ1FVRjFRaXhEUVVNeFFpeERRVUZETzFsQlEwWXNiVUpCUVcxQ0xFTkJRVU1zZDBKQlFYZENMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNRMEZCUXp0UlFVTnVSU3hEUVVGRExFTkJRMG9zUTBGQlF6dEpRVU5PTEVOQlFVTTdRMEZEU2pzN096czdPenM3T3pzN096czdPenM3TzBGRGJFeEVMR3RFUVVGclJEdEJRVVZTTzBGQlJVYzdRVUZEWVR0QlFWTXhSRHM3UjBGRlJ6dEJRVU5KTEUxQlFVMHNiVUpCUVcxQ08wbEJUelZDTzFGQlRrRXNhMEpCUVdFc1IwRkJSeXhEUVVGRExFTkJRVU03VVVGUFpDeEpRVUZKTEVOQlFVTXNUVUZCVFN4SFFVRkhMRWxCUVVrc1YwRkJWeXhGUVVGRkxFTkJRVU03VVVGRGFFTXNTVUZCU1N4RFFVRkRMRTlCUVU4c1IwRkJSeXhKUVVGSkxGZEJRVmNzUlVGQlJTeERRVUZETzFGQlEycERMRWxCUVVrc1EwRkJReXhyUWtGQmEwSXNSMEZCUnl4SlFVRkpMRzFGUVVGclFpeEZRVUZGTEVOQlFVTTdVVUZEYmtRc2QwWkJRWFZETEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1NVRkRiRVFzUTBGQlF6dEpRVVZFT3pzN08wOUJTVWM3U1VGRFNDeFBRVUZQTEVOQlFVTXNZVUZCY1VJN1VVRkRla0lzYzBSQlFWVXNRMEZCUXl4blJVRkJiMElzUlVGQlJTeEZRVUZGTEdGQlFXRXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJRenRSUVVOeVJDeEpRVUZKTzFsQlEwRXNTVUZCU1N4RFFVRkRMRk5CUVZNc1IwRkJSeXhKUVVGSkxGTkJRVk1zUTBGQlF5eGhRVUZoTEVOQlFVTXNRMEZCUXp0WlFVTTVReXhKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETEUxQlFVMHNSMEZCUnl4RFFVRkRMRXRCUVVzc1JVRkJSU3hGUVVGRkxFTkJRVU1zU1VGQlNTeERRVUZETEZsQlFWa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRenRaUVVNMVJDeEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMRTlCUVU4c1IwRkJSeXhIUVVGSExFVkJRVVVzUTBGQlF5eEpRVUZKTEVOQlFVTXNZVUZCWVN4RlFVRkZMRU5CUVVNN1dVRkRjRVFzU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4UFFVRlBMRWRCUVVjc1EwRkJReXhMUVVGTExFVkJRVVVzUlVGQlJTeERRVUZETEVsQlFVa3NRMEZCUXl4aFFVRmhMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU03V1VGRE9VUXNTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJReXhUUVVGVExFZEJRVWNzUTBGQlF5eExRVUZMTEVWQlFVVXNSVUZCUlN4RFFVRkRMRWxCUVVrc1EwRkJReXhsUVVGbExFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTTdXVUZEYkVVc1NVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlF5eGxRVUZsTEVkQlFVY3NRMEZCUXl4TFFVRkxMRVZCUVVVc1JVRkJSU3hEUVVOMlF5eEpRVUZKTEVOQlFVTXNjVUpCUVhGQ0xFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTTdXVUZEZEVNc1QwRkJUeXhKUVVGSkxFTkJRVU03VTBGRFpqdFJRVUZETEU5QlFVOHNTMEZCU3l4RlFVRkZPMWxCUTFvc2QwUkJRVmtzUTBGQlF5eExRVUZMTEVWQlFVVXNTMEZCU3l4RFFVRkRMRU5CUVVNN1dVRkRNMElzVDBGQlR5eExRVUZMTEVOQlFVTTdVMEZEYUVJN1NVRkRUQ3hEUVVGRE8wbEJSVVE3T3p0UFFVZEhPMGxCUTBnc2NVSkJRWEZDTEVOQlFVTXNTMEZCYlVJN1VVRkRja01zSzBKQlFTdENPMUZCUXk5Q0xFbEJRVWtzUTBGQlF5eExRVUZMTEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1NVRkJTU3hGUVVGRk8xbEJRM1pDTEU5QlFVODdVMEZEVmp0UlFVVkVMR2RFUVVGblJEdFJRVU5vUkN4TFFVRkxMRU5CUVVNc1NVRkJTVHRoUVVOTUxFbEJRVWtzUlVGQlJUdGhRVU5PTEVsQlFVa3NRMEZCUXl4RFFVRkRMR0ZCUVhOQ0xFVkJRVVVzUlVGQlJUdFpRVU0zUWl4elFrRkJjMEk3V1VGRGRFSXNUVUZCVFN4clFrRkJhMElzUjBGQlJ5eEpRVUZKTEZsQlFWa3NRMEZEZGtNc2JVSkJRVzFDTEVWQlEyNUNPMmRDUVVOSkxFbEJRVWtzUlVGQlJTeGhRVUZoTzJGQlEzUkNMRU5CUTBvc1EwRkJRenRaUVVWR0xIVkVRVUYxUkR0WlFVTjJSQ3hKUVVGSkxFTkJRVU1zWlVGQlpTeERRVUZETEd0Q1FVRnJRaXhEUVVGRExFTkJRVU03VVVGRE4wTXNRMEZCUXl4RFFVRkRPMkZCUTBRc1MwRkJTeXhEUVVGRExFTkJRVU1zUzBGQldTeEZRVUZGTEVWQlFVVTdXVUZEY0VJc2QwUkJRVmtzUTBGRFVpeG5SVUZCYjBJc1JVRkJSU3hGUVVOMFFpeDFSRUZCZFVRc1MwRkJTeXhGUVVGRkxFTkJRMnBGTEVOQlFVTTdVVUZEVGl4RFFVRkRMRU5CUVVNc1EwRkJRenRKUVVOWUxFTkJRVU03U1VGRlJEczdPMDlCUjBjN1NVRkRTQ3hsUVVGbExFTkJRVU1zUzBGQmJVSTdVVUZETDBJc05rUkJRVFpFTzFGQlF6ZEVMRWxCUVVrc1MwRkJTeXhEUVVGRExFbEJRVWtzU1VGQlNTeExRVUZMTEVOQlFVTXNTVUZCU1N4WlFVRlpMRWxCUVVrc1JVRkJSVHRaUVVNeFF5eEpRVUZKTEVOQlFVTXNjVUpCUVhGQ0xFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTTdXVUZEYkVNc1QwRkJUenRUUVVOV08xRkJSVVFzVFVGQlRTeFBRVUZQTEVkQlFTdENMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zUzBGQlN5eERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPMUZCUTI1RkxITkVRVUZWTEVOQlEwNHNaMFZCUVc5Q0xFVkJRVVVzUlVGRGRFSXNaMEpCUVdkQ08xbEJRMW9zU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFdEJRVXNzUTBGQlF5eEpRVUZKTEVOQlFVTXNSVUZCUlN4VFFVRlRMRVZCUVVVc1EwRkJReXhEUVVGRExFVkJRM2hFTEVOQlFVTXNRMEZEU2l4RFFVRkRPMUZCUlVZc2FVVkJRV2xGTzFGQlEycEZMRWxCUVVrc1EwRkJReXhyUWtGQmEwSXNRMEZCUXl4aFFVRmhMRU5CUVVNc1QwRkJUeXhEUVVGRExFbEJRVWtzUlVGQlJTeExRVUZMTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1NVRkRjRVVzUTBGQlF6dEpRVVZFT3pzN1QwRkhSenRKUVVOSUxEWkVRVUUyUkR0SlFVTTNSQ3haUVVGWkxFTkJRVU1zUzBGQldUdFJRVU55UWl4elJFRkJWU3hEUVVOT0xHZEZRVUZ2UWl4RlFVRkZMRVZCUTNSQ0xHdEVRVUZyUkN4RlFVTnNSQ3hEUVVGRExFTkJRMG9zUTBGQlF6dFJRVU5HTEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1lVRkJZU3hEUVVGRExFbEJRVWtzUzBGQlN5eERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRMRU5CUVVNN1NVRkRha1FzUTBGQlF6dEpRVVZFT3pzN1QwRkhSenRKUVVOSUxHRkJRV0U3VVVGRFZDeDNSRUZCV1N4RFFVRkRMR2RGUVVGdlFpeEZRVUZGTEVWQlFVVXNhVUpCUVdsQ0xFTkJRVU1zUTBGQlF6dEpRVU0xUkN4RFFVRkRPMGxCUlVRN096dFBRVWRITzBsQlEwZ3NZVUZCWVN4RFFVRkRMRXRCUVdsQ08xRkJRek5DTEVsQlFVa3NRMEZCUXl4blEwRkJaME1zUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXp0UlFVTTNReXh6UkVGQlZTeERRVU5PTEdkRlFVRnZRaXhGUVVGRkxFVkJRM1JDTEhWRVFVRjFSRHRaUVVOdVJDeEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMRXRCUVVzc1EwRkJReXhKUVVGSkxFTkJRVU03V1VGRE1VSXNTMEZCU3p0WlFVTk1MRXRCUVVzc1EwRkJReXhOUVVGTkxFTkJRMjVDTEVOQlFVTTdVVUZEUml4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExHRkJRV0VzUTBGQlF5eEpRVUZKTEV0QlFVc3NRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJReXhEUVVGRE8wbEJRMjVFTEVOQlFVTTdTVUZGUkN4dFFrRkJiVUk3VVVGRFppeE5RVUZOTEU5QlFVOHNSMEZCUnl4SlFVRkpMRGhFUVVGblF5eEZRVUZGTEVOQlFVTTdVVUZEZGtRc1NVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlF5eEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRTlCUVU4c1JVRkJSU3hEUVVGRExFTkJRVU03U1VGRE0wTXNRMEZCUXp0SlFVVkVMR0ZCUVdFc1EwRkJReXhWUVVGclFqdFJRVU0xUWl4TlFVRk5MRTlCUVU4c1IwRkJSeXhKUVVGSkxEQkVRVUUwUWl4RFFVRkRMRlZCUVZVc1EwRkJReXhEUVVGRE8xRkJRemRFTEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eFBRVUZQTEVWQlFVVXNRMEZCUXl4RFFVRkRPMGxCUXpORExFTkJRVU03U1VGRlJDeGxRVUZsTzFGQlExZ3NUVUZCVFN4UFFVRlBMRWRCUVVjc1NVRkJTU3cwUkVGQk9FSXNSVUZCUlN4RFFVRkRPMUZCUTNKRUxFbEJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhQUVVGUExFVkJRVVVzUTBGQlF5eERRVUZETzBsQlF6TkRMRU5CUVVNN1NVRkZSQ3hsUVVGbExFTkJRVU1zUzBGQlowTTdVVUZETlVNc1RVRkJUU3hQUVVGUExFZEJRVWNzU1VGQlNTdzBSRUZCT0VJc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF6dFJRVU14UkN4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRExFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNUMEZCVHl4RlFVRkZMRU5CUVVNc1EwRkJRenRKUVVNelF5eERRVUZETzBsQlJVUXNaMEpCUVdkQ0xFTkJRVU1zVFVGQmFVTTdVVUZET1VNc1RVRkJUU3hQUVVGUExFZEJRVWNzU1VGQlNTdzJSRUZCSzBJc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF6dFJRVU0xUkN4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRExFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNUMEZCVHl4RlFVRkZMRU5CUVVNc1EwRkJRenRKUVVNelF5eERRVUZETzBsQlJVUXNORUpCUVRSQ08xRkJRM2hDTEUxQlFVMHNUMEZCVHl4SFFVRkhMRWxCUVVrc2VVVkJRVEpETEVWQlFVVXNRMEZCUXp0UlFVTnNSU3hKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1QwRkJUeXhGUVVGRkxFTkJRVU1zUTBGQlF6dEpRVU16UXl4RFFVRkRPMGxCUlVRc01rSkJRVEpDTzFGQlEzWkNMRTFCUVUwc1QwRkJUeXhIUVVGSExFbEJRVWtzZDBWQlFUQkRMRVZCUVVVc1EwRkJRenRSUVVOcVJTeEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zVDBGQlR5eEZRVUZGTEVOQlFVTXNRMEZCUXp0SlFVTXpReXhEUVVGRE8wbEJSVVE3T3p0UFFVZEhPMGxCUTBnc1owSkJRV2RDTEVOQlFVTXNVMEZCTUVJN1VVRkRka01zYzBSQlFWVXNRMEZCUXl4blJVRkJiMElzUlVGQlJTeEZRVUZGTEhWQ1FVRjFRaXhEUVVGRExFTkJRVU03VVVGRE5VUXNTVUZEU1N4SlFVRkpMRU5CUVVNc1UwRkJVenRaUVVOa0xFbEJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVTXNWVUZCVlN4TFFVRkxMRWxCUVVrc1EwRkJReXhoUVVGaExFVkJRMnhFTzFsQlEwVXNNRVZCUVRCRk8xbEJRekZGTEUxQlFVMHNXVUZCV1N4SFFVRkhMRWxCUVVrc05rUkJRU3RDTEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVNN1dVRkZjRVVzU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1dVRkJXU3hEUVVGRExFOUJRVThzUlVGQlJTeERRVUZETEVOQlFVTTdVMEZETDBNN1NVRkRUQ3hEUVVGRE8wbEJSVVE3TzA5QlJVYzdTVUZEU0N4TFFVRkxPenRSUVVORUxGVkJRVWtzUTBGQlF5eFRRVUZUTERCRFFVRkZMRXRCUVVzc1JVRkJSU3hEUVVGRE8wbEJRelZDTEVOQlFVTTdTVUZGUkN3d1JFRkJNRVE3U1VGRE1VUXNiVWRCUVcxSE8wbEJRMjVITEdkRFFVRm5ReXhEUVVGRExFdEJRV2xDTEVsQlFVY3NRMEZCUXp0SlFVVjBSRHM3TzA5QlIwYzdTVUZEU0N4dFIwRkJiVWM3U1VGRGJrY3NVVUZCVVN4RFFVRkRMR0ZCUVRKRExFbEJRVWNzUTBGQlF6dEpRVVY0UkRzN08wOUJSMGM3U1VGRFNDeHRSMEZCYlVjN1NVRkRia2NzWTBGQll5eERRVUZETEcxQ1FVRjFSQ3hKUVVGSExFTkJRVU03U1VGRk1VVTdPMDlCUlVjN1NVRkRTQ3h0UjBGQmJVYzdTVUZEYmtjc1kwRkJZeXhEUVVGRExGbEJRV2xETEVsQlFVY3NRMEZCUXp0SlFVVndSRHM3TzA5QlIwYzdTVUZEU0N4dFIwRkJiVWM3U1VGRGJrY3NZMEZCWXl4RFFVRkRMR0ZCUVRKRExFbEJRVWNzUTBGQlF6dEpRVVU1UkRzN08wOUJSMGM3U1VGRFNDeHRSMEZCYlVjN1NVRkRia2NzWVVGQllTeERRVUZETEZsQlFYbERMRWxCUVVjc1EwRkJRenRKUVVVelJEczdPMDlCUjBjN1NVRkRTQ3h0UjBGQmJVYzdTVUZEYmtjc2QwSkJRWGRDTEVOQlEzQkNMRzFDUVVFeVJDeEpRVU0xUkN4RFFVRkRPME5CUTFBN096czdPenM3T3pzN096czdPenM3T3pzN08wRkROVkJFTEd0RVFVRnJSRHRCUVVWU08wRkJSVTA3UVVGRmIwSTdRVUZEYWtJN1FVRkRSRHRCUVVVelF5eE5RVUZOTEdWQlFXVTdTVUZ4UW5oQ0xGbEJRVmtzYzBKQlFUaERPMUZCUTNSRUxFbEJRVWtzUTBGQlF5eFRRVUZUTEVkQlFVY3NTVUZCU1N4RFFVRkRPMUZCUTNSQ0xFbEJRVWtzUTBGQlF5eG5Ra0ZCWjBJc1IwRkJSeXh6UWtGQmMwSXNRMEZCUXp0UlFVTXZReXhKUVVGSkxFTkJRVU1zWVVGQllTeEhRVUZITEVWQlFVVXNRMEZCUXp0UlFVTjRRaXhKUVVGSkxFTkJRVU1zYlVKQlFXMUNMRWRCUVVjc1NVRkJTU3cwUlVGQmJVSXNRMEZET1VNc1NVRkJTU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMSFZDUVVGMVFpeERRVU5vUkN4RFFVRkRPMUZCUTBZc1NVRkJTU3hEUVVGRExHTkJRV01zUjBGQlJ5eEpRVUZKTEZkQlFWY3NSVUZCUlN4RFFVRkRPMUZCUTNoRExFbEJRVWtzUTBGQlF5eG5Ra0ZCWjBJc1IwRkJSeXhKUVVGSkxGZEJRVmNzUlVGQlJTeERRVUZETzFGQlF6RkRMRWxCUVVrc1EwRkJReXhQUVVGUExFZEJRVWNzU1VGQlNTeFhRVUZYTEVWQlFVVXNRMEZCUXp0SlFVTnlReXhEUVVGRE8wbEJSVTBzVTBGQlV6dFJRVU5hTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1UwRkJVeXhGUVVGRk8xbEJRMnBDTEZOQlFWTXNRMEZCUXl4RlFVRkZPMmxDUVVOUUxHTkJRV01zUTBGQlF5eGpRVUZqTEVOQlFVTTdhVUpCUXpsQ0xFbEJRVWtzUTBGQlF5eERRVUZETEU5QlFXdENMRVZCUVVVc1JVRkJSVHRuUWtGRGVrSXNTVUZCU1N4RFFVRkRMR3RDUVVGclFpeERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRPMWxCUTNKRExFTkJRVU1zUTBGQlF5eERRVUZETzFOQlExWTdZVUZCVFR0WlFVTklMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zUjBGQlJ5eEZRVUZGTEVOQlFVTTdVMEZEZUVJN1NVRkRUQ3hEUVVGRE8wbEJSVVFzWjBKQlFXZENPMUZCUTFvc2MwUkJRVlVzUTBGQlF5eG5SVUZCYjBJc1JVRkJSU3hGUVVGRkxHdENRVUZyUWl4RFFVRkRMRU5CUVVNN1VVRkRka1FzU1VGQlNTeERRVUZETEZOQlFWTXNSMEZCUnl4SlFVRkpMRU5CUVVNN1VVRkRkRUlzU1VGQlNTeERRVUZETEdOQlFXTXNRMEZCUXl4aFFVRmhMRU5CUVVNc1NVRkJTU3hMUVVGTExFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1EwRkJReXhEUVVGRE8wbEJRMjVGTEVOQlFVTTdTVUZGUkN4clFrRkJhMElzUTBGQlF5eFBRVUZyUWp0UlFVTnFReXh6UkVGQlZTeERRVUZETEdkRlFVRnZRaXhGUVVGRkxFVkJRVVVzYjBKQlFXOUNMRU5CUVVNc1EwRkJRenRSUVVWNlJDeEpRVUZKTEVOQlFVTXNVMEZCVXl4SFFVRkhMRTlCUVU4c1EwRkJRenRSUVVONlFpeEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMR2RDUVVGblFpeERRVUZETEV0QlFVc3NSVUZCUlN4SFFVRkhMRVZCUVVVN1dVRkRlRU1zU1VGQlNTeERRVUZETEdkQ1FVRm5RaXhGUVVGRkxFTkJRVU03VVVGRE5VSXNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkZTQ3hOUVVGTkxFMUJRVTBzUjBGQlJ5eFJRVUZSTEVOQlFVTXNZVUZCWVN4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRE8xRkJRMmhFTEVsQlFVa3NRMEZCUXl4RlFVRkZMRWRCUVVjc1RVRkJUU3hEUVVGRExGVkJRVlVzUTBGQlF5eFJRVUZSTEVWQlFVVTdXVUZEYkVNc1dVRkJXU3hGUVVGRkxFbEJRVWs3VTBGRGNrSXNRMEZCUXl4RFFVRkRPMUZCUlVnc1NVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlF5eHBRa0ZCYVVJc1EwRkJRenRaUVVNM1FpeFRRVUZUTEVWQlFVVXNTVUZCU1N4WlFVRlpMRU5CUVVNc1NVRkJTU3hEUVVGRExGTkJRVk1zUlVGQlJTeEpRVUZKTEVOQlFVTXNSVUZCUlN4RFFVRkRPMU5CUTNaRUxFTkJRVU1zUTBGQlF6dFJRVVZJTEhOQ1FVRnpRanRSUVVOMFFpeE5RVUZOTEZsQlFWa3NSMEZCUnl4SlFVRkpMRU5CUVVNc1JVRkJSU3hEUVVGRExGbEJRVmtzUTBGQlF5eEpRVUZKTEVOQlFVTXNSVUZCUlN4RFFVRkRMR0ZCUVdFc1EwRkJReXhEUVVGRE8xRkJRMnBGTEVsQlFVa3NRMEZCUXl4RlFVRkZMRU5CUVVNc1dVRkJXU3hEUVVGRExGbEJRVmtzUlVGQlJTeHhSVUZCZFVJc1JVRkJSU3hEUVVGRExFTkJRVU03VVVGRE9VUXNTVUZCU1N4RFFVRkRMRVZCUVVVc1EwRkJReXhoUVVGaExFTkJRVU1zV1VGQldTeERRVUZETEVOQlFVTTdVVUZGY0VNc2QwSkJRWGRDTzFGQlEzaENMRTFCUVUwc1kwRkJZeXhIUVVGSExFbEJRVWtzUTBGQlF5eEZRVUZGTEVOQlFVTXNXVUZCV1N4RFFVRkRMRWxCUVVrc1EwRkJReXhGUVVGRkxFTkJRVU1zWlVGQlpTeERRVUZETEVOQlFVTTdVVUZEY2tVc1NVRkJTU3hEUVVGRExFVkJRVVVzUTBGQlF5eFpRVUZaTEVOQlFVTXNZMEZCWXl4RlFVRkZMSFZGUVVGNVFpeEZRVUZGTEVOQlFVTXNRMEZCUXp0UlFVTnNSU3hKUVVGSkxFTkJRVU1zUlVGQlJTeERRVUZETEdGQlFXRXNRMEZCUXl4alFVRmpMRU5CUVVNc1EwRkJRenRSUVVWMFF5eHhRa0ZCY1VJN1VVRkRja0lzVFVGQlRTeGhRVUZoTEVkQlFVY3NTVUZCU1N4RFFVRkRMRVZCUVVVc1EwRkJReXhoUVVGaExFVkJRVVVzUTBGQlF6dFJRVU01UXl4SlFVRkpMRU5CUVVNc1JVRkJSU3hEUVVGRExGbEJRVmtzUTBGQlF5eGhRVUZoTEVWQlFVVXNXVUZCV1N4RFFVRkRMRU5CUVVNN1VVRkRiRVFzU1VGQlNTeERRVUZETEVWQlFVVXNRMEZCUXl4WlFVRlpMRU5CUVVNc1lVRkJZU3hGUVVGRkxHTkJRV01zUTBGQlF5eERRVUZETzFGQlEzQkVMRWxCUVVrc1EwRkJReXhGUVVGRkxFTkJRVU1zVjBGQlZ5eERRVUZETEdGQlFXRXNRMEZCUXl4RFFVRkRPMUZCUTI1RExFbEJRVWtzUTBGQlF5eEZRVUZGTEVOQlFVTXNWVUZCVlN4RFFVRkRMR0ZCUVdFc1EwRkJReXhEUVVGRE8xRkJSV3hETEhkRFFVRjNRenRSUVVONFF5eEpRVUZKTEVOQlFVTXNaMEpCUVdkQ0xFZEJRVWNzU1VGQlNTeERRVUZETEVWQlFVVXNRMEZCUXl4cFFrRkJhVUlzUTBGRE4wTXNZVUZCWVN4RlFVTmlMRmxCUVZrc1EwRkRaaXhEUVVGRE8xRkJRMFlzU1VGQlNTeERRVUZETEdkQ1FVRm5RaXhIUVVGSExFbEJRVWtzUTBGQlF5eEZRVUZGTEVOQlFVTXNhVUpCUVdsQ0xFTkJRemRETEdGQlFXRXNSVUZEWWl4WlFVRlpMRU5CUTJZc1EwRkJRenRSUVVOR0xIVkVRVUYxUkR0UlFVTjJSQ3hKUVVGSkxFTkJRVU1zWTBGQll5eEhRVUZITEVsQlFVa3NRMEZCUXl4RlFVRkZMRU5CUVVNc1dVRkJXU3hGUVVGRkxFTkJRVU03VVVGRE4wTXNlVVZCUVhsRk8xRkJRM3BGTEVsQlFVa3NRMEZCUXl4RlFVRkZMRU5CUVVNc1ZVRkJWU3hEUVVGRExFbEJRVWtzUTBGQlF5eEZRVUZGTEVOQlFVTXNXVUZCV1N4RlFVRkZMRWxCUVVrc1EwRkJReXhqUVVGakxFTkJRVU1zUTBGQlF6dFJRVVU1UkN4cFEwRkJhVU03VVVGRGFrTXNTVUZCU1N4RFFVRkRMRVZCUVVVc1EwRkJReXgxUWtGQmRVSXNRMEZCUXl4SlFVRkpMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNRMEZCUXp0UlFVTjJSQ3h2UWtGQmIwSTdVVUZEY0VJc1RVRkJUU3hQUVVGUExFZEJRVWNzU1VGQlNTeERRVUZETEVWQlFVVXNRMEZCUXl4aFFVRmhMRVZCUVVVc1EwRkJRenRSUVVONFF5eEpRVUZKTEVOQlFVTXNSVUZCUlN4RFFVRkRMRmRCUVZjc1EwRkJReXhKUVVGSkxFTkJRVU1zUlVGQlJTeERRVUZETEZWQlFWVXNSVUZCUlN4UFFVRlBMRU5CUVVNc1EwRkJRenRSUVVOcVJDeHpSRUZCYzBRN1VVRkRkRVFzU1VGQlNTeERRVUZETEVWQlFVVXNRMEZCUXl4aFFVRmhMRU5CUTJwQ0xFbEJRVWtzUTBGQlF5eEZRVUZGTEVOQlFVTXNWVUZCVlN4RlFVTnNRaXhKUVVGSkxFTkJRVU1zUlVGQlJTeERRVUZETEdOQlFXTXNSVUZEZEVJc1NVRkJTU3hEUVVGRExFVkJRVVVzUTBGQlF5eGhRVUZoTEVOQlEzaENMRU5CUVVNN1VVRkRSaXhKUVVGSkxFTkJRVU1zUlVGQlJTeERRVUZETEdGQlFXRXNRMEZEYWtJc1NVRkJTU3hEUVVGRExFVkJRVVVzUTBGQlF5eFZRVUZWTEVWQlEyeENMRWxCUVVrc1EwRkJReXhGUVVGRkxFTkJRVU1zWTBGQll5eEZRVU4wUWl4SlFVRkpMRU5CUVVNc1JVRkJSU3hEUVVGRExHRkJRV0VzUTBGRGVFSXNRMEZCUXp0UlFVTkdMRWxCUVVrc1EwRkJReXhGUVVGRkxFTkJRVU1zWVVGQllTeERRVU5xUWl4SlFVRkpMRU5CUVVNc1JVRkJSU3hEUVVGRExGVkJRVlVzUlVGRGJFSXNTVUZCU1N4RFFVRkRMRVZCUVVVc1EwRkJReXhyUWtGQmEwSXNSVUZETVVJc1NVRkJTU3hEUVVGRExFVkJRVVVzUTBGQlF5eFBRVUZQTEVOQlEyeENMRU5CUVVNN1VVRkRSaXhKUVVGSkxFTkJRVU1zUlVGQlJTeERRVUZETEdGQlFXRXNRMEZEYWtJc1NVRkJTU3hEUVVGRExFVkJRVVVzUTBGQlF5eFZRVUZWTEVWQlEyeENMRWxCUVVrc1EwRkJReXhGUVVGRkxFTkJRVU1zYTBKQlFXdENMRVZCUXpGQ0xFbEJRVWtzUTBGQlF5eEZRVUZGTEVOQlFVTXNUMEZCVHl4RFFVTnNRaXhEUVVGRE8xRkJSVVlzU1VGQlNTeERRVUZETEdOQlFXTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1JVRkJSU3hEUVVGRExGbEJRVmtzUlVGQlJTeERRVUZETzFGQlF6ZERMR3RDUVVGclFqdFJRVU5zUWl4SlFVRkpMRU5CUVVNc2EwSkJRV3RDTEVkQlFVY3NTVUZCU1N4RFFVRkRMRVZCUVVVc1EwRkJReXhyUWtGQmEwSXNRMEZEYUVRc1lVRkJZU3hGUVVOaUxHTkJRV01zUTBGRGFrSXNRMEZCUXp0UlFVTkdMRWxCUVVrc1EwRkJReXhqUVVGakxFZEJRVWNzU1VGQlNTeERRVUZETEVWQlFVVXNRMEZCUXl4clFrRkJhMElzUTBGRE5VTXNZVUZCWVN4RlFVTmlMRlZCUVZVc1EwRkRZaXhEUVVGRE8xRkJSVVlzVDBGQlR5eERRVUZETEhGQ1FVRnhRaXhEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRMRkZCUVZFc1JVRkJSU3hGUVVGRk8xbEJRM0pFTEVsQlFVa3NRMEZCUXl4VlFVRlZMRWRCUVVjc1VVRkJVU3hEUVVGRE8xbEJRek5DTEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNc2NVSkJRWEZDTEVOQlEyaERMRU5CUVVNc1NVRkJlVUlzUlVGQlJTeExRVUZqTEVWQlFVVXNSVUZCUlN4RFFVTXhReXhKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETEVsQlFVa3NSVUZCUlN4TFFVRkxMRU5CUVVNc1EwRkRiRU1zUTBGQlF6dFJRVU5PTEVOQlFVTXNRMEZCUXl4RFFVRkRPMUZCUlVnc1NVRkJTU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMR0ZCUVdFc1EwRkJReXhKUVVGSkxFdEJRVXNzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhEUVVGRExFTkJRVU03U1VGRGRrVXNRMEZCUXp0SlFVVkVMRk5CUVZNc1EwRkJReXhKUVVGNVFpeEZRVUZGTEV0QlFXTTdVVUZETDBNc1RVRkJUU3hKUVVGSkxFZEJRVWNzUzBGQlN5eERRVUZETEdGQlFXRXNRMEZCUXl4SlFVRkpMRU5CUVVNc1ZVRkJWU3hEUVVGRExFTkJRVU03VVVGRGJFUXNTVUZCU1N4SlFVRkpMRVZCUVVVN1dVRkRUaXhOUVVGTkxFMUJRVTBzUjBGQlJ5eEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMRTFCUVUwc1EwRkJRenRaUVVOeVF5eE5RVUZOTEVkQlFVY3NSMEZCUnl4RlFVRkZMRU5CUVVNN1dVRkRaaXhMUVVGTExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNSVUZCUlN4RFFVRkRMRWRCUVVjc1JVRkJSU3hGUVVGRkxFTkJRVU1zUlVGQlJTeEZRVUZGTzJkQ1FVTjZRaXhIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZETEVkQlFVY3NTVUZCU1N4WlFVRlpMRU5CUVVNc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8yRkJRemRETzFsQlJVUXNhMEpCUVd0Q08xbEJRMnhDTEVsQlFVa3NRMEZCUXl4blFrRkJaMElzUTBGQlF5eDFRa0ZCZFVJc1EwRkJReXhyUWtGQmEwSXNRMEZCUXl4SFFVRkhMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNRMEZCUXp0blFrRkRia1lzUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJTeEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVVc1IwRkJSeXhEUVVGRExFVkJRVVVzUTBGQlF6dG5Ra0ZETDBJc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZETEVWQlFVVXNSMEZCUnl4RFFVRkRMRVZCUVVVc1EwRkJRenRuUWtGREwwSXNSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRkxFZEJRVWNzUTBGQlF5eERRVUZETEVOQlFVTXNSVUZCUlN4SFFVRkhMRU5CUVVNc1JVRkJSU3hEUVVGRExFVkJRVVVzUjBGQlJ5eERRVUZETEVWQlFVVXNRMEZCUXp0blFrRkRhRU1zUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJTeEhRVUZITEVOQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVVc1IwRkJSeXhEUVVGRExFVkJRVVVzUTBGQlF6dGhRVU51UXl4RFFVRkRMRU5CUVVNN1dVRkZTQ3hOUVVGTkxFOUJRVThzUjBGQlJ5eEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMRmRCUVZjc1EwRkJReXhUUVVGVExFTkJRVU03V1VGRGNrUXNhMFZCUVd0Rk8xbEJRMnhGTEhGRlFVRnhSVHRaUVVOeVJTeFpRVUZaTzFsQlExb3NTVUZCU1N4RFFVRkRMRVZCUVVVc1EwRkJReXhsUVVGbExFTkJRVU1zU1VGQlNTeERRVUZETEVWQlFVVXNRMEZCUXl4WFFVRlhMRVZCUVVVc1QwRkJUeXhEUVVGRExGZEJRVmNzUTBGQlF5eERRVUZETzFsQlJXeEZMSGxIUVVGNVJ6dFpRVU42Unl4SlFVRkpMRU5CUVVNc1JVRkJSU3hEUVVGRExGVkJRVlVzUTBGRFpDeEpRVUZKTEVOQlFVTXNSVUZCUlN4RFFVRkRMRlZCUVZVc1JVRkRiRUlzUTBGQlF5eEZRVU5FTEVsQlFVa3NRMEZCUXl4RlFVRkZMRU5CUVVNc1NVRkJTU3hGUVVOYUxFbEJRVWtzUTBGQlF5eEZRVUZGTEVOQlFVTXNTVUZCU1N4RlFVTmFMRWxCUVVrc1EwRkJReXhGUVVGRkxFTkJRVU1zWVVGQllTeEZRVU55UWl4SlFVRkpMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNWMEZCVnl4RFFVRkRMR1ZCUVdVc1JVRkJSU3hEUVVOMFJDeERRVUZETzFsQlEwWXNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1YwRkJWeXhEUVVGRExHVkJRV1VzUlVGQlJTeERRVUZETEVOQlFVTTdVMEZEY0VVN1VVRkZSQ3hKUVVGSkxFbEJRVWtzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhOUVVGTkxFTkJRVU1zWVVGQllTeERRVUZETERSRlFVRjFRaXhEUVVGRExFVkJRVVU3V1VGRGNrVXNTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJReXhaUVVGWkxFTkJRVU1zVDBGQlR5eERRVU12UWl4RFFVRkRMRTFCUVhGQ0xFVkJRVVVzUzBGQllTeEZRVUZGTEV0QlFYTkNMRVZCUVVVc1JVRkJSVHRuUWtGRE4wUXNTVUZCU1N4RFFVRkRMRzFDUVVGdFFpeERRVUZETEZsQlFWa3NRMEZEYWtNc1RVRkJUU3hGUVVOT0xFdEJRVXNzUlVGRFRDeEpRVUZKTEVOQlFVTXNWVUZCVlN4RFFVTnNRaXhEUVVGRE8xbEJRMDRzUTBGQlF5eEZRVU5FTEVsQlFVa3NRMEZEVUN4RFFVRkRPMU5CUTB3N1VVRkZSQ3hKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETEhGQ1FVRnhRaXhEUVVOb1F5eERRVUZETEVsQlFYbENMRVZCUVVVc1MwRkJZeXhGUVVGRkxFVkJRVVVzUTBGRE1VTXNTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJReXhKUVVGSkxFVkJRVVVzUzBGQlN5eERRVUZETEVOQlEyeERMRU5CUVVNN1VVRkZSaXhKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEdGQlFXRXNRMEZCUXl4SlFVRkpMRFJFUVVGWkxFTkJRVU03V1VGRGVFTXNTVUZCU1R0WlFVTktMRXRCUVVzN1UwRkRVaXhEUVVGRExFTkJRVU1zUTBGQlF6dEpRVU5TTEVOQlFVTTdTVUZGVHl4TlFVRk5MRU5CUVVNc1dVRkJPRUk3VVVGRGVrTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhGUVVGRkxFVkJRVVU3V1VGRFZpeFBRVUZQTzFOQlExWTdVVUZGUkN4TlFVRk5MRTlCUVU4c1IwRkJSeXhKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETEZkQlFWY3NRMEZCUXl4VFFVRlRMRU5CUVVNN1VVRkRja1FzU1VGQlNTeERRVUZETEVWQlFVVXNRMEZCUXl4UlFVRlJMRU5CUTFvc1EwRkJReXhGUVVORUxFTkJRVU1zUlVGRFJDeFBRVUZQTEVOQlFVTXNaMEpCUVdkQ0xFVkJRM2hDTEU5QlFVOHNRMEZCUXl4cFFrRkJhVUlzUTBGRE5VSXNRMEZCUXp0UlFVTkdMRWxCUVVrc1EwRkJReXhGUVVGRkxFTkJRVU1zVTBGQlV5eERRVUZETEVsQlFVa3NRMEZCUXl4alFVRmpMRVZCUVVVc1IwRkJSeXhGUVVGRkxFZEJRVWNzUlVGQlJTeEhRVUZITEVWQlFVVXNSMEZCUnl4RFFVRkRMRU5CUVVNN1VVRkZNMFFzWjBKQlFXZENPMUZCUTJoQ0xHdENRVUZyUWp0UlFVTnNRaXhKUVVGSkxFTkJRVU1zUlVGQlJTeERRVUZETEZWQlFWVXNRMEZEWkN4SlFVRkpMRU5CUVVNc1JVRkJSU3hEUVVGRExGbEJRVmtzUlVGRGNFSXNTVUZCU1N4WlFVRlpMRU5CUVVNN1dVRkRZaXhEUVVGRExFVkJRVVVzUTBGQlF6dFpRVU5LTEZsQlFWa3NRMEZCUXl4VlFVRlZMRVZCUVVVc1EwRkJRenRaUVVNeFFpeERRVUZETEVWQlFVVXNXVUZCV1N4RFFVRkRMRmRCUVZjN1dVRkRNMElzUTBGQlF5eEZRVUZGTEZsQlFWa3NRMEZCUXl4WFFVRlhPMWxCUXpOQ0xGbEJRVmtzUTBGQlF5eFZRVUZWTEVWQlFVVXNRMEZCUXp0WlFVTXhRaXhaUVVGWkxFTkJRVU1zVlVGQlZTeEZRVUZGTEZsQlFWa3NRMEZCUXl4WFFVRlhPMU5CUTNCRUxFTkJRVU1zUlVGRFJpeEpRVUZKTEVOQlFVTXNSVUZCUlN4RFFVRkRMRmRCUVZjc1EwRkRkRUlzUTBGQlF6dFJRVVZHTEdkRVFVRm5SRHRSUVVOb1JDeEpRVUZKTEVOQlFVTXNSVUZCUlN4RFFVRkRMRlZCUVZVc1EwRkJReXhKUVVGSkxFTkJRVU1zUlVGQlJTeERRVUZETEZsQlFWa3NSVUZCUlN4SlFVRkpMRU5CUVVNc1kwRkJZeXhEUVVGRExFTkJRVU03VVVGRE9VUXNTVUZCU1N4RFFVRkRMRVZCUVVVc1EwRkJReXhWUVVGVkxFTkJRMlFzU1VGQlNTeERRVUZETEVWQlFVVXNRMEZCUXl4WlFVRlpMRVZCUTNCQ0xFbEJRVWtzV1VGQldTeERRVUZETzFsQlEySXNSMEZCUnl4RlFVRkZMRWRCUVVjc1JVRkJSU3hIUVVGSExFVkJRVVVzUjBGQlJ5eEZRVUZGTEVkQlFVY3NSVUZCUlN4SFFVRkhMRVZCUVVVc1IwRkJSeXhGUVVGRkxFZEJRVWNzUlVGQlJTeEhRVUZITEVWQlFVVXNSMEZCUnl4RlFVRkZMRWRCUVVjc1JVRkJSU3hIUVVGSE8xTkJRemRFTEVOQlFVTXNSVUZEUml4SlFVRkpMRU5CUVVNc1JVRkJSU3hEUVVGRExGZEJRVmNzUTBGRGRFSXNRMEZCUXp0UlFVVkdMRWxCUVVrc1NVRkJTU3hEUVVGRExFTkJRVU1zTWtKQlFUSkNPMUZCUTNKRExFbEJRVWtzU1VGQlNTeERRVUZETEVOQlFVTXNaMEpCUVdkQ08xRkJRekZDTEVsQlFVa3NVMEZCVXl4RFFVRkRMRU5CUVVNc2NVSkJRWEZDTzFGQlEzQkRMRWxCUVVrc1RVRkJUU3hEUVVGRExFTkJRVU1zSzBWQlFTdEZPMUZCUXpOR0xFbEJRVWtzVFVGQlRTeERRVUZETEVOQlFVTXNLMEpCUVN0Q08xRkJSVE5ETERSQ1FVRTBRanRSUVVNMVFpeEpRVUZKTEVOQlFVTXNSVUZCUlN4RFFVRkRMRlZCUVZVc1EwRkJReXhKUVVGSkxFTkJRVU1zUlVGQlJTeERRVUZETEZsQlFWa3NSVUZCUlN4SlFVRkpMRU5CUVVNc1kwRkJZeXhEUVVGRExFTkJRVU03VVVGRE9VUXNiVVpCUVcxR08xRkJRMjVHTEVsQlFVa3NSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJReXcyUWtGQk5rSTdVVUZEZGtNc1NVRkJTU3hIUVVGSExFbEJRVWtzUTBGQlF5eEZRVUZGTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc01rSkJRVEpDTzFGQlEycEVMRk5CUVZNc1IwRkJSeXhMUVVGTExFTkJRVU1zUTBGQlF5d3lRa0ZCTWtJN1VVRkRPVU1zVFVGQlRTeEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRMQ3RGUVVFclJUdFJRVU16Uml4TlFVRk5MRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU1zZFVOQlFYVkRPMUZCUTI1RUxFbEJRVWtzUTBGQlF5eEZRVUZGTEVOQlFVTXNiVUpCUVcxQ0xFTkJRM1pDTEVsQlFVa3NRMEZCUXl4blFrRkJaMElzUlVGRGNrSXNTVUZCU1N4RlFVTktMRWxCUVVrc1JVRkRTaXhUUVVGVExFVkJRMVFzVFVGQlRTeEZRVU5PTEUxQlFVMHNRMEZEVkN4RFFVRkRPMUZCUTBZc2FVTkJRV2xETzFGQlEycERMRWxCUVVrc1EwRkJReXhGUVVGRkxFTkJRVU1zZFVKQlFYVkNMRU5CUVVNc1NVRkJTU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMRU5CUVVNN1VVRkRka1FzTkVKQlFUUkNPMUZCUXpWQ0xFbEJRVWtzUTBGQlF5eEZRVUZGTEVOQlFVTXNWVUZCVlN4RFFVRkRMRWxCUVVrc1EwRkJReXhGUVVGRkxFTkJRVU1zV1VGQldTeEZRVUZGTEVsQlFVa3NRMEZCUXl4alFVRmpMRU5CUVVNc1EwRkJRenRSUVVNNVJDeHRSa0ZCYlVZN1VVRkRia1lzU1VGQlNTeEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRMRFpDUVVFMlFqdFJRVU4yUXl4SlFVRkpMRWRCUVVjc1NVRkJTU3hEUVVGRExFVkJRVVVzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl3eVFrRkJNa0k3VVVGRGFrUXNVMEZCVXl4SFFVRkhMRXRCUVVzc1EwRkJReXhEUVVGRExESkNRVUV5UWp0UlFVTTVReXhOUVVGTkxFZEJRVWNzUTBGQlF5eERRVUZETEVOQlFVTXNLMFZCUVN0Rk8xRkJRek5HTEUxQlFVMHNSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJReXgxUTBGQmRVTTdVVUZEYmtRc1NVRkJTU3hEUVVGRExFVkJRVVVzUTBGQlF5eHRRa0ZCYlVJc1EwRkRka0lzU1VGQlNTeERRVUZETEdkQ1FVRm5RaXhGUVVOeVFpeEpRVUZKTEVWQlEwb3NTVUZCU1N4RlFVTktMRk5CUVZNc1JVRkRWQ3hOUVVGTkxFVkJRMDRzVFVGQlRTeERRVU5VTEVOQlFVTTdVVUZEUml4eFFrRkJjVUk3VVVGRGNrSXNTVUZCU1N4RFFVRkRMRVZCUVVVc1EwRkJReXhUUVVGVExFTkJRMklzU1VGQlNTeERRVUZETEd0Q1FVRnJRaXhGUVVOMlFpeFpRVUZaTEVOQlFVTXNWVUZCVlN4RlFVTjJRaXhaUVVGWkxFTkJRVU1zVjBGQlZ5eERRVU16UWl4RFFVRkRPMUZCUTBZc2MwSkJRWE5DTzFGQlEzUkNMRTFCUVUwc1lVRkJZU3hIUVVGSExFbEJRVWtzUTBGQlF5eEZRVUZGTEVOQlFVTXNVMEZCVXl4RFFVRkRPMUZCUTNoRExFMUJRVTBzUzBGQlN5eEhRVUZITEVOQlFVTXNRMEZCUXp0UlFVTm9RaXhOUVVGTkxFZEJRVWNzUTBGQlF5eERRVUZETzFGQlExZ3NTVUZCU1N4RFFVRkRMRVZCUVVVc1EwRkJReXhWUVVGVkxFTkJRVU1zWVVGQllTeEZRVUZGTEUxQlFVMHNSVUZCUlN4TFFVRkxMRU5CUVVNc1EwRkJRenRKUVVOeVJDeERRVUZETzBsQlJVUXNUVUZCVFN4RFFVRkRMR3RDUVVGclFpeERRVUZETEVsQlFXMUNPMUZCUTNwRExFbEJRVWtzVTBGQlV5eERRVUZETEVWQlFVVXNSVUZCUlR0WlFVTmtMRTlCUVU4c1UwRkJVeXhEUVVGRExFVkJRVVVzUTBGQlF5eHJRa0ZCYTBJc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dFRRVU5vUkR0aFFVRk5PMWxCUTBnc1QwRkJUeXhKUVVGSkxFOUJRVThzUTBGQlZTeEhRVUZITEVWQlFVVTdaMEpCUXpkQ0xFOUJRVThzUzBGQlN5eERRVUZETzFsQlEycENMRU5CUVVNc1EwRkJReXhEUVVGRE8xTkJRMDQ3U1VGRFRDeERRVUZETzBOQlEwbzdPenM3T3pzN096czdPMEZET1ZSRUxHVkJRV1VzV1VGQldTdzJRa0ZCTmtJN1FVRkRlRVE3UVVGRFFUczdPenM3TzFORFJrRTdVMEZEUVRzN1UwRkZRVHRUUVVOQk8xTkJRMEU3VTBGRFFUdFRRVU5CTzFOQlEwRTdVMEZEUVR0VFFVTkJPMU5CUTBFN1UwRkRRVHRUUVVOQk8xTkJRMEU3VTBGRFFUczdVMEZGUVR0VFFVTkJPenRUUVVWQk8xTkJRMEU3VTBGRFFUczdPenM3VlVOMFFrRTdWVUZEUVR0VlFVTkJPMVZCUTBFN1ZVRkRRU3g1UTBGQmVVTXNkME5CUVhkRE8xVkJRMnBHTzFWQlEwRTdWVUZEUVRzN096czdWVU5RUVRzN096czdWVU5CUVR0VlFVTkJPMVZCUTBFN1ZVRkRRU3gxUkVGQmRVUXNhVUpCUVdsQ08xVkJRM2hGTzFWQlEwRXNaMFJCUVdkRUxHRkJRV0U3VlVGRE4wUTdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3TzBGRFRrRXNhMFJCUVd0RU8wRkJSVFpDTzBGQlEzSkNPMEZCWVdwRE8wRkJRekJDTzBGQlEwRTdRVUZEU1R0QlFVTkJPMEZCUTBvN1FVRkRZenRCUVVWRU8wRkJSVTA3UVVGTEwwSTdRVUZEYzBNN1FVRkRjRU03UVVGRE9FVTdRVUZEYUVVN1FVRkRkMEk3UVVGRFVqdEJRVU5HTzBGQlJXTTdRVUZEVmp0QlFVTk5PMEZCU1ROQ08wRkJRelpDTzBGQlF6ZERJaXdpYzI5MWNtTmxjeUk2V3lKM1pXSndZV05yT2k4dlFHVndhV05uWVcxbGN5MXdjeTlzYVdJdGNHbDRaV3h6ZEhKbFlXMXBibWRtY205dWRHVnVaQzExWlRVdU1pOHVMM055WXk5QlJrc3ZRVVpMUTI5dWRISnZiR3hsY2k1MGN5SXNJbmRsWW5CaFkyczZMeTlBWlhCcFkyZGhiV1Z6TFhCekwyeHBZaTF3YVhobGJITjBjbVZoYldsdVoyWnliMjUwWlc1a0xYVmxOUzR5THk0dmMzSmpMME52Ym1acFp5OURiMjVtYVdjdWRITWlMQ0ozWldKd1lXTnJPaTh2UUdWd2FXTm5ZVzFsY3kxd2N5OXNhV0l0Y0dsNFpXeHpkSEpsWVcxcGJtZG1jbTl1ZEdWdVpDMTFaVFV1TWk4dUwzTnlZeTlEYjI1bWFXY3ZVMlYwZEdsdVowSmhjMlV1ZEhNaUxDSjNaV0p3WVdOck9pOHZRR1Z3YVdObllXMWxjeTF3Y3k5c2FXSXRjR2w0Wld4emRISmxZVzFwYm1kbWNtOXVkR1Z1WkMxMVpUVXVNaTh1TDNOeVl5OURiMjVtYVdjdlUyVjBkR2x1WjBac1lXY3VkSE1pTENKM1pXSndZV05yT2k4dlFHVndhV05uWVcxbGN5MXdjeTlzYVdJdGNHbDRaV3h6ZEhKbFlXMXBibWRtY205dWRHVnVaQzExWlRVdU1pOHVMM055WXk5RGIyNW1hV2N2VTJWMGRHbHVaMDUxYldKbGNpNTBjeUlzSW5kbFluQmhZMnM2THk5QVpYQnBZMmRoYldWekxYQnpMMnhwWWkxd2FYaGxiSE4wY21WaGJXbHVaMlp5YjI1MFpXNWtMWFZsTlM0eUx5NHZjM0pqTDBOdmJtWnBaeTlUWlhSMGFXNW5UM0IwYVc5dUxuUnpJaXdpZDJWaWNHRmphem92TDBCbGNHbGpaMkZ0WlhNdGNITXZiR2xpTFhCcGVHVnNjM1J5WldGdGFXNW5abkp2Ym5SbGJtUXRkV1UxTGpJdkxpOXpjbU12UTI5dVptbG5MMU5sZEhScGJtZFVaWGgwTG5Seklpd2lkMlZpY0dGamF6b3ZMMEJsY0dsaloyRnRaWE10Y0hNdmJHbGlMWEJwZUdWc2MzUnlaV0Z0YVc1blpuSnZiblJsYm1RdGRXVTFMakl2TGk5emNtTXZSR0YwWVVOb1lXNXVaV3d2UkdGMFlVTm9ZVzV1Wld4RGIyNTBjbTlzYkdWeUxuUnpJaXdpZDJWaWNHRmphem92TDBCbGNHbGpaMkZ0WlhNdGNITXZiR2xpTFhCcGVHVnNjM1J5WldGdGFXNW5abkp2Ym5SbGJtUXRkV1UxTGpJdkxpOXpjbU12UkdGMFlVTm9ZVzV1Wld3dlJHRjBZVU5vWVc1dVpXeFRaVzVrWlhJdWRITWlMQ0ozWldKd1lXTnJPaTh2UUdWd2FXTm5ZVzFsY3kxd2N5OXNhV0l0Y0dsNFpXeHpkSEpsWVcxcGJtZG1jbTl1ZEdWdVpDMTFaVFV1TWk4dUwzTnlZeTlFWVhSaFEyaGhibTVsYkM5SmJtbDBhV0ZzVTJWMGRHbHVaM011ZEhNaUxDSjNaV0p3WVdOck9pOHZRR1Z3YVdObllXMWxjeTF3Y3k5c2FXSXRjR2w0Wld4emRISmxZVzFwYm1kbWNtOXVkR1Z1WkMxMVpUVXVNaTh1TDNOeVl5OUVZWFJoUTJoaGJtNWxiQzlNWVhSbGJtTjVWR1Z6ZEZKbGMzVnNkSE11ZEhNaUxDSjNaV0p3WVdOck9pOHZRR1Z3YVdObllXMWxjeTF3Y3k5c2FXSXRjR2w0Wld4emRISmxZVzFwYm1kbWNtOXVkR1Z1WkMxMVpUVXVNaTh1TDNOeVl5OUdjbVZsZW1WR2NtRnRaUzlHY21WbGVtVkdjbUZ0WlM1MGN5SXNJbmRsWW5CaFkyczZMeTlBWlhCcFkyZGhiV1Z6TFhCekwyeHBZaTF3YVhobGJITjBjbVZoYldsdVoyWnliMjUwWlc1a0xYVmxOUzR5THk0dmMzSmpMMFp5WldWNlpVWnlZVzFsTDBaeVpXVjZaVVp5WVcxbFEyOXVkSEp2Ykd4bGNpNTBjeUlzSW5kbFluQmhZMnM2THk5QVpYQnBZMmRoYldWekxYQnpMMnhwWWkxd2FYaGxiSE4wY21WaGJXbHVaMlp5YjI1MFpXNWtMWFZsTlM0eUx5NHZjM0pqTDBsdWNIVjBjeTlHWVd0bFZHOTFZMmhEYjI1MGNtOXNiR1Z5TG5Seklpd2lkMlZpY0dGamF6b3ZMMEJsY0dsaloyRnRaWE10Y0hNdmJHbGlMWEJwZUdWc2MzUnlaV0Z0YVc1blpuSnZiblJsYm1RdGRXVTFMakl2TGk5emNtTXZTVzV3ZFhSekwwZGhiV1Z3WVdSRGIyNTBjbTlzYkdWeUxuUnpJaXdpZDJWaWNHRmphem92TDBCbGNHbGpaMkZ0WlhNdGNITXZiR2xpTFhCcGVHVnNjM1J5WldGdGFXNW5abkp2Ym5SbGJtUXRkV1UxTGpJdkxpOXpjbU12U1c1d2RYUnpMMGh2ZG1WeWFXNW5UVzkxYzJWRmRtVnVkSE11ZEhNaUxDSjNaV0p3WVdOck9pOHZRR1Z3YVdObllXMWxjeTF3Y3k5c2FXSXRjR2w0Wld4emRISmxZVzFwYm1kbWNtOXVkR1Z1WkMxMVpUVXVNaTh1TDNOeVl5OUpibkIxZEhNdlNXNXdkWFJEYkdGemMyVnpSbUZqZEc5eWVTNTBjeUlzSW5kbFluQmhZMnM2THk5QVpYQnBZMmRoYldWekxYQnpMMnhwWWkxd2FYaGxiSE4wY21WaGJXbHVaMlp5YjI1MFpXNWtMWFZsTlM0eUx5NHZjM0pqTDBsdWNIVjBjeTlMWlhsaWIyRnlaRU52Ym5SeWIyeHNaWEl1ZEhNaUxDSjNaV0p3WVdOck9pOHZRR1Z3YVdObllXMWxjeTF3Y3k5c2FXSXRjR2w0Wld4emRISmxZVzFwYm1kbWNtOXVkR1Z1WkMxMVpUVXVNaTh1TDNOeVl5OUpibkIxZEhNdlRHOWphMlZrVFc5MWMyVkZkbVZ1ZEhNdWRITWlMQ0ozWldKd1lXTnJPaTh2UUdWd2FXTm5ZVzFsY3kxd2N5OXNhV0l0Y0dsNFpXeHpkSEpsWVcxcGJtZG1jbTl1ZEdWdVpDMTFaVFV1TWk4dUwzTnlZeTlKYm5CMWRITXZUVzkxYzJWQ2RYUjBiMjV6TG5Seklpd2lkMlZpY0dGamF6b3ZMMEJsY0dsaloyRnRaWE10Y0hNdmJHbGlMWEJwZUdWc2MzUnlaV0Z0YVc1blpuSnZiblJsYm1RdGRXVTFMakl2TGk5emNtTXZTVzV3ZFhSekwwMXZkWE5sUTI5dWRISnZiR3hsY2k1MGN5SXNJbmRsWW5CaFkyczZMeTlBWlhCcFkyZGhiV1Z6TFhCekwyeHBZaTF3YVhobGJITjBjbVZoYldsdVoyWnliMjUwWlc1a0xYVmxOUzR5THk0dmMzSmpMMGx1Y0hWMGN5OVRjR1ZqYVdGc1MyVjVRMjlrWlhNdWRITWlMQ0ozWldKd1lXTnJPaTh2UUdWd2FXTm5ZVzFsY3kxd2N5OXNhV0l0Y0dsNFpXeHpkSEpsWVcxcGJtZG1jbTl1ZEdWdVpDMTFaVFV1TWk4dUwzTnlZeTlKYm5CMWRITXZWRzkxWTJoRGIyNTBjbTlzYkdWeUxuUnpJaXdpZDJWaWNHRmphem92TDBCbGNHbGpaMkZ0WlhNdGNITXZiR2xpTFhCcGVHVnNjM1J5WldGdGFXNW5abkp2Ym5SbGJtUXRkV1UxTGpJdkxpOXpjbU12U1c1d2RYUnpMMWhTUjJGdFpYQmhaRU52Ym5SeWIyeHNaWEl1ZEhNaUxDSjNaV0p3WVdOck9pOHZRR1Z3YVdObllXMWxjeTF3Y3k5c2FXSXRjR2w0Wld4emRISmxZVzFwYm1kbWNtOXVkR1Z1WkMxMVpUVXVNaTh1TDNOeVl5OU1iMmRuWlhJdlRHOW5aMlZ5TG5Seklpd2lkMlZpY0dGamF6b3ZMMEJsY0dsaloyRnRaWE10Y0hNdmJHbGlMWEJwZUdWc2MzUnlaV0Z0YVc1blpuSnZiblJsYm1RdGRXVTFMakl2TGk5emNtTXZVR1ZsY2tOdmJtNWxZM1JwYjI1RGIyNTBjbTlzYkdWeUwwRm5aM0psWjJGMFpXUlRkR0YwY3k1MGN5SXNJbmRsWW5CaFkyczZMeTlBWlhCcFkyZGhiV1Z6TFhCekwyeHBZaTF3YVhobGJITjBjbVZoYldsdVoyWnliMjUwWlc1a0xYVmxOUzR5THk0dmMzSmpMMUJsWlhKRGIyNXVaV04wYVc5dVEyOXVkSEp2Ykd4bGNpOURZVzVrYVdSaGRHVlFZV2x5VTNSaGRITXVkSE1pTENKM1pXSndZV05yT2k4dlFHVndhV05uWVcxbGN5MXdjeTlzYVdJdGNHbDRaV3h6ZEhKbFlXMXBibWRtY205dWRHVnVaQzExWlRVdU1pOHVMM055WXk5UVpXVnlRMjl1Ym1WamRHbHZia052Ym5SeWIyeHNaWEl2UTJGdVpHbGtZWFJsVTNSaGRDNTBjeUlzSW5kbFluQmhZMnM2THk5QVpYQnBZMmRoYldWekxYQnpMMnhwWWkxd2FYaGxiSE4wY21WaGJXbHVaMlp5YjI1MFpXNWtMWFZsTlM0eUx5NHZjM0pqTDFCbFpYSkRiMjV1WldOMGFXOXVRMjl1ZEhKdmJHeGxjaTlFWVhSaFEyaGhibTVsYkZOMFlYUnpMblJ6SWl3aWQyVmljR0ZqYXpvdkwwQmxjR2xqWjJGdFpYTXRjSE12YkdsaUxYQnBlR1ZzYzNSeVpXRnRhVzVuWm5KdmJuUmxibVF0ZFdVMUxqSXZMaTl6Y21NdlVHVmxja052Ym01bFkzUnBiMjVEYjI1MGNtOXNiR1Z5TDBsdVltOTFibVJTVkZCVGRHRjBjeTUwY3lJc0luZGxZbkJoWTJzNkx5OUFaWEJwWTJkaGJXVnpMWEJ6TDJ4cFlpMXdhWGhsYkhOMGNtVmhiV2x1WjJaeWIyNTBaVzVrTFhWbE5TNHlMeTR2YzNKakwxQmxaWEpEYjI1dVpXTjBhVzl1UTI5dWRISnZiR3hsY2k5UGRYUkNiM1Z1WkZKVVVGTjBZWFJ6TG5Seklpd2lkMlZpY0dGamF6b3ZMMEJsY0dsaloyRnRaWE10Y0hNdmJHbGlMWEJwZUdWc2MzUnlaV0Z0YVc1blpuSnZiblJsYm1RdGRXVTFMakl2TGk5emNtTXZVR1ZsY2tOdmJtNWxZM1JwYjI1RGIyNTBjbTlzYkdWeUwxQmxaWEpEYjI1dVpXTjBhVzl1UTI5dWRISnZiR3hsY2k1MGN5SXNJbmRsWW5CaFkyczZMeTlBWlhCcFkyZGhiV1Z6TFhCekwyeHBZaTF3YVhobGJITjBjbVZoYldsdVoyWnliMjUwWlc1a0xYVmxOUzR5THk0dmMzSmpMMUJsWlhKRGIyNXVaV04wYVc5dVEyOXVkSEp2Ykd4bGNpOVRaWE56YVc5dVUzUmhkSE11ZEhNaUxDSjNaV0p3WVdOck9pOHZRR1Z3YVdObllXMWxjeTF3Y3k5c2FXSXRjR2w0Wld4emRISmxZVzFwYm1kbWNtOXVkR1Z1WkMxMVpUVXVNaTh1TDNOeVl5OVFaV1Z5UTI5dWJtVmpkR2x2YmtOdmJuUnliMnhzWlhJdlUzUnlaV0Z0VTNSaGRITXVkSE1pTENKM1pXSndZV05yT2k4dlFHVndhV05uWVcxbGN5MXdjeTlzYVdJdGNHbDRaV3h6ZEhKbFlXMXBibWRtY205dWRHVnVaQzExWlRVdU1pOHVMM055WXk5UWFYaGxiRk4wY21WaGJXbHVaeTlRYVhobGJGTjBjbVZoYldsdVp5NTBjeUlzSW5kbFluQmhZMnM2THk5QVpYQnBZMmRoYldWekxYQnpMMnhwWWkxd2FYaGxiSE4wY21WaGJXbHVaMlp5YjI1MFpXNWtMWFZsTlM0eUx5NHZjM0pqTDFWSkwwOXVVMk55WldWdVMyVjVZbTloY21RdWRITWlMQ0ozWldKd1lXTnJPaTh2UUdWd2FXTm5ZVzFsY3kxd2N5OXNhV0l0Y0dsNFpXeHpkSEpsWVcxcGJtZG1jbTl1ZEdWdVpDMTFaVFV1TWk4dUwzTnlZeTlWWlVsdWMzUmhibU5sVFdWemMyRm5aUzlTWlhOd2IyNXpaVU52Ym5SeWIyeHNaWEl1ZEhNaUxDSjNaV0p3WVdOck9pOHZRR1Z3YVdObllXMWxjeTF3Y3k5c2FXSXRjR2w0Wld4emRISmxZVzFwYm1kbWNtOXVkR1Z1WkMxMVpUVXVNaTh1TDNOeVl5OVZaVWx1YzNSaGJtTmxUV1Z6YzJGblpTOVRaVzVrUkdWelkzSnBjSFJ2Y2tOdmJuUnliMnhzWlhJdWRITWlMQ0ozWldKd1lXTnJPaTh2UUdWd2FXTm5ZVzFsY3kxd2N5OXNhV0l0Y0dsNFpXeHpkSEpsWVcxcGJtZG1jbTl1ZEdWdVpDMTFaVFV1TWk4dUwzTnlZeTlWWlVsdWMzUmhibU5sVFdWemMyRm5aUzlUWlc1a1RXVnpjMkZuWlVOdmJuUnliMnhzWlhJdWRITWlMQ0ozWldKd1lXTnJPaTh2UUdWd2FXTm5ZVzFsY3kxd2N5OXNhV0l0Y0dsNFpXeHpkSEpsWVcxcGJtZG1jbTl1ZEdWdVpDMTFaVFV1TWk4dUwzTnlZeTlWWlVsdWMzUmhibU5sVFdWemMyRm5aUzlUZEhKbFlXMU5aWE56WVdkbFEyOXVkSEp2Ykd4bGNpNTBjeUlzSW5kbFluQmhZMnM2THk5QVpYQnBZMmRoYldWekxYQnpMMnhwWWkxd2FYaGxiSE4wY21WaGJXbHVaMlp5YjI1MFpXNWtMWFZsTlM0eUx5NHZjM0pqTDFWbFNXNXpkR0Z1WTJWTlpYTnpZV2RsTDFSdlUzUnlaV0Z0WlhKTlpYTnpZV2RsYzBOdmJuUnliMnhzWlhJdWRITWlMQ0ozWldKd1lXTnJPaTh2UUdWd2FXTm5ZVzFsY3kxd2N5OXNhV0l0Y0dsNFpXeHpkSEpsWVcxcGJtZG1jbTl1ZEdWdVpDMTFaVFV1TWk4dUwzTnlZeTlWWlVsdWMzUmhibU5sVFdWemMyRm5aUzlVZDI5WFlYbE5ZWEF1ZEhNaUxDSjNaV0p3WVdOck9pOHZRR1Z3YVdObllXMWxjeTF3Y3k5c2FXSXRjR2w0Wld4emRISmxZVzFwYm1kbWNtOXVkR1Z1WkMxMVpUVXVNaTh1TDNOeVl5OVZkR2xzTDBOdmIzSmthVzVoZEdWRGIyNTJaWEowWlhJdWRITWlMQ0ozWldKd1lXTnJPaTh2UUdWd2FXTm5ZVzFsY3kxd2N5OXNhV0l0Y0dsNFpXeHpkSEpsWVcxcGJtZG1jbTl1ZEdWdVpDMTFaVFV1TWk4dUwzTnlZeTlWZEdsc0wwVjJaVzUwUlcxcGRIUmxjaTUwY3lJc0luZGxZbkJoWTJzNkx5OUFaWEJwWTJkaGJXVnpMWEJ6TDJ4cFlpMXdhWGhsYkhOMGNtVmhiV2x1WjJaeWIyNTBaVzVrTFhWbE5TNHlMeTR2YzNKakwxVjBhV3d2UlhabGJuUk1hWE4wWlc1bGNsUnlZV05yWlhJdWRITWlMQ0ozWldKd1lXTnJPaTh2UUdWd2FXTm5ZVzFsY3kxd2N5OXNhV0l0Y0dsNFpXeHpkSEpsWVcxcGJtZG1jbTl1ZEdWdVpDMTFaVFV1TWk4dUwzTnlZeTlWZEdsc0wwWnBiR1ZWZEdsc0xuUnpJaXdpZDJWaWNHRmphem92TDBCbGNHbGpaMkZ0WlhNdGNITXZiR2xpTFhCcGVHVnNjM1J5WldGdGFXNW5abkp2Ym5SbGJtUXRkV1UxTGpJdkxpOXpjbU12VlhScGJDOVhaV0pIVEZWMGFXeHpMblJ6SWl3aWQyVmljR0ZqYXpvdkwwQmxjR2xqWjJGdFpYTXRjSE12YkdsaUxYQnBlR1ZzYzNSeVpXRnRhVzVuWm5KdmJuUmxibVF0ZFdVMUxqSXZMaTl6Y21NdlZYUnBiQzlYWldKWVVsVjBhV3h6TG5Seklpd2lkMlZpY0dGamF6b3ZMMEJsY0dsaloyRnRaWE10Y0hNdmJHbGlMWEJwZUdWc2MzUnlaV0Z0YVc1blpuSnZiblJsYm1RdGRXVTFMakl2TGk5emNtTXZWbWxrWlc5UWJHRjVaWEl2VTNSeVpXRnRRMjl1ZEhKdmJHeGxjaTUwY3lJc0luZGxZbkJoWTJzNkx5OUFaWEJwWTJkaGJXVnpMWEJ6TDJ4cFlpMXdhWGhsYkhOMGNtVmhiV2x1WjJaeWIyNTBaVzVrTFhWbE5TNHlMeTR2YzNKakwxWnBaR1Z2VUd4aGVXVnlMMVpwWkdWdlVHeGhlV1Z5TG5Seklpd2lkMlZpY0dGamF6b3ZMMEJsY0dsaloyRnRaWE10Y0hNdmJHbGlMWEJwZUdWc2MzUnlaV0Z0YVc1blpuSnZiblJsYm1RdGRXVTFMakl2TGk5emNtTXZWMlZpVW5SalVHeGhlV1Z5TDFkbFlsSjBZMUJzWVhsbGNrTnZiblJ5YjJ4c1pYSXVkSE1pTENKM1pXSndZV05yT2k4dlFHVndhV05uWVcxbGN5MXdjeTlzYVdJdGNHbDRaV3h6ZEhKbFlXMXBibWRtY205dWRHVnVaQzExWlRVdU1pOHVMM055WXk5WFpXSlRiMk5yWlhSekwwMWxjM05oWjJWU1pXTmxhWFpsTG5Seklpd2lkMlZpY0dGamF6b3ZMMEJsY0dsaloyRnRaWE10Y0hNdmJHbGlMWEJwZUdWc2MzUnlaV0Z0YVc1blpuSnZiblJsYm1RdGRXVTFMakl2TGk5emNtTXZWMlZpVTI5amEyVjBjeTlOWlhOellXZGxVMlZ1WkM1MGN5SXNJbmRsWW5CaFkyczZMeTlBWlhCcFkyZGhiV1Z6TFhCekwyeHBZaTF3YVhobGJITjBjbVZoYldsdVoyWnliMjUwWlc1a0xYVmxOUzR5THk0dmMzSmpMMWRsWWxOdlkydGxkSE12VTJsbmJtRnNiR2x1WjFCeWIzUnZZMjlzTG5Seklpd2lkMlZpY0dGamF6b3ZMMEJsY0dsaloyRnRaWE10Y0hNdmJHbGlMWEJwZUdWc2MzUnlaV0Z0YVc1blpuSnZiblJsYm1RdGRXVTFMakl2TGk5emNtTXZWMlZpVTI5amEyVjBjeTlYWldKVGIyTnJaWFJEYjI1MGNtOXNiR1Z5TG5Seklpd2lkMlZpY0dGamF6b3ZMMEJsY0dsaloyRnRaWE10Y0hNdmJHbGlMWEJwZUdWc2MzUnlaV0Z0YVc1blpuSnZiblJsYm1RdGRXVTFMakl2TGk5emNtTXZWMlZpV0ZJdlYyVmlXRkpEYjI1MGNtOXNiR1Z5TG5Seklpd2lkMlZpY0dGamF6b3ZMMEJsY0dsaloyRnRaWE10Y0hNdmJHbGlMWEJwZUdWc2MzUnlaV0Z0YVc1blpuSnZiblJsYm1RdGRXVTFMakl2WlhoMFpYSnVZV3dnYlc5a2RXeGxJRndpYzJSd1hDSWlMQ0ozWldKd1lXTnJPaTh2UUdWd2FXTm5ZVzFsY3kxd2N5OXNhV0l0Y0dsNFpXeHpkSEpsWVcxcGJtZG1jbTl1ZEdWdVpDMTFaVFV1TWk5M1pXSndZV05yTDJKdmIzUnpkSEpoY0NJc0luZGxZbkJoWTJzNkx5OUFaWEJwWTJkaGJXVnpMWEJ6TDJ4cFlpMXdhWGhsYkhOMGNtVmhiV2x1WjJaeWIyNTBaVzVrTFhWbE5TNHlMM2RsWW5CaFkyc3ZjblZ1ZEdsdFpTOWtaV1pwYm1VZ2NISnZjR1Z5ZEhrZ1oyVjBkR1Z5Y3lJc0luZGxZbkJoWTJzNkx5OUFaWEJwWTJkaGJXVnpMWEJ6TDJ4cFlpMXdhWGhsYkhOMGNtVmhiV2x1WjJaeWIyNTBaVzVrTFhWbE5TNHlMM2RsWW5CaFkyc3ZjblZ1ZEdsdFpTOW9ZWE5QZDI1UWNtOXdaWEowZVNCemFHOXlkR2hoYm1RaUxDSjNaV0p3WVdOck9pOHZRR1Z3YVdObllXMWxjeTF3Y3k5c2FXSXRjR2w0Wld4emRISmxZVzFwYm1kbWNtOXVkR1Z1WkMxMVpUVXVNaTkzWldKd1lXTnJMM0oxYm5ScGJXVXZiV0ZyWlNCdVlXMWxjM0JoWTJVZ2IySnFaV04wSWl3aWQyVmljR0ZqYXpvdkwwQmxjR2xqWjJGdFpYTXRjSE12YkdsaUxYQnBlR1ZzYzNSeVpXRnRhVzVuWm5KdmJuUmxibVF0ZFdVMUxqSXZMaTl6Y21NdmNHbDRaV3h6ZEhKbFlXMXBibWRtY205dWRHVnVaQzUwY3lKZExDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SXZMeUJEYjNCNWNtbG5hSFFnUlhCcFl5QkhZVzFsY3l3Z1NXNWpMaUJCYkd3Z1VtbG5hSFJ6SUZKbGMyVnlkbVZrTGx4dVhHNXBiWEJ2Y25RZ2V5QkRiMjVtYVdjc0lFWnNZV2R6TENCT2RXMWxjbWxqVUdGeVlXMWxkR1Z5Y3lCOUlHWnliMjBnSnk0dUwwTnZibVpwWnk5RGIyNW1hV2NuTzF4dWFXMXdiM0owSUhzZ1RHOW5aMlZ5SUgwZ1puSnZiU0FuTGk0dlRHOW5aMlZ5TDB4dloyZGxjaWM3WEc1cGJYQnZjblFnZXlCUWFYaGxiRk4wY21WaGJXbHVaeUI5SUdaeWIyMGdKeTR1TDFCcGVHVnNVM1J5WldGdGFXNW5MMUJwZUdWc1UzUnlaV0Z0YVc1bkp6dGNibWx0Y0c5eWRDQjdYRzRnSUNBZ1FXWnJWR2x0WldSUGRYUkZkbVZ1ZEN4Y2JpQWdJQ0JCWm10WFlYSnVhVzVuUVdOMGFYWmhkR1ZGZG1WdWRDeGNiaUFnSUNCQlptdFhZWEp1YVc1blJHVmhZM1JwZG1GMFpVVjJaVzUwTEZ4dUlDQWdJRUZtYTFkaGNtNXBibWRWY0dSaGRHVkZkbVZ1ZEZ4dWZTQm1jbTl0SUNjdUxpOVZkR2xzTDBWMlpXNTBSVzFwZEhSbGNpYzdYRzVjYm1WNGNHOXlkQ0JqYkdGemN5QkJSa3REYjI1MGNtOXNiR1Z5SUh0Y2JpQWdJQ0F2THlCMGFXMWxJRzkxZENCc2IyZHBZeUJrWlhSaGFXeHpYRzRnSUNBZ1kyeHZjMlZVYVcxbGIzVjBJRDBnTVRBN1hHNGdJQ0FnWVdOMGFYWmxJRDBnWm1Gc2MyVTdYRzRnSUNBZ1kyOTFiblJrYjNkdVFXTjBhWFpsSUQwZ1ptRnNjMlU3WEc0Z0lDQWdkMkZ5YmxScGJXVnlPaUJTWlhSMWNtNVVlWEJsUEhSNWNHVnZaaUJ6WlhSVWFXMWxiM1YwUGlBOUlIVnVaR1ZtYVc1bFpEdGNiaUFnSUNCamIzVnVkRVJ2ZDI0Z1BTQXdPMXh1SUNBZ0lHTnZkVzUwUkc5M2JsUnBiV1Z5T2lCU1pYUjFjbTVVZVhCbFBIUjVjR1Z2WmlCelpYUkpiblJsY25aaGJENGdQU0IxYm1SbFptbHVaV1E3WEc0Z0lDQWdZMjl1Wm1sbk9pQkRiMjVtYVdjN1hHNGdJQ0FnY0dsNFpXeFRkSEpsWVcxcGJtYzZJRkJwZUdWc1UzUnlaV0Z0YVc1bk8xeHVJQ0FnSUc5dVJHbHpiV2x6YzBGbWF6b2dLQ2tnUFQ0Z2RtOXBaRHRjYmx4dUlDQWdJRzl1UVVaTFZHbHRaV1JQZFhSRFlXeHNZbUZqYXpvZ0tDa2dQVDRnZG05cFpEdGNibHh1SUNBZ0lHTnZibk4wY25WamRHOXlLRnh1SUNBZ0lDQWdJQ0JqYjI1bWFXYzZJRU52Ym1acFp5eGNiaUFnSUNBZ0lDQWdjR2w0Wld4VGRISmxZVzFwYm1jNklGQnBlR1ZzVTNSeVpXRnRhVzVuTEZ4dUlDQWdJQ0FnSUNCdmJrUnBjMjFwYzNOQlptczZJQ2dwSUQwK0lIWnZhV1JjYmlBZ0lDQXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWpiMjVtYVdjZ1BTQmpiMjVtYVdjN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Y0dsNFpXeFRkSEpsWVcxcGJtY2dQU0J3YVhobGJGTjBjbVZoYldsdVp6dGNiaUFnSUNBZ0lDQWdkR2hwY3k1dmJrUnBjMjFwYzNOQlptc2dQU0J2YmtScGMyMXBjM05CWm1zN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YjI1QlJrdFVhVzFsWkU5MWRFTmhiR3hpWVdOcklEMGdLQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVzYjJjb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0owRkdTeUIwYVcxbFpDQnZkWFFzSUdScFpDQjViM1VnZDJGdWRDQjBieUJ2ZG1WeWNtbGtaU0IwYUdseklHTmhiR3hpWVdOclB5ZGNiaUFnSUNBZ0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lIMDdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dWR2hsSUcxbGRHaHZaSE1nZEdoaGRDQnZZMk4xY2lCM2FHVnVJR0Z1SUdGbWF5QmxkbVZ1ZENCc2FYTjBaVzVsY2lCcGN5QmpiR2xqYTJWa1hHNGdJQ0FnSUNvdlhHNGdJQ0FnYjI1QlptdERiR2xqYXlncElIdGNiaUFnSUNBZ0lDQWdZMnhsWVhKSmJuUmxjblpoYkNoMGFHbHpMbU52ZFc1MFJHOTNibFJwYldWeUtUdGNibHh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVoWTNScGRtVWdmSHdnZEdocGN5NWpiM1Z1ZEdSdmQyNUJZM1JwZG1VcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjM1JoY25SQlptdFhZWEp1YVc1blZHbHRaWElvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWNHbDRaV3hUZEhKbFlXMXBibWN1WkdsemNHRjBZMmhGZG1WdWRDaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnVaWGNnUVdaclYyRnlibWx1WjBSbFlXTjBhWFpoZEdWRmRtVnVkQ2dwWEc0Z0lDQWdJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVTNSaGNuUWdkR2hsSUhkaGNtNXBibWNnZEdsdFpYSWdhV1lnWVNCMGFXMWxiM1YwSUdseklITmxkQ0JuY21WaGRHVnlJSFJvWVhRZ01DQnpaV052Ym1SelhHNGdJQ0FnSUNvdlhHNGdJQ0FnYzNSaGNuUkJabXRYWVhKdWFXNW5WR2x0WlhJb0tTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVkyOXVabWxuTG1kbGRFNTFiV1Z5YVdOVFpYUjBhVzVuVm1Gc2RXVW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdUblZ0WlhKcFkxQmhjbUZ0WlhSbGNuTXVRVVpMVkdsdFpXOTFkRk5sWTNOY2JpQWdJQ0FnSUNBZ0lDQWdJQ2tnUGlBd0lDWW1YRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbU52Ym1acFp5NXBjMFpzWVdkRmJtRmliR1ZrS0Vac1lXZHpMa0ZHUzBSbGRHVmpkR2x2YmlsY2JpQWdJQ0FnSUNBZ0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbUZqZEdsMlpTQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtRmpkR2wyWlNBOUlHWmhiSE5sTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIUm9hWE11Y21WelpYUkJabXRYWVhKdWFXNW5WR2x0WlhJb0tUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlRkRzl3SUhSb1pTQmhabXNnZDJGeWJtbHVaeUIwYVcxbGNseHVJQ0FnSUNBcUwxeHVJQ0FnSUhOMGIzQkJabXRYWVhKdWFXNW5WR2x0WlhJb0tTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVlXTjBhWFpsSUQwZ1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZMjkxYm5Sa2IzZHVRV04wYVhabElEMGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lHTnNaV0Z5VkdsdFpXOTFkQ2gwYUdsekxuZGhjbTVVYVcxbGNpazdYRzRnSUNBZ0lDQWdJR05zWldGeVNXNTBaWEoyWVd3b2RHaHBjeTVqYjNWdWRFUnZkMjVVYVcxbGNpazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dVR0YxYzJVZ2RHaGxJSFJwYldWeUlIZG9hV05vSUhkb1pXNGdaV3hoY0hObFpDQjNhV3hzSUhkaGNtNGdkR2hsSUhWelpYSWdkR2hsZVNCaGNtVWdhVzVoWTNScGRtVXVYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2NHRjFjMlZCWm10WFlYSnVhVzVuVkdsdFpYSW9LU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZV04wYVhabElEMGdabUZzYzJVN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1NXWWdkR2hsSUhWelpYSWdhVzUwWlhKaFkzUnpJSFJvWlc0Z2NtVnpaWFFnZEdobElIZGhjbTVwYm1jZ2RHbHRaWEl1WEc0Z0lDQWdJQ292WEc0Z0lDQWdjbVZ6WlhSQlptdFhZWEp1YVc1blZHbHRaWElvS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxtRmpkR2wyWlNBbUppQjBhR2x6TG1OdmJtWnBaeTVwYzBac1lXZEZibUZpYkdWa0tFWnNZV2R6TGtGR1MwUmxkR1ZqZEdsdmJpa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnNaV0Z5VkdsdFpXOTFkQ2gwYUdsekxuZGhjbTVVYVcxbGNpazdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbmRoY201VWFXMWxjaUE5SUhObGRGUnBiV1Z2ZFhRb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tDa2dQVDRnZEdocGN5NWhZM1JwZG1GMFpVRm1hMFYyWlc1MEtDa3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1amIyNW1hV2N1WjJWMFRuVnRaWEpwWTFObGRIUnBibWRXWVd4MVpTaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVG5WdFpYSnBZMUJoY21GdFpYUmxjbk11UVVaTFZHbHRaVzkxZEZObFkzTmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXBJQ29nTVRBd01GeHVJQ0FnSUNBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGTm9iM2NnZEdobElFRkdTeUJ2ZG1WeWJHRjVJR0Z1WkNCaVpXZHBiaUIwYUdVZ1kyOTFiblJFYjNkdVhHNGdJQ0FnSUNvdlhHNGdJQ0FnWVdOMGFYWmhkR1ZCWm10RmRtVnVkQ2dwSUh0Y2JpQWdJQ0FnSUNBZ0x5OGdVR0YxYzJVZ2RHaGxJSFJwYldWeUlIZG9hV3hsSUhSb1pTQjFjMlZ5SUdseklHeHZiMnRwYm1jZ1lYUWdkR2hsSUdsdVlXTjBhWFpwZEhrZ2QyRnlibWx1WnlCdmRtVnliR0Y1WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjR0YxYzJWQlptdFhZWEp1YVc1blZHbHRaWElvS1R0Y2JseHVJQ0FnSUNBZ0lDQXZMeUJwYm5OMFlXNTBhV0YwWlNCaElHNWxkeUJ2ZG1WeWJHRjVYRzRnSUNBZ0lDQWdJSFJvYVhNdWNHbDRaV3hUZEhKbFlXMXBibWN1WkdsemNHRjBZMmhGZG1WdWRDaGNiaUFnSUNBZ0lDQWdJQ0FnSUc1bGR5QkJabXRYWVhKdWFXNW5RV04wYVhaaGRHVkZkbVZ1ZENoN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOTFiblJFYjNkdU9pQjBhR2x6TG1OdmRXNTBSRzkzYml4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa2FYTnRhWE56UVdack9pQjBhR2x6TG05dVJHbHpiV2x6YzBGbWExeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNsY2JpQWdJQ0FnSUNBZ0tUdGNibHh1SUNBZ0lDQWdJQ0F2THlCMWNHUmhkR1VnYjNWeUlHTnZkVzUwUkc5M2JpQjBhVzFsY2lCaGJtUWdiM1psY214aGVTQmpiMjUwWlc1MGMxeHVJQ0FnSUNBZ0lDQjBhR2x6TG1OdmRXNTBSRzkzYmlBOUlIUm9hWE11WTJ4dmMyVlVhVzFsYjNWME8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1OdmRXNTBaRzkzYmtGamRHbDJaU0E5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJSFJvYVhNdWNHbDRaV3hUZEhKbFlXMXBibWN1WkdsemNHRjBZMmhGZG1WdWRDaGNiaUFnSUNBZ0lDQWdJQ0FnSUc1bGR5QkJabXRYWVhKdWFXNW5WWEJrWVhSbFJYWmxiblFvZXlCamIzVnVkRVJ2ZDI0NklIUm9hWE11WTI5MWJuUkViM2R1SUgwcFhHNGdJQ0FnSUNBZ0lDazdYRzVjYmlBZ0lDQWdJQ0FnTHk4Z2FXWWdkMlVnWVhKbElHbHVJR3h2WTJ0bFpDQnRiM1Z6WlNCbGVHbDBJSEJ2YVc1MFpYSnNiMk5yWEc0Z0lDQWdJQ0FnSUdsbUlDZ2hkR2hwY3k1amIyNW1hV2N1YVhOR2JHRm5SVzVoWW14bFpDaEdiR0ZuY3k1SWIzWmxjbWx1WjAxdmRYTmxUVzlrWlNrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklHMXBibTl5SUdoaFkyc2dkRzhnWVd4c1pYWnBZWFJsSUdsdmN5QnViM1FnYzNWd2NHOXlkR2x1WnlCd2IybHVkR1Z5Ykc5amExeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHUnZZM1Z0Wlc1MExtVjRhWFJRYjJsdWRHVnlURzlqYXlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUnZZM1Z0Wlc1MExtVjRhWFJRYjJsdWRHVnlURzlqYXlncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdMeThnY21WelpYUWdiM1Z5SUdOdmRXNTBSRzkzYmlCcGJuUmxjblpoYkNCaFkyTnZjbVJwYm1kc2VWeHVJQ0FnSUNBZ0lDQjBhR2x6TG1OdmRXNTBSRzkzYmxScGJXVnlJRDBnYzJWMFNXNTBaWEoyWVd3b0tDa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1amIzVnVkRVJ2ZDI0dExUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG1OdmRXNTBSRzkzYmlBOVBTQXdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1ZHaGxJSFZ6WlhJZ1ptRnBiR1ZrSUhSdklHTnNhV05ySUhOdklHaHBaR1VnZEdobElHOTJaWEpzWVhrZ1lXNWtJR1JwYzJOdmJtNWxZM1FnZEdobGJTNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5CcGVHVnNVM1J5WldGdGFXNW5MbVJwYzNCaGRHTm9SWFpsYm5Rb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzVsZHlCQlptdFVhVzFsWkU5MWRFVjJaVzUwS0NsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YjI1QlJrdFVhVzFsWkU5MWRFTmhiR3hpWVdOcktDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdURzluWjJWeUxreHZaeWhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1RHOW5aMlZ5TGtkbGRGTjBZV05yVkhKaFkyVW9LU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0oxbHZkU0JvWVhabElHSmxaVzRnWkdselkyOXVibVZqZEdWa0lHUjFaU0IwYnlCcGJtRmpkR2wyYVhSNUoxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDazdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCemQybDBZMmdnYjJabUlIUm9aU0JoWm1zZ1ptVmhkSFZ5WlNCaGN5QnpkSEpsWVcwZ2FHRnpJR05zYjNObFpGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YzNSdmNFRm1hMWRoY201cGJtZFVhVzFsY2lncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuQnBlR1ZzVTNSeVpXRnRhVzVuTG1ScGMzQmhkR05vUlhabGJuUW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc1bGR5QkJabXRYWVhKdWFXNW5WWEJrWVhSbFJYWmxiblFvZXlCamIzVnVkRVJ2ZDI0NklIUm9hWE11WTI5MWJuUkViM2R1SUgwcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZTd2dNVEF3TUNrN1hHNGdJQ0FnZlZ4dWZWeHVJaXdpTHk4Z1EyOXdlWEpwWjJoMElFVndhV01nUjJGdFpYTXNJRWx1WXk0Z1FXeHNJRkpwWjJoMGN5QlNaWE5sY25abFpDNWNibHh1YVcxd2IzSjBJSHNnVEc5bloyVnlJSDBnWm5KdmJTQW5MaTR2VEc5bloyVnlMMHh2WjJkbGNpYzdYRzVwYlhCdmNuUWdleUJUWlhSMGFXNW5SbXhoWnlCOUlHWnliMjBnSnk0dlUyVjBkR2x1WjBac1lXY25PMXh1YVcxd2IzSjBJSHNnVTJWMGRHbHVaMDUxYldKbGNpQjlJR1p5YjIwZ0p5NHZVMlYwZEdsdVowNTFiV0psY2ljN1hHNXBiWEJ2Y25RZ2V5QlRaWFIwYVc1blZHVjRkQ0I5SUdaeWIyMGdKeTR2VTJWMGRHbHVaMVJsZUhRbk8xeHVhVzF3YjNKMElIc2dVMlYwZEdsdVowOXdkR2x2YmlCOUlHWnliMjBnSnk0dlUyVjBkR2x1WjA5d2RHbHZiaWM3WEc1cGJYQnZjblFnZXlCRmRtVnVkRVZ0YVhSMFpYSXNJRk5sZEhScGJtZHpRMmhoYm1kbFpFVjJaVzUwSUgwZ1puSnZiU0FuTGk0dlZYUnBiQzlGZG1WdWRFVnRhWFIwWlhJbk8xeHVhVzF3YjNKMElIc2dVMlYwZEdsdVowSmhjMlVnZlNCbWNtOXRJQ2N1TDFObGRIUnBibWRDWVhObEp6dGNibHh1THlvcVhHNGdLaUJCSUdOdmJHeGxZM1JwYjI0Z2IyWWdabXhoWjNNZ2RHaGhkQ0JqWVc0Z1ltVWdkRzluWjJ4bFpDQmhibVFnWVhKbElHTnZjbVVnZEc4Z1lXeHNJRkJwZUdWc0lGTjBjbVZoYldsdVp5QmxlSEJsY21sbGJtTmxjeTVjYmlBcUlGUm9aWE5sSUdGeVpTQjFjMlZrSUdsdUlIUm9aU0JnUTI5dVptbG5Ma1pzWVdkellDQnRZWEF1WEc0Z0tpOWNibVY0Y0c5eWRDQmpiR0Z6Y3lCR2JHRm5jeUI3WEc0Z0lDQWdjM1JoZEdsaklFRjFkRzlEYjI1dVpXTjBJRDBnSjBGMWRHOURiMjV1WldOMEp5QmhjeUJqYjI1emREdGNiaUFnSUNCemRHRjBhV01nUVhWMGIxQnNZWGxXYVdSbGJ5QTlJQ2RCZFhSdlVHeGhlVlpwWkdWdkp5QmhjeUJqYjI1emREdGNiaUFnSUNCemRHRjBhV01nUVVaTFJHVjBaV04wYVc5dUlEMGdKMVJwYldWdmRYUkpaa2xrYkdVbklHRnpJR052Ym5OME8xeHVJQ0FnSUhOMFlYUnBZeUJDY205M2MyVnlVMlZ1WkU5bVptVnlJRDBnSjA5bVptVnlWRzlTWldObGFYWmxKeUJoY3lCamIyNXpkRHRjYmlBZ0lDQnpkR0YwYVdNZ1NHOTJaWEpwYm1kTmIzVnpaVTF2WkdVZ1BTQW5TRzkyWlhKcGJtZE5iM1Z6WlNjZ1lYTWdZMjl1YzNRN1hHNGdJQ0FnYzNSaGRHbGpJRVp2Y21ObFRXOXViMEYxWkdsdklEMGdKMFp2Y21ObFRXOXViMEYxWkdsdkp5QmhjeUJqYjI1emREdGNiaUFnSUNCemRHRjBhV01nUm05eVkyVlVWVkpPSUQwZ0owWnZjbU5sVkZWU1RpY2dZWE1nWTI5dWMzUTdYRzRnSUNBZ2MzUmhkR2xqSUVaaGEyVk5iM1Z6WlZkcGRHaFViM1ZqYUdWeklEMGdKMFpoYTJWTmIzVnpaVmRwZEdoVWIzVmphR1Z6SnlCaGN5QmpiMjV6ZER0Y2JpQWdJQ0J6ZEdGMGFXTWdTWE5SZFdGc2FYUjVRMjl1ZEhKdmJHeGxjaUE5SUNkRGIyNTBjbTlzYzFGMVlXeHBkSGtuSUdGeklHTnZibk4wTzF4dUlDQWdJSE4wWVhScFl5Qk5ZWFJqYUZacFpYZHdiM0owVW1WemIyeDFkR2x2YmlBOUlDZE5ZWFJqYUZacFpYZHdiM0owVW1Wekp5QmhjeUJqYjI1emREdGNiaUFnSUNCemRHRjBhV01nVUhKbFptVnlVMFpWSUQwZ0ozQnlaV1psY2xOR1ZTY2dZWE1nWTI5dWMzUTdYRzRnSUNBZ2MzUmhkR2xqSUZOMFlYSjBWbWxrWlc5TmRYUmxaQ0E5SUNkVGRHRnlkRlpwWkdWdlRYVjBaV1FuSUdGeklHTnZibk4wTzF4dUlDQWdJSE4wWVhScFl5QlRkWEJ3Y21WemMwSnliM2R6WlhKTFpYbHpJRDBnSjFOMWNIQnlaWE56UW5KdmQzTmxja3RsZVhNbklHRnpJR052Ym5OME8xeHVJQ0FnSUhOMFlYUnBZeUJWYzJWTmFXTWdQU0FuVlhObFRXbGpKeUJoY3lCamIyNXpkRHRjYmlBZ0lDQnpkR0YwYVdNZ1MyVjVZbTloY21SSmJuQjFkQ0E5SUNkTFpYbGliMkZ5WkVsdWNIVjBKeUJoY3lCamIyNXpkRHRjYmlBZ0lDQnpkR0YwYVdNZ1RXOTFjMlZKYm5CMWRDQTlJQ2ROYjNWelpVbHVjSFYwSnlCaGN5QmpiMjV6ZER0Y2JpQWdJQ0J6ZEdGMGFXTWdWRzkxWTJoSmJuQjFkQ0E5SUNkVWIzVmphRWx1Y0hWMEp5QmhjeUJqYjI1emREdGNiaUFnSUNCemRHRjBhV01nUjJGdFpYQmhaRWx1Y0hWMElEMGdKMGRoYldWd1lXUkpibkIxZENjZ1lYTWdZMjl1YzNRN1hHNGdJQ0FnYzNSaGRHbGpJRmhTUTI5dWRISnZiR3hsY2tsdWNIVjBJRDBnSjFoU1EyOXVkSEp2Ykd4bGNrbHVjSFYwSnlCaGN5QmpiMjV6ZER0Y2JuMWNibHh1Wlhod2IzSjBJSFI1Y0dVZ1JteGhaM05MWlhseklEMGdSWGhqYkhWa1pUeHJaWGx2WmlCMGVYQmxiMllnUm14aFozTXNJQ2R3Y205MGIzUjVjR1VuUGp0Y2JtVjRjRzl5ZENCMGVYQmxJRVpzWVdkelNXUnpJRDBnZEhsd1pXOW1JRVpzWVdkelcwWnNZV2R6UzJWNWMxMDdYRzVjYm1OdmJuTjBJR2x6Um14aFowbGtJRDBnS0dsa09pQnpkSEpwYm1jcE9pQnBaQ0JwY3lCR2JHRm5jMGxrY3lBOVBseHVJQ0FnSUU5aWFtVmpkQzVuWlhSUGQyNVFjbTl3WlhKMGVVNWhiV1Z6S0Vac1lXZHpLUzV6YjIxbEtGeHVJQ0FnSUNBZ0lDQW9ibUZ0WlRvZ1JteGhaM05MWlhsektTQTlQaUJHYkdGbmMxdHVZVzFsWFNBOVBUMGdhV1JjYmlBZ0lDQXBPMXh1WEc0dktpcGNiaUFxSUVFZ1kyOXNiR1ZqZEdsdmJpQnZaaUJ1ZFcxbGNtbGpJSEJoY21GdFpYUmxjbk1nZEdoaGRDQmhjbVVnWTI5eVpTQjBieUJoYkd3Z1VHbDRaV3dnVTNSeVpXRnRhVzVuSUdWNGNHVnlhV1Z1WTJWekxseHVJQ3BjYmlBcUwxeHVaWGh3YjNKMElHTnNZWE56SUU1MWJXVnlhV05RWVhKaGJXVjBaWEp6SUh0Y2JpQWdJQ0J6ZEdGMGFXTWdRVVpMVkdsdFpXOTFkRk5sWTNNZ1BTQW5RVVpMVkdsdFpXOTFkQ2NnWVhNZ1kyOXVjM1E3WEc0Z0lDQWdjM1JoZEdsaklFMXBibEZRSUQwZ0owMXBibEZRSnlCaGN5QmpiMjV6ZER0Y2JpQWdJQ0J6ZEdGMGFXTWdUV0Y0VVZBZ1BTQW5UV0Y0VVZBbklHRnpJR052Ym5OME8xeHVJQ0FnSUhOMFlYUnBZeUJYWldKU1ZFTkdVRk1nUFNBblYyVmlVbFJEUmxCVEp5QmhjeUJqYjI1emREdGNiaUFnSUNCemRHRjBhV01nVjJWaVVsUkRUV2x1UW1sMGNtRjBaU0E5SUNkWFpXSlNWRU5OYVc1Q2FYUnlZWFJsSnlCaGN5QmpiMjV6ZER0Y2JpQWdJQ0J6ZEdGMGFXTWdWMlZpVWxSRFRXRjRRbWwwY21GMFpTQTlJQ2RYWldKU1ZFTk5ZWGhDYVhSeVlYUmxKeUJoY3lCamIyNXpkRHRjYmlBZ0lDQnpkR0YwYVdNZ1RXRjRVbVZqYjI1dVpXTjBRWFIwWlcxd2RITWdQU0FuVFdGNFVtVmpiMjV1WldOMFFYUjBaVzF3ZEhNbklHRnpJR052Ym5OME8xeHVmVnh1WEc1bGVIQnZjblFnZEhsd1pTQk9kVzFsY21salVHRnlZVzFsZEdWeWMwdGxlWE1nUFNCRmVHTnNkV1JsUEZ4dUlDQWdJR3RsZVc5bUlIUjVjR1Z2WmlCT2RXMWxjbWxqVUdGeVlXMWxkR1Z5Y3l4Y2JpQWdJQ0FuY0hKdmRHOTBlWEJsSjF4dVBqdGNibVY0Y0c5eWRDQjBlWEJsSUU1MWJXVnlhV05RWVhKaGJXVjBaWEp6U1dSeklEMWNiaUFnSUNCMGVYQmxiMllnVG5WdFpYSnBZMUJoY21GdFpYUmxjbk5iVG5WdFpYSnBZMUJoY21GdFpYUmxjbk5MWlhselhUdGNibHh1WTI5dWMzUWdhWE5PZFcxbGNtbGpTV1FnUFNBb2FXUTZJSE4wY21sdVp5azZJR2xrSUdseklFNTFiV1Z5YVdOUVlYSmhiV1YwWlhKelNXUnpJRDArWEc0Z0lDQWdUMkpxWldOMExtZGxkRTkzYmxCeWIzQmxjblI1VG1GdFpYTW9UblZ0WlhKcFkxQmhjbUZ0WlhSbGNuTXBMbk52YldVb1hHNGdJQ0FnSUNBZ0lDaHVZVzFsT2lCT2RXMWxjbWxqVUdGeVlXMWxkR1Z5YzB0bGVYTXBJRDArSUU1MWJXVnlhV05RWVhKaGJXVjBaWEp6VzI1aGJXVmRJRDA5UFNCcFpGeHVJQ0FnSUNrN1hHNWNiaThxS2x4dUlDb2dRU0JqYjJ4c1pXTjBhVzl1SUc5bUlIUmxlSFIxWVd3Z2NHRnlZVzFsZEdWeWN5QjBhR0YwSUdGeVpTQmpiM0psSUhSdklHRnNiQ0JRYVhobGJDQlRkSEpsWVcxcGJtY2daWGh3WlhKcFpXNWpaWE11WEc0Z0tseHVJQ292WEc1bGVIQnZjblFnWTJ4aGMzTWdWR1Y0ZEZCaGNtRnRaWFJsY25NZ2UxeHVJQ0FnSUhOMFlYUnBZeUJUYVdkdVlXeHNhVzVuVTJWeWRtVnlWWEpzSUQwZ0ozTnpKeUJoY3lCamIyNXpkRHRjYm4xY2JseHVaWGh3YjNKMElIUjVjR1VnVkdWNGRGQmhjbUZ0WlhSbGNuTkxaWGx6SUQwZ1JYaGpiSFZrWlR4Y2JpQWdJQ0JyWlhsdlppQjBlWEJsYjJZZ1ZHVjRkRkJoY21GdFpYUmxjbk1zWEc0Z0lDQWdKM0J5YjNSdmRIbHdaU2RjYmo0N1hHNWxlSEJ2Y25RZ2RIbHdaU0JVWlhoMFVHRnlZVzFsZEdWeWMwbGtjeUE5SUhSNWNHVnZaaUJVWlhoMFVHRnlZVzFsZEdWeWMxdFVaWGgwVUdGeVlXMWxkR1Z5YzB0bGVYTmRPMXh1WEc1amIyNXpkQ0JwYzFSbGVIUkpaQ0E5SUNocFpEb2djM1J5YVc1bktUb2dhV1FnYVhNZ1ZHVjRkRkJoY21GdFpYUmxjbk5KWkhNZ1BUNWNiaUFnSUNCUFltcGxZM1F1WjJWMFQzZHVVSEp2Y0dWeWRIbE9ZVzFsY3loVVpYaDBVR0Z5WVcxbGRHVnljeWt1YzI5dFpTaGNiaUFnSUNBZ0lDQWdLRzVoYldVNklGUmxlSFJRWVhKaGJXVjBaWEp6UzJWNWN5a2dQVDRnVkdWNGRGQmhjbUZ0WlhSbGNuTmJibUZ0WlYwZ1BUMDlJR2xrWEc0Z0lDQWdLVHRjYmx4dUx5b3FYRzRnS2lCQklHTnZiR3hsWTNScGIyNGdiMllnWlc1MWJTQmlZWE5sWkNCd1lYSmhiV1YwWlhKeklIUm9ZWFFnWVhKbElHTnZjbVVnZEc4Z1lXeHNJRkJwZUdWc0lGTjBjbVZoYldsdVp5QmxlSEJsY21sbGJtTmxjeTVjYmlBcVhHNGdLaTljYm1WNGNHOXlkQ0JqYkdGemN5QlBjSFJwYjI1UVlYSmhiV1YwWlhKeklIdGNiaUFnSUNCemRHRjBhV01nVUhKbFptVnljbVZrUTI5a1pXTWdQU0FuVUhKbFptVnljbVZrUTI5a1pXTW5JR0Z6SUdOdmJuTjBPMXh1SUNBZ0lITjBZWFJwWXlCVGRISmxZVzFsY2tsa0lEMGdKMU4wY21WaGJXVnlTV1FuSUdGeklHTnZibk4wTzF4dWZWeHVYRzVsZUhCdmNuUWdkSGx3WlNCUGNIUnBiMjVRWVhKaGJXVjBaWEp6UzJWNWN5QTlJRVY0WTJ4MVpHVThYRzRnSUNBZ2EyVjViMllnZEhsd1pXOW1JRTl3ZEdsdmJsQmhjbUZ0WlhSbGNuTXNYRzRnSUNBZ0ozQnliM1J2ZEhsd1pTZGNiajQ3WEc1bGVIQnZjblFnZEhsd1pTQlBjSFJwYjI1UVlYSmhiV1YwWlhKelNXUnpJRDBnZEhsd1pXOW1JRTl3ZEdsdmJsQmhjbUZ0WlhSbGNuTmJUM0IwYVc5dVVHRnlZVzFsZEdWeWMwdGxlWE5kTzF4dVhHNWpiMjV6ZENCcGMwOXdkR2x2Ymtsa0lEMGdLR2xrT2lCemRISnBibWNwT2lCcFpDQnBjeUJQY0hScGIyNVFZWEpoYldWMFpYSnpTV1J6SUQwK1hHNGdJQ0FnVDJKcVpXTjBMbWRsZEU5M2JsQnliM0JsY25SNVRtRnRaWE1vVDNCMGFXOXVVR0Z5WVcxbGRHVnljeWt1YzI5dFpTaGNiaUFnSUNBZ0lDQWdLRzVoYldVNklFOXdkR2x2YmxCaGNtRnRaWFJsY25OTFpYbHpLU0E5UGlCUGNIUnBiMjVRWVhKaGJXVjBaWEp6VzI1aGJXVmRJRDA5UFNCcFpGeHVJQ0FnSUNrN1hHNWNiaThxS2x4dUlDb2dWWFJwYkdsMGVTQjBlWEJsY3lCbWIzSWdhVzVtWlhKeWFXNW5JR1JoZEdFZ2RIbHdaU0JpWVhObFpDQnZiaUJ6WlhSMGFXNW5JRWxFWEc0Z0tpOWNibVY0Y0c5eWRDQjBlWEJsSUU5d2RHbHZia2xrY3lBOVhHNGdJQ0FnZkNCR2JHRm5jMGxrYzF4dUlDQWdJSHdnVG5WdFpYSnBZMUJoY21GdFpYUmxjbk5KWkhOY2JpQWdJQ0I4SUZSbGVIUlFZWEpoYldWMFpYSnpTV1J6WEc0Z0lDQWdmQ0JQY0hScGIyNVFZWEpoYldWMFpYSnpTV1J6TzF4dVpYaHdiM0owSUhSNWNHVWdUM0IwYVc5dVMyVjVjenhVUGlBOUlGUWdaWGgwWlc1a2N5QkdiR0ZuYzBsa2MxeHVJQ0FnSUQ4Z1ltOXZiR1ZoYmx4dUlDQWdJRG9nVkNCbGVIUmxibVJ6SUU1MWJXVnlhV05RWVhKaGJXVjBaWEp6U1dSelhHNGdJQ0FnUHlCdWRXMWlaWEpjYmlBZ0lDQTZJRlFnWlhoMFpXNWtjeUJVWlhoMFVHRnlZVzFsZEdWeWMwbGtjMXh1SUNBZ0lEOGdjM1J5YVc1blhHNGdJQ0FnT2lCVUlHVjRkR1Z1WkhNZ1QzQjBhVzl1VUdGeVlXMWxkR1Z5YzBsa2MxeHVJQ0FnSUQ4Z2MzUnlhVzVuWEc0Z0lDQWdPaUJ1WlhabGNqdGNibHh1Wlhod2IzSjBJSFI1Y0dVZ1FXeHNVMlYwZEdsdVozTWdQU0I3WEc0Z0lDQWdXMHNnYVc0Z1QzQjBhVzl1U1dSelhUb2dUM0IwYVc5dVMyVjVjenhMUGp0Y2JuMDdYRzVjYm1WNGNHOXlkQ0JwYm5SbGNtWmhZMlVnUTI5dVptbG5VR0Z5WVcxeklIdGNiaUFnSUNBdktpb2dTVzVwZEdsaGJDQlFhWGhsYkNCVGRISmxZVzFwYm1jZ2MyVjBkR2x1WjNNZ0tpOWNiaUFnSUNCcGJtbDBhV0ZzVTJWMGRHbHVaM00vT2lCUVlYSjBhV0ZzUEVGc2JGTmxkSFJwYm1kelBqdGNiaUFnSUNBdktpb2dTV1lnZFhObFZYSnNVR0Z5WVcxeklHbHpJSE5sZENCMGNuVmxMQ0IzYVd4c0lISmxZV1FnYVc1cGRHbGhiQ0IyWVd4MVpYTWdabkp2YlNCVlVrd2djR0Z5WVcxbGRHVnljeUJoYm1RZ2NHVnljMmx6ZENCamFHRnVaMlZrSUhObGRIUnBibWR6SUdsdWRHOGdWVkpNSUNvdlhHNGdJQ0FnZFhObFZYSnNVR0Z5WVcxelB6b2dZbTl2YkdWaGJqdGNibjFjYm1WNGNHOXlkQ0JqYkdGemN5QkRiMjVtYVdjZ2UxeHVJQ0FnSUM4cUlFRWdiV0Z3SUc5bUlHWnNZV2R6SUhSb1lYUWdZMkZ1SUdKbElIUnZaMmRzWldRZ0xTQnZjSFJwYjI1eklIUm9ZWFFnWTJGdUlHSmxJSE5sZENCcGJpQjBhR1VnWVhCd2JHbGpZWFJwYjI0Z0xTQmxMbWN1SUZWelpTQk5hV00vSUNvdlhHNGdJQ0FnY0hKcGRtRjBaU0JtYkdGbmN5QTlJRzVsZHlCTllYQThSbXhoWjNOSlpITXNJRk5sZEhScGJtZEdiR0ZuUGlncE8xeHVYRzRnSUNBZ0x5b2dRU0J0WVhBZ2IyWWdiblZ0WlhKcFkyRnNJSE5sZEhScGJtZHpJQzBnYjNCMGFXOXVjeUIwYUdGMElHTmhiaUJpWlNCcGJpQjBhR1VnWVhCd2JHbGpZWFJwYjI0Z0xTQmxMbWN1SUUxcGJrSnBkSEpoZEdVZ0tpOWNiaUFnSUNCd2NtbDJZWFJsSUc1MWJXVnlhV05RWVhKaGJXVjBaWEp6SUQwZ2JtVjNJRTFoY0R4T2RXMWxjbWxqVUdGeVlXMWxkR1Z5YzBsa2N5d2dVMlYwZEdsdVowNTFiV0psY2o0b0tUdGNibHh1SUNBZ0lDOHFJRUVnYldGd0lHOW1JSFJsZUhRZ2MyVjBkR2x1WjNNZ0xTQmxMbWN1SUhOcFoyNWhiR3hwYm1jZ2MyVnlkbVZ5SUhWeWJDQXFMMXh1SUNBZ0lIQnlhWFpoZEdVZ2RHVjRkRkJoY21GdFpYUmxjbk1nUFNCdVpYY2dUV0Z3UEZSbGVIUlFZWEpoYldWMFpYSnpTV1J6TENCVFpYUjBhVzVuVkdWNGRENG9LVHRjYmx4dUlDQWdJQzhxSUVFZ2JXRndJRzltSUdWdWRXMGdZbUZ6WldRZ2MyVjBkR2x1WjNNZ0xTQmxMbWN1SUhCeVpXWmxjbkpsWkNCamIyUmxZeUFxTDF4dUlDQWdJSEJ5YVhaaGRHVWdiM0IwYVc5dVVHRnlZVzFsZEdWeWN5QTlJRzVsZHlCTllYQThUM0IwYVc5dVVHRnlZVzFsZEdWeWMwbGtjeXdnVTJWMGRHbHVaMDl3ZEdsdmJqNG9LVHRjYmx4dUlDQWdJSEJ5YVhaaGRHVWdYM1Z6WlZWeWJGQmhjbUZ0Y3pvZ1ltOXZiR1ZoYmp0Y2JseHVJQ0FnSUM4dklDMHRMUzB0TFMwdExTMHRMU0JUWlhSMGFXNW5jeUF0TFMwdExTMHRMUzB0TFMwdExTMHRMVnh1WEc0Z0lDQWdZMjl1YzNSeWRXTjBiM0lvWTI5dVptbG5PaUJEYjI1bWFXZFFZWEpoYlhNZ1BTQjdmU2tnZTF4dUlDQWdJQ0FnSUNCamIyNXpkQ0I3SUdsdWFYUnBZV3hUWlhSMGFXNW5jeXdnZFhObFZYSnNVR0Z5WVcxeklIMGdQU0JqYjI1bWFXYzdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzVnpaVlZ5YkZCaGNtRnRjeUE5SUNFaGRYTmxWWEpzVUdGeVlXMXpPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuQnZjSFZzWVhSbFJHVm1ZWFZzZEZObGRIUnBibWR6S0hSb2FYTXVYM1Z6WlZWeWJGQmhjbUZ0Y3lrN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hwYm1sMGFXRnNVMlYwZEdsdVozTXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YzJWMFUyVjBkR2x1WjNNb2FXNXBkR2xoYkZObGRIUnBibWR6S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGUnlkV1VnYVdZZ2NtVmhaR2x1WnlCamIyNW1hV2QxY21GMGFXOXVJR2x1YVhScFlXd2dkbUZzZFdWeklHWnliMjBnVlZKTUlIQmhjbUZ0WlhSbGNuTXNJR0Z1WkZ4dUlDQWdJQ0FxSUhCbGNuTnBjM1JwYm1jZ1kyaGhibWRsY3lCcGJpQlZVa3dnZDJobGJpQmphR0Z1WjJWa0xseHVJQ0FnSUNBcUwxeHVJQ0FnSUhCMVlteHBZeUJuWlhRZ2RYTmxWWEpzVUdGeVlXMXpLQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZkWE5sVlhKc1VHRnlZVzF6TzF4dUlDQWdJSDFjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZCdmNIVnNZWFJsSUhSb1pTQmtaV1poZFd4MElITmxkSFJwYm1keklHWnZjaUJoSUZCcGVHVnNJRk4wY21WaGJXbHVaeUJoY0hCc2FXTmhkR2x2Ymx4dUlDQWdJQ0FxTDF4dUlDQWdJSEJ5YVhaaGRHVWdjRzl3ZFd4aGRHVkVaV1poZFd4MFUyVjBkR2x1WjNNb2RYTmxWWEpzVUdGeVlXMXpPaUJpYjI5c1pXRnVLVG9nZG05cFpDQjdYRzRnSUNBZ0lDQWdJQzhxS2x4dUlDQWdJQ0FnSUNBZ0tpQlVaWGgwSUZCaGNtRnRaWFJsY25OY2JpQWdJQ0FnSUNBZ0lDb3ZYRzVjYmlBZ0lDQWdJQ0FnZEdocGN5NTBaWGgwVUdGeVlXMWxkR1Z5Y3k1elpYUW9YRzRnSUNBZ0lDQWdJQ0FnSUNCVVpYaDBVR0Z5WVcxbGRHVnljeTVUYVdkdVlXeHNhVzVuVTJWeWRtVnlWWEpzTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdibVYzSUZObGRIUnBibWRVWlhoMEtGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGUmxlSFJRWVhKaGJXVjBaWEp6TGxOcFoyNWhiR3hwYm1kVFpYSjJaWEpWY213c1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0oxTnBaMjVoYkd4cGJtY2dkWEpzSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBblZYSnNJRzltSUhSb1pTQnphV2R1WVd4c2FXNW5JSE5sY25abGNpY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLR3h2WTJGMGFXOXVMbkJ5YjNSdlkyOXNJRDA5UFNBbmFIUjBjSE02SnlBL0lDZDNjM002THk4bklEb2dKM2R6T2k4dkp5a2dLMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCM2FXNWtiM2N1Ykc5allYUnBiMjR1YUc5emRHNWhiV1VnSzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJtYjNJZ2NtVmhaR0ZpYVd4cGRIa3NJSGRsSUc5dGFYUWdkR2hsSUhCdmNuUWdhV1lnYVhRbmN5QTRNRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBb2QybHVaRzkzTG14dlkyRjBhVzl1TG5CdmNuUWdQVDA5SUNjNE1DY2dmSHhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2QybHVaRzkzTG14dlkyRjBhVzl1TG5CdmNuUWdQVDA5SUNjblhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBL0lDY25YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQTZJR0E2Skh0M2FXNWtiM2N1Ykc5allYUnBiMjR1Y0c5eWRIMWdLU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IxYzJWVmNteFFZWEpoYlhOY2JpQWdJQ0FnSUNBZ0lDQWdJQ2xjYmlBZ0lDQWdJQ0FnS1R0Y2JseHVJQ0FnSUNBZ0lDQjBhR2x6TG05d2RHbHZibEJoY21GdFpYUmxjbk11YzJWMEtGeHVJQ0FnSUNBZ0lDQWdJQ0FnVDNCMGFXOXVVR0Z5WVcxbGRHVnljeTVUZEhKbFlXMWxja2xrTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdibVYzSUZObGRIUnBibWRQY0hScGIyNG9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdUM0IwYVc5dVVHRnlZVzFsZEdWeWN5NVRkSEpsWVcxbGNrbGtMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2RUZEhKbFlXMWxjaUJKUkNjc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0oxUm9aU0JKUkNCdlppQjBhR1VnYzNSeVpXRnRaWElnZEc4Z2MzUnlaV0Z0TGljc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0p5Y3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdXMTBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZFhObFZYSnNVR0Z5WVcxelhHNGdJQ0FnSUNBZ0lDQWdJQ0FwWEc0Z0lDQWdJQ0FnSUNrN1hHNWNiaUFnSUNBZ0lDQWdMeW9xWEc0Z0lDQWdJQ0FnSUNBcUlFVnVkVzBnVUdGeVlXMWxkR1Z5YzF4dUlDQWdJQ0FnSUNBZ0tpOWNiaUFnSUNBZ0lDQWdkR2hwY3k1dmNIUnBiMjVRWVhKaGJXVjBaWEp6TG5ObGRDaGNiaUFnSUNBZ0lDQWdJQ0FnSUU5d2RHbHZibEJoY21GdFpYUmxjbk11VUhKbFptVnljbVZrUTI5a1pXTXNYRzRnSUNBZ0lDQWdJQ0FnSUNCdVpYY2dVMlYwZEdsdVowOXdkR2x2YmloY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCUGNIUnBiMjVRWVhKaGJXVjBaWEp6TGxCeVpXWmxjbkpsWkVOdlpHVmpMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2RRY21WbVpYSnlaV1FnUTI5a1pXTW5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2RVYUdVZ2NISmxabVZ5Y21Wa0lHTnZaR1ZqSUhSdklHSmxJSFZ6WldRZ1pIVnlhVzVuSUdOdlpHVmpJRzVsWjI5MGFXRjBhVzl1Snl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBblNESTJOQ0JzWlhabGJDMWhjM2x0YldWMGNua3RZV3hzYjNkbFpEMHhPM0JoWTJ0bGRHbDZZWFJwYjI0dGJXOWtaVDB4TzNCeWIyWnBiR1V0YkdWMlpXd3RhV1E5TkRKbE1ERm1KeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FvWm5WdVkzUnBiMjRnS0NrNklFRnljbUY1UEhOMGNtbHVaejRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCaWNtOTNjMlZ5VTNWd2NHOXlkR1ZrUTI5a1pXTnpPaUJCY25KaGVUeHpkSEpwYm1jK0lEMGdXMTA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRlJ5ZVNCblpYUWdkR2hsSUdsdVptOGdibVZsWkdWa0lHWnliMjBnZEdobElGSlVRMUowY0ZKbFkyVnBkbVZ5TGlCVWFHbHpJR2x6SUc5dWJIa2dZWFpoYVd4aFlteGxJRzl1SUdOb2NtOXRaVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9JVkpVUTFKMGNGSmxZMlZwZG1WeUxtZGxkRU5oY0dGaWFXeHBkR2xsY3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSnZkM05sY2xOMWNIQnZjblJsWkVOdlpHVmpjeTV3ZFhOb0tDZFBibXg1SUdGMllXbHNZV0pzWlNCdmJpQkRhSEp2YldVbktUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCaWNtOTNjMlZ5VTNWd2NHOXlkR1ZrUTI5a1pXTnpPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdiV0YwWTJobGNpQTlJQzhvVmxCY1hHUjhTREkyWEZ4a2ZFRldNU2t1S2k4N1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElHTnZaR1ZqY3lBOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCU1ZFTlNkSEJTWldObGFYWmxjaTVuWlhSRFlYQmhZbWxzYVhScFpYTW9KM1pwWkdWdkp5a3VZMjlrWldOek8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjJSbFkzTXVabTl5UldGamFDZ29ZMjlrWldNcElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElITjBjaUE5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOWtaV011YldsdFpWUjVjR1V1YzNCc2FYUW9KeThuS1ZzeFhTQXJYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSnlBbklDdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FvWTI5a1pXTXVjMlJ3Um0xMGNFeHBibVVnZkh3Z0p5Y3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2JXRjBZMmdnUFNCdFlYUmphR1Z5TG1WNFpXTW9jM1J5S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHRZWFJqYUNBaFBUMGdiblZzYkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5YjNkelpYSlRkWEJ3YjNKMFpXUkRiMlJsWTNNdWNIVnphQ2h6ZEhJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHSnliM2R6WlhKVGRYQndiM0owWldSRGIyUmxZM003WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNrb0tTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjFjMlZWY214UVlYSmhiWE5jYmlBZ0lDQWdJQ0FnSUNBZ0lDbGNiaUFnSUNBZ0lDQWdLVHRjZEZ4dVhHNGdJQ0FnSUNBZ0lDOHFLbHh1SUNBZ0lDQWdJQ0FnS2lCQ2IyOXNaV0Z1SUhCaGNtRnRaWFJsY25OY2JpQWdJQ0FnSUNBZ0lDb3ZYRzVjYmlBZ0lDQWdJQ0FnZEdocGN5NW1iR0ZuY3k1elpYUW9YRzRnSUNBZ0lDQWdJQ0FnSUNCR2JHRm5jeTVCZFhSdlEyOXVibVZqZEN4Y2JpQWdJQ0FnSUNBZ0lDQWdJRzVsZHlCVFpYUjBhVzVuUm14aFp5aGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQkdiR0ZuY3k1QmRYUnZRMjl1Ym1WamRDeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5RWFYwYnlCamIyNXVaV04wSUhSdklITjBjbVZoYlNjc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0oxZG9aWFJvWlhJZ2QyVWdjMmh2ZFd4a0lHRjBkR1Z0Y0hRZ2RHOGdZWFYwYnlCamIyNXVaV04wSUhSdklIUm9aU0J6YVdkdVlXeHNhVzVuSUhObGNuWmxjaUJ2Y2lCemFHOTNJR0VnWTJ4cFkyc2dkRzhnYzNSaGNuUWdjSEp2YlhCMExpY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabUZzYzJVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RYTmxWWEpzVUdGeVlXMXpYRzRnSUNBZ0lDQWdJQ0FnSUNBcFhHNGdJQ0FnSUNBZ0lDazdYRzVjYmlBZ0lDQWdJQ0FnZEdocGN5NW1iR0ZuY3k1elpYUW9YRzRnSUNBZ0lDQWdJQ0FnSUNCR2JHRm5jeTVCZFhSdlVHeGhlVlpwWkdWdkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnYm1WM0lGTmxkSFJwYm1kR2JHRm5LRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRVpzWVdkekxrRjFkRzlRYkdGNVZtbGtaVzhzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSjBGMWRHOGdjR3hoZVNCMmFXUmxieWNzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSjFkb1pXNGdkbWxrWlc4Z2FYTWdjbVZoWkhrZ1lYVjBiMjFoZEdsallXeHNlU0J6ZEdGeWRDQndiR0Y1YVc1bklHbDBJR0Z6SUc5d2NHOXpaV1FnZEc4Z2MyaHZkMmx1WnlCaElIQnNZWGtnWW5WMGRHOXVMaWNzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEhKMVpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjFjMlZWY214UVlYSmhiWE5jYmlBZ0lDQWdJQ0FnSUNBZ0lDbGNiaUFnSUNBZ0lDQWdLVHRjYmx4dUlDQWdJQ0FnSUNCMGFHbHpMbVpzWVdkekxuTmxkQ2hjYmlBZ0lDQWdJQ0FnSUNBZ0lFWnNZV2R6TGtKeWIzZHpaWEpUWlc1a1QyWm1aWElzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnVaWGNnVTJWMGRHbHVaMFpzWVdjb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1JteGhaM011UW5KdmQzTmxjbE5sYm1SUFptWmxjaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuUW5KdmQzTmxjaUJ6Wlc1a0lHOW1abVZ5Snl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBblFuSnZkM05sY2lCM2FXeHNJR2x1YVhScFlYUmxJSFJvWlNCWFpXSlNWRU1nYUdGdVpITm9ZV3RsSUdKNUlITmxibVJwYm1jZ2RHaGxJRzltWm1WeUlIUnZJSFJvWlNCemRISmxZVzFsY2ljc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptRnNjMlVzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZFhObFZYSnNVR0Z5WVcxelhHNGdJQ0FnSUNBZ0lDQWdJQ0FwWEc0Z0lDQWdJQ0FnSUNrN1hHNWNiaUFnSUNBZ0lDQWdkR2hwY3k1bWJHRm5jeTV6WlhRb1hHNGdJQ0FnSUNBZ0lDQWdJQ0JHYkdGbmN5NVZjMlZOYVdNc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J1WlhjZ1UyVjBkR2x1WjBac1lXY29YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdSbXhoWjNNdVZYTmxUV2xqTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNkVmMyVWdiV2xqY205d2FHOXVaU2NzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSjAxaGEyVWdZbkp2ZDNObGNpQnlaWEYxWlhOMElHMXBZM0p2Y0dodmJtVWdZV05qWlhOeklHRnVaQ0J2Y0dWdUlHRnVJR2x1Y0hWMElHRjFaR2x2SUhSeVlXTnJMaWNzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm1Gc2MyVXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkWE5sVlhKc1VHRnlZVzF6WEc0Z0lDQWdJQ0FnSUNBZ0lDQXBYRzRnSUNBZ0lDQWdJQ2s3WEc1Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVtYkdGbmN5NXpaWFFvWEc0Z0lDQWdJQ0FnSUNBZ0lDQkdiR0ZuY3k1VGRHRnlkRlpwWkdWdlRYVjBaV1FzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnVaWGNnVTJWMGRHbHVaMFpzWVdjb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1JteGhaM011VTNSaGNuUldhV1JsYjAxMWRHVmtMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2RUZEdGeWRDQjJhV1JsYnlCdGRYUmxaQ2NzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSjFacFpHVnZJSGRwYkd3Z2MzUmhjblFnYlhWMFpXUWdhV1lnZEhKMVpTNG5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1poYkhObExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIVnpaVlZ5YkZCaGNtRnRjMXh1SUNBZ0lDQWdJQ0FnSUNBZ0tWeHVJQ0FnSUNBZ0lDQXBPMXh1WEc0Z0lDQWdJQ0FnSUhSb2FYTXVabXhoWjNNdWMyVjBLRnh1SUNBZ0lDQWdJQ0FnSUNBZ1JteGhaM011VTNWd2NISmxjM05DY205M2MyVnlTMlY1Y3l4Y2JpQWdJQ0FnSUNBZ0lDQWdJRzVsZHlCVFpYUjBhVzVuUm14aFp5aGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQkdiR0ZuY3k1VGRYQndjbVZ6YzBKeWIzZHpaWEpMWlhsekxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDZFRkWEJ3Y21WemN5QmljbTkzYzJWeUlHdGxlWE1uTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNkVGRYQndjbVZ6Y3lCalpYSjBZV2x1SUdKeWIzZHpaWElnYTJWNWN5QjBhR0YwSUhkbElIVnpaU0JwYmlCVlJTd2dabTl5SUdWNFlXMXdiR1VnUmpVZ2RHOGdjMmh2ZHlCemFHRmtaWElnWTI5dGNHeGxlR2wwZVNCcGJuTjBaV0ZrSUc5bUlISmxabkpsYzJnZ2RHaGxJSEJoWjJVdUp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBjblZsTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhWelpWVnliRkJoY21GdGMxeHVJQ0FnSUNBZ0lDQWdJQ0FnS1Z4dUlDQWdJQ0FnSUNBcE8xeHVYRzRnSUNBZ0lDQWdJSFJvYVhNdVpteGhaM011YzJWMEtGeHVJQ0FnSUNBZ0lDQWdJQ0FnUm14aFozTXVVSEpsWm1WeVUwWlZMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2JtVjNJRk5sZEhScGJtZEdiR0ZuS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUVac1lXZHpMbEJ5WldabGNsTkdWU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuVUhKbFptVnlJRk5HVlNjc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0oxUnllU0IwYnlCamIyNXVaV04wSUhSdklIUm9aU0JUUmxVZ2FXNXpkR1ZoWkNCdlppQlFNbEF1Snl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbVlXeHpaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IxYzJWVmNteFFZWEpoYlhOY2JpQWdJQ0FnSUNBZ0lDQWdJQ2xjYmlBZ0lDQWdJQ0FnS1R0Y2JseHVJQ0FnSUNBZ0lDQjBhR2x6TG1ac1lXZHpMbk5sZENoY2JpQWdJQ0FnSUNBZ0lDQWdJRVpzWVdkekxrbHpVWFZoYkdsMGVVTnZiblJ5YjJ4c1pYSXNYRzRnSUNBZ0lDQWdJQ0FnSUNCdVpYY2dVMlYwZEdsdVowWnNZV2NvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUm14aFozTXVTWE5SZFdGc2FYUjVRMjl1ZEhKdmJHeGxjaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuU1hNZ2NYVmhiR2wwZVNCamIyNTBjbTlzYkdWeVB5Y3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKMVJ5ZFdVZ2FXWWdkR2hwY3lCd1pXVnlJR052Ym5SeWIyeHpJSE4wY21WaGJTQnhkV0ZzYVhSNUp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBjblZsTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhWelpWVnliRkJoY21GdGMxeHVJQ0FnSUNBZ0lDQWdJQ0FnS1Z4dUlDQWdJQ0FnSUNBcE8xeHVYRzRnSUNBZ0lDQWdJSFJvYVhNdVpteGhaM011YzJWMEtGeHVJQ0FnSUNBZ0lDQWdJQ0FnUm14aFozTXVSbTl5WTJWTmIyNXZRWFZrYVc4c1hHNGdJQ0FnSUNBZ0lDQWdJQ0J1WlhjZ1UyVjBkR2x1WjBac1lXY29YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdSbXhoWjNNdVJtOXlZMlZOYjI1dlFYVmthVzhzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSjBadmNtTmxJRzF2Ym04Z1lYVmthVzhuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNkR2IzSmpaU0JpY205M2MyVnlJSFJ2SUhKbGNYVmxjM1FnYlc5dWJ5QmhkV1JwYnlCcGJpQjBhR1VnVTBSUUp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1ZV3h6WlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMWMyVlZjbXhRWVhKaGJYTmNiaUFnSUNBZ0lDQWdJQ0FnSUNsY2JpQWdJQ0FnSUNBZ0tUdGNibHh1SUNBZ0lDQWdJQ0IwYUdsekxtWnNZV2R6TG5ObGRDaGNiaUFnSUNBZ0lDQWdJQ0FnSUVac1lXZHpMa1p2Y21ObFZGVlNUaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lHNWxkeUJUWlhSMGFXNW5SbXhoWnloY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCR2JHRm5jeTVHYjNKalpWUlZVazRzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSjBadmNtTmxJRlJWVWs0bkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDZFBibXg1SUdkbGJtVnlZWFJsSUZSVlVrNHZVbVZzWVhsbFpDQkpRMFVnWTJGdVpHbGtZWFJsY3k0bkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWmhiSE5sTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhWelpWVnliRkJoY21GdGMxeHVJQ0FnSUNBZ0lDQWdJQ0FnS1Z4dUlDQWdJQ0FnSUNBcE8xeHVYRzRnSUNBZ0lDQWdJSFJvYVhNdVpteGhaM011YzJWMEtGeHVJQ0FnSUNBZ0lDQWdJQ0FnUm14aFozTXVRVVpMUkdWMFpXTjBhVzl1TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdibVYzSUZObGRIUnBibWRHYkdGbktGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lFWnNZV2R6TGtGR1MwUmxkR1ZqZEdsdmJpeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5RVVpMSUdsbUlHbGtiR1VuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNkVWFXMWxiM1YwSUhSb1pTQmxlSEJsY21sbGJtTmxJR2xtSUhWelpYSWdhWE1nUVVaTElHWnZjaUJoSUhCbGNtbHZaQzRuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdaaGJITmxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFZ6WlZWeWJGQmhjbUZ0YzF4dUlDQWdJQ0FnSUNBZ0lDQWdLVnh1SUNBZ0lDQWdJQ0FwTzF4dVhHNGdJQ0FnSUNBZ0lIUm9hWE11Wm14aFozTXVjMlYwS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdSbXhoWjNNdVRXRjBZMmhXYVdWM2NHOXlkRkpsYzI5c2RYUnBiMjRzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnVaWGNnVTJWMGRHbHVaMFpzWVdjb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1JteGhaM011VFdGMFkyaFdhV1YzY0c5eWRGSmxjMjlzZFhScGIyNHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKMDFoZEdOb0lIWnBaWGR3YjNKMElISmxjMjlzZFhScGIyNG5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2RRYVhobGJDQlRkSEpsWVcxcGJtY2dkMmxzYkNCaVpTQnBibk4wY25WamRHVmtJSFJ2SUdSNWJtRnRhV05oYkd4NUlISmxjMmw2WlNCMGFHVWdkbWxrWlc4Z2MzUnlaV0Z0SUhSdklHMWhkR05vSUhSb1pTQnphWHBsSUc5bUlIUm9aU0IyYVdSbGJ5QmxiR1Z0Wlc1MExpY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabUZzYzJVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RYTmxWWEpzVUdGeVlXMXpYRzRnSUNBZ0lDQWdJQ0FnSUNBcFhHNGdJQ0FnSUNBZ0lDazdYRzVjYmlBZ0lDQWdJQ0FnZEdocGN5NW1iR0ZuY3k1elpYUW9YRzRnSUNBZ0lDQWdJQ0FnSUNCR2JHRm5jeTVJYjNabGNtbHVaMDF2ZFhObFRXOWtaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHNWxkeUJUWlhSMGFXNW5SbXhoWnloY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCR2JHRm5jeTVJYjNabGNtbHVaMDF2ZFhObFRXOWtaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuUTI5dWRISnZiQ0JUWTJobGJXVTZJRXh2WTJ0bFpDQk5iM1Z6WlNjc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0owVnBkR2hsY2lCc2IyTnJaV1FnYlc5MWMyVXNJSGRvWlhKbElIUm9aU0J3YjJsdWRHVnlJR2x6SUdOdmJuTjFiV1ZrSUdKNUlIUm9aU0IyYVdSbGJ5QmhibVFnYkc5amEyVmtJSFJ2SUdsMExDQnZjaUJvYjNabGNtbHVaeUJ0YjNWelpTd2dkMmhsY21VZ2RHaGxJRzF2ZFhObElHbHpJRzV2ZENCamIyNXpkVzFsWkM0bkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWmhiSE5sTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhWelpWVnliRkJoY21GdGN5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW9hWE5JYjNabGNtbHVaMDF2ZFhObE9pQmliMjlzWldGdUxDQnpaWFIwYVc1bk9pQlRaWFIwYVc1blFtRnpaU2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6WlhSMGFXNW5MbXhoWW1Wc0lEMGdZRU52Ym5SeWIyd2dVMk5vWlcxbE9pQWtlMmx6U0c5MlpYSnBibWROYjNWelpTQS9JQ2RJYjNabGNtbHVaeWNnT2lBblRHOWphMlZrSjMwZ1RXOTFjMlZnTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ2xjYmlBZ0lDQWdJQ0FnS1R0Y2JseHVJQ0FnSUNBZ0lDQjBhR2x6TG1ac1lXZHpMbk5sZENoY2JpQWdJQ0FnSUNBZ0lDQWdJRVpzWVdkekxrWmhhMlZOYjNWelpWZHBkR2hVYjNWamFHVnpMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2JtVjNJRk5sZEhScGJtZEdiR0ZuS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUVac1lXZHpMa1poYTJWTmIzVnpaVmRwZEdoVWIzVmphR1Z6TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNkR1lXdGxJRzF2ZFhObElIZHBkR2dnZEc5MVkyaGxjeWNzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSjBFZ2MybHVaMnhsSUdacGJtZGxjaUIwYjNWamFDQnBjeUJqYjI1MlpYSjBaV1FnYVc1MGJ5QmhJRzF2ZFhObElHVjJaVzUwTGlCVWFHbHpJR0ZzYkc5M2N5QmhJRzV2YmkxMGIzVmphQ0JoY0hCc2FXTmhkR2x2YmlCMGJ5QmlaU0JqYjI1MGNtOXNiR1ZrSUhCaGNuUnBZV3hzZVNCMmFXRWdZU0IwYjNWamFDQmtaWFpwWTJVdUp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1ZV3h6WlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMWMyVlZjbXhRWVhKaGJYTmNiaUFnSUNBZ0lDQWdJQ0FnSUNsY2JpQWdJQ0FnSUNBZ0tUdGNibHh1SUNBZ0lDQWdJQ0IwYUdsekxtWnNZV2R6TG5ObGRDaGNiaUFnSUNBZ0lDQWdJQ0FnSUVac1lXZHpMa3RsZVdKdllYSmtTVzV3ZFhRc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J1WlhjZ1UyVjBkR2x1WjBac1lXY29YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdSbXhoWjNNdVMyVjVZbTloY21SSmJuQjFkQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuUzJWNVltOWhjbVFnYVc1d2RYUW5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2RKWmlCbGJtRmliR1ZrTENCelpXNWtJR3RsZVdKdllYSmtJR1YyWlc1MGN5QjBieUJ6ZEhKbFlXMWxjaWNzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEhKMVpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjFjMlZWY214UVlYSmhiWE5jYmlBZ0lDQWdJQ0FnSUNBZ0lDbGNiaUFnSUNBZ0lDQWdLVHRjYmx4dUlDQWdJQ0FnSUNCMGFHbHpMbVpzWVdkekxuTmxkQ2hjYmlBZ0lDQWdJQ0FnSUNBZ0lFWnNZV2R6TGsxdmRYTmxTVzV3ZFhRc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J1WlhjZ1UyVjBkR2x1WjBac1lXY29YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdSbXhoWjNNdVRXOTFjMlZKYm5CMWRDeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5UVzkxYzJVZ2FXNXdkWFFuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNkSlppQmxibUZpYkdWa0xDQnpaVzVrSUcxdmRYTmxJR1YyWlc1MGN5QjBieUJ6ZEhKbFlXMWxjaWNzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEhKMVpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjFjMlZWY214UVlYSmhiWE5jYmlBZ0lDQWdJQ0FnSUNBZ0lDbGNiaUFnSUNBZ0lDQWdLVHRjYmx4dUlDQWdJQ0FnSUNCMGFHbHpMbVpzWVdkekxuTmxkQ2hjYmlBZ0lDQWdJQ0FnSUNBZ0lFWnNZV2R6TGxSdmRXTm9TVzV3ZFhRc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J1WlhjZ1UyVjBkR2x1WjBac1lXY29YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdSbXhoWjNNdVZHOTFZMmhKYm5CMWRDeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5WRzkxWTJnZ2FXNXdkWFFuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNkSlppQmxibUZpYkdWa0xDQnpaVzVrSUhSdmRXTm9JR1YyWlc1MGN5QjBieUJ6ZEhKbFlXMWxjaWNzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEhKMVpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjFjMlZWY214UVlYSmhiWE5jYmlBZ0lDQWdJQ0FnSUNBZ0lDbGNiaUFnSUNBZ0lDQWdLVHRjYmx4dUlDQWdJQ0FnSUNCMGFHbHpMbVpzWVdkekxuTmxkQ2hjYmlBZ0lDQWdJQ0FnSUNBZ0lFWnNZV2R6TGtkaGJXVndZV1JKYm5CMWRDeGNiaUFnSUNBZ0lDQWdJQ0FnSUc1bGR5QlRaWFIwYVc1blJteGhaeWhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JHYkdGbmN5NUhZVzFsY0dGa1NXNXdkWFFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSjBkaGJXVndZV1FnYVc1d2RYUW5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2RKWmlCbGJtRmliR1ZrTENCelpXNWtJR2RoYldWd1lXUWdaWFpsYm5SeklIUnZJSE4wY21WaGJXVnlKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwY25WbExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIVnpaVlZ5YkZCaGNtRnRjMXh1SUNBZ0lDQWdJQ0FnSUNBZ0tWeHVJQ0FnSUNBZ0lDQXBPMXh1WEc0Z0lDQWdJQ0FnSUhSb2FYTXVabXhoWjNNdWMyVjBLRnh1SUNBZ0lDQWdJQ0FnSUNBZ1JteGhaM011V0ZKRGIyNTBjbTlzYkdWeVNXNXdkWFFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnVaWGNnVTJWMGRHbHVaMFpzWVdjb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1JteGhaM011V0ZKRGIyNTBjbTlzYkdWeVNXNXdkWFFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSjFoU0lHTnZiblJ5YjJ4c1pYSWdhVzV3ZFhRbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDZEpaaUJsYm1GaWJHVmtMQ0J6Wlc1a0lGaFNJR052Ym5SeWIyeHNaWElnWlhabGJuUnpJSFJ2SUhOMGNtVmhiV1Z5Snl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGNuVmxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFZ6WlZWeWJGQmhjbUZ0YzF4dUlDQWdJQ0FnSUNBZ0lDQWdLVnh1SUNBZ0lDQWdJQ0FwTzF4dVhHNGdJQ0FnSUNBZ0lDOHFLbHh1SUNBZ0lDQWdJQ0FnS2lCT2RXMWxjbWxqSUhCaGNtRnRaWFJsY25OY2JpQWdJQ0FnSUNBZ0lDb3ZYRzVjYmlBZ0lDQWdJQ0FnZEdocGN5NXVkVzFsY21salVHRnlZVzFsZEdWeWN5NXpaWFFvWEc0Z0lDQWdJQ0FnSUNBZ0lDQk9kVzFsY21salVHRnlZVzFsZEdWeWN5NUJSa3RVYVcxbGIzVjBVMlZqY3l4Y2JpQWdJQ0FnSUNBZ0lDQWdJRzVsZHlCVFpYUjBhVzVuVG5WdFltVnlLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRTUxYldWeWFXTlFZWEpoYldWMFpYSnpMa0ZHUzFScGJXVnZkWFJUWldOekxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDZEJSa3NnZEdsdFpXOTFkQ2NzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSjFSb1pTQjBhVzFsSUNocGJpQnpaV052Ym1SektTQnBkQ0IwWVd0bGN5Qm1iM0lnZEdobElHRndjR3hwWTJGMGFXOXVJSFJ2SUhScGJXVWdiM1YwSUdsbUlFRkdTeUIwYVcxbGIzVjBJR2x6SUdWdVlXSnNaV1F1Snl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBd0lDOHFiV2x1S2k4c1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ05qQXdJQzhxYldGNEtpOHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdNVEl3SUM4cWRtRnNkV1VxTHl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMWMyVlZjbXhRWVhKaGJYTmNiaUFnSUNBZ0lDQWdJQ0FnSUNsY2JpQWdJQ0FnSUNBZ0tUdGNibHh1SUNBZ0lDQWdJQ0IwYUdsekxtNTFiV1Z5YVdOUVlYSmhiV1YwWlhKekxuTmxkQ2hjYmlBZ0lDQWdJQ0FnSUNBZ0lFNTFiV1Z5YVdOUVlYSmhiV1YwWlhKekxrMWhlRkpsWTI5dWJtVmpkRUYwZEdWdGNIUnpMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2JtVjNJRk5sZEhScGJtZE9kVzFpWlhJb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1RuVnRaWEpwWTFCaGNtRnRaWFJsY25NdVRXRjRVbVZqYjI1dVpXTjBRWFIwWlcxd2RITXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKMDFoZUNCU1pXTnZibTVsWTNSekp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5UV0Y0YVcxMWJTQnVkVzFpWlhJZ2IyWWdjbVZqYjI1dVpXTjBjeUIwYUdVZ1lYQndiR2xqWVhScGIyNGdkMmxzYkNCaGRIUmxiWEIwSUhkb1pXNGdZU0J6ZEhKbFlXMWxjaUJrYVhOamIyNXVaV04wY3k0bkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEQWdMeXB0YVc0cUx5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQTVPVGtnTHlwdFlYZ3FMeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F6SUM4cWRtRnNkV1VxTHl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMWMyVlZjbXhRWVhKaGJYTmNiaUFnSUNBZ0lDQWdJQ0FnSUNsY2JpQWdJQ0FnSUNBZ0tUdGNibHh1SUNBZ0lDQWdJQ0IwYUdsekxtNTFiV1Z5YVdOUVlYSmhiV1YwWlhKekxuTmxkQ2hjYmlBZ0lDQWdJQ0FnSUNBZ0lFNTFiV1Z5YVdOUVlYSmhiV1YwWlhKekxrMXBibEZRTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdibVYzSUZObGRIUnBibWRPZFcxaVpYSW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdUblZ0WlhKcFkxQmhjbUZ0WlhSbGNuTXVUV2x1VVZBc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0owMXBiaUJSVUNjc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0oxUm9aU0JzYjNkbGNpQmliM1Z1WkNCbWIzSWdkR2hsSUhGMVlXNTBhWHBoZEdsdmJpQndZWEpoYldWMFpYSWdLRkZRS1NCdlppQjBhR1VnWlc1amIyUmxjaTRnTUNBOUlFSmxjM1FnY1hWaGJHbDBlU3dnTlRFZ1BTQjNiM0p6ZENCeGRXRnNhWFI1TGljc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ01DQXZLbTFwYmlvdkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEVXhJQzhxYldGNEtpOHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdNQ0F2S25aaGJIVmxLaThzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZFhObFZYSnNVR0Z5WVcxelhHNGdJQ0FnSUNBZ0lDQWdJQ0FwWEc0Z0lDQWdJQ0FnSUNrN1hHNWNiaUFnSUNBZ0lDQWdkR2hwY3k1dWRXMWxjbWxqVUdGeVlXMWxkR1Z5Y3k1elpYUW9YRzRnSUNBZ0lDQWdJQ0FnSUNCT2RXMWxjbWxqVUdGeVlXMWxkR1Z5Y3k1TllYaFJVQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHNWxkeUJUWlhSMGFXNW5UblZ0WW1WeUtGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lFNTFiV1Z5YVdOUVlYSmhiV1YwWlhKekxrMWhlRkZRTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNkTllYZ2dVVkFuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNkVWFHVWdkWEJ3WlhJZ1ltOTFibVFnWm05eUlIUm9aU0J4ZFdGdWRHbDZZWFJwYjI0Z2NHRnlZVzFsZEdWeUlDaFJVQ2tnYjJZZ2RHaGxJR1Z1WTI5a1pYSXVJREFnUFNCQ1pYTjBJSEYxWVd4cGRIa3NJRFV4SUQwZ2QyOXljM1FnY1hWaGJHbDBlUzRuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSURBZ0x5cHRhVzRxTHl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBMU1TQXZLbTFoZUNvdkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEVXhJQzhxZG1Gc2RXVXFMeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IxYzJWVmNteFFZWEpoYlhOY2JpQWdJQ0FnSUNBZ0lDQWdJQ2xjYmlBZ0lDQWdJQ0FnS1R0Y2JseHVJQ0FnSUNBZ0lDQjBhR2x6TG01MWJXVnlhV05RWVhKaGJXVjBaWEp6TG5ObGRDaGNiaUFnSUNBZ0lDQWdJQ0FnSUU1MWJXVnlhV05RWVhKaGJXVjBaWEp6TGxkbFlsSlVRMFpRVXl4Y2JpQWdJQ0FnSUNBZ0lDQWdJRzVsZHlCVFpYUjBhVzVuVG5WdFltVnlLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRTUxYldWeWFXTlFZWEpoYldWMFpYSnpMbGRsWWxKVVEwWlFVeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuVFdGNElFWlFVeWNzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSjFSb1pTQnRZWGhwYlhWdElFWlFVeUIwYUdGMElGZGxZbEpVUXlCM2FXeHNJSFJ5ZVNCMGJ5QjBjbUZ1YzIxcGRDQm1jbUZ0WlhNZ1lYUXVKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F4SUM4cWJXbHVLaThzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnT1RrNUlDOHFiV0Y0S2k4c1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ05qQWdMeXAyWVd4MVpTb3ZMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFZ6WlZWeWJGQmhjbUZ0YzF4dUlDQWdJQ0FnSUNBZ0lDQWdLVnh1SUNBZ0lDQWdJQ0FwTzF4dVhHNGdJQ0FnSUNBZ0lIUm9hWE11Ym5WdFpYSnBZMUJoY21GdFpYUmxjbk11YzJWMEtGeHVJQ0FnSUNBZ0lDQWdJQ0FnVG5WdFpYSnBZMUJoY21GdFpYUmxjbk11VjJWaVVsUkRUV2x1UW1sMGNtRjBaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHNWxkeUJUWlhSMGFXNW5UblZ0WW1WeUtGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lFNTFiV1Z5YVdOUVlYSmhiV1YwWlhKekxsZGxZbEpVUTAxcGJrSnBkSEpoZEdVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0owMXBiaUJDYVhSeVlYUmxJQ2hyWW5CektTY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKMVJvWlNCdGFXNXBiWFZ0SUdKcGRISmhkR1VnZEdoaGRDQlhaV0pTVkVNZ2MyaHZkV3hrSUhWelpTNG5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJREFnTHlwdGFXNHFMeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0ExTURBd01EQWdMeXB0WVhncUx5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXdJQzhxZG1Gc2RXVXFMeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IxYzJWVmNteFFZWEpoYlhOY2JpQWdJQ0FnSUNBZ0lDQWdJQ2xjYmlBZ0lDQWdJQ0FnS1R0Y2JseHVJQ0FnSUNBZ0lDQjBhR2x6TG01MWJXVnlhV05RWVhKaGJXVjBaWEp6TG5ObGRDaGNiaUFnSUNBZ0lDQWdJQ0FnSUU1MWJXVnlhV05RWVhKaGJXVjBaWEp6TGxkbFlsSlVRMDFoZUVKcGRISmhkR1VzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnVaWGNnVTJWMGRHbHVaMDUxYldKbGNpaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQk9kVzFsY21salVHRnlZVzFsZEdWeWN5NVhaV0pTVkVOTllYaENhWFJ5WVhSbExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDZE5ZWGdnUW1sMGNtRjBaU0FvYTJKd2N5a25MRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2RVYUdVZ2JXRjRhVzExYlNCaWFYUnlZWFJsSUhSb1lYUWdWMlZpVWxSRElITm9iM1ZzWkNCMWMyVXVKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F3SUM4cWJXbHVLaThzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTlRBd01EQXdJQzhxYldGNEtpOHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdNQ0F2S25aaGJIVmxLaThzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZFhObFZYSnNVR0Z5WVcxelhHNGdJQ0FnSUNBZ0lDQWdJQ0FwWEc0Z0lDQWdJQ0FnSUNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1FXUmtJR0VnWTJGc2JHSmhZMnNnZEc4Z1ptbHlaU0IzYUdWdUlIUm9aU0J1ZFcxbGNtbGpJSE5sZEhScGJtY2dhWE1nZEc5bloyeGxaQzVjYmlBZ0lDQWdLaUJBY0dGeVlXMGdhV1FnVkdobElHbGtJRzltSUhSb1pTQm1iR0ZuTGx4dUlDQWdJQ0FxSUVCd1lYSmhiU0J2YmtOb1lXNW5aV1JNYVhOMFpXNWxjaUJVYUdVZ1kyRnNiR0poWTJzZ2RHOGdabWx5WlNCM2FHVnVJSFJvWlNCdWRXMWxjbWxqSUhaaGJIVmxJR05vWVc1blpYTXVYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1gyRmtaRTl1VG5WdFpYSnBZMU5sZEhScGJtZERhR0Z1WjJWa1RHbHpkR1Z1WlhJb1hHNGdJQ0FnSUNBZ0lHbGtPaUJPZFcxbGNtbGpVR0Z5WVcxbGRHVnljMGxrY3l4Y2JpQWdJQ0FnSUNBZ2IyNURhR0Z1WjJWa1RHbHpkR1Z1WlhJNklDaHVaWGRXWVd4MVpUb2diblZ0WW1WeUtTQTlQaUIyYjJsa1hHNGdJQ0FnS1RvZ2RtOXBaQ0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG01MWJXVnlhV05RWVhKaGJXVjBaWEp6TG1oaGN5aHBaQ2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWJuVnRaWEpwWTFCaGNtRnRaWFJsY25OY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdVoyVjBLR2xrS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM1aFpHUlBia05vWVc1blpXUk1hWE4wWlc1bGNpaHZia05vWVc1blpXUk1hWE4wWlc1bGNpazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQmZZV1JrVDI1UGNIUnBiMjVUWlhSMGFXNW5RMmhoYm1kbFpFeHBjM1JsYm1WeUtGeHVJQ0FnSUNBZ0lDQnBaRG9nVDNCMGFXOXVVR0Z5WVcxbGRHVnljMGxrY3l4Y2JpQWdJQ0FnSUNBZ2IyNURhR0Z1WjJWa1RHbHpkR1Z1WlhJNklDaHVaWGRXWVd4MVpUb2djM1J5YVc1bktTQTlQaUIyYjJsa1hHNGdJQ0FnS1RvZ2RtOXBaQ0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG05d2RHbHZibEJoY21GdFpYUmxjbk11YUdGektHbGtLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1dmNIUnBiMjVRWVhKaGJXVjBaWEp6WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTG1kbGRDaHBaQ2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F1WVdSa1QyNURhR0Z1WjJWa1RHbHpkR1Z1WlhJb2IyNURhR0Z1WjJWa1RHbHpkR1Z1WlhJcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dRSEJoY21GdElHbGtJRlJvWlNCcFpDQnZaaUIwYUdVZ2JuVnRaWEpwWXlCelpYUjBhVzVuSUhkbElHRnlaU0JwYm5SbGNtVnpkR1ZrSUdsdUlHZGxkSFJwYm1jZ1lTQjJZV3gxWlNCbWIzSXVYRzRnSUNBZ0lDb2dRSEpsZEhWeWJuTWdWR2hsSUc1MWJXVnlhV01nZG1Gc2RXVWdjM1J2Y21Wa0lHbHVJSFJvWlNCd1lYSmhiV1YwWlhJZ2QybDBhQ0IwYUdVZ2NHRnpjMlZrSUdsa0xseHVJQ0FnSUNBcUwxeHVJQ0FnSUdkbGRFNTFiV1Z5YVdOVFpYUjBhVzVuVm1Gc2RXVW9hV1E2SUU1MWJXVnlhV05RWVhKaGJXVjBaWEp6U1dSektUb2diblZ0WW1WeUlIdGNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXViblZ0WlhKcFkxQmhjbUZ0WlhSbGNuTXVhR0Z6S0dsa0tTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXViblZ0WlhKcFkxQmhjbUZ0WlhSbGNuTXVaMlYwS0dsa0tTNXVkVzFpWlhJN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9ZRlJvWlhKbElHbHpJRzV2SUc1MWJXVnlhV01nYzJWMGRHbHVaeUIzYVhSb0lIUm9aU0JwWkNCdlppQWtlMmxrZldBcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dRSEJoY21GdElHbGtJRlJvWlNCcFpDQnZaaUIwYUdVZ2RHVjRkQ0J6WlhSMGFXNW5JSGRsSUdGeVpTQnBiblJsY21WemRHVmtJR2x1SUdkbGRIUnBibWNnWVNCMllXeDFaU0JtYjNJdVhHNGdJQ0FnSUNvZ1FISmxkSFZ5Ym5NZ1ZHaGxJSFJsZUhRZ2RtRnNkV1VnYzNSdmNtVmtJR2x1SUhSb1pTQndZWEpoYldWMFpYSWdkMmwwYUNCMGFHVWdjR0Z6YzJWa0lHbGtMbHh1SUNBZ0lDQXFMMXh1SUNBZ0lHZGxkRlJsZUhSVFpYUjBhVzVuVm1Gc2RXVW9hV1E2SUZSbGVIUlFZWEpoYldWMFpYSnpTV1J6S1RvZ2MzUnlhVzVuSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdWRHVjRkRkJoY21GdFpYUmxjbk11YUdGektHbGtLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11ZEdWNGRGQmhjbUZ0WlhSbGNuTXVaMlYwS0dsa0tTNTJZV3gxWlNCaGN5QnpkSEpwYm1jN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9ZRlJvWlhKbElHbHpJRzV2SUc1MWJXVnlhV01nYzJWMGRHbHVaeUIzYVhSb0lIUm9aU0JwWkNCdlppQWtlMmxrZldBcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dVMlYwSUc1MWJXSmxjaUJwYmlCMGFHVWdjMlYwZEdsdVp5NWNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2FXUWdWR2hsSUdsa0lHOW1JSFJvWlNCdWRXMWxjbWxqSUhObGRIUnBibWNnZDJVZ1lYSmxJR2x1ZEdWeVpYTjBaV1FnYVc0dVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUhaaGJIVmxJRlJvWlNCdWRXMWxjbWxqSUhaaGJIVmxJSFJ2SUhObGRDNWNiaUFnSUNBZ0tpOWNiaUFnSUNCelpYUk9kVzFsY21salUyVjBkR2x1WnlocFpEb2dUblZ0WlhKcFkxQmhjbUZ0WlhSbGNuTkpaSE1zSUhaaGJIVmxPaUJ1ZFcxaVpYSXBPaUIyYjJsa0lIdGNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXViblZ0WlhKcFkxQmhjbUZ0WlhSbGNuTXVhR0Z6S0dsa0tTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV1ZFcxbGNtbGpVR0Z5WVcxbGRHVnljeTVuWlhRb2FXUXBMbTUxYldKbGNpQTlJSFpoYkhWbE8xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLR0JVYUdWeVpTQnBjeUJ1YnlCdWRXMWxjbWxqSUhObGRIUnBibWNnZDJsMGFDQjBhR1VnYVdRZ2IyWWdKSHRwWkgxZ0tUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRUZrWkNCaElHTmhiR3hpWVdOcklIUnZJR1pwY21VZ2QyaGxiaUIwYUdVZ1pteGhaeUJwY3lCMGIyZG5iR1ZrTGx4dUlDQWdJQ0FxSUVCd1lYSmhiU0JwWkNCVWFHVWdhV1FnYjJZZ2RHaGxJR1pzWVdjdVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUc5dVEyaGhibWRsVEdsemRHVnVaWElnVkdobElHTmhiR3hpWVdOcklIUnZJR1pwY21VZ2QyaGxiaUIwYUdVZ2RtRnNkV1VnWTJoaGJtZGxjeTVjYmlBZ0lDQWdLaTljYmlBZ0lDQmZZV1JrVDI1VFpYUjBhVzVuUTJoaGJtZGxaRXhwYzNSbGJtVnlLRnh1SUNBZ0lDQWdJQ0JwWkRvZ1JteGhaM05KWkhNc1hHNGdJQ0FnSUNBZ0lHOXVRMmhoYm1kbFRHbHpkR1Z1WlhJNklDaHVaWGRHYkdGblZtRnNkV1U2SUdKdmIyeGxZVzRwSUQwK0lIWnZhV1JjYmlBZ0lDQXBPaUIyYjJsa0lIdGNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVabXhoWjNNdWFHRnpLR2xrS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NW1iR0ZuY3k1blpYUW9hV1FwTG05dVEyaGhibWRsSUQwZ2IyNURhR0Z1WjJWTWFYTjBaVzVsY2p0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFRmtaQ0JoSUdOaGJHeGlZV05ySUhSdklHWnBjbVVnZDJobGJpQjBhR1VnZEdWNGRDQnBjeUJqYUdGdVoyVmtMbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQnBaQ0JVYUdVZ2FXUWdiMllnZEdobElHWnNZV2N1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJRzl1UTJoaGJtZGxUR2x6ZEdWdVpYSWdWR2hsSUdOaGJHeGlZV05ySUhSdklHWnBjbVVnZDJobGJpQjBhR1VnZG1Gc2RXVWdZMmhoYm1kbGN5NWNiaUFnSUNBZ0tpOWNiaUFnSUNCZllXUmtUMjVVWlhoMFUyVjBkR2x1WjBOb1lXNW5aV1JNYVhOMFpXNWxjaWhjYmlBZ0lDQWdJQ0FnYVdRNklGUmxlSFJRWVhKaGJXVjBaWEp6U1dSekxGeHVJQ0FnSUNBZ0lDQnZia05vWVc1blpVeHBjM1JsYm1WeU9pQW9ibVYzVkdWNGRGWmhiSFZsT2lCemRISnBibWNwSUQwK0lIWnZhV1JjYmlBZ0lDQXBPaUIyYjJsa0lIdGNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVkR1Y0ZEZCaGNtRnRaWFJsY25NdWFHRnpLR2xrS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NTBaWGgwVUdGeVlXMWxkR1Z5Y3k1blpYUW9hV1FwTG05dVEyaGhibWRsSUQwZ2IyNURhR0Z1WjJWTWFYTjBaVzVsY2p0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFZGxkQ0IwYUdVZ2IzQjBhVzl1SUhkb2FXTm9JR2hoY3lCMGFHVWdaMmwyWlc0Z2FXUXVYRzRnSUNBZ0lDb2dRSEJoY21GdElHbGtJRlJvWlNCcFpDQnZaaUIwYUdVZ2IzQjBhVzl1TGx4dUlDQWdJQ0FxSUVCeVpYUjFjbTV6SUZSb1pTQlRaWFIwYVc1blQzQjBhVzl1SUc5aWFtVmpkQ0J0WVhSamFHbHVaeUJwWkZ4dUlDQWdJQ0FxTDF4dUlDQWdJR2RsZEZObGRIUnBibWRQY0hScGIyNG9hV1E2SUU5d2RHbHZibEJoY21GdFpYUmxjbk5KWkhNcE9pQlRaWFIwYVc1blQzQjBhVzl1SUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXViM0IwYVc5dVVHRnlZVzFsZEdWeWN5NW5aWFFvYVdRcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFZGxkQ0IwYUdVZ2RtRnNkV1VnYjJZZ2RHaGxJR052Ym1acFozVnlZWFJwYjI0Z1pteGhaeUIzYUdsamFDQm9ZWE1nZEdobElHZHBkbVZ1SUdsa0xseHVJQ0FnSUNBcUlFQndZWEpoYlNCcFpDQlVhR1VnZFc1cGNYVmxJR2xrSUdadmNpQjBhR1VnWm14aFp5NWNiaUFnSUNBZ0tpQkFjbVYwZFhKdWN5QlVjblZsSUdsbUlIUm9aU0JtYkdGbklHbHpJR1Z1WVdKc1pXUXVYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2FYTkdiR0ZuUlc1aFlteGxaQ2hwWkRvZ1JteGhaM05KWkhNcE9pQmliMjlzWldGdUlIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11Wm14aFozTXVaMlYwS0dsa0tTNW1iR0ZuSUdGeklHSnZiMnhsWVc0N1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1UyVjBJR1pzWVdjZ2RHOGdZbVVnWlc1aFlteGxaQzlrYVhOaFlteGxaQzVjYmlBZ0lDQWdLaUJBY0dGeVlXMGdhV1FnVkdobElHbGtJRzltSUhSb1pTQm1iR0ZuSUhSdklIUnZaMmRzWlM1Y2JpQWdJQ0FnS2lCQWNHRnlZVzBnWm14aFowVnVZV0pzWldRZ1ZISjFaU0JwWmlCMGFHVWdabXhoWnlCemFHOTFiR1FnWW1VZ1pXNWhZbXhsWkM1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0J6WlhSR2JHRm5SVzVoWW14bFpDaHBaRG9nUm14aFozTkpaSE1zSUdac1lXZEZibUZpYkdWa09pQmliMjlzWldGdUtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNnaGRHaHBjeTVtYkdGbmN5NW9ZWE1vYVdRcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCTWIyZG5aWEl1VjJGeWJtbHVaeWhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JNYjJkblpYSXVSMlYwVTNSaFkydFVjbUZqWlNncExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHQkRZVzV1YjNRZ2RHOW5aMnhsSUdac1lXY2dZMkZzYkdWa0lDUjdhV1I5SUMwZ2FYUWdaRzlsY3lCdWIzUWdaWGhwYzNRZ2FXNGdkR2hsSUVOdmJtWnBaeTVtYkdGbmN5QnRZWEF1WUZ4dUlDQWdJQ0FnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Wm14aFozTXVaMlYwS0dsa0tTNW1iR0ZuSUQwZ1pteGhaMFZ1WVdKc1pXUTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJUWlhRZ2RHaGxJSFJsZUhRZ2MyVjBkR2x1Wnk1Y2JpQWdJQ0FnS2lCQWNHRnlZVzBnYVdRZ1ZHaGxJR2xrSUc5bUlIUm9aU0J6WlhSMGFXNW5YRzRnSUNBZ0lDb2dRSEJoY21GdElITmxkSFJwYm1kV1lXeDFaU0JVYUdVZ2RtRnNkV1VnZEc4Z2MyVjBJR2x1SUhSb1pTQnpaWFIwYVc1bkxseHVJQ0FnSUNBcUwxeHVJQ0FnSUhObGRGUmxlSFJUWlhSMGFXNW5LR2xrT2lCVVpYaDBVR0Z5WVcxbGRHVnljMGxrY3l3Z2MyVjBkR2x1WjFaaGJIVmxPaUJ6ZEhKcGJtY3BJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tDRjBhR2x6TG5SbGVIUlFZWEpoYldWMFpYSnpMbWhoY3locFpDa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lFeHZaMmRsY2k1WFlYSnVhVzVuS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUV4dloyZGxjaTVIWlhSVGRHRmphMVJ5WVdObEtDa3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZRU5oYm01dmRDQnpaWFFnZEdWNGRDQnpaWFIwYVc1bklHTmhiR3hsWkNBa2UybGtmU0F0SUdsMElHUnZaWE1nYm05MElHVjRhWE4wSUdsdUlIUm9aU0JEYjI1bWFXY3VkR1Y0ZEZCaGNtRnRaWFJsY25NZ2JXRndMbUJjYmlBZ0lDQWdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMblJsZUhSUVlYSmhiV1YwWlhKekxtZGxkQ2hwWkNrdWRHVjRkQ0E5SUhObGRIUnBibWRXWVd4MVpUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRk5sZENCMGFHVWdiM0IwYVc5dUlITmxkSFJwYm1jZ2JHbHpkQ0J2WmlCdmNIUnBiMjV6TGx4dUlDQWdJQ0FxSUVCd1lYSmhiU0JwWkNCVWFHVWdhV1FnYjJZZ2RHaGxJSE5sZEhScGJtZGNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2MyVjBkR2x1WjA5d2RHbHZibk1nVkdobElIWmhiSFZsY3lCMGFHVWdjMlYwZEdsdVp5QmpiM1ZzWkNCMFlXdGxYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2MyVjBUM0IwYVc5dVUyVjBkR2x1WjA5d2RHbHZibk1vWEc0Z0lDQWdJQ0FnSUdsa09pQlBjSFJwYjI1UVlYSmhiV1YwWlhKelNXUnpMRnh1SUNBZ0lDQWdJQ0J6WlhSMGFXNW5UM0IwYVc5dWN6b2dRWEp5WVhrOGMzUnlhVzVuUGx4dUlDQWdJQ2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9JWFJvYVhNdWIzQjBhVzl1VUdGeVlXMWxkR1Z5Y3k1b1lYTW9hV1FwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JNYjJkblpYSXVWMkZ5Ym1sdVp5aGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQk1iMmRuWlhJdVIyVjBVM1JoWTJ0VWNtRmpaU2dwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdCRFlXNXViM1FnYzJWMElIUmxlSFFnYzJWMGRHbHVaeUJqWVd4c1pXUWdKSHRwWkgwZ0xTQnBkQ0JrYjJWeklHNXZkQ0JsZUdsemRDQnBiaUIwYUdVZ1EyOXVabWxuTG05d2RHbHZibEJoY21GdFpYUmxjbk1nYldGd0xtQmNiaUFnSUNBZ0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtOXdkR2x2YmxCaGNtRnRaWFJsY25NdVoyVjBLR2xrS1M1dmNIUnBiMjV6SUQwZ2MyVjBkR2x1WjA5d2RHbHZibk03WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCVFpYUWdiM0IwYVc5dUlHVnVkVzBnYzJWMGRHbHVaM01nYzJWc1pXTjBaV1FnYjNCMGFXOXVMbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQnBaQ0JVYUdVZ2FXUWdiMllnZEdobElITmxkSFJwYm1kY2JpQWdJQ0FnS2lCQWNHRnlZVzBnYzJWMGRHbHVaMDl3ZEdsdmJuTWdWR2hsSUhaaGJIVmxJSFJ2SUhObGJHVmpkQ0J2ZFhRZ2IyWWdZV3hzSUhSb1pTQnZjSFJwYjI1elhHNGdJQ0FnSUNvdlhHNGdJQ0FnYzJWMFQzQjBhVzl1VTJWMGRHbHVaMVpoYkhWbEtHbGtPaUJQY0hScGIyNVFZWEpoYldWMFpYSnpTV1J6TENCelpYUjBhVzVuVm1Gc2RXVTZJSE4wY21sdVp5a2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb0lYUm9hWE11YjNCMGFXOXVVR0Z5WVcxbGRHVnljeTVvWVhNb2FXUXBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQk1iMmRuWlhJdVYyRnlibWx1WnloY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCTWIyZG5aWEl1UjJWMFUzUmhZMnRVY21GalpTZ3BMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0JEWVc1dWIzUWdjMlYwSUhSbGVIUWdjMlYwZEdsdVp5QmpZV3hzWldRZ0pIdHBaSDBnTFNCcGRDQmtiMlZ6SUc1dmRDQmxlR2x6ZENCcGJpQjBhR1VnUTI5dVptbG5MbVZ1ZFcxUVlYSmhiV1YwWlhKeklHMWhjQzVnWEc0Z0lDQWdJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV2Y0hScGIyNVFZWEpoYldWMFpYSnpMbWRsZENocFpDa3VjMlZzWldOMFpXUWdQU0J6WlhSMGFXNW5WbUZzZFdVN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlRaWFFnZEdobElHeGhZbVZzSUdadmNpQjBhR1VnWm14aFp5NWNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2FXUWdWR2hsSUdsa0lHOW1JSFJvWlNCbWJHRm5MbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQnNZV0psYkNCVWFHVWdibVYzSUd4aFltVnNJSFJ2SUhWelpTQm1iM0lnZEdobElHWnNZV2N1WEc0Z0lDQWdJQ292WEc0Z0lDQWdjMlYwUm14aFoweGhZbVZzS0dsa09pQkdiR0ZuYzBsa2N5d2diR0ZpWld3NklITjBjbWx1WnlrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvSVhSb2FYTXVabXhoWjNNdWFHRnpLR2xrS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnVEc5bloyVnlMbGRoY201cGJtY29YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdURzluWjJWeUxrZGxkRk4wWVdOclZISmhZMlVvS1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZ1EyRnVibTkwSUhObGRDQnNZV0psYkNCbWIzSWdabXhoWnlCallXeHNaV1FnSkh0cFpIMGdMU0JwZENCa2IyVnpJRzV2ZENCbGVHbHpkQ0JwYmlCMGFHVWdRMjl1Wm1sbkxtWnNZV2R6SUcxaGNDNWdYRzRnSUNBZ0lDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NW1iR0ZuY3k1blpYUW9hV1FwTG14aFltVnNJRDBnYkdGaVpXdzdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJUWlhRZ1lTQnpkV0p6WlhRZ2IyWWdZV3hzSUhObGRIUnBibWR6SUdsdUlHOXVaU0JtZFc1amRHbHZiaUJqWVd4c0xseHVJQ0FnSUNBcVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUhObGRIUnBibWR6SUVFZ0tIQmhjblJwWVd3cElHeHBjM1FnYjJZZ2MyVjBkR2x1WjNNZ2RHOGdjMlYwWEc0Z0lDQWdJQ292WEc0Z0lDQWdjMlYwVTJWMGRHbHVaM01vYzJWMGRHbHVaM002SUZCaGNuUnBZV3c4UVd4c1UyVjBkR2x1WjNNK0tTQjdYRzRnSUNBZ0lDQWdJR1p2Y2lBb1kyOXVjM1FnYTJWNUlHOW1JRTlpYW1WamRDNXJaWGx6S0hObGRIUnBibWR6S1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHbHpSbXhoWjBsa0tHdGxlU2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbk5sZEVac1lXZEZibUZpYkdWa0tHdGxlU3dnYzJWMGRHbHVaM05iYTJWNVhTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tHbHpUblZ0WlhKcFkwbGtLR3RsZVNrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5ObGRFNTFiV1Z5YVdOVFpYUjBhVzVuS0d0bGVTd2djMlYwZEdsdVozTmJhMlY1WFNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0dselZHVjRkRWxrS0d0bGVTa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuTmxkRlJsZUhSVFpYUjBhVzVuS0d0bGVTd2djMlYwZEdsdVozTmJhMlY1WFNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0dselQzQjBhVzl1U1dRb2EyVjVLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjMlYwVDNCMGFXOXVVMlYwZEdsdVoxWmhiSFZsS0d0bGVTd2djMlYwZEdsdVozTmJhMlY1WFNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCSFpYUWdZV3hzSUhObGRIUnBibWR6WEc0Z0lDQWdJQ29nUUhKbGRIVnlibk1nUVd4c0lITmxkSFJwYm1jZ2RtRnNkV1Z6SUdGeklHRnVJRzlpYW1WamRDQjNhWFJvSUhObGRIUnBibWNnYVdSeklHRnpJR3RsZVhOY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JuWlhSVFpYUjBhVzVuY3lncE9pQlFZWEowYVdGc1BFRnNiRk5sZEhScGJtZHpQaUI3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSE5sZEhScGJtZHpPaUJRWVhKMGFXRnNQRUZzYkZObGRIUnBibWR6UGlBOUlIdDlPMXh1SUNBZ0lDQWdJQ0JtYjNJZ0tHTnZibk4wSUZ0clpYa3NJSFpoYkhWbFhTQnZaaUIwYUdsekxtWnNZV2R6TG1WdWRISnBaWE1vS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYzJWMGRHbHVaM05iYTJWNVhTQTlJSFpoYkhWbExtWnNZV2M3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ1ptOXlJQ2hqYjI1emRDQmJhMlY1TENCMllXeDFaVjBnYjJZZ2RHaHBjeTV1ZFcxbGNtbGpVR0Z5WVcxbGRHVnljeTVsYm5SeWFXVnpLQ2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSE5sZEhScGJtZHpXMnRsZVYwZ1BTQjJZV3gxWlM1dWRXMWlaWEk3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ1ptOXlJQ2hqYjI1emRDQmJhMlY1TENCMllXeDFaVjBnYjJZZ2RHaHBjeTUwWlhoMFVHRnlZVzFsZEdWeWN5NWxiblJ5YVdWektDa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lITmxkSFJwYm1kelcydGxlVjBnUFNCMllXeDFaUzUwWlhoME8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR1p2Y2lBb1kyOXVjM1FnVzJ0bGVTd2dkbUZzZFdWZElHOW1JSFJvYVhNdWIzQjBhVzl1VUdGeVlXMWxkR1Z5Y3k1bGJuUnlhV1Z6S0NrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhObGRIUnBibWR6VzJ0bGVWMGdQU0IyWVd4MVpTNXpaV3hsWTNSbFpEdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjMlYwZEdsdVozTTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dSMlYwSUdGc2JDQkdiR0ZuSUhObGRIUnBibWR6SUdGeklHRnVJR0Z5Y21GNUxseHVJQ0FnSUNBcUlFQnlaWFIxY201eklFRnNiQ0JUWlhSMGFXNW5SbXhoWnlCdlltcGxZM1J6WEc0Z0lDQWdJQ292WEc0Z0lDQWdaMlYwUm14aFozTW9LVG9nUVhKeVlYazhVMlYwZEdsdVowWnNZV2MrSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUVGeWNtRjVMbVp5YjIwb2RHaHBjeTVtYkdGbmN5NTJZV3gxWlhNb0tTazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dSMlYwSUdGc2JDQlVaWGgwSUhObGRIUnBibWR6SUdGeklHRnVJR0Z5Y21GNUxseHVJQ0FnSUNBcUlFQnlaWFIxY201eklFRnNiQ0JUWlhSMGFXNW5WR1Y0ZENCdlltcGxZM1J6WEc0Z0lDQWdJQ292WEc0Z0lDQWdaMlYwVkdWNGRGTmxkSFJwYm1kektDazZJRUZ5Y21GNVBGTmxkSFJwYm1kVVpYaDBQaUI3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJCY25KaGVTNW1jbTl0S0hSb2FYTXVkR1Y0ZEZCaGNtRnRaWFJsY25NdWRtRnNkV1Z6S0NrcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFZGxkQ0JoYkd3Z1RuVnRZbVZ5SUhObGRIUnBibWR6SUdGeklHRnVJR0Z5Y21GNUxseHVJQ0FnSUNBcUlFQnlaWFIxY201eklFRnNiQ0JUWlhSMGFXNW5UblZ0WW1WeUlHOWlhbVZqZEhOY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JuWlhST2RXMWxjbWxqVTJWMGRHbHVaM01vS1RvZ1FYSnlZWGs4VTJWMGRHbHVaMDUxYldKbGNqNGdlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdRWEp5WVhrdVpuSnZiU2gwYUdsekxtNTFiV1Z5YVdOUVlYSmhiV1YwWlhKekxuWmhiSFZsY3lncEtUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkhaWFFnWVd4c0lFOXdkR2x2YmlCelpYUjBhVzVuY3lCaGN5QmhiaUJoY25KaGVTNWNiaUFnSUNBZ0tpQkFjbVYwZFhKdWN5QkJiR3dnVTJWMGRHbHVaMDl3ZEdsdmJpQnZZbXBsWTNSelhHNGdJQ0FnSUNvdlhHNGdJQ0FnWjJWMFQzQjBhVzl1VTJWMGRHbHVaM01vS1RvZ1FYSnlZWGs4VTJWMGRHbHVaMDl3ZEdsdmJqNGdlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdRWEp5WVhrdVpuSnZiU2gwYUdsekxtOXdkR2x2YmxCaGNtRnRaWFJsY25NdWRtRnNkV1Z6S0NrcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFVnRhWFFnWlhabGJuUnpJSGRvWlc0Z2MyVjBkR2x1WjNNZ1kyaGhibWRsTGx4dUlDQWdJQ0FxSUVCd1lYSmhiU0JsZG1WdWRFVnRhWFIwWlhKY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JmY21WbmFYTjBaWEpQYmtOb1lXNW5aVVYyWlc1MGN5aGxkbVZ1ZEVWdGFYUjBaWEk2SUVWMlpXNTBSVzFwZEhSbGNpa2dlMXh1SUNBZ0lDQWdJQ0JtYjNJZ0tHTnZibk4wSUd0bGVTQnZaaUIwYUdsekxtWnNZV2R6TG10bGVYTW9LU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ1pteGhaeUE5SUhSb2FYTXVabXhoWjNNdVoyVjBLR3RsZVNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1pteGhaeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdac1lXY3ViMjVEYUdGdVoyVkZiV2wwSUQwZ0tHNWxkMVpoYkhWbE9pQmliMjlzWldGdUtTQTlQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGRtVnVkRVZ0YVhSMFpYSXVaR2x6Y0dGMFkyaEZkbVZ1ZENoY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc1bGR5QlRaWFIwYVc1bmMwTm9ZVzVuWldSRmRtVnVkQ2g3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXUTZJR1pzWVdjdWFXUXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEhsd1pUb2dKMlpzWVdjbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQnVaWGRXWVd4MVpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwWVhKblpYUTZJR1pzWVdkY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnWm05eUlDaGpiMjV6ZENCclpYa2diMllnZEdocGN5NXVkVzFsY21salVHRnlZVzFsZEdWeWN5NXJaWGx6S0NrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJRzUxYldKbGNpQTlJSFJvYVhNdWJuVnRaWEpwWTFCaGNtRnRaWFJsY25NdVoyVjBLR3RsZVNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2JuVnRZbVZ5S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JuVnRZbVZ5TG05dVEyaGhibWRsUlcxcGRDQTlJQ2h1WlhkV1lXeDFaVG9nYm5WdFltVnlLU0E5UGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxkbVZ1ZEVWdGFYUjBaWEl1WkdsemNHRjBZMmhGZG1WdWRDaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHNWxkeUJUWlhSMGFXNW5jME5vWVc1blpXUkZkbVZ1ZENoN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1E2SUc1MWJXSmxjaTVwWkN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBlWEJsT2lBbmJuVnRZbVZ5Snl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ2JtVjNWbUZzZFdVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR0Z5WjJWME9pQnVkVzFpWlhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnWm05eUlDaGpiMjV6ZENCclpYa2diMllnZEdocGN5NTBaWGgwVUdGeVlXMWxkR1Z5Y3k1clpYbHpLQ2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElIUmxlSFFnUFNCMGFHbHpMblJsZUhSUVlYSmhiV1YwWlhKekxtZGxkQ2hyWlhrcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUmxlSFFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMFpYaDBMbTl1UTJoaGJtZGxSVzFwZENBOUlDaHVaWGRXWVd4MVpUb2djM1J5YVc1bktTQTlQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGRtVnVkRVZ0YVhSMFpYSXVaR2x6Y0dGMFkyaEZkbVZ1ZENoY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc1bGR5QlRaWFIwYVc1bmMwTm9ZVzVuWldSRmRtVnVkQ2g3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXUTZJSFJsZUhRdWFXUXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEhsd1pUb2dKM1JsZUhRbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQnVaWGRXWVd4MVpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwWVhKblpYUTZJSFJsZUhSY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnWm05eUlDaGpiMjV6ZENCclpYa2diMllnZEdocGN5NXZjSFJwYjI1UVlYSmhiV1YwWlhKekxtdGxlWE1vS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdiM0IwYVc5dUlEMGdkR2hwY3k1dmNIUnBiMjVRWVhKaGJXVjBaWEp6TG1kbGRDaHJaWGtwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0c5d2RHbHZiaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc5d2RHbHZiaTV2YmtOb1lXNW5aVVZ0YVhRZ1BTQW9ibVYzVm1Gc2RXVTZJSE4wY21sdVp5a2dQVDVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pYWmxiblJGYldsMGRHVnlMbVJwYzNCaGRHTm9SWFpsYm5Rb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdVpYY2dVMlYwZEdsdVozTkRhR0Z1WjJWa1JYWmxiblFvZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbGtPaUJ2Y0hScGIyNHVhV1FzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RIbHdaVG9nSjI5d2RHbHZiaWNzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SUc1bGQxWmhiSFZsTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUmhjbWRsZERvZ2IzQjBhVzl1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVmVnh1WEc0dktpcGNiaUFxSUZSb1pTQmxiblZ0SUdGemMyOWphV0YwWldRZ2QybDBhQ0IwYUdVZ2JXOTFjMlVnWW1WcGJtY2diRzlqYTJWa0lHOXlJR2h2ZG1WeWFXNW5YRzRnS2k5Y2JtVjRjRzl5ZENCbGJuVnRJRU52Ym5SeWIyeFRZMmhsYldWVWVYQmxJSHRjYmlBZ0lDQk1iMk5yWldSTmIzVnpaU0E5SURBc1hHNGdJQ0FnU0c5MlpYSnBibWROYjNWelpTQTlJREZjYm4xY2JpSXNJaTh2SUVOdmNIbHlhV2RvZENCRmNHbGpJRWRoYldWekxDQkpibU11SUVGc2JDQlNhV2RvZEhNZ1VtVnpaWEoyWldRdVhHNWNiaThxS2x4dUlDb2dRbUZ6WlNCamJHRnpjeUJtYjNJZ1lTQnpaWFIwYVc1bklIUm9ZWFFnYUdGeklHRWdkR1Y0ZENCc1lXSmxiQ0JoYm1RZ1lXNGdZWEppYVhSeVlYSjVJSE5sZEhScGJtY2dkbUZzZFdVZ2FYUWdjM1J2Y21WekxseHVJQ292WEc1bGVIQnZjblFnWTJ4aGMzTWdVMlYwZEdsdVowSmhjMlVnZTF4dUlDQWdJR2xrT2lCemRISnBibWM3WEc0Z0lDQWdaR1Z6WTNKcGNIUnBiMjQ2SUhOMGNtbHVaenRjYmlBZ0lDQmZiR0ZpWld3NklITjBjbWx1Wnp0Y2JpQWdJQ0JmZG1Gc2RXVTZJSFZ1YTI1dmQyNDdYRzRnSUNBZ2IyNURhR0Z1WjJVNklDaGphR0Z1WjJWa1ZtRnNkV1U2SUhWdWEyNXZkMjRzSUhObGRIUnBibWM2SUZObGRIUnBibWRDWVhObEtTQTlQaUIyYjJsa08xeHVJQ0FnSUc5dVEyaGhibWRsUlcxcGREb2dLR05vWVc1blpXUldZV3gxWlRvZ2RXNXJibTkzYmlrZ1BUNGdkbTlwWkR0Y2JseHVJQ0FnSUdOdmJuTjBjblZqZEc5eUtGeHVJQ0FnSUNBZ0lDQnBaRG9nYzNSeWFXNW5MRnh1SUNBZ0lDQWdJQ0JzWVdKbGJEb2djM1J5YVc1bkxGeHVJQ0FnSUNBZ0lDQmtaWE5qY21sd2RHbHZiam9nYzNSeWFXNW5MRnh1SUNBZ0lDQWdJQ0JrWldaaGRXeDBVMlYwZEdsdVoxWmhiSFZsT2lCMWJtdHViM2R1TEZ4dVhIUmNkQzh2SUdWemJHbHVkQzFrYVhOaFlteGxMVzVsZUhRdGJHbHVaU0JBZEhsd1pYTmpjbWx3ZEMxbGMyeHBiblF2Ym04dFpXMXdkSGt0Wm5WdVkzUnBiMjVjYmx4MFhIUmtaV1poZFd4MFQyNURhR0Z1WjJWTWFYTjBaVzVsY2pvZ0tHTm9ZVzVuWldSV1lXeDFaVG9nZFc1cmJtOTNiaXdnYzJWMGRHbHVaem9nVTJWMGRHbHVaMEpoYzJVcElEMCtJSFp2YVdRZ1BTQW9LU0E5UGlCN0lDOHFJRVJ2SUc1dmRHaHBibWNzSUhSdklHSmxJRzkyWlhKeWFXUmtaVzR1SUNvdklIMWNiaUFnSUNBcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1dmJrTm9ZVzVuWlNBOUlHUmxabUYxYkhSUGJrTm9ZVzVuWlV4cGMzUmxibVZ5TzF4dVhHNGdJQ0FnSUNBZ0lIUm9hWE11YjI1RGFHRnVaMlZGYldsMElEMGdLQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnTHlvZ1JHOGdibTkwYUdsdVp5d2dkRzhnWW1VZ2IzWmxjbkpwWkdSbGJpNGdLaTljYmlBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVwWkNBOUlHbGtPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtUmxjMk55YVhCMGFXOXVJRDBnWkdWelkzSnBjSFJwYjI0N1hHNGdJQ0FnSUNBZ0lIUm9hWE11YkdGaVpXd2dQU0JzWVdKbGJEdGNiaUFnSUNBZ0lDQWdkR2hwY3k1MllXeDFaU0E5SUdSbFptRjFiSFJUWlhSMGFXNW5WbUZzZFdVN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1UyVjBJSFJvWlNCc1lXSmxiQ0IwWlhoMElHWnZjaUIwYUdVZ2MyVjBkR2x1Wnk1Y2JpQWdJQ0FnS2lCQWNHRnlZVzBnYkdGaVpXd2djMlYwZEdsdVp5QnNZV0psYkM1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0J3ZFdKc2FXTWdjMlYwSUd4aFltVnNLR2x1VEdGaVpXdzZJSE4wY21sdVp5a2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXNZV0psYkNBOUlHbHVUR0ZpWld3N1hHNGdJQ0FnSUNBZ0lIUm9hWE11YjI1RGFHRnVaMlZGYldsMEtIUm9hWE11WDNaaGJIVmxLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJBY21WMGRYSnVjeUJVYUdVZ2JHRmlaV3dnZEdWNGRDQm1iM0lnZEdobElITmxkSFJwYm1jdVhHNGdJQ0FnSUNvdlhHNGdJQ0FnY0hWaWJHbGpJR2RsZENCc1lXSmxiQ2dwT2lCemRISnBibWNnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZiR0ZpWld3N1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1FISmxkSFZ5YmlCVWFHVWdjMlYwZEdsdVp5ZHpJSFpoYkhWbExseHVJQ0FnSUNBcUwxeHVJQ0FnSUhCMVlteHBZeUJuWlhRZ2RtRnNkV1VvS1RvZ2RXNXJibTkzYmlCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDkyWVd4MVpUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlZjR1JoZEdVZ2RHaGxJSE5sZEhScGJtY25jeUJ6ZEc5eVpXUWdkbUZzZFdVdVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUdsdVZtRnNkV1VnVkdobElHNWxkeUIyWVd4MVpTQm1iM0lnZEdobElITmxkSFJwYm1jdVhHNGdJQ0FnSUNvdlhHNGdJQ0FnY0hWaWJHbGpJSE5sZENCMllXeDFaU2hwYmxaaGJIVmxPaUIxYm10dWIzZHVLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYM1poYkhWbElEMGdhVzVXWVd4MVpUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1dmJrTm9ZVzVuWlNoMGFHbHpMbDkyWVd4MVpTd2dkR2hwY3lrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YjI1RGFHRnVaMlZGYldsMEtIUm9hWE11WDNaaGJIVmxLVHRjYmlBZ0lDQjlYRzU5WEc0aUxDSXZMeUJEYjNCNWNtbG5hSFFnUlhCcFl5QkhZVzFsY3l3Z1NXNWpMaUJCYkd3Z1VtbG5hSFJ6SUZKbGMyVnlkbVZrTGx4dVhHNXBiWEJ2Y25RZ2RIbHdaU0I3SUVac1lXZHpTV1J6SUgwZ1puSnZiU0FuTGk5RGIyNW1hV2NuTzF4dWFXMXdiM0owSUhzZ1UyVjBkR2x1WjBKaGMyVWdmU0JtY205dElDY3VMMU5sZEhScGJtZENZWE5sSnp0Y2JseHVMeW9xWEc0Z0tpQkJJR0p2YjJ4bFlXNGdabXhoWnlCelpYUjBhVzVuSUc5aWFtVmpkQ0IzYVhSb0lHRWdkR1Y0ZENCc1lXSmxiQzVjYmlBcUwxeHVaWGh3YjNKMElHTnNZWE56SUZObGRIUnBibWRHYkdGblBGeHVJQ0FnSUVOMWMzUnZiVWxrY3lCbGVIUmxibVJ6SUhOMGNtbHVaeUE5SUVac1lXZHpTV1J6WEc0K0lHVjRkR1Z1WkhNZ1UyVjBkR2x1WjBKaGMyVWdlMXh1SUNBZ0lHbGtPaUJHYkdGbmMwbGtjeUI4SUVOMWMzUnZiVWxrY3p0Y2JpQWdJQ0J2YmtOb1lXNW5aVVZ0YVhRNklDaGphR0Z1WjJWa1ZtRnNkV1U2SUdKdmIyeGxZVzRwSUQwK0lIWnZhV1E3WEc0Z0lDQWdkWE5sVlhKc1VHRnlZVzF6T2lCaWIyOXNaV0Z1TzF4dVhHNGdJQ0FnWTI5dWMzUnlkV04wYjNJb1hHNGdJQ0FnSUNBZ0lHbGtPaUJHYkdGbmMwbGtjeUI4SUVOMWMzUnZiVWxrY3l4Y2JpQWdJQ0FnSUNBZ2JHRmlaV3c2SUhOMGNtbHVaeXhjYmlBZ0lDQWdJQ0FnWkdWelkzSnBjSFJwYjI0NklITjBjbWx1Wnl4Y2JpQWdJQ0FnSUNBZ1pHVm1ZWFZzZEVac1lXZFdZV3gxWlRvZ1ltOXZiR1ZoYml4Y2JpQWdJQ0FnSUNBZ2RYTmxWWEpzVUdGeVlXMXpPaUJpYjI5c1pXRnVMRnh1WEhSY2RDOHZJR1Z6YkdsdWRDMWthWE5oWW14bExXNWxlSFF0YkdsdVpTQkFkSGx3WlhOamNtbHdkQzFsYzJ4cGJuUXZibTh0Wlcxd2RIa3RablZ1WTNScGIyNWNibHgwWEhSa1pXWmhkV3gwVDI1RGFHRnVaMlZNYVhOMFpXNWxjam9nS0dOb1lXNW5aV1JXWVd4MVpUb2dkVzVyYm05M2Jpd2djMlYwZEdsdVp6b2dVMlYwZEdsdVowSmhjMlVwSUQwK0lIWnZhV1FnUFNBb0tTQTlQaUI3SUM4cUlFUnZJRzV2ZEdocGJtY3NJSFJ2SUdKbElHOTJaWEp5YVdSa1pXNHVJQ292SUgxY2JpQWdJQ0FwSUh0Y2JpQWdJQ0FnSUNBZ2MzVndaWElvYVdRc0lHeGhZbVZzTENCa1pYTmpjbWx3ZEdsdmJpd2daR1ZtWVhWc2RFWnNZV2RXWVd4MVpTd2daR1ZtWVhWc2RFOXVRMmhoYm1kbFRHbHpkR1Z1WlhJcE8xeHVYRzRnSUNBZ0lDQWdJR052Ym5OMElIVnliRkJoY21GdGN5QTlJRzVsZHlCVlVreFRaV0Z5WTJoUVlYSmhiWE1vZDJsdVpHOTNMbXh2WTJGMGFXOXVMbk5sWVhKamFDazdYRzRnSUNBZ0lDQWdJR2xtSUNnaGRYTmxWWEpzVUdGeVlXMXpJSHg4SUNGMWNteFFZWEpoYlhNdWFHRnpLSFJvYVhNdWFXUXBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1ac1lXY2dQU0JrWldaaGRXeDBSbXhoWjFaaGJIVmxPMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdjR0Z5YzJVZ1pteGhaeUJtY205dElIVnliQ0J3WVhKaGJXVjBaWEp6WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCMWNteFFZWEpoYlVac1lXY2dQU0IwYUdsekxtZGxkRlZ5YkZCaGNtRnRSbXhoWnlncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NW1iR0ZuSUQwZ2RYSnNVR0Z5WVcxR2JHRm5PMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkWE5sVlhKc1VHRnlZVzF6SUQwZ2RYTmxWWEpzVUdGeVlXMXpPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRkJoY25ObElIUm9aU0JtYkdGbklIWmhiSFZsSUdaeWIyMGdkR2hsSUhWeWJDQndZWEpoYldWMFpYSnpMbHh1SUNBZ0lDQXFJRUJ5WlhSMWNtNXpJRlJ5ZFdVZ2FXWWdkR2hsSUhWeWJDQndZWEpoYldWMFpYSnpJR052Ym5SaGFXNXpJQzgvYVdRc0lHSjFkQ0JHWVd4elpTQnBaaUF2UDJsa1BXWmhiSE5sWEc0Z0lDQWdJQ292WEc0Z0lDQWdaMlYwVlhKc1VHRnlZVzFHYkdGbktDazZJR0p2YjJ4bFlXNGdlMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQjFjbXhRWVhKaGJYTWdQU0J1WlhjZ1ZWSk1VMlZoY21Ob1VHRnlZVzF6S0hkcGJtUnZkeTVzYjJOaGRHbHZiaTV6WldGeVkyZ3BPMXh1SUNBZ0lDQWdJQ0JwWmlBb2RYSnNVR0Z5WVcxekxtaGhjeWgwYUdsekxtbGtLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhWeWJGQmhjbUZ0Y3k1blpYUW9kR2hwY3k1cFpDa2dQVDA5SUNkbVlXeHpaU2NnZkh4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMWNteFFZWEpoYlhNdVoyVjBLSFJvYVhNdWFXUXBJRDA5UFNBblJtRnNjMlVuWEc0Z0lDQWdJQ0FnSUNBZ0lDQXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RISjFaVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWm1Gc2MyVTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dVR1Z5YzJsemRDQjBhR1VnYzJWMGRHbHVaeUIyWVd4MVpTQnBiaUJWVWt3dVhHNGdJQ0FnSUNvdlhHNGdJQ0FnY0hWaWJHbGpJSFZ3WkdGMFpWVlNURkJoY21GdGN5Z3BJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11ZFhObFZYSnNVR0Z5WVcxektTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QnpaWFFnZFhKc0lIQmhjbUZ0YzF4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2RYSnNVR0Z5WVcxeklEMGdibVYzSUZWU1RGTmxZWEpqYUZCaGNtRnRjeWgzYVc1a2IzY3ViRzlqWVhScGIyNHVjMlZoY21Ob0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG1ac1lXY2dQVDA5SUhSeWRXVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IxY214UVlYSmhiWE11YzJWMEtIUm9hWE11YVdRc0lDZDBjblZsSnlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFZ5YkZCaGNtRnRjeTV6WlhRb2RHaHBjeTVwWkN3Z0oyWmhiSE5sSnlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjNhVzVrYjNjdWFHbHpkRzl5ZVM1eVpYQnNZV05sVTNSaGRHVW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdlMzBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSnljc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RYSnNVR0Z5WVcxekxuUnZVM1J5YVc1bktDa2dJVDA5SUNjblhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRDhnWUNSN2JHOWpZWFJwYjI0dWNHRjBhRzVoYldWOVB5UjdkWEpzVUdGeVlXMXpmV0JjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ09pQmdKSHRzYjJOaGRHbHZiaTV3WVhSb2JtRnRaWDFnWEc0Z0lDQWdJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUlc1aFlteGxjeUIwYUdseklHWnNZV2N1WEc0Z0lDQWdJQ292WEc0Z0lDQWdjSFZpYkdsaklHVnVZV0pzWlNncE9pQjJiMmxrSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVtYkdGbklEMGdkSEoxWlR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCQWNtVjBkWEp1SUZSb1pTQnpaWFIwYVc1bkozTWdkbUZzZFdVdVhHNGdJQ0FnSUNvdlhHNGdJQ0FnY0hWaWJHbGpJR2RsZENCbWJHRm5LQ2s2SUdKdmIyeGxZVzRnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnSVNGMGFHbHpMblpoYkhWbE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGVndaR0YwWlNCMGFHVWdjMlYwZEdsdVp5ZHpJSE4wYjNKbFpDQjJZV3gxWlM1Y2JpQWdJQ0FnS2lCQWNHRnlZVzBnYVc1V1lXeDFaU0JVYUdVZ2JtVjNJSFpoYkhWbElHWnZjaUIwYUdVZ2MyVjBkR2x1Wnk1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0J3ZFdKc2FXTWdjMlYwSUdac1lXY29hVzVXWVd4MVpUb2dZbTl2YkdWaGJpa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxuWmhiSFZsSUQwZ2FXNVdZV3gxWlR0Y2JpQWdJQ0I5WEc1OVhHNGlMQ0l2THlCRGIzQjVjbWxuYUhRZ1JYQnBZeUJIWVcxbGN5d2dTVzVqTGlCQmJHd2dVbWxuYUhSeklGSmxjMlZ5ZG1Wa0xseHVYRzVwYlhCdmNuUWdkSGx3WlNCN0lFNTFiV1Z5YVdOUVlYSmhiV1YwWlhKelNXUnpJSDBnWm5KdmJTQW5MaTlEYjI1bWFXY25PMXh1YVcxd2IzSjBJSHNnVTJWMGRHbHVaMEpoYzJVZ2ZTQm1jbTl0SUNjdUwxTmxkSFJwYm1kQ1lYTmxKenRjYmx4dUx5b3FYRzRnS2lCQklHNTFiV0psY2lCelpYUjBhVzVuSUc5aWFtVmpkQ0IzYVhSb0lHRWdkR1Y0ZENCc1lXSmxiQzRnVFdsdUlHRnVaQ0J0WVhnZ2JHbHRhWFFnZEdobElISmhibWRsSUc5bUlHRnNiRzkzWldRZ2RtRnNkV1Z6TGx4dUlDb3ZYRzVsZUhCdmNuUWdZMnhoYzNNZ1UyVjBkR2x1WjA1MWJXSmxjanhjYmlBZ0lDQkRkWE4wYjIxSlpITWdaWGgwWlc1a2N5QnpkSEpwYm1jZ1BTQk9kVzFsY21salVHRnlZVzFsZEdWeWMwbGtjMXh1UGlCbGVIUmxibVJ6SUZObGRIUnBibWRDWVhObElIdGNiaUFnSUNCZmJXbHVPaUJ1ZFcxaVpYSTdYRzRnSUNBZ1gyMWhlRG9nYm5WdFltVnlPMXh1WEc0Z0lDQWdhV1E2SUU1MWJXVnlhV05RWVhKaGJXVjBaWEp6U1dSeklId2dRM1Z6ZEc5dFNXUnpPMXh1SUNBZ0lHOXVRMmhoYm1kbFJXMXBkRG9nS0dOb1lXNW5aV1JXWVd4MVpUb2diblZ0WW1WeUtTQTlQaUIyYjJsa08xeHVJQ0FnSUhWelpWVnliRkJoY21GdGN6b2dZbTl2YkdWaGJqdGNibHh1SUNBZ0lHTnZibk4wY25WamRHOXlLRnh1SUNBZ0lDQWdJQ0JwWkRvZ1RuVnRaWEpwWTFCaGNtRnRaWFJsY25OSlpITWdmQ0JEZFhOMGIyMUpaSE1zWEc0Z0lDQWdJQ0FnSUd4aFltVnNPaUJ6ZEhKcGJtY3NYRzRnSUNBZ0lDQWdJR1JsYzJOeWFYQjBhVzl1T2lCemRISnBibWNzWEc0Z0lDQWdJQ0FnSUcxcGJqb2diblZ0WW1WeUxGeHVJQ0FnSUNBZ0lDQnRZWGc2SUc1MWJXSmxjaXhjYmlBZ0lDQWdJQ0FnWkdWbVlYVnNkRTUxYldKbGNqb2diblZ0WW1WeUxGeHVJQ0FnSUNBZ0lDQjFjMlZWY214UVlYSmhiWE02SUdKdmIyeGxZVzRzWEc1Y2RGeDBMeThnWlhOc2FXNTBMV1JwYzJGaWJHVXRibVY0ZEMxc2FXNWxJRUIwZVhCbGMyTnlhWEIwTFdWemJHbHVkQzl1YnkxbGJYQjBlUzFtZFc1amRHbHZibHh1WEhSY2RHUmxabUYxYkhSUGJrTm9ZVzVuWlV4cGMzUmxibVZ5T2lBb1kyaGhibWRsWkZaaGJIVmxPaUIxYm10dWIzZHVMQ0J6WlhSMGFXNW5PaUJUWlhSMGFXNW5RbUZ6WlNrZ1BUNGdkbTlwWkNBOUlDZ3BJRDArSUhzZ0x5b2dSRzhnYm05MGFHbHVaeXdnZEc4Z1ltVWdiM1psY25KcFpHUmxiaTRnS2k4Z2ZWeHVJQ0FnSUNrZ2UxeHVJQ0FnSUNBZ0lDQnpkWEJsY2locFpDd2diR0ZpWld3c0lHUmxjMk55YVhCMGFXOXVMQ0JrWldaaGRXeDBUblZ0WW1WeUxDQmtaV1poZFd4MFQyNURhR0Z1WjJWTWFYTjBaVzVsY2lrN1hHNWNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmJXbHVJRDBnYldsdU8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5dFlYZ2dQU0J0WVhnN1hHNWNiaUFnSUNBZ0lDQWdMeThnWVhSMFpXMXdkQ0IwYnlCeVpXRmtJSFJvWlNCdWRXMWlaWElnWm5KdmJTQjBhR1VnZFhKc0lIQmhjbUZ0YzF4dUlDQWdJQ0FnSUNCamIyNXpkQ0IxY214UVlYSmhiWE1nUFNCdVpYY2dWVkpNVTJWaGNtTm9VR0Z5WVcxektIZHBibVJ2ZHk1c2IyTmhkR2x2Ymk1elpXRnlZMmdwTzF4dUlDQWdJQ0FnSUNCcFppQW9JWFZ6WlZWeWJGQmhjbUZ0Y3lCOGZDQWhkWEpzVUdGeVlXMXpMbWhoY3loMGFHbHpMbWxrS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXVkVzFpWlhJZ1BTQmtaV1poZFd4MFRuVnRZbVZ5TzF4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2NHRnljMlZrVm1Gc2RXVWdQU0JPZFcxaVpYSXVjR0Z5YzJWSmJuUW9kWEpzVUdGeVlXMXpMbWRsZENoMGFHbHpMbWxrS1NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtNTFiV0psY2lBOUlFNTFiV0psY2k1cGMwNWhUaWh3WVhKelpXUldZV3gxWlNsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBL0lHUmxabUYxYkhST2RXMWlaWEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E2SUhCaGNuTmxaRlpoYkhWbE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSFJvYVhNdWRYTmxWWEpzVUdGeVlXMXpJRDBnZFhObFZYSnNVR0Z5WVcxek8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGQmxjbk5wYzNRZ2RHaGxJSE5sZEhScGJtY2dkbUZzZFdVZ2FXNGdWVkpNTGx4dUlDQWdJQ0FxTDF4dUlDQWdJSEIxWW14cFl5QjFjR1JoZEdWVlVreFFZWEpoYlhNb0tUb2dkbTlwWkNCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxuVnpaVlZ5YkZCaGNtRnRjeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnYzJWMElIVnliQ0J3WVhKaGJYTWdiR2xyWlNBL2FXUTliblZ0WW1WeVhHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQjFjbXhRWVhKaGJYTWdQU0J1WlhjZ1ZWSk1VMlZoY21Ob1VHRnlZVzF6S0hkcGJtUnZkeTVzYjJOaGRHbHZiaTV6WldGeVkyZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RYSnNVR0Z5WVcxekxuTmxkQ2gwYUdsekxtbGtMQ0IwYUdsekxtNTFiV0psY2k1MGIxTjBjbWx1WnlncEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhkcGJtUnZkeTVvYVhOMGIzSjVMbkpsY0d4aFkyVlRkR0YwWlNoY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCN2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5KeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IxY214UVlYSmhiWE11ZEc5VGRISnBibWNvS1NBaFBUMGdKeWRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1B5QmdKSHRzYjJOaGRHbHZiaTV3WVhSb2JtRnRaWDAvSkh0MWNteFFZWEpoYlhOOVlGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E2SUdBa2UyeHZZMkYwYVc5dUxuQmhkR2h1WVcxbGZXQmNiaUFnSUNBZ0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlRaWFFnZEdobElHNTFiV0psY2lCMllXeDFaU0FvZDJsc2JDQmlaU0JqYkdGdGNHVmtJSGRwZEdocGJpQnlZVzVuWlNrdVhHNGdJQ0FnSUNvdlhHNGdJQ0FnY0hWaWJHbGpJSE5sZENCdWRXMWlaWElvYm1WM1RuVnRZbVZ5T2lCdWRXMWlaWElwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTUyWVd4MVpTQTlJSFJvYVhNdVkyeGhiWEFvYm1WM1RuVnRZbVZ5S1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCQWNtVjBkWEp1Y3lCVWFHVWdiblZ0WW1WeUlITjBiM0psWkM1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0J3ZFdKc2FXTWdaMlYwSUc1MWJXSmxjaWdwT2lCdWRXMWlaWElnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NTJZV3gxWlNCaGN5QnVkVzFpWlhJN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1EyeGhiWEJ6SUdFZ2JuVnRZbVZ5SUdKbGRIZGxaVzRnZEdobElHMXBiaUJoYm1RZ2JXRjRJSFpoYkhWbGN5QW9hVzVqYkhWemFYWmxLUzVjYmlBZ0lDQWdLaUJBY0dGeVlXMGdhVzVPZFcxaVpYSWdWR2hsSUc1MWJXSmxjaUIwYnlCamJHRnRjQzVjYmlBZ0lDQWdLaUJBY21WMGRYSnVjeUJVYUdVZ1kyeGhiWEJsWkNCdWRXMWlaWEl1WEc0Z0lDQWdJQ292WEc0Z0lDQWdjSFZpYkdsaklHTnNZVzF3S0dsdVRuVnRZbVZ5T2lCdWRXMWlaWElwT2lCdWRXMWlaWElnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnVFdGMGFDNXRZWGdvVFdGMGFDNXRhVzRvZEdocGN5NWZiV0Y0TENCcGJrNTFiV0psY2lrc0lIUm9hWE11WDIxcGJpazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dVbVYwZFhKdWN5QjBhR1VnYldsdWFXMTFiU0IyWVd4MVpWeHVJQ0FnSUNBcUlFQnlaWFIxY201eklGUm9aU0J0YVc1cGJYVnRJSFpoYkhWbFhHNGdJQ0FnSUNvdlhHNGdJQ0FnY0hWaWJHbGpJR2RsZENCdGFXNG9LVG9nYm5WdFltVnlJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyMXBianRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJTWlhSMWNtNXpJSFJvWlNCdFlYaHBiWFZ0SUhaaGJIVmxYRzRnSUNBZ0lDb2dRSEpsZEhWeWJuTWdWR2hsSUcxaGVHbHRkVzBnZG1Gc2RXVmNiaUFnSUNBZ0tpOWNiaUFnSUNCd2RXSnNhV01nWjJWMElHMWhlQ2dwT2lCdWRXMWlaWElnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZiV0Y0TzF4dUlDQWdJSDFjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVGa1pDQmhJR05vWVc1blpTQnNhWE4wWlc1bGNpQjBieUIwYUdVZ2JuVnRZbVZ5SUc5aWFtVmpkQzVjYmlBZ0lDQWdLaTljYmlBZ0lDQndkV0pzYVdNZ1lXUmtUMjVEYUdGdVoyVmtUR2x6ZEdWdVpYSW9iMjVEYUdGdVoyVmtSblZ1WXpvZ0tHNWxkMDUxYldKbGNqb2diblZ0WW1WeUtTQTlQaUIyYjJsa0tTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWIyNURhR0Z1WjJVZ1BTQnZia05vWVc1blpXUkdkVzVqTzF4dUlDQWdJSDFjYm4xY2JpSXNJaTh2SUVOdmNIbHlhV2RvZENCRmNHbGpJRWRoYldWekxDQkpibU11SUVGc2JDQlNhV2RvZEhNZ1VtVnpaWEoyWldRdVhHNWNibWx0Y0c5eWRDQjBlWEJsSUhzZ1QzQjBhVzl1VUdGeVlXMWxkR1Z5YzBsa2N5QjlJR1p5YjIwZ0p5NHZRMjl1Wm1sbkp6dGNibWx0Y0c5eWRDQjdJRk5sZEhScGJtZENZWE5sSUgwZ1puSnZiU0FuTGk5VFpYUjBhVzVuUW1GelpTYzdYRzVjYmk4cUtseHVJQ29nUVc0Z1QzQjBhVzl1SUhObGRIUnBibWNnYjJKcVpXTjBJSGRwZEdnZ1lTQjBaWGgwSUd4aFltVnNMaUJCYkd4dmQzTWdlVzkxSUhSdklITndaV05wWm5rZ1lXNGdZWEp5WVhrZ2IyWWdiM0IwYVc5dWN5QmhibVFnYzJWc1pXTjBJRzl1WlNCdlppQjBhR1Z0TGx4dUlDb3ZYRzVsZUhCdmNuUWdZMnhoYzNNZ1UyVjBkR2x1WjA5d2RHbHZianhjYmlBZ0lDQkRkWE4wYjIxSlpITWdaWGgwWlc1a2N5QnpkSEpwYm1jZ1BTQlBjSFJwYjI1UVlYSmhiV1YwWlhKelNXUnpYRzQrSUdWNGRHVnVaSE1nVTJWMGRHbHVaMEpoYzJVZ2UxeHVJQ0FnSUdsa09pQlBjSFJwYjI1UVlYSmhiV1YwWlhKelNXUnpJSHdnUTNWemRHOXRTV1J6TzF4dUlDQWdJRzl1UTJoaGJtZGxSVzFwZERvZ0tHTm9ZVzVuWldSV1lXeDFaVG9nYzNSeWFXNW5LU0E5UGlCMmIybGtPMXh1SUNBZ0lGOXZjSFJwYjI1ek9pQkJjbkpoZVR4emRISnBibWMrTzF4dUlDQWdJSFZ6WlZWeWJGQmhjbUZ0Y3pvZ1ltOXZiR1ZoYmp0Y2JseHVJQ0FnSUdOdmJuTjBjblZqZEc5eUtGeHVJQ0FnSUNBZ0lDQnBaRG9nVDNCMGFXOXVVR0Z5WVcxbGRHVnljMGxrY3lCOElFTjFjM1J2YlVsa2N5eGNiaUFnSUNBZ0lDQWdiR0ZpWld3NklITjBjbWx1Wnl4Y2JpQWdJQ0FnSUNBZ1pHVnpZM0pwY0hScGIyNDZJSE4wY21sdVp5eGNiaUFnSUNBZ0lDQWdaR1ZtWVhWc2RGUmxlSFJXWVd4MVpUb2djM1J5YVc1bkxGeHVJQ0FnSUNBZ0lDQnZjSFJwYjI1ek9pQkJjbkpoZVR4emRISnBibWMrTEZ4dUlDQWdJQ0FnSUNCMWMyVlZjbXhRWVhKaGJYTTZJR0p2YjJ4bFlXNHNYRzVjZEZ4MEx5OGdaWE5zYVc1MExXUnBjMkZpYkdVdGJtVjRkQzFzYVc1bElFQjBlWEJsYzJOeWFYQjBMV1Z6YkdsdWRDOXVieTFsYlhCMGVTMW1kVzVqZEdsdmJseHVYSFJjZEdSbFptRjFiSFJQYmtOb1lXNW5aVXhwYzNSbGJtVnlPaUFvWTJoaGJtZGxaRlpoYkhWbE9pQjFibXR1YjNkdUxDQnpaWFIwYVc1bk9pQlRaWFIwYVc1blFtRnpaU2tnUFQ0Z2RtOXBaQ0E5SUNncElEMCtJSHNnTHlvZ1JHOGdibTkwYUdsdVp5d2dkRzhnWW1VZ2IzWmxjbkpwWkdSbGJpNGdLaThnZlZ4dUlDQWdJQ2tnZTF4dUlDQWdJQ0FnSUNCemRYQmxjaWhwWkN3Z2JHRmlaV3dzSUdSbGMyTnlhWEIwYVc5dUxDQmJaR1ZtWVhWc2RGUmxlSFJXWVd4MVpTd2daR1ZtWVhWc2RGUmxlSFJXWVd4MVpWMHNJR1JsWm1GMWJIUlBia05vWVc1blpVeHBjM1JsYm1WeUtUdGNibHh1SUNBZ0lDQWdJQ0IwYUdsekxtOXdkR2x2Ym5NZ1BTQnZjSFJwYjI1ek8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCMWNteFFZWEpoYlhNZ1BTQnVaWGNnVlZKTVUyVmhjbU5vVUdGeVlXMXpLSGRwYm1SdmR5NXNiMk5oZEdsdmJpNXpaV0Z5WTJncE8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCemRISnBibWRVYjAxaGRHTm9PaUJ6ZEhKcGJtY2dQVnh1SUNBZ0lDQWdJQ0FnSUNBZ2RYTmxWWEpzVUdGeVlXMXpJQ1ltSUhWeWJGQmhjbUZ0Y3k1b1lYTW9kR2hwY3k1cFpDbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQS9JSFJvYVhNdVoyVjBWWEpzVUdGeVlXMVVaWGgwS0NsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBNklHUmxabUYxYkhSVVpYaDBWbUZzZFdVN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YzJWc1pXTjBaV1FnUFNCemRISnBibWRVYjAxaGRHTm9PMXh1SUNBZ0lDQWdJQ0IwYUdsekxuVnpaVlZ5YkZCaGNtRnRjeUE5SUhWelpWVnliRkJoY21GdGN6dGNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlFZWEp6WlNCMGFHVWdkR1Y0ZENCMllXeDFaU0JtY205dElIUm9aU0IxY213Z2NHRnlZVzFsZEdWeWN5NWNiaUFnSUNBZ0tpQkFjbVYwZFhKdWN5QlVhR1VnZEdWNGRDQjJZV3gxWlNCd1lYSnpaV1FnWm5KdmJTQjBhR1VnZFhKc0lHbG1JSFJvWlNCMWNtd2djR0Z5WVcxbGRHVnljeUJqYjI1MFlXbHVjeUF2UDJsa1BYWmhiSFZsTENCaWRYUWdaVzF3ZEhrZ2MzUnlhVzVuSUdsbUlHcDFjM1FnTHo5cFpDQnZjaUJ1YnlCMWNtd2djR0Z5WVcwZ1ptOTFibVF1WEc0Z0lDQWdJQ292WEc0Z0lDQWdaMlYwVlhKc1VHRnlZVzFVWlhoMEtDazZJSE4wY21sdVp5QjdYRzRnSUNBZ0lDQWdJR052Ym5OMElIVnliRkJoY21GdGN5QTlJRzVsZHlCVlVreFRaV0Z5WTJoUVlYSmhiWE1vZDJsdVpHOTNMbXh2WTJGMGFXOXVMbk5sWVhKamFDazdYRzRnSUNBZ0lDQWdJR2xtSUNoMWNteFFZWEpoYlhNdWFHRnpLSFJvYVhNdWFXUXBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RYSnNVR0Z5WVcxekxtZGxkQ2gwYUdsekxtbGtLU0EvUHlBbkp6dGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdKeWM3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVUdWeWMybHpkQ0IwYUdVZ2MyVjBkR2x1WnlCMllXeDFaU0JwYmlCVlVrd3VYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2NIVmliR2xqSUhWd1pHRjBaVlZTVEZCaGNtRnRjeWdwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdWRYTmxWWEpzVUdGeVlXMXpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJ6WlhRZ2RYSnNJSEJoY21GdGMxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdkWEpzVUdGeVlXMXpJRDBnYm1WM0lGVlNURk5sWVhKamFGQmhjbUZ0Y3loM2FXNWtiM2N1Ykc5allYUnBiMjR1YzJWaGNtTm9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIVnliRkJoY21GdGN5NXpaWFFvZEdocGN5NXBaQ3dnZEdocGN5NXpaV3hsWTNSbFpDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCM2FXNWtiM2N1YUdsemRHOXllUzV5WlhCc1lXTmxVM1JoZEdVb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2UzMHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKeWNzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZFhKc1VHRnlZVzF6TG5SdlUzUnlhVzVuS0NrZ0lUMDlJQ2NuWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEOGdZQ1I3Ykc5allYUnBiMjR1Y0dGMGFHNWhiV1Y5UHlSN2RYSnNVR0Z5WVcxemZXQmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnT2lCZ0pIdHNiMk5oZEdsdmJpNXdZWFJvYm1GdFpYMWdYRzRnSUNBZ0lDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dRV1JrSUdFZ1kyaGhibWRsSUd4cGMzUmxibVZ5SUhSdklIUm9aU0J6Wld4bFkzUWdaV3hsYldWdWRDNWNiaUFnSUNBZ0tpOWNiaUFnSUNCd2RXSnNhV01nWVdSa1QyNURhR0Z1WjJWa1RHbHpkR1Z1WlhJb2IyNURhR0Z1WjJWa1JuVnVZem9nS0c1bGQxWmhiSFZsT2lCemRISnBibWNwSUQwK0lIWnZhV1FwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV2YmtOb1lXNW5aU0E5SUc5dVEyaGhibWRsWkVaMWJtTTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dRSEpsZEhWeWJuTWdRV3hzSUdGMllXbHNZV0pzWlNCdmNIUnBiMjV6SUdGeklHRnVJR0Z5Y21GNVhHNGdJQ0FnSUNvdlhHNGdJQ0FnY0hWaWJHbGpJR2RsZENCdmNIUnBiMjV6S0NrNklFRnljbUY1UEhOMGNtbHVaejRnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZiM0IwYVc5dWN6dGNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlRaWFFnYjNCMGFXOXVjMXh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjJZV3gxWlhNZ1FYSnlZWGtnYjJZZ2IzQjBhVzl1YzF4dUlDQWdJQ0FxTDF4dUlDQWdJSEIxWW14cFl5QnpaWFFnYjNCMGFXOXVjeWgyWVd4MVpYTTZJRUZ5Y21GNVBITjBjbWx1Wno0cElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmIzQjBhVzl1Y3lBOUlIWmhiSFZsY3p0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV2YmtOb1lXNW5aVVZ0YVhRb2RHaHBjeTV6Wld4bFkzUmxaQ2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUUhKbGRIVnlibk1nVTJWc1pXTjBaV1FnYjNCMGFXOXVJR0Z6SUdFZ2MzUnlhVzVuWEc0Z0lDQWdJQ292WEc0Z0lDQWdjSFZpYkdsaklHZGxkQ0J6Wld4bFkzUmxaQ2dwT2lCemRISnBibWNnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NTJZV3gxWlNCaGN5QnpkSEpwYm1jN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1UyVjBJSE5sYkdWamRHVmtJRzl3ZEdsdmJpQnBaaUJwZENCdFlYUmphR1Z6SUc5dVpTQnZaaUIwYUdVZ1lYWmhhV3hoWW14bElHOXdkR2x2Ym5OY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZG1Gc2RXVWdVMlZzWldOMFpXUWdiM0IwYVc5dVhHNGdJQ0FnSUNvdlhHNGdJQ0FnY0hWaWJHbGpJSE5sZENCelpXeGxZM1JsWkNoMllXeDFaVG9nYzNSeWFXNW5LU0I3WEc0Z0lDQWdJQ0FnSUM4dklFRWdkWE5sY2lCdFlYa2dibTkwSUhOd1pXTnBabmtnZEdobElHWjFiR3dnY0c5emMybGliR1VnZG1Gc2RXVWdjMjhnZDJVZ2FXNXpkR1ZoWkNCMWMyVWdkR2hsSUdOc2IzTmxjM1FnYldGMFkyZ3VYRzRnSUNBZ0lDQWdJQzh2SUdWbklEOTRlSGc5U0RJMk5DQjNiM1ZzWkNCelpXeGxZM1FnSjBneU5qUWdiR1YyWld3dFlYTjViVzFsZEhKNUxXRnNiRzkzWldROU1UdHdZV05yWlhScGVtRjBhVzl1TFcxdlpHVTlNVHR3Y205bWFXeGxMV3hsZG1Wc0xXbGtQVFF5TURBeFppZGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ1ptbHNkR1Z5WldSTWFYTjBJRDBnZEdocGN5NXZjSFJwYjI1ekxtWnBiSFJsY2loY2JpQWdJQ0FnSUNBZ0lDQWdJQ2h2Y0hScGIyNDZJSE4wY21sdVp5a2dQVDRnYjNCMGFXOXVMbWx1WkdWNFQyWW9kbUZzZFdVcElDRTlQU0F0TVZ4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQnBaaUFvWm1sc2RHVnlaV1JNYVhOMExteGxibWQwYUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NTJZV3gxWlNBOUlHWnBiSFJsY21Wa1RHbHpkRnN3WFR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JuMWNiaUlzSWk4dklFTnZjSGx5YVdkb2RDQkZjR2xqSUVkaGJXVnpMQ0JKYm1NdUlFRnNiQ0JTYVdkb2RITWdVbVZ6WlhKMlpXUXVYRzVjYm1sdGNHOXlkQ0IwZVhCbElIc2dWR1Y0ZEZCaGNtRnRaWFJsY25OSlpITWdmU0JtY205dElDY3VMME52Ym1acFp5YzdYRzVwYlhCdmNuUWdleUJUWlhSMGFXNW5RbUZ6WlNCOUlHWnliMjBnSnk0dlUyVjBkR2x1WjBKaGMyVW5PMXh1WEc0dktpcGNiaUFxSUVFZ2RHVjRkQ0J6WlhSMGFXNW5JRzlpYW1WamRDQjNhWFJvSUdFZ2RHVjRkQ0JzWVdKbGJDNWNiaUFxTDF4dVpYaHdiM0owSUdOc1lYTnpJRk5sZEhScGJtZFVaWGgwUEZ4dUlDQWdJRU4xYzNSdmJVbGtjeUJsZUhSbGJtUnpJSE4wY21sdVp5QTlJRlJsZUhSUVlYSmhiV1YwWlhKelNXUnpYRzQrSUdWNGRHVnVaSE1nVTJWMGRHbHVaMEpoYzJVZ2UxeHVJQ0FnSUdsa09pQlVaWGgwVUdGeVlXMWxkR1Z5YzBsa2N5QjhJRU4xYzNSdmJVbGtjenRjYmlBZ0lDQnZia05vWVc1blpVVnRhWFE2SUNoamFHRnVaMlZrVm1Gc2RXVTZJSE4wY21sdVp5a2dQVDRnZG05cFpEdGNiaUFnSUNCMWMyVlZjbXhRWVhKaGJYTTZJR0p2YjJ4bFlXNDdYRzVjYmlBZ0lDQmpiMjV6ZEhKMVkzUnZjaWhjYmlBZ0lDQWdJQ0FnYVdRNklGUmxlSFJRWVhKaGJXVjBaWEp6U1dSeklId2dRM1Z6ZEc5dFNXUnpMRnh1SUNBZ0lDQWdJQ0JzWVdKbGJEb2djM1J5YVc1bkxGeHVJQ0FnSUNBZ0lDQmtaWE5qY21sd2RHbHZiam9nYzNSeWFXNW5MRnh1SUNBZ0lDQWdJQ0JrWldaaGRXeDBWR1Y0ZEZaaGJIVmxPaUJ6ZEhKcGJtY3NYRzRnSUNBZ0lDQWdJSFZ6WlZWeWJGQmhjbUZ0Y3pvZ1ltOXZiR1ZoYml4Y2JseDBYSFF2THlCbGMyeHBiblF0WkdsellXSnNaUzF1WlhoMExXeHBibVVnUUhSNWNHVnpZM0pwY0hRdFpYTnNhVzUwTDI1dkxXVnRjSFI1TFdaMWJtTjBhVzl1WEc1Y2RGeDBaR1ZtWVhWc2RFOXVRMmhoYm1kbFRHbHpkR1Z1WlhJNklDaGphR0Z1WjJWa1ZtRnNkV1U2SUhWdWEyNXZkMjRzSUhObGRIUnBibWM2SUZObGRIUnBibWRDWVhObEtTQTlQaUIyYjJsa0lEMGdLQ2tnUFQ0Z2V5QXZLaUJFYnlCdWIzUm9hVzVuTENCMGJ5QmlaU0J2ZG1WeWNtbGtaR1Z1TGlBcUx5QjlYRzRnSUNBZ0tTQjdYRzRnSUNBZ0lDQWdJSE4xY0dWeUtHbGtMQ0JzWVdKbGJDd2daR1Z6WTNKcGNIUnBiMjRzSUdSbFptRjFiSFJVWlhoMFZtRnNkV1VzSUdSbFptRjFiSFJQYmtOb1lXNW5aVXhwYzNSbGJtVnlLVHRjYmx4dUlDQWdJQ0FnSUNCamIyNXpkQ0IxY214UVlYSmhiWE1nUFNCdVpYY2dWVkpNVTJWaGNtTm9VR0Z5WVcxektIZHBibVJ2ZHk1c2IyTmhkR2x2Ymk1elpXRnlZMmdwTzF4dUlDQWdJQ0FnSUNCcFppQW9JWFZ6WlZWeWJGQmhjbUZ0Y3lCOGZDQWhkWEpzVUdGeVlXMXpMbWhoY3loMGFHbHpMbWxrS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NTBaWGgwSUQwZ1pHVm1ZWFZzZEZSbGVIUldZV3gxWlR0Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUhCaGNuTmxJR1pzWVdjZ1puSnZiU0IxY213Z2NHRnlZVzFsZEdWeWMxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdkWEpzVUdGeVlXMUdiR0ZuSUQwZ2RHaHBjeTVuWlhSVmNteFFZWEpoYlZSbGVIUW9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11ZEdWNGRDQTlJSFZ5YkZCaGNtRnRSbXhoWnp0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjBhR2x6TG5WelpWVnliRkJoY21GdGN5QTlJSFZ6WlZWeWJGQmhjbUZ0Y3p0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCUVlYSnpaU0IwYUdVZ2RHVjRkQ0IyWVd4MVpTQm1jbTl0SUhSb1pTQjFjbXdnY0dGeVlXMWxkR1Z5Y3k1Y2JpQWdJQ0FnS2lCQWNtVjBkWEp1Y3lCVWFHVWdkR1Y0ZENCMllXeDFaU0J3WVhKelpXUWdabkp2YlNCMGFHVWdkWEpzSUdsbUlIUm9aU0IxY213Z2NHRnlZVzFsZEdWeWN5QmpiMjUwWVdsdWN5QXZQMmxrUFhaaGJIVmxMQ0JpZFhRZ1pXMXdkSGtnYzNSeWFXNW5JR2xtSUdwMWMzUWdMejlwWkNCdmNpQnVieUIxY213Z2NHRnlZVzBnWm05MWJtUXVYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1oyVjBWWEpzVUdGeVlXMVVaWGgwS0NrNklITjBjbWx1WnlCN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUhWeWJGQmhjbUZ0Y3lBOUlHNWxkeUJWVWt4VFpXRnlZMmhRWVhKaGJYTW9kMmx1Wkc5M0xteHZZMkYwYVc5dUxuTmxZWEpqYUNrN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gxY214UVlYSmhiWE11YUdGektIUm9hWE11YVdRcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZFhKc1VHRnlZVzF6TG1kbGRDaDBhR2x6TG1sa0tTQS9QeUFuSnp0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z0p5YzdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dVR1Z5YzJsemRDQjBhR1VnYzJWMGRHbHVaeUIyWVd4MVpTQnBiaUJWVWt3dVhHNGdJQ0FnSUNvdlhHNGdJQ0FnY0hWaWJHbGpJSFZ3WkdGMFpWVlNURkJoY21GdGN5Z3BJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11ZFhObFZYSnNVR0Z5WVcxektTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QnpaWFFnZFhKc0lIQmhjbUZ0YzF4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2RYSnNVR0Z5WVcxeklEMGdibVYzSUZWU1RGTmxZWEpqYUZCaGNtRnRjeWgzYVc1a2IzY3ViRzlqWVhScGIyNHVjMlZoY21Ob0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhWeWJGQmhjbUZ0Y3k1elpYUW9kR2hwY3k1cFpDd2dkR2hwY3k1MFpYaDBLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIZHBibVJ2ZHk1b2FYTjBiM0o1TG5KbGNHeGhZMlZUZEdGMFpTaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMWNteFFZWEpoYlhNdWRHOVRkSEpwYm1jb0tTQWhQVDBnSnlkY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQeUJnSkh0c2IyTmhkR2x2Ymk1d1lYUm9ibUZ0WlgwL0pIdDFjbXhRWVhKaGJYTjlZRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBNklHQWtlMnh2WTJGMGFXOXVMbkJoZEdodVlXMWxmV0JjYmlBZ0lDQWdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJBY21WMGRYSnVJRlJvWlNCelpYUjBhVzVuSjNNZ2RtRnNkV1V1WEc0Z0lDQWdJQ292WEc0Z0lDQWdjSFZpYkdsaklHZGxkQ0IwWlhoMEtDazZJSE4wY21sdVp5QjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5aaGJIVmxJR0Z6SUhOMGNtbHVaenRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJWY0dSaGRHVWdkR2hsSUhObGRIUnBibWNuY3lCemRHOXlaV1FnZG1Gc2RXVXVYRzRnSUNBZ0lDb2dRSEJoY21GdElHbHVWbUZzZFdVZ1ZHaGxJRzVsZHlCMllXeDFaU0JtYjNJZ2RHaGxJSE5sZEhScGJtY3VYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2NIVmliR2xqSUhObGRDQjBaWGgwS0dsdVZtRnNkV1U2SUhOMGNtbHVaeWtnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMblpoYkhWbElEMGdhVzVXWVd4MVpUdGNiaUFnSUNCOVhHNTlYRzRpTENJdkx5QkRiM0I1Y21sbmFIUWdSWEJwWXlCSFlXMWxjeXdnU1c1akxpQkJiR3dnVW1sbmFIUnpJRkpsYzJWeWRtVmtMbHh1WEc1cGJYQnZjblFnZXlCTWIyZG5aWElnZlNCbWNtOXRJQ2N1TGk5TWIyZG5aWEl2VEc5bloyVnlKenRjYmx4dUx5b3FYRzRnS2lCSVlXNWtiR1Z6SUhSb1pTQlRaVzVrYVc1bklHRnVaQ0JTWldObGFYWnBibWNnYjJZZ2JXVnpjMkZuWlhNZ2RHOGdkR2hsSUZWRklFbHVjM1JoYm1ObElIWnBZU0IwYUdVZ1JHRjBZU0JEYUdGdWJtVnNYRzRnS2k5Y2JtVjRjRzl5ZENCamJHRnpjeUJFWVhSaFEyaGhibTVsYkVOdmJuUnliMnhzWlhJZ2UxeHVJQ0FnSUdSaGRHRkRhR0Z1Ym1Wc09pQlNWRU5FWVhSaFEyaGhibTVsYkR0Y2JpQWdJQ0J3WldWeVEyOXVibVZqZEdsdmJqb2dVbFJEVUdWbGNrTnZibTVsWTNScGIyNDdYRzRnSUNBZ1pHRjBZV05vWVc1dVpXeFBjSFJwYjI1ek9pQlNWRU5FWVhSaFEyaGhibTVsYkVsdWFYUTdYRzRnSUNBZ2JHRmlaV3c2SUhOMGNtbHVaenRjYmlBZ0lDQnBjMUpsWTJWcGRtbHVaMFp5WldWNlpVWnlZVzFsSUQwZ1ptRnNjMlU3WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCeVpYUjFjbTRnZEdobElHTjFjbkpsYm5RZ2MzUmhkR1VnYjJZZ1lTQmtZWFJoWTJoaGJtNWxiQ0JqYjI1MGNtOXNiR1Z5SUdsdWMzUmhibU5sWEc0Z0lDQWdJQ29nUUhKbGRIVnlibk1nZEdobElHTjFjbkpsYm5RZ1JHRjBZVU5vWVc1dVpXeERiMjUwY205c2JHVnlJR2x1YzNSaGJtTmxYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1oyVjBSR0YwWVVOb1lXNXVaV3hKYm5OMFlXNWpaU2dwT2lCRVlYUmhRMmhoYm01bGJFTnZiblJ5YjJ4c1pYSWdlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3p0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCVWJ5QkRjbVZoZEdVZ1lXNWtJRk5sZENCMWNDQmhJRVJoZEdFZ1EyaGhibTVsYkZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0J3WldWeVEyOXVibVZqZEdsdmJpQXRJRlJvWlNCU1ZFTWdVR1ZsY2lCRGIyNXVaV04wYVc5dVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUd4aFltVnNJQzBnVEdGaVpXd2diMllnZEdobElFUmhkR0VnUTJoaGJtNWxiRnh1SUNBZ0lDQXFJRUJ3WVhKaGJTQmtZWFJoWTJoaGJtNWxiRTl3ZEdsdmJuTWdMU0JQY0hScGIyNWhiQ0JTVkVNZ1JHRjBZVU5vWVc1dVpXd2diM0IwYVc5dWMxeHVJQ0FnSUNBcUwxeHVJQ0FnSUdOeVpXRjBaVVJoZEdGRGFHRnVibVZzS0Z4dUlDQWdJQ0FnSUNCd1pXVnlRMjl1Ym1WamRHbHZiam9nVWxSRFVHVmxja052Ym01bFkzUnBiMjRzWEc0Z0lDQWdJQ0FnSUd4aFltVnNPaUJ6ZEhKcGJtY3NYRzRnSUNBZ0lDQWdJR1JoZEdGamFHRnVibVZzVDNCMGFXOXVjejg2SUZKVVEwUmhkR0ZEYUdGdWJtVnNTVzVwZEZ4dUlDQWdJQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbkJsWlhKRGIyNXVaV04wYVc5dUlEMGdjR1ZsY2tOdmJtNWxZM1JwYjI0N1hHNGdJQ0FnSUNBZ0lIUm9hWE11YkdGaVpXd2dQU0JzWVdKbGJEdGNiaUFnSUNBZ0lDQWdkR2hwY3k1a1lYUmhZMmhoYm01bGJFOXdkR2x2Ym5NZ1BTQmtZWFJoWTJoaGJtNWxiRTl3ZEdsdmJuTTdYRzRnSUNBZ0lDQWdJR2xtSUNoa1lYUmhZMmhoYm01bGJFOXdkR2x2Ym5NZ1BUMGdiblZzYkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWtZWFJoWTJoaGJtNWxiRTl3ZEdsdmJuTWdQU0I3ZlNCaGN5QlNWRU5FWVhSaFEyaGhibTVsYkVsdWFYUTdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbVJoZEdGamFHRnVibVZzVDNCMGFXOXVjeTV2Y21SbGNtVmtJRDBnZEhKMVpUdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUhSb2FYTXVaR0YwWVVOb1lXNXVaV3dnUFNCMGFHbHpMbkJsWlhKRGIyNXVaV04wYVc5dUxtTnlaV0YwWlVSaGRHRkRhR0Z1Ym1Wc0tGeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXNZV0psYkN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVpHRjBZV05vWVc1dVpXeFBjSFJwYjI1elhHNGdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdWMyVjBkWEJFWVhSaFEyaGhibTVsYkNncE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhObGRIVndSR0YwWVVOb1lXNXVaV3dvS1NCN1hHNGdJQ0FnSUNBZ0lDOHZWMlVnVjJGdWRDQmhiaUJCY25KaGVTQkNkV1ptWlhJZ2JtOTBJR0VnWW14dllseHVJQ0FnSUNBZ0lDQjBhR2x6TG1SaGRHRkRhR0Z1Ym1Wc0xtSnBibUZ5ZVZSNWNHVWdQU0FuWVhKeVlYbGlkV1ptWlhJbk8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1SaGRHRkRhR0Z1Ym1Wc0xtOXViM0JsYmlBOUlDaGxkam9nUlhabGJuUXBJRDArSUhSb2FYTXVhR0Z1Wkd4bFQyNVBjR1Z1S0dWMktUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1a1lYUmhRMmhoYm01bGJDNXZibU5zYjNObElEMGdLR1YyT2lCRmRtVnVkQ2tnUFQ0Z2RHaHBjeTVvWVc1a2JHVlBia05zYjNObEtHVjJLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWtZWFJoUTJoaGJtNWxiQzV2Ym0xbGMzTmhaMlVnUFNBb1pYWTZJRTFsYzNOaFoyVkZkbVZ1ZENrZ1BUNWNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVhR0Z1Wkd4bFQyNU5aWE56WVdkbEtHVjJLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWtZWFJoUTJoaGJtNWxiQzV2Ym1WeWNtOXlJRDBnS0dWMk9pQk5aWE56WVdkbFJYWmxiblFwSUQwK0lIUm9hWE11YUdGdVpHeGxUMjVGY25KdmNpaGxkaWs3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nU0dGdVpHeGxjeUIzYUdWdUlIUm9aU0JFWVhSaElFTm9ZVzV1Wld3Z2FYTWdiM0JsYm1Wa1hHNGdJQ0FnSUNvdlhHNGdJQ0FnYUdGdVpHeGxUMjVQY0dWdUtHVjJPaUJGZG1WdWRDa2dlMXh1SUNBZ0lDQWdJQ0JNYjJkblpYSXVURzluS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdURzluWjJWeUxrZGxkRk4wWVdOclZISmhZMlVvS1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJR0JFWVhSaElFTm9ZVzV1Wld3Z0tDUjdkR2hwY3k1c1lXSmxiSDBwSUc5d1pXNWxaQzVnTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdOMXh1SUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbTl1VDNCbGJpaDBhR2x6TG1SaGRHRkRhR0Z1Ym1Wc1B5NXNZV0psYkN3Z1pYWXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRWhoYm1Sc1pYTWdkMmhsYmlCMGFHVWdSR0YwWVNCRGFHRnVibVZzSUdseklHTnNiM05sWkZ4dUlDQWdJQ0FxTDF4dUlDQWdJR2hoYm1Sc1pVOXVRMnh2YzJVb1pYWTZJRVYyWlc1MEtTQjdYRzRnSUNBZ0lDQWdJRXh2WjJkbGNpNU1iMmNvWEc0Z0lDQWdJQ0FnSUNBZ0lDQk1iMmRuWlhJdVIyVjBVM1JoWTJ0VWNtRmpaU2dwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdZRVJoZEdFZ1EyaGhibTVsYkNBb0pIdDBhR2x6TG14aFltVnNmU2tnWTJ4dmMyVmtMbUFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQTNYRzRnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXViMjVEYkc5elpTaDBhR2x6TG1SaGRHRkRhR0Z1Ym1Wc1B5NXNZV0psYkN3Z1pYWXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRWhoYm1Sc1pYTWdkMmhsYmlCaElHMWxjM05oWjJVZ2FYTWdjbVZqWldsMlpXUmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ1pYWmxiblFnTFNCTlpYTnpZV2RsSUVWMlpXNTBYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2FHRnVaR3hsVDI1TlpYTnpZV2RsS0dWMlpXNTBPaUJOWlhOellXZGxSWFpsYm5RcElIdGNiaUFnSUNBZ0lDQWdMeThnU0dsbmFHVnlJR3h2WnlCc1pYWmxiQ0IwYnlCd2NtVjJaVzUwSUd4dlp5QnpjR0Z0SUhkcGRHZ2diV1Z6YzJGblpYTWdjbVZqWldsMlpXUmNiaUFnSUNBZ0lDQWdURzluWjJWeUxreHZaeWhjYmlBZ0lDQWdJQ0FnSUNBZ0lFeHZaMmRsY2k1SFpYUlRkR0ZqYTFSeVlXTmxLQ2tzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmdSR0YwWVNCRGFHRnVibVZzSUNna2UzUm9hWE11YkdGaVpXeDlLU0J0WlhOellXZGxPaUFrZTJWMlpXNTBmV0FzWEc0Z0lDQWdJQ0FnSUNBZ0lDQTRYRzRnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nU0dGdVpHeGxjeUIzYUdWdUlHRnVJR1Z5Y205eUlHbHpJSFJvY205M2JseHVJQ0FnSUNBcUlFQndZWEpoYlNCbGRtVnVkQ0F0SUVWeWNtOXlJRVYyWlc1MFhHNGdJQ0FnSUNvdlhHNGdJQ0FnYUdGdVpHeGxUMjVGY25KdmNpaGxkbVZ1ZERvZ1RXVnpjMkZuWlVWMlpXNTBLU0I3WEc0Z0lDQWdJQ0FnSUV4dloyZGxjaTVNYjJjb1hHNGdJQ0FnSUNBZ0lDQWdJQ0JNYjJkblpYSXVSMlYwVTNSaFkydFVjbUZqWlNncExGeHVJQ0FnSUNBZ0lDQWdJQ0FnWUVSaGRHRWdRMmhoYm01bGJDQW9KSHQwYUdsekxteGhZbVZzZlNrZ1pYSnliM0k2SUNSN1pYWmxiblI5WUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJRGRjYmlBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV2YmtWeWNtOXlLSFJvYVhNdVpHRjBZVU5vWVc1dVpXdy9MbXhoWW1Wc0xDQmxkbVZ1ZENrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1QzWmxjbkpwWkdVZ2RHOGdjbVZuYVhOMFpYSWdiMjVQY0dWdUlHaGhibVJzWlhKY2JpQWdJQ0FnS2lCQWNHRnlZVzBnYkdGaVpXd2dSR0YwWVNCamFHRnVibVZzSUd4aFltVnNJQ2hjSW1SaGRHRmphR0Z1Ym1Wc1hDSXNJRndpYzJWdVpDMWtZWFJoWTJoaGJtNWxiRndpTENCY0luSmxZM1l0WkdGMFlXTm9ZVzV1Wld4Y0lpbGNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ1pYWWdaWFpsYm5SY2JpQWdJQ0FnS2k5Y2JpQWdJQ0F2THlCbGMyeHBiblF0WkdsellXSnNaUzF1WlhoMExXeHBibVVnUUhSNWNHVnpZM0pwY0hRdFpYTnNhVzUwTDI1dkxYVnVkWE5sWkMxMllYSnpYRzRnSUNBZ2IyNVBjR1Z1S0d4aFltVnNPaUJ6ZEhKcGJtY3NJR1YyT2lCRmRtVnVkQ2tnZTF4dUlDQWdJQ0FnSUNBdkx5QmxiWEIwZVNCa1pXWmhkV3gwSUdsdGNHeGxiV1Z1ZEdGMGFXOXVYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dUM1psY25KcFpHVWdkRzhnY21WbmFYTjBaWElnYjI1RGJHOXpaU0JvWVc1a2JHVnlYRzRnSUNBZ0lDb2dRSEJoY21GdElHeGhZbVZzSUVSaGRHRWdZMmhoYm01bGJDQnNZV0psYkNBb1hDSmtZWFJoWTJoaGJtNWxiRndpTENCY0luTmxibVF0WkdGMFlXTm9ZVzV1Wld4Y0lpd2dYQ0p5WldOMkxXUmhkR0ZqYUdGdWJtVnNYQ0lwWEc0Z0lDQWdJQ29nUUhCaGNtRnRJR1YySUdWMlpXNTBYRzRnSUNBZ0lDb3ZYRzRnSUNBZ0x5OGdaWE5zYVc1MExXUnBjMkZpYkdVdGJtVjRkQzFzYVc1bElFQjBlWEJsYzJOeWFYQjBMV1Z6YkdsdWRDOXVieTExYm5WelpXUXRkbUZ5YzF4dUlDQWdJRzl1UTJ4dmMyVW9iR0ZpWld3NklITjBjbWx1Wnl3Z1pYWTZJRVYyWlc1MEtTQjdYRzRnSUNBZ0lDQWdJQzh2SUdWdGNIUjVJR1JsWm1GMWJIUWdhVzF3YkdWdFpXNTBZWFJwYjI1Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCUGRtVnljbWxrWlNCMGJ5QnlaV2RwYzNSbGNpQnZia1Z5Y205eUlHaGhibVJzWlhKY2JpQWdJQ0FnS2lCQWNHRnlZVzBnYkdGaVpXd2dSR0YwWVNCamFHRnVibVZzSUd4aFltVnNJQ2hjSW1SaGRHRmphR0Z1Ym1Wc1hDSXNJRndpYzJWdVpDMWtZWFJoWTJoaGJtNWxiRndpTENCY0luSmxZM1l0WkdGMFlXTm9ZVzV1Wld4Y0lpbGNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ1pYWWdaWFpsYm5SY2JpQWdJQ0FnS2k5Y2JpQWdJQ0F2THlCbGMyeHBiblF0WkdsellXSnNaUzF1WlhoMExXeHBibVVnUUhSNWNHVnpZM0pwY0hRdFpYTnNhVzUwTDI1dkxYVnVkWE5sWkMxMllYSnpYRzRnSUNBZ2IyNUZjbkp2Y2loc1lXSmxiRG9nYzNSeWFXNW5MQ0JsZGpvZ1JYWmxiblFwSUh0Y2JpQWdJQ0FnSUNBZ0x5OGdaVzF3ZEhrZ1pHVm1ZWFZzZENCcGJYQnNaVzFsYm5SaGRHbHZibHh1SUNBZ0lIMWNibjFjYmlJc0lpOHZJRU52Y0hseWFXZG9kQ0JGY0dsaklFZGhiV1Z6TENCSmJtTXVJRUZzYkNCU2FXZG9kSE1nVW1WelpYSjJaV1F1WEc1Y2JtbHRjRzl5ZENCN0lFeHZaMmRsY2lCOUlHWnliMjBnSnk0dUwweHZaMmRsY2k5TWIyZG5aWEluTzF4dWFXMXdiM0owSUhzZ1JHRjBZVU5vWVc1dVpXeERiMjUwY205c2JHVnlJSDBnWm5KdmJTQW5MaTlFWVhSaFEyaGhibTVsYkVOdmJuUnliMnhzWlhJbk8xeHVYRzR2S2lwY2JpQXFJRUVnWTJ4aGMzTWdabTl5SUhObGJtUnBibWNnWkdGMFlTQmphR0Z1Ym1Wc0lHMWxjM05oWjJWelhHNGdLaTljYm1WNGNHOXlkQ0JqYkdGemN5QkVZWFJoUTJoaGJtNWxiRk5sYm1SbGNpQjdYRzRnSUNBZ1pHRjBZVU5vWVc1dVpXeFFjbTkyYVdSbGNqb2dSR0YwWVVOb1lXNXVaV3hEYjI1MGNtOXNiR1Z5TzF4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUdSaGRHRkRhR0Z1Ym1Wc1VISnZkbWxrWlhJZ0xTQkVZWFJoSUdOb1lXNXVaV3dnYjJKcVpXTjBJSFI1Y0dWY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JqYjI1emRISjFZM1J2Y2loa1lYUmhRMmhoYm01bGJGQnliM1pwWkdWeU9pQkVZWFJoUTJoaGJtNWxiRU52Ym5SeWIyeHNaWElwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVrWVhSaFEyaGhibTVsYkZCeWIzWnBaR1Z5SUQwZ1pHRjBZVU5vWVc1dVpXeFFjbTkyYVdSbGNqdGNiaUFnSUNCOVhHNWNiaUFnSUNCallXNVRaVzVrS0NrNklHSnZiMnhsWVc0Z2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z0tGeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWtZWFJoUTJoaGJtNWxiRkJ5YjNacFpHVnlMbWRsZEVSaGRHRkRhR0Z1Ym1Wc1NXNXpkR0Z1WTJVb0tTNWtZWFJoUTJoaGJtNWxiQ0FoUFQxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMWJtUmxabWx1WldRZ0ppWmNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVaR0YwWVVOb1lXNXVaV3hRY205MmFXUmxjaTVuWlhSRVlYUmhRMmhoYm01bGJFbHVjM1JoYm1ObEtDa3VaR0YwWVVOb1lXNXVaV3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F1Y21WaFpIbFRkR0YwWlNBOVBTQW5iM0JsYmlkY2JpQWdJQ0FnSUNBZ0tUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlRaVzVrSUVSaGRHRWdiM1psY2lCMGFHVWdSR0YwWVNCamFHRnVibVZzSUhSdklIUm9aU0JWUlNCSmJuTjBZVzVqWlZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0JrWVhSaElDMGdUV1Z6YzJGblpTQkVZWFJoSUVGeWNtRjVJRUoxWm1abGNseHVJQ0FnSUNBcUwxeHVJQ0FnSUhObGJtUkVZWFJoS0dSaGRHRTZJRUZ5Y21GNVFuVm1abVZ5S1NCN1hHNGdJQ0FnSUNBZ0lDOHZJSEpsYzJWMElIUm9aU0JoWm1zZ2FXNWhZM1JwZG1sMGVWeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCa1lYUmhRMmhoYm01bGJFbHVjM1JoYm1ObElEMWNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVaR0YwWVVOb1lXNXVaV3hRY205MmFXUmxjaTVuWlhSRVlYUmhRMmhoYm01bGJFbHVjM1JoYm1ObEtDazdYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tHUmhkR0ZEYUdGdWJtVnNTVzV6ZEdGdVkyVXVaR0YwWVVOb1lXNXVaV3d1Y21WaFpIbFRkR0YwWlNBOVBTQW5iM0JsYmljcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdSaGRHRkRhR0Z1Ym1Wc1NXNXpkR0Z1WTJVdVpHRjBZVU5vWVc1dVpXd3VjMlZ1WkNoa1lYUmhLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lFeHZaMmRsY2k1TWIyY29YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdURzluWjJWeUxrZGxkRk4wWVdOclZISmhZMlVvS1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZ1RXVnpjMkZuWlNCVFpXNTBPaUFrZTI1bGR5QlZhVzUwT0VGeWNtRjVLR1JoZEdFcGZXQXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdObHh1SUNBZ0lDQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjbVZ6WlhSQlptdFhZWEp1YVc1blZHbHRaWEpQYmtSaGRHRlRaVzVrS0NrN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JNYjJkblpYSXVSWEp5YjNJb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1RHOW5aMlZ5TGtkbGRGTjBZV05yVkhKaFkyVW9LU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JnVFdWemMyRm5aU0JHWVdsc1pXUTZJQ1I3Ym1WM0lGVnBiblE0UVhKeVlYa29aR0YwWVNsOVlGeHVJQ0FnSUNBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFRnVJRzkyWlhKeWFXUmxJRzFsZEdodlpDQm1iM0lnY21WelpYUjBhVzVuSUhSb1pTQkJabXNnZDJGeWJtbHVaeUIwYVcxbGNpQjNhR1Z1SUdSaGRHRWdhWE1nYzJWdWRDQnZkbVZ5SUhSb1pTQmtZWFJoSUdOb1lXNXVaV3hjYmlBZ0lDQWdLaTljYmlBZ0lDQnlaWE5sZEVGbWExZGhjbTVwYm1kVWFXMWxjazl1UkdGMFlWTmxibVFvS1NCN1hHNGdJQ0FnSUNBZ0lDOHZJRUpoYzJVZ1JuVnVZM1JwYjI1aGJHbDBlVG9nUkc4Z1RtOTBhR2x1WjF4dUlDQWdJSDFjYm4xY2JpSXNJaTh2SUVOdmNIbHlhV2RvZENCRmNHbGpJRWRoYldWekxDQkpibU11SUVGc2JDQlNhV2RvZEhNZ1VtVnpaWEoyWldRdVhHNWNiaThxS2x4dUlDb2dUR0YwWlc1amVTQlVaWE4wSUZKbGMzVnNkSE1nUkdGMFlWeHVJQ292WEc1bGVIQnZjblFnWTJ4aGMzTWdTVzVwZEdsaGJGTmxkSFJwYm1keklIdGNiaUFnSUNCUWFYaGxiRk4wY21WaGJXbHVaMU5sZEhScGJtZHpPaUJRYVhobGJGTjBjbVZoYldsdVoxTmxkSFJwYm1kek8xeHVJQ0FnSUVWdVkyOWtaWEpUWlhSMGFXNW5jem9nUlc1amIyUmxjbE5sZEhScGJtZHpPMXh1SUNBZ0lGZGxZbEpVUTFObGRIUnBibWR6T2lCWFpXSlNWRU5UWlhSMGFXNW5jenRjYmx4dUlDQWdJR052Ym5OMGNuVmpkRzl5S0NrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGxCcGVHVnNVM1J5WldGdGFXNW5VMlYwZEdsdVozTWdQU0J1WlhjZ1VHbDRaV3hUZEhKbFlXMXBibWRUWlhSMGFXNW5jeWdwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMa1Z1WTI5a1pYSlRaWFIwYVc1bmN5QTlJRzVsZHlCRmJtTnZaR1Z5VTJWMGRHbHVaM01vS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVYWldKU1ZFTlRaWFIwYVc1bmN5QTlJRzVsZHlCWFpXSlNWRU5UWlhSMGFXNW5jeWdwTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVOb1pXTnJjeUJtYjNJZ1kyOXRjR0YwYVdKcGJHbDBlU0IzYVhSb0lIUm9aU0JHVUZNZ1lXNWtJRTFoZUVaUVV5QnpkR0YwY3lCaVpYUjNaV1Z1SURRdU1qY2dZVzVrSURWY2JpQWdJQ0FnS2k5Y2JpQWdJQ0IxWlVOdmJYQmhkR2xpYkdVb0tTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbGRsWWxKVVExTmxkSFJwYm1kekxrMWhlRVpRVXlBaFBTQnVkV3hzS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsZGxZbEpVUTFObGRIUnBibWR6TGtaUVV5QTlJSFJvYVhNdVYyVmlVbFJEVTJWMGRHbHVaM011VFdGNFJsQlRPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1ZlZ4dVhHNHZLaXBjYmlBcUlFRWdZMnhoYzNNZ1ptOXlJR2hoYm1Sc2FXNW5JRkJwZUdWc0lGTjBjbVZoYldsdVp5QmtaWFJoYVd4elhHNGdLaTljYm1WNGNHOXlkQ0JqYkdGemN5QlFhWGhsYkZOMGNtVmhiV2x1WjFObGRIUnBibWR6SUh0Y2JpQWdJQ0JCYkd4dmQxQnBlR1ZzVTNSeVpXRnRhVzVuUTI5dGJXRnVaSE0vT2lCaWIyOXNaV0Z1TzF4dUlDQWdJRVJwYzJGaWJHVk1ZWFJsYm1ONVZHVnpkRDg2SUdKdmIyeGxZVzQ3WEc1OVhHNWNiaThxS2x4dUlDb2dRU0JqYkdGemN5Qm1iM0lnYUdGdVpHeHBibWNnWlc1amIyUmxjaUJ6ZEdGMGMxeHVJQ292WEc1bGVIQnZjblFnWTJ4aGMzTWdSVzVqYjJSbGNsTmxkSFJwYm1keklIdGNiaUFnSUNCVVlYSm5aWFJDYVhSeVlYUmxQem9nYm5WdFltVnlPMXh1SUNBZ0lFMWhlRUpwZEhKaGRHVS9PaUJ1ZFcxaVpYSTdYRzRnSUNBZ1RXbHVVVkEvT2lCdWRXMWlaWEk3WEc0Z0lDQWdUV0Y0VVZBL09pQnVkVzFpWlhJN1hHNGdJQ0FnVW1GMFpVTnZiblJ5YjJ3L09pQW5RMEpTSnlCOElDZFdRbEluSUh3Z0owTnZibk4wVVZBbk8xeHVJQ0FnSUVacGJHeGxja1JoZEdFL09pQmliMjlzWldGdU8xeHVJQ0FnSUUxMWJIUnBVR0Z6Y3o4NklDZEVTVk5CUWt4RlJDY2dmQ0FuVVZWQlVsUkZVaWNnZkNBblJsVk1UQ2M3WEc1OVhHNWNiaThxS2x4dUlDb2dRU0JqYkdGemN5Qm1iM0lnYUdGdVpHeHBibWNnZDJWaUlISjBZeUJ6ZEdGMGMxeHVJQ292WEc1bGVIQnZjblFnWTJ4aGMzTWdWMlZpVWxSRFUyVjBkR2x1WjNNZ2UxeHVJQ0FnSUVSbFozSmhaR0YwYVc5dVVISmxaajg2SUNkQ1FVeEJUa05GUkNjZ2ZDQW5UVUZKVGxSQlNVNWZSbEpCVFVWU1FWUkZKeUI4SUNkTlFVbE9WRUZKVGw5U1JWTlBURlZVU1U5T0p6dGNiaUFnSUNCTmFXNUNhWFJ5WVhSbFB6b2diblZ0WW1WeU8xeHVJQ0FnSUUxaGVFSnBkSEpoZEdVL09pQnVkVzFpWlhJN1hHNGdJQ0FnVEc5M1VWQS9PaUJ1ZFcxaVpYSTdYRzRnSUNBZ1NHbG5hRkZRUHpvZ2JuVnRZbVZ5TzF4dUlDQWdJQzh2SUZWRk5DNHlOeUJqYjIxd1lYUnBZbXhsWEc0Z0lDQWdUV0Y0UmxCVFB6b2diblZ0WW1WeU8xeHVJQ0FnSUM4dklGVkZOU0JqYjIxd1lYUnBZbXhsWEc0Z0lDQWdSbEJUUHpvZ2JuVnRZbVZ5TzF4dWZWeHVJaXdpTHk4Z1EyOXdlWEpwWjJoMElFVndhV01nUjJGdFpYTXNJRWx1WXk0Z1FXeHNJRkpwWjJoMGN5QlNaWE5sY25abFpDNWNibHh1YVcxd2IzSjBJSHNnVEc5bloyVnlJSDBnWm5KdmJTQW5MaTR2VEc5bloyVnlMMHh2WjJkbGNpYzdYRzR2S2lwY2JpQXFJRXhoZEdWdVkza2dWR1Z6ZENCU1pYTjFiSFJ6SUVSaGRHRmNiaUFxTDF4dVpYaHdiM0owSUdOc1lYTnpJRXhoZEdWdVkzbFVaWE4wVW1WemRXeDBjeUI3WEc0Z0lDQWdMeTlHYVdWc1pITWdVMlYwSUdaeWIyMGdkR2hsSUd4aGRHVnVZM2tnY0dGNWJHOWhaQ0J5WldkaGNtUnNaWE56SUc5bUlIWmxjbk5wYjI1Y2JpQWdJQ0JTWldObGFYQjBWR2x0WlUxek9pQnVkVzFpWlhJZ1BTQnVkV3hzTzF4dUlDQWdJRlJ5WVc1emJXbHpjMmx2YmxScGJXVk5jem9nYm5WdFltVnlJRDBnYm5Wc2JEdGNibHh1SUNBZ0lDOHZSbWxsYkdSeklGTmxkQ0JtY205dElIUm9aU0JzWVhSbGJtTjVJSEJoZVd4dllXUWdabkp2YlNBMExqSTNMakpjYmlBZ0lDQlFjbVZEWVhCMGRYSmxWR2x0WlUxek9pQnVkVzFpWlhJZ1BTQnVkV3hzTzF4dUlDQWdJRkJ2YzNSRFlYQjBkWEpsVkdsdFpVMXpPaUJ1ZFcxaVpYSWdQU0J1ZFd4c08xeHVJQ0FnSUZCeVpVVnVZMjlrWlZScGJXVk5jem9nYm5WdFltVnlJRDBnYm5Wc2JEdGNiaUFnSUNCUWIzTjBSVzVqYjJSbFZHbHRaVTF6T2lCdWRXMWlaWElnUFNCdWRXeHNPMXh1WEc0Z0lDQWdMeTlHYVdWc1pITWdVMlYwSUdaeWIyMGdkR2hsSUd4aGRHVnVZM2tnY0dGNWJHOWhaQ0JtY205dElEVXVNRnh1SUNBZ0lFVnVZMjlrWlUxek9pQnVkVzFpWlhJZ1BTQnVkV3hzTzF4dUlDQWdJRU5oY0hSMWNtVlViMU5sYm1STmN6b2diblZ0WW1WeUlEMGdiblZzYkR0Y2JseHVJQ0FnSUM4dlJtbGxiR1J6SUZObGRDQjNhR1Z1SUhCeWIyTmxjM05sWkZ4dUlDQWdJSFJsYzNSVGRHRnlkRlJwYldWTmN5QTlJREE3WEc0Z0lDQWdZbkp2ZDNObGNsSmxZMlZwY0hSVWFXMWxUWE1nUFNBd08xeHVYRzRnSUNBZ0x5OUdhV1ZzWkhNZ2MyVjBJR1p5YjIwZ1kyRnNZM1ZzWVhScGIyNXpYRzRnSUNBZ2JHRjBaVzVqZVVWNFkyeDFaR2x1WjBSbFkyOWtaU0E5SURBN1hHNGdJQ0FnZEdWemRFUjFjbUYwYVc5dUlEMGdNRHRjYmlBZ0lDQXZMM1ZsVEdGMFpXNWplVG9nYm5WdFltVnlJRDBnTUR0Y2JpQWdJQ0J1WlhSM2IzSnJUR0YwWlc1amVTQTlJREE3WEc0Z0lDQWdZbkp2ZDNObGNsTmxibVJNWVhSbGJtTjVJRDBnTUR0Y2JpQWdJQ0JtY21GdFpVUnBjM0JzWVhsRVpXeDBZVlJwYldWTmN5QTlJREE3WEc0Z0lDQWdaVzVrVkc5RmJtUk1ZWFJsYm1ONUlEMGdNRHRjYmlBZ0lDQXZMM1ZsVUdsNFpXeFRkSEpsWVcxTVlYUmxibU41T2lCdWRXMWlaWElnUFNBd08xeHVJQ0FnSUdWdVkyOWtaVXhoZEdWdVkza2dQU0F3TzF4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1UyVjBjeUIwYUdVZ1JHVnNkR0VnVkdsdFpTQk5hV3hzYVhObFkyOXVaSE5jYmlBZ0lDQWdLaUJBY0dGeVlXMGdSR1ZzZEdGVWFXMWxUWE1nTFNCRVpXeDBZU0JVYVcxbElFMXBiR3hwYzJWamIyNWtjMXh1SUNBZ0lDQXFMMXh1SUNBZ0lITmxkRVp5WVcxbFJHbHpjR3hoZVVSbGJIUmhWR2x0WlNoRVpXeDBZVlJwYldWTmN6b2diblZ0WW1WeUtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbVp5WVcxbFJHbHpjR3hoZVVSbGJIUmhWR2x0WlUxeklEMDlJREFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVpuSmhiV1ZFYVhOd2JHRjVSR1ZzZEdGVWFXMWxUWE1nUFNCTllYUm9Mbkp2ZFc1a0tFUmxiSFJoVkdsdFpVMXpLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZCeWIyTmxjM01nZEdobElHVnVZMjlrWlhJZ2RHbHRaWE1nWVc1a0lITmxkQ0IwYUdWdFhHNGdJQ0FnSUNvdlhHNGdJQ0FnY0hKdlkyVnpjMFpwWld4a2N5Z3BJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tGeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NUZibU52WkdWTmN5QTlQU0J1ZFd4c0lDWW1YRzRnSUNBZ0lDQWdJQ0FnSUNBb2RHaHBjeTVRY21WRmJtTnZaR1ZVYVcxbFRYTWdJVDBnYm5Wc2JDQjhmQ0IwYUdsekxsQnZjM1JGYm1OdlpHVlVhVzFsVFhNZ0lUMGdiblZzYkNsY2JpQWdJQ0FnSUNBZ0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCTWIyZG5aWEl1VEc5bktGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lFeHZaMmRsY2k1SFpYUlRkR0ZqYTFSeVlXTmxLQ2tzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWUZObGRIUnBibWNnUlc1amIyUmxJRTF6SUZ4Y2JpQWtlM1JvYVhNdVVHOXpkRVZ1WTI5a1pWUnBiV1ZOYzMwZ1hGeHVJQ1I3ZEdocGN5NVFjbVZGYm1OdlpHVlVhVzFsVFhOOVlDeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQTJYRzRnSUNBZ0lDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NUZibU52WkdWTmN5QTlJSFJvYVhNdVVHOXpkRVZ1WTI5a1pWUnBiV1ZOY3lBdElIUm9hWE11VUhKbFJXNWpiMlJsVkdsdFpVMXpPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLRnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVEWVhCMGRYSmxWRzlUWlc1a1RYTWdQVDBnYm5Wc2JDQW1KbHh1SUNBZ0lDQWdJQ0FnSUNBZ0tIUm9hWE11VUhKbFEyRndkSFZ5WlZScGJXVk5jeUFoUFNCdWRXeHNJSHg4SUhSb2FYTXVVRzl6ZEVOaGNIUjFjbVZVYVcxbFRYTWdJVDBnYm5Wc2JDbGNiaUFnSUNBZ0lDQWdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQk1iMmRuWlhJdVRHOW5LRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRXh2WjJkbGNpNUhaWFJUZEdGamExUnlZV05sS0Nrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lGTmxkSFJwYm1jZ1EyRndkSFZ5WlZSdlUyVnVaRTF6SUUxeklGeGNiaUFrZTNSb2FYTXVVRzl6ZEVOaGNIUjFjbVZVYVcxbFRYTjlJRnhjYmlBa2UzUm9hWE11VUhKbFEyRndkSFZ5WlZScGJXVk5jMzFnTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSURaY2JpQWdJQ0FnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGtOaGNIUjFjbVZVYjFObGJtUk5jeUE5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NVFiM04wUTJGd2RIVnlaVlJwYldWTmN5QXRJSFJvYVhNdVVISmxRMkZ3ZEhWeVpWUnBiV1ZOY3p0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JuMWNiaUlzSWk4dklFTnZjSGx5YVdkb2RDQkZjR2xqSUVkaGJXVnpMQ0JKYm1NdUlFRnNiQ0JTYVdkb2RITWdVbVZ6WlhKMlpXUXVYRzVjYmk4cUtseHVJQ29nUVNCamJHRnpjeUJtYjNJZ2JXRnVZV2RwYm1jZ2RHaGxJR1p5WldWNlpTQm1jbUZ0WlNCdlltcGxZM1JjYmlBcUwxeHVaWGh3YjNKMElHTnNZWE56SUVaeVpXVjZaVVp5WVcxbElIdGNiaUFnSUNCd2NtOTBaV04wWldRZ2NtOXZkRVJwZGpvZ1NGUk5URVZzWlcxbGJuUTdYRzRnSUNBZ2NISnZkR1ZqZEdWa0lISnZiM1JGYkdWdFpXNTBPaUJJVkUxTVJHbDJSV3hsYldWdWREdGNiaUFnSUNCcGJXRm5aVVZzWlcxbGJuUTZJRWhVVFV4SmJXRm5aVVZzWlcxbGJuUTdYRzRnSUNBZ1puSmxaWHBsUm5KaGJXVklaV2xuYUhRZ1BTQXdPMXh1SUNBZ0lHWnlaV1Y2WlVaeVlXMWxWMmxrZEdnZ1BTQXdPMXh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUTI5dWMzUnlkV04wSUdFZ1puSmxaWHBsSUdaeVlXMWxYRzRnSUNBZ0lDb2dRSEJoY21GdElISnZiM1JFYVhZZ2RHaGxJR1JwZGlCMGFHRjBJR0VnWm5KbFpYcGxJR1p5WVcxbElHVnNaVzFsYm5RZ2QybHNiQ0JpWlNCcGJtcGxZM1JsWkNCcGJuUnZYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1kyOXVjM1J5ZFdOMGIzSW9jbTl2ZEVScGRqb2dTRlJOVEVWc1pXMWxiblFwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV5YjI5MFJHbDJJRDBnY205dmRFUnBkanRjYmx4dUlDQWdJQ0FnSUNBdkx5QmpjbVZoZEdVZ2RHaGxJRzkyWlhKc1lYbGNiaUFnSUNBZ0lDQWdkR2hwY3k1eWIyOTBSV3hsYldWdWRDQTlJR1J2WTNWdFpXNTBMbU55WldGMFpVVnNaVzFsYm5Rb0oyUnBkaWNwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbkp2YjNSRmJHVnRaVzUwTG1sa0lEMGdKMlp5WldWNlpVWnlZVzFsSnp0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV5YjI5MFJXeGxiV1Z1ZEM1emRIbHNaUzVrYVhOd2JHRjVJRDBnSjI1dmJtVW5PMXh1SUNBZ0lDQWdJQ0IwYUdsekxuSnZiM1JGYkdWdFpXNTBMbk4wZVd4bExuQnZhVzUwWlhKRmRtVnVkSE1nUFNBbmJtOXVaU2M3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjbTl2ZEVWc1pXMWxiblF1YzNSNWJHVXVjRzl6YVhScGIyNGdQU0FuWVdKemIyeDFkR1VuTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbkp2YjNSRmJHVnRaVzUwTG5OMGVXeGxMbnBKYm1SbGVDQTlJQ2N5TUNjN1hHNWNiaUFnSUNBZ0lDQWdMeThnWTNKbFlYUmxJSFJvWlNCcGJXRm5aU0J3YkdGalpTQm9iMnhrWlhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTVwYldGblpVVnNaVzFsYm5RZ1BTQmtiMk4xYldWdWRDNWpjbVZoZEdWRmJHVnRaVzUwS0NkcGJXY25LVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXBiV0ZuWlVWc1pXMWxiblF1YzNSNWJHVXVjRzl6YVhScGIyNGdQU0FuWVdKemIyeDFkR1VuTzF4dVhHNGdJQ0FnSUNBZ0lDOHZJR0Z3Y0dWdVpDQjBhR1VnYVcxaFoyVWdhVzUwYnlCMGFHVWdjbTl2ZENCbGJHVnRaVzUwSUdGdVpDQmhjSEJsYm1RZ2RHaGxJR1ZzWlcxbGJuUWdkRzhnZEdobElISnZiM1FnWkdsMlhHNGdJQ0FnSUNBZ0lIUm9hWE11Y205dmRFVnNaVzFsYm5RdVlYQndaVzVrUTJocGJHUW9kR2hwY3k1cGJXRm5aVVZzWlcxbGJuUXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuSnZiM1JFYVhZdVlYQndaVzVrUTJocGJHUW9kR2hwY3k1eWIyOTBSV3hsYldWdWRDazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dVMlYwSUhSb1pTQm1jbVZsZW1VZ1puSmhiV1VnWld4bGJXVnVkQ0JtYjNJZ2MyaHZkMmx1WjF4dUlDQWdJQ0FxTDF4dUlDQWdJSE5sZEVWc1pXMWxiblJHYjNKVGFHOTNLQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbkp2YjNSRmJHVnRaVzUwTG5OMGVXeGxMbVJwYzNCc1lYa2dQU0FuWW14dlkyc25PMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRk5sZENCMGFHVWdabkpsWlhwbElHWnlZVzFsSUdWc1pXMWxiblFnWm05eUlHaHBaR2x1WjF4dUlDQWdJQ0FxTDF4dUlDQWdJSE5sZEVWc1pXMWxiblJHYjNKSWFXUmxLQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbkp2YjNSRmJHVnRaVzUwTG5OMGVXeGxMbVJwYzNCc1lYa2dQU0FuYm05dVpTYzdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dWWEJrWVhSbElIUm9aU0JtY21WbGVtVWdabkpoYldWeklHbHRZV2RsSUhOdmRYSmpaVnh1SUNBZ0lDQXFJRUJ3WVhKaGJTQnFjR1ZuSUMwZ2RHaGxJR1p5WldWNlpTQm1jbUZ0WlNCcGJXRm5aU0JoY3lCaElHSjVkR1VnWVhKeVlYa2daR0YwWVZ4dUlDQWdJQ0FxTDF4dUlDQWdJSFZ3WkdGMFpVbHRZV2RsUld4bGJXVnVkRk52ZFhKalpTaHFjR1ZuT2lCVmFXNTBPRUZ5Y21GNUtTQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElHSmhjMlUyTkNBOUlHSjBiMkVvWEc0Z0lDQWdJQ0FnSUNBZ0lDQnFjR1ZuTG5KbFpIVmpaU2dvWkdGMFlTd2dZbmwwWlNrZ1BUNGdaR0YwWVNBcklGTjBjbWx1Wnk1bWNtOXRRMmhoY2tOdlpHVW9ZbmwwWlNrc0lDY25LVnh1SUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbWx0WVdkbFJXeGxiV1Z1ZEM1emNtTWdQU0FuWkdGMFlUcHBiV0ZuWlM5cWNHVm5PMkpoYzJVMk5Dd25JQ3NnWW1GelpUWTBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRk5sZENCMGFHVWdaR2x0Wlc1emFXOXVjeUJtYjNJZ2RHaGxJR1p5WldWNlpTQm1jbUZ0WlNCbWNtOXRJSFJvWlNCbGJHVnRaVzUwSUdGdVpDQnlaWE5wZW1VZ2FYUmNiaUFnSUNBZ0tpOWNiaUFnSUNCelpYUkVhVzFsYm5OcGIyNXpSbkp2YlVWc1pXMWxiblJCYm1SU1pYTnBlbVVvS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Wm5KbFpYcGxSbkpoYldWSVpXbG5hSFFnUFNCMGFHbHpMbWx0WVdkbFJXeGxiV1Z1ZEM1dVlYUjFjbUZzU0dWcFoyaDBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtWnlaV1Y2WlVaeVlXMWxWMmxrZEdnZ1BTQjBhR2x6TG1sdFlXZGxSV3hsYldWdWRDNXVZWFIxY21Gc1YybGtkR2c3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjbVZ6YVhwbEtDazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dVbVZ6YVhwbElHRWdabkpsWlhwbElHWnlZVzFsSUdWc1pXMWxiblJjYmlBZ0lDQWdLaTljYmlBZ0lDQnlaWE5wZW1Vb0tTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbVp5WldWNlpVWnlZVzFsVjJsa2RHZ2dJVDA5SURBZ0ppWWdkR2hwY3k1bWNtVmxlbVZHY21GdFpVaGxhV2RvZENBaFBUMGdNQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdScGMzQnNZWGxYYVdSMGFDQTlJREE3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNaWFFnWkdsemNHeGhlVWhsYVdkb2RDQTlJREE3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNaWFFnWkdsemNHeGhlVlJ2Y0NBOUlEQTdYRzRnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdaR2x6Y0d4aGVVeGxablFnUFNBd08xeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdjR0Z5Wlc1MFFYTndaV04wVW1GMGFXOGdQVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWNtOXZkRVJwZGk1amJHbGxiblJYYVdSMGFDQXZJSFJvYVhNdWNtOXZkRVJwZGk1amJHbGxiblJJWldsbmFIUTdYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0IyYVdSbGIwRnpjR1ZqZEZKaGRHbHZJRDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtWnlaV1Y2WlVaeVlXMWxWMmxrZEdnZ0x5QjBhR2x6TG1aeVpXVjZaVVp5WVcxbFNHVnBaMmgwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hCaGNtVnVkRUZ6Y0dWamRGSmhkR2x2SUR3Z2RtbGtaVzlCYzNCbFkzUlNZWFJwYnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUnBjM0JzWVhsWGFXUjBhQ0E5SUhSb2FYTXVjbTl2ZEVScGRpNWpiR2xsYm5SWGFXUjBhRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrYVhOd2JHRjVTR1ZwWjJoMElEMGdUV0YwYUM1bWJHOXZjaWhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV5YjI5MFJHbDJMbU5zYVdWdWRGZHBaSFJvSUM4Z2RtbGtaVzlCYzNCbFkzUlNZWFJwYjF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHbHpjR3hoZVZSdmNDQTlJRTFoZEdndVpteHZiM0lvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDaDBhR2x6TG5KdmIzUkVhWFl1WTJ4cFpXNTBTR1ZwWjJoMElDMGdaR2x6Y0d4aGVVaGxhV2RvZENrZ0tpQXdMalZjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdScGMzQnNZWGxNWldaMElEMGdNRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHbHpjR3hoZVZkcFpIUm9JRDBnVFdGMGFDNW1iRzl2Y2loY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1eWIyOTBSR2wyTG1Oc2FXVnVkRWhsYVdkb2RDQXFJSFpwWkdWdlFYTndaV04wVW1GMGFXOWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JwYzNCc1lYbElaV2xuYUhRZ1BTQjBhR2x6TG5KdmIzUkVhWFl1WTJ4cFpXNTBTR1ZwWjJoME8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUnBjM0JzWVhsVWIzQWdQU0F3TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdScGMzQnNZWGxNWldaMElEMGdUV0YwYUM1bWJHOXZjaWhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tIUm9hWE11Y205dmRFUnBkaTVqYkdsbGJuUlhhV1IwYUNBdElHUnBjM0JzWVhsWGFXUjBhQ2tnS2lBd0xqVmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXliMjkwUld4bGJXVnVkQzV6ZEhsc1pTNTNhV1IwYUNBOUlIUm9hWE11Y205dmRFUnBkaTV2Wm1aelpYUlhhV1IwYUNBcklDZHdlQ2M3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5KdmIzUkZiR1Z0Wlc1MExuTjBlV3hsTG1obGFXZG9kQ0E5SUhSb2FYTXVjbTl2ZEVScGRpNXZabVp6WlhSSVpXbG5hSFFnS3lBbmNIZ25PMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV5YjI5MFJXeGxiV1Z1ZEM1emRIbHNaUzVzWldaMElEMGdNQ0FySUNkd2VDYzdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbkp2YjNSRmJHVnRaVzUwTG5OMGVXeGxMblJ2Y0NBOUlEQWdLeUFuY0hnbk8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbWx0WVdkbFJXeGxiV1Z1ZEM1emRIbHNaUzUzYVdSMGFDQTlJR1JwYzNCc1lYbFhhV1IwYUNBcklDZHdlQ2M3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1sdFlXZGxSV3hsYldWdWRDNXpkSGxzWlM1b1pXbG5hSFFnUFNCa2FYTndiR0Y1U0dWcFoyaDBJQ3NnSjNCNEp6dGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVhVzFoWjJWRmJHVnRaVzUwTG5OMGVXeGxMbXhsWm5RZ1BTQmthWE53YkdGNVRHVm1kQ0FySUNkd2VDYzdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbWx0WVdkbFJXeGxiV1Z1ZEM1emRIbHNaUzUwYjNBZ1BTQmthWE53YkdGNVZHOXdJQ3NnSjNCNEp6dGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNibjFjYmlJc0lpOHZJRU52Y0hseWFXZG9kQ0JGY0dsaklFZGhiV1Z6TENCSmJtTXVJRUZzYkNCU2FXZG9kSE1nVW1WelpYSjJaV1F1WEc1Y2JtbHRjRzl5ZENCN0lFeHZaMmRsY2lCOUlHWnliMjBnSnk0dUwweHZaMmRsY2k5TWIyZG5aWEluTzF4dWFXMXdiM0owSUhzZ1JuSmxaWHBsUm5KaGJXVWdmU0JtY205dElDY3VMMFp5WldWNlpVWnlZVzFsSnp0Y2JseHVMeW9xWEc0Z0tpQkJJR05zWVhOeklHWnZjaUJqYjI1MGNtOXNiR2x1WnlCbWNtVmxlbVVnWm5KaGJXVWdablZ1WTNScGIyNWhiR2wwZVZ4dUlDb3ZYRzVsZUhCdmNuUWdZMnhoYzNNZ1JuSmxaWHBsUm5KaGJXVkRiMjUwY205c2JHVnlJSHRjYmlBZ0lDQm1jbVZsZW1WR2NtRnRaVG9nUm5KbFpYcGxSbkpoYldVN1hHNGdJQ0FnY21WalpXbDJhVzVuSUQwZ1ptRnNjMlU3WEc0Z0lDQWdjMmw2WlNBOUlEQTdYRzRnSUNBZ2FuQmxaem9nVldsdWREaEJjbkpoZVNBOUlIVnVaR1ZtYVc1bFpEdGNiaUFnSUNCMllXeHBaQ0E5SUdaaGJITmxPMXh1SUNBZ0lHWnlaV1Y2WlVaeVlXMWxSR1ZzWVhrZ1BTQTFNRHRjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVOdmJuTjBjblZqZENCaElHWnlaV1Y2WlNCbWNtRnRaU0JqYjI1MGNtOXNiR1Z5WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSEp2YjNSRWFYWWdMU0IwYUdVZ1pHbDJJSFJvWVhRZ1lTQm1jbVZsZW1VZ1puSmhiV1VnWld4bGJXVnVkQ0IzYVd4c0lHSmxJR2x1YW1WamRHVmtJR2x1ZEc5Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0JqYjI1emRISjFZM1J2Y2loeWIyOTBSR2wyT2lCSVZFMU1SV3hsYldWdWRDa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxtWnlaV1Y2WlVaeVlXMWxJRDBnYm1WM0lFWnlaV1Y2WlVaeVlXMWxLSEp2YjNSRWFYWXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRk5vYjNjZ2RHaGxJR1p5WldWNlpTQm1jbUZ0WlNCcFppQnBkQ0JwY3lCMllXeHBaRnh1SUNBZ0lDQXFMMXh1SUNBZ0lITm9iM2RHY21WbGVtVkdjbUZ0WlNncElIdGNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVkbUZzYVdRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVabkpsWlhwbFJuSmhiV1V1YzJWMFJXeGxiV1Z1ZEVadmNsTm9iM2NvS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFaHBaR1VnZEdobElHWnlaV1Y2WlNCbWNtRnRaU0JoYm1RZ2MyVjBJSFJvWlNCMllXeHBaR2wwZVNCMGJ5Qm1ZV3h6WlZ4dUlDQWdJQ0FxTDF4dUlDQWdJR2hwWkdWR2NtVmxlbVZHY21GdFpTZ3BJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NTJZV3hwWkNBOUlHWmhiSE5sTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbVp5WldWNlpVWnlZVzFsTG5ObGRFVnNaVzFsYm5SR2IzSklhV1JsS0NrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1ZYQmtZWFJsSUhSb1pTQm1jbVZsZW1VZ1puSmhiV1Z6SUdsdFlXZGxJSE52ZFhKalpTQmhibVFnYkc5aFpDQnBkRnh1SUNBZ0lDQXFJRUJ3WVhKaGJTQnFjR1ZuSUMwZ2RHaGxJR1p5WldWNlpTQm1jbUZ0WlNCcGJXRm5aU0JoY3lCaElHSjVkR1VnWVhKeVlYa2daR0YwWVZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0J2Ymt4dllXUkRZV3hzUW1GamF5QXRJR0VnWTJGc2JDQmlZV05ySUdadmNpQnRZVzVoWjJsdVp5QnBaaUIwYUdVZ2NHeGhlU0J2ZG1WeWJHRjVJRzVsWldSeklIUnZJR0psSUhOb2IzZHVJRzl5SUc1dmRGeHVJQ0FnSUNBcUwxeHVJQ0FnSUhWd1pHRjBaVVp5WldWNlpVWnlZVzFsUVc1a1UyaHZkeWhxY0dWbk9pQlZhVzUwT0VGeWNtRjVMQ0J2Ymt4dllXUkRZV3hzUW1GamF6b2dLQ2tnUFQ0Z2RtOXBaQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbVp5WldWNlpVWnlZVzFsTG5Wd1pHRjBaVWx0WVdkbFJXeGxiV1Z1ZEZOdmRYSmpaU2hxY0dWbktUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1bWNtVmxlbVZHY21GdFpTNXBiV0ZuWlVWc1pXMWxiblF1YjI1c2IyRmtJRDBnS0NrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVtY21WbGVtVkdjbUZ0WlM1elpYUkVhVzFsYm5OcGIyNXpSbkp2YlVWc1pXMWxiblJCYm1SU1pYTnBlbVVvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJRzl1VEc5aFpFTmhiR3hDWVdOcktDazdYRzRnSUNBZ0lDQWdJSDA3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVUhKdlkyVnpjeUIwYUdVZ2JtVjNJR1p5WldWNlpTQm1jbUZ0WlNCcGJXRm5aU0JoYm1RZ2RYQmtZWFJsSUdsMFhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUhacFpYY2dMU0IwYUdVZ1puSmxaWHBsSUdaeVlXMWxJR2x0WVdkbElHRnpJR0VnWW5sMFpTQmhjbkpoZVNCa1lYUmhYRzRnSUNBZ0lDb2dRSEJoY21GdElHOXVURzloWkVOaGJHeENZV05ySUMwZ1lTQmpZV3hzSUdKaFkyc2dabTl5SUcxaGJtRm5hVzVuSUdsbUlIUm9aU0J3YkdGNUlHOTJaWEpzWVhrZ2JtVmxaSE1nZEc4Z1ltVWdjMmh2ZDI0Z2IzSWdibTkwWEc0Z0lDQWdJQ292WEc0Z0lDQWdjSEp2WTJWemMwWnlaV1Y2WlVaeVlXMWxUV1Z6YzJGblpTaDJhV1YzT2lCVmFXNTBPRUZ5Y21GNUxDQnZia3h2WVdSRFlXeHNRbUZqYXpvZ0tDa2dQVDRnZG05cFpDa2dlMXh1SUNBZ0lDQWdJQ0F2THlCU1pYTmxkQ0JtY21WbGVtVWdabkpoYldVZ2FXWWdkMlVnWjI5MElHRWdabkpsWlhwbElHWnlZVzFsSUcxbGMzTmhaMlVnWVc1a0lIZGxJR0Z5WlNCdWIzUWdYQ0p5WldObGFYWnBibWRjSWlCNVpYUXVYRzRnSUNBZ0lDQWdJR2xtSUNnaGRHaHBjeTV5WldObGFYWnBibWNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWNtVmpaV2wyYVc1bklEMGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWRtRnNhV1FnUFNCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YzJsNlpTQTlJREE3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1wd1pXY2dQU0IxYm1SbFptbHVaV1E3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQXZMeUJGZUhSeVlXTjBJSFJ2ZEdGc0lITnBlbVVnYjJZZ1puSmxaWHBsSUdaeVlXMWxJQ2hoWTNKdmMzTWdZV3hzSUdOb2RXNXJjeWxjYmlBZ0lDQWdJQ0FnZEdocGN5NXphWHBsSUQwZ2JtVjNJRVJoZEdGV2FXVjNLSFpwWlhjdWMyeHBZMlVvTVN3Z05Ta3VZblZtWm1WeUtTNW5aWFJKYm5Rek1pZ3dMQ0IwY25WbEtUdGNibHh1SUNBZ0lDQWdJQ0F2THlCSFpYUWdkR2hsSUdwd1pXY2djR0Z5ZENCdlppQjBhR1VnY0dGNWJHOWhaRnh1SUNBZ0lDQWdJQ0JqYjI1emRDQnFjR1ZuUW5sMFpYTWdQU0IyYVdWM0xuTnNhV05sS0RFZ0t5QTBLVHRjYmx4dUlDQWdJQ0FnSUNBdkx5QkJjSEJsYm1RZ2RHOGdaWGhwYzNScGJtY2dhbkJsWnlCMGFHRjBJR2h2YkdSeklIUm9aU0JtY21WbGVtVWdabkpoYldWY2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdWFuQmxaeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2FuQmxaeUE5SUc1bGR5QlZhVzUwT0VGeWNtRjVLSFJvYVhNdWFuQmxaeTVzWlc1bmRHZ2dLeUJxY0dWblFubDBaWE11YkdWdVozUm9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHcHdaV2N1YzJWMEtIUm9hWE11YW5CbFp5d2dNQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnFjR1ZuTG5ObGRDaHFjR1ZuUW5sMFpYTXNJSFJvYVhNdWFuQmxaeTVzWlc1bmRHZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVxY0dWbklEMGdhbkJsWnp0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQXZMeUJPYnlCbGVHbHpkR2x1WnlCbWNtVmxlbVVnWm5KaGJXVWdhbkJsWnl3Z2JXRnJaU0J2Ym1WY2JpQWdJQ0FnSUNBZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1wd1pXY2dQU0JxY0dWblFubDBaWE03WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5KbFkyVnBkbWx1WnlBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQk1iMmRuWlhJdVRHOW5LRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRXh2WjJkbGNpNUhaWFJUZEdGamExUnlZV05sS0Nrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lISmxZMlZwZG1Wa0lHWnBjbk4wSUdOb2RXNXJJRzltSUdaeVpXVjZaU0JtY21GdFpUb2dKSHQwYUdsekxtcHdaV2N1YkdWdVozUm9mUzhrZTNSb2FYTXVjMmw2WlgxZ0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEWmNiaUFnSUNBZ0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0F2THlCR2FXNXBjMmhsWkNCeVpXTmxhWFpwYm1jZ1puSmxaWHBsSUdaeVlXMWxMQ0IzWlNCallXNGdjMmh2ZHlCcGRDQnViM2RjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11YW5CbFp5NXNaVzVuZEdnZ1BUMDlJSFJvYVhNdWMybDZaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1eVpXTmxhWFpwYm1jZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWRtRnNhV1FnUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1RHOW5aMlZ5TGt4dlp5aGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQk1iMmRuWlhJdVIyVjBVM1JoWTJ0VWNtRmpaU2dwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdCeVpXTmxhWFpsWkNCamIyMXdiR1YwWlNCbWNtVmxlbVVnWm5KaGJXVWdKSHQwYUdsekxuTnBlbVY5WUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBMlhHNGdJQ0FnSUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1MWNHUmhkR1ZHY21WbGVtVkdjbUZ0WlVGdVpGTm9iM2NvZEdocGN5NXFjR1ZuTENCdmJreHZZV1JEWVd4c1FtRmpheWs3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0x5OGdWMlVnY21WalpXbDJaV1FnYlc5eVpTQmtZWFJoSUhSb1lXNGdkR2hsSUdaeVpXVjZaU0JtY21GdFpTQndZWGxzYjJGa0lHMWxjM05oWjJVZ2FXNWthV05oZEdVZ0tIUm9hWE1nYVhNZ1lXNGdaWEp5YjNJcFhHNGdJQ0FnSUNBZ0lHVnNjMlVnYVdZZ0tIUm9hWE11YW5CbFp5NXNaVzVuZEdnZ1BpQjBhR2x6TG5OcGVtVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lFeHZaMmRsY2k1RmNuSnZjaWhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JNYjJkblpYSXVSMlYwVTNSaFkydFVjbUZqWlNncExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHQnlaV05sYVhabFpDQmlhV2RuWlhJZ1puSmxaWHBsSUdaeVlXMWxJSFJvWVc0Z1lXUjJaWEowYVhObFpEb2dKSHQwYUdsekxtcHdaV2N1YkdWdVozUm9mUzhrZTNSb2FYTXVjMmw2WlgxZ1hHNGdJQ0FnSUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1cWNHVm5JRDBnZFc1a1pXWnBibVZrTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1eVpXTmxhWFpwYm1jZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JuMWNiaUlzSWk4dklFTnZjSGx5YVdkb2RDQkZjR2xqSUVkaGJXVnpMQ0JKYm1NdUlFRnNiQ0JTYVdkb2RITWdVbVZ6WlhKMlpXUXVYRzVjYm1sdGNHOXlkQ0I3SUVOdmIzSmthVzVoZEdWRGIyNTJaWEowWlhJZ2ZTQm1jbTl0SUNjdUxpOVZkR2xzTDBOdmIzSmthVzVoZEdWRGIyNTJaWEowWlhJbk8xeHVhVzF3YjNKMElIc2dVM1J5WldGdFRXVnpjMkZuWlVOdmJuUnliMnhzWlhJZ2ZTQm1jbTl0SUNjdUxpOVZaVWx1YzNSaGJtTmxUV1Z6YzJGblpTOVRkSEpsWVcxTlpYTnpZV2RsUTI5dWRISnZiR3hsY2ljN1hHNXBiWEJ2Y25RZ2V5QldhV1JsYjFCc1lYbGxjaUI5SUdaeWIyMGdKeTR1TDFacFpHVnZVR3hoZVdWeUwxWnBaR1Z2VUd4aGVXVnlKenRjYm1sdGNHOXlkQ0I3SUVsVWIzVmphRU52Ym5SeWIyeHNaWElnZlNCbWNtOXRJQ2N1TDBsVWIzVmphRU52Ym5SeWIyeHNaWEluTzF4dWFXMXdiM0owSUhzZ1RXOTFjMlZDZFhSMGIyNGdmU0JtY205dElDY3VMMDF2ZFhObFFuVjBkRzl1Y3ljN1hHNXBiWEJ2Y25RZ2V5QkZkbVZ1ZEV4cGMzUmxibVZ5VkhKaFkydGxjaUI5SUdaeWIyMGdKeTR1TDFWMGFXd3ZSWFpsYm5STWFYTjBaVzVsY2xSeVlXTnJaWEluTzF4dVhHNHZLaXBjYmlBcUlFRnNiRzkzY3lCbWIzSWdkR2hsSUhWellXZGxJRzltSUdaaGEyVWdkRzkxWTJnZ1pYWmxiblJ6SUdGdVpDQnBiWEJzWlcxbGJuUnpJRWxVYjNWamFFTnZiblJ5YjJ4c1pYSmNiaUFxSUVCd1lYSmhiU0JrWVhSaFEyaGhibTVsYkVOdmJuUnliMnhzWlhJZ0xTQlVhR1VnWTI5dWRISnZiR3hsY2lCbWIzSWdkR2hsSUVSaGRHRWdZMmhoYm01bGJGeHVJQ29nUUhCaGNtRnRJSFpwWkdWdlJXeGxiV1Z1ZEZCaGNtVnVkQ0F0SUZSb1pTQjJhV1JsYnlCd2JHRjVaWElnUkU5TklHVnNaVzFsYm5SY2JpQXFMMXh1Wlhod2IzSjBJR05zWVhOeklFWmhhMlZVYjNWamFFTnZiblJ5YjJ4c1pYSWdhVzF3YkdWdFpXNTBjeUJKVkc5MVkyaERiMjUwY205c2JHVnlJSHRjYmlBZ0lDQm1ZV3RsVkc5MVkyaEdhVzVuWlhJNklFWmhhMlZVYjNWamFFWnBibWRsY2p0Y2JpQWdJQ0IwYjFOMGNtVmhiV1Z5VFdWemMyRm5aWE5RY205MmFXUmxjam9nVTNSeVpXRnRUV1Z6YzJGblpVTnZiblJ5YjJ4c1pYSTdYRzRnSUNBZ2RtbGtaVzlGYkdWdFpXNTBVSEp2ZG1sa1pYSTZJRlpwWkdWdlVHeGhlV1Z5TzF4dUlDQWdJR052YjNKa2FXNWhkR1ZEYjI1MlpYSjBaWEk2SUVOdmIzSmthVzVoZEdWRGIyNTJaWEowWlhJN1hHNGdJQ0FnZG1sa1pXOUZiR1Z0Wlc1MFVHRnlaVzUwUTJ4cFpXNTBVbVZqZERvZ1JFOU5VbVZqZER0Y2JseHVJQ0FnSUM4dklGVjBhV3hwZEhrZ1ptOXlJR3RsWlhCcGJtY2dkSEpoWTJzZ2IyWWdaWFpsYm5RZ2FHRnVaR3hsY25NZ1lXNWtJSFZ1Y21WbmFYTjBaWEpwYm1jZ2RHaGxiVnh1SUNBZ0lIQnlhWFpoZEdVZ2RHOTFZMmhGZG1WdWRFeHBjM1JsYm1WeVZISmhZMnRsY2lBOUlHNWxkeUJGZG1WdWRFeHBjM1JsYm1WeVZISmhZMnRsY2lncE8xeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dRSEJoY21GdElIUnZVM1J5WldGdFpYSk5aWE56WVdkbGMxQnliM1pwWkdWeUlDMGdVM1J5WldGdElHMWxjM05oWjJVZ2FXNXpkR0Z1WTJWY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZG1sa1pXOUZiR1Z0Wlc1MFVISnZkbWxrWlhJZ0xTQldhV1JsYnlCbGJHVnRaVzUwSUdsdWMzUmhibU5sWEc0Z0lDQWdJQ29nUUhCaGNtRnRJR052YjNKa2FXNWhkR1ZEYjI1MlpYSjBaWElnTFNCQklHTnZiM0prYVc1aGRHVWdZMjl1ZG1WeWRHVnlJR2x1YzNSaGJtTmxYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1kyOXVjM1J5ZFdOMGIzSW9YRzRnSUNBZ0lDQWdJSFJ2VTNSeVpXRnRaWEpOWlhOellXZGxjMUJ5YjNacFpHVnlPaUJUZEhKbFlXMU5aWE56WVdkbFEyOXVkSEp2Ykd4bGNpeGNiaUFnSUNBZ0lDQWdkbWxrWlc5RmJHVnRaVzUwVUhKdmRtbGtaWEk2SUZacFpHVnZVR3hoZVdWeUxGeHVJQ0FnSUNBZ0lDQmpiMjl5WkdsdVlYUmxRMjl1ZG1WeWRHVnlPaUJEYjI5eVpHbHVZWFJsUTI5dWRtVnlkR1Z5WEc0Z0lDQWdLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkRzlUZEhKbFlXMWxjazFsYzNOaFoyVnpVSEp2ZG1sa1pYSWdQU0IwYjFOMGNtVmhiV1Z5VFdWemMyRm5aWE5RY205MmFXUmxjanRjYmlBZ0lDQWdJQ0FnZEdocGN5NTJhV1JsYjBWc1pXMWxiblJRY205MmFXUmxjaUE5SUhacFpHVnZSV3hsYldWdWRGQnliM1pwWkdWeU8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1OdmIzSmthVzVoZEdWRGIyNTJaWEowWlhJZ1BTQmpiMjl5WkdsdVlYUmxRMjl1ZG1WeWRHVnlPMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQnZiblJ2ZFdOb2MzUmhjblFnUFNBb1pYWTZJRlJ2ZFdOb1JYWmxiblFwSUQwK0lIUm9hWE11YjI1VWIzVmphRk4wWVhKMEtHVjJLVHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdiMjUwYjNWamFHVnVaQ0E5SUNobGRqb2dWRzkxWTJoRmRtVnVkQ2tnUFQ0Z2RHaHBjeTV2YmxSdmRXTm9SVzVrS0dWMktUdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2IyNTBiM1ZqYUcxdmRtVWdQU0FvWlhZNklGUnZkV05vUlhabGJuUXBJRDArSUhSb2FYTXViMjVVYjNWamFFMXZkbVVvWlhZcE8xeHVJQ0FnSUNBZ0lDQmtiMk4xYldWdWRDNWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtDZDBiM1ZqYUhOMFlYSjBKeXdnYjI1MGIzVmphSE4wWVhKMExDQjdJSEJoYzNOcGRtVTZJR1poYkhObElIMHBPMXh1SUNBZ0lDQWdJQ0JrYjJOMWJXVnVkQzVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLQ2QwYjNWamFHVnVaQ2NzSUc5dWRHOTFZMmhsYm1Rc0lIc2djR0Z6YzJsMlpUb2dabUZzYzJVZ2ZTazdYRzRnSUNBZ0lDQWdJR1J2WTNWdFpXNTBMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9KM1J2ZFdOb2JXOTJaU2NzSUc5dWRHOTFZMmh0YjNabExDQjdJSEJoYzNOcGRtVTZJR1poYkhObElIMHBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuUnZkV05vUlhabGJuUk1hWE4wWlc1bGNsUnlZV05yWlhJdVlXUmtWVzV5WldkcGMzUmxja05oYkd4aVlXTnJLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0tDa2dQVDRnWkc5amRXMWxiblF1Y21WdGIzWmxSWFpsYm5STWFYTjBaVzVsY2lnbmRHOTFZMmh6ZEdGeWRDY3NJRzl1ZEc5MVkyaHpkR0Z5ZENsY2JpQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1MGIzVmphRVYyWlc1MFRHbHpkR1Z1WlhKVWNtRmphMlZ5TG1Ga1pGVnVjbVZuYVhOMFpYSkRZV3hzWW1GamF5aGNiaUFnSUNBZ0lDQWdJQ0FnSUNncElEMCtJR1J2WTNWdFpXNTBMbkpsYlc5MlpVVjJaVzUwVEdsemRHVnVaWElvSjNSdmRXTm9aVzVrSnl3Z2IyNTBiM1ZqYUdWdVpDbGNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NTBiM1ZqYUVWMlpXNTBUR2x6ZEdWdVpYSlVjbUZqYTJWeUxtRmtaRlZ1Y21WbmFYTjBaWEpEWVd4c1ltRmpheWhjYmlBZ0lDQWdJQ0FnSUNBZ0lDZ3BJRDArSUdSdlkzVnRaVzUwTG5KbGJXOTJaVVYyWlc1MFRHbHpkR1Z1WlhJb0ozUnZkV05vYlc5MlpTY3NJRzl1ZEc5MVkyaHRiM1psS1Z4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGVnVjbVZuYVhOMFpYSWdZV3hzSUhSdmRXTm9JR1YyWlc1MGMxeHVJQ0FnSUNBcUwxeHVJQ0FnSUhWdWNtVm5hWE4wWlhKVWIzVmphRVYyWlc1MGN5Z3BJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NTBiM1ZqYUVWMlpXNTBUR2x6ZEdWdVpYSlVjbUZqYTJWeUxuVnVjbVZuYVhOMFpYSkJiR3dvS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCVFpYUnpJSFJvWlNCMmFXUmxieUJGYkdWdFpXNTBJRkJoY21WdWRDQkRiR2xsYm5RZ1VtVmpkQ0J1ZFcxaVpYSnpJR1p2Y2lCMGFHbHpJR05zWVhOelhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUhacFpHVnZSV3hsYldWdWRGQmhjbVZ1ZEVOc2FXVnVkRkpsWTNRZ0xTQmhJR2gwYld3Z1JXeGxiV1Z1ZEZCaGNtVnVkRU5zYVdWdWRGSmxZM1FnYjJKcVpXTjBYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2MyVjBWbWxrWlc5RmJHVnRaVzUwVUdGeVpXNTBRMnhwWlc1MFVtVmpkQ2gyYVdSbGIwVnNaVzFsYm5SUVlYSmxiblJEYkdsbGJuUlNaV04wT2lCRVQwMVNaV04wS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11ZG1sa1pXOUZiR1Z0Wlc1MFVHRnlaVzUwUTJ4cFpXNTBVbVZqZENBOUlIWnBaR1Z2Uld4bGJXVnVkRkJoY21WdWRFTnNhV1Z1ZEZKbFkzUTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dWMmhsYmlCaElIUnZkV05vSUdWMlpXNTBJR0psWjJsdWMxeHVJQ0FnSUNBcUlFQndZWEpoYlNCMGIzVmphQ0F0SUhSb1pTQmhZM1JwZG1GMGFXNW5JSFJ2ZFdOb0lHVjJaVzUwWEc0Z0lDQWdJQ292WEc0Z0lDQWdiMjVVYjNWamFGTjBZWEowS0hSdmRXTm9PaUJVYjNWamFFVjJaVzUwS1RvZ2RtOXBaQ0I3WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hkR2hwY3k1MmFXUmxiMFZzWlcxbGJuUlFjbTkyYVdSbGNpNXBjMVpwWkdWdlVtVmhaSGtvS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG1aaGEyVlViM1ZqYUVacGJtZGxjaUE5UFNCdWRXeHNLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCbWFYSnpkRjkwYjNWamFDQTlJSFJ2ZFdOb0xtTm9ZVzVuWldSVWIzVmphR1Z6V3pCZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NW1ZV3RsVkc5MVkyaEdhVzVuWlhJZ1BTQnVaWGNnUm1GclpWUnZkV05vUm1sdVoyVnlLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1pwY25OMFgzUnZkV05vTG1sa1pXNTBhV1pwWlhJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptbHljM1JmZEc5MVkyZ3VZMnhwWlc1MFdDQXRJSFJvYVhNdWRtbGtaVzlGYkdWdFpXNTBVR0Z5Wlc1MFEyeHBaVzUwVW1WamRDNXNaV1owTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdacGNuTjBYM1J2ZFdOb0xtTnNhV1Z1ZEZrZ0xTQjBhR2x6TG5acFpHVnZSV3hsYldWdWRGQmhjbVZ1ZEVOc2FXVnVkRkpsWTNRdWRHOXdYRzRnSUNBZ0lDQWdJQ0FnSUNBcE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0IyYVdSbGIwVnNaVzFsYm5SUVlYSmxiblFnUFZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVkbWxrWlc5RmJHVnRaVzUwVUhKdmRtbGtaWEl1WjJWMFZtbGtaVzlRWVhKbGJuUkZiR1Z0Wlc1MEtDa2dZWE1nU0ZSTlRFUnBka1ZzWlcxbGJuUTdYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0J0YjNWelpVVjJaVzUwSUQwZ2JtVjNJRTF2ZFhObFJYWmxiblFvSjIxdmRYTmxaVzUwWlhJbkxDQm1hWEp6ZEY5MGIzVmphQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJhV1JsYjBWc1pXMWxiblJRWVhKbGJuUXVaR2x6Y0dGMFkyaEZkbVZ1ZENodGIzVnpaVVYyWlc1MEtUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnWTI5dmNtUWdQU0IwYUdsekxtTnZiM0prYVc1aGRHVkRiMjUyWlhKMFpYSXVibTl5YldGc2FYcGxRVzVrVVhWaGJuUnBlbVZWYm5OcFoyNWxaQ2hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtWmhhMlZVYjNWamFFWnBibWRsY2k1NExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Wm1GclpWUnZkV05vUm1sdVoyVnlMbmxjYmlBZ0lDQWdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0IwYjFOMGNtVmhiV1Z5U0dGdVpHeGxjbk1nUFZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVkRzlUZEhKbFlXMWxjazFsYzNOaFoyVnpVSEp2ZG1sa1pYSXVkRzlUZEhKbFlXMWxja2hoYm1Sc1pYSnpPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHOVRkSEpsWVcxbGNraGhibVJzWlhKekxtZGxkQ2duVFc5MWMyVkViM2R1Snlrb1cxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lFMXZkWE5sUW5WMGRHOXVMbTFoYVc1Q2RYUjBiMjRzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dmNtUXVlQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI5eVpDNTVYRzRnSUNBZ0lDQWdJQ0FnSUNCZEtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0IwYjNWamFDNXdjbVYyWlc1MFJHVm1ZWFZzZENncE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGZG9aVzRnWVNCMGIzVmphQ0JsZG1WdWRDQmxibVJ6WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSFJ2ZFdOb1JYWmxiblFnTFNCMGFHVWdZV04wYVhaaGRHbHVaeUIwYjNWamFDQmxkbVZ1ZEZ4dUlDQWdJQ0FxTDF4dUlDQWdJRzl1Vkc5MVkyaEZibVFvZEc5MVkyaEZkbVZ1ZERvZ1ZHOTFZMmhGZG1WdWRDazZJSFp2YVdRZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvSVhSb2FYTXVkbWxrWlc5RmJHVnRaVzUwVUhKdmRtbGtaWEl1YVhOV2FXUmxiMUpsWVdSNUtDa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCMmFXUmxiMFZzWlcxbGJuUlFZWEpsYm5RZ1BWeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NTJhV1JsYjBWc1pXMWxiblJRY205MmFXUmxjaTVuWlhSV2FXUmxiMUJoY21WdWRFVnNaVzFsYm5Rb0tUdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2RHOVRkSEpsWVcxbGNraGhibVJzWlhKeklEMWNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVkRzlUZEhKbFlXMWxjazFsYzNOaFoyVnpVSEp2ZG1sa1pYSXVkRzlUZEhKbFlXMWxja2hoYm1Sc1pYSnpPMXh1WEc0Z0lDQWdJQ0FnSUdadmNpQW9iR1YwSUhRZ1BTQXdPeUIwSUR3Z2RHOTFZMmhGZG1WdWRDNWphR0Z1WjJWa1ZHOTFZMmhsY3k1c1pXNW5kR2c3SUhRckt5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnZEc5MVkyZ2dQU0IwYjNWamFFVjJaVzUwTG1Ob1lXNW5aV1JVYjNWamFHVnpXM1JkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSdmRXTm9MbWxrWlc1MGFXWnBaWElnUFQwOUlIUm9hWE11Wm1GclpWUnZkV05vUm1sdVoyVnlMbWxrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnZUNBOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJ2ZFdOb0xtTnNhV1Z1ZEZnZ0xTQjBhR2x6TG5acFpHVnZSV3hsYldWdWRGQmhjbVZ1ZEVOc2FXVnVkRkpsWTNRdWJHVm1kRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQjVJRDBnZEc5MVkyZ3VZMnhwWlc1MFdTQXRJSFJvYVhNdWRtbGtaVzlGYkdWdFpXNTBVR0Z5Wlc1MFEyeHBaVzUwVW1WamRDNTBiM0E3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdZMjl2Y21RZ1BWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtTnZiM0prYVc1aGRHVkRiMjUyWlhKMFpYSXVibTl5YldGc2FYcGxRVzVrVVhWaGJuUnBlbVZWYm5OcFoyNWxaQ2g0TENCNUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBiMU4wY21WaGJXVnlTR0Z1Wkd4bGNuTXVaMlYwS0NkTmIzVnpaVlZ3Snlrb1cxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JOYjNWelpVSjFkSFJ2Ymk1dFlXbHVRblYwZEc5dUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI5eVpDNTRMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyOXlaQzU1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWFNrN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCdGIzVnpaVVYyWlc1MElEMGdibVYzSUUxdmRYTmxSWFpsYm5Rb0oyMXZkWE5sYkdWaGRtVW5MQ0IwYjNWamFDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbWxrWlc5RmJHVnRaVzUwVUdGeVpXNTBMbVJwYzNCaGRHTm9SWFpsYm5Rb2JXOTFjMlZGZG1WdWRDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1bVlXdGxWRzkxWTJoR2FXNW5aWElnUFNCdWRXeHNPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIUnZkV05vUlhabGJuUXVjSEpsZG1WdWRFUmxabUYxYkhRb0tUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlBiaUJoSUUxdmRtVWdkRzkxWTJnZ1pYWmxiblJjYmlBZ0lDQWdLaUJBY0dGeVlXMGdkRzkxWTJoRmRtVnVkQ0F0SUhSb1pTQmhZM1JwZG1GMGFXNW5JSFJ2ZFdOb0lHVjJaVzUwWEc0Z0lDQWdJQ292WEc0Z0lDQWdiMjVVYjNWamFFMXZkbVVvZEc5MVkyaEZkbVZ1ZERvZ1ZHOTFZMmhGZG1WdWRDazZJSFp2YVdRZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvSVhSb2FYTXVkbWxrWlc5RmJHVnRaVzUwVUhKdmRtbGtaWEl1YVhOV2FXUmxiMUpsWVdSNUtDa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCMGIxTjBjbVZoYldWeVNHRnVaR3hsY25NZ1BWeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NTBiMU4wY21WaGJXVnlUV1Z6YzJGblpYTlFjbTkyYVdSbGNpNTBiMU4wY21WaGJXVnlTR0Z1Wkd4bGNuTTdYRzVjYmlBZ0lDQWdJQ0FnWm05eUlDaHNaWFFnZENBOUlEQTdJSFFnUENCMGIzVmphRVYyWlc1MExuUnZkV05vWlhNdWJHVnVaM1JvT3lCMEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUhSdmRXTm9JRDBnZEc5MVkyaEZkbVZ1ZEM1MGIzVmphR1Z6VzNSZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUnZkV05vTG1sa1pXNTBhV1pwWlhJZ1BUMDlJSFJvYVhNdVptRnJaVlJ2ZFdOb1JtbHVaMlZ5TG1sa0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2VDQTlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSdmRXTm9MbU5zYVdWdWRGZ2dMU0IwYUdsekxuWnBaR1Z2Uld4bGJXVnVkRkJoY21WdWRFTnNhV1Z1ZEZKbFkzUXViR1ZtZER0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0I1SUQwZ2RHOTFZMmd1WTJ4cFpXNTBXU0F0SUhSb2FYTXVkbWxrWlc5RmJHVnRaVzUwVUdGeVpXNTBRMnhwWlc1MFVtVmpkQzUwYjNBN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnWTI5dmNtUWdQVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbU52YjNKa2FXNWhkR1ZEYjI1MlpYSjBaWEl1Ym05eWJXRnNhWHBsUVc1a1VYVmhiblJwZW1WVmJuTnBaMjVsWkNoNExDQjVLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQmtaV3gwWVNBOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVkyOXZjbVJwYm1GMFpVTnZiblpsY25SbGNpNXViM0p0WVd4cGVtVkJibVJSZFdGdWRHbDZaVk5wWjI1bFpDaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIZ2dMU0IwYUdsekxtWmhhMlZVYjNWamFFWnBibWRsY2k1NExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2VTQXRJSFJvYVhNdVptRnJaVlJ2ZFdOb1JtbHVaMlZ5TG5sY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYjFOMGNtVmhiV1Z5U0dGdVpHeGxjbk11WjJWMEtDZE5iM1Z6WlUxdmRtVW5LU2hiWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZiM0prTG5nc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052YjNKa0xua3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSbGJIUmhMbmdzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUmxiSFJoTG5sY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1aaGEyVlViM1ZqYUVacGJtZGxjaTU0SUQwZ2VEdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1aaGEyVlViM1ZqYUVacGJtZGxjaTU1SUQwZ2VUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCMGIzVmphRVYyWlc1MExuQnlaWFpsYm5SRVpXWmhkV3gwS0NrN1hHNGdJQ0FnZlZ4dWZWeHVYRzR2S2lwY2JpQXFJRlJvWlNCcGJuUmxjbVpoWTJVZ1ptOXlJR1pwYm1kbGNpQndiM05wZEdsdmJpQnRZWEJ3YVc1blhHNGdLaTljYm1WNGNHOXlkQ0JqYkdGemN5QkdZV3RsVkc5MVkyaEdhVzVuWlhJZ2UxeHVJQ0FnSUdsa09pQnVkVzFpWlhJN1hHNGdJQ0FnZURvZ2JuVnRZbVZ5TzF4dUlDQWdJSGs2SUc1MWJXSmxjanRjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVCd1lYSmhiU0JwWkNBdElIUm9aU0JpZFhSMGIyNGdhV1JjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlQ0F0SUhSb1pTQjRJR0Y0YVhNZ2RtRnNkV1ZjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlU0F0SUhSb1pTQjVJR0Y0YVhNZ2RtRnNkV1ZjYmlBZ0lDQWdLaTljYmlBZ0lDQmpiMjV6ZEhKMVkzUnZjaWhwWkRvZ2JuVnRZbVZ5TENCNE9pQnVkVzFpWlhJc0lIazZJRzUxYldKbGNpa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxtbGtJRDBnYVdRN1hHNGdJQ0FnSUNBZ0lIUm9hWE11ZUNBOUlIZzdYRzRnSUNBZ0lDQWdJSFJvYVhNdWVTQTlJSGs3WEc0Z0lDQWdmVnh1ZlZ4dUlpd2lMeThnUTI5d2VYSnBaMmgwSUVWd2FXTWdSMkZ0WlhNc0lFbHVZeTRnUVd4c0lGSnBaMmgwY3lCU1pYTmxjblpsWkM1Y2JseHVhVzF3YjNKMElIc2dURzluWjJWeUlIMGdabkp2YlNBbkxpNHZURzluWjJWeUwweHZaMmRsY2ljN1hHNXBiWEJ2Y25RZ2V5QlRkSEpsWVcxTlpYTnpZV2RsUTI5dWRISnZiR3hsY2lCOUlHWnliMjBnSnk0dUwxVmxTVzV6ZEdGdVkyVk5aWE56WVdkbEwxTjBjbVZoYlUxbGMzTmhaMlZEYjI1MGNtOXNiR1Z5Snp0Y2JtbHRjRzl5ZENCN0lFVjJaVzUwVEdsemRHVnVaWEpVY21GamEyVnlJSDBnWm5KdmJTQW5MaTR2VlhScGJDOUZkbVZ1ZEV4cGMzUmxibVZ5VkhKaFkydGxjaWM3WEc1cGJYQnZjblFnZXlCRGIyNTBjbTlzYkdWeUlIMGdabkp2YlNBbkxpOUhZVzFsY0dGa1ZIbHdaWE1uTzF4dVhHNHZLaXBjYmlBcUlGUm9aU0JqYkdGemN5QjBhR0YwSUdoaGJtUnNaWE1nZEdobElHWjFibU4wYVc5dVlXeHBkSGtnYjJZZ1oyRnRaWEJoWkhNZ1lXNWtJR052Ym5SeWIyeHNaWEp6WEc0Z0tpOWNibVY0Y0c5eWRDQmpiR0Z6Y3lCSFlXMWxVR0ZrUTI5dWRISnZiR3hsY2lCN1hHNGdJQ0FnWTI5dWRISnZiR3hsY25NNklFRnljbUY1UEVOdmJuUnliMnhzWlhJK08xeHVJQ0FnSUhKbGNYVmxjM1JCYm1sdFlYUnBiMjVHY21GdFpUb2dLR05oYkd4aVlXTnJPaUJHY21GdFpWSmxjWFZsYzNSRFlXeHNZbUZqYXlrZ1BUNGdiblZ0WW1WeU8xeHVJQ0FnSUhSdlUzUnlaV0Z0WlhKTlpYTnpZV2RsYzFCeWIzWnBaR1Z5T2lCVGRISmxZVzFOWlhOellXZGxRMjl1ZEhKdmJHeGxjanRjYmx4dUlDQWdJQzh2SUZWMGFXeHBkSGtnWm05eUlHdGxaWEJwYm1jZ2RISmhZMnNnYjJZZ1pYWmxiblFnYUdGdVpHeGxjbk1nWVc1a0lIVnVjbVZuYVhOMFpYSnBibWNnZEdobGJWeHVJQ0FnSUhCeWFYWmhkR1VnWjJGdFpWQmhaRVYyWlc1MFRHbHpkR1Z1WlhKVWNtRmphMlZ5SUQwZ2JtVjNJRVYyWlc1MFRHbHpkR1Z1WlhKVWNtRmphMlZ5S0NrN1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2RHOVRkSEpsWVcxbGNrMWxjM05oWjJWelVISnZkbWxrWlhJZ0xTQlRkSEpsWVcwZ2JXVnpjMkZuWlNCcGJuTjBZVzVqWlZ4dUlDQWdJQ0FxTDF4dUlDQWdJR052Ym5OMGNuVmpkRzl5S0hSdlUzUnlaV0Z0WlhKTlpYTnpZV2RsYzFCeWIzWnBaR1Z5T2lCVGRISmxZVzFOWlhOellXZGxRMjl1ZEhKdmJHeGxjaWtnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMblJ2VTNSeVpXRnRaWEpOWlhOellXZGxjMUJ5YjNacFpHVnlJRDBnZEc5VGRISmxZVzFsY2sxbGMzTmhaMlZ6VUhKdmRtbGtaWEk3WEc1Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV5WlhGMVpYTjBRVzVwYldGMGFXOXVSbkpoYldVZ1BTQW9YRzRnSUNBZ0lDQWdJQ0FnSUNCM2FXNWtiM2N1Ylc5NlVtVnhkV1Z6ZEVGdWFXMWhkR2x2YmtaeVlXMWxJSHg4WEc0Z0lDQWdJQ0FnSUNBZ0lDQjNhVzVrYjNjdWQyVmlhMmwwVW1WeGRXVnpkRUZ1YVcxaGRHbHZia1p5WVcxbElIeDhYRzRnSUNBZ0lDQWdJQ0FnSUNCM2FXNWtiM2N1Y21WeGRXVnpkRUZ1YVcxaGRHbHZia1p5WVcxbFhHNGdJQ0FnSUNBZ0lDa3VZbWx1WkNoM2FXNWtiM2NwTzF4dUlDQWdJQ0FnSUNCamIyNXpkQ0JpY205M2MyVnlWMmx1Wkc5M0lEMGdkMmx1Wkc5M0lHRnpJRmRwYm1SdmR6dGNiaUFnSUNBZ0lDQWdhV1lnS0NkSFlXMWxjR0ZrUlhabGJuUW5JR2x1SUdKeWIzZHpaWEpYYVc1a2IzY3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUc5dVIyRnRaVkJoWkVOdmJtNWxZM1JsWkNBOUlDaGxkam9nUjJGdFpYQmhaRVYyWlc1MEtTQTlQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVoyRnRaVkJoWkVOdmJtNWxZM1JJWVc1a2JHVnlLR1YyS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElHOXVSMkZ0WlZCaFpFUnBjMk52Ym01bFkzUmxaQ0E5SUNobGRqb2dSMkZ0WlhCaFpFVjJaVzUwS1NBOVBseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WjJGdFpWQmhaRVJwYzJOdmJtNWxZM1JJWVc1a2JHVnlLR1YyS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSGRwYm1SdmR5NWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtDZG5ZVzFsY0dGa1kyOXVibVZqZEdWa0p5d2diMjVIWVcxbFVHRmtRMjl1Ym1WamRHVmtLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIZHBibVJ2ZHk1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NkbllXMWxjR0ZrWkdselkyOXVibVZqZEdWa0p5d2diMjVIWVcxbFVHRmtSR2x6WTI5dWJtVmpkR1ZrS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVoyRnRaVkJoWkVWMlpXNTBUR2x6ZEdWdVpYSlVjbUZqYTJWeUxtRmtaRlZ1Y21WbmFYTjBaWEpEWVd4c1ltRmpheWhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FvS1NBOVBpQjNhVzVrYjNjdWNtVnRiM1psUlhabGJuUk1hWE4wWlc1bGNpZ25aMkZ0WlhCaFpHTnZibTVsWTNSbFpDY3NJRzl1UjJGdFpWQmhaRU52Ym01bFkzUmxaQ2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbWRoYldWUVlXUkZkbVZ1ZEV4cGMzUmxibVZ5VkhKaFkydGxjaTVoWkdSVmJuSmxaMmx6ZEdWeVEyRnNiR0poWTJzb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tDa2dQVDRnZDJsdVpHOTNMbkpsYlc5MlpVVjJaVzUwVEdsemRHVnVaWElvSjJkaGJXVndZV1JrYVhOamIyNXVaV04wWldRbkxDQnZia2RoYldWUVlXUkVhWE5qYjI1dVpXTjBaV1FwWEc0Z0lDQWdJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0NkWFpXSkxhWFJIWVcxbGNHRmtSWFpsYm5RbklHbHVJR0p5YjNkelpYSlhhVzVrYjNjcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJRzl1VjJWaWEybDBSMkZ0WlZCaFpFTnZibTVsWTNSbFpDQTlJQ2hsZGpvZ1IyRnRaWEJoWkVWMlpXNTBLU0E5UGlCMGFHbHpMbWRoYldWUVlXUkRiMjV1WldOMFNHRnVaR3hsY2lobGRpazdYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0J2YmxkbFltdHBkRWRoYldWUVlXUkVhWE5qYjI1dVpXTjBaV1FnUFNBb1pYWTZJRWRoYldWd1lXUkZkbVZ1ZENrZ1BUNGdkR2hwY3k1bllXMWxVR0ZrUkdselkyOXVibVZqZEVoaGJtUnNaWElvWlhZcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZDJsdVpHOTNMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9KM2RsWW10cGRHZGhiV1Z3WVdSamIyNXVaV04wWldRbkxDQnZibGRsWW10cGRFZGhiV1ZRWVdSRGIyNXVaV04wWldRcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZDJsdVpHOTNMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9KM2RsWW10cGRHZGhiV1Z3WVdSa2FYTmpiMjV1WldOMFpXUW5MQ0J2YmxkbFltdHBkRWRoYldWUVlXUkVhWE5qYjI1dVpXTjBaV1FwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1bllXMWxVR0ZrUlhabGJuUk1hWE4wWlc1bGNsUnlZV05yWlhJdVlXUmtWVzV5WldkcGMzUmxja05oYkd4aVlXTnJLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2dwSUQwK0lIZHBibVJ2ZHk1eVpXMXZkbVZGZG1WdWRFeHBjM1JsYm1WeUtDZDNaV0pyYVhSbllXMWxjR0ZrWTI5dWJtVmpkR1ZrSnl3Z2IyNVhaV0pyYVhSSFlXMWxVR0ZrUTI5dWJtVmpkR1ZrS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WjJGdFpWQmhaRVYyWlc1MFRHbHpkR1Z1WlhKVWNtRmphMlZ5TG1Ga1pGVnVjbVZuYVhOMFpYSkRZV3hzWW1GamF5aGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW9LU0E5UGlCM2FXNWtiM2N1Y21WdGIzWmxSWFpsYm5STWFYTjBaVzVsY2lnbmQyVmlhMmwwWjJGdFpYQmhaR1JwYzJOdmJtNWxZM1JsWkNjc0lHOXVWMlZpYTJsMFIyRnRaVkJoWkVScGMyTnZibTVsWTNSbFpDbGNiaUFnSUNBZ0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdkR2hwY3k1amIyNTBjbTlzYkdWeWN5QTlJRnRkTzF4dUlDQWdJQ0FnSUNCcFppQW9ibUYyYVdkaGRHOXlMbWRsZEVkaGJXVndZV1J6S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JtYjNJZ0tHTnZibk4wSUdkaGJXVndZV1FnYjJZZ2JtRjJhV2RoZEc5eUxtZGxkRWRoYldWd1lXUnpLQ2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9aMkZ0WlhCaFpDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbWRoYldWUVlXUkRiMjV1WldOMFNHRnVaR3hsY2lodVpYY2dSMkZ0WlhCaFpFVjJaVzUwS0NkbllXMWxjR0ZrWTI5dWJtVmpkR1ZrSnl3Z2V5Qm5ZVzFsY0dGa0lIMHBLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJWYm5KbFoybHpkR1Z5Y3lCaGJHd2daWFpsYm5RZ2FHRnVaR3hsY25OY2JpQWdJQ0FnS2k5Y2JpQWdJQ0IxYm5KbFoybHpkR1Z5UjJGdFpWQmhaRVYyWlc1MGN5Z3BJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NW5ZVzFsVUdGa1JYWmxiblJNYVhOMFpXNWxjbFJ5WVdOclpYSXVkVzV5WldkcGMzUmxja0ZzYkNncE8xeHVJQ0FnSUNBZ0lDQm1iM0lvWTI5dWMzUWdZMjl1ZEhKdmJHeGxjaUJ2WmlCMGFHbHpMbU52Ym5SeWIyeHNaWEp6S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmloamIyNTBjbTlzYkdWeUxtbGtJQ0U5UFNCMWJtUmxabWx1WldRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG05dVIyRnRaWEJoWkVScGMyTnZibTVsWTNSbFpDaGpiMjUwY205c2JHVnlMbWxrS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCMGFHbHpMbU52Ym5SeWIyeHNaWEp6SUQwZ1cxMDdYRzRnSUNBZ0lDQWdJSFJvYVhNdWIyNUhZVzFsY0dGa1EyOXVibVZqZEdWa0lEMGdLQ2tnUFQ0Z2V5QXZLaUFxTHlCOU8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG05dVIyRnRaWEJoWkVScGMyTnZibTVsWTNSbFpDQTlJQ2dwSUQwK0lIc2dMeW9nS2k4Z2ZUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkRiMjV1WldOMGN5QjBhR1VnWjJGdFpYQmhaQ0JvWVc1a2JHVnlYRzRnSUNBZ0lDb2dRSEJoY21GdElHZGhiV1ZRWVdSRmRtVnVkQ0F0SUhSb1pTQmhZM1JwZG1GMGFXNW5JR2RoYldWd1lXUWdaWFpsYm5SY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JuWVcxbFVHRmtRMjl1Ym1WamRFaGhibVJzWlhJb1oyRnRaVkJoWkVWMlpXNTBPaUJIWVcxbGNHRmtSWFpsYm5RcElIdGNiaUFnSUNBZ0lDQWdURzluWjJWeUxreHZaeWhNYjJkblpYSXVSMlYwVTNSaFkydFVjbUZqWlNncExDQW5SMkZ0WlhCaFpDQmpiMjV1WldOMElHaGhibVJzWlhJbkxDQTJLVHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdaMkZ0WlhCaFpDQTlJR2RoYldWUVlXUkZkbVZ1ZEM1bllXMWxjR0ZrTzF4dVhHNGdJQ0FnSUNBZ0lHTnZibk4wSUhSbGJYQTZJRU52Ym5SeWIyeHNaWElnUFNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqZFhKeVpXNTBVM1JoZEdVNklHZGhiV1Z3WVdRc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J3Y21WMlUzUmhkR1U2SUdkaGJXVndZV1FzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaRG9nZFc1a1pXWnBibVZrWEc0Z0lDQWdJQ0FnSUgwN1hHNWNiaUFnSUNBZ0lDQWdkR2hwY3k1amIyNTBjbTlzYkdWeWN5NXdkWE5vS0hSbGJYQXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtTnZiblJ5YjJ4c1pYSnpXMmRoYldWd1lXUXVhVzVrWlhoZExtTjFjbkpsYm5SVGRHRjBaU0E5SUdkaGJXVndZV1E3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZMjl1ZEhKdmJHeGxjbk5iWjJGdFpYQmhaQzVwYm1SbGVGMHVjSEpsZGxOMFlYUmxJRDBnWjJGdFpYQmhaRHRjYmlBZ0lDQWdJQ0FnVEc5bloyVnlMa3h2WnloY2JpQWdJQ0FnSUNBZ0lDQWdJRXh2WjJkbGNpNUhaWFJUZEdGamExUnlZV05sS0Nrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FuWjJGdFpYQmhaRG9nSnlBcklHZGhiV1Z3WVdRdWFXUWdLeUFuSUdOdmJtNWxZM1JsWkNjc1hHNGdJQ0FnSUNBZ0lDQWdJQ0EyWEc0Z0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lIZHBibVJ2ZHk1eVpYRjFaWE4wUVc1cGJXRjBhVzl1Um5KaGJXVW9LQ2tnUFQ0Z2RHaHBjeTUxY0dSaGRHVlRkR0YwZFhNb0tTazdYRzRnSUNBZ0lDQWdJSFJvYVhNdWIyNUhZVzFsY0dGa1EyOXVibVZqZEdWa0tDazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dSR2x6WTI5dWJtVmpkSE1nZEdobElHZGhiV1Z3WVdRZ2FHRnVaR3hsY2x4dUlDQWdJQ0FxSUVCd1lYSmhiU0JuWVcxbFVHRmtSWFpsYm5RZ0xTQjBhR1VnWVdOMGFYWmhkR2x1WnlCbllXMWxjR0ZrSUdWMlpXNTBYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1oyRnRaVkJoWkVScGMyTnZibTVsWTNSSVlXNWtiR1Z5S0dkaGJXVlFZV1JGZG1WdWREb2dSMkZ0WlhCaFpFVjJaVzUwS1NCN1hHNGdJQ0FnSUNBZ0lFeHZaMmRsY2k1TWIyY29URzluWjJWeUxrZGxkRk4wWVdOclZISmhZMlVvS1N3Z0owZGhiV1Z3WVdRZ1pHbHpZMjl1Ym1WamRDQm9ZVzVrYkdWeUp5d2dOaWs3WEc0Z0lDQWdJQ0FnSUV4dloyZGxjaTVNYjJjb1hHNGdJQ0FnSUNBZ0lDQWdJQ0JNYjJkblpYSXVSMlYwVTNSaFkydFVjbUZqWlNncExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSjJkaGJXVndZV1E2SUNjZ0t5Qm5ZVzFsVUdGa1JYWmxiblF1WjJGdFpYQmhaQzVwWkNBcklDY2daR2x6WTI5dWJtVmpkR1ZrSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJRFpjYmlBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnWkdWc1pYUmxaRU52Ym5SeWIyeHNaWElnUFNCMGFHbHpMbU52Ym5SeWIyeHNaWEp6VzJkaGJXVlFZV1JGZG1WdWRDNW5ZVzFsY0dGa0xtbHVaR1Y0WFR0Y2JpQWdJQ0FnSUNBZ1pHVnNaWFJsSUhSb2FYTXVZMjl1ZEhKdmJHeGxjbk5iWjJGdFpWQmhaRVYyWlc1MExtZGhiV1Z3WVdRdWFXNWtaWGhkTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbU52Ym5SeWIyeHNaWEp6SUQwZ2RHaHBjeTVqYjI1MGNtOXNiR1Z5Y3k1bWFXeDBaWElvWEc0Z0lDQWdJQ0FnSUNBZ0lDQW9ZMjl1ZEhKdmJHeGxjaWtnUFQ0Z1kyOXVkSEp2Ykd4bGNpQWhQVDBnZFc1a1pXWnBibVZrWEc0Z0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YjI1SFlXMWxjR0ZrUkdselkyOXVibVZqZEdWa0tHUmxiR1YwWldSRGIyNTBjbTlzYkdWeUxtbGtLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJUWTJGdUlHWnZjaUJqYjI1dVpXTjBaV1FnWjJGdFpYQmhaSE5jYmlBZ0lDQWdLaTljYmlBZ0lDQnpZMkZ1UjJGdFpWQmhaSE1vS1NCN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUdkaGJXVndZV1J6SUQwZ2JtRjJhV2RoZEc5eUxtZGxkRWRoYldWd1lXUnpYRzRnSUNBZ0lDQWdJQ0FnSUNBL0lHNWhkbWxuWVhSdmNpNW5aWFJIWVcxbGNHRmtjeWdwWEc0Z0lDQWdJQ0FnSUNBZ0lDQTZJRzVoZG1sbllYUnZjaTUzWldKcmFYUkhaWFJIWVcxbGNHRmtjMXh1SUNBZ0lDQWdJQ0FnSUNBZ1B5QnVZWFpwWjJGMGIzSXVkMlZpYTJsMFIyVjBSMkZ0WlhCaFpITW9LVnh1SUNBZ0lDQWdJQ0FnSUNBZ09pQmJYVHRjYmlBZ0lDQWdJQ0FnWm05eUlDaHNaWFFnYVNBOUlEQTdJR2tnUENCbllXMWxjR0ZrY3k1c1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR2RoYldWd1lXUnpXMmxkSUNZbUlHZGhiV1Z3WVdSelcybGRMbWx1WkdWNElHbHVJSFJvYVhNdVkyOXVkSEp2Ykd4bGNuTXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtTnZiblJ5YjJ4c1pYSnpXMmRoYldWd1lXUnpXMmxkTG1sdVpHVjRYUzVqZFhKeVpXNTBVM1JoZEdVZ1BTQm5ZVzFsY0dGa2MxdHBYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRlZ3WkdGMFpYTWdkR2hsSUhOMFlYUjFjeUJ2WmlCMGFHVWdaMkZ0WlhCaFpDQmhibVFnYzJWdVpITWdkR2hsSUdsdWNIVjBjMXh1SUNBZ0lDQXFMMXh1SUNBZ0lIVndaR0YwWlZOMFlYUjFjeWdwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV6WTJGdVIyRnRaVkJoWkhNb0tUdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2RHOVRkSEpsWVcxbGNraGhibVJzWlhKeklEMWNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVkRzlUZEhKbFlXMWxjazFsYzNOaFoyVnpVSEp2ZG1sa1pYSXVkRzlUZEhKbFlXMWxja2hoYm1Sc1pYSnpPMXh1WEc0Z0lDQWdJQ0FnSUM4dklFbDBaWEpoZEdVZ2IzWmxjaUJ0ZFd4MGFYQnNaU0JqYjI1MGNtOXNiR1Z5Y3lCcGJpQjBhR1VnWTJGelpTQjBhR1VnYlhWc2RHbHdiR1VnWjJGdFpYQmhaSE1nWVhKbElHTnZibTVsWTNSbFpGeHVJQ0FnSUNBZ0lDQm1iM0lnS0dOdmJuTjBJR052Ym5SeWIyeHNaWElnYjJZZ2RHaHBjeTVqYjI1MGNtOXNiR1Z5Y3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1NXWWdkMlVnYUdGMlpXNG5kQ0J5WldObGFYWmxaQ0JoYmlCcFpDQW9jRzl6YzJsaWJHVWdhV1lnZFhOcGJtY2dZVzRnYjJ4a1pYSWdkbVZ5YzJsdmJpQnZaaUJWUlNrc0lISmxkSFZ5YmlCMGJ5QnZjbWxuYVc1aGJDQm1kVzVqZEdsdmJtRnNhWFI1WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCamIyNTBjbTlzYkdWeVNXNWtaWGdnUFNBb1kyOXVkSEp2Ykd4bGNpNXBaQ0E5UFQwZ2RXNWtaV1pwYm1Wa0tTQS9JSFJvYVhNdVkyOXVkSEp2Ykd4bGNuTXVhVzVrWlhoUFppaGpiMjUwY205c2JHVnlLU0E2SUdOdmJuUnliMnhzWlhJdWFXUTdYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0JqZFhKeVpXNTBVM1JoZEdVZ1BTQmpiMjUwY205c2JHVnlMbU4xY25KbGJuUlRkR0YwWlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2lBb2JHVjBJR2tnUFNBd095QnBJRHdnWTI5dWRISnZiR3hsY2k1amRYSnlaVzUwVTNSaGRHVXVZblYwZEc5dWN5NXNaVzVuZEdnN0lHa3JLeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJR04xY25KbGJuUkNkWFIwYjI0Z1BTQmpiMjUwY205c2JHVnlMbU4xY25KbGJuUlRkR0YwWlM1aWRYUjBiMjV6VzJsZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUhCeVpYWnBiM1Z6UW5WMGRHOXVJRDBnWTI5dWRISnZiR3hsY2k1d2NtVjJVM1JoZEdVdVluVjBkRzl1YzF0cFhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWTNWeWNtVnVkRUoxZEhSdmJpNXdjbVZ6YzJWa0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklIQnlaWE56WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hwSUQwOUlHZGhiV1Z3WVdSTVlYbHZkWFF1VEdWbWRGUnlhV2RuWlhJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCVlJYTWdiR1ZtZENCaGJtRnNiMmNnYUdGeklHRWdZblYwZEc5dUlHbHVaR1Y0SUc5bUlEVmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUnZVM1J5WldGdFpYSklZVzVrYkdWeWN5NW5aWFFvSjBkaGJXVndZV1JCYm1Gc2IyY25LU2hiWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVkSEp2Ykd4bGNrbHVaR1Y0TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEVXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTNWeWNtVnVkRUoxZEhSdmJpNTJZV3gxWlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWFNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvYVNBOVBTQm5ZVzFsY0dGa1RHRjViM1YwTGxKcFoyaDBWSEpwWjJkbGNpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGVkZjeUJ5YVdkb2RDQmhibUZzYjJjZ2FHRnpJR0VnWW5WMGRHOXVJR2x1WkdWNElHOW1JRFpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJ2VTNSeVpXRnRaWEpJWVc1a2JHVnljeTVuWlhRb0owZGhiV1Z3WVdSQmJtRnNiMmNuS1NoYlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1ZEhKdmJHeGxja2x1WkdWNExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRFlzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kzVnljbVZ1ZEVKMWRIUnZiaTUyWVd4MVpWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1hTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYjFOMGNtVmhiV1Z5U0dGdVpHeGxjbk11WjJWMEtDZEhZVzFsY0dGa1FuVjBkRzl1VUhKbGMzTmxaQ2NwS0Z0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjUwY205c2JHVnlTVzVrWlhnc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd2NtVjJhVzkxYzBKMWRIUnZiaTV3Y21WemMyVmtJRDhnTVNBNklEQmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDZ2hZM1Z5Y21WdWRFSjFkSFJ2Ymk1d2NtVnpjMlZrSUNZbUlIQnlaWFpwYjNWelFuVjBkRzl1TG5CeVpYTnpaV1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnY21Wc1pXRnpaVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9hU0E5UFNCbllXMWxjR0ZrVEdGNWIzVjBMa3hsWm5SVWNtbG5aMlZ5S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVlVWeklHeGxablFnWVc1aGJHOW5JR2hoY3lCaElHSjFkSFJ2YmlCcGJtUmxlQ0J2WmlBMVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGIxTjBjbVZoYldWeVNHRnVaR3hsY25NdVoyVjBLQ2RIWVcxbGNHRmtRVzVoYkc5bkp5a29XMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuUnliMnhzWlhKSmJtUmxlQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBMUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJREJjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRjBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLR2tnUFQwZ1oyRnRaWEJoWkV4aGVXOTFkQzVTYVdkb2RGUnlhV2RuWlhJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCVlJYTWdjbWxuYUhRZ1lXNWhiRzluSUdoaGN5QmhJR0oxZEhSdmJpQnBibVJsZUNCdlppQTJYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBiMU4wY21WaGJXVnlTR0Z1Wkd4bGNuTXVaMlYwS0NkSFlXMWxjR0ZrUVc1aGJHOW5KeWtvVzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZiblJ5YjJ4c1pYSkpibVJsZUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQTJMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSURCY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUYwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkRzlUZEhKbFlXMWxja2hoYm1Sc1pYSnpMbWRsZENnblIyRnRaWEJoWkVKMWRIUnZibEpsYkdWaGMyVmtKeWtvVzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZiblJ5YjJ4c1pYSkpibVJsZUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmRLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUVsMFpYSmhkR1VnYjNabGNpQm5ZVzFsY0dGa0lHRjRaWE1nS0hkbElIZHBiR3dnYVc1amNtVnRaVzUwSUdsdUlHeHZkSE1nYjJZZ01pQmhjeUIwYUdWeVpTQnBjeUF5SUdGNFpYTWdjR1Z5SUhOMGFXTnJLVnh1SUNBZ0lDQWdJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ2FTQTlJREE3SUdrZ1BDQmpkWEp5Wlc1MFUzUmhkR1V1WVhobGN5NXNaVzVuZEdnN0lHa2dLejBnTWlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRWh2Y21sNmIyNTBZV3dnWVhobGN5QmhjbVVnWlhabGJpQnVkVzFpWlhKbFpGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUhnZ1BTQndZWEp6WlVac2IyRjBLR04xY25KbGJuUlRkR0YwWlM1aGVHVnpXMmxkTG5SdlJtbDRaV1FvTkNrcE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnVm1WeWRHbGpZV3dnWVhobGN5QmhjbVVnYjJSa0lHNTFiV0psY21Wa1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdhSFIwY0hNNkx5OTNNMk11WjJsMGFIVmlMbWx2TDJkaGJXVndZV1F2STNKbGJXRndjR2x1WnlCSFlXMWxjR0ZrSUdKeWIzZHpaWElnYzJsa1pTQnpkR0Z1WkdGeVpDQnRZWEJ3YVc1bklHaGhjeUJ3YjNOcGRHbDJaU0JrYjNkdUxDQnVaV2RoZEdsMlpTQjFjQzRnVkdocGN5QnBjeUJrYjNkdWNtbG5hSFFnWkdselozVnpkR2x1Wnk0Z1UyOGdkMlVnWm1sNElHbDBMbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElIa2dQU0F0Y0dGeWMyVkdiRzloZENoamRYSnlaVzUwVTNSaGRHVXVZWGhsYzF0cElDc2dNVjB1ZEc5R2FYaGxaQ2cwS1NrN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJWUlNkeklHRnVZV3h2WnlCaGVHVnpJR1p2Ykd4dmR5QjBhR1VnYzJGdFpTQnZjbVJsY2lCaGN5QjBhR1VnWW5KdmQzTmxjbk1zSUdKMWRDQnpkR0Z5ZENCaGRDQnBibVJsZUNBeElITnZJSGRsSUhkcGJHd2diMlptYzJWMElHRnpJSE4xWTJoY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGIxTjBjbVZoYldWeVNHRnVaR3hsY25NdVoyVjBLQ2RIWVcxbGNHRmtRVzVoYkc5bkp5a29XMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNTBjbTlzYkdWeVNXNWtaWGdzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHa2dLeUF4TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjRYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYU2s3SUM4dklFaHZjbWw2YjI1MFlXd2dZWGhsY3l3Z2IyNXNlU0J2Wm1aelpYUWdZbmtnTVZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSdlUzUnlaV0Z0WlhKSVlXNWtiR1Z5Y3k1blpYUW9KMGRoYldWd1lXUkJibUZzYjJjbktTaGJYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuUnliMnhzWlhKSmJtUmxlQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FTQXJJRElzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmRLVHNnTHk4Z1ZtVnlkR2xqWVd3Z1lYaGxjeXdnYjJabWMyVjBJR0o1SUhSM2J5QW9NU0IwYnlCdFlYUmphQ0JWUlhNZ1lYaGxjeUJqYjI1MlpXNTBhVzl1SUdGdVpDQjBhR1Z1SUdGdWIzUm9aWElnTVNCbWIzSWdkR2hsSUhabGNuUnBZMkZzSUdGNFpYTXBYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtTnZiblJ5YjJ4c1pYSnpXMk52Ym5SeWIyeHNaWEpKYm1SbGVGMHVjSEpsZGxOMFlYUmxJRDBnWTNWeWNtVnVkRk4wWVhSbE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbU52Ym5SeWIyeHNaWEp6TG14bGJtZDBhQ0ErSURBcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjbVZ4ZFdWemRFRnVhVzFoZEdsdmJrWnlZVzFsS0NncElEMCtJSFJvYVhNdWRYQmtZWFJsVTNSaGRIVnpLQ2twTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnYjI1SFlXMWxjR0ZrVW1WemNHOXVjMlZTWldObGFYWmxaQ2huWVcxbGNHRmtTV1E2SUc1MWJXSmxjaWtnZTF4dUlDQWdJQ0FnSUNCbWIzSW9ZMjl1YzNRZ1kyOXVkSEp2Ykd4bGNpQnZaaUIwYUdsekxtTnZiblJ5YjJ4c1pYSnpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaWhqYjI1MGNtOXNiR1Z5TG1sa0lEMDlQU0IxYm1SbFptbHVaV1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNTBjbTlzYkdWeUxtbGtJRDBnWjJGdFpYQmhaRWxrTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dSWFpsYm5RZ2RHOGdjMlZ1WkNCMGFHVWdaMkZ0WlhCaFpHTnZibTVsWTNSbFpDQnRaWE56WVdkbElIUnZJSFJvWlNCaGNIQnNhV05oZEdsdmJseHVJQ0FnSUNBcUwxeHVJQ0FnSUc5dVIyRnRaWEJoWkVOdmJtNWxZM1JsWkNncElIdGNiaUFnSUNBZ0lDQWdMeThnUkdWbVlYVnNkQ0JHZFc1amRHbHZibUZzYVhSNU9pQkVieUJPYjNSb2FXNW5YRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dSWFpsYm5RZ2RHOGdjMlZ1WkNCMGFHVWdaMkZ0WlhCaFpHUnBjMk52Ym01bFkzUmxaQ0J0WlhOellXZGxJSFJ2SUhSb1pTQmhjSEJzYVdOaGRHbHZibHh1SUNBZ0lDQXFMMXh1SUNBZ0lDOHZJR1Z6YkdsdWRDMWthWE5oWW14bExXNWxlSFF0YkdsdVpTQkFkSGx3WlhOamNtbHdkQzFsYzJ4cGJuUXZibTh0ZFc1MWMyVmtMWFpoY25OY2JpQWdJQ0J2YmtkaGJXVndZV1JFYVhOamIyNXVaV04wWldRb1kyOXVkSEp2Ykd4bGNrbGtlRG9nYm5WdFltVnlLU0I3WEc0Z0lDQWdJQ0FnSUM4dklFUmxabUYxYkhRZ1JuVnVZM1JwYjI1aGJHbDBlVG9nUkc4Z1RtOTBhR2x1WjF4dUlDQWdJSDFjYm4xY2JseHVYRzVjYmk4cUtseHVJQ29nUVdSa2FYUnBiMjVoYkNCMGVYQmxjeUJtYjNJZ1YybHVaRzkzSUdGdVpDQk9ZWFpwWjJGMGIzSmNiaUFxTDF4dVpHVmpiR0Z5WlNCbmJHOWlZV3dnZTF4dUlDQWdJR2x1ZEdWeVptRmpaU0JYYVc1a2IzY2dlMXh1SUNBZ0lDQWdJQ0J0YjNwU1pYRjFaWE4wUVc1cGJXRjBhVzl1Um5KaGJXVW9ZMkZzYkdKaFkyczZJRVp5WVcxbFVtVnhkV1Z6ZEVOaGJHeGlZV05yS1RvZ2JuVnRZbVZ5TzF4dUlDQWdJQ0FnSUNCM1pXSnJhWFJTWlhGMVpYTjBRVzVwYldGMGFXOXVSbkpoYldVb1kyRnNiR0poWTJzNklFWnlZVzFsVW1WeGRXVnpkRU5oYkd4aVlXTnJLVG9nYm5WdFltVnlPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHbHVkR1Z5Wm1GalpTQk9ZWFpwWjJGMGIzSWdlMXh1SUNBZ0lDQWdJQ0IzWldKcmFYUkhaWFJIWVcxbGNHRmtjeWdwT2lCSFlXMWxjR0ZrVzEwN1hHNGdJQ0FnZlZ4dWZWeHVYRzR2S2lwY2JpQXFJRWRoYldWd1lXUWdiR0Y1YjNWMElHTnZaR1Z6SUdWdWRXMWNiaUFxTDF4dVpYaHdiM0owSUdWdWRXMGdaMkZ0WlhCaFpFeGhlVzkxZENCN1hHNGdJQ0FnVW1sbmFIUkRiSFZ6ZEdWeVFtOTBkRzl0UW5WMGRHOXVJRDBnTUN4Y2JpQWdJQ0JTYVdkb2RFTnNkWE4wWlhKU2FXZG9kRUoxZEhSdmJpQTlJREVzWEc0Z0lDQWdVbWxuYUhSRGJIVnpkR1Z5VEdWbWRFSjFkSFJ2YmlBOUlESXNYRzRnSUNBZ1VtbG5hSFJEYkhWemRHVnlWRzl3UW5WMGRHOXVJRDBnTXl4Y2JpQWdJQ0JNWldaMFUyaHZkV3hrWlhJZ1BTQTBMRnh1SUNBZ0lGSnBaMmgwVTJodmRXeGtaWElnUFNBMUxGeHVJQ0FnSUV4bFpuUlVjbWxuWjJWeUlEMGdOaXhjYmlBZ0lDQlNhV2RvZEZSeWFXZG5aWElnUFNBM0xGeHVJQ0FnSUZObGJHVmpkRTl5UW1GamF5QTlJRGdzWEc0Z0lDQWdVM1JoY25SUGNrWnZjbmRoY21RZ1BTQTVMRnh1SUNBZ0lFeGxablJCYm1Gc2IyZFFjbVZ6Y3lBOUlERXdMRnh1SUNBZ0lGSnBaMmgwUVc1aGJHOW5VSEpsYzNNZ1BTQXhNU3hjYmlBZ0lDQk1aV1owUTJ4MWMzUmxjbFJ2Y0VKMWRIUnZiaUE5SURFeUxGeHVJQ0FnSUV4bFpuUkRiSFZ6ZEdWeVFtOTBkRzl0UW5WMGRHOXVJRDBnTVRNc1hHNGdJQ0FnVEdWbWRFTnNkWE4wWlhKTVpXWjBRblYwZEc5dUlEMGdNVFFzWEc0Z0lDQWdUR1ZtZEVOc2RYTjBaWEpTYVdkb2RFSjFkSFJ2YmlBOUlERTFMRnh1SUNBZ0lFTmxiblJ5WlVKMWRIUnZiaUE5SURFMkxGeHVJQ0FnSUM4dklFRjRaWE5jYmlBZ0lDQk1aV1owVTNScFkydEliM0pwZW05dWRHRnNJRDBnTUN4Y2JpQWdJQ0JNWldaMFUzUnBZMnRXWlhKMGFXTmhiQ0E5SURFc1hHNGdJQ0FnVW1sbmFIUlRkR2xqYTBodmNtbDZiMjUwWVd3Z1BTQXlMRnh1SUNBZ0lGSnBaMmgwVTNScFkydFdaWEowYVdOaGJDQTlJRE5jYm4xY2JpSXNJaTh2SUVOdmNIbHlhV2RvZENCRmNHbGpJRWRoYldWekxDQkpibU11SUVGc2JDQlNhV2RvZEhNZ1VtVnpaWEoyWldRdVhHNWNibWx0Y0c5eWRDQjdJRTF2ZFhObFEyOXVkSEp2Ykd4bGNpQjlJR1p5YjIwZ0p5NHZUVzkxYzJWRGIyNTBjbTlzYkdWeUp6dGNibWx0Y0c5eWRDQjdJRXh2WjJkbGNpQjlJR1p5YjIwZ0p5NHVMMHh2WjJkbGNpOU1iMmRuWlhJbk8xeHVhVzF3YjNKMElIc2dTVTF2ZFhObFJYWmxiblJ6SUgwZ1puSnZiU0FuTGk5SlRXOTFjMlZGZG1WdWRITW5PMXh1WEc0dktpcGNiaUFxSUZacFpHVnZJRkJzWVhsbGNpQnRiM1Z6WlNCSWIzWmxjaUJvWVc1a2JHVnlYRzRnS2k5Y2JtVjRjRzl5ZENCamJHRnpjeUJJYjNabGNtbHVaMDF2ZFhObFJYWmxiblJ6SUdsdGNHeGxiV1Z1ZEhNZ1NVMXZkWE5sUlhabGJuUnpJSHRjYmlBZ0lDQnRiM1Z6WlVOdmJuUnliMnhzWlhJNklFMXZkWE5sUTI5dWRISnZiR3hsY2p0Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFQndZWEpoYlNCdGIzVnpaVU52Ym5SeWIyeHNaWElnTFNCTmIzVnpaU0JEYjI1MGNtOXNiR1Z5SUdsdWMzUmhibU5sWEc0Z0lDQWdJQ292WEc0Z0lDQWdZMjl1YzNSeWRXTjBiM0lvYlc5MWMyVkRiMjUwY205c2JHVnlPaUJOYjNWelpVTnZiblJ5YjJ4c1pYSXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXRiM1Z6WlVOdmJuUnliMnhzWlhJZ1BTQnRiM1Z6WlVOdmJuUnliMnhzWlhJN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1ZXNXlaV2RwYzNSbGNpQmxkbVZ1ZENCb1lXNWtiR1Z5YzF4dUlDQWdJQ0FxTDF4dUlDQWdJSFZ1Y21WbmFYTjBaWEpOYjNWelpVVjJaVzUwY3lncE9pQjJiMmxrSUh0Y2JpQWdJQ0FnSUNBZ0x5OGdaVzF3ZEhrZ1ptOXlJRWh2ZG1WeWFXNW5UVzkxYzJWRmRtVnVkSE1nYVcxd2JHVnRaVzUwWVhScGIyNWNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQklZVzVrYkdVZ2RHaGxJRzF2ZFhObElHMXZkbVVnWlhabGJuUXNJSE5sYm1SeklIUm9aU0J0YjNWelpTQmtZWFJoSUhSdklIUm9aU0JWUlNCSmJuTjBZVzVqWlZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0J0YjNWelpVVjJaVzUwSUMwZ1RXOTFjMlVnUlhabGJuUmNiaUFnSUNBZ0tpOWNiaUFnSUNCMWNHUmhkR1ZOYjNWelpVMXZkbVZRYjNOcGRHbHZiaWh0YjNWelpVVjJaVzUwT2lCTmIzVnpaVVYyWlc1MEtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNnaGRHaHBjeTV0YjNWelpVTnZiblJ5YjJ4c1pYSXVkbWxrWlc5RmJHVnRaVzUwVUhKdmRtbGtaWEl1YVhOV2FXUmxiMUpsWVdSNUtDa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQk1iMmRuWlhJdVRHOW5LRXh2WjJkbGNpNUhaWFJUZEdGamExUnlZV05sS0Nrc0lDZE5iM1Z6WlUxdmRtVW5MQ0EyS1R0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnWTI5dmNtUWdQVnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV0YjNWelpVTnZiblJ5YjJ4c1pYSXVZMjl2Y21ScGJtRjBaVU52Ym5abGNuUmxjaTV1YjNKdFlXeHBlbVZCYm1SUmRXRnVkR2w2WlZWdWMybG5ibVZrS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUcxdmRYTmxSWFpsYm5RdWIyWm1jMlYwV0N4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdGIzVnpaVVYyWlc1MExtOW1abk5sZEZsY2JpQWdJQ0FnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJR1JsYkhSaElEMWNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXViVzkxYzJWRGIyNTBjbTlzYkdWeUxtTnZiM0prYVc1aGRHVkRiMjUyWlhKMFpYSXVibTl5YldGc2FYcGxRVzVrVVhWaGJuUnBlbVZUYVdkdVpXUW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiVzkxYzJWRmRtVnVkQzV0YjNabGJXVnVkRmdzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYlc5MWMyVkZkbVZ1ZEM1dGIzWmxiV1Z1ZEZsY2JpQWdJQ0FnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSFJ2VTNSeVpXRnRaWEpJWVc1a2JHVnljeUE5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG0xdmRYTmxRMjl1ZEhKdmJHeGxjaTUwYjFOMGNtVmhiV1Z5VFdWemMyRm5aWE5RY205MmFXUmxjaTUwYjFOMGNtVmhiV1Z5U0dGdVpHeGxjbk03WEc0Z0lDQWdJQ0FnSUhSdlUzUnlaV0Z0WlhKSVlXNWtiR1Z5Y3k1blpYUW9KMDF2ZFhObFRXOTJaU2NwS0Z0Y2JpQWdJQ0FnSUNBZ0lDQWdJR052YjNKa0xuZ3NYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyOXlaQzU1TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdaR1ZzZEdFdWVDeGNiaUFnSUNBZ0lDQWdJQ0FnSUdSbGJIUmhMbmxjYmlBZ0lDQWdJQ0FnWFNrN1hHNGdJQ0FnSUNBZ0lHMXZkWE5sUlhabGJuUXVjSEpsZG1WdWRFUmxabUYxYkhRb0tUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQklZVzVrYkdVZ2RHaGxJRzF2ZFhObElFUnZkMjRnWlhabGJuUXNJSE5sYm1SeklIUm9aU0J0YjNWelpTQmtZWFJoSUhSdklIUm9aU0JWUlNCSmJuTjBZVzVqWlZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0J0YjNWelpVVjJaVzUwSUMwZ1RXOTFjMlVnUlhabGJuUmNiaUFnSUNBZ0tpOWNiaUFnSUNCb1lXNWtiR1ZOYjNWelpVUnZkMjRvYlc5MWMyVkZkbVZ1ZERvZ1RXOTFjMlZGZG1WdWRDa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb0lYUm9hWE11Ylc5MWMyVkRiMjUwY205c2JHVnlMblpwWkdWdlJXeGxiV1Z1ZEZCeWIzWnBaR1Z5TG1selZtbGtaVzlTWldGa2VTZ3BLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdURzluWjJWeUxreHZaeWhNYjJkblpYSXVSMlYwVTNSaFkydFVjbUZqWlNncExDQW5iMjVOYjNWelpTQkViM2R1Snl3Z05pazdYRzRnSUNBZ0lDQWdJR052Ym5OMElHTnZiM0prSUQxY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWJXOTFjMlZEYjI1MGNtOXNiR1Z5TG1OdmIzSmthVzVoZEdWRGIyNTJaWEowWlhJdWJtOXliV0ZzYVhwbFFXNWtVWFZoYm5ScGVtVlZibk5wWjI1bFpDaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnRiM1Z6WlVWMlpXNTBMbTltWm5ObGRGZ3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiVzkxYzJWRmRtVnVkQzV2Wm1aelpYUlpYRzRnSUNBZ0lDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCMGIxTjBjbVZoYldWeVNHRnVaR3hsY25NZ1BWeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXRiM1Z6WlVOdmJuUnliMnhzWlhJdWRHOVRkSEpsWVcxbGNrMWxjM05oWjJWelVISnZkbWxrWlhJdWRHOVRkSEpsWVcxbGNraGhibVJzWlhKek8xeHVJQ0FnSUNBZ0lDQjBiMU4wY21WaGJXVnlTR0Z1Wkd4bGNuTXVaMlYwS0NkTmIzVnpaVVJ2ZDI0bktTaGJYRzRnSUNBZ0lDQWdJQ0FnSUNCdGIzVnpaVVYyWlc1MExtSjFkSFJ2Yml4Y2JpQWdJQ0FnSUNBZ0lDQWdJR052YjNKa0xuZ3NYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyOXlaQzU1WEc0Z0lDQWdJQ0FnSUYwcE8xeHVJQ0FnSUNBZ0lDQnRiM1Z6WlVWMlpXNTBMbkJ5WlhabGJuUkVaV1poZFd4MEtDazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dTR0Z1Wkd4bElIUm9aU0J0YjNWelpTQlZjQ0JsZG1WdWRDd2djMlZ1WkhNZ2RHaGxJRzF2ZFhObElHUmhkR0VnZEc4Z2RHaGxJRlZGSUVsdWMzUmhibU5sWEc0Z0lDQWdJQ29nUUhCaGNtRnRJRzF2ZFhObFJYWmxiblFnTFNCTmIzVnpaU0JGZG1WdWRGeHVJQ0FnSUNBcUwxeHVJQ0FnSUdoaGJtUnNaVTF2ZFhObFZYQW9iVzkxYzJWRmRtVnVkRG9nVFc5MWMyVkZkbVZ1ZENrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvSVhSb2FYTXViVzkxYzJWRGIyNTBjbTlzYkdWeUxuWnBaR1Z2Uld4bGJXVnVkRkJ5YjNacFpHVnlMbWx6Vm1sa1pXOVNaV0ZrZVNncEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ1kyOXVjM1FnWTI5dmNtUWdQVnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV0YjNWelpVTnZiblJ5YjJ4c1pYSXVZMjl2Y21ScGJtRjBaVU52Ym5abGNuUmxjaTV1YjNKdFlXeHBlbVZCYm1SUmRXRnVkR2w2WlZWdWMybG5ibVZrS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUcxdmRYTmxSWFpsYm5RdWIyWm1jMlYwV0N4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdGIzVnpaVVYyWlc1MExtOW1abk5sZEZsY2JpQWdJQ0FnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSFJ2VTNSeVpXRnRaWEpJWVc1a2JHVnljeUE5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG0xdmRYTmxRMjl1ZEhKdmJHeGxjaTUwYjFOMGNtVmhiV1Z5VFdWemMyRm5aWE5RY205MmFXUmxjaTUwYjFOMGNtVmhiV1Z5U0dGdVpHeGxjbk03WEc0Z0lDQWdJQ0FnSUhSdlUzUnlaV0Z0WlhKSVlXNWtiR1Z5Y3k1blpYUW9KMDF2ZFhObFZYQW5LU2hiWEc0Z0lDQWdJQ0FnSUNBZ0lDQnRiM1Z6WlVWMlpXNTBMbUoxZEhSdmJpeGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmIzSmtMbmdzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjl5WkM1NVhHNGdJQ0FnSUNBZ0lGMHBPMXh1SUNBZ0lDQWdJQ0J0YjNWelpVVjJaVzUwTG5CeVpYWmxiblJFWldaaGRXeDBLQ2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nU0dGdVpHeGxJSFJvWlNCdGIzVnpaU0JqYjI1MFpYaDBJRzFsYm5VZ1pYWmxiblFzSUhObGJtUnpJSFJvWlNCdGIzVnpaU0JrWVhSaElIUnZJSFJvWlNCVlJTQkpibk4wWVc1alpWeHVJQ0FnSUNBcUlFQndZWEpoYlNCdGIzVnpaVVYyWlc1MElDMGdUVzkxYzJVZ1JYWmxiblJjYmlBZ0lDQWdLaTljYmlBZ0lDQm9ZVzVrYkdWRGIyNTBaWGgwVFdWdWRTaHRiM1Z6WlVWMlpXNTBPaUJOYjNWelpVVjJaVzUwS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2doZEdocGN5NXRiM1Z6WlVOdmJuUnliMnhzWlhJdWRtbGtaVzlGYkdWdFpXNTBVSEp2ZG1sa1pYSXVhWE5XYVdSbGIxSmxZV1I1S0NrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCamIyNXpkQ0JqYjI5eVpDQTlYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbTF2ZFhObFEyOXVkSEp2Ykd4bGNpNWpiMjl5WkdsdVlYUmxRMjl1ZG1WeWRHVnlMbTV2Y20xaGJHbDZaVUZ1WkZGMVlXNTBhWHBsVlc1emFXZHVaV1FvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYlc5MWMyVkZkbVZ1ZEM1dlptWnpaWFJZTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUcxdmRYTmxSWFpsYm5RdWIyWm1jMlYwV1Z4dUlDQWdJQ0FnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdkRzlUZEhKbFlXMWxja2hoYm1Sc1pYSnpJRDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Ylc5MWMyVkRiMjUwY205c2JHVnlMblJ2VTNSeVpXRnRaWEpOWlhOellXZGxjMUJ5YjNacFpHVnlMblJ2VTNSeVpXRnRaWEpJWVc1a2JHVnljenRjYmlBZ0lDQWdJQ0FnZEc5VGRISmxZVzFsY2toaGJtUnNaWEp6TG1kbGRDZ25UVzkxYzJWVmNDY3BLRnRjYmlBZ0lDQWdJQ0FnSUNBZ0lHMXZkWE5sUlhabGJuUXVZblYwZEc5dUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dmNtUXVlQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZiM0prTG5sY2JpQWdJQ0FnSUNBZ1hTazdYRzRnSUNBZ0lDQWdJRzF2ZFhObFJYWmxiblF1Y0hKbGRtVnVkRVJsWm1GMWJIUW9LVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJJWVc1a2JHVWdkR2hsSUcxdmRYTmxJSGRvWldWc0lHVjJaVzUwTENCelpXNWtjeUIwYUdVZ2JXOTFjMlVnZDJobFpXd2daR0YwWVNCMGJ5QjBhR1VnVlVVZ1NXNXpkR0Z1WTJWY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZDJobFpXeEZkbVZ1ZENBdElFMXZkWE5sSUVWMlpXNTBYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2FHRnVaR3hsVFc5MWMyVlhhR1ZsYkNoM2FHVmxiRVYyWlc1ME9pQlhhR1ZsYkVWMlpXNTBLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hkR2hwY3k1dGIzVnpaVU52Ym5SeWIyeHNaWEl1ZG1sa1pXOUZiR1Z0Wlc1MFVISnZkbWxrWlhJdWFYTldhV1JsYjFKbFlXUjVLQ2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JqYjI1emRDQmpiMjl5WkNBOVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtMXZkWE5sUTI5dWRISnZiR3hsY2k1amIyOXlaR2x1WVhSbFEyOXVkbVZ5ZEdWeUxtNXZjbTFoYkdsNlpVRnVaRkYxWVc1MGFYcGxWVzV6YVdkdVpXUW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkMmhsWld4RmRtVnVkQzV2Wm1aelpYUllMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSGRvWldWc1JYWmxiblF1YjJabWMyVjBXVnh1SUNBZ0lDQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2RHOVRkSEpsWVcxbGNraGhibVJzWlhKeklEMWNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXViVzkxYzJWRGIyNTBjbTlzYkdWeUxuUnZVM1J5WldGdFpYSk5aWE56WVdkbGMxQnliM1pwWkdWeUxuUnZVM1J5WldGdFpYSklZVzVrYkdWeWN6dGNiaUFnSUNBZ0lDQWdkRzlUZEhKbFlXMWxja2hoYm1Sc1pYSnpMbWRsZENnblRXOTFjMlZYYUdWbGJDY3BLRnRjYmlBZ0lDQWdJQ0FnSUNBZ0lIZG9aV1ZzUlhabGJuUXVkMmhsWld4RVpXeDBZU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZiM0prTG5nc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI5eVpDNTVYRzRnSUNBZ0lDQWdJRjBwTzF4dUlDQWdJQ0FnSUNCM2FHVmxiRVYyWlc1MExuQnlaWFpsYm5SRVpXWmhkV3gwS0NrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1NHRnVaR3hsSUhSb1pTQnRiM1Z6WlNCa2IzVmliR1VnWTJ4cFkyc2daWFpsYm5Rc0lITmxibVJ6SUhSb1pTQnRiM1Z6WlNCa1lYUmhJSFJ2SUhSb1pTQlZSU0JKYm5OMFlXNWpaVnh1SUNBZ0lDQXFJRUJ3WVhKaGJTQnRiM1Z6WlVWMlpXNTBJQzBnVFc5MWMyVWdSWFpsYm5SY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JvWVc1a2JHVk5iM1Z6WlVSdmRXSnNaU2h0YjNWelpVVjJaVzUwT2lCTmIzVnpaVVYyWlc1MEtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNnaGRHaHBjeTV0YjNWelpVTnZiblJ5YjJ4c1pYSXVkbWxrWlc5RmJHVnRaVzUwVUhKdmRtbGtaWEl1YVhOV2FXUmxiMUpsWVdSNUtDa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCamIyOXlaQ0E5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG0xdmRYTmxRMjl1ZEhKdmJHeGxjaTVqYjI5eVpHbHVZWFJsUTI5dWRtVnlkR1Z5TG01dmNtMWhiR2w2WlVGdVpGRjFZVzUwYVhwbFZXNXphV2R1WldRb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JXOTFjMlZGZG1WdWRDNXZabVp6WlhSWUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHMXZkWE5sUlhabGJuUXViMlptYzJWMFdWeHVJQ0FnSUNBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnZEc5VGRISmxZVzFsY2toaGJtUnNaWEp6SUQxY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWJXOTFjMlZEYjI1MGNtOXNiR1Z5TG5SdlUzUnlaV0Z0WlhKTlpYTnpZV2RsYzFCeWIzWnBaR1Z5TG5SdlUzUnlaV0Z0WlhKSVlXNWtiR1Z5Y3p0Y2JpQWdJQ0FnSUNBZ2RHOVRkSEpsWVcxbGNraGhibVJzWlhKekxtZGxkQ2duVFc5MWMyVkViM1ZpYkdVbktTaGJYRzRnSUNBZ0lDQWdJQ0FnSUNCdGIzVnpaVVYyWlc1MExtSjFkSFJ2Yml4Y2JpQWdJQ0FnSUNBZ0lDQWdJR052YjNKa0xuZ3NYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyOXlaQzU1WEc0Z0lDQWdJQ0FnSUYwcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFaGhibVJzWlNCMGFHVWdjSEpsYzNNZ2JXOTFjMlVnWW5WMGRHOXVjeUJsZG1WdWRDd2djMlZ1WkhNZ2RHaGxJRzF2ZFhObElHUmhkR0VnZEc4Z2RHaGxJRlZGSUVsdWMzUmhibU5sWEc0Z0lDQWdJQ29nUUhCaGNtRnRJRzF2ZFhObFJYWmxiblFnTFNCTmIzVnpaU0JGZG1WdWRGeHVJQ0FnSUNBcUwxeHVJQ0FnSUdoaGJtUnNaVkJ5WlhOelRXOTFjMlZDZFhSMGIyNXpLRzF2ZFhObFJYWmxiblE2SUUxdmRYTmxSWFpsYm5RcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0NGMGFHbHpMbTF2ZFhObFEyOXVkSEp2Ykd4bGNpNTJhV1JsYjBWc1pXMWxiblJRY205MmFXUmxjaTVwYzFacFpHVnZVbVZoWkhrb0tTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIUm9hWE11Ylc5MWMyVkRiMjUwY205c2JHVnlMbkJ5WlhOelRXOTFjMlZDZFhSMGIyNXpLRnh1SUNBZ0lDQWdJQ0FnSUNBZ2JXOTFjMlZGZG1WdWRDNWlkWFIwYjI1ekxGeHVJQ0FnSUNBZ0lDQWdJQ0FnYlc5MWMyVkZkbVZ1ZEM1dlptWnpaWFJZTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdiVzkxYzJWRmRtVnVkQzV2Wm1aelpYUlpYRzRnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nU0dGdVpHeGxJSFJvWlNCeVpXeGxZWE5sSUcxdmRYTmxJR0oxZEhSdmJuTWdaWFpsYm5Rc0lITmxibVJ6SUhSb1pTQnRiM1Z6WlNCa1lYUmhJSFJ2SUhSb1pTQlZSU0JKYm5OMFlXNWpaVnh1SUNBZ0lDQXFJRUJ3WVhKaGJTQnRiM1Z6WlVWMlpXNTBJQzBnVFc5MWMyVWdSWFpsYm5SY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JvWVc1a2JHVlNaV3hsWVhObFRXOTFjMlZDZFhSMGIyNXpLRzF2ZFhObFJYWmxiblE2SUUxdmRYTmxSWFpsYm5RcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0NGMGFHbHpMbTF2ZFhObFEyOXVkSEp2Ykd4bGNpNTJhV1JsYjBWc1pXMWxiblJRY205MmFXUmxjaTVwYzFacFpHVnZVbVZoWkhrb0tTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIUm9hWE11Ylc5MWMyVkRiMjUwY205c2JHVnlMbkpsYkdWaGMyVk5iM1Z6WlVKMWRIUnZibk1vWEc0Z0lDQWdJQ0FnSUNBZ0lDQnRiM1Z6WlVWMlpXNTBMbUoxZEhSdmJuTXNYRzRnSUNBZ0lDQWdJQ0FnSUNCdGIzVnpaVVYyWlc1MExtOW1abk5sZEZnc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J0YjNWelpVVjJaVzUwTG05bVpuTmxkRmxjYmlBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0I5WEc1OVhHNGlMQ0l2THlCRGIzQjVjbWxuYUhRZ1JYQnBZeUJIWVcxbGN5d2dTVzVqTGlCQmJHd2dVbWxuYUhSeklGSmxjMlZ5ZG1Wa0xseHVYRzVwYlhCdmNuUWdleUJHWVd0bFZHOTFZMmhEYjI1MGNtOXNiR1Z5SUgwZ1puSnZiU0FuTGk5R1lXdGxWRzkxWTJoRGIyNTBjbTlzYkdWeUp6dGNibWx0Y0c5eWRDQjdJRXRsZVdKdllYSmtRMjl1ZEhKdmJHeGxjaUI5SUdaeWIyMGdKeTR2UzJWNVltOWhjbVJEYjI1MGNtOXNiR1Z5Snp0Y2JtbHRjRzl5ZENCN0lFMXZkWE5sUTI5dWRISnZiR3hsY2lCOUlHWnliMjBnSnk0dlRXOTFjMlZEYjI1MGNtOXNiR1Z5Snp0Y2JtbHRjRzl5ZENCN0lGUnZkV05vUTI5dWRISnZiR3hsY2lCOUlHWnliMjBnSnk0dlZHOTFZMmhEYjI1MGNtOXNiR1Z5Snp0Y2JtbHRjRzl5ZENCN0lFZGhiV1ZRWVdSRGIyNTBjbTlzYkdWeUlIMGdabkp2YlNBbkxpOUhZVzFsY0dGa1EyOXVkSEp2Ykd4bGNpYzdYRzVwYlhCdmNuUWdleUJEYjI1bWFXY3NJRU52Ym5SeWIyeFRZMmhsYldWVWVYQmxJSDBnWm5KdmJTQW5MaTR2UTI5dVptbG5MME52Ym1acFp5YzdYRzVwYlhCdmNuUWdleUJNYjJkblpYSWdmU0JtY205dElDY3VMaTlNYjJkblpYSXZURzluWjJWeUp6dGNibWx0Y0c5eWRDQjdJRU52YjNKa2FXNWhkR1ZEYjI1MlpYSjBaWElnZlNCbWNtOXRJQ2N1TGk5VmRHbHNMME52YjNKa2FXNWhkR1ZEYjI1MlpYSjBaWEluTzF4dWFXMXdiM0owSUhzZ1UzUnlaV0Z0VFdWemMyRm5aVU52Ym5SeWIyeHNaWElnZlNCbWNtOXRJQ2N1TGk5VlpVbHVjM1JoYm1ObFRXVnpjMkZuWlM5VGRISmxZVzFOWlhOellXZGxRMjl1ZEhKdmJHeGxjaWM3WEc1cGJYQnZjblFnZXlCV2FXUmxiMUJzWVhsbGNpQjlJR1p5YjIwZ0p5NHVMMVpwWkdWdlVHeGhlV1Z5TDFacFpHVnZVR3hoZVdWeUp6dGNibHh1THlvcVhHNGdLaUJEYkdGemN5Qm1iM0lnYldGcmFXNW5JR0Z1WkNCelpYUjBhVzVuSUhWd0lHbHVjSFYwSUdOc1lYTnpJSFI1Y0dWelhHNGdLaTljYm1WNGNHOXlkQ0JqYkdGemN5QkpibkIxZEVOc1lYTnpaWE5HWVdOMGIzSjVJSHRjYmlBZ0lDQjBiMU4wY21WaGJXVnlUV1Z6YzJGblpYTlFjbTkyYVdSbGNqb2dVM1J5WldGdFRXVnpjMkZuWlVOdmJuUnliMnhzWlhJN1hHNGdJQ0FnZG1sa1pXOUZiR1Z0Wlc1MFVISnZkbWxrWlhJNklGWnBaR1Z2VUd4aGVXVnlPMXh1SUNBZ0lHTnZiM0prYVc1aGRHVkRiMjUyWlhKMFpYSTZJRU52YjNKa2FXNWhkR1ZEYjI1MlpYSjBaWEk3WEc0Z0lDQWdZV04wYVhabFMyVjVjem9nUVdOMGFYWmxTMlY1Y3lBOUlHNWxkeUJCWTNScGRtVkxaWGx6S0NrN1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2RHOVRkSEpsWVcxbGNrMWxjM05oWjJWelVISnZkbWxrWlhJZ0xTQlRkSEpsWVcwZ2JXVnpjMkZuWlNCcGJuTjBZVzVqWlZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0IyYVdSbGIwVnNaVzFsYm5SUWNtOTJhV1JsY2lBdElGWnBaR1Z2SUZCc1lYbGxjaUJwYm5OMFlXNWpaVnh1SUNBZ0lDQXFJRUJ3WVhKaGJTQmpiMjl5WkdsdVlYUmxRMjl1ZG1WeWRHVnlJQzBnUVNCamIyOXlaR2x1WVhSbFEyOXVkbVZ5ZEdWeUlHbHVjM1JoYm1ObFhHNGdJQ0FnSUNvdlhHNGdJQ0FnWTI5dWMzUnlkV04wYjNJb1hHNGdJQ0FnSUNBZ0lIUnZVM1J5WldGdFpYSk5aWE56WVdkbGMxQnliM1pwWkdWeU9pQlRkSEpsWVcxTlpYTnpZV2RsUTI5dWRISnZiR3hsY2l4Y2JpQWdJQ0FnSUNBZ2RtbGtaVzlGYkdWdFpXNTBVSEp2ZG1sa1pYSTZJRlpwWkdWdlVHeGhlV1Z5TEZ4dUlDQWdJQ0FnSUNCamIyOXlaR2x1WVhSbFEyOXVkbVZ5ZEdWeU9pQkRiMjl5WkdsdVlYUmxRMjl1ZG1WeWRHVnlYRzRnSUNBZ0tTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWRHOVRkSEpsWVcxbGNrMWxjM05oWjJWelVISnZkbWxrWlhJZ1BTQjBiMU4wY21WaGJXVnlUV1Z6YzJGblpYTlFjbTkyYVdSbGNqdGNiaUFnSUNBZ0lDQWdkR2hwY3k1MmFXUmxiMFZzWlcxbGJuUlFjbTkyYVdSbGNpQTlJSFpwWkdWdlJXeGxiV1Z1ZEZCeWIzWnBaR1Z5TzF4dUlDQWdJQ0FnSUNCMGFHbHpMbU52YjNKa2FXNWhkR1ZEYjI1MlpYSjBaWElnUFNCamIyOXlaR2x1WVhSbFEyOXVkbVZ5ZEdWeU8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGSmxaMmx6ZEdWeWN5QmljbTkzYzJWeUlHdGxlU0JsZG1WdWRITXVYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2NtVm5hWE4wWlhKTFpYbENiMkZ5WkNoamIyNW1hV2M2SUVOdmJtWnBaeWtnZTF4dUlDQWdJQ0FnSUNCTWIyZG5aWEl1VEc5bktFeHZaMmRsY2k1SFpYUlRkR0ZqYTFSeVlXTmxLQ2tzSUNkU1pXZHBjM1JsY2lCTFpYbGliMkZ5WkNCRmRtVnVkSE1uTENBM0tUdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2EyVjVZbTloY21SRGIyNTBjbTlzYkdWeUlEMGdibVYzSUV0bGVXSnZZWEprUTI5dWRISnZiR3hsY2loY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWRHOVRkSEpsWVcxbGNrMWxjM05oWjJWelVISnZkbWxrWlhJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1bWFXY3NYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbUZqZEdsMlpVdGxlWE5jYmlBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ2EyVjVZbTloY21SRGIyNTBjbTlzYkdWeUxuSmxaMmx6ZEdWeVMyVjVRbTloY21SRmRtVnVkSE1vS1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUd0bGVXSnZZWEprUTI5dWRISnZiR3hsY2p0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCeVpXZHBjM1JsY2lCdGIzVnpaU0JsZG1WdWRITWdZbUZ6WldRZ2IyNGdZU0JqYjI1MGNtOXNJSFI1Y0dWY2JpQWdJQ0FnS2lCQWNHRnlZVzBnWTI5dWRISnZiRk5qYUdWdFpTQXRJR2xtSUhSb1pTQnRiM1Z6WlNCcGN5QmxhWFJvWlhJZ2FHOTJaWEpwYm1jZ2IzSWdiRzlqYTJWa1hHNGdJQ0FnSUNvdlhHNGdJQ0FnY21WbmFYTjBaWEpOYjNWelpTaGpiMjUwY205c1UyTm9aVzFsT2lCRGIyNTBjbTlzVTJOb1pXMWxWSGx3WlNrZ2UxeHVJQ0FnSUNBZ0lDQk1iMmRuWlhJdVRHOW5LRXh2WjJkbGNpNUhaWFJUZEdGamExUnlZV05sS0Nrc0lDZFNaV2RwYzNSbGNpQk5iM1Z6WlNCRmRtVnVkSE1uTENBM0tUdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2JXOTFjMlZEYjI1MGNtOXNiR1Z5SUQwZ2JtVjNJRTF2ZFhObFEyOXVkSEp2Ykd4bGNpaGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVkRzlUZEhKbFlXMWxjazFsYzNOaFoyVnpVSEp2ZG1sa1pYSXNYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMblpwWkdWdlJXeGxiV1Z1ZEZCeWIzWnBaR1Z5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1amIyOXlaR2x1WVhSbFEyOXVkbVZ5ZEdWeUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWhZM1JwZG1WTFpYbHpYRzRnSUNBZ0lDQWdJQ2s3WEc1Y2JpQWdJQ0FnSUNBZ2MzZHBkR05vSUNoamIyNTBjbTlzVTJOb1pXMWxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUVOdmJuUnliMnhUWTJobGJXVlVlWEJsTGt4dlkydGxaRTF2ZFhObE9seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHMXZkWE5sUTI5dWRISnZiR3hsY2k1eVpXZHBjM1JsY2t4dlkydGxaRTF2ZFhObFJYWmxiblJ6S0cxdmRYTmxRMjl1ZEhKdmJHeGxjaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQWdJQ0FnSUNCallYTmxJRU52Ym5SeWIyeFRZMmhsYldWVWVYQmxMa2h2ZG1WeWFXNW5UVzkxYzJVNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JXOTFjMlZEYjI1MGNtOXNiR1Z5TG5KbFoybHpkR1Z5U0c5MlpYSnBibWROYjNWelpVVjJaVzUwY3lodGIzVnpaVU52Ym5SeWIyeHNaWElwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1pHVm1ZWFZzZERwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCTWIyZG5aWEl1U1c1bWJ5aGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVEc5bloyVnlMa2RsZEZOMFlXTnJWSEpoWTJVb0tTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSjNWdWEyNXZkMjRnUTI5dWRISnZiQ0JUWTJobGJXVWdWSGx3WlNCRVpXWmhkV3gwYVc1bklIUnZJRXh2WTJ0bFpDQk5iM1Z6WlNCRmRtVnVkSE1uWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdGIzVnpaVU52Ym5SeWIyeHNaWEl1Y21WbmFYTjBaWEpNYjJOclpXUk5iM1Z6WlVWMlpXNTBjeWh0YjNWelpVTnZiblJ5YjJ4c1pYSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRzF2ZFhObFEyOXVkSEp2Ykd4bGNqdGNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQnlaV2RwYzNSbGNpQjBiM1ZqYUNCbGRtVnVkSE5jYmlBZ0lDQWdLaUJBY0dGeVlXMGdabUZyWlUxdmRYTmxWRzkxWTJnZ0xTQjBhR1VnWm1GclpXUWdiVzkxYzJVZ2RHOTFZMmdnWlhabGJuUmNiaUFnSUNBZ0tpOWNiaUFnSUNCeVpXZHBjM1JsY2xSdmRXTm9LRnh1SUNBZ0lDQWdJQ0JtWVd0bFRXOTFjMlZVYjNWamFEb2dZbTl2YkdWaGJpeGNiaUFnSUNBZ0lDQWdkbWxrWlc5RmJHVnRaVzUwVUdGeVpXNTBRMnhwWlc1MFVtVmpkRG9nUkU5TlVtVmpkRnh1SUNBZ0lDa2dlMXh1SUNBZ0lDQWdJQ0JNYjJkblpYSXVURzluS0V4dloyZGxjaTVIWlhSVGRHRmphMVJ5WVdObEtDa3NJQ2RTWldkcGMzUmxjbWx1WnlCVWIzVmphQ2NzSURZcE8xeHVJQ0FnSUNBZ0lDQnBaaUFvWm1GclpVMXZkWE5sVkc5MVkyZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUdaaGEyVlViM1ZqYUVOdmJuUnliMnhzWlhJZ1BTQnVaWGNnUm1GclpWUnZkV05vUTI5dWRISnZiR3hsY2loY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMblJ2VTNSeVpXRnRaWEpOWlhOellXZGxjMUJ5YjNacFpHVnlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWRtbGtaVzlGYkdWdFpXNTBVSEp2ZG1sa1pYSXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1amIyOXlaR2x1WVhSbFEyOXVkbVZ5ZEdWeVhHNGdJQ0FnSUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdabUZyWlZSdmRXTm9RMjl1ZEhKdmJHeGxjaTV6WlhSV2FXUmxiMFZzWlcxbGJuUlFZWEpsYm5SRGJHbGxiblJTWldOMEtGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWnBaR1Z2Uld4bGJXVnVkRkJoY21WdWRFTnNhV1Z1ZEZKbFkzUmNiaUFnSUNBZ0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdabUZyWlZSdmRXTm9RMjl1ZEhKdmJHeGxjanRjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2dWRzkxWTJoRGIyNTBjbTlzYkdWeUtGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11ZEc5VGRISmxZVzFsY2sxbGMzTmhaMlZ6VUhKdmRtbGtaWElzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NTJhV1JsYjBWc1pXMWxiblJRY205MmFXUmxjaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtTnZiM0prYVc1aGRHVkRiMjUyWlhKMFpYSmNiaUFnSUNBZ0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQnlaV2RwYzNSbGNuTWdZU0JuWVcxbGNHRmtYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2NtVm5hWE4wWlhKSFlXMWxVR0ZrS0NrZ2UxeHVJQ0FnSUNBZ0lDQk1iMmRuWlhJdVRHOW5LRXh2WjJkbGNpNUhaWFJUZEdGamExUnlZV05sS0Nrc0lDZFNaV2RwYzNSbGNpQkhZVzFsSUZCaFpDY3NJRGNwTzF4dUlDQWdJQ0FnSUNCamIyNXpkQ0JuWVcxbFVHRmtRMjl1ZEhKdmJHeGxjaUE5SUc1bGR5QkhZVzFsVUdGa1EyOXVkSEp2Ykd4bGNpaGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVkRzlUZEhKbFlXMWxjazFsYzNOaFoyVnpVSEp2ZG1sa1pYSmNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR2RoYldWUVlXUkRiMjUwY205c2JHVnlPMXh1SUNBZ0lIMWNibjFjYmx4dUx5b3FYRzRnS2lCQklHTnNZWE56SUhSb1lYUWdhMlZsY0hNZ2RISmhZMnNnYjJZZ1kzVnljbVZ1ZENCaFkzUnBkbVVnYTJWNWMxeHVJQ292WEc1bGVIQnZjblFnWTJ4aGMzTWdRV04wYVhabFMyVjVjeUI3WEc0Z0lDQWdZV04wYVhabFMyVjVjem9nUVhKeVlYazhiblZ0WW1WeVBpQTlJRnRkTzF4dUlDQWdJR052Ym5OMGNuVmpkRzl5S0NrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG1GamRHbDJaVXRsZVhNZ1BTQmJYVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJIWlhRZ2RHaGxJR04xY25KbGJuUWdZWEp5WVhrZ2IyWWdZV04wYVhabElHdGxlWE5jYmlBZ0lDQWdLaUJBY21WMGRYSnVjeUF0SUdGdUlHRnljbUY1SUc5bUlHRmpkR2wyWlNCclpYbHpYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1oyVjBRV04wYVhabFMyVjVjeWdwT2lCdWRXMWlaWEpiWFNCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbUZqZEdsMlpVdGxlWE03WEc0Z0lDQWdmVnh1ZlZ4dUlpd2lMeThnUTI5d2VYSnBaMmgwSUVWd2FXTWdSMkZ0WlhNc0lFbHVZeTRnUVd4c0lGSnBaMmgwY3lCU1pYTmxjblpsWkM1Y2JseHVhVzF3YjNKMElIc2dVM0JsWTJsaGJFdGxlVU52WkdWeklIMGdabkp2YlNBbkxpOVRjR1ZqYVdGc1MyVjVRMjlrWlhNbk8xeHVhVzF3YjNKMElIc2dURzluWjJWeUlIMGdabkp2YlNBbkxpNHZURzluWjJWeUwweHZaMmRsY2ljN1hHNXBiWEJ2Y25RZ2V5QkJZM1JwZG1WTFpYbHpJSDBnWm5KdmJTQW5MaTlKYm5CMWRFTnNZWE56WlhOR1lXTjBiM0o1Snp0Y2JtbHRjRzl5ZENCN0lGTjBjbVZoYlUxbGMzTmhaMlZEYjI1MGNtOXNiR1Z5SUgwZ1puSnZiU0FuTGk0dlZXVkpibk4wWVc1alpVMWxjM05oWjJVdlUzUnlaV0Z0VFdWemMyRm5aVU52Ym5SeWIyeHNaWEluTzF4dWFXMXdiM0owSUhzZ1EyOXVabWxuTENCR2JHRm5jeUI5SUdaeWIyMGdKeTR1TDBOdmJtWnBaeTlEYjI1bWFXY25PMXh1YVcxd2IzSjBJSHNnUlhabGJuUk1hWE4wWlc1bGNsUnlZV05yWlhJZ2ZTQm1jbTl0SUNjdUxpOVZkR2xzTDBWMlpXNTBUR2x6ZEdWdVpYSlVjbUZqYTJWeUp6dGNibHh1YVc1MFpYSm1ZV05sSUVsRGIyUmxWRzlMWlhsRGIyUmxJSHRjYmlBZ0lDQmJhMlY1T2lCemRISnBibWRkT2lCdWRXMWlaWEk3WEc1OVhHNWNiaThxS2x4dUlDb2dTR0Z1Wkd4bGN5QjBhR1VnUzJWNVltOWhjbVFnU1c1d2RYUnpJR1p2Y2lCMGFHVWdaRzlqZFcxbGJuUmNiaUFxTDF4dVpYaHdiM0owSUdOc1lYTnpJRXRsZVdKdllYSmtRMjl1ZEhKdmJHeGxjaUI3WEc0Z0lDQWdkRzlUZEhKbFlXMWxjazFsYzNOaFoyVnpVSEp2ZG1sa1pYSTZJRk4wY21WaGJVMWxjM05oWjJWRGIyNTBjbTlzYkdWeU8xeHVJQ0FnSUdGamRHbDJaVXRsZVhOUWNtOTJhV1JsY2pvZ1FXTjBhWFpsUzJWNWN6dGNiaUFnSUNCamIyNW1hV2M2SUVOdmJtWnBaenRjYmx4dUlDQWdJQzh2SUZWMGFXeHBkSGtnWm05eUlHdGxaWEJwYm1jZ2RISmhZMnNnYjJZZ1pYWmxiblFnYUdGdVpHeGxjbk1nWVc1a0lIVnVjbVZuYVhOMFpYSnBibWNnZEdobGJWeHVJQ0FnSUhCeWFYWmhkR1VnYTJWNVltOWhjbVJGZG1WdWRFeHBjM1JsYm1WeVZISmhZMnRsY2lBOUlHNWxkeUJGZG1WdWRFeHBjM1JsYm1WeVZISmhZMnRsY2lncE8xeHVYRzRnSUNBZ0x5cGNiaUFnSUNBZ0tpQk9aWGNnWW5KdmQzTmxjaUJCVUVseklHaGhkbVVnYlc5MlpXUWdZWGRoZVNCbWNtOXRJRXRsZVdKdllYSmtSWFpsYm5RdWEyVjVRMjlrWlNCMGJ5QkxaWGxpYjJGeVpFVjJaVzUwTGtOdlpHVXVYRzRnSUNBZ0lDb2dSbTl5SUdSbGRHRnBiSE1nYzJWbE9pQm9kSFJ3Y3pvdkwyUmxkbVZzYjNCbGNpNXRiM3BwYkd4aExtOXlaeTlsYmkxVlV5OWtiMk56TDFkbFlpOUJVRWt2UzJWNVltOWhjbVJGZG1WdWRDOXJaWGxEYjJSbEkyTnZibk4wWVc1MGMxOW1iM0pmYTJWNVkyOWtaVjkyWVd4MVpWeHVJQ0FnSUNBcUlGZGxJSE4wYVd4c0lIVnpaU0J2YkdRZ1MyVjVZbTloY21SRmRtVnVkQzVyWlhsRGIyUmxJR2x1ZEdWblpYSnpJR2x1SUhSb1pTQlZSU0JES3lzZ2MybGtaU3dnYzI4Z2QyVWdibVZsWkNCaElIZGhlU0IwYnlCdFlYQWdkR2hsSUc1bGQxeHVJQ0FnSUNBcUlITjBjbWx1WnkxaVlYTmxaQ0JMWlhsaWIyRnlaRVYyWlc1MExrTnZaR1VnZEc4Z2RHaGxJRzlzWkNCcGJuUmxaMlZ5Y3k1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0JEYjJSbFZHOUxaWGxEYjJSbE9pQkpRMjlrWlZSdlMyVjVRMjlrWlNBOUlIdGNiaUFnSUNBZ0lDQWdSWE5qWVhCbE9pQXlOeXhjYmlBZ0lDQWdJQ0FnUkdsbmFYUXdPaUEwT0N4Y2JpQWdJQ0FnSUNBZ1JHbG5hWFF4T2lBME9TeGNiaUFnSUNBZ0lDQWdSR2xuYVhReU9pQTFNQ3hjYmlBZ0lDQWdJQ0FnUkdsbmFYUXpPaUExTVN4Y2JpQWdJQ0FnSUNBZ1JHbG5hWFEwT2lBMU1peGNiaUFnSUNBZ0lDQWdSR2xuYVhRMU9pQTFNeXhjYmlBZ0lDQWdJQ0FnUkdsbmFYUTJPaUExTkN4Y2JpQWdJQ0FnSUNBZ1JHbG5hWFEzT2lBMU5TeGNiaUFnSUNBZ0lDQWdSR2xuYVhRNE9pQTFOaXhjYmlBZ0lDQWdJQ0FnUkdsbmFYUTVPaUExTnl4Y2JpQWdJQ0FnSUNBZ1RXbHVkWE02SURFM015eGNiaUFnSUNBZ0lDQWdSWEYxWVd3NklERTROeXhjYmlBZ0lDQWdJQ0FnUW1GamEzTndZV05sT2lBNExGeHVJQ0FnSUNBZ0lDQlVZV0k2SURrc1hHNGdJQ0FnSUNBZ0lFdGxlVkU2SURneExGeHVJQ0FnSUNBZ0lDQkxaWGxYT2lBNE55eGNiaUFnSUNBZ0lDQWdTMlY1UlRvZ05qa3NYRzRnSUNBZ0lDQWdJRXRsZVZJNklEZ3lMRnh1SUNBZ0lDQWdJQ0JMWlhsVU9pQTROQ3hjYmlBZ0lDQWdJQ0FnUzJWNVdUb2dPRGtzWEc0Z0lDQWdJQ0FnSUV0bGVWVTZJRGcxTEZ4dUlDQWdJQ0FnSUNCTFpYbEpPaUEzTXl4Y2JpQWdJQ0FnSUNBZ1MyVjVUem9nTnprc1hHNGdJQ0FnSUNBZ0lFdGxlVkE2SURnd0xGeHVJQ0FnSUNBZ0lDQkNjbUZqYTJWMFRHVm1kRG9nTWpFNUxGeHVJQ0FnSUNBZ0lDQkNjbUZqYTJWMFVtbG5hSFE2SURJeU1TeGNiaUFnSUNBZ0lDQWdSVzUwWlhJNklERXpMRnh1SUNBZ0lDQWdJQ0JEYjI1MGNtOXNUR1ZtZERvZ01UY3NYRzRnSUNBZ0lDQWdJRXRsZVVFNklEWTFMRnh1SUNBZ0lDQWdJQ0JMWlhsVE9pQTRNeXhjYmlBZ0lDQWdJQ0FnUzJWNVJEb2dOamdzWEc0Z0lDQWdJQ0FnSUV0bGVVWTZJRGN3TEZ4dUlDQWdJQ0FnSUNCTFpYbEhPaUEzTVN4Y2JpQWdJQ0FnSUNBZ1MyVjVTRG9nTnpJc1hHNGdJQ0FnSUNBZ0lFdGxlVW82SURjMExGeHVJQ0FnSUNBZ0lDQkxaWGxMT2lBM05TeGNiaUFnSUNBZ0lDQWdTMlY1VERvZ056WXNYRzRnSUNBZ0lDQWdJRk5sYldsamIyeHZiam9nTVRnMkxGeHVJQ0FnSUNBZ0lDQlJkVzkwWlRvZ01qSXlMRnh1SUNBZ0lDQWdJQ0JDWVdOcmNYVnZkR1U2SURFNU1peGNiaUFnSUNBZ0lDQWdVMmhwWm5STVpXWjBPaUF4Tml4Y2JpQWdJQ0FnSUNBZ1FtRmphM05zWVhOb09pQXlNakFzWEc0Z0lDQWdJQ0FnSUV0bGVWbzZJRGt3TEZ4dUlDQWdJQ0FnSUNCTFpYbFlPaUE0T0N4Y2JpQWdJQ0FnSUNBZ1MyVjVRem9nTmpjc1hHNGdJQ0FnSUNBZ0lFdGxlVlk2SURnMkxGeHVJQ0FnSUNBZ0lDQkxaWGxDT2lBMk5peGNiaUFnSUNBZ0lDQWdTMlY1VGpvZ056Z3NYRzRnSUNBZ0lDQWdJRXRsZVUwNklEYzNMRnh1SUNBZ0lDQWdJQ0JEYjIxdFlUb2dNVGc0TEZ4dUlDQWdJQ0FnSUNCUVpYSnBiMlE2SURFNU1DeGNiaUFnSUNBZ0lDQWdVMnhoYzJnNklERTVNU3hjYmlBZ0lDQWdJQ0FnVTJocFpuUlNhV2RvZERvZ01qVXpMRnh1SUNBZ0lDQWdJQ0JCYkhSTVpXWjBPaUF4T0N4Y2JpQWdJQ0FnSUNBZ1UzQmhZMlU2SURNeUxGeHVJQ0FnSUNBZ0lDQkRZWEJ6VEc5amF6b2dNakFzWEc0Z0lDQWdJQ0FnSUVZeE9pQXhNVElzWEc0Z0lDQWdJQ0FnSUVZeU9pQXhNVE1zWEc0Z0lDQWdJQ0FnSUVZek9pQXhNVFFzWEc0Z0lDQWdJQ0FnSUVZME9pQXhNVFVzWEc0Z0lDQWdJQ0FnSUVZMU9pQXhNVFlzWEc0Z0lDQWdJQ0FnSUVZMk9pQXhNVGNzWEc0Z0lDQWdJQ0FnSUVZM09pQXhNVGdzWEc0Z0lDQWdJQ0FnSUVZNE9pQXhNVGtzWEc0Z0lDQWdJQ0FnSUVZNU9pQXhNakFzWEc0Z0lDQWdJQ0FnSUVZeE1Eb2dNVEl4TEZ4dUlDQWdJQ0FnSUNCR01URTZJREV5TWl4Y2JpQWdJQ0FnSUNBZ1JqRXlPaUF4TWpNc1hHNGdJQ0FnSUNBZ0lGQmhkWE5sT2lBeE9TeGNiaUFnSUNBZ0lDQWdVMk55YjJ4c1RHOWphem9nTVRRMUxGeHVJQ0FnSUNBZ0lDQk9kVzF3WVdSRWFYWnBaR1U2SURFeE1TeGNiaUFnSUNBZ0lDQWdUblZ0Y0dGa1RYVnNkR2x3YkhrNklERXdOaXhjYmlBZ0lDQWdJQ0FnVG5WdGNHRmtVM1ZpZEhKaFkzUTZJREV3T1N4Y2JpQWdJQ0FnSUNBZ1RuVnRjR0ZrUVdSa09pQXhNRGNzWEc0Z0lDQWdJQ0FnSUU1MWJYQmhaRVJsWTJsdFlXdzZJREV4TUN4Y2JpQWdJQ0FnSUNBZ1RuVnRjR0ZrT1RvZ01UQTFMRnh1SUNBZ0lDQWdJQ0JPZFcxd1lXUTRPaUF4TURRc1hHNGdJQ0FnSUNBZ0lFNTFiWEJoWkRjNklERXdNeXhjYmlBZ0lDQWdJQ0FnVG5WdGNHRmtOam9nTVRBeUxGeHVJQ0FnSUNBZ0lDQk9kVzF3WVdRMU9pQXhNREVzWEc0Z0lDQWdJQ0FnSUU1MWJYQmhaRFE2SURFd01DeGNiaUFnSUNBZ0lDQWdUblZ0Y0dGa016b2dPVGtzWEc0Z0lDQWdJQ0FnSUU1MWJYQmhaREk2SURrNExGeHVJQ0FnSUNBZ0lDQk9kVzF3WVdReE9pQTVOeXhjYmlBZ0lDQWdJQ0FnVG5WdGNHRmtNRG9nT1RZc1hHNGdJQ0FnSUNBZ0lFNTFiVXh2WTJzNklERTBOQ3hjYmlBZ0lDQWdJQ0FnUTI5dWRISnZiRkpwWjJoME9pQXlOVFFzWEc0Z0lDQWdJQ0FnSUVGc2RGSnBaMmgwT2lBeU5UVXNYRzRnSUNBZ0lDQWdJRWh2YldVNklETTJMRnh1SUNBZ0lDQWdJQ0JGYm1RNklETTFMRnh1SUNBZ0lDQWdJQ0JCY25KdmQxVndPaUF6T0N4Y2JpQWdJQ0FnSUNBZ1FYSnliM2RNWldaME9pQXpOeXhjYmlBZ0lDQWdJQ0FnUVhKeWIzZFNhV2RvZERvZ016a3NYRzRnSUNBZ0lDQWdJRUZ5Y205M1JHOTNiam9nTkRBc1hHNGdJQ0FnSUNBZ0lGQmhaMlZWY0RvZ016TXNYRzRnSUNBZ0lDQWdJRkJoWjJWRWIzZHVPaUF6TkN4Y2JpQWdJQ0FnSUNBZ1NXNXpaWEowT2lBME5TeGNiaUFnSUNBZ0lDQWdSR1ZzWlhSbE9pQTBOaXhjYmlBZ0lDQWdJQ0FnUTI5dWRHVjRkRTFsYm5VNklEa3pYRzRnSUNBZ2ZUdGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjBiMU4wY21WaGJXVnlUV1Z6YzJGblpYTlFjbTkyYVdSbGNpQlRkSEpsWVcwZ2JXVnpjMkZuWlNCd2NtOTJhV1JsY2lCamJHRnpjeUJ2WW1wbFkzUmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ1kyOXVabWxuSUZSb1pTQmhjSEJzYVdOaGRHbHZibk1nWTI5dVptbG5kWEpoZEdsdmJpNGdWMlVuY21VZ2FXNTBaWEpsYzNSbFpDQnBiaUIwYUdVZ2MzVndjSEpsYzNNZ1luSnZkM05sY2lCclpYbHpJRzl3ZEdsdmJseHVJQ0FnSUNBcUlFQndZWEpoYlNCaFkzUnBkbVZMWlhselVISnZkbWxrWlhJZ1FXTjBhWFpsSUd0bGVYTWdjSEp2ZG1sa1pYSWdZMnhoYzNNZ2IySnFaV04wWEc0Z0lDQWdJQ292WEc0Z0lDQWdZMjl1YzNSeWRXTjBiM0lvWEc0Z0lDQWdJQ0FnSUhSdlUzUnlaV0Z0WlhKTlpYTnpZV2RsYzFCeWIzWnBaR1Z5T2lCVGRISmxZVzFOWlhOellXZGxRMjl1ZEhKdmJHeGxjaXhjYmlBZ0lDQWdJQ0FnWTI5dVptbG5PaUJEYjI1bWFXY3NYRzRnSUNBZ0lDQWdJR0ZqZEdsMlpVdGxlWE5RY205MmFXUmxjam9nUVdOMGFYWmxTMlY1YzF4dUlDQWdJQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMblJ2VTNSeVpXRnRaWEpOWlhOellXZGxjMUJ5YjNacFpHVnlJRDBnZEc5VGRISmxZVzFsY2sxbGMzTmhaMlZ6VUhKdmRtbGtaWEk3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZMjl1Wm1sbklEMGdZMjl1Wm1sbk8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1GamRHbDJaVXRsZVhOUWNtOTJhV1JsY2lBOUlHRmpkR2wyWlV0bGVYTlFjbTkyYVdSbGNqdGNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlNaV2RwYzNSbGNuTWdaRzlqZFcxbGJuUWdhMlY1WW05aGNtUWdaWFpsYm5SeklIZHBkR2dnZEdobElHTnZiblJ5YjJ4c1pYSmNiaUFnSUNBZ0tpOWNiaUFnSUNCeVpXZHBjM1JsY2t0bGVVSnZZWEprUlhabGJuUnpLQ2tnZTF4dUlDQWdJQ0FnSUNCamIyNXpkQ0JyWlhsRWIzZHVTR0Z1Wkd4bGNpQTlJQ2hsZGpvZ1MyVjVZbTloY21SRmRtVnVkQ2tnUFQ0Z2RHaHBjeTVvWVc1a2JHVlBia3RsZVVSdmQyNG9aWFlwTzF4dUlDQWdJQ0FnSUNCamIyNXpkQ0JyWlhsVmNFaGhibVJzWlhJZ1BTQW9aWFk2SUV0bGVXSnZZWEprUlhabGJuUXBJRDArSUhSb2FYTXVhR0Z1Wkd4bFQyNUxaWGxWY0NobGRpazdYRzRnSUNBZ0lDQWdJR052Ym5OMElHdGxlVkJ5WlhOelNHRnVaR3hsY2lBOUlDaGxkam9nUzJWNVltOWhjbVJGZG1WdWRDa2dQVDRnZEdocGN5NW9ZVzVrYkdWUGJrdGxlVkJ5WlhOektHVjJLVHRjYmx4dUlDQWdJQ0FnSUNCa2IyTjFiV1Z1ZEM1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0Z3aWEyVjVaRzkzYmx3aUxDQnJaWGxFYjNkdVNHRnVaR3hsY2lrN1hHNGdJQ0FnSUNBZ0lHUnZZM1Z0Wlc1MExtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb1hDSnJaWGwxY0Z3aUxDQnJaWGxWY0VoaGJtUnNaWElwTzF4dVhHNGdJQ0FnSUNBZ0lDOHZWR2hwY3lCb1lYTWdZbVZsYmlCa1pYQnlaV05oZEdWa0lHRnpJR0YwSUVwMWJpQXhNeUF5TURJeFhHNGdJQ0FnSUNBZ0lHUnZZM1Z0Wlc1MExtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb1hDSnJaWGx3Y21WemMxd2lMQ0JyWlhsUWNtVnpjMGhoYm1Sc1pYSXBPMXh1WEc0Z0lDQWdJQ0FnSUhSb2FYTXVhMlY1WW05aGNtUkZkbVZ1ZEV4cGMzUmxibVZ5VkhKaFkydGxjaTVoWkdSVmJuSmxaMmx6ZEdWeVEyRnNiR0poWTJzb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FvS1NBOVBpQmtiMk4xYldWdWRDNXlaVzF2ZG1WRmRtVnVkRXhwYzNSbGJtVnlLRndpYTJWNVpHOTNibHdpTENCclpYbEViM2R1U0dGdVpHeGxjaWxjYmlBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVyWlhsaWIyRnlaRVYyWlc1MFRHbHpkR1Z1WlhKVWNtRmphMlZ5TG1Ga1pGVnVjbVZuYVhOMFpYSkRZV3hzWW1GamF5aGNiaUFnSUNBZ0lDQWdJQ0FnSUNncElEMCtJR1J2WTNWdFpXNTBMbkpsYlc5MlpVVjJaVzUwVEdsemRHVnVaWElvWENKclpYbDFjRndpTENCclpYbFZjRWhoYm1Sc1pYSXBYRzRnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVhMlY1WW05aGNtUkZkbVZ1ZEV4cGMzUmxibVZ5VkhKaFkydGxjaTVoWkdSVmJuSmxaMmx6ZEdWeVEyRnNiR0poWTJzb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FvS1NBOVBpQmtiMk4xYldWdWRDNXlaVzF2ZG1WRmRtVnVkRXhwYzNSbGJtVnlLRndpYTJWNWNISmxjM05jSWl3Z2EyVjVVSEpsYzNOSVlXNWtiR1Z5S1Z4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGVnVjbVZuYVhOMFpYSnpJR1J2WTNWdFpXNTBJR3RsZVdKdllYSmtJR1YyWlc1MGMxeHVJQ0FnSUNBcUwxeHVJQ0FnSUhWdWNtVm5hWE4wWlhKTFpYbENiMkZ5WkVWMlpXNTBjeWdwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVyWlhsaWIyRnlaRVYyWlc1MFRHbHpkR1Z1WlhKVWNtRmphMlZ5TG5WdWNtVm5hWE4wWlhKQmJHd29LVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJJWVc1a2JHVnpJRmRvWlc0Z1lTQnJaWGtnYVhNZ1pHOTNibHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQnJaWGxpYjJGeVpFVjJaVzUwSUMwZ1MyVjVZbTloY21RZ1pYWmxiblJjYmlBZ0lDQWdLaTljYmlBZ0lDQm9ZVzVrYkdWUGJrdGxlVVJ2ZDI0b2EyVjVZbTloY21SRmRtVnVkRG9nUzJWNVltOWhjbVJGZG1WdWRDa2dlMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQnJaWGxEYjJSbElEMGdkR2hwY3k1blpYUkxaWGxqYjJSbEtHdGxlV0p2WVhKa1JYWmxiblFwTzF4dUlDQWdJQ0FnSUNCcFppQW9JV3RsZVVOdlpHVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJRXh2WjJkbGNpNU1iMmNvWEc0Z0lDQWdJQ0FnSUNBZ0lDQk1iMmRuWlhJdVIyVjBVM1JoWTJ0VWNtRmpaU2dwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdZR3RsZVNCa2IzZHVJQ1I3YTJWNVEyOWtaWDBzSUhKbGNHVmhkQ0E5SUNSN2EyVjVZbTloY21SRmRtVnVkQzV5WlhCbFlYUjlZQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lEWmNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdkRzlUZEhKbFlXMWxja2hoYm1Sc1pYSnpJRDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11ZEc5VGRISmxZVzFsY2sxbGMzTmhaMlZ6VUhKdmRtbGtaWEl1ZEc5VGRISmxZVzFsY2toaGJtUnNaWEp6TzF4dUlDQWdJQ0FnSUNCMGIxTjBjbVZoYldWeVNHRnVaR3hsY25NdVoyVjBLQ2RMWlhsRWIzZHVKeWtvVzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1blpYUkxaWGxqYjJSbEtHdGxlV0p2WVhKa1JYWmxiblFwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdhMlY1WW05aGNtUkZkbVZ1ZEM1eVpYQmxZWFFnUHlBeElEb2dNRnh1SUNBZ0lDQWdJQ0JkS1R0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnWVdOMGFYWmxTMlY1Y3lBOUlIUm9hWE11WVdOMGFYWmxTMlY1YzFCeWIzWnBaR1Z5TG1kbGRFRmpkR2wyWlV0bGVYTW9LVHRjYmlBZ0lDQWdJQ0FnWVdOMGFYWmxTMlY1Y3k1d2RYTm9LR3RsZVVOdlpHVXBPMXh1SUNBZ0lDQWdJQ0F2THlCQ1lXTnJjM0JoWTJVZ2FYTWdibTkwSUdOdmJuTnBaR1Z5WldRZ1lTQnJaWGx3Y21WemN5QnBiaUJLWVhaaFUyTnlhWEIwSUdKMWRDQjNaU0J1WldWa0lHbDBYRzRnSUNBZ0lDQWdJQzh2SUhSdklHSmxJSE52SUdOb1lYSmhZM1JsY25NZ2JXRjVJR0psSUdSbGJHVjBaV1FnYVc0Z1lTQlZSU0IwWlhoMElHVnVkSEo1SUdacFpXeGtMbHh1SUNBZ0lDQWdJQ0JwWmlBb2EyVjVRMjlrWlNBOVBUMGdVM0JsWTJsaGJFdGxlVU52WkdWekxtSmhZMnRUY0dGalpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1pHOWpkVzFsYm5RdVpHbHpjR0YwWTJoRmRtVnVkQ2hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J1WlhjZ1MyVjVZbTloY21SRmRtVnVkQ2duYTJWNWNISmxjM01uTENCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05vWVhKRGIyUmxPaUJUY0dWamFXRnNTMlY1UTI5a1pYTXVZbUZqYTFOd1lXTmxYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCcFppQW9YRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbU52Ym1acFp5NXBjMFpzWVdkRmJtRmliR1ZrS0Vac1lXZHpMbE4xY0hCeVpYTnpRbkp2ZDNObGNrdGxlWE1wSUNZbVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtbHpTMlY1UTI5a1pVSnliM2R6WlhKTFpYa29hMlY1UTI5a1pTbGNiaUFnSUNBZ0lDQWdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnJaWGxpYjJGeVpFVjJaVzUwTG5CeVpYWmxiblJFWldaaGRXeDBLQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCb1lXNWtiR1Z6SUhkb1pXNGdZU0JyWlhrZ2FYTWdkWEJjYmlBZ0lDQWdLaUJBY0dGeVlXMGdhMlY1WW05aGNtUkZkbVZ1ZENBdElFdGxlV0p2WVhKa0lHVjJaVzUwWEc0Z0lDQWdJQ292WEc0Z0lDQWdhR0Z1Wkd4bFQyNUxaWGxWY0NoclpYbGliMkZ5WkVWMlpXNTBPaUJMWlhsaWIyRnlaRVYyWlc1MEtTQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElHdGxlVU52WkdVZ1BTQjBhR2x6TG1kbGRFdGxlV052WkdVb2EyVjVZbTloY21SRmRtVnVkQ2s3WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hhMlY1UTI5a1pTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdURzluWjJWeUxreHZaeWhNYjJkblpYSXVSMlYwVTNSaFkydFVjbUZqWlNncExDQmdhMlY1SUhWd0lDUjdhMlY1UTI5a1pYMWdMQ0EyS1R0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnZEc5VGRISmxZVzFsY2toaGJtUnNaWEp6SUQxY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWRHOVRkSEpsWVcxbGNrMWxjM05oWjJWelVISnZkbWxrWlhJdWRHOVRkSEpsWVcxbGNraGhibVJzWlhKek8xeHVJQ0FnSUNBZ0lDQjBiMU4wY21WaGJXVnlTR0Z1Wkd4bGNuTXVaMlYwS0NkTFpYbFZjQ2NwS0Z0Y2JpQWdJQ0FnSUNBZ0lDQWdJR3RsZVVOdlpHVXNYRzRnSUNBZ0lDQWdJQ0FnSUNCclpYbGliMkZ5WkVWMlpXNTBMbkpsY0dWaGRDQS9JREVnT2lBd1hHNGdJQ0FnSUNBZ0lGMHBPMXh1WEc0Z0lDQWdJQ0FnSUdsbUlDaGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVZMjl1Wm1sbkxtbHpSbXhoWjBWdVlXSnNaV1FvUm14aFozTXVVM1Z3Y0hKbGMzTkNjbTkzYzJWeVMyVjVjeWtnSmlaY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWFYTkxaWGxEYjJSbFFuSnZkM05sY2t0bGVTaHJaWGxEYjJSbEtWeHVJQ0FnSUNBZ0lDQXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHdGxlV0p2WVhKa1JYWmxiblF1Y0hKbGRtVnVkRVJsWm1GMWJIUW9LVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVoaGJtUnNaWE1nZDJobGJpQmhJR3RsZVNCcGN5QndjbVZ6YzF4dUlDQWdJQ0FxSUVCd1lYSmhiU0JyWlhsaWIyRnlaQ0F0SUV0bGVXSnZZWEprSUVWMlpXNTBYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2FHRnVaR3hsVDI1TFpYbFFjbVZ6Y3loclpYbGliMkZ5WkRvZ1MyVjVZbTloY21SRmRtVnVkQ2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9JU2duWTJoaGNrTnZaR1VuSUdsdUlHdGxlV0p2WVhKa0tTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1RHOW5aMlZ5TGxkaGNtNXBibWNvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVEc5bloyVnlMa2RsZEZOMFlXTnJWSEpoWTJVb0tTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5TMlY1WW05aGNtUkZkbVZ1ZEM1amFHRnlRMjlrWlNCcGN5QmtaWEJ5WldOaGRHVmtJR2x1SUhSb2FYTWdZbkp2ZDNObGNpd2dZMkZ1Ym05MElITmxibVFnYTJWNUlIQnlaWE56TGlkY2JpQWdJQ0FnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0JqYjI1emRDQmphR0Z5UTI5a1pTQTlJR3RsZVdKdllYSmtMbU5vWVhKRGIyUmxPMXh1SUNBZ0lDQWdJQ0JNYjJkblpYSXVURzluS0V4dloyZGxjaTVIWlhSVGRHRmphMVJ5WVdObEtDa3NJR0JyWlhrZ2NISmxjM01nSkh0amFHRnlRMjlrWlgxZ0xDQTJLVHRjYmx4dUlDQWdJQ0FnSUNCamIyNXpkQ0IwYjFOMGNtVmhiV1Z5U0dGdVpHeGxjbk1nUFZ4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1MGIxTjBjbVZoYldWeVRXVnpjMkZuWlhOUWNtOTJhV1JsY2k1MGIxTjBjbVZoYldWeVNHRnVaR3hsY25NN1hHNGdJQ0FnSUNBZ0lIUnZVM1J5WldGdFpYSklZVzVrYkdWeWN5NW5aWFFvSjB0bGVWQnlaWE56Snlrb1cyTm9ZWEpEYjJSbFhTazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dSMlYwY3lCMGFHVWdTMlY1WTI5a1pTQnZaaUIwYUdVZ1MyVjVJSEJ5WlhOelpXUmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2EyVjVZbTloY21SRmRtVnVkQ0F0SUV0bGVTQmliMkZ5WkNCRmRtVnVkRnh1SUNBZ0lDQXFJRUJ5WlhSMWNtNXpJQzBnZEdobElHdGxlU0JqYjJSbElHOW1JSFJvWlNCTFpYbGNiaUFnSUNBZ0tpOWNiaUFnSUNCblpYUkxaWGxqYjJSbEtHdGxlV0p2WVhKa1JYWmxiblE2SUV0bGVXSnZZWEprUlhabGJuUXBJSHRjYmlBZ0lDQWdJQ0FnTHk4Z1NXWWdkMlVnWkc5dUozUWdhR0YyWlNCclpYbERiMlJsSUhCeWIzQmxjblI1SUdKbFkyRjFjMlVnWW5KdmQzTmxjaUJCVUVrZ2FYTWdaR1Z3Y21WallYUmxaQ0IwYUdWdUlIVnpaU0JMWlhsaWIyRnlaRVYyWlc1MExtTnZaR1VnYVc1emRHVmhaQzVjYmlBZ0lDQWdJQ0FnTHk4Z1UyVmxPaUJvZEhSd2N6b3ZMMlJsZG1Wc2IzQmxjaTV0YjNwcGJHeGhMbTl5Wnk5bGJpMVZVeTlrYjJOekwxZGxZaTlCVUVrdlMyVjVZbTloY21SRmRtVnVkQzlyWlhsRGIyUmxJMk52Ym5OMFlXNTBjMTltYjNKZmEyVjVZMjlrWlY5MllXeDFaVnh1SUNBZ0lDQWdJQ0JwWmlBb0lTZ25hMlY1UTI5a1pTY2dhVzRnYTJWNVltOWhjbVJGZG1WdWRDa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRU52Ym5abGNuUWdTMlY1WW05aGNtUkZkbVZ1ZEM1amIyUmxJSE4wY21sdVp5QnBiblJ2SUdsdWRHVm5aWEl0WW1GelpXUWdhMlY1SUdOdlpHVWdabTl5SUdKaFkydDNZWEprY3lCamIyMXdZWFJwWW1sc2FYUjVJSEpsWVhOdmJuTXVYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0JsZG1WdWRDQTlJR3RsZVdKdllYSmtSWFpsYm5RZ1lYTWdTMlY1WW05aGNtUkZkbVZ1ZER0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNobGRtVnVkQzVqYjJSbElHbHVJSFJvYVhNdVEyOWtaVlJ2UzJWNVEyOWtaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxrTnZaR1ZVYjB0bGVVTnZaR1ZiWlhabGJuUXVZMjlrWlYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRXh2WjJkbGNpNVhZWEp1YVc1bktGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JNYjJkblpYSXVSMlYwVTNSaFkydFVjbUZqWlNncExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JnUzJWNVltOWhjbVFnWTI5a1pTQnZaaUFrZTJWMlpXNTBMbU52WkdWOUlHbHpJRzV2ZENCemRYQndiM0owWldRZ2FXNGdiM1Z5SUcxaGNIQnBibWNzSUdsbmJtOXlhVzVuSUhSb2FYTWdhMlY1TG1CY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCdWRXeHNPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1NXWWdkMlVnYldGa1pTQnBkQ0JvWlhKbElFdGxlV0p2WVhKa1JYWmxiblF1YTJWNVEyOWtaU0JwY3lCemRHbHNiQ0J6ZFhCd2IzSjBaV1FnYzI4Z2QyVWdZMkZ1SUhOaFptVnNlU0IxYzJVZ2FYUXVYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tGeHVJQ0FnSUNBZ0lDQWdJQ0FnYTJWNVltOWhjbVJGZG1WdWRDNXJaWGxEYjJSbElEMDlQU0JUY0dWamFXRnNTMlY1UTI5a1pYTXVjMmhwWm5RZ0ppWmNiaUFnSUNBZ0lDQWdJQ0FnSUd0bGVXSnZZWEprUlhabGJuUXVZMjlrWlNBOVBUMGdKMU5vYVdaMFVtbG5hSFFuWEc0Z0lDQWdJQ0FnSUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRk53WldOcFlXeExaWGxEYjJSbGN5NXlhV2RvZEZOb2FXWjBPMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdhMlY1WW05aGNtUkZkbVZ1ZEM1clpYbERiMlJsSUQwOVBTQlRjR1ZqYVdGc1MyVjVRMjlrWlhNdVkyOXVkSEp2YkNBbUpseHVJQ0FnSUNBZ0lDQWdJQ0FnYTJWNVltOWhjbVJGZG1WdWRDNWpiMlJsSUQwOVBTQW5RMjl1ZEhKdmJGSnBaMmgwSjF4dUlDQWdJQ0FnSUNBcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJUY0dWamFXRnNTMlY1UTI5a1pYTXVjbWxuYUhSRGIyNTBjbTlzTzF4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tGeHVJQ0FnSUNBZ0lDQWdJQ0FnYTJWNVltOWhjbVJGZG1WdWRDNXJaWGxEYjJSbElEMDlQU0JUY0dWamFXRnNTMlY1UTI5a1pYTXVZV3gwSUNZbVhHNGdJQ0FnSUNBZ0lDQWdJQ0JyWlhsaWIyRnlaRVYyWlc1MExtTnZaR1VnUFQwOUlDZEJiSFJTYVdkb2RDZGNiaUFnSUNBZ0lDQWdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1UzQmxZMmxoYkV0bGVVTnZaR1Z6TG5KcFoyaDBRV3gwTzF4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHdGxlV0p2WVhKa1JYWmxiblF1YTJWNVEyOWtaVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVKeWIzZHpaWElnYTJWNWN5QmtieUJ1YjNRZ2FHRjJaU0JoSUdOb1lYSkRiMlJsSUhOdklIZGxJRzl1YkhrZ2JtVmxaQ0IwYnlCMFpYTjBJR3RsZVVOdlpHVXVYRzRnSUNBZ0lDb2dRSEJoY21GdElHdGxlVU52WkdVZ0xTQjBhR1VnWW5KdmQzTmxjaUJyWlhsamIyUmxJRzUxYldKbGNseHVJQ0FnSUNBcUwxeHVJQ0FnSUdselMyVjVRMjlrWlVKeWIzZHpaWEpMWlhrb2EyVjVRMjlrWlRvZ2JuVnRZbVZ5S1NCN1hHNGdJQ0FnSUNBZ0lDOHZJRVoxYm1OMGFXOXVJR3RsZVhNZ2IzSWdkR0ZpSUd0bGVTQmhjbVVnWTI5dWMybGtaWEpsWkNCY0ltSnliM2R6WlhJZ2EyVjVjMXdpSUhSb1lYUWdkMlVnYldGNUlIZHBjMmdnZEc4Z2MzVndjSEpsYzNNZ1lua2djSEpsZG1WdWRHbHVaeUIwYUdWdElHSmxhVzVuSUhCeWIyTmxjM01nWW5rZ1luSnZkM05sY2k1Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUNoclpYbERiMlJsSUQ0OUlERXhNaUFtSmlCclpYbERiMlJsSUR3OUlERXlNeWtnZkh3Z2EyVjVRMjlrWlNBOVBUMGdPVHRjYmlBZ0lDQjlYRzU5WEc0aUxDSXZMeUJEYjNCNWNtbG5hSFFnUlhCcFl5QkhZVzFsY3l3Z1NXNWpMaUJCYkd3Z1VtbG5hSFJ6SUZKbGMyVnlkbVZrTGx4dVhHNXBiWEJ2Y25RZ2V5Qk5iM1Z6WlVOdmJuUnliMnhzWlhJZ2ZTQm1jbTl0SUNjdUwwMXZkWE5sUTI5dWRISnZiR3hsY2ljN1hHNXBiWEJ2Y25RZ2V5Qk1iMmRuWlhJZ2ZTQm1jbTl0SUNjdUxpOU1iMmRuWlhJdlRHOW5aMlZ5Snp0Y2JtbHRjRzl5ZENCN0lFbE5iM1Z6WlVWMlpXNTBjeUI5SUdaeWIyMGdKeTR2U1UxdmRYTmxSWFpsYm5Sekp6dGNibWx0Y0c5eWRDQjdJRTV2Y20xaGJHbDZaV1JSZFdGdWRHbDZaV1JWYm5OcFoyNWxaRU52YjNKa0lIMGdabkp2YlNBbkxpNHZWWFJwYkM5RGIyOXlaR2x1WVhSbFEyOXVkbVZ5ZEdWeUp6dGNibWx0Y0c5eWRDQjdJRUZqZEdsMlpVdGxlWE1nZlNCbWNtOXRJQ2N1TDBsdWNIVjBRMnhoYzNObGMwWmhZM1J2Y25rbk8xeHVhVzF3YjNKMElIc2dWbWxrWlc5UWJHRjVaWElnZlNCbWNtOXRJQ2N1TGk5V2FXUmxiMUJzWVhsbGNpOVdhV1JsYjFCc1lYbGxjaWM3WEc1cGJYQnZjblFnZXlCRmRtVnVkRXhwYzNSbGJtVnlWSEpoWTJ0bGNpQjlJR1p5YjIwZ0p5NHVMMVYwYVd3dlJYWmxiblJNYVhOMFpXNWxjbFJ5WVdOclpYSW5PMXh1WEc0dktpcGNiaUFxSUVoaGJtUnNaU0IwYUdVZ2JXOTFjMlVnYkc5amEyVmtJR1YyWlc1MGMxeHVJQ292WEc1bGVIQnZjblFnWTJ4aGMzTWdURzlqYTJWa1RXOTFjMlZGZG1WdWRITWdhVzF3YkdWdFpXNTBjeUJKVFc5MWMyVkZkbVZ1ZEhNZ2UxeHVJQ0FnSUhnZ1BTQXdPMXh1SUNBZ0lIa2dQU0F3TzF4dUlDQWdJR052YjNKa09pQk9iM0p0WVd4cGVtVmtVWFZoYm5ScGVtVmtWVzV6YVdkdVpXUkRiMjl5WkR0Y2JpQWdJQ0IyYVdSbGIwVnNaVzFsYm5SUWNtOTJhV1JsY2pvZ1ZtbGtaVzlRYkdGNVpYSTdYRzRnSUNBZ2JXOTFjMlZEYjI1MGNtOXNiR1Z5T2lCTmIzVnpaVU52Ym5SeWIyeHNaWEk3WEc0Z0lDQWdZV04wYVhabFMyVjVjMUJ5YjNacFpHVnlPaUJCWTNScGRtVkxaWGx6TzF4dUlDQWdJSFZ3WkdGMFpVMXZkWE5sVFc5MlpWQnZjMmwwYVc5dVJYWmxiblFnUFNBb2JXOTFjMlZGZG1WdWREb2dUVzkxYzJWRmRtVnVkQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG5Wd1pHRjBaVTF2ZFhObFRXOTJaVkJ2YzJsMGFXOXVLRzF2ZFhObFJYWmxiblFwTzF4dUlDQWdJSDA3WEc1Y2JpQWdJQ0F2THlCVmRHbHNhWFI1SUdadmNpQnJaV1Z3YVc1bklIUnlZV05ySUc5bUlHVjJaVzUwSUdoaGJtUnNaWEp6SUdGdVpDQjFibkpsWjJsemRHVnlhVzVuSUhSb1pXMWNiaUFnSUNCd2NtbDJZWFJsSUcxdmRYTmxSWFpsYm5STWFYTjBaVzVsY2xSeVlXTnJaWElnUFNCdVpYY2dSWFpsYm5STWFYTjBaVzVsY2xSeVlXTnJaWElvS1R0Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFQndZWEpoYlNCMmFXUmxiMFZzWlcxbGJuUlFjbTkyYVdSbGNpQXRJRlpwWkdWdklGQnNZWGxsY2lCcGJuTjBZVzVqWlZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0J0YjNWelpVTnZiblJ5YjJ4c1pYSWdMU0JOYjNWelpTQmpiMjUwY205c2JHVnlJR2x1YzNSaGJtTmxYRzRnSUNBZ0lDb2dRSEJoY21GdElHRmpkR2wyWlV0bGVYTlFjbTkyYVdSbGNpQXRJRUZqZEdsMlpTQnJaWGx6SUhCeWIzWnBaR1Z5SUdsdWMzUmhibU5sWEc0Z0lDQWdJQ29nUUhCaGNtRnRJSEJzWVhsbGNsTjBlV3hsUVhSMGNtbGlkWFJsYzFCeWIzWnBaR1Z5SUMwZ1VHeGhlV1Z5SUhOMGVXeGxJR0YwZEhKcFluVjBaWE1nYVc1emRHRnVZMlZjYmlBZ0lDQWdLaTljYmlBZ0lDQmpiMjV6ZEhKMVkzUnZjaWhjYmlBZ0lDQWdJQ0FnZG1sa1pXOUZiR1Z0Wlc1MFVISnZkbWxrWlhJNklGWnBaR1Z2VUd4aGVXVnlMRnh1SUNBZ0lDQWdJQ0J0YjNWelpVTnZiblJ5YjJ4c1pYSTZJRTF2ZFhObFEyOXVkSEp2Ykd4bGNpeGNiaUFnSUNBZ0lDQWdZV04wYVhabFMyVjVjMUJ5YjNacFpHVnlPaUJCWTNScGRtVkxaWGx6WEc0Z0lDQWdLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkbWxrWlc5RmJHVnRaVzUwVUhKdmRtbGtaWElnUFNCMmFXUmxiMFZzWlcxbGJuUlFjbTkyYVdSbGNqdGNiaUFnSUNBZ0lDQWdkR2hwY3k1dGIzVnpaVU52Ym5SeWIyeHNaWElnUFNCdGIzVnpaVU52Ym5SeWIyeHNaWEk3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZV04wYVhabFMyVjVjMUJ5YjNacFpHVnlJRDBnWVdOMGFYWmxTMlY1YzFCeWIzWnBaR1Z5TzF4dUlDQWdJQ0FnSUNCamIyNXpkQ0IyYVdSbGIwVnNaVzFsYm5SUVlYSmxiblFnUFZ4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1MmFXUmxiMFZzWlcxbGJuUlFjbTkyYVdSbGNpNW5aWFJXYVdSbGIxQmhjbVZ1ZEVWc1pXMWxiblFvS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTU0SUQwZ2RtbGtaVzlGYkdWdFpXNTBVR0Z5Wlc1MExtZGxkRUp2ZFc1a2FXNW5RMnhwWlc1MFVtVmpkQ2dwTG5kcFpIUm9JQzhnTWp0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTU1SUQwZ2RtbGtaVzlGYkdWdFpXNTBVR0Z5Wlc1MExtZGxkRUp2ZFc1a2FXNW5RMnhwWlc1MFVtVmpkQ2dwTG1obGFXZG9kQ0F2SURJN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WTI5dmNtUWdQVnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV0YjNWelpVTnZiblJ5YjJ4c1pYSXVZMjl2Y21ScGJtRjBaVU52Ym5abGNuUmxjaTV1YjNKdFlXeHBlbVZCYm1SUmRXRnVkR2w2WlZWdWMybG5ibVZrS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVlQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxubGNiaUFnSUNBZ0lDQWdJQ0FnSUNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1ZXNXlaV2RwYzNSbGNuTWdZV3hzSUdWMlpXNTBJR2hoYm1Sc1pYSnpYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2RXNXlaV2RwYzNSbGNrMXZkWE5sUlhabGJuUnpLQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbTF2ZFhObFJYWmxiblJNYVhOMFpXNWxjbFJ5WVdOclpYSXVkVzV5WldkcGMzUmxja0ZzYkNncE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFaGhibVJzWlNCM2FHVnVJSFJvWlNCc2IyTnJaV1FnYzNSaGRHVWdRMmhoYm1kbFpGeHVJQ0FnSUNBcUwxeHVJQ0FnSUd4dlkydFRkR0YwWlVOb1lXNW5aU2dwSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnZG1sa1pXOUZiR1Z0Wlc1MFVHRnlaVzUwSUQxY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWRtbGtaVzlGYkdWdFpXNTBVSEp2ZG1sa1pYSXVaMlYwVm1sa1pXOVFZWEpsYm5SRmJHVnRaVzUwS0NrN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUhSdlUzUnlaV0Z0WlhKSVlXNWtiR1Z5Y3lBOVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtMXZkWE5sUTI5dWRISnZiR3hsY2k1MGIxTjBjbVZoYldWeVRXVnpjMkZuWlhOUWNtOTJhV1JsY2k1MGIxTjBjbVZoYldWeVNHRnVaR3hsY25NN1hHNWNiaUFnSUNBZ0lDQWdhV1lnS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdaRzlqZFcxbGJuUXVjRzlwYm5SbGNreHZZMnRGYkdWdFpXNTBJRDA5UFNCMmFXUmxiMFZzWlcxbGJuUlFZWEpsYm5RZ2ZIeGNiaUFnSUNBZ0lDQWdJQ0FnSUdSdlkzVnRaVzUwTG0xdmVsQnZhVzUwWlhKTWIyTnJSV3hsYldWdWRDQTlQVDBnZG1sa1pXOUZiR1Z0Wlc1MFVHRnlaVzUwWEc0Z0lDQWdJQ0FnSUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnVEc5bloyVnlMa3h2WnloTWIyZG5aWEl1UjJWMFUzUmhZMnRVY21GalpTZ3BMQ0FuVUc5cGJuUmxjaUJzYjJOclpXUW5MQ0EyS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1J2WTNWdFpXNTBMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKMjF2ZFhObGJXOTJaU2NzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NTFjR1JoZEdWTmIzVnpaVTF2ZG1WUWIzTnBkR2x2YmtWMlpXNTBMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1poYkhObFhHNGdJQ0FnSUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1dGIzVnpaVVYyWlc1MFRHbHpkR1Z1WlhKVWNtRmphMlZ5TG1Ga1pGVnVjbVZuYVhOMFpYSkRZV3hzWW1GamF5aGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW9LU0E5UGlCa2IyTjFiV1Z1ZEM1eVpXMXZkbVZGZG1WdWRFeHBjM1JsYm1WeUtGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuYlc5MWMyVnRiM1psSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1MWNHUmhkR1ZOYjNWelpVMXZkbVZRYjNOcGRHbHZia1YyWlc1MExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtWVd4elpWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDbGNiaUFnSUNBZ0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JNYjJkblpYSXVURzluS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUV4dloyZGxjaTVIWlhSVGRHRmphMVJ5WVdObEtDa3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKMVJvWlNCd2IybHVkR1Z5SUd4dlkyc2djM1JoZEhWeklHbHpJRzV2ZHlCMWJteHZZMnRsWkNjc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ05seHVJQ0FnSUNBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUNGaElHNWxkeUJoY25KdmR5Qm1kVzVqZEdsdmJpQnRkWE4wSUc1dmRDQmlaU0IxYzJWa0lHaGxjbVVnWVhNZ2FYUWdkMmxzYkNCaVpTQmpiM1Z1ZEdWa0lHRnpJR0VnYm1WM0lHWjFibU4wYVc5dUlIUm9ZWFFnWTJGdWJtOTBJR0psSUhKbGJXOTJaV1JjYmlBZ0lDQWdJQ0FnSUNBZ0lHUnZZM1Z0Wlc1MExuSmxiVzkyWlVWMlpXNTBUR2x6ZEdWdVpYSW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKMjF2ZFhObGJXOTJaU2NzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NTFjR1JoZEdWTmIzVnpaVTF2ZG1WUWIzTnBkR2x2YmtWMlpXNTBMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1poYkhObFhHNGdJQ0FnSUNBZ0lDQWdJQ0FwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCSlppQnRiM1Z6WlNCc2IzTmxjeUJtYjJOMWN5d2djMlZ1WkNCaElHdGxlU0IxY0NCbWIzSWdZV3hzSUc5bUlIUm9aU0JqZFhKeVpXNTBiSGtnYUdWc1pDMWtiM2R1SUd0bGVYTmNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklGUm9hWE1nYVhNZ2JtVmpaWE56WVhKNUlHRnpJSGRvWlc0Z2RHaGxJRzF2ZFhObElHeHZjMlZ6SUdadlkzVnpMQ0IwYUdVZ2QybHVaRzkzY3lCemRHOXdjeUJzYVhOMFpXNXBibWNnWm05eUlHVjJaVzUwY3lCaGJtUWdZWE1nYzNWamFGeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2RHaGxJR3RsZVhWd0lHeHBjM1JsYm1WeUlIZHZiaWQwSUdkbGRDQm1hWEpsWkZ4dUlDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdGamRHbDJaVXRsZVhNZ1BTQjBhR2x6TG1GamRHbDJaVXRsZVhOUWNtOTJhV1JsY2k1blpYUkJZM1JwZG1WTFpYbHpLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCelpYUkxaWGx6SUQwZ2JtVjNJRk5sZENoaFkzUnBkbVZMWlhsektUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJRzVsZDB0bGVYTkpkR1Z5WVdKc1pUb2dRWEp5WVhrOGJuVnRZbVZ5UGlBOUlGdGRPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQnpaWFJMWlhsekxtWnZja1ZoWTJnb0tITmxkRXRsZVRvZ2JuVnRZbVZ5S1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdibVYzUzJWNWMwbDBaWEpoWW14bFczTmxkRXRsZVYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnYm1WM1MyVjVjMGwwWlhKaFlteGxMbVp2Y2tWaFkyZ29LSFZ1YVhGMVpVdGxlV052WkdVcElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYjFOMGNtVmhiV1Z5U0dGdVpHeGxjbk11WjJWMEtDZExaWGxWY0NjcEtGdDFibWx4ZFdWTFpYbGpiMlJsWFNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUZKbGMyVjBJSFJvWlNCaFkzUnBkbVVnYTJWNWN5QmlZV05ySUhSdklHNXZkR2hwYm1kY2JpQWdJQ0FnSUNBZ0lDQWdJR0ZqZEdsMlpVdGxlWE1nUFNCYlhUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRWhoYm1Sc1pTQjBhR1VnYlc5MWMyVWdiVzkyWlNCbGRtVnVkQ3dnYzJWdVpITWdkR2hsSUcxdmRYTmxJR1JoZEdFZ2RHOGdkR2hsSUZWRklFbHVjM1JoYm1ObFhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUcxdmRYTmxSWFpsYm5RZ0xTQk5iM1Z6WlNCRmRtVnVkRnh1SUNBZ0lDQXFMMXh1SUNBZ0lIVndaR0YwWlUxdmRYTmxUVzkyWlZCdmMybDBhVzl1S0cxdmRYTmxSWFpsYm5RNklFMXZkWE5sUlhabGJuUXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tDRjBhR2x6TG5acFpHVnZSV3hsYldWdWRGQnliM1pwWkdWeUxtbHpWbWxrWlc5U1pXRmtlU2dwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdkRzlUZEhKbFlXMWxja2hoYm1Sc1pYSnpJRDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Ylc5MWMyVkRiMjUwY205c2JHVnlMblJ2VTNSeVpXRnRaWEpOWlhOellXZGxjMUJ5YjNacFpHVnlMblJ2VTNSeVpXRnRaWEpJWVc1a2JHVnljenRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdjM1I1YkdWWGFXUjBhQ0E5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5acFpHVnZSV3hsYldWdWRGQnliM1pwWkdWeUxtZGxkRlpwWkdWdlVHRnlaVzUwUld4bGJXVnVkQ2dwTG1Oc2FXVnVkRmRwWkhSb08xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCemRIbHNaVWhsYVdkb2RDQTlYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMblpwWkdWdlJXeGxiV1Z1ZEZCeWIzWnBaR1Z5TG1kbGRGWnBaR1Z2VUdGeVpXNTBSV3hsYldWdWRDZ3BMbU5zYVdWdWRFaGxhV2RvZER0Y2JseHVJQ0FnSUNBZ0lDQjBhR2x6TG5nZ0t6MGdiVzkxYzJWRmRtVnVkQzV0YjNabGJXVnVkRmc3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVlU0FyUFNCdGIzVnpaVVYyWlc1MExtMXZkbVZ0Wlc1MFdUdGNibHh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTU0SUQ0Z2MzUjViR1ZYYVdSMGFDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTU0SUMwOUlITjBlV3hsVjJsa2RHZzdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11ZVNBK0lITjBlV3hsU0dWcFoyaDBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5rZ0xUMGdjM1I1YkdWSVpXbG5hSFE3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdWVDQThJREFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWVDQTlJSE4wZVd4bFYybGtkR2dnS3lCMGFHbHpMbmc3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdWVTQThJREFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWVTQTlJSE4wZVd4bFNHVnBaMmgwSUMwZ2RHaHBjeTU1TzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdkR2hwY3k1amIyOXlaQ0E5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG0xdmRYTmxRMjl1ZEhKdmJHeGxjaTVqYjI5eVpHbHVZWFJsUTI5dWRtVnlkR1Z5TG01dmNtMWhiR2w2WlVGdVpGRjFZVzUwYVhwbFZXNXphV2R1WldRb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTU0TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVlVnh1SUNBZ0lDQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ1pHVnNkR0VnUFZ4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1dGIzVnpaVU52Ym5SeWIyeHNaWEl1WTI5dmNtUnBibUYwWlVOdmJuWmxjblJsY2k1dWIzSnRZV3hwZW1WQmJtUlJkV0Z1ZEdsNlpWTnBaMjVsWkNoY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdGIzVnpaVVYyWlc1MExtMXZkbVZ0Wlc1MFdDeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnRiM1Z6WlVWMlpXNTBMbTF2ZG1WdFpXNTBXVnh1SUNBZ0lDQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdkRzlUZEhKbFlXMWxja2hoYm1Sc1pYSnpMbWRsZENnblRXOTFjMlZOYjNabEp5a29XMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVqYjI5eVpDNTRMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVqYjI5eVpDNTVMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1pHVnNkR0V1ZUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR1JsYkhSaExubGNiaUFnSUNBZ0lDQWdYU2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nU0dGdVpHeGxJSFJvWlNCdGIzVnpaU0JFYjNkdUlHVjJaVzUwTENCelpXNWtjeUIwYUdVZ2JXOTFjMlVnWkdGMFlTQjBieUIwYUdVZ1ZVVWdTVzV6ZEdGdVkyVmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2JXOTFjMlZGZG1WdWRDQXRJRTF2ZFhObElFVjJaVzUwWEc0Z0lDQWdJQ292WEc0Z0lDQWdhR0Z1Wkd4bFRXOTFjMlZFYjNkdUtHMXZkWE5sUlhabGJuUTZJRTF2ZFhObFJYWmxiblFwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLQ0YwYUdsekxuWnBaR1Z2Uld4bGJXVnVkRkJ5YjNacFpHVnlMbWx6Vm1sa1pXOVNaV0ZrZVNncEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQmpiMjV6ZENCMGIxTjBjbVZoYldWeVNHRnVaR3hsY25NZ1BWeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXRiM1Z6WlVOdmJuUnliMnhzWlhJdWRHOVRkSEpsWVcxbGNrMWxjM05oWjJWelVISnZkbWxrWlhJdWRHOVRkSEpsWVcxbGNraGhibVJzWlhKek8xeHVJQ0FnSUNBZ0lDQjBiMU4wY21WaGJXVnlTR0Z1Wkd4bGNuTXVaMlYwS0NkTmIzVnpaVVJ2ZDI0bktTaGJYRzRnSUNBZ0lDQWdJQ0FnSUNCdGIzVnpaVVYyWlc1MExtSjFkSFJ2Yml4Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUZkbElIVnpaU0IwYUdVZ2MzUnZjbVVnZG1Gc2RXVWdiMllnZEdocGN5NWpiMjl5WkNCaGN5QnZjSEJ2YzJWa0lIUnZJSFJvWlNCdGIzVnpaVVYyWlc1MExuZ3ZlU0JoY3lCMGFHVWdiVzkxYzJWRmRtVnVkQ0JzYjJOaGRHbHZibHh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdkWE5sY3lCMGFHVWdjM2x6ZEdWdElHTjFjbk52Y2lCc2IyTmhkR2x2YmlCM2FHbGphQ0JvWVhOdUozUWdiVzkyWldSY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVkyOXZjbVF1ZUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVkyOXZjbVF1ZVZ4dUlDQWdJQ0FnSUNCZEtUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQklZVzVrYkdVZ2RHaGxJRzF2ZFhObElGVndJR1YyWlc1MExDQnpaVzVrY3lCMGFHVWdiVzkxYzJVZ1pHRjBZU0IwYnlCMGFHVWdWVVVnU1c1emRHRnVZMlZjYmlBZ0lDQWdLaUJBY0dGeVlXMGdiVzkxYzJWRmRtVnVkQ0F0SUUxdmRYTmxJRVYyWlc1MFhHNGdJQ0FnSUNvdlhHNGdJQ0FnYUdGdVpHeGxUVzkxYzJWVmNDaHRiM1Z6WlVWMlpXNTBPaUJOYjNWelpVVjJaVzUwS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2doZEdocGN5NTJhV1JsYjBWc1pXMWxiblJRY205MmFXUmxjaTVwYzFacFpHVnZVbVZoWkhrb0tTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHTnZibk4wSUhSdlUzUnlaV0Z0WlhKSVlXNWtiR1Z5Y3lBOVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtMXZkWE5sUTI5dWRISnZiR3hsY2k1MGIxTjBjbVZoYldWeVRXVnpjMkZuWlhOUWNtOTJhV1JsY2k1MGIxTjBjbVZoYldWeVNHRnVaR3hsY25NN1hHNGdJQ0FnSUNBZ0lIUnZVM1J5WldGdFpYSklZVzVrYkdWeWN5NW5aWFFvSjAxdmRYTmxWWEFuS1NoYlhHNGdJQ0FnSUNBZ0lDQWdJQ0J0YjNWelpVVjJaVzUwTG1KMWRIUnZiaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRmRsSUhWelpTQjBhR1VnYzNSdmNtVWdkbUZzZFdVZ2IyWWdkR2hwY3k1amIyOXlaQ0JoY3lCdmNIQnZjMlZrSUhSdklIUm9aU0J0YjNWelpVVjJaVzUwTG5ndmVTQmhjeUIwYUdVZ2JXOTFjMlZGZG1WdWRDQnNiMk5oZEdsdmJseHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2RYTmxjeUIwYUdVZ2MzbHpkR1Z0SUdOMWNuTnZjaUJzYjJOaGRHbHZiaUIzYUdsamFDQm9ZWE51SjNRZ2JXOTJaV1JjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WTI5dmNtUXVlQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WTI5dmNtUXVlVnh1SUNBZ0lDQWdJQ0JkS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCSVlXNWtiR1VnZEdobElHMXZkWE5sSUhkb1pXVnNJR1YyWlc1MExDQnpaVzVrY3lCMGFHVWdiVzkxYzJVZ2QyaGxaV3dnWkdGMFlTQjBieUIwYUdVZ1ZVVWdTVzV6ZEdGdVkyVmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2QyaGxaV3hGZG1WdWRDQXRJRTF2ZFhObElFVjJaVzUwWEc0Z0lDQWdJQ292WEc0Z0lDQWdhR0Z1Wkd4bFRXOTFjMlZYYUdWbGJDaDNhR1ZsYkVWMlpXNTBPaUJYYUdWbGJFVjJaVzUwS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2doZEdocGN5NTJhV1JsYjBWc1pXMWxiblJRY205MmFXUmxjaTVwYzFacFpHVnZVbVZoWkhrb0tTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHTnZibk4wSUhSdlUzUnlaV0Z0WlhKSVlXNWtiR1Z5Y3lBOVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtMXZkWE5sUTI5dWRISnZiR3hsY2k1MGIxTjBjbVZoYldWeVRXVnpjMkZuWlhOUWNtOTJhV1JsY2k1MGIxTjBjbVZoYldWeVNHRnVaR3hsY25NN1hHNGdJQ0FnSUNBZ0lIUnZVM1J5WldGdFpYSklZVzVrYkdWeWN5NW5aWFFvSjAxdmRYTmxWMmhsWld3bktTaGJYRzRnSUNBZ0lDQWdJQ0FnSUNCM2FHVmxiRVYyWlc1MExuZG9aV1ZzUkdWc2RHRXNYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QlhaU0IxYzJVZ2RHaGxJSE4wYjNKbElIWmhiSFZsSUc5bUlIUm9hWE11WTI5dmNtUWdZWE1nYjNCd2IzTmxaQ0IwYnlCMGFHVWdiVzkxYzJWRmRtVnVkQzU0TDNrZ1lYTWdkR2hsSUcxdmRYTmxSWFpsYm5RZ2JHOWpZWFJwYjI1Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUhWelpYTWdkR2hsSUhONWMzUmxiU0JqZFhKemIzSWdiRzlqWVhScGIyNGdkMmhwWTJnZ2FHRnpiaWQwSUcxdmRtVmtYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbU52YjNKa0xuZ3NYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbU52YjNKa0xubGNiaUFnSUNBZ0lDQWdYU2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nU0dGdVpHeGxJSFJvWlNCdGIzVnpaU0JrYjNWaWJHVWdZMnhwWTJzZ1pYWmxiblFzSUhObGJtUnpJSFJvWlNCdGIzVnpaU0JrWVhSaElIUnZJSFJvWlNCVlJTQkpibk4wWVc1alpWeHVJQ0FnSUNBcUlFQndZWEpoYlNCdGIzVnpaVVYyWlc1MElDMGdUVzkxYzJVZ1JYWmxiblJjYmlBZ0lDQWdLaTljYmlBZ0lDQm9ZVzVrYkdWTmIzVnpaVVJ2ZFdKc1pTaHRiM1Z6WlVWMlpXNTBPaUJOYjNWelpVVjJaVzUwS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2doZEdocGN5NTJhV1JsYjBWc1pXMWxiblJRY205MmFXUmxjaTVwYzFacFpHVnZVbVZoWkhrb0tTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHTnZibk4wSUhSdlUzUnlaV0Z0WlhKSVlXNWtiR1Z5Y3lBOVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtMXZkWE5sUTI5dWRISnZiR3hsY2k1MGIxTjBjbVZoYldWeVRXVnpjMkZuWlhOUWNtOTJhV1JsY2k1MGIxTjBjbVZoYldWeVNHRnVaR3hsY25NN1hHNGdJQ0FnSUNBZ0lIUnZVM1J5WldGdFpYSklZVzVrYkdWeWN5NW5aWFFvSjAxdmRYTmxSRzkxWW14bEp5a29XMXh1SUNBZ0lDQWdJQ0FnSUNBZ2JXOTFjMlZGZG1WdWRDNWlkWFIwYjI0c1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCWFpTQjFjMlVnZEdobElITjBiM0psSUhaaGJIVmxJRzltSUhSb2FYTXVZMjl2Y21RZ1lYTWdiM0J3YjNObFpDQjBieUIwYUdVZ2JXOTFjMlZGZG1WdWRDNTRMM2tnWVhNZ2RHaGxJRzF2ZFhObFJYWmxiblFnYkc5allYUnBiMjVjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJSFZ6WlhNZ2RHaGxJSE41YzNSbGJTQmpkWEp6YjNJZ2JHOWpZWFJwYjI0Z2QyaHBZMmdnYUdGemJpZDBJRzF2ZG1Wa1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtTnZiM0prTG5nc1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtTnZiM0prTG5sY2JpQWdJQ0FnSUNBZ1hTazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dTR0Z1Wkd4bElIUm9aU0J3Y21WemN5QnRiM1Z6WlNCaWRYUjBiMjV6SUdWMlpXNTBMQ0J6Wlc1a2N5QjBhR1VnYlc5MWMyVWdaR0YwWVNCMGJ5QjBhR1VnVlVVZ1NXNXpkR0Z1WTJWY2JpQWdJQ0FnS2lCQWNHRnlZVzBnYlc5MWMyVkZkbVZ1ZENBdElFMXZkWE5sSUVWMlpXNTBYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2FHRnVaR3hsVUhKbGMzTk5iM1Z6WlVKMWRIUnZibk1vYlc5MWMyVkZkbVZ1ZERvZ1RXOTFjMlZGZG1WdWRDa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb0lYUm9hWE11ZG1sa1pXOUZiR1Z0Wlc1MFVISnZkbWxrWlhJdWFYTldhV1JsYjFKbFlXUjVLQ2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0IwYUdsekxtMXZkWE5sUTI5dWRISnZiR3hsY2k1d2NtVnpjMDF2ZFhObFFuVjBkRzl1Y3loY2JpQWdJQ0FnSUNBZ0lDQWdJRzF2ZFhObFJYWmxiblF1WW5WMGRHOXVjeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11ZUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWVWeHVJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRWhoYm1Sc1pTQjBhR1VnY21Wc1pXRnpaU0J0YjNWelpTQmlkWFIwYjI1eklHVjJaVzUwTENCelpXNWtjeUIwYUdVZ2JXOTFjMlVnWkdGMFlTQjBieUIwYUdVZ1ZVVWdTVzV6ZEdGdVkyVmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2JXOTFjMlZGZG1WdWRDQXRJRTF2ZFhObElFVjJaVzUwWEc0Z0lDQWdJQ292WEc0Z0lDQWdhR0Z1Wkd4bFVtVnNaV0Z6WlUxdmRYTmxRblYwZEc5dWN5aHRiM1Z6WlVWMlpXNTBPaUJOYjNWelpVVjJaVzUwS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2doZEdocGN5NTJhV1JsYjBWc1pXMWxiblJRY205MmFXUmxjaTVwYzFacFpHVnZVbVZoWkhrb0tTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIUm9hWE11Ylc5MWMyVkRiMjUwY205c2JHVnlMbkpsYkdWaGMyVk5iM1Z6WlVKMWRIUnZibk1vWEc0Z0lDQWdJQ0FnSUNBZ0lDQnRiM1Z6WlVWMlpXNTBMbUoxZEhSdmJuTXNYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbmdzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5sY2JpQWdJQ0FnSUNBZ0tUdGNiaUFnSUNCOVhHNTlYRzVjYmk4cUtseHVJQ29nUlhoMGNtRWdkSGx3WlhNZ1ptOXlJRVJ2WTNWdFpXNTBJR0Z1WkNCWGFHVmxiRVYyWlc1MFhHNGdLaTljYm1SbFkyeGhjbVVnWjJ4dlltRnNJSHRjYmlBZ0lDQnBiblJsY21aaFkyVWdSRzlqZFcxbGJuUWdlMXh1SUNBZ0lDQWdJQ0J0YjNwUWIybHVkR1Z5VEc5amEwVnNaVzFsYm5RNklIVnVhMjV2ZDI0N1hHNGdJQ0FnSUNBZ0lHMXZla1Y0YVhSUWIybHVkR1Z5VEc5amF6OG9LVG9nZG05cFpEdGNiaUFnSUNCOVhHNWNiaUFnSUNCcGJuUmxjbVpoWTJVZ1YyaGxaV3hGZG1WdWRDQjdYRzRnSUNBZ0lDQWdJSGRvWldWc1JHVnNkR0U2SUc1MWJXSmxjanRjYmlBZ0lDQjlYRzU5WEc0aUxDSXZMeUJEYjNCNWNtbG5hSFFnUlhCcFl5QkhZVzFsY3l3Z1NXNWpMaUJCYkd3Z1VtbG5hSFJ6SUZKbGMyVnlkbVZrTGx4dVhHNHZLaXBjYmlBcUlFMXZkWE5sSUVKMWRIUnZiaUJFWVhSaFhHNGdLaUI3UUd4cGJtc2dhSFIwY0hNNkx5OWtaWFpsYkc5d1pYSXViVzk2YVd4c1lTNXZjbWN2Wlc0dFZWTXZaRzlqY3k5WFpXSXZRVkJKTDAxdmRYTmxSWFpsYm5RdlluVjBkRzl1ZlZ4dUlDb3ZYRzVsZUhCdmNuUWdZMnhoYzNNZ1RXOTFjMlZDZFhSMGIyNGdlMXh1SUNBZ0lITjBZWFJwWXlCdFlXbHVRblYwZEc5dUlEMGdNRHNnTHk4Z1RHVm1kQ0JpZFhSMGIyNHVYRzRnSUNBZ2MzUmhkR2xqSUdGMWVHbHNhV0Z5ZVVKMWRIUnZiaUE5SURFN0lDOHZJRmRvWldWc0lHSjFkSFJ2Ymk1Y2JpQWdJQ0J6ZEdGMGFXTWdjMlZqYjI1a1lYSjVRblYwZEc5dUlEMGdNanNnTHk4Z1VtbG5hSFFnWW5WMGRHOXVMbHh1SUNBZ0lITjBZWFJwWXlCbWIzVnlkR2hDZFhSMGIyNGdQU0F6T3lBdkx5QkNjbTkzYzJWeUlFSmhZMnNnWW5WMGRHOXVMbHh1SUNBZ0lITjBZWFJwWXlCbWFXWjBhRUoxZEhSdmJpQTlJRFE3SUM4dklFSnliM2R6WlhJZ1JtOXlkMkZ5WkNCaWRYUjBiMjR1WEc1OVhHNWNiaThxS2x4dUlDb2dUVzkxYzJVZ1FuVjBkRzl1SUUxaGMyc2dSR0YwWVZ4dUlDb2dlMEJzYVc1cklHaDBkSEJ6T2k4dlpHVjJaV3h2Y0dWeUxtMXZlbWxzYkdFdWIzSm5MMlZ1TFZWVEwyUnZZM012VjJWaUwwRlFTUzlOYjNWelpVVjJaVzUwTDJKMWRIUnZibk45WEc0Z0tpOWNibVY0Y0c5eWRDQmpiR0Z6Y3lCTmIzVnpaVUoxZEhSdmJuTk5ZWE5ySUh0Y2JpQWdJQ0J6ZEdGMGFXTWdjSEpwYldGeWVVSjFkSFJ2YmlBOUlERTdJQzh2SUV4bFpuUWdZblYwZEc5dUxseHVJQ0FnSUhOMFlYUnBZeUJ6WldOdmJtUmhjbmxDZFhSMGIyNGdQU0F5T3lBdkx5QlNhV2RvZENCaWRYUjBiMjR1WEc0Z0lDQWdjM1JoZEdsaklHRjFlR2xzYVdGeWVVSjFkSFJ2YmlBOUlEUTdJQzh2SUZkb1pXVnNJR0oxZEhSdmJpNWNiaUFnSUNCemRHRjBhV01nWm05MWNuUm9RblYwZEc5dUlEMGdPRHNnTHk4Z1FuSnZkM05sY2lCQ1lXTnJJR0oxZEhSdmJpNWNiaUFnSUNCemRHRjBhV01nWm1sbWRHaENkWFIwYjI0Z1BTQXhOanNnTHk4Z1FuSnZkM05sY2lCR2IzSjNZWEprSUdKMWRIUnZiaTVjYm4xY2JpSXNJaTh2SUVOdmNIbHlhV2RvZENCRmNHbGpJRWRoYldWekxDQkpibU11SUVGc2JDQlNhV2RvZEhNZ1VtVnpaWEoyWldRdVhHNWNibWx0Y0c5eWRDQjdJRTF2ZFhObFFuVjBkRzl1YzAxaGMyc3NJRTF2ZFhObFFuVjBkRzl1SUgwZ1puSnZiU0FuTGk5TmIzVnpaVUoxZEhSdmJuTW5PMXh1YVcxd2IzSjBJSHNnVEc5bloyVnlJSDBnWm5KdmJTQW5MaTR2VEc5bloyVnlMMHh2WjJkbGNpYzdYRzVwYlhCdmNuUWdleUJUZEhKbFlXMU5aWE56WVdkbFEyOXVkSEp2Ykd4bGNpQjlJR1p5YjIwZ0p5NHVMMVZsU1c1emRHRnVZMlZOWlhOellXZGxMMU4wY21WaGJVMWxjM05oWjJWRGIyNTBjbTlzYkdWeUp6dGNibWx0Y0c5eWRDQjdJRU52YjNKa2FXNWhkR1ZEYjI1MlpYSjBaWElnZlNCbWNtOXRJQ2N1TGk5VmRHbHNMME52YjNKa2FXNWhkR1ZEYjI1MlpYSjBaWEluTzF4dWFXMXdiM0owSUhzZ1ZtbGtaVzlRYkdGNVpYSWdmU0JtY205dElDY3VMaTlXYVdSbGIxQnNZWGxsY2k5V2FXUmxiMUJzWVhsbGNpYzdYRzVwYlhCdmNuUWdleUJKVFc5MWMyVkZkbVZ1ZEhNZ2ZTQm1jbTl0SUNjdUwwbE5iM1Z6WlVWMlpXNTBjeWM3WEc1cGJYQnZjblFnZXlCTWIyTnJaV1JOYjNWelpVVjJaVzUwY3lCOUlHWnliMjBnSnk0dlRHOWphMlZrVFc5MWMyVkZkbVZ1ZEhNbk8xeHVhVzF3YjNKMElIc2dTRzkyWlhKcGJtZE5iM1Z6WlVWMlpXNTBjeUI5SUdaeWIyMGdKeTR2U0c5MlpYSnBibWROYjNWelpVVjJaVzUwY3ljN1hHNXBiWEJ2Y25RZ2RIbHdaU0I3SUVGamRHbDJaVXRsZVhNZ2ZTQm1jbTl0SUNjdUwwbHVjSFYwUTJ4aGMzTmxjMFpoWTNSdmNua25PMXh1YVcxd2IzSjBJSHNnUlhabGJuUk1hWE4wWlc1bGNsUnlZV05yWlhJZ2ZTQm1jbTl0SUNjdUxpOVZkR2xzTDBWMlpXNTBUR2x6ZEdWdVpYSlVjbUZqYTJWeUp6dGNibHh1THlvcVhHNGdLaUJJWVc1a2JHVnpJSFJvWlNCTmIzVnpaU0JKYm5CMWRITWdabTl5SUhSb1pTQmtiMk4xYldWdWRGeHVJQ292WEc1bGVIQnZjblFnWTJ4aGMzTWdUVzkxYzJWRGIyNTBjbTlzYkdWeUlIdGNiaUFnSUNCMmFXUmxiMFZzWlcxbGJuUlFjbTkyYVdSbGNqb2dWbWxrWlc5UWJHRjVaWEk3WEc0Z0lDQWdkRzlUZEhKbFlXMWxjazFsYzNOaFoyVnpVSEp2ZG1sa1pYSTZJRk4wY21WaGJVMWxjM05oWjJWRGIyNTBjbTlzYkdWeU8xeHVJQ0FnSUdOdmIzSmthVzVoZEdWRGIyNTJaWEowWlhJNklFTnZiM0prYVc1aGRHVkRiMjUyWlhKMFpYSTdYRzRnSUNBZ1lXTjBhWFpsUzJWNWMxQnliM1pwWkdWeU9pQkJZM1JwZG1WTFpYbHpPMXh1WEc0Z0lDQWdMeThnVlhScGJHbDBlU0JtYjNJZ2EyVmxjR2x1WnlCMGNtRmpheUJ2WmlCbGRtVnVkQ0JvWVc1a2JHVnljeUJoYm1RZ2RXNXlaV2RwYzNSbGNtbHVaeUIwYUdWdFhHNGdJQ0FnY0hKcGRtRjBaU0J0YjNWelpVVjJaVzUwVEdsemRHVnVaWEpVY21GamEyVnlJRDBnYm1WM0lFVjJaVzUwVEdsemRHVnVaWEpVY21GamEyVnlLQ2s3WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZEc5VGRISmxZVzFsY2sxbGMzTmhaMlZ6VUhKdmRtbGtaWElnTFNCVGRISmxZVzBnYldWemMyRm5aU0JwYm5OMFlXNWpaVnh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjJhV1JsYjBWc1pXMWxiblJRY205MmFXUmxjaUF0SUZacFpHVnZJRkJzWVhsbGNpQnBibk4wWVc1alpWeHVJQ0FnSUNBcUlFQndZWEpoYlNCdWIzSnRZV3hwZW1WQmJtUlJkV0Z1ZEdsNlpTQXRJRUVnYm05eWJXRnNhWHBsSUdGdVpDQnhkV0Z1ZEdsNlpTQnBibk4wWVc1alpWeHVJQ0FnSUNBcUwxeHVJQ0FnSUdOdmJuTjBjblZqZEc5eUtGeHVJQ0FnSUNBZ0lDQjBiMU4wY21WaGJXVnlUV1Z6YzJGblpYTlFjbTkyYVdSbGNqb2dVM1J5WldGdFRXVnpjMkZuWlVOdmJuUnliMnhzWlhJc1hHNGdJQ0FnSUNBZ0lIWnBaR1Z2Uld4bGJXVnVkRkJ5YjNacFpHVnlPaUJXYVdSbGIxQnNZWGxsY2l4Y2JpQWdJQ0FnSUNBZ1kyOXZjbVJwYm1GMFpVTnZiblpsY25SbGNqb2dRMjl2Y21ScGJtRjBaVU52Ym5abGNuUmxjaXhjYmlBZ0lDQWdJQ0FnWVdOMGFYWmxTMlY1YzFCeWIzWnBaR1Z5T2lCQlkzUnBkbVZMWlhselhHNGdJQ0FnS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11ZEc5VGRISmxZVzFsY2sxbGMzTmhaMlZ6VUhKdmRtbGtaWElnUFNCMGIxTjBjbVZoYldWeVRXVnpjMkZuWlhOUWNtOTJhV1JsY2p0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVqYjI5eVpHbHVZWFJsUTI5dWRtVnlkR1Z5SUQwZ1kyOXZjbVJwYm1GMFpVTnZiblpsY25SbGNqdGNiaUFnSUNBZ0lDQWdkR2hwY3k1MmFXUmxiMFZzWlcxbGJuUlFjbTkyYVdSbGNpQTlJSFpwWkdWdlJXeGxiV1Z1ZEZCeWIzWnBaR1Z5TzF4dUlDQWdJQ0FnSUNCMGFHbHpMbUZqZEdsMlpVdGxlWE5RY205MmFXUmxjaUE5SUdGamRHbDJaVXRsZVhOUWNtOTJhV1JsY2p0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV5WldkcGMzUmxjazF2ZFhObFJXNTBaWEpCYm1STVpXRjJaVVYyWlc1MGN5Z3BPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRU5zWldGeWN5QmhiR3dnZEdobElHTnNhV05ySUdWMlpXNTBjeUJ2YmlCMGFHVWdZM1Z5Y21WdWRDQjJhV1JsYnlCbGJHVnRaVzUwSUhCaGNtVnVkQ0JrYVhaY2JpQWdJQ0FnS2k5Y2JpQWdJQ0IxYm5KbFoybHpkR1Z5VFc5MWMyVkZkbVZ1ZEhNb0tTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWJXOTFjMlZGZG1WdWRFeHBjM1JsYm1WeVZISmhZMnRsY2k1MWJuSmxaMmx6ZEdWeVFXeHNLQ2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVW1WbmFYTjBaWElnWVNCc2IyTnJaV1FnYlc5MWMyVWdZMnhoYzNOY2JpQWdJQ0FnS2lCQWNHRnlZVzBnYlc5MWMyVkRiMjUwY205c2JHVnlJQzBnWVNCdGIzVnpaU0JqYjI1MGNtOXNiR1Z5SUdsdWMzUmhibU5sWEc0Z0lDQWdJQ29nUUhCaGNtRnRJSEJzWVhsbGNsTjBlV3hsUVhSMGNtbGlkWFJsYzFCeWIzWnBaR1Z5SUMwZ1lTQndiR0Y1WlhJZ2MzUjViR1VnWVhSMGNtbGlkWFJsY3lCcGJuTjBZVzVqWlZ4dUlDQWdJQ0FxTDF4dUlDQWdJSEpsWjJsemRHVnlURzlqYTJWa1RXOTFjMlZGZG1WdWRITW9iVzkxYzJWRGIyNTBjbTlzYkdWeU9pQk5iM1Z6WlVOdmJuUnliMnhzWlhJcElIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2RtbGtaVzlGYkdWdFpXNTBVR0Z5Wlc1MElEMWNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVkbWxrWlc5RmJHVnRaVzUwVUhKdmRtbGtaWEl1WjJWMFZtbGtaVzlRWVhKbGJuUkZiR1Z0Wlc1MEtDa2dZWE1nU0ZSTlRFUnBka1ZzWlcxbGJuUTdYRzRnSUNBZ0lDQWdJR052Ym5OMElHeHZZMnRsWkUxdmRYTmxSWFpsYm5Sek9pQkpUVzkxYzJWRmRtVnVkSE1nUFNCdVpYY2dURzlqYTJWa1RXOTFjMlZGZG1WdWRITW9YRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMblpwWkdWdlJXeGxiV1Z1ZEZCeWIzWnBaR1Z5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdiVzkxYzJWRGIyNTBjbTlzYkdWeUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWhZM1JwZG1WTFpYbHpVSEp2ZG1sa1pYSmNiaUFnSUNBZ0lDQWdLVHRjYmx4dUlDQWdJQ0FnSUNCMmFXUmxiMFZzWlcxbGJuUlFZWEpsYm5RdWNtVnhkV1Z6ZEZCdmFXNTBaWEpNYjJOcklEMWNiaUFnSUNBZ0lDQWdJQ0FnSUhacFpHVnZSV3hsYldWdWRGQmhjbVZ1ZEM1eVpYRjFaWE4wVUc5cGJuUmxja3h2WTJzZ2ZIeGNiaUFnSUNBZ0lDQWdJQ0FnSUhacFpHVnZSV3hsYldWdWRGQmhjbVZ1ZEM1dGIzcFNaWEYxWlhOMFVHOXBiblJsY2t4dlkyczdYRzRnSUNBZ0lDQWdJR1J2WTNWdFpXNTBMbVY0YVhSUWIybHVkR1Z5VEc5amF5QTlYRzRnSUNBZ0lDQWdJQ0FnSUNCa2IyTjFiV1Z1ZEM1bGVHbDBVRzlwYm5SbGNreHZZMnNnZkh3Z1pHOWpkVzFsYm5RdWJXOTZSWGhwZEZCdmFXNTBaWEpNYjJOck8xeHVYRzRnSUNBZ0lDQWdJQzh2SUcxcGJtOXlJR2hoWTJzZ2RHOGdZV3hzWlhacFlYUmxJR2x2Y3lCdWIzUWdjM1Z3Y0c5eWRHbHVaeUJ3YjJsdWRHVnliRzlqYTF4dUlDQWdJQ0FnSUNCcFppQW9kbWxrWlc5RmJHVnRaVzUwVUdGeVpXNTBMbkpsY1hWbGMzUlFiMmx1ZEdWeVRHOWpheWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2IyNWpiR2xqYXlBOUlDZ3BJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMmFXUmxiMFZzWlcxbGJuUlFZWEpsYm5RdWNtVnhkV1Z6ZEZCdmFXNTBaWEpNYjJOcktDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1sa1pXOUZiR1Z0Wlc1MFVHRnlaVzUwTG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvSjJOc2FXTnJKeXdnYjI1amJHbGpheWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG0xdmRYTmxSWFpsYm5STWFYTjBaVzVsY2xSeVlXTnJaWEl1WVdSa1ZXNXlaV2RwYzNSbGNrTmhiR3hpWVdOcktGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDZ3BJRDArSUhacFpHVnZSV3hsYldWdWRGQmhjbVZ1ZEM1eVpXMXZkbVZGZG1WdWRFeHBjM1JsYm1WeUtDZGpiR2xqYXljc0lHOXVZMnhwWTJzcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2JHOWphMU4wWVhSbFEyaGhibWRsVEdsemRHVnVaWElnUFNBb0tTQTlQbHh1SUNBZ0lDQWdJQ0FnSUNBZ2JHOWphMlZrVFc5MWMyVkZkbVZ1ZEhNdWJHOWphMU4wWVhSbFEyaGhibWRsS0NrN1hHNGdJQ0FnSUNBZ0lHUnZZM1Z0Wlc1MExtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FuY0c5cGJuUmxjbXh2WTJ0amFHRnVaMlVuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdiRzlqYTFOMFlYUmxRMmhoYm1kbFRHbHpkR1Z1WlhJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JtWVd4elpWeHVJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0JrYjJOMWJXVnVkQzVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0oyMXZlbkJ2YVc1MFpYSnNiMk5yWTJoaGJtZGxKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lHeHZZMnRUZEdGMFpVTm9ZVzVuWlV4cGMzUmxibVZ5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdabUZzYzJWY2JpQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1dGIzVnpaVVYyWlc1MFRHbHpkR1Z1WlhKVWNtRmphMlZ5TG1Ga1pGVnVjbVZuYVhOMFpYSkRZV3hzWW1GamF5aGNiaUFnSUNBZ0lDQWdJQ0FnSUNncElEMCtJR1J2WTNWdFpXNTBMbkpsYlc5MlpVVjJaVzUwVEdsemRHVnVaWElvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSjNCdmFXNTBaWEpzYjJOclkyaGhibWRsSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc2IyTnJVM1JoZEdWRGFHRnVaMlZNYVhOMFpXNWxjaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtWVd4elpWeHVJQ0FnSUNBZ0lDQWdJQ0FnS1Z4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG0xdmRYTmxSWFpsYm5STWFYTjBaVzVsY2xSeVlXTnJaWEl1WVdSa1ZXNXlaV2RwYzNSbGNrTmhiR3hpWVdOcktGeHVJQ0FnSUNBZ0lDQWdJQ0FnS0NrZ1BUNGdaRzlqZFcxbGJuUXVjbVZ0YjNabFJYWmxiblJNYVhOMFpXNWxjaWhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuYlc5NmNHOXBiblJsY214dlkydGphR0Z1WjJVbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeHZZMnRUZEdGMFpVTm9ZVzVuWlV4cGMzUmxibVZ5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdaaGJITmxYRzRnSUNBZ0lDQWdJQ0FnSUNBcFhHNGdJQ0FnSUNBZ0lDazdYRzVjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdiMjV0YjNWelpXUnZkMjRnUFNBb2JXOTFjMlZGZG1WdWREb2dUVzkxYzJWRmRtVnVkQ2tnUFQ1Y2JpQWdJQ0FnSUNBZ0lDQWdJR3h2WTJ0bFpFMXZkWE5sUlhabGJuUnpMbWhoYm1Sc1pVMXZkWE5sUkc5M2JpaHRiM1Z6WlVWMlpXNTBLVHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdiMjV0YjNWelpYVndJRDBnS0cxdmRYTmxSWFpsYm5RNklFMXZkWE5sUlhabGJuUXBJRDArWEc0Z0lDQWdJQ0FnSUNBZ0lDQnNiMk5yWldSTmIzVnpaVVYyWlc1MGN5NW9ZVzVrYkdWTmIzVnpaVlZ3S0cxdmRYTmxSWFpsYm5RcE8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCdmJuZG9aV1ZzSUQwZ0tIZG9aV1ZzUlhabGJuUTZJRmRvWldWc1JYWmxiblFwSUQwK1hHNGdJQ0FnSUNBZ0lDQWdJQ0JzYjJOclpXUk5iM1Z6WlVWMlpXNTBjeTVvWVc1a2JHVk5iM1Z6WlZkb1pXVnNLSGRvWldWc1JYWmxiblFwTzF4dUlDQWdJQ0FnSUNCamIyNXpkQ0J2Ym1SaWJHTnNhV05ySUQwZ0tHMXZkWE5sUlhabGJuUTZJRTF2ZFhObFJYWmxiblFwSUQwK1hHNGdJQ0FnSUNBZ0lDQWdJQ0JzYjJOclpXUk5iM1Z6WlVWMlpXNTBjeTVvWVc1a2JHVk5iM1Z6WlVSdmRXSnNaU2h0YjNWelpVVjJaVzUwS1R0Y2JpQWdJQ0FnSUNBZ2RtbGtaVzlGYkdWdFpXNTBVR0Z5Wlc1MExtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0oyMXZkWE5sWkc5M2JpY3NJRzl1Ylc5MWMyVmtiM2R1S1R0Y2JpQWdJQ0FnSUNBZ2RtbGtaVzlGYkdWdFpXNTBVR0Z5Wlc1MExtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0oyMXZkWE5sZFhBbkxDQnZibTF2ZFhObGRYQXBPMXh1SUNBZ0lDQWdJQ0IyYVdSbGIwVnNaVzFsYm5SUVlYSmxiblF1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWduZDJobFpXd25MQ0J2Ym5kb1pXVnNLVHRjYmlBZ0lDQWdJQ0FnZG1sa1pXOUZiR1Z0Wlc1MFVHRnlaVzUwTG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvSjJSaWJHTnNhV05ySnl3Z2IyNWtZbXhqYkdsamF5azdYRzVjYmlBZ0lDQWdJQ0FnZEdocGN5NXRiM1Z6WlVWMlpXNTBUR2x6ZEdWdVpYSlVjbUZqYTJWeUxtRmtaRlZ1Y21WbmFYTjBaWEpEWVd4c1ltRmpheWhjYmlBZ0lDQWdJQ0FnSUNBZ0lDZ3BJRDArSUhacFpHVnZSV3hsYldWdWRGQmhjbVZ1ZEM1eVpXMXZkbVZGZG1WdWRFeHBjM1JsYm1WeUtDZHRiM1Z6WldSdmQyNG5MQ0J2Ym0xdmRYTmxaRzkzYmlsY2JpQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1dGIzVnpaVVYyWlc1MFRHbHpkR1Z1WlhKVWNtRmphMlZ5TG1Ga1pGVnVjbVZuYVhOMFpYSkRZV3hzWW1GamF5aGNiaUFnSUNBZ0lDQWdJQ0FnSUNncElEMCtJSFpwWkdWdlJXeGxiV1Z1ZEZCaGNtVnVkQzV5WlcxdmRtVkZkbVZ1ZEV4cGMzUmxibVZ5S0NkdGIzVnpaWFZ3Snl3Z2IyNXRiM1Z6WlhWd0tWeHVJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtMXZkWE5sUlhabGJuUk1hWE4wWlc1bGNsUnlZV05yWlhJdVlXUmtWVzV5WldkcGMzUmxja05oYkd4aVlXTnJLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0tDa2dQVDRnZG1sa1pXOUZiR1Z0Wlc1MFVHRnlaVzUwTG5KbGJXOTJaVVYyWlc1MFRHbHpkR1Z1WlhJb0ozZG9aV1ZzSnl3Z2IyNTNhR1ZsYkNsY2JpQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1dGIzVnpaVVYyWlc1MFRHbHpkR1Z1WlhKVWNtRmphMlZ5TG1Ga1pGVnVjbVZuYVhOMFpYSkRZV3hzWW1GamF5aGNiaUFnSUNBZ0lDQWdJQ0FnSUNncElEMCtJSFpwWkdWdlJXeGxiV1Z1ZEZCaGNtVnVkQzV5WlcxdmRtVkZkbVZ1ZEV4cGMzUmxibVZ5S0Nka1lteGpiR2xqYXljc0lHOXVaR0pzWTJ4cFkyc3BYRzRnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXViVzkxYzJWRmRtVnVkRXhwYzNSbGJtVnlWSEpoWTJ0bGNpNWhaR1JWYm5KbFoybHpkR1Z5UTJGc2JHSmhZMnNvWEc0Z0lDQWdJQ0FnSUNBZ0lDQW9LU0E5UGlCc2IyTnJaV1JOYjNWelpVVjJaVzUwY3k1MWJuSmxaMmx6ZEdWeVRXOTFjMlZGZG1WdWRITW9LVnh1SUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbTF2ZFhObFJYWmxiblJNYVhOMFpXNWxjbFJ5WVdOclpYSXVZV1JrVlc1eVpXZHBjM1JsY2tOaGJHeGlZV05yS0NncElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrYjJOMWJXVnVkQzVsZUdsMFVHOXBiblJsY2t4dlkyc2dKaVpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FvWkc5amRXMWxiblF1Y0c5cGJuUmxja3h2WTJ0RmJHVnRaVzUwSUQwOVBTQjJhV1JsYjBWc1pXMWxiblJRWVhKbGJuUWdmSHhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHOWpkVzFsYm5RdWJXOTZVRzlwYm5SbGNreHZZMnRGYkdWdFpXNTBJRDA5UFNCMmFXUmxiMFZzWlcxbGJuUlFZWEpsYm5RcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa2IyTjFiV1Z1ZEM1bGVHbDBVRzlwYm5SbGNreHZZMnNvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1VtVm5hWE4wWlhJZ1lTQm9iM1psY21sdVp5QnRiM1Z6WlNCamJHRnpjMXh1SUNBZ0lDQXFJRUJ3WVhKaGJTQnRiM1Z6WlVOdmJuUnliMnhzWlhJZ0xTQkJJRzF2ZFhObElHTnZiblJ5YjJ4c1pYSWdiMkpxWldOMFhHNGdJQ0FnSUNvdlhHNGdJQ0FnY21WbmFYTjBaWEpJYjNabGNtbHVaMDF2ZFhObFJYWmxiblJ6S0cxdmRYTmxRMjl1ZEhKdmJHeGxjam9nVFc5MWMyVkRiMjUwY205c2JHVnlLU0I3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSFpwWkdWdlJXeGxiV1Z1ZEZCaGNtVnVkQ0E5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5acFpHVnZSV3hsYldWdWRGQnliM1pwWkdWeUxtZGxkRlpwWkdWdlVHRnlaVzUwUld4bGJXVnVkQ2dwSUdGeklFaFVUVXhFYVhaRmJHVnRaVzUwTzF4dUlDQWdJQ0FnSUNCamIyNXpkQ0JvYjNabGNtbHVaMDF2ZFhObFJYWmxiblJ6SUQwZ2JtVjNJRWh2ZG1WeWFXNW5UVzkxYzJWRmRtVnVkSE1vYlc5MWMyVkRiMjUwY205c2JHVnlLVHRjYmx4dUlDQWdJQ0FnSUNCamIyNXpkQ0J2Ym0xdmRYTmxiVzkyWlNBOUlDaHRiM1Z6WlVWMlpXNTBPaUJOYjNWelpVVjJaVzUwS1NBOVBseHVJQ0FnSUNBZ0lDQWdJQ0FnYUc5MlpYSnBibWROYjNWelpVVjJaVzUwY3k1MWNHUmhkR1ZOYjNWelpVMXZkbVZRYjNOcGRHbHZiaWh0YjNWelpVVjJaVzUwS1R0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYjI1dGIzVnpaV1J2ZDI0Z1BTQW9iVzkxYzJWRmRtVnVkRG9nVFc5MWMyVkZkbVZ1ZENrZ1BUNWNiaUFnSUNBZ0lDQWdJQ0FnSUdodmRtVnlhVzVuVFc5MWMyVkZkbVZ1ZEhNdWFHRnVaR3hsVFc5MWMyVkViM2R1S0cxdmRYTmxSWFpsYm5RcE8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCdmJtMXZkWE5sZFhBZ1BTQW9iVzkxYzJWRmRtVnVkRG9nVFc5MWMyVkZkbVZ1ZENrZ1BUNWNiaUFnSUNBZ0lDQWdJQ0FnSUdodmRtVnlhVzVuVFc5MWMyVkZkbVZ1ZEhNdWFHRnVaR3hsVFc5MWMyVlZjQ2h0YjNWelpVVjJaVzUwS1R0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYjI1amIyNTBaWGgwYldWdWRTQTlJQ2h0YjNWelpVVjJaVzUwT2lCTmIzVnpaVVYyWlc1MEtTQTlQbHh1SUNBZ0lDQWdJQ0FnSUNBZ2FHOTJaWEpwYm1kTmIzVnpaVVYyWlc1MGN5NW9ZVzVrYkdWRGIyNTBaWGgwVFdWdWRTaHRiM1Z6WlVWMlpXNTBLVHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdiMjUzYUdWbGJDQTlJQ2gzYUdWbGJFVjJaVzUwT2lCWGFHVmxiRVYyWlc1MEtTQTlQbHh1SUNBZ0lDQWdJQ0FnSUNBZ2FHOTJaWEpwYm1kTmIzVnpaVVYyWlc1MGN5NW9ZVzVrYkdWTmIzVnpaVmRvWldWc0tIZG9aV1ZzUlhabGJuUXBPMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQnZibVJpYkdOc2FXTnJJRDBnS0cxdmRYTmxSWFpsYm5RNklFMXZkWE5sUlhabGJuUXBJRDArWEc0Z0lDQWdJQ0FnSUNBZ0lDQm9iM1psY21sdVowMXZkWE5sUlhabGJuUnpMbWhoYm1Sc1pVMXZkWE5sUkc5MVlteGxLRzF2ZFhObFJYWmxiblFwTzF4dUlDQWdJQ0FnSUNCMmFXUmxiMFZzWlcxbGJuUlFZWEpsYm5RdVlXUmtSWFpsYm5STWFYTjBaVzVsY2lnbmJXOTFjMlZ0YjNabEp5d2diMjV0YjNWelpXMXZkbVVwTzF4dUlDQWdJQ0FnSUNCMmFXUmxiMFZzWlcxbGJuUlFZWEpsYm5RdVlXUmtSWFpsYm5STWFYTjBaVzVsY2lnbmJXOTFjMlZrYjNkdUp5d2diMjV0YjNWelpXUnZkMjRwTzF4dUlDQWdJQ0FnSUNCMmFXUmxiMFZzWlcxbGJuUlFZWEpsYm5RdVlXUmtSWFpsYm5STWFYTjBaVzVsY2lnbmJXOTFjMlYxY0Njc0lHOXViVzkxYzJWMWNDazdYRzRnSUNBZ0lDQWdJSFpwWkdWdlJXeGxiV1Z1ZEZCaGNtVnVkQzVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLQ2RqYjI1MFpYaDBiV1Z1ZFNjc0lHOXVZMjl1ZEdWNGRHMWxiblVwTzF4dUlDQWdJQ0FnSUNCMmFXUmxiMFZzWlcxbGJuUlFZWEpsYm5RdVlXUmtSWFpsYm5STWFYTjBaVzVsY2lnbmQyaGxaV3duTENCdmJuZG9aV1ZzS1R0Y2JpQWdJQ0FnSUNBZ2RtbGtaVzlGYkdWdFpXNTBVR0Z5Wlc1MExtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0oyUmliR05zYVdOckp5d2diMjVrWW14amJHbGpheWs3WEc1Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV0YjNWelpVVjJaVzUwVEdsemRHVnVaWEpVY21GamEyVnlMbUZrWkZWdWNtVm5hWE4wWlhKRFlXeHNZbUZqYXloY2JpQWdJQ0FnSUNBZ0lDQWdJQ2dwSUQwK0lIWnBaR1Z2Uld4bGJXVnVkRkJoY21WdWRDNXlaVzF2ZG1WRmRtVnVkRXhwYzNSbGJtVnlLQ2R0YjNWelpXMXZkbVVuTENCdmJtMXZkWE5sYlc5MlpTbGNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXRiM1Z6WlVWMlpXNTBUR2x6ZEdWdVpYSlVjbUZqYTJWeUxtRmtaRlZ1Y21WbmFYTjBaWEpEWVd4c1ltRmpheWhjYmlBZ0lDQWdJQ0FnSUNBZ0lDZ3BJRDArSUhacFpHVnZSV3hsYldWdWRGQmhjbVZ1ZEM1eVpXMXZkbVZGZG1WdWRFeHBjM1JsYm1WeUtDZHRiM1Z6WldSdmQyNG5MQ0J2Ym0xdmRYTmxaRzkzYmlsY2JpQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1dGIzVnpaVVYyWlc1MFRHbHpkR1Z1WlhKVWNtRmphMlZ5TG1Ga1pGVnVjbVZuYVhOMFpYSkRZV3hzWW1GamF5aGNiaUFnSUNBZ0lDQWdJQ0FnSUNncElEMCtJSFpwWkdWdlJXeGxiV1Z1ZEZCaGNtVnVkQzV5WlcxdmRtVkZkbVZ1ZEV4cGMzUmxibVZ5S0NkdGIzVnpaWFZ3Snl3Z2IyNXRiM1Z6WlhWd0tWeHVJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtMXZkWE5sUlhabGJuUk1hWE4wWlc1bGNsUnlZV05yWlhJdVlXUmtWVzV5WldkcGMzUmxja05oYkd4aVlXTnJLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0tDa2dQVDRnZG1sa1pXOUZiR1Z0Wlc1MFVHRnlaVzUwTG5KbGJXOTJaVVYyWlc1MFRHbHpkR1Z1WlhJb0oyTnZiblJsZUhSdFpXNTFKeXdnYjI1amIyNTBaWGgwYldWdWRTbGNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXRiM1Z6WlVWMlpXNTBUR2x6ZEdWdVpYSlVjbUZqYTJWeUxtRmtaRlZ1Y21WbmFYTjBaWEpEWVd4c1ltRmpheWhjYmlBZ0lDQWdJQ0FnSUNBZ0lDZ3BJRDArSUhacFpHVnZSV3hsYldWdWRGQmhjbVZ1ZEM1eVpXMXZkbVZGZG1WdWRFeHBjM1JsYm1WeUtDZDNhR1ZsYkNjc0lHOXVkMmhsWld3cFhHNGdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdWJXOTFjMlZGZG1WdWRFeHBjM1JsYm1WeVZISmhZMnRsY2k1aFpHUlZibkpsWjJsemRHVnlRMkZzYkdKaFkyc29YRzRnSUNBZ0lDQWdJQ0FnSUNBb0tTQTlQaUIyYVdSbGIwVnNaVzFsYm5SUVlYSmxiblF1Y21WdGIzWmxSWFpsYm5STWFYTjBaVzVsY2lnblpHSnNZMnhwWTJzbkxDQnZibVJpYkdOc2FXTnJLVnh1SUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbTF2ZFhObFJYWmxiblJNYVhOMFpXNWxjbFJ5WVdOclpYSXVZV1JrVlc1eVpXZHBjM1JsY2tOaGJHeGlZV05yS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdLQ2tnUFQ0Z2FHOTJaWEpwYm1kTmIzVnpaVVYyWlc1MGN5NTFibkpsWjJsemRHVnlUVzkxYzJWRmRtVnVkSE1vS1Z4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGTmxkQ0IwYUdVZ2JXOTFjMlVnWlc1MFpYSWdZVzVrSUcxdmRYTmxJR3hsWVhabElHVjJaVzUwYzF4dUlDQWdJQ0FxTDF4dUlDQWdJSEpsWjJsemRHVnlUVzkxYzJWRmJuUmxja0Z1WkV4bFlYWmxSWFpsYm5SektDa2dlMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQjJhV1JsYjBWc1pXMWxiblJRWVhKbGJuUWdQVnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTUyYVdSbGIwVnNaVzFsYm5SUWNtOTJhV1JsY2k1blpYUldhV1JsYjFCaGNtVnVkRVZzWlcxbGJuUW9LU0JoY3lCSVZFMU1SR2wyUld4bGJXVnVkRHRjYmx4dUlDQWdJQ0FnSUNBdkx5QklZVzVrYkdVZ2QyaGxiaUIwYUdVZ1RXOTFjMlVnYUdGeklHVnVkR1Z5WldRZ2RHaGxJR1ZzWlcxbGJuUmNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2IyNXRiM1Z6WldWdWRHVnlJRDBnS0dWMlpXNTBPaUJOYjNWelpVVjJaVzUwS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9JWFJvYVhNdWRtbGtaVzlGYkdWdFpXNTBVSEp2ZG1sa1pYSXVhWE5XYVdSbGIxSmxZV1I1S0NrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQk1iMmRuWlhJdVRHOW5LRXh2WjJkbGNpNUhaWFJUZEdGamExUnlZV05sS0Nrc0lDZE5iM1Z6WlNCRmJuUmxjbVZrSnl3Z05pazdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbk5sYm1STmIzVnpaVVZ1ZEdWeUtDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbkJ5WlhOelRXOTFjMlZDZFhSMGIyNXpLR1YyWlc1MExtSjFkSFJ2Ym5Nc0lHVjJaVzUwTG5nc0lHVjJaVzUwTG5rcE8xeHVJQ0FnSUNBZ0lDQjlPMXh1WEc0Z0lDQWdJQ0FnSUM4dklFaGhibVJzWlhNZ2QyaGxiaUIwYUdVZ2JXOTFjMlVnYUdGeklHeGxablFnZEdobElHVnNaVzFsYm5SY2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYjI1dGIzVnpaV3hsWVhabElEMGdLR1YyWlc1ME9pQk5iM1Z6WlVWMlpXNTBLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0lYUm9hWE11ZG1sa1pXOUZiR1Z0Wlc1MFVISnZkbWxrWlhJdWFYTldhV1JsYjFKbFlXUjVLQ2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCTWIyZG5aWEl1VEc5bktFeHZaMmRsY2k1SFpYUlRkR0ZqYTFSeVlXTmxLQ2tzSUNkTmIzVnpaU0JNWldaMEp5d2dOaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5ObGJtUk5iM1Z6WlV4bFlYWmxLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5KbGJHVmhjMlZOYjNWelpVSjFkSFJ2Ym5Nb1pYWmxiblF1WW5WMGRHOXVjeXdnWlhabGJuUXVlQ3dnWlhabGJuUXVlU2s3WEc0Z0lDQWdJQ0FnSUgwN1hHNGdJQ0FnSUNBZ0lIWnBaR1Z2Uld4bGJXVnVkRkJoY21WdWRDNWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtDZHRiM1Z6WldWdWRHVnlKeXdnYjI1dGIzVnpaV1Z1ZEdWeUtUdGNiaUFnSUNBZ0lDQWdkbWxrWlc5RmJHVnRaVzUwVUdGeVpXNTBMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9KMjF2ZFhObGJHVmhkbVVuTENCdmJtMXZkWE5sYkdWaGRtVXBPMXh1WEc0Z0lDQWdJQ0FnSUhSb2FYTXViVzkxYzJWRmRtVnVkRXhwYzNSbGJtVnlWSEpoWTJ0bGNpNWhaR1JWYm5KbFoybHpkR1Z5UTJGc2JHSmhZMnNvWEc0Z0lDQWdJQ0FnSUNBZ0lDQW9LU0E5UGlCMmFXUmxiMFZzWlcxbGJuUlFZWEpsYm5RdWNtVnRiM1psUlhabGJuUk1hWE4wWlc1bGNpZ25iVzkxYzJWbGJuUmxjaWNzSUc5dWJXOTFjMlZsYm5SbGNpbGNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXRiM1Z6WlVWMlpXNTBUR2x6ZEdWdVpYSlVjbUZqYTJWeUxtRmtaRlZ1Y21WbmFYTjBaWEpEWVd4c1ltRmpheWhjYmlBZ0lDQWdJQ0FnSUNBZ0lDZ3BJRDArSUhacFpHVnZSV3hsYldWdWRGQmhjbVZ1ZEM1eVpXMXZkbVZGZG1WdWRFeHBjM1JsYm1WeUtDZHRiM1Z6Wld4bFlYWmxKeXdnYjI1dGIzVnpaV3hsWVhabEtWeHVJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRWhoYm1Sc1pTQjNhR1Z1SUdFZ2JXOTFjMlVnWW5WMGRHOXVJR2x6SUhKbGJHVmhjMlZrWEc0Z0lDQWdJQ29nUUhCaGNtRnRJR0oxZEhSdmJuTWdMU0JOYjNWelpTQkNkWFIwYjI1Y2JpQWdJQ0FnS2lCQWNHRnlZVzBnV0NBdElFMXZkWE5sSUhCdmFXNTBaWElnV0NCamIyOXlaR2x1WVhSbFhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUZrZ0xTQk5iM1Z6WlNCd2IybHVkR1Z5SUZrZ1kyOXZjbVJwYm1GMFpWeHVJQ0FnSUNBcUwxeHVJQ0FnSUhKbGJHVmhjMlZOYjNWelpVSjFkSFJ2Ym5Nb1luVjBkRzl1Y3pvZ2JuVnRZbVZ5TENCWU9pQnVkVzFpWlhJc0lGazZJRzUxYldKbGNpa2dlMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQmpiMjl5WkNBOUlIUm9hWE11WTI5dmNtUnBibUYwWlVOdmJuWmxjblJsY2k1dWIzSnRZV3hwZW1WQmJtUlJkV0Z1ZEdsNlpWVnVjMmxuYm1Wa0tGeHVJQ0FnSUNBZ0lDQWdJQ0FnV0N4Y2JpQWdJQ0FnSUNBZ0lDQWdJRmxjYmlBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLR0oxZEhSdmJuTWdKaUJOYjNWelpVSjFkSFJ2Ym5OTllYTnJMbkJ5YVcxaGNubENkWFIwYjI0cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjMlZ1WkUxdmRYTmxWWEFvVFc5MWMyVkNkWFIwYjI0dWJXRnBia0oxZEhSdmJpd2dZMjl2Y21RdWVDd2dZMjl2Y21RdWVTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnYVdZZ0tHSjFkSFJ2Ym5NZ0ppQk5iM1Z6WlVKMWRIUnZibk5OWVhOckxuTmxZMjl1WkdGeWVVSjFkSFJ2YmlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXpaVzVrVFc5MWMyVlZjQ2hOYjNWelpVSjFkSFJ2Ymk1elpXTnZibVJoY25sQ2RYUjBiMjRzSUdOdmIzSmtMbmdzSUdOdmIzSmtMbmtwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHbG1JQ2hpZFhSMGIyNXpJQ1lnVFc5MWMyVkNkWFIwYjI1elRXRnpheTVoZFhocGJHbGhjbmxDZFhSMGIyNHBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YzJWdVpFMXZkWE5sVlhBb1RXOTFjMlZDZFhSMGIyNHVZWFY0YVd4cFlYSjVRblYwZEc5dUxDQmpiMjl5WkM1NExDQmpiMjl5WkM1NUtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JwWmlBb1luVjBkRzl1Y3lBbUlFMXZkWE5sUW5WMGRHOXVjMDFoYzJzdVptOTFjblJvUW5WMGRHOXVLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5ObGJtUk5iM1Z6WlZWd0tFMXZkWE5sUW5WMGRHOXVMbVp2ZFhKMGFFSjFkSFJ2Yml3Z1kyOXZjbVF1ZUN3Z1kyOXZjbVF1ZVNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdhV1lnS0dKMWRIUnZibk1nSmlCTmIzVnpaVUoxZEhSdmJuTk5ZWE5yTG1acFpuUm9RblYwZEc5dUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbk5sYm1STmIzVnpaVlZ3S0UxdmRYTmxRblYwZEc5dUxtWnBablJvUW5WMGRHOXVMQ0JqYjI5eVpDNTRMQ0JqYjI5eVpDNTVLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVoaGJtUnNaU0IzYUdWdUlHRWdiVzkxYzJVZ1luVjBkRzl1SUdseklIQnlaWE56WldSY2JpQWdJQ0FnS2lCQWNHRnlZVzBnWW5WMGRHOXVjeUF0SUUxdmRYTmxJRUoxZEhSdmJseHVJQ0FnSUNBcUlFQndZWEpoYlNCWUlDMGdUVzkxYzJVZ2NHOXBiblJsY2lCWUlHTnZiM0prYVc1aGRHVmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ1dTQXRJRTF2ZFhObElIQnZhVzUwWlhJZ1dTQmpiMjl5WkdsdVlYUmxYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2NISmxjM05OYjNWelpVSjFkSFJ2Ym5Nb1luVjBkRzl1Y3pvZ2JuVnRZbVZ5TENCWU9pQnVkVzFpWlhJc0lGazZJRzUxYldKbGNpa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb0lYUm9hWE11ZG1sa1pXOUZiR1Z0Wlc1MFVISnZkbWxrWlhJdWFYTldhV1JsYjFKbFlXUjVLQ2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JqYjI1emRDQmpiMjl5WkNBOUlIUm9hWE11WTI5dmNtUnBibUYwWlVOdmJuWmxjblJsY2k1dWIzSnRZV3hwZW1WQmJtUlJkV0Z1ZEdsNlpWVnVjMmxuYm1Wa0tGeHVJQ0FnSUNBZ0lDQWdJQ0FnV0N4Y2JpQWdJQ0FnSUNBZ0lDQWdJRmxjYmlBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLR0oxZEhSdmJuTWdKaUJOYjNWelpVSjFkSFJ2Ym5OTllYTnJMbkJ5YVcxaGNubENkWFIwYjI0cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjMlZ1WkUxdmRYTmxSRzkzYmloTmIzVnpaVUoxZEhSdmJpNXRZV2x1UW5WMGRHOXVMQ0JqYjI5eVpDNTRMQ0JqYjI5eVpDNTVLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCcFppQW9ZblYwZEc5dWN5QW1JRTF2ZFhObFFuVjBkRzl1YzAxaGMyc3VjMlZqYjI1a1lYSjVRblYwZEc5dUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbk5sYm1STmIzVnpaVVJ2ZDI0b1RXOTFjMlZDZFhSMGIyNHVjMlZqYjI1a1lYSjVRblYwZEc5dUxDQmpiMjl5WkM1NExDQmpiMjl5WkM1NUtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JwWmlBb1luVjBkRzl1Y3lBbUlFMXZkWE5sUW5WMGRHOXVjMDFoYzJzdVlYVjRhV3hwWVhKNVFuVjBkRzl1S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuTmxibVJOYjNWelpVUnZkMjRvVFc5MWMyVkNkWFIwYjI0dVlYVjRhV3hwWVhKNVFuVjBkRzl1TENCamIyOXlaQzU0TENCamIyOXlaQzU1S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnBaaUFvWW5WMGRHOXVjeUFtSUUxdmRYTmxRblYwZEc5dWMwMWhjMnN1Wm05MWNuUm9RblYwZEc5dUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbk5sYm1STmIzVnpaVVJ2ZDI0b1RXOTFjMlZDZFhSMGIyNHVabTkxY25Sb1FuVjBkRzl1TENCamIyOXlaQzU0TENCamIyOXlaQzU1S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnBaaUFvWW5WMGRHOXVjeUFtSUUxdmRYTmxRblYwZEc5dWMwMWhjMnN1Wm1sbWRHaENkWFIwYjI0cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjMlZ1WkUxdmRYTmxSRzkzYmloTmIzVnpaVUoxZEhSdmJpNW1hV1owYUVKMWRIUnZiaXdnWTI5dmNtUXVlQ3dnWTI5dmNtUXVlU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCSVlXNWtiR1Z6SUcxdmRYTmxJR1Z1ZEdWeVhHNGdJQ0FnSUNvdlhHNGdJQ0FnYzJWdVpFMXZkWE5sUlc1MFpYSW9LU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hkR2hwY3k1MmFXUmxiMFZzWlcxbGJuUlFjbTkyYVdSbGNpNXBjMVpwWkdWdlVtVmhaSGtvS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSFJ2VTNSeVpXRnRaWEpJWVc1a2JHVnljeUE5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5SdlUzUnlaV0Z0WlhKTlpYTnpZV2RsYzFCeWIzWnBaR1Z5TG5SdlUzUnlaV0Z0WlhKSVlXNWtiR1Z5Y3p0Y2JpQWdJQ0FnSUNBZ2RHOVRkSEpsWVcxbGNraGhibVJzWlhKekxtZGxkQ2duVFc5MWMyVkZiblJsY2ljcEtDazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dTR0Z1Wkd4bGN5QnRiM1Z6WlNCTVpXRjJaVnh1SUNBZ0lDQXFMMXh1SUNBZ0lITmxibVJOYjNWelpVeGxZWFpsS0NrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvSVhSb2FYTXVkbWxrWlc5RmJHVnRaVzUwVUhKdmRtbGtaWEl1YVhOV2FXUmxiMUpsWVdSNUtDa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCMGIxTjBjbVZoYldWeVNHRnVaR3hsY25NZ1BWeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NTBiMU4wY21WaGJXVnlUV1Z6YzJGblpYTlFjbTkyYVdSbGNpNTBiMU4wY21WaGJXVnlTR0Z1Wkd4bGNuTTdYRzRnSUNBZ0lDQWdJSFJ2VTNSeVpXRnRaWEpJWVc1a2JHVnljeTVuWlhRb0owMXZkWE5sVEdWaGRtVW5LU2dwTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVoaGJtUnNaWE1nZDJobGJpQmhJRzF2ZFhObElHSjFkSFJ2YmlCcGN5QndjbVZ6YzJWa0lHUnZkMjVjYmlBZ0lDQWdLaUJBY0dGeVlXMGdZblYwZEc5dUlDMGdUVzkxYzJVZ1FuVjBkRzl1SUZCeVpYTnpaV1JjYmlBZ0lDQWdLaUJBY0dGeVlXMGdXQ0FnTFNCTmIzVnpaU0JZSUVOdmIzSmthVzVoZEdWY2JpQWdJQ0FnS2lCQWNHRnlZVzBnV1NBZ0xTQk5iM1Z6WlNCWklFTnZiM0prYVc1aGRHVmNiaUFnSUNBZ0tpOWNiaUFnSUNCelpXNWtUVzkxYzJWRWIzZHVLR0oxZEhSdmJqb2diblZ0WW1WeUxDQllPaUJ1ZFcxaVpYSXNJRms2SUc1MWJXSmxjaWtnZTF4dUlDQWdJQ0FnSUNCcFppQW9JWFJvYVhNdWRtbGtaVzlGYkdWdFpXNTBVSEp2ZG1sa1pYSXVhWE5XYVdSbGIxSmxZV1I1S0NrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCTWIyZG5aWEl1VEc5bktGeHVJQ0FnSUNBZ0lDQWdJQ0FnVEc5bloyVnlMa2RsZEZOMFlXTnJWSEpoWTJVb0tTeGNiaUFnSUNBZ0lDQWdJQ0FnSUdCdGIzVnpaU0JpZFhSMGIyNGdKSHRpZFhSMGIyNTlJR1J2ZDI0Z1lYUWdLQ1I3V0gwc0lDUjdXWDBwWUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJRFpjYmlBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnZEc5VGRISmxZVzFsY2toaGJtUnNaWEp6SUQxY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWRHOVRkSEpsWVcxbGNrMWxjM05oWjJWelVISnZkbWxrWlhJdWRHOVRkSEpsWVcxbGNraGhibVJzWlhKek8xeHVJQ0FnSUNBZ0lDQjBiMU4wY21WaGJXVnlTR0Z1Wkd4bGNuTXVaMlYwS0NkTmIzVnpaVVJ2ZDI0bktTaGJZblYwZEc5dUxDQllMQ0JaWFNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1NHRnVaR3hsY3lCM2FHVnVJR0VnYlc5MWMyVWdZblYwZEc5dUlHbHpJSEJ5WlhOelpXUWdkWEJjYmlBZ0lDQWdLaUJBY0dGeVlXMGdZblYwZEc5dUlDMGdUVzkxYzJVZ1FuVjBkRzl1SUZCeVpYTnpaV1JjYmlBZ0lDQWdLaUJBY0dGeVlXMGdXQ0FnTFNCTmIzVnpaU0JZSUVOdmIzSmthVzVoZEdWY2JpQWdJQ0FnS2lCQWNHRnlZVzBnV1NBZ0xTQk5iM1Z6WlNCWklFTnZiM0prYVc1aGRHVmNiaUFnSUNBZ0tpOWNiaUFnSUNCelpXNWtUVzkxYzJWVmNDaGlkWFIwYjI0NklHNTFiV0psY2l3Z1dEb2diblZ0WW1WeUxDQlpPaUJ1ZFcxaVpYSXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tDRjBhR2x6TG5acFpHVnZSV3hsYldWdWRGQnliM1pwWkdWeUxtbHpWbWxrWlc5U1pXRmtlU2dwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnVEc5bloyVnlMa3h2WnloY2JpQWdJQ0FnSUNBZ0lDQWdJRXh2WjJkbGNpNUhaWFJUZEdGamExUnlZV05sS0Nrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JnYlc5MWMyVWdZblYwZEc5dUlDUjdZblYwZEc5dWZTQjFjQ0JoZENBb0pIdFlmU3dnSkh0WmZTbGdMRnh1SUNBZ0lDQWdJQ0FnSUNBZ05seHVJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQmpiMjl5WkNBOUlIUm9hWE11WTI5dmNtUnBibUYwWlVOdmJuWmxjblJsY2k1dWIzSnRZV3hwZW1WQmJtUlJkV0Z1ZEdsNlpWVnVjMmxuYm1Wa0tGeHVJQ0FnSUNBZ0lDQWdJQ0FnV0N4Y2JpQWdJQ0FnSUNBZ0lDQWdJRmxjYmlBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnZEc5VGRISmxZVzFsY2toaGJtUnNaWEp6SUQxY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWRHOVRkSEpsWVcxbGNrMWxjM05oWjJWelVISnZkbWxrWlhJdWRHOVRkSEpsWVcxbGNraGhibVJzWlhKek8xeHVJQ0FnSUNBZ0lDQjBiMU4wY21WaGJXVnlTR0Z1Wkd4bGNuTXVaMlYwS0NkTmIzVnpaVlZ3Snlrb1cySjFkSFJ2Yml3Z1kyOXZjbVF1ZUN3Z1kyOXZjbVF1ZVYwcE8xeHVJQ0FnSUgxY2JuMWNiaUlzSWk4dklFTnZjSGx5YVdkb2RDQkZjR2xqSUVkaGJXVnpMQ0JKYm1NdUlFRnNiQ0JTYVdkb2RITWdVbVZ6WlhKMlpXUXVYRzVjYmk4cUtseHVJQ29nVW1WbmFYTjBaWEp6SUhSb1pTQlRjR1ZqYVdGc0lFdGxlU0JqYjJSbGMxeHVJQ29nSUUxMWMzUWdZbVVnYTJWd2RDQnBiaUJ6ZVc1aklIZHBkR2dnU21GMllWTmpjbWx3ZEV0bGVVTnZaR1ZVYjBaTFpYa2dReXNySUdGeWNtRjVMbHh1SUNvZ1ZHaGxJR2x1WkdWNElHOW1JSFJvWlNCbGJuUnllU0JwYmlCMGFHVWdZWEp5WVhrZ2FYTWdkR2hsSUhOd1pXTnBZV3dnYTJWNUlHTnZaR1VnWjJsMlpXNGdZbVZzYjNjdVhHNGdLaTljYm1WNGNHOXlkQ0JqYkdGemN5QlRjR1ZqYVdGc1MyVjVRMjlrWlhNZ2UxeHVJQ0FnSUhOMFlYUnBZeUJpWVdOclUzQmhZMlVnUFNBNE8xeHVJQ0FnSUhOMFlYUnBZeUJ6YUdsbWRDQTlJREUyTzF4dUlDQWdJSE4wWVhScFl5QmpiMjUwY205c0lEMGdNVGM3WEc0Z0lDQWdjM1JoZEdsaklHRnNkQ0E5SURFNE8xeHVJQ0FnSUhOMFlYUnBZeUJ5YVdkb2RGTm9hV1owSUQwZ01qVXpPMXh1SUNBZ0lITjBZWFJwWXlCeWFXZG9kRU52Ym5SeWIyd2dQU0F5TlRRN1hHNGdJQ0FnYzNSaGRHbGpJSEpwWjJoMFFXeDBJRDBnTWpVMU8xeHVmVnh1SWl3aUx5OGdRMjl3ZVhKcFoyaDBJRVZ3YVdNZ1IyRnRaWE1zSUVsdVl5NGdRV3hzSUZKcFoyaDBjeUJTWlhObGNuWmxaQzVjYmx4dWFXMXdiM0owSUhzZ1RHOW5aMlZ5SUgwZ1puSnZiU0FuTGk0dlRHOW5aMlZ5TDB4dloyZGxjaWM3WEc1cGJYQnZjblFnZXlCRGIyOXlaR2x1WVhSbFEyOXVkbVZ5ZEdWeUlIMGdabkp2YlNBbkxpNHZWWFJwYkM5RGIyOXlaR2x1WVhSbFEyOXVkbVZ5ZEdWeUp6dGNibWx0Y0c5eWRDQjdJRk4wY21WaGJVMWxjM05oWjJWRGIyNTBjbTlzYkdWeUlIMGdabkp2YlNBbkxpNHZWV1ZKYm5OMFlXNWpaVTFsYzNOaFoyVXZVM1J5WldGdFRXVnpjMkZuWlVOdmJuUnliMnhzWlhJbk8xeHVhVzF3YjNKMElIc2dWbWxrWlc5UWJHRjVaWElnZlNCbWNtOXRJQ2N1TGk5V2FXUmxiMUJzWVhsbGNpOVdhV1JsYjFCc1lYbGxjaWM3WEc1cGJYQnZjblFnZXlCSlZHOTFZMmhEYjI1MGNtOXNiR1Z5SUgwZ1puSnZiU0FuTGk5SlZHOTFZMmhEYjI1MGNtOXNiR1Z5Snp0Y2JtbHRjRzl5ZENCN0lFVjJaVzUwVEdsemRHVnVaWEpVY21GamEyVnlJSDBnWm5KdmJTQW5MaTR2VlhScGJDOUZkbVZ1ZEV4cGMzUmxibVZ5VkhKaFkydGxjaWM3WEc0dktpcGNiaUFxSUVoaGJtUnNaWE1nZEdobElGUnZkV05vSUdsdWNIVjBJRVYyWlc1MGMxeHVJQ292WEc1bGVIQnZjblFnWTJ4aGMzTWdWRzkxWTJoRGIyNTBjbTlzYkdWeUlHbHRjR3hsYldWdWRITWdTVlJ2ZFdOb1EyOXVkSEp2Ykd4bGNpQjdYRzRnSUNBZ2RHOVRkSEpsWVcxbGNrMWxjM05oWjJWelVISnZkbWxrWlhJNklGTjBjbVZoYlUxbGMzTmhaMlZEYjI1MGNtOXNiR1Z5TzF4dUlDQWdJSFpwWkdWdlJXeGxiV1Z1ZEZCeWIzWnBaR1Z5T2lCV2FXUmxiMUJzWVhsbGNqdGNiaUFnSUNCamIyOXlaR2x1WVhSbFEyOXVkbVZ5ZEdWeU9pQkRiMjl5WkdsdVlYUmxRMjl1ZG1WeWRHVnlPMXh1SUNBZ0lIWnBaR1Z2Uld4bGJXVnVkRkJoY21WdWREb2dTRlJOVEZacFpHVnZSV3hsYldWdWREdGNiaUFnSUNCbWFXNW5aWEp6SUQwZ1d6a3NJRGdzSURjc0lEWXNJRFVzSURRc0lETXNJRElzSURFc0lEQmRPMXh1SUNBZ0lHWnBibWRsY2tsa2N5QTlJRzVsZHlCTllYQW9LVHRjYmlBZ0lDQnRZWGhDZVhSbFZtRnNkV1VnUFNBeU5UVTdYRzVjYmlBZ0lDQXZMeUJWZEdsc2FYUjVJR1p2Y2lCclpXVndhVzVuSUhSeVlXTnJJRzltSUdWMlpXNTBJR2hoYm1Sc1pYSnpJR0Z1WkNCMWJuSmxaMmx6ZEdWeWFXNW5JSFJvWlcxY2JpQWdJQ0J3Y21sMllYUmxJSFJ2ZFdOb1JYWmxiblJNYVhOMFpXNWxjbFJ5WVdOclpYSWdQU0J1WlhjZ1JYWmxiblJNYVhOMFpXNWxjbFJ5WVdOclpYSW9LVHRjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVCd1lYSmhiU0IwYjFOMGNtVmhiV1Z5VFdWemMyRm5aWE5RY205MmFXUmxjaUF0SUZOMGNtVmhiU0J0WlhOellXZGxJR2x1YzNSaGJtTmxYRzRnSUNBZ0lDb2dRSEJoY21GdElIWnBaR1Z2Uld4bGJXVnVkRkJ5YjNacFpHVnlJQzBnVm1sa1pXOGdVR3hoZVdWeUlHbHVjM1JoYm1ObFhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUdOdmIzSmthVzVoZEdWRGIyNTJaWEowWlhJZ0xTQkJJR052YjNKa2FXNWhkR1VnWTI5dWRtVnlkR1Z5SUdsdWMzUmhibU5sWEc0Z0lDQWdJQ292WEc0Z0lDQWdZMjl1YzNSeWRXTjBiM0lvWEc0Z0lDQWdJQ0FnSUhSdlUzUnlaV0Z0WlhKTlpYTnpZV2RsYzFCeWIzWnBaR1Z5T2lCVGRISmxZVzFOWlhOellXZGxRMjl1ZEhKdmJHeGxjaXhjYmlBZ0lDQWdJQ0FnZG1sa1pXOUZiR1Z0Wlc1MFVISnZkbWxrWlhJNklGWnBaR1Z2VUd4aGVXVnlMRnh1SUNBZ0lDQWdJQ0JqYjI5eVpHbHVZWFJsUTI5dWRtVnlkR1Z5T2lCRGIyOXlaR2x1WVhSbFEyOXVkbVZ5ZEdWeVhHNGdJQ0FnS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11ZEc5VGRISmxZVzFsY2sxbGMzTmhaMlZ6VUhKdmRtbGtaWElnUFNCMGIxTjBjbVZoYldWeVRXVnpjMkZuWlhOUWNtOTJhV1JsY2p0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTUyYVdSbGIwVnNaVzFsYm5SUWNtOTJhV1JsY2lBOUlIWnBaR1Z2Uld4bGJXVnVkRkJ5YjNacFpHVnlPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtTnZiM0prYVc1aGRHVkRiMjUyWlhKMFpYSWdQU0JqYjI5eVpHbHVZWFJsUTI5dWRtVnlkR1Z5TzF4dUlDQWdJQ0FnSUNCMGFHbHpMblpwWkdWdlJXeGxiV1Z1ZEZCaGNtVnVkQ0E5SUhacFpHVnZSV3hsYldWdWRGQnliM1pwWkdWeUxtZGxkRlpwWkdWdlJXeGxiV1Z1ZENncE8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCdmJuUnZkV05vYzNSaGNuUWdQU0FvWlhZNklGUnZkV05vUlhabGJuUXBJRDArWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG05dVZHOTFZMmhUZEdGeWRDaGxkaWs3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJRzl1ZEc5MVkyaGxibVFnUFNBb1pYWTZJRlJ2ZFdOb1JYWmxiblFwSUQwK1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtOXVWRzkxWTJoRmJtUW9aWFlwTzF4dUlDQWdJQ0FnSUNCamIyNXpkQ0J2Ym5SdmRXTm9iVzkyWlNBOUlDaGxkam9nVkc5MVkyaEZkbVZ1ZENrZ1BUNWNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXViMjVVYjNWamFFMXZkbVVvWlhZcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5acFpHVnZSV3hsYldWdWRGQmhjbVZ1ZEM1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NkMGIzVmphSE4wWVhKMEp5d2diMjUwYjNWamFITjBZWEowTENCN0lIQmhjM05wZG1VNklHWmhiSE5sSUgwcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5acFpHVnZSV3hsYldWdWRGQmhjbVZ1ZEM1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NkMGIzVmphR1Z1WkNjc0lHOXVkRzkxWTJobGJtUXNJSHNnY0dGemMybDJaVG9nWm1Gc2MyVWdmU2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkbWxrWlc5RmJHVnRaVzUwVUdGeVpXNTBMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9KM1J2ZFdOb2JXOTJaU2NzSUc5dWRHOTFZMmh0YjNabExDQjdJSEJoYzNOcGRtVTZJR1poYkhObElIMHBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuUnZkV05vUlhabGJuUk1hWE4wWlc1bGNsUnlZV05yWlhJdVlXUmtWVzV5WldkcGMzUmxja05oYkd4aVlXTnJLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0tDa2dQVDRnZEdocGN5NTJhV1JsYjBWc1pXMWxiblJRWVhKbGJuUXVjbVZ0YjNabFJYWmxiblJNYVhOMFpXNWxjaWduZEc5MVkyaHpkR0Z5ZENjc0lHOXVkRzkxWTJoemRHRnlkQ2xjYmlBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTUwYjNWamFFVjJaVzUwVEdsemRHVnVaWEpVY21GamEyVnlMbUZrWkZWdWNtVm5hWE4wWlhKRFlXeHNZbUZqYXloY2JpQWdJQ0FnSUNBZ0lDQWdJQ2dwSUQwK0lIUm9hWE11ZG1sa1pXOUZiR1Z0Wlc1MFVHRnlaVzUwTG5KbGJXOTJaVVYyWlc1MFRHbHpkR1Z1WlhJb0ozUnZkV05vWlc1a0p5d2diMjUwYjNWamFHVnVaQ2xjYmlBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTUwYjNWamFFVjJaVzUwVEdsemRHVnVaWEpVY21GamEyVnlMbUZrWkZWdWNtVm5hWE4wWlhKRFlXeHNZbUZqYXloY2JpQWdJQ0FnSUNBZ0lDQWdJQ2dwSUQwK0lIUm9hWE11ZG1sa1pXOUZiR1Z0Wlc1MFVHRnlaVzUwTG5KbGJXOTJaVVYyWlc1MFRHbHpkR1Z1WlhJb0ozUnZkV05vYlc5MlpTY3NJRzl1ZEc5MVkyaHRiM1psS1Z4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQk1iMmRuWlhJdVRHOW5LRXh2WjJkbGNpNUhaWFJUZEdGamExUnlZV05sS0Nrc0lDZFViM1ZqYUNCRmRtVnVkSE1nVW1WbmFYTjBaWEpsWkNjc0lEWXBPMXh1WEc0Z0lDQWdJQ0FnSUM4dklHbHpJSFJvYVhNZ2MzUnlhV04wYkhrZ2JtVmpaWE56WVhKNVAxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCd2NtVjJaVzUwVDI1VWIzVmphRTF2ZG1VZ1BTQW9aWFpsYm5RNklGUnZkV05vUlhabGJuUXBJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1YyWlc1MExuQnlaWFpsYm5SRVpXWmhkV3gwS0NrN1hHNGdJQ0FnSUNBZ0lIMDdYRzRnSUNBZ0lDQWdJR1J2WTNWdFpXNTBMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9KM1J2ZFdOb2JXOTJaU2NzSUhCeVpYWmxiblJQYmxSdmRXTm9UVzkyWlN3Z2V5QndZWE56YVhabE9pQm1ZV3h6WlNCOUtUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1MGIzVmphRVYyWlc1MFRHbHpkR1Z1WlhKVWNtRmphMlZ5TG1Ga1pGVnVjbVZuYVhOMFpYSkRZV3hzWW1GamF5aGNiaUFnSUNBZ0lDQWdJQ0FnSUNncElEMCtJR1J2WTNWdFpXNTBMbkpsYlc5MlpVVjJaVzUwVEdsemRHVnVaWElvSjNSdmRXTm9iVzkyWlNjc0lIQnlaWFpsYm5SUGJsUnZkV05vVFc5MlpTbGNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJWYm5KbFoybHpkR1Z5SUdGc2JDQjBiM1ZqYUNCbGRtVnVkSE5jYmlBZ0lDQWdLaTljYmlBZ0lDQjFibkpsWjJsemRHVnlWRzkxWTJoRmRtVnVkSE1vS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11ZEc5MVkyaEZkbVZ1ZEV4cGMzUmxibVZ5VkhKaFkydGxjaTUxYm5KbFoybHpkR1Z5UVd4c0tDazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dVbVZ0WlcxaVpYSWdZU0IwYjNWamFDQmpiMjF0WVc1a1hHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUhSdmRXTm9JQzBnZEdobElIUnZkV05vSUdOdmJXMWhibVJjYmlBZ0lDQWdLaTljYmlBZ0lDQnlaVzFsYldKbGNsUnZkV05vS0hSdmRXTm9PaUJVYjNWamFDa2dlMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQm1hVzVuWlhJZ1BTQjBhR2x6TG1acGJtZGxjbk11Y0c5d0tDazdYRzRnSUNBZ0lDQWdJR2xtSUNobWFXNW5aWElnUFQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1RHOW5aMlZ5TGt4dlp5aGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQk1iMmRuWlhJdVIyVjBVM1JoWTJ0VWNtRmpaU2dwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNkbGVHaGhkWE4wWldRZ2RHOTFZMmdnYVdSbGJuUnBabWxsY25NbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEWmNiaUFnSUNBZ0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdkR2hwY3k1bWFXNW5aWEpKWkhNdWMyVjBLSFJ2ZFdOb0xtbGtaVzUwYVdacFpYSXNJR1pwYm1kbGNpazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dSbTl5WjJWMGN5QmhJSFJ2ZFdOb0lHTnZiVzFoYm1SY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZEc5MVkyZ2dMU0IwYUdVZ2RHOTFZMmdnWTI5dGJXRnVaRnh1SUNBZ0lDQXFMMXh1SUNBZ0lHWnZjbWRsZEZSdmRXTm9LSFJ2ZFdOb09pQlViM1ZqYUNrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG1acGJtZGxjbk11Y0hWemFDaDBhR2x6TG1acGJtZGxja2xrY3k1blpYUW9kRzkxWTJndWFXUmxiblJwWm1sbGNpa3BPMXh1SUNBZ0lDQWdJQ0F2THlCVGIzSjBJR0Z5Y21GNUlHSmhZMnNnYVc1MGJ5QmtaWE5qWlc1a2FXNW5JRzl5WkdWeUxpQlVhR2x6SUcxbFlXNXpJR2xtSUdacGJtZGxjaUFuTVNjZ2QyVnlaU0IwYnlCc2FXWjBJR0ZtZEdWeUlHWnBibWRsY2lBbk1DY3NJSGRsSUhkdmRXeGtJR1Z1YzNWeVpTQjBhR0YwSURBZ2QybHNiQ0JpWlNCMGFHVWdabWx5YzNRZ2FXNWtaWGdnZEc4Z2NHOXdYRzRnSUNBZ0lDQWdJSFJvYVhNdVptbHVaMlZ5Y3k1emIzSjBLR1oxYm1OMGFXOXVJQ2hoTENCaUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWWlBdElHRTdYRzRnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbVpwYm1kbGNrbGtjeTVrWld4bGRHVW9kRzkxWTJndWFXUmxiblJwWm1sbGNpazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dWMmhsYmlCaElIUnZkV05vSUdWMlpXNTBJSE4wWVhKMGMxeHVJQ0FnSUNBcUlFQndZWEpoYlNCMGIzVmphRVYyWlc1MElDMGdkR2hsSUhSdmRXTm9JR1YyWlc1MElHSmxhVzVuSUdsdWRHVnlZMlZ3ZEdWa1hHNGdJQ0FnSUNvdlhHNGdJQ0FnYjI1VWIzVmphRk4wWVhKMEtIUnZkV05vUlhabGJuUTZJRlJ2ZFdOb1JYWmxiblFwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLQ0YwYUdsekxuWnBaR1Z2Uld4bGJXVnVkRkJ5YjNacFpHVnlMbWx6Vm1sa1pXOVNaV0ZrZVNncEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ2RDQTlJREE3SUhRZ1BDQjBiM1ZqYUVWMlpXNTBMbU5vWVc1blpXUlViM1ZqYUdWekxteGxibWQwYURzZ2RDc3JLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5KbGJXVnRZbVZ5Vkc5MVkyZ29kRzkxWTJoRmRtVnVkQzVqYUdGdVoyVmtWRzkxWTJobGMxdDBYU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ1RHOW5aMlZ5TGt4dlp5aE1iMmRuWlhJdVIyVjBVM1JoWTJ0VWNtRmpaU2dwTENBbmRHOTFZMmdnYzNSaGNuUW5MQ0EyS1R0Y2JseHVJQ0FnSUNBZ0lDQjBhR2x6TG1WdGFYUlViM1ZqYUVSaGRHRW9KMVJ2ZFdOb1UzUmhjblFuTENCMGIzVmphRVYyWlc1MExtTm9ZVzVuWldSVWIzVmphR1Z6S1R0Y2JpQWdJQ0FnSUNBZ2RHOTFZMmhGZG1WdWRDNXdjbVYyWlc1MFJHVm1ZWFZzZENncE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGZG9aVzRnWVNCMGIzVmphQ0JsZG1WdWRDQmxibVJ6WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSFJ2ZFdOb1JYWmxiblFnTFNCMGFHVWdkRzkxWTJnZ1pYWmxiblFnWW1WcGJtY2dhVzUwWlhKalpYQjBaV1JjYmlBZ0lDQWdLaTljYmlBZ0lDQnZibFJ2ZFdOb1JXNWtLSFJ2ZFdOb1JYWmxiblE2SUZSdmRXTm9SWFpsYm5RcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0NGMGFHbHpMblpwWkdWdlJXeGxiV1Z1ZEZCeWIzWnBaR1Z5TG1selZtbGtaVzlTWldGa2VTZ3BLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdURzluWjJWeUxreHZaeWhNYjJkblpYSXVSMlYwVTNSaFkydFVjbUZqWlNncExDQW5kRzkxWTJnZ1pXNWtKeXdnTmlrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WlcxcGRGUnZkV05vUkdGMFlTZ25WRzkxWTJoRmJtUW5MQ0IwYjNWamFFVjJaVzUwTG1Ob1lXNW5aV1JVYjNWamFHVnpLVHRjYmlBZ0lDQWdJQ0FnTHk4Z1VtVXRZM2xqYkdVZ2RXNXBjWFZsSUdsa1pXNTBhV1pwWlhKeklIQnlaWFpwYjNWemJIa2dZWE56YVdkdVpXUWdkRzhnWldGamFDQjBiM1ZqYUM1Y2JpQWdJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ2RDQTlJREE3SUhRZ1BDQjBiM1ZqYUVWMlpXNTBMbU5vWVc1blpXUlViM1ZqYUdWekxteGxibWQwYURzZ2RDc3JLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1admNtZGxkRlJ2ZFdOb0tIUnZkV05vUlhabGJuUXVZMmhoYm1kbFpGUnZkV05vWlhOYmRGMHBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhSdmRXTm9SWFpsYm5RdWNISmxkbVZ1ZEVSbFptRjFiSFFvS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCM2FHVnVJR0VnYlc5MmFXNW5JSFJ2ZFdOb0lHVjJaVzUwSUc5alkzVnljMXh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjBiM1ZqYUVWMlpXNTBJQzBnZEdobElIUnZkV05vSUdWMlpXNTBJR0psYVc1bklHbHVkR1Z5WTJWd2RHVmtYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2IyNVViM1ZqYUUxdmRtVW9kRzkxWTJoRmRtVnVkRG9nVkc5MVkyaEZkbVZ1ZENrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvSVhSb2FYTXVkbWxrWlc5RmJHVnRaVzUwVUhKdmRtbGtaWEl1YVhOV2FXUmxiMUpsWVdSNUtDa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQk1iMmRuWlhJdVRHOW5LRXh2WjJkbGNpNUhaWFJUZEdGamExUnlZV05sS0Nrc0lDZDBiM1ZqYUNCdGIzWmxKeXdnTmlrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WlcxcGRGUnZkV05vUkdGMFlTZ25WRzkxWTJoTmIzWmxKeXdnZEc5MVkyaEZkbVZ1ZEM1MGIzVmphR1Z6S1R0Y2JpQWdJQ0FnSUNBZ2RHOTFZMmhGZG1WdWRDNXdjbVYyWlc1MFJHVm1ZWFZzZENncE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdWdGFYUlViM1ZqYUVSaGRHRW9kSGx3WlRvZ2MzUnlhVzVuTENCMGIzVmphR1Z6T2lCVWIzVmphRXhwYzNRcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0NGMGFHbHpMblpwWkdWdlJXeGxiV1Z1ZEZCeWIzWnBaR1Z5TG1selZtbGtaVzlTWldGa2VTZ3BLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2RtbGtaVzlGYkdWdFpXNTBVR0Z5Wlc1MElEMWNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVkbWxrWlc5RmJHVnRaVzUwVUhKdmRtbGtaWEl1WjJWMFZtbGtaVzlRWVhKbGJuUkZiR1Z0Wlc1MEtDazdYRzRnSUNBZ0lDQWdJR052Ym5OMElIUnZVM1J5WldGdFpYSklZVzVrYkdWeWN5QTlYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMblJ2VTNSeVpXRnRaWEpOWlhOellXZGxjMUJ5YjNacFpHVnlMblJ2VTNSeVpXRnRaWEpJWVc1a2JHVnljenRjYmx4dUlDQWdJQ0FnSUNCbWIzSWdLR3hsZENCMElEMGdNRHNnZENBOElIUnZkV05vWlhNdWJHVnVaM1JvT3lCMEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUc1MWJWUnZkV05vWlhNZ1BTQXhPeUF2THlCMGFHVWdiblZ0WW1WeUlHOW1JSFJ2ZFdOb1pYTWdkRzhnWW1VZ2MyVnVkQ0IwYUdseklHMWxjM05oWjJWY2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElIUnZkV05vSUQwZ2RHOTFZMmhsYzF0MFhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJSGdnUFNCMGIzVmphQzVqYkdsbGJuUllJQzBnZG1sa1pXOUZiR1Z0Wlc1MFVHRnlaVzUwTG05bVpuTmxkRXhsWm5RN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQjVJRDBnZEc5MVkyZ3VZMnhwWlc1MFdTQXRJSFpwWkdWdlJXeGxiV1Z1ZEZCaGNtVnVkQzV2Wm1aelpYUlViM0E3WEc0Z0lDQWdJQ0FnSUNBZ0lDQk1iMmRuWlhJdVRHOW5LRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRXh2WjJkbGNpNUhaWFJUZEdGamExUnlZV05sS0Nrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lFWWtlM1JvYVhNdVptbHVaMlZ5U1dSekxtZGxkQ2gwYjNWamFDNXBaR1Z1ZEdsbWFXVnlLWDA5S0NSN2VIMHNJQ1I3ZVgwcFlDeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQTJYRzRnSUNBZ0lDQWdJQ0FnSUNBcE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0JqYjI5eVpDQTlJSFJvYVhNdVkyOXZjbVJwYm1GMFpVTnZiblpsY25SbGNpNXViM0p0WVd4cGVtVkJibVJSZFdGdWRHbDZaVlZ1YzJsbmJtVmtLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSGdzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZVZ4dUlDQWdJQ0FnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lITjNhWFJqYUNBb2RIbHdaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdKMVJ2ZFdOb1UzUmhjblFuT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBiMU4wY21WaGJXVnlTR0Z1Wkd4bGNuTXVaMlYwS0NkVWIzVmphRk4wWVhKMEp5a29XMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiblZ0Vkc5MVkyaGxjeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052YjNKa0xuZ3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjl5WkM1NUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVtYVc1blpYSkpaSE11WjJWMEtIUnZkV05vTG1sa1pXNTBhV1pwWlhJcExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV0WVhoQ2VYUmxWbUZzZFdVZ0tpQjBiM1ZqYUM1bWIzSmpaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052YjNKa0xtbHVVbUZ1WjJVZ1B5QXhJRG9nTUZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmRLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQW5WRzkxWTJoRmJtUW5PbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGIxTjBjbVZoYldWeVNHRnVaR3hsY25NdVoyVjBLQ2RVYjNWamFFVnVaQ2NwS0Z0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc1MWJWUnZkV05vWlhNc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyOXlaQzU0TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dmNtUXVlU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVptbHVaMlZ5U1dSekxtZGxkQ2gwYjNWamFDNXBaR1Z1ZEdsbWFXVnlLU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWJXRjRRbmwwWlZaaGJIVmxJQ29nZEc5MVkyZ3VabTl5WTJVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyOXlaQzVwYmxKaGJtZGxJRDhnTVNBNklEQmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWFNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnSjFSdmRXTm9UVzkyWlNjNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJ2VTNSeVpXRnRaWEpJWVc1a2JHVnljeTVuWlhRb0oxUnZkV05vVFc5MlpTY3BLRnRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzUxYlZSdmRXTm9aWE1zWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI5eVpDNTRMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl2Y21RdWVTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Wm1sdVoyVnlTV1J6TG1kbGRDaDBiM1ZqYUM1cFpHVnVkR2xtYVdWeUtTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YldGNFFubDBaVlpoYkhWbElDb2dkRzkxWTJndVptOXlZMlVzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI5eVpDNXBibEpoYm1kbElEOGdNU0E2SURCY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1ZlZ4dUlpd2lMeThnUTI5d2VYSnBaMmgwSUVWd2FXTWdSMkZ0WlhNc0lFbHVZeTRnUVd4c0lGSnBaMmgwY3lCU1pYTmxjblpsWkM1Y2JseHVhVzF3YjNKMElIc2dVM1J5WldGdFRXVnpjMkZuWlVOdmJuUnliMnhzWlhJZ2ZTQm1jbTl0SUNjdUxpOVZaVWx1YzNSaGJtTmxUV1Z6YzJGblpTOVRkSEpsWVcxTlpYTnpZV2RsUTI5dWRISnZiR3hsY2ljN1hHNXBiWEJ2Y25RZ2V5QkRiMjUwY205c2JHVnlJSDBnWm5KdmJTQW5MaTlIWVcxbGNHRmtWSGx3WlhNbk8xeHVhVzF3YjNKMElIc2dWMlZpV0ZKVmRHbHNjeUI5SUdaeWIyMGdKeTR1TDFWMGFXd3ZWMlZpV0ZKVmRHbHNjeWM3WEc1Y2JpOHFLbHh1SUNvZ1ZHaGxJR05zWVhOeklIUm9ZWFFnYUdGdVpHeGxjeUIwYUdVZ1puVnVZM1JwYjI1aGJHbDBlU0J2WmlCNGNtZGhiV1Z3WVdSeklHRnVaQ0JqYjI1MGNtOXNiR1Z5YzF4dUlDb3ZYRzVsZUhCdmNuUWdZMnhoYzNNZ1dGSkhZVzFsY0dGa1EyOXVkSEp2Ykd4bGNpQjdYRzRnSUNBZ1kyOXVkSEp2Ykd4bGNuTTZJRUZ5Y21GNVBFTnZiblJ5YjJ4c1pYSStPMXh1SUNBZ0lIUnZVM1J5WldGdFpYSk5aWE56WVdkbGMxQnliM1pwWkdWeU9pQlRkSEpsWVcxTlpYTnpZV2RsUTI5dWRISnZiR3hsY2p0Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFQndZWEpoYlNCMGIxTjBjbVZoYldWeVRXVnpjMkZuWlhOUWNtOTJhV1JsY2lBdElGTjBjbVZoYlNCdFpYTnpZV2RsSUdsdWMzUmhibU5sWEc0Z0lDQWdJQ292WEc0Z0lDQWdZMjl1YzNSeWRXTjBiM0lvZEc5VGRISmxZVzFsY2sxbGMzTmhaMlZ6VUhKdmRtbGtaWEk2SUZOMGNtVmhiVTFsYzNOaFoyVkRiMjUwY205c2JHVnlLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkRzlUZEhKbFlXMWxjazFsYzNOaFoyVnpVSEp2ZG1sa1pYSWdQU0IwYjFOMGNtVmhiV1Z5VFdWemMyRm5aWE5RY205MmFXUmxjanRjYmlBZ0lDQWdJQ0FnZEdocGN5NWpiMjUwY205c2JHVnljeUE5SUZ0ZE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhWd1pHRjBaVk4wWVhSMWN5aGNiaUFnSUNBZ0lDQWdjMjkxY21ObE9pQllVa2x1Y0hWMFUyOTFjbU5sTEZ4dUlDQWdJQ0FnSUNCbWNtRnRaVG9nV0ZKR2NtRnRaU3hjYmlBZ0lDQWdJQ0FnY21WbVUzQmhZMlU2SUZoU1VtVm1aWEpsYm1ObFUzQmhZMlZjYmlBZ0lDQXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tITnZkWEpqWlM1bllXMWxjR0ZrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQm5ZVzFsY0dGa1VHOXpaU0E5SUdaeVlXMWxMbWRsZEZCdmMyVW9jMjkxY21ObExtZHlhWEJUY0dGalpTd2djbVZtVTNCaFkyVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ0ZuWVcxbGNHRmtVRzl6WlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhONWMzUmxiU0E5SURBN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2MyOTFjbU5sTG5CeWIyWnBiR1Z6TG1sdVkyeDFaR1Z6S0Nkb2RHTXRkbWwyWlNjcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjM2x6ZEdWdElEMGdNVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppQW9jMjkxY21ObExuQnliMlpwYkdWekxtbHVZMngxWkdWektDZHZZM1ZzZFhNdGRHOTFZMmduS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITjVjM1JsYlNBOUlESTdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCVVQwUlBJQ2gzYVd4c2FXRnRMbUpsYkdOb1pYSXBPaUJCWkdRZ2IzUm9aWElnY0hKdlptbHNaWE1nS0ZGMVpYTjBMQ0JOYVdOeWIzTnZablFnVFdsNFpXUWdVbVZoYkdsMGVTd2daWFJqS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1MGIxTjBjbVZoYldWeVRXVnpjMkZuWlhOUWNtOTJhV1JsY2k1MGIxTjBjbVZoYldWeVNHRnVaR3hsY25NdVoyVjBLQ2RZVWxONWMzUmxiU2NwS0Z0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemVYTjBaVzFjYmlBZ0lDQWdJQ0FnSUNBZ0lGMHBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJFWldaaGRXeDBPaUJCYm5sSVlXNWtJQ2d5S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdoaGJtUmxaRzVsYzNNZ1BTQXlPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2MzZHBkR05vSUNoemIzVnlZMlV1YUdGdVpHVmtibVZ6Y3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnSjJ4bFpuUW5PbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCb1lXNWtaV1J1WlhOeklEMGdNRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQW5jbWxuYUhRbk9seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JvWVc1a1pXUnVaWE56SUQwZ01UdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklGTmxibVFnWTI5dWRISnZiR3hsY2lCMGNtRnVjMlp2Y20xY2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElHMWhkSEpwZUNBOUlHZGhiV1Z3WVdSUWIzTmxMblJ5WVc1elptOXliUzV0WVhSeWFYZzdYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0J0WVhRZ1BTQmJYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHWnZjaUFvYkdWMElHa2dQU0F3T3lCcElEd2dNVFk3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzFoZEZ0cFhTQTlJRzVsZHlCR2JHOWhkRE15UVhKeVlYa29XMjFoZEhKcGVGdHBYVjBwV3pCZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCd2NtVjBkR2xsY2kxcFoyNXZjbVZjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11ZEc5VGRISmxZVzFsY2sxbGMzTmhaMlZ6VUhKdmRtbGtaWEl1ZEc5VGRISmxZVzFsY2toaGJtUnNaWEp6TG1kbGRDZ25XRkpEYjI1MGNtOXNiR1Z5VkhKaGJuTm1iM0p0Snlrb1cxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHMWhkRnN3WFN3Z2JXRjBXelJkTENCdFlYUmJPRjBzSUcxaGRGc3hNbDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYldGMFd6RmRMQ0J0WVhSYk5WMHNJRzFoZEZzNVhTd2diV0YwV3pFelhTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnRZWFJiTWwwc0lHMWhkRnMyWFN3Z2JXRjBXekV3WFN3Z2JXRjBXekUwWFN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdFlYUmJNMTBzSUcxaGRGczNYU3dnYldGMFd6RXhYU3dnYldGMFd6RTFYU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JvWVc1a1pXUnVaWE56WEc0Z0lDQWdJQ0FnSUNBZ0lDQmRLVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnU0dGdVpHeGxJR052Ym5SeWIyeHNaWElnWW5WMGRHOXVjeUJoYm1RZ1lYaGxjMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVkyOXVkSEp2Ykd4bGNuTmJhR0Z1WkdWa2JtVnpjMTBnUFQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVkyOXVkSEp2Ykd4bGNuTmJhR0Z1WkdWa2JtVnpjMTBnUFNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJ5WlhaVGRHRjBaVG9nZFc1a1pXWnBibVZrTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpkWEp5Wlc1MFUzUmhkR1U2SUhWdVpHVm1hVzVsWkN4Y2JseDBYSFJjZEZ4MFhIUnBaRG9nZFc1a1pXWnBibVZrWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbU52Ym5SeWIyeHNaWEp6VzJoaGJtUmxaRzVsYzNOZExuQnlaWFpUZEdGMFpTQTlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUZkbFlsaFNWWFJwYkhNdVpHVmxjRU52Y0hsSFlXMWxjR0ZrS0hOdmRYSmpaUzVuWVcxbGNHRmtLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVqYjI1MGNtOXNiR1Z5YzF0b1lXNWtaV1J1WlhOelhTNWpkWEp5Wlc1MFUzUmhkR1VnUFZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUZkbFlsaFNWWFJwYkhNdVpHVmxjRU52Y0hsSFlXMWxjR0ZrS0hOdmRYSmpaUzVuWVcxbGNHRmtLVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ1kyOXVkSEp2Ykd4bGNpQTlJSFJvYVhNdVkyOXVkSEp2Ykd4bGNuTmJhR0Z1WkdWa2JtVnpjMTA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCamRYSnlVM1JoZEdVZ1BTQmpiMjUwY205c2JHVnlMbU4xY25KbGJuUlRkR0YwWlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElIQnlaWFpUZEdGMFpTQTlJR052Ym5SeWIyeHNaWEl1Y0hKbGRsTjBZWFJsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnU1hSbGNtRjBaU0J2ZG1WeUlHSjFkSFJ2Ym5OY2JpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2lBb2JHVjBJR2tnUFNBd095QnBJRHdnWTNWeWNsTjBZWFJsTG1KMWRIUnZibk11YkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCamRYSnlRblYwZEc5dUlEMGdZM1Z5Y2xOMFlYUmxMbUoxZEhSdmJuTmJhVjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdjSEpsZGtKMWRIUnZiaUE5SUhCeVpYWlRkR0YwWlM1aWRYUjBiMjV6VzJsZE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dOMWNuSkNkWFIwYjI0dWNISmxjM05sWkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCd2NtVnpjMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMblJ2VTNSeVpXRnRaWEpOWlhOellXZGxjMUJ5YjNacFpHVnlMblJ2VTNSeVpXRnRaWEpJWVc1a2JHVnljeTVuWlhRb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBbldGSkNkWFIwYjI1UWNtVnpjMlZrSjF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXBLRnRvWVc1a1pXUnVaWE56TENCcExDQndjbVYyUW5WMGRHOXVMbkJ5WlhOelpXUWdQeUF4SURvZ01GMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvSVdOMWNuSkNkWFIwYjI0dWNISmxjM05sWkNBbUppQndjbVYyUW5WMGRHOXVMbkJ5WlhOelpXUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTUwYjFOMGNtVmhiV1Z5VFdWemMyRm5aWE5RY205MmFXUmxjaTUwYjFOMGNtVmhiV1Z5U0dGdVpHeGxjbk11WjJWMEtGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0oxaFNRblYwZEc5dVVtVnNaV0Z6WldRblhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2tvVzJoaGJtUmxaRzVsYzNNc0lHa3NJREJkS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWTNWeWNrSjFkSFJ2Ymk1MGIzVmphR1ZrSUNZbUlDRmpkWEp5UW5WMGRHOXVMbkJ5WlhOelpXUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdjSEpsYzNOY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1MGIxTjBjbVZoYldWeVRXVnpjMkZuWlhOUWNtOTJhV1JsY2k1MGIxTjBjbVZoYldWeVNHRnVaR3hsY25NdVoyVjBLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKMWhTUW5WMGRHOXVVSEpsYzNObFpDZGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS1NoYmFHRnVaR1ZrYm1WemN5d2dNeXdnY0hKbGRrSjFkSFJ2Ymk1MGIzVmphR1ZrSUQ4Z01TQTZJREJkS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tDRmpkWEp5UW5WMGRHOXVMblJ2ZFdOb1pXUWdKaVlnY0hKbGRrSjFkSFJ2Ymk1MGIzVmphR1ZrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWRHOVRkSEpsWVcxbGNrMWxjM05oWjJWelVISnZkbWxrWlhJdWRHOVRkSEpsWVcxbGNraGhibVJzWlhKekxtZGxkQ2hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2RZVWtKMWRIUnZibEpsYkdWaGMyVmtKMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBcEtGdG9ZVzVrWldSdVpYTnpMQ0F6TENBd1hTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QkpkR1Z5WVhSbElHOTJaWElnWjJGdFpYQmhaQ0JoZUdWelhHNGdJQ0FnSUNBZ0lDQWdJQ0JtYjNJZ0tHeGxkQ0JwSUQwZ01Ec2dhU0E4SUdOMWNuSlRkR0YwWlM1aGVHVnpMbXhsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTUwYjFOMGNtVmhiV1Z5VFdWemMyRm5aWE5RY205MmFXUmxjaTUwYjFOMGNtVmhiV1Z5U0dGdVpHeGxjbk11WjJWMEtGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuV0ZKQmJtRnNiMmNuWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS1NoYmFHRnVaR1ZrYm1WemN5d2dhU3dnWTNWeWNsTjBZWFJsTG1GNFpYTmJhVjFkS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1amIyNTBjbTlzYkdWeWMxdG9ZVzVrWldSdVpYTnpYUzV3Y21WMlUzUmhkR1VnUFNCamRYSnlVM1JoZEdVN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNTlYRzRpTENJdkx5QkRiM0I1Y21sbmFIUWdSWEJwWXlCSFlXMWxjeXdnU1c1akxpQkJiR3dnVW1sbmFIUnpJRkpsYzJWeWRtVmtMbHh1WEc1bGVIQnZjblFnWTJ4aGMzTWdURzluWjJWeUlIdGNiaUFnSUNCemRHRjBhV01nZG1WeVltOXpaVXh2WjB4bGRtVnNJRDBnTlR0Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFTmhjSFIxY21WeklIUm9aU0J6ZEdGamF5QmhibVFnY21WMGRYSnVjeUJwZEZ4dUlDQWdJQ0FxSUVCeVpYUjFjbTV6SUhSb1pTQmpkWEp5Wlc1MElITjBZV05yWEc0Z0lDQWdJQ292WEc0Z0lDQWdjM1JoZEdsaklFZGxkRk4wWVdOclZISmhZMlVvS1NCN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUdWeWNtOXlJRDBnYm1WM0lFVnljbTl5S0NrN1hHNGdJQ0FnSUNBZ0lHeGxkQ0JtYjNKdFlYUjBaV1JUZEdGamF5QTlJQ2RPYnlCVGRHRmpheUJCZG1GcGJHRmliR1VnWm05eUlIUm9hWE1nWW5KdmQzTmxjaWM3WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdabTl5YldGMElIUm9aU0JsY25KdmNseHVJQ0FnSUNBZ0lDQnBaaUFvWlhKeWIzSXVjM1JoWTJzcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdadmNtMWhkSFJsWkZOMFlXTnJJRDBnWlhKeWIzSXVjM1JoWTJzdWRHOVRkSEpwYm1jb0tTNXlaWEJzWVdObEtDOUZjbkp2Y2k5bkxDQW5KeWs3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1ptOXliV0YwZEdWa1UzUmhZMnM3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVTJWMElIUm9aU0JzYjJjZ2RtVnlZbTl6YVhSNUlHeGxkbVZzWEc0Z0lDQWdJQ292WEc0Z0lDQWdjM1JoZEdsaklGTmxkRXh2WjJkbGNsWmxjbUp2YzJsMGVTaDJaWEppYjNObFRHOW5UR1YyWld3NklHNTFiV0psY2lrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NTJaWEppYjNObFRHOW5UR1YyWld3Z0lUMGdiblZzYkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NTJaWEppYjNObFRHOW5UR1YyWld3Z1BTQjJaWEppYjNObFRHOW5UR1YyWld3N1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlVhR1VnYzNSaGJtUmhjbVFnYkc5bloybHVaeUJ2ZFhSd2RYUmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2MzUmhZMnNnTFNCMGFHVWdjM1JoWTJzZ2RISmhZMlZjYmlBZ0lDQWdLaUJBY0dGeVlXMGdiV1Z6YzJGblpTQXRJSFJvWlNCdFpYTnpZV2RsSUhSdklHSmxJR3h2WjJkbFpGeHVJQ0FnSUNBcUlFQndZWEpoYlNCMlpYSmliM05wZEhrZ0xTQjBhR1VnZG1WeVltOXphWFI1SUd4bGRtVnNYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2MzUmhkR2xqSUV4dlp5aHpkR0ZqYXpvZ2MzUnlhVzVuTENCdFpYTnpZV2RsT2lCemRISnBibWNzSUhabGNtSnZjMmwwZVQ4NklHNTFiV0psY2lrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvZG1WeVltOXphWFI1SUQ0Z2RHaHBjeTUyWlhKaWIzTmxURzluVEdWMlpXd3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJR052Ym5OMElISmxkSFZ5YmxOMGNtbHVaeUE5SUdCTVpYWmxiRG9nVEc5blhGeHVUWE5uT2lBa2UyMWxjM05oWjJWOVhGeHVRMkZzYkdWeU9pQWtlM04wWVdOcmZXQTdYRzRnSUNBZ0lDQWdJR052Ym5OdmJHVXViRzluS0hKbGRIVnlibE4wY21sdVp5azdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dWR2hsSUhOMFlXNWtZWEprSUd4dloyZHBibWNnYjNWMGNIVjBYRzRnSUNBZ0lDb2dRSEJoY21GdElITjBZV05ySUMwZ2RHaGxJSE4wWVdOcklIUnlZV05sWEc0Z0lDQWdJQ29nUUhCaGNtRnRJRzFsYzNOaFoyVWdMU0IwYUdVZ2JXVnpjMkZuWlNCMGJ5QmlaU0JzYjJkblpXUmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2RtVnlZbTl6YVhSNUlDMGdkR2hsSUhabGNtSnZjMmwwZVNCc1pYWmxiRnh1SUNBZ0lDQXFMMXh1SUNBZ0lITjBZWFJwWXlCSmJtWnZLSE4wWVdOck9pQnpkSEpwYm1jc0lHMWxjM05oWjJVNklITjBjbWx1Wnl3Z2RtVnlZbTl6YVhSNVB6b2diblZ0WW1WeUtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoMlpYSmliM05wZEhrZ1BpQjBhR2x6TG5abGNtSnZjMlZNYjJkTVpYWmxiQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdjbVYwZFhKdVUzUnlhVzVuSUQwZ1lFeGxkbVZzT2lCSmJtWnZYRnh1VFhObk9pQWtlMjFsYzNOaFoyVjlZRHRjYmlBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVwYm1adktISmxkSFZ5YmxOMGNtbHVaeWs3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVkdobElITjBZVzVrWVhKa0lHeHZaMmRwYm1jZ2IzVjBjSFYwWEc0Z0lDQWdJQ29nUUhCaGNtRnRJSE4wWVdOcklDMGdkR2hsSUhOMFlXTnJJSFJ5WVdObFhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUcxbGMzTmhaMlVnTFNCMGFHVWdiV1Z6YzJGblpTQjBieUJpWlNCc2IyZG5aV1JjYmlBZ0lDQWdLaTljYmlBZ0lDQnpkR0YwYVdNZ1JYSnliM0lvYzNSaFkyczZJSE4wY21sdVp5d2diV1Z6YzJGblpUb2djM1J5YVc1bktTQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElISmxkSFZ5YmxOMGNtbHVaeUE5SUdCTVpYWmxiRG9nUlhKeWIzSmNYRzVOYzJjNklDUjdiV1Z6YzJGblpYMWNYRzVEWVd4c1pYSTZJQ1I3YzNSaFkydDlZRHRjYmlBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVsY25KdmNpaHlaWFIxY201VGRISnBibWNwTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZSb1pTQnpkR0Z1WkdGeVpDQnNiMmRuYVc1bklHOTFkSEIxZEZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0J6ZEdGamF5QXRJSFJvWlNCemRHRmpheUIwY21GalpWeHVJQ0FnSUNBcUlFQndZWEpoYlNCdFpYTnpZV2RsSUMwZ2RHaGxJRzFsYzNOaFoyVWdkRzhnWW1VZ2JHOW5aMlZrWEc0Z0lDQWdJQ292WEc0Z0lDQWdjM1JoZEdsaklGZGhjbTVwYm1jb2MzUmhZMnM2SUhOMGNtbHVaeXdnYldWemMyRm5aVG9nYzNSeWFXNW5LU0I3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSEpsZEhWeWJsTjBjbWx1WnlBOUlHQk1aWFpsYkRvZ1YyRnlibWx1WjF4Y2JrTmhiR3hsY2pvZ0pIdHpkR0ZqYTMxY1hHNU5jMmM2SUNSN2JXVnpjMkZuWlgxZ08xeHVJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExuZGhjbTRvY21WMGRYSnVVM1J5YVc1bktUdGNiaUFnSUNCOVhHNTlYRzRpTENJdkx5QkRiM0I1Y21sbmFIUWdSWEJwWXlCSFlXMWxjeXdnU1c1akxpQkJiR3dnVW1sbmFIUnpJRkpsYzJWeWRtVmtMbHh1WEc1cGJYQnZjblFnZTF4dUlDQWdJRWx1WW05MWJtUlNWRkJUZEdGMGN5eGNiaUFnSUNCSmJtSnZkVzVrVm1sa1pXOVRkR0YwY3l4Y2JpQWdJQ0JKYm1KdmRXNWtRWFZrYVc5VGRHRjBjMXh1ZlNCbWNtOXRJQ2N1TDBsdVltOTFibVJTVkZCVGRHRjBjeWM3WEc1cGJYQnZjblFnZXlCSmJtSnZkVzVrVkhKaFkydFRkR0YwY3lCOUlHWnliMjBnSnk0dlNXNWliM1Z1WkZSeVlXTnJVM1JoZEhNbk8xeHVhVzF3YjNKMElIc2dSR0YwWVVOb1lXNXVaV3hUZEdGMGN5QjlJR1p5YjIwZ0p5NHZSR0YwWVVOb1lXNXVaV3hUZEdGMGN5YzdYRzVwYlhCdmNuUWdleUJEWVc1a2FXUmhkR1ZUZEdGMElIMGdabkp2YlNBbkxpOURZVzVrYVdSaGRHVlRkR0YwSnp0Y2JtbHRjRzl5ZENCN0lFTmhibVJwWkdGMFpWQmhhWEpUZEdGMGN5QjlJR1p5YjIwZ0p5NHZRMkZ1Wkdsa1lYUmxVR0ZwY2xOMFlYUnpKenRjYm1sdGNHOXlkQ0I3SUU5MWRFSnZkVzVrVWxSUVUzUmhkSE1zSUU5MWRFSnZkVzVrVm1sa1pXOVRkR0YwY3lCOUlHWnliMjBnSnk0dlQzVjBRbTkxYm1SU1ZGQlRkR0YwY3ljN1hHNXBiWEJ2Y25RZ2V5QlRaWE56YVc5dVUzUmhkSE1nZlNCbWNtOXRJQ2N1TDFObGMzTnBiMjVUZEdGMGN5YzdYRzVwYlhCdmNuUWdleUJUZEhKbFlXMVRkR0YwY3lCOUlHWnliMjBnSnk0dlUzUnlaV0Z0VTNSaGRITW5PMXh1YVcxd2IzSjBJSHNnUTI5a1pXTlRkR0YwY3lCOUlHWnliMjBnSnk0dlEyOWtaV05UZEdGMGN5YzdYRzVwYlhCdmNuUWdleUJNYjJkblpYSWdmU0JtY205dElDY3VMaTlNYjJkblpYSXZURzluWjJWeUp6dGNibHh1THlvcVhHNGdLaUJVYUdVZ1FXZG5jbVZuWVhSbFpDQlRkR0YwY3lCMGFHRjBJR2x6SUdkbGJtVnlZWFJsWkNCbWNtOXRJSFJvWlNCU1ZFTWdVM1JoZEhNZ1VtVndiM0owWEc0Z0tpOWNibHh1ZEhsd1pTQlNWRU5UZEdGMGMxUjVjR1ZRVXlBOUlGSlVRMU4wWVhSelZIbHdaU0I4SUNkemRISmxZVzBuSUh3Z0oyMWxaR2xoTFhCc1lYbHZkWFFuTzF4dVpYaHdiM0owSUdOc1lYTnpJRUZuWjNKbFoyRjBaV1JUZEdGMGN5QjdYRzRnSUNBZ2FXNWliM1Z1WkZacFpHVnZVM1JoZEhNNklFbHVZbTkxYm1SV2FXUmxiMU4wWVhSek8xeHVJQ0FnSUdsdVltOTFibVJCZFdScGIxTjBZWFJ6T2lCSmJtSnZkVzVrUVhWa2FXOVRkR0YwY3p0Y2JpQWdJQ0JzWVhOMFZtbGtaVzlUZEdGMGN6b2dTVzVpYjNWdVpGWnBaR1Z2VTNSaGRITTdYRzRnSUNBZ2JHRnpkRUYxWkdsdlUzUmhkSE02SUVsdVltOTFibVJCZFdScGIxTjBZWFJ6TzF4dUlDQWdJR05oYm1ScFpHRjBaVkJoYVhJNklFTmhibVJwWkdGMFpWQmhhWEpUZEdGMGN6dGNiaUFnSUNCRVlYUmhRMmhoYm01bGJGTjBZWFJ6T2lCRVlYUmhRMmhoYm01bGJGTjBZWFJ6TzF4dUlDQWdJR3h2WTJGc1EyRnVaR2xrWVhSbGN6b2dRWEp5WVhrOFEyRnVaR2xrWVhSbFUzUmhkRDQ3WEc0Z0lDQWdjbVZ0YjNSbFEyRnVaR2xrWVhSbGN6b2dRWEp5WVhrOFEyRnVaR2xrWVhSbFUzUmhkRDQ3WEc0Z0lDQWdiM1YwUW05MWJtUldhV1JsYjFOMFlYUnpPaUJQZFhSQ2IzVnVaRlpwWkdWdlUzUmhkSE03WEc0Z0lDQWdjMlZ6YzJsdmJsTjBZWFJ6T2lCVFpYTnphVzl1VTNSaGRITTdYRzRnSUNBZ2MzUnlaV0Z0VTNSaGRITTZJRk4wY21WaGJWTjBZWFJ6TzF4dUlDQWdJR052WkdWamN6b2dUV0Z3UEhOMGNtbHVaeXdnYzNSeWFXNW5QanRjYmx4dUlDQWdJR052Ym5OMGNuVmpkRzl5S0NrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG1sdVltOTFibVJXYVdSbGIxTjBZWFJ6SUQwZ2JtVjNJRWx1WW05MWJtUldhV1JsYjFOMFlYUnpLQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVhVzVpYjNWdVpFRjFaR2x2VTNSaGRITWdQU0J1WlhjZ1NXNWliM1Z1WkVGMVpHbHZVM1JoZEhNb0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1allXNWthV1JoZEdWUVlXbHlJRDBnYm1WM0lFTmhibVJwWkdGMFpWQmhhWEpUZEdGMGN5Z3BPMXh1SUNBZ0lDQWdJQ0IwYUdsekxrUmhkR0ZEYUdGdWJtVnNVM1JoZEhNZ1BTQnVaWGNnUkdGMFlVTm9ZVzV1Wld4VGRHRjBjeWdwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbTkxZEVKdmRXNWtWbWxrWlc5VGRHRjBjeUE5SUc1bGR5QlBkWFJDYjNWdVpGWnBaR1Z2VTNSaGRITW9LVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXpaWE56YVc5dVUzUmhkSE1nUFNCdVpYY2dVMlZ6YzJsdmJsTjBZWFJ6S0NrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YzNSeVpXRnRVM1JoZEhNZ1BTQnVaWGNnVTNSeVpXRnRVM1JoZEhNb0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1amIyUmxZM01nUFNCdVpYY2dUV0Z3UEhOMGNtbHVaeXdnYzNSeWFXNW5QaWdwTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVkaGRHaGxjaUJoYkd3Z2RHaGxJR2x1Wm05eWJXRjBhVzl1SUdaeWIyMGdkR2hsSUZKVVF5QlFaV1Z5SUVOdmJtNWxZM1JwYjI0Z1VtVndiM0owWEc0Z0lDQWdJQ29nUUhCaGNtRnRJSEowWTFOMFlYUnpVbVZ3YjNKMElDMGdVbFJESUZOMFlYUnpJRkpsY0c5eWRGeHVJQ0FnSUNBcUwxeHVJQ0FnSUhCeWIyTmxjM05UZEdGMGN5aHlkR05UZEdGMGMxSmxjRzl5ZERvZ1VsUkRVM1JoZEhOU1pYQnZjblFwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVzYjJOaGJFTmhibVJwWkdGMFpYTWdQU0J1WlhjZ1FYSnlZWGs4UTJGdVpHbGtZWFJsVTNSaGRENG9LVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXlaVzF2ZEdWRFlXNWthV1JoZEdWeklEMGdibVYzSUVGeWNtRjVQRU5oYm1ScFpHRjBaVk4wWVhRK0tDazdYRzVjYmlBZ0lDQWdJQ0FnY25SalUzUmhkSE5TWlhCdmNuUXVabTl5UldGamFDZ29jM1JoZENrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnZEhsd1pUb2dVbFJEVTNSaGRITlVlWEJsVUZNZ1BTQnpkR0YwTG5SNWNHVTdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lITjNhWFJqYUNBb2RIbHdaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdKMk5oYm1ScFpHRjBaUzF3WVdseUp6cGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NW9ZVzVrYkdWRFlXNWthV1JoZEdWUVlXbHlLSE4wWVhRcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUNkalpYSjBhV1pwWTJGMFpTYzZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ0oyTnZaR1ZqSnpwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1b1lXNWtiR1ZEYjJSbFl5aHpkR0YwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0FuWkdGMFlTMWphR0Z1Ym1Wc0p6cGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NW9ZVzVrYkdWRVlYUmhRMmhoYm01bGJDaHpkR0YwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0FuYVc1aWIzVnVaQzF5ZEhBbk9seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtaGhibVJzWlVsdVFtOTFibVJTVkZBb2MzUmhkQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdKMnh2WTJGc0xXTmhibVJwWkdGMFpTYzZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVhR0Z1Wkd4bFRHOWpZV3hEWVc1a2FXUmhkR1VvYzNSaGRDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ0oyMWxaR2xoTFhOdmRYSmpaU2M2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdKMjFsWkdsaExYQnNZWGx2ZFhRbk9seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUNkdmRYUmliM1Z1WkMxeWRIQW5PbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElDZHdaV1Z5TFdOdmJtNWxZM1JwYjI0bk9seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUNkeVpXMXZkR1V0WTJGdVpHbGtZWFJsSnpwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1b1lXNWtiR1ZTWlcxdmRHVkRZVzVrYVdSaGRHVW9jM1JoZENrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnSjNKbGJXOTBaUzFwYm1KdmRXNWtMWEowY0NjNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnSjNKbGJXOTBaUzF2ZFhSaWIzVnVaQzF5ZEhBbk9seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtaGhibVJzWlZKbGJXOTBaVTkxZEVKdmRXNWtLSE4wWVhRcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUNkMGNtRmpheWM2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YUdGdVpHeGxWSEpoWTJzb2MzUmhkQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdKM1J5WVc1emNHOXlkQ2M2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdKM04wY21WaGJTYzZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVhR0Z1Wkd4bFUzUnlaV0Z0S0hOMFlYUXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrWldaaGRXeDBPbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCTWIyZG5aWEl1UlhKeWIzSW9URzluWjJWeUxrZGxkRk4wWVdOclZISmhZMlVvS1N3Z0ozVnVhR0Z1Wkd4bFpDQlRkR0YwSUZSNWNHVW5LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1RHOW5aMlZ5TGt4dlp5aE1iMmRuWlhJdVIyVjBVM1JoWTJ0VWNtRmpaU2dwTENCemRHRjBLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZCeWIyTmxjM01nYzNSeVpXRnRJSE4wWVhSeklHUmhkR0VnWm5KdmJTQjNaV0p5ZEdOY2JpQWdJQ0FnS2x4dUlDQWdJQ0FxSUVCd1lYSmhiU0J6ZEdGMElDMGdkR2hsSUhOMFlYUnpJR052YldsdVp5QnBiaUJtY205dElIZGxZbkowWTF4dUlDQWdJQ0FxTDF4dUlDQWdJR2hoYm1Sc1pWTjBjbVZoYlNoemRHRjBPaUJUZEhKbFlXMVRkR0YwY3lrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG5OMGNtVmhiVk4wWVhSeklEMGdjM1JoZER0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCUWNtOWpaWE56SUhSb1pTQkpZMlVnUTJGdVpHbGtZWFJsSUZCaGFYSWdSR0YwWVZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0J6ZEdGMElDMGdkR2hsSUhOMFlYUnpJR052YldsdVp5QnBiaUJtY205dElHbGpaU0JqWVc1a2FXUmhkR1Z6WEc0Z0lDQWdJQ292WEc0Z0lDQWdhR0Z1Wkd4bFEyRnVaR2xrWVhSbFVHRnBjaWh6ZEdGME9pQkRZVzVrYVdSaGRHVlFZV2x5VTNSaGRITXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWpZVzVrYVdSaGRHVlFZV2x5TG1KNWRHVnpVbVZqWldsMlpXUWdQU0J6ZEdGMExtSjVkR1Z6VW1WalpXbDJaV1E3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZMkZ1Wkdsa1lYUmxVR0ZwY2k1aWVYUmxjMU5sYm5RZ1BTQnpkR0YwTG1KNWRHVnpVMlZ1ZER0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVqWVc1a2FXUmhkR1ZRWVdseUxteHZZMkZzUTJGdVpHbGtZWFJsU1dRZ1BTQnpkR0YwTG14dlkyRnNRMkZ1Wkdsa1lYUmxTV1E3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZMkZ1Wkdsa1lYUmxVR0ZwY2k1eVpXMXZkR1ZEWVc1a2FXUmhkR1ZKWkNBOUlITjBZWFF1Y21WdGIzUmxRMkZ1Wkdsa1lYUmxTV1E3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZMkZ1Wkdsa1lYUmxVR0ZwY2k1dWIyMXBibUYwWldRZ1BTQnpkR0YwTG01dmJXbHVZWFJsWkR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVqWVc1a2FXUmhkR1ZRWVdseUxuSmxZV1JoWW14bElEMGdjM1JoZEM1eVpXRmtZV0pzWlR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVqWVc1a2FXUmhkR1ZRWVdseUxuTmxiR1ZqZEdWa0lEMGdjM1JoZEM1elpXeGxZM1JsWkR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVqWVc1a2FXUmhkR1ZRWVdseUxuZHlhWFJoWW14bElEMGdjM1JoZEM1M2NtbDBZV0pzWlR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVqWVc1a2FXUmhkR1ZRWVdseUxuTjBZWFJsSUQwZ2MzUmhkQzV6ZEdGMFpUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1allXNWthV1JoZEdWUVlXbHlMbU4xY25KbGJuUlNiM1Z1WkZSeWFYQlVhVzFsSUQwZ2MzUmhkQzVqZFhKeVpXNTBVbTkxYm1SVWNtbHdWR2x0WlR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCUWNtOWpaWE56SUhSb1pTQkVZWFJoSUVOb1lXNXVaV3dnUkdGMFlWeHVJQ0FnSUNBcUlFQndZWEpoYlNCemRHRjBJQzBnZEdobElITjBZWFJ6SUdOdmJXbHVaeUJwYmlCbWNtOXRJSFJvWlNCa1lYUmhJR05vWVc1dVpXeGNiaUFnSUNBZ0tpOWNiaUFnSUNCb1lXNWtiR1ZFWVhSaFEyaGhibTVsYkNoemRHRjBPaUJFWVhSaFEyaGhibTVsYkZOMFlYUnpLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVSR0YwWVVOb1lXNXVaV3hUZEdGMGN5NWllWFJsYzFKbFkyVnBkbVZrSUQwZ2MzUmhkQzVpZVhSbGMxSmxZMlZwZG1Wa08xeHVJQ0FnSUNBZ0lDQjBhR2x6TGtSaGRHRkRhR0Z1Ym1Wc1UzUmhkSE11WW5sMFpYTlRaVzUwSUQwZ2MzUmhkQzVpZVhSbGMxTmxiblE3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVSR0YwWVVOb1lXNXVaV3hUZEdGMGN5NWtZWFJoUTJoaGJtNWxiRWxrWlc1MGFXWnBaWElnUFZ4dUlDQWdJQ0FnSUNBZ0lDQWdjM1JoZEM1a1lYUmhRMmhoYm01bGJFbGtaVzUwYVdacFpYSTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVJHRjBZVU5vWVc1dVpXeFRkR0YwY3k1cFpDQTlJSE4wWVhRdWFXUTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVJHRjBZVU5vWVc1dVpXeFRkR0YwY3k1c1lXSmxiQ0E5SUhOMFlYUXViR0ZpWld3N1hHNGdJQ0FnSUNBZ0lIUm9hWE11UkdGMFlVTm9ZVzV1Wld4VGRHRjBjeTV0WlhOellXZGxjMUpsWTJWcGRtVmtJRDBnYzNSaGRDNXRaWE56WVdkbGMxSmxZMlZwZG1Wa08xeHVJQ0FnSUNBZ0lDQjBhR2x6TGtSaGRHRkRhR0Z1Ym1Wc1UzUmhkSE11YldWemMyRm5aWE5UWlc1MElEMGdjM1JoZEM1dFpYTnpZV2RsYzFObGJuUTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVJHRjBZVU5vWVc1dVpXeFRkR0YwY3k1d2NtOTBiMk52YkNBOUlITjBZWFF1Y0hKdmRHOWpiMnc3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVSR0YwWVVOb1lXNXVaV3hUZEdGMGN5NXpkR0YwWlNBOUlITjBZWFF1YzNSaGRHVTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVJHRjBZVU5vWVc1dVpXeFRkR0YwY3k1MGFXMWxjM1JoYlhBZ1BTQnpkR0YwTG5ScGJXVnpkR0Z0Y0R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCUWNtOWpaWE56SUhSb1pTQk1iMk5oYkNCSlkyVWdRMkZ1Wkdsa1lYUmxJRVJoZEdGY2JpQWdJQ0FnS2lCQWNHRnlZVzBnYzNSaGRDQXRJR3h2WTJGc0lITjBZWFJ6WEc0Z0lDQWdJQ292WEc0Z0lDQWdhR0Z1Wkd4bFRHOWpZV3hEWVc1a2FXUmhkR1VvYzNSaGREb2dRMkZ1Wkdsa1lYUmxVM1JoZENrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCc2IyTmhiRU5oYm1ScFpHRjBaU0E5SUc1bGR5QkRZVzVrYVdSaGRHVlRkR0YwS0NrN1hHNGdJQ0FnSUNBZ0lHeHZZMkZzUTJGdVpHbGtZWFJsTG14aFltVnNJRDBnSjJ4dlkyRnNMV05oYm1ScFpHRjBaU2M3WEc0Z0lDQWdJQ0FnSUd4dlkyRnNRMkZ1Wkdsa1lYUmxMbUZrWkhKbGMzTWdQU0J6ZEdGMExtRmtaSEpsYzNNN1hHNGdJQ0FnSUNBZ0lHeHZZMkZzUTJGdVpHbGtZWFJsTG5CdmNuUWdQU0J6ZEdGMExuQnZjblE3WEc0Z0lDQWdJQ0FnSUd4dlkyRnNRMkZ1Wkdsa1lYUmxMbkJ5YjNSdlkyOXNJRDBnYzNSaGRDNXdjbTkwYjJOdmJEdGNiaUFnSUNBZ0lDQWdiRzlqWVd4RFlXNWthV1JoZEdVdVkyRnVaR2xrWVhSbFZIbHdaU0E5SUhOMFlYUXVZMkZ1Wkdsa1lYUmxWSGx3WlR0Y2JpQWdJQ0FnSUNBZ2JHOWpZV3hEWVc1a2FXUmhkR1V1YVdRZ1BTQnpkR0YwTG1sa08xeHVJQ0FnSUNBZ0lDQjBhR2x6TG14dlkyRnNRMkZ1Wkdsa1lYUmxjeTV3ZFhOb0tHeHZZMkZzUTJGdVpHbGtZWFJsS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCUWNtOWpaWE56SUhSb1pTQlNaVzF2ZEdVZ1NXTmxJRU5oYm1ScFpHRjBaU0JFWVhSaFhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUhOMFlYUWdMU0JwWTJVZ1kyRnVaR2xrWVhSbElITjBZWFJ6WEc0Z0lDQWdJQ292WEc0Z0lDQWdhR0Z1Wkd4bFVtVnRiM1JsUTJGdVpHbGtZWFJsS0hOMFlYUTZJRU5oYm1ScFpHRjBaVk4wWVhRcElIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ1VtVnRiM1JsUTJGdVpHbGtZWFJsSUQwZ2JtVjNJRU5oYm1ScFpHRjBaVk4wWVhRb0tUdGNiaUFnSUNBZ0lDQWdVbVZ0YjNSbFEyRnVaR2xrWVhSbExteGhZbVZzSUQwZ0oyeHZZMkZzTFdOaGJtUnBaR0YwWlNjN1hHNGdJQ0FnSUNBZ0lGSmxiVzkwWlVOaGJtUnBaR0YwWlM1aFpHUnlaWE56SUQwZ2MzUmhkQzVoWkdSeVpYTnpPMXh1SUNBZ0lDQWdJQ0JTWlcxdmRHVkRZVzVrYVdSaGRHVXVjRzl5ZENBOUlITjBZWFF1Y0c5eWREdGNiaUFnSUNBZ0lDQWdVbVZ0YjNSbFEyRnVaR2xrWVhSbExuQnliM1J2WTI5c0lEMGdjM1JoZEM1d2NtOTBiMk52YkR0Y2JpQWdJQ0FnSUNBZ1VtVnRiM1JsUTJGdVpHbGtZWFJsTG1sa0lEMGdjM1JoZEM1cFpEdGNiaUFnSUNBZ0lDQWdVbVZ0YjNSbFEyRnVaR2xrWVhSbExtTmhibVJwWkdGMFpWUjVjR1VnUFNCemRHRjBMbU5oYm1ScFpHRjBaVlI1Y0dVN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Y21WdGIzUmxRMkZ1Wkdsa1lYUmxjeTV3ZFhOb0tGSmxiVzkwWlVOaGJtUnBaR0YwWlNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1VISnZZMlZ6Y3lCMGFHVWdTVzVpYjNWdVpDQlNWRkFnUVhWa2FXOGdZVzVrSUZacFpHVnZJRVJoZEdGY2JpQWdJQ0FnS2lCQWNHRnlZVzBnYzNSaGRDQXRJR2x1WW05MWJtUWdjblJ3SUhOMFlYUnpYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2FHRnVaR3hsU1c1Q2IzVnVaRkpVVUNoemRHRjBPaUJKYm1KdmRXNWtVbFJRVTNSaGRITXBJSHRjYmlBZ0lDQWdJQ0FnYzNkcGRHTm9JQ2h6ZEdGMExtdHBibVFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ0ozWnBaR1Z2SnpwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5Qk9aV1ZrSUhSdklHTnZiblpsY25RZ2RHOGdkVzVyYm05M2JpQm1hWEp6ZENCMGJ5QnlaVzF2ZG1VZ1lXNGdaWEp5YjNJZ1lYSnZkVzVrWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1NXNWliM1Z1WkZacFpHVnZVM1JoZEhNZ2FHRjJhVzVuSUhSb1pTQmlhWFJ5WVhSbElHMWxiV0psY2lCM2FHbGphQ0JwYzI0bmRDQm1iM1Z1WkNCdmJseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJSFJvWlNCSmJtSnZkVzVrVWxSUVUzUmhkSE5jYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtbHVZbTkxYm1SV2FXUmxiMU4wWVhSeklEMGdjM1JoZENCaGN5QjFibXR1YjNkdUlHRnpJRWx1WW05MWJtUldhV1JsYjFOMFlYUnpPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11YkdGemRGWnBaR1Z2VTNSaGRITWdJVDBnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWFXNWliM1Z1WkZacFpHVnZVM1JoZEhNdVltbDBjbUYwWlNBOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBb09DQXFYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS0hSb2FYTXVhVzVpYjNWdVpGWnBaR1Z2VTNSaGRITXVZbmwwWlhOU1pXTmxhWFpsWkNBdFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXViR0Z6ZEZacFpHVnZVM1JoZEhNdVlubDBaWE5TWldObGFYWmxaQ2twSUM5Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNoMGFHbHpMbWx1WW05MWJtUldhV1JsYjFOMFlYUnpMblJwYldWemRHRnRjQ0F0WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVzWVhOMFZtbGtaVzlUZEdGMGN5NTBhVzFsYzNSaGJYQXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbWx1WW05MWJtUldhV1JsYjFOMFlYUnpMbUpwZEhKaGRHVWdQU0JOWVhSb0xtWnNiMjl5S0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXBibUp2ZFc1a1ZtbGtaVzlUZEdGMGN5NWlhWFJ5WVhSbFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXViR0Z6ZEZacFpHVnZVM1JoZEhNZ1BTQjdJQzR1TG5Sb2FYTXVhVzVpYjNWdVpGWnBaR1Z2VTNSaGRITWdmVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdKMkYxWkdsdkp6cGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJPWldWa0lIUnZJR052Ym5abGNuUWdkRzhnZFc1cmJtOTNiaUJtYVhKemRDQjBieUJ5WlcxdmRtVWdZVzRnWlhKeWIzSWdZWEp2ZFc1a1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdTVzVpYjNWdVpFRjFaR2x2VTNSaGRITWdhR0YyYVc1bklIUm9aU0JpYVhSeVlYUmxJRzFsYldKbGNpQjNhR2xqYUNCcGMyNG5kQ0JtYjNWdVpDQnZibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUhSb1pTQkpibUp2ZFc1a1VsUlFVM1JoZEhOY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbWx1WW05MWJtUkJkV1JwYjFOMFlYUnpJRDBnYzNSaGRDQmhjeUIxYm10dWIzZHVJR0Z6SUVsdVltOTFibVJCZFdScGIxTjBZWFJ6TzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdWJHRnpkRUYxWkdsdlUzUmhkSE1nSVQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVhVzVpYjNWdVpFRjFaR2x2VTNSaGRITXVZbWwwY21GMFpTQTlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW9PQ0FxWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tIUm9hWE11YVc1aWIzVnVaRUYxWkdsdlUzUmhkSE11WW5sMFpYTlNaV05sYVhabFpDQXRYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YkdGemRFRjFaR2x2VTNSaGRITXVZbmwwWlhOU1pXTmxhWFpsWkNrcElDOWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDaDBhR2x6TG1sdVltOTFibVJCZFdScGIxTjBZWFJ6TG5ScGJXVnpkR0Z0Y0NBdFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1c1lYTjBRWFZrYVc5VGRHRjBjeTUwYVcxbGMzUmhiWEFwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1sdVltOTFibVJCZFdScGIxTjBZWFJ6TG1KcGRISmhkR1VnUFNCTllYUm9MbVpzYjI5eUtGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVwYm1KdmRXNWtRWFZrYVc5VGRHRjBjeTVpYVhSeVlYUmxYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YkdGemRFRjFaR2x2VTNSaGRITWdQU0I3SUM0dUxuUm9hWE11YVc1aWIzVnVaRUYxWkdsdlUzUmhkSE1nZlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJQ0FnSUNBZ0lHUmxabUYxYkhRNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1RHOW5aMlZ5TGt4dlp5aE1iMmRuWlhJdVIyVjBVM1JoWTJ0VWNtRmpaU2dwTENBblMybHVaQ0JwY3lCdWIzUWdhR0Z1Wkd4bFpDY3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dVSEp2WTJWemN5QjBhR1VnYjNWMFltOTFibVFnVWxSUUlFRjFaR2x2SUdGdVpDQldhV1JsYnlCRVlYUmhYRzRnSUNBZ0lDb2dRSEJoY21GdElITjBZWFFnTFNCeVpXMXZkR1VnYjNWMFltOTFibVFnYzNSaGRITmNiaUFnSUNBZ0tpOWNiaUFnSUNCb1lXNWtiR1ZTWlcxdmRHVlBkWFJDYjNWdVpDaHpkR0YwT2lCUGRYUkNiM1Z1WkZKVVVGTjBZWFJ6S1NCN1hHNGdJQ0FnSUNBZ0lITjNhWFJqYUNBb2MzUmhkQzVyYVc1a0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCallYTmxJQ2QyYVdSbGJ5YzZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1dmRYUkNiM1Z1WkZacFpHVnZVM1JoZEhNdVlubDBaWE5UWlc1MElEMGdjM1JoZEM1aWVYUmxjMU5sYm5RN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV2ZFhSQ2IzVnVaRlpwWkdWdlUzUmhkSE11YVdRZ1BTQnpkR0YwTG1sa08xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YjNWMFFtOTFibVJXYVdSbGIxTjBZWFJ6TG14dlkyRnNTV1FnUFNCemRHRjBMbXh2WTJGc1NXUTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1dmRYUkNiM1Z1WkZacFpHVnZVM1JoZEhNdWNHRmphMlYwYzFObGJuUWdQU0J6ZEdGMExuQmhZMnRsZEhOVFpXNTBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWIzVjBRbTkxYm1SV2FXUmxiMU4wWVhSekxuSmxiVzkwWlZScGJXVnpkR0Z0Y0NBOUlITjBZWFF1Y21WdGIzUmxWR2x0WlhOMFlXMXdPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWIzVjBRbTkxYm1SV2FXUmxiMU4wWVhSekxuUnBiV1Z6ZEdGdGNDQTlJSE4wWVhRdWRHbHRaWE4wWVcxd08xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNBbllYVmthVzhuT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQmtaV1poZFd4ME9seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1VISnZZMlZ6Y3lCMGFHVWdTVzVpYjNWdVpDQldhV1JsYnlCVWNtRmpheUJFWVhSaFhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUhOMFlYUWdMU0IyYVdSbGJ5QjBjbUZqYXlCemRHRjBjMXh1SUNBZ0lDQXFMMXh1SUNBZ0lHaGhibVJzWlZSeVlXTnJLSE4wWVhRNklFbHVZbTkxYm1SVWNtRmphMU4wWVhSektTQjdYRzRnSUNBZ0lDQWdJQzh2SUhkbElHOXViSGtnZDJGdWRDQjBieUJsZUhSeVlXTjBJSE4wWVhSeklHWnliMjBnZEdobElIWnBaR1Z2SUhSeVlXTnJYRzRnSUNBZ0lDQWdJR2xtSUNoY2JpQWdJQ0FnSUNBZ0lDQWdJSE4wWVhRdWRIbHdaU0E5UFQwZ0ozUnlZV05ySnlBbUpseHVJQ0FnSUNBZ0lDQWdJQ0FnS0hOMFlYUXVkSEpoWTJ0SlpHVnVkR2xtYVdWeUlEMDlQU0FuZG1sa1pXOWZiR0ZpWld3bklIeDhJSE4wWVhRdWEybHVaQ0E5UFQwZ0ozWnBaR1Z2SnlsY2JpQWdJQ0FnSUNBZ0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbWx1WW05MWJtUldhV1JsYjFOMFlYUnpMbVp5WVcxbGMwUnliM0J3WldRZ1BTQnpkR0YwTG1aeVlXMWxjMFJ5YjNCd1pXUTdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbWx1WW05MWJtUldhV1JsYjFOMFlYUnpMbVp5WVcxbGMxSmxZMlZwZG1Wa0lEMGdjM1JoZEM1bWNtRnRaWE5TWldObGFYWmxaRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YVc1aWIzVnVaRlpwWkdWdlUzUmhkSE11Wm5KaGJXVklaV2xuYUhRZ1BTQnpkR0YwTG1aeVlXMWxTR1ZwWjJoME8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXBibUp2ZFc1a1ZtbGtaVzlUZEdGMGN5NW1jbUZ0WlZkcFpIUm9JRDBnYzNSaGRDNW1jbUZ0WlZkcFpIUm9PMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdhR0Z1Wkd4bFEyOWtaV01vYzNSaGREb2dRMjlrWldOVGRHRjBjeWtnZTF4dUlDQWdJQ0FnSUNCamIyNXpkQ0JqYjJSbFkwbGtJRDBnYzNSaGRDNXBaRHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdZMjlrWldOVWVYQmxJRDBnWUNSN2MzUmhkQzV0YVcxbFZIbHdaVnh1SUNBZ0lDQWdJQ0FnSUNBZ0xuSmxjR3hoWTJVb0ozWnBaR1Z2THljc0lDY25LVnh1SUNBZ0lDQWdJQ0FnSUNBZ0xuSmxjR3hoWTJVb0oyRjFaR2x2THljc0lDY25LWDBrZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjM1JoZEM1elpIQkdiWFJ3VEdsdVpTQS9JR0FnSkh0emRHRjBMbk5rY0VadGRIQk1hVzVsZldBZ09pQW5KMXh1SUNBZ0lDQWdJQ0I5WUR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVqYjJSbFkzTXVjMlYwS0dOdlpHVmpTV1FzSUdOdlpHVmpWSGx3WlNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYUdGdVpHeGxVMlZ6YzJsdmJsTjBZWFJwYzNScFkzTW9YRzRnSUNBZ0lDQWdJSFpwWkdWdlUzUmhjblJVYVcxbE9pQnVkVzFpWlhJc1hHNGdJQ0FnSUNBZ0lHbHVjSFYwUTI5dWRISnZiR3hsY2pvZ1ltOXZiR1ZoYmlCOElHNTFiR3dzWEc0Z0lDQWdJQ0FnSUhacFpHVnZSVzVqYjJSbGNrRjJaMUZRT2lCdWRXMWlaWEpjYmlBZ0lDQXBJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdaR1ZzZEdGVWFXMWxJRDBnUkdGMFpTNXViM2NvS1NBdElIWnBaR1Z2VTNSaGNuUlVhVzFsTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbk5sYzNOcGIyNVRkR0YwY3k1eWRXNVVhVzFsSUQwZ2JtVjNJRVJoZEdVb1pHVnNkR0ZVYVcxbEtWeHVJQ0FnSUNBZ0lDQWdJQ0FnTG5SdlNWTlBVM1J5YVc1bktDbGNiaUFnSUNBZ0lDQWdJQ0FnSUM1emRXSnpkSElvTVRFc0lEZ3BYRzRnSUNBZ0lDQWdJQ0FnSUNBdWRHOVRkSEpwYm1jb0tUdGNibHh1SUNBZ0lDQWdJQ0JqYjI1emRDQmpiMjUwY205c2MxTjBjbVZoYlVsdWNIVjBJRDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHbHVjSFYwUTI5dWRISnZiR3hsY2lBOVBUMGdiblZzYkZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUQ4Z0owNXZkQ0J6Wlc1MElIbGxkQ2RjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E2SUdsdWNIVjBRMjl1ZEhKdmJHeGxjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRDhnSjNSeWRXVW5YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdPaUFuWm1Gc2MyVW5PMXh1SUNBZ0lDQWdJQ0IwYUdsekxuTmxjM05wYjI1VGRHRjBjeTVqYjI1MGNtOXNjMU4wY21WaGJVbHVjSFYwSUQwZ1kyOXVkSEp2YkhOVGRISmxZVzFKYm5CMWREdGNibHh1SUNBZ0lDQWdJQ0IwYUdsekxuTmxjM05wYjI1VGRHRjBjeTUyYVdSbGIwVnVZMjlrWlhKQmRtZFJVQ0E5SUhacFpHVnZSVzVqYjJSbGNrRjJaMUZRTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVOb1pXTnJJR2xtSUdFZ2RtRnNkV1VnWTI5dGFXNW5JR2x1SUdaeWIyMGdiM1Z5SUhOMFlYUnpJR2x6SUdGamRIVmhiR3g1SUdFZ2JuVnRZbVZ5WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSFpoYkhWbElDMGdkR2hsSUc1MWJXSmxjaUIwYnlCaVpTQmphR1ZqYTJWa1hHNGdJQ0FnSUNvdlhHNGdJQ0FnYVhOT2RXMWlaWElvZG1Gc2RXVTZJSFZ1YTI1dmQyNHBPaUJpYjI5c1pXRnVJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFI1Y0dWdlppQjJZV3gxWlNBOVBUMGdKMjUxYldKbGNpY2dKaVlnYVhOR2FXNXBkR1VvZG1Gc2RXVXBPMXh1SUNBZ0lIMWNibjFjYmlJc0lpOHZJRU52Y0hseWFXZG9kQ0JGY0dsaklFZGhiV1Z6TENCSmJtTXVJRUZzYkNCU2FXZG9kSE1nVW1WelpYSjJaV1F1WEc1Y2JpOHFLbHh1SUNvZ1NVTkZJRU5oYm1ScFpHRjBaU0JRWVdseUlGTjBZWFJ6SUdOdmJHeGxZM1JsWkNCbWNtOXRJSFJvWlNCU1ZFTWdVM1JoZEhNZ1VtVndiM0owWEc0Z0tpOWNibVY0Y0c5eWRDQmpiR0Z6Y3lCRFlXNWthV1JoZEdWUVlXbHlVM1JoZEhNZ2UxeHVJQ0FnSUdKNWRHVnpVbVZqWldsMlpXUTZJRzUxYldKbGNqdGNiaUFnSUNCaWVYUmxjMU5sYm5RNklHNTFiV0psY2p0Y2JpQWdJQ0JzYjJOaGJFTmhibVJwWkdGMFpVbGtPaUJ6ZEhKcGJtYzdYRzRnSUNBZ2NtVnRiM1JsUTJGdVpHbGtZWFJsU1dRNklITjBjbWx1Wnp0Y2JpQWdJQ0J1YjIxcGJtRjBaV1E2SUdKdmIyeGxZVzQ3WEc0Z0lDQWdjbVZoWkdGaWJHVTZJR0p2YjJ4bFlXNDdYRzRnSUNBZ2QzSnBkR0ZpYkdVNklHSnZiMnhsWVc0N1hHNGdJQ0FnYzJWc1pXTjBaV1E2SUdKdmIyeGxZVzQ3WEc0Z0lDQWdjM1JoZEdVNklITjBjbWx1Wnp0Y2JpQWdJQ0JqZFhKeVpXNTBVbTkxYm1SVWNtbHdWR2x0WlRvZ2JuVnRZbVZ5TzF4dWZWeHVJaXdpTHk4Z1EyOXdlWEpwWjJoMElFVndhV01nUjJGdFpYTXNJRWx1WXk0Z1FXeHNJRkpwWjJoMGN5QlNaWE5sY25abFpDNWNibHh1THlvcVhHNGdLaUJKUTBVZ1EyRnVaR2xrWVhSbElGTjBZWFFnWTI5c2JHVmpkR1ZrSUdaeWIyMGdkR2hsSUZKVVF5QlRkR0YwY3lCU1pYQnZjblJjYmlBcUwxeHVaWGh3YjNKMElHTnNZWE56SUVOaGJtUnBaR0YwWlZOMFlYUWdlMXh1SUNBZ0lHeGhZbVZzT2lCemRISnBibWM3WEc0Z0lDQWdhV1E2SUhOMGNtbHVaenRjYmlBZ0lDQmhaR1J5WlhOek9pQnpkSEpwYm1jN1hHNGdJQ0FnWTJGdVpHbGtZWFJsVkhsd1pUb2djM1J5YVc1bk8xeHVJQ0FnSUhCdmNuUTZJRzUxYldKbGNqdGNiaUFnSUNCd2NtOTBiMk52YkRvZ0ozUmpjQ2NnZkNBbmRXUndKenRjYm4xY2JpSXNJaTh2SUVOdmNIbHlhV2RvZENCRmNHbGpJRWRoYldWekxDQkpibU11SUVGc2JDQlNhV2RvZEhNZ1VtVnpaWEoyWldRdVhHNWNiaThxS2x4dUlDb2dSR0YwWVNCRGFHRnVibVZzSUZOMFlYUnpJR052Ykd4bFkzUmxaQ0JtY205dElIUm9aU0JTVkVNZ1UzUmhkSE1nVW1Wd2IzSjBYRzRnS2k5Y2JtVjRjRzl5ZENCamJHRnpjeUJFWVhSaFEyaGhibTVsYkZOMFlYUnpJSHRjYmlBZ0lDQmllWFJsYzFKbFkyVnBkbVZrT2lCdWRXMWlaWEk3WEc0Z0lDQWdZbmwwWlhOVFpXNTBPaUJ1ZFcxaVpYSTdYRzRnSUNBZ1pHRjBZVU5vWVc1dVpXeEpaR1Z1ZEdsbWFXVnlPaUJ1ZFcxaVpYSTdYRzRnSUNBZ2FXUTZJSE4wY21sdVp6dGNiaUFnSUNCc1lXSmxiRG9nYzNSeWFXNW5PMXh1SUNBZ0lHMWxjM05oWjJWelVtVmpaV2wyWldRNklHNTFiV0psY2p0Y2JpQWdJQ0J0WlhOellXZGxjMU5sYm5RNklHNTFiV0psY2p0Y2JpQWdJQ0J3Y205MGIyTnZiRG9nYzNSeWFXNW5PMXh1SUNBZ0lITjBZWFJsT2lCemRISnBibWM3WEc0Z0lDQWdkR2x0WlhOMFlXMXdPaUJ1ZFcxaVpYSTdYRzU5WEc0aUxDSXZMeUJEYjNCNWNtbG5hSFFnUlhCcFl5QkhZVzFsY3l3Z1NXNWpMaUJCYkd3Z1VtbG5hSFJ6SUZKbGMyVnlkbVZrTGx4dVhHNHZLaXBjYmlBcUlFbHVZbTkxYm1RZ1FYVmthVzhnVTNSaGRITWdZMjlzYkdWamRHVmtJR1p5YjIwZ2RHaGxJRkpVUXlCVGRHRjBjeUJTWlhCdmNuUmNiaUFxTDF4dVpYaHdiM0owSUdOc1lYTnpJRWx1WW05MWJtUkJkV1JwYjFOMFlYUnpJSHRjYmlBZ0lDQmhkV1JwYjB4bGRtVnNPaUJ1ZFcxaVpYSTdYRzRnSUNBZ1lubDBaWE5TWldObGFYWmxaRG9nYm5WdFltVnlPMXh1SUNBZ0lHTnZaR1ZqU1dRNklITjBjbWx1Wnp0Y2JpQWdJQ0JqYjI1alpXRnNaV1JUWVcxd2JHVnpPaUJ1ZFcxaVpYSTdYRzRnSUNBZ1kyOXVZMlZoYkcxbGJuUkZkbVZ1ZEhNNklHNTFiV0psY2p0Y2JpQWdJQ0JtWldOUVlXTnJaWFJ6UkdselkyRnlaR1ZrT2lCdWRXMWlaWEk3WEc0Z0lDQWdabVZqVUdGamEyVjBjMUpsWTJWcGRtVmtPaUJ1ZFcxaVpYSTdYRzRnSUNBZ2FHVmhaR1Z5UW5sMFpYTlNaV05sYVhabFpEb2diblZ0WW1WeU8xeHVJQ0FnSUdsa09pQnpkSEpwYm1jN1hHNGdJQ0FnYVc1elpYSjBaV1JUWVcxd2JHVnpSbTl5UkdWalpXeGxjbUYwYVc5dU9pQnVkVzFpWlhJN1hHNGdJQ0FnYW1sMGRHVnlPaUJ1ZFcxaVpYSTdYRzRnSUNBZ2FtbDBkR1Z5UW5WbVptVnlSR1ZzWVhrNklHNTFiV0psY2p0Y2JpQWdJQ0JxYVhSMFpYSkNkV1ptWlhKRmJXbDBkR1ZrUTI5MWJuUTZJRzUxYldKbGNqdGNiaUFnSUNCcWFYUjBaWEpDZFdabVpYSk5hVzVwYlhWdFJHVnNZWGs2SUc1MWJXSmxjanRjYmlBZ0lDQnFhWFIwWlhKQ2RXWm1aWEpVWVhKblpYUkVaV3hoZVRvZ2JuVnRZbVZ5TzF4dUlDQWdJR3RwYm1RNklITjBjbWx1Wnp0Y2JpQWdJQ0JzWVhOMFVHRmphMlYwVW1WalpXbDJaV1JVYVcxbGMzUmhiWEE2SUc1MWJXSmxjanRjYmlBZ0lDQnRaV1JwWVZSNWNHVTZJSE4wY21sdVp6dGNiaUFnSUNCdGFXUTZJSE4wY21sdVp6dGNiaUFnSUNCd1lXTnJaWFJ6UkdselkyRnlaR1ZrT2lCdWRXMWlaWEk3WEc0Z0lDQWdjR0ZqYTJWMGMweHZjM1E2SUc1MWJXSmxjanRjYmlBZ0lDQndZV05yWlhSelVtVmpaV2wyWldRNklHNTFiV0psY2p0Y2JpQWdJQ0J5WlcxdmRtVmtVMkZ0Y0d4bGMwWnZja0ZqWTJWc1pYSmhkR2x2YmpvZ2JuVnRZbVZ5TzF4dUlDQWdJSE5wYkdWdWRFTnZibU5sWVd4bFpGTmhiWEJzWlhNNklHNTFiV0psY2p0Y2JpQWdJQ0J6YzNKak9pQnVkVzFpWlhJN1hHNGdJQ0FnZEdsdFpYTjBZVzF3T2lCdWRXMWlaWEk3WEc0Z0lDQWdkRzkwWVd4QmRXUnBiMFZ1WlhKbmVUb2diblZ0WW1WeU8xeHVJQ0FnSUhSdmRHRnNVMkZ0Y0d4bGMwUjFjbUYwYVc5dU9pQnVkVzFpWlhJN1hHNGdJQ0FnZEc5MFlXeFRZVzF3YkdWelVtVmpaV2wyWldRNklHNTFiV0psY2p0Y2JpQWdJQ0IwY21GamEwbGtaVzUwYVdacFpYSTZJSE4wY21sdVp6dGNiaUFnSUNCMGNtRnVjM0J2Y25SSlpEb2djM1J5YVc1bk8xeHVJQ0FnSUhSNWNHVTZJSE4wY21sdVp6dGNibHh1SUNBZ0lDOHFJR0ZrWkdsMGFXOXVZV3dzSUdOMWMzUnZiU0J6ZEdGMGN5QXFMMXh1SUNBZ0lHSnBkSEpoZEdVNklHNTFiV0psY2p0Y2JuMWNibHh1THlvcVhHNGdLaUJKYm1KdmRXNWtJRlpwWkdWdklGTjBZWFJ6SUdOdmJHeGxZM1JsWkNCbWNtOXRJSFJvWlNCU1ZFTWdVM1JoZEhNZ1VtVndiM0owWEc0Z0tpOWNibVY0Y0c5eWRDQmpiR0Z6Y3lCSmJtSnZkVzVrVm1sa1pXOVRkR0YwY3lCN1hHNGdJQ0FnWW5sMFpYTlNaV05sYVhabFpEb2diblZ0WW1WeU8xeHVJQ0FnSUdOdlpHVmpTV1E2SUhOMGNtbHVaenRjYmlBZ0lDQm1hWEpEYjNWdWREb2diblZ0WW1WeU8xeHVJQ0FnSUdaeVlXMWxTR1ZwWjJoME9pQnVkVzFpWlhJN1hHNGdJQ0FnWm5KaGJXVlhhV1IwYURvZ2JuVnRZbVZ5TzF4dUlDQWdJR1p5WVcxbGMwRnpjMlZ0WW14bFpFWnliMjFOZFd4MGFYQnNaVkJoWTJ0bGRITTZJRzUxYldKbGNqdGNiaUFnSUNCbWNtRnRaWE5FWldOdlpHVmtPaUJ1ZFcxaVpYSTdYRzRnSUNBZ1puSmhiV1Z6UkhKdmNIQmxaRG9nYm5WdFltVnlPMXh1SUNBZ0lHWnlZVzFsYzFCbGNsTmxZMjl1WkRvZ2JuVnRZbVZ5TzF4dUlDQWdJR1p5WVcxbGMxSmxZMlZwZG1Wa09pQnVkVzFpWlhJN1hHNGdJQ0FnWm5KbFpYcGxRMjkxYm5RNklHNTFiV0psY2p0Y2JpQWdJQ0JuYjI5blZHbHRhVzVuUm5KaGJXVkpibVp2T2lCemRISnBibWM3WEc0Z0lDQWdhR1ZoWkdWeVFubDBaWE5TWldObGFYWmxaRG9nYm5WdFltVnlPMXh1SUNBZ0lHbGtPaUJ6ZEhKcGJtYzdYRzRnSUNBZ2FtbDBkR1Z5T2lCdWRXMWlaWEk3WEc0Z0lDQWdhbWwwZEdWeVFuVm1abVZ5UkdWc1lYazZJRzUxYldKbGNqdGNiaUFnSUNCcWFYUjBaWEpDZFdabVpYSkZiV2wwZEdWa1EyOTFiblE2SUc1MWJXSmxjanRjYmlBZ0lDQnJaWGxHY21GdFpYTkVaV052WkdWa09pQnVkVzFpWlhJN1hHNGdJQ0FnYTJsdVpEb2djM1J5YVc1bk8xeHVJQ0FnSUd4aGMzUlFZV05yWlhSU1pXTmxhWFpsWkZScGJXVnpkR0Z0Y0RvZ2JuVnRZbVZ5TzF4dUlDQWdJRzFsWkdsaFZIbHdaVG9nYzNSeWFXNW5PMXh1SUNBZ0lHMXBaRG9nYzNSeWFXNW5PMXh1SUNBZ0lHNWhZMnREYjNWdWREb2diblZ0WW1WeU8xeHVJQ0FnSUhCaFkydGxkSE5NYjNOME9pQnVkVzFpWlhJN1hHNGdJQ0FnY0dGamEyVjBjMUpsWTJWcGRtVmtPaUJ1ZFcxaVpYSTdYRzRnSUNBZ2NHRjFjMlZEYjNWdWREb2diblZ0WW1WeU8xeHVJQ0FnSUhCc2FVTnZkVzUwT2lCdWRXMWlaWEk3WEc0Z0lDQWdjM055WXpvZ2JuVnRZbVZ5TzF4dUlDQWdJSFJwYldWemRHRnRjRG9nYm5WdFltVnlPMXh1SUNBZ0lIUnZkR0ZzUVhOelpXMWliSGxVYVcxbE9pQnVkVzFpWlhJN1hHNGdJQ0FnZEc5MFlXeEVaV052WkdWVWFXMWxPaUJ1ZFcxaVpYSTdYRzRnSUNBZ2RHOTBZV3hHY21WbGVtVnpSSFZ5WVhScGIyNDZJRzUxYldKbGNqdGNiaUFnSUNCMGIzUmhiRWx1ZEdWeVJuSmhiV1ZFWld4aGVUb2diblZ0WW1WeU8xeHVJQ0FnSUhSdmRHRnNVR0YxYzJWelJIVnlZWFJwYjI0NklHNTFiV0psY2p0Y2JpQWdJQ0IwYjNSaGJGQnliMk5sYzNOcGJtZEVaV3hoZVRvZ2JuVnRZbVZ5TzF4dUlDQWdJSFJ2ZEdGc1UzRjFZWEpsWkVsdWRHVnlSbkpoYldWRVpXeGhlVG9nYm5WdFltVnlPMXh1SUNBZ0lIUnlZV05yU1dSbGJuUnBabWxsY2pvZ2MzUnlhVzVuTzF4dUlDQWdJSFJ5WVc1emNHOXlkRWxrT2lCemRISnBibWM3WEc0Z0lDQWdkSGx3WlRvZ2MzUnlhVzVuTzF4dVhHNGdJQ0FnTHlvZ1lXUmthWFJwYjI1aGJDd2dZM1Z6ZEc5dElITjBZWFJ6SUNvdlhHNGdJQ0FnWW1sMGNtRjBaVG9nYm5WdFltVnlPMXh1ZlZ4dVhHNHZLaXBjYmlBcUlFbHVZbTkxYm1RZ1UzUmhkSE1nWTI5c2JHVmpkR1ZrSUdaeWIyMGdkR2hsSUZKVVF5QlRkR0YwY3lCU1pYQnZjblJjYmlBcUwxeHVaWGh3YjNKMElHTnNZWE56SUVsdVltOTFibVJTVkZCVGRHRjBjeUI3WEc0Z0lDQWdMeW9nWTI5dGJXOXVJSE4wWVhSeklDb3ZYRzRnSUNBZ1lubDBaWE5TWldObGFYWmxaRG9nYm5WdFltVnlPMXh1SUNBZ0lHTnZaR1ZqU1dRNklITjBjbWx1Wnp0Y2JpQWdJQ0JvWldGa1pYSkNlWFJsYzFKbFkyVnBkbVZrT2lCdWRXMWlaWEk3WEc0Z0lDQWdhV1E2SUhOMGNtbHVaenRjYmlBZ0lDQnFhWFIwWlhJNklHNTFiV0psY2p0Y2JpQWdJQ0JxYVhSMFpYSkNkV1ptWlhKRVpXeGhlVG9nYm5WdFltVnlPMXh1SUNBZ0lHcHBkSFJsY2tKMVptWmxja1Z0YVhSMFpXUkRiM1Z1ZERvZ2JuVnRZbVZ5TzF4dUlDQWdJR3RwYm1RNklITjBjbWx1Wnp0Y2JpQWdJQ0JzWVhOMFVHRmphMlYwVW1WalpXbDJaV1JVYVcxbGMzUmhiWEE2SUc1MWJXSmxjanRjYmlBZ0lDQnRaV1JwWVZSNWNHVTZJSE4wY21sdVp6dGNiaUFnSUNCdGFXUTZJSE4wY21sdVp6dGNiaUFnSUNCd1lXTnJaWFJ6VEc5emREb2diblZ0WW1WeU8xeHVJQ0FnSUhCaFkydGxkSE5TWldObGFYWmxaRG9nYm5WdFltVnlPMXh1SUNBZ0lITnpjbU02SUc1MWJXSmxjanRjYmlBZ0lDQjBhVzFsYzNSaGJYQTZJRzUxYldKbGNqdGNiaUFnSUNCMGNtRmphMGxrWlc1MGFXWnBaWEk2SUhOMGNtbHVaenRjYmlBZ0lDQjBjbUZ1YzNCdmNuUkpaRG9nYzNSeWFXNW5PMXh1SUNBZ0lIUjVjR1U2SUhOMGNtbHVaenRjYmx4dUlDQWdJQzhxSUdGMVpHbHZJSE53WldOcFptbGpJSE4wWVhSeklDb3ZYRzRnSUNBZ1lYVmthVzlNWlhabGJEb2diblZ0WW1WeU8xeHVJQ0FnSUdOdmJtTmxZV3hsWkZOaGJYQnNaWE02SUc1MWJXSmxjanRjYmlBZ0lDQmpiMjVqWldGc2JXVnVkRVYyWlc1MGN6b2diblZ0WW1WeU8xeHVJQ0FnSUdabFkxQmhZMnRsZEhORWFYTmpZWEprWldRNklHNTFiV0psY2p0Y2JpQWdJQ0JtWldOUVlXTnJaWFJ6VW1WalpXbDJaV1E2SUc1MWJXSmxjanRjYmlBZ0lDQnBibk5sY25SbFpGTmhiWEJzWlhOR2IzSkVaV05sYkdWeVlYUnBiMjQ2SUc1MWJXSmxjanRjYmlBZ0lDQnFhWFIwWlhKQ2RXWm1aWEpOYVc1cGJYVnRSR1ZzWVhrNklHNTFiV0psY2p0Y2JpQWdJQ0JxYVhSMFpYSkNkV1ptWlhKVVlYSm5aWFJFWld4aGVUb2diblZ0WW1WeU8xeHVJQ0FnSUhCaFkydGxkSE5FYVhOallYSmtaV1E2SUc1MWJXSmxjanRjYmlBZ0lDQnlaVzF2ZG1Wa1UyRnRjR3hsYzBadmNrRmpZMlZzWlhKaGRHbHZiam9nYm5WdFltVnlPMXh1SUNBZ0lITnBiR1Z1ZEVOdmJtTmxZV3hsWkZOaGJYQnNaWE02SUc1MWJXSmxjanRjYmlBZ0lDQjBiM1JoYkVGMVpHbHZSVzVsY21kNU9pQnVkVzFpWlhJN1hHNGdJQ0FnZEc5MFlXeFRZVzF3YkdWelJIVnlZWFJwYjI0NklHNTFiV0psY2p0Y2JpQWdJQ0IwYjNSaGJGTmhiWEJzWlhOU1pXTmxhWFpsWkRvZ2JuVnRZbVZ5TzF4dVhHNGdJQ0FnTHlvZ2RtbGtaVzhnYzNCbFkybG1hV01nYzNSaGRITWdLaTljYmlBZ0lDQm1hWEpEYjNWdWREb2diblZ0WW1WeU8xeHVJQ0FnSUdaeVlXMWxTR1ZwWjJoME9pQnVkVzFpWlhJN1hHNGdJQ0FnWm5KaGJXVlhhV1IwYURvZ2JuVnRZbVZ5TzF4dUlDQWdJR1p5WVcxbGMwRnpjMlZ0WW14bFpFWnliMjFOZFd4MGFYQnNaVkJoWTJ0bGRITTZJRzUxYldKbGNqdGNiaUFnSUNCbWNtRnRaWE5FWldOdlpHVmtPaUJ1ZFcxaVpYSTdYRzRnSUNBZ1puSmhiV1Z6UkhKdmNIQmxaRG9nYm5WdFltVnlPMXh1SUNBZ0lHWnlZVzFsYzFCbGNsTmxZMjl1WkRvZ2JuVnRZbVZ5TzF4dUlDQWdJR1p5WVcxbGMxSmxZMlZwZG1Wa09pQnVkVzFpWlhJN1hHNGdJQ0FnWm5KbFpYcGxRMjkxYm5RNklHNTFiV0psY2p0Y2JpQWdJQ0JuYjI5blZHbHRhVzVuUm5KaGJXVkpibVp2T2lCemRISnBibWM3WEc0Z0lDQWdhMlY1Um5KaGJXVnpSR1ZqYjJSbFpEb2diblZ0WW1WeU8xeHVJQ0FnSUc1aFkydERiM1Z1ZERvZ2JuVnRZbVZ5TzF4dUlDQWdJSEJoZFhObFEyOTFiblE2SUc1MWJXSmxjanRjYmlBZ0lDQndiR2xEYjNWdWREb2diblZ0WW1WeU8xeHVJQ0FnSUhSdmRHRnNRWE56WlcxaWJIbFVhVzFsT2lCdWRXMWlaWEk3WEc0Z0lDQWdkRzkwWVd4RVpXTnZaR1ZVYVcxbE9pQnVkVzFpWlhJN1hHNGdJQ0FnZEc5MFlXeEdjbVZsZW1WelJIVnlZWFJwYjI0NklHNTFiV0psY2p0Y2JpQWdJQ0IwYjNSaGJFbHVkR1Z5Um5KaGJXVkVaV3hoZVRvZ2JuVnRZbVZ5TzF4dUlDQWdJSFJ2ZEdGc1VHRjFjMlZ6UkhWeVlYUnBiMjQ2SUc1MWJXSmxjanRjYmlBZ0lDQjBiM1JoYkZCeWIyTmxjM05wYm1kRVpXeGhlVG9nYm5WdFltVnlPMXh1SUNBZ0lIUnZkR0ZzVTNGMVlYSmxaRWx1ZEdWeVJuSmhiV1ZFWld4aGVUb2diblZ0WW1WeU8xeHVmVnh1SWl3aUx5OGdRMjl3ZVhKcFoyaDBJRVZ3YVdNZ1IyRnRaWE1zSUVsdVl5NGdRV3hzSUZKcFoyaDBjeUJTWlhObGNuWmxaQzVjYmx4dUx5b3FYRzRnS2lCUGRYUmliM1Z1WkNCV2FXUmxieUJUZEdGMGN5QmpiMnhzWldOMFpXUWdabkp2YlNCMGFHVWdVbFJESUZOMFlYUnpJRkpsY0c5eWRGeHVJQ292WEc1bGVIQnZjblFnWTJ4aGMzTWdUM1YwUW05MWJtUldhV1JsYjFOMFlYUnpJSHRjYmlBZ0lDQmllWFJsYzFObGJuUTZJRzUxYldKbGNqdGNiaUFnSUNCcFpEb2djM1J5YVc1bk8xeHVJQ0FnSUd4dlkyRnNTV1E2SUhOMGNtbHVaenRjYmlBZ0lDQndZV05yWlhSelUyVnVkRG9nYm5WdFltVnlPMXh1SUNBZ0lISmxiVzkwWlZScGJXVnpkR0Z0Y0RvZ2JuVnRZbVZ5TzF4dUlDQWdJSFJwYldWemRHRnRjRG9nYm5WdFltVnlPMXh1ZlZ4dVhHNHZLaXBjYmlBcUlFOTFkR0p2ZFc1a0lGTjBZWFJ6SUdOdmJHeGxZM1JsWkNCbWNtOXRJSFJvWlNCU1ZFTWdVM1JoZEhNZ1VtVndiM0owWEc0Z0tpOWNibVY0Y0c5eWRDQmpiR0Z6Y3lCUGRYUkNiM1Z1WkZKVVVGTjBZWFJ6SUh0Y2JpQWdJQ0JyYVc1a09pQnpkSEpwYm1jN1hHNGdJQ0FnWW5sMFpYTlRaVzUwT2lCdWRXMWlaWEk3WEc0Z0lDQWdhV1E2SUhOMGNtbHVaenRjYmlBZ0lDQnNiMk5oYkVsa09pQnpkSEpwYm1jN1hHNGdJQ0FnY0dGamEyVjBjMU5sYm5RNklHNTFiV0psY2p0Y2JpQWdJQ0J5WlcxdmRHVlVhVzFsYzNSaGJYQTZJRzUxYldKbGNqdGNiaUFnSUNCMGFXMWxjM1JoYlhBNklHNTFiV0psY2p0Y2JuMWNiaUlzSWk4dklFTnZjSGx5YVdkb2RDQkZjR2xqSUVkaGJXVnpMQ0JKYm1NdUlFRnNiQ0JTYVdkb2RITWdVbVZ6WlhKMlpXUXVYRzVjYm1sdGNHOXlkQ0I3SUV4dloyZGxjaUI5SUdaeWIyMGdKeTR1TDB4dloyZGxjaTlNYjJkblpYSW5PMXh1YVcxd2IzSjBJSHNnUTI5dVptbG5MQ0JQY0hScGIyNVFZWEpoYldWMFpYSnpMQ0JHYkdGbmN5QjlJR1p5YjIwZ0p5NHVMME52Ym1acFp5OURiMjVtYVdjbk8xeHVhVzF3YjNKMElIc2dRV2RuY21WbllYUmxaRk4wWVhSeklIMGdabkp2YlNBbkxpOUJaMmR5WldkaGRHVmtVM1JoZEhNbk8xeHVhVzF3YjNKMElIc2djR0Z5YzJWU2RIQlFZWEpoYldWMFpYSnpMQ0J6Y0d4cGRGTmxZM1JwYjI1eklIMGdabkp2YlNBbmMyUndKenRjYmx4dUx5b3FYRzRnS2lCSVlXNWtiR1Z6SUhSb1pTQlFaV1Z5SUVOdmJtNWxZM1JwYjI1Y2JpQXFMMXh1Wlhod2IzSjBJR05zWVhOeklGQmxaWEpEYjI1dVpXTjBhVzl1UTI5dWRISnZiR3hsY2lCN1hHNGdJQ0FnY0dWbGNrTnZibTVsWTNScGIyNDZJRkpVUTFCbFpYSkRiMjV1WldOMGFXOXVPMXh1SUNBZ0lHRm5aM0psWjJGMFpXUlRkR0YwY3pvZ1FXZG5jbVZuWVhSbFpGTjBZWFJ6TzF4dUlDQWdJR052Ym1acFp6b2dRMjl1Wm1sbk8xeHVJQ0FnSUhCeVpXWmxjbkpsWkVOdlpHVmpPaUJ6ZEhKcGJtYzdYRzRnSUNBZ2RYQmtZWFJsUTI5a1pXTlRaV3hsWTNScGIyNDZJR0p2YjJ4bFlXNDdYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJEY21WaGRHVWdZU0J1WlhjZ1VsUkRJRkJsWlhJZ1EyOXVibVZqZEdsdmJpQmpiR2xsYm5SY2JpQWdJQ0FnS2lCQWNHRnlZVzBnYjNCMGFXOXVjeUF0SUZCbFpYSWdZMjl1Ym1WamRHbHZiaUJQY0hScGIyNXpYRzRnSUNBZ0lDb2dRSEJoY21GdElHTnZibVpwWnlBdElGUm9aU0JqYjI1bWFXY2dabTl5SUc5MWNpQlFVeUJsZUhCbGNtbGxibU5sTGx4dUlDQWdJQ0FxTDF4dUlDQWdJR052Ym5OMGNuVmpkRzl5S0Z4dUlDQWdJQ0FnSUNCdmNIUnBiMjV6T2lCU1ZFTkRiMjVtYVdkMWNtRjBhVzl1TEZ4dUlDQWdJQ0FnSUNCamIyNW1hV2M2SUVOdmJtWnBaeXhjYmlBZ0lDQWdJQ0FnY0hKbFptVnljbVZrUTI5a1pXTTZJSE4wY21sdVoxeHVJQ0FnSUNrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG1OdmJtWnBaeUE5SUdOdmJtWnBaenRjYmlBZ0lDQWdJQ0FnZEdocGN5NWpjbVZoZEdWUVpXVnlRMjl1Ym1WamRHbHZiaWh2Y0hScGIyNXpMQ0J3Y21WbVpYSnlaV1JEYjJSbFl5azdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1kzSmxZWFJsVUdWbGNrTnZibTVsWTNScGIyNG9iM0IwYVc5dWN6b2dVbFJEUTI5dVptbG5kWEpoZEdsdmJpd2djSEpsWm1WeWNtVmtRMjlrWldNNklITjBjbWx1WnlrZ2UxeHVJQ0FnSUNBZ0lDQXZMeUJUWlhRZ2RHaGxJRWxEUlNCMGNtRnVjM0J2Y25RZ2RHOGdjbVZzWVhrZ2FXWWdWRlZTVGlCbGJtRmliR1ZrWEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG1OdmJtWnBaeTVwYzBac1lXZEZibUZpYkdWa0tFWnNZV2R6TGtadmNtTmxWRlZTVGlrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUc5d2RHbHZibk11YVdObFZISmhibk53YjNKMFVHOXNhV041SUQwZ0ozSmxiR0Y1Snp0Y2JpQWdJQ0FnSUNBZ0lDQWdJRXh2WjJkbGNpNU1iMmNvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVEc5bloyVnlMa2RsZEZOMFlXTnJWSEpoWTJVb0tTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5SbTl5WTJsdVp5QlVWVkpPSUhWellXZGxJR0o1SUhObGRIUnBibWNnU1VORklGUnlZVzV6Y0c5eWRDQlFiMnhwWTNrZ2FXNGdjR1ZsY2lCamIyNXVaV04wYVc5dUlHTnZibVpwWnk0blhHNGdJQ0FnSUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdMeThnWW5WcGJHUWdZU0J1WlhjZ2NHVmxjaUJqYjI1dVpXTjBhVzl1SUhkcGRHZ2dkR2hsSUc5d2RHbHZibk5jYmlBZ0lDQWdJQ0FnZEdocGN5NXdaV1Z5UTI5dWJtVmpkR2x2YmlBOUlHNWxkeUJTVkVOUVpXVnlRMjl1Ym1WamRHbHZiaWh2Y0hScGIyNXpLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXdaV1Z5UTI5dWJtVmpkR2x2Ymk1dmJuTnBaMjVoYkdsdVozTjBZWFJsWTJoaGJtZGxJRDBnS0dWMk9pQkZkbVZ1ZENrZ1BUNWNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVhR0Z1Wkd4bFUybG5ibUZzVTNSaGRHVkRhR0Z1WjJVb1pYWXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuQmxaWEpEYjI1dVpXTjBhVzl1TG05dWFXTmxZMjl1Ym1WamRHbHZibk4wWVhSbFkyaGhibWRsSUQwZ0tHVjJPaUJGZG1WdWRDa2dQVDVjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YUdGdVpHeGxTV05sUTI5dWJtVmpkR2x2YmxOMFlYUmxRMmhoYm1kbEtHVjJLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXdaV1Z5UTI5dWJtVmpkR2x2Ymk1dmJtbGpaV2RoZEdobGNtbHVaM04wWVhSbFkyaGhibWRsSUQwZ0tHVjJPaUJGZG1WdWRDa2dQVDVjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YUdGdVpHeGxTV05sUjJGMGFHVnlhVzVuVTNSaGRHVkRhR0Z1WjJVb1pYWXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuQmxaWEpEYjI1dVpXTjBhVzl1TG05dWRISmhZMnNnUFNBb1pYWTZJRkpVUTFSeVlXTnJSWFpsYm5RcElEMCtYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbWhoYm1Sc1pVOXVWSEpoWTJzb1pYWXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuQmxaWEpEYjI1dVpXTjBhVzl1TG05dWFXTmxZMkZ1Wkdsa1lYUmxJRDBnS0dWMk9pQlNWRU5RWldWeVEyOXVibVZqZEdsdmJrbGpaVVYyWlc1MEtTQTlQbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVvWVc1a2JHVkpZMlZEWVc1a2FXUmhkR1VvWlhZcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5CbFpYSkRiMjV1WldOMGFXOXVMbTl1WkdGMFlXTm9ZVzV1Wld3Z1BTQW9aWFk2SUZKVVEwUmhkR0ZEYUdGdWJtVnNSWFpsYm5RcElEMCtYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbWhoYm1Sc1pVUmhkR0ZEYUdGdWJtVnNLR1YyS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVoWjJkeVpXZGhkR1ZrVTNSaGRITWdQU0J1WlhjZ1FXZG5jbVZuWVhSbFpGTjBZWFJ6S0NrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Y0hKbFptVnljbVZrUTI5a1pXTWdQU0J3Y21WbVpYSnlaV1JEYjJSbFl6dGNiaUFnSUNBZ0lDQWdkR2hwY3k1MWNHUmhkR1ZEYjJSbFkxTmxiR1ZqZEdsdmJpQTlJSFJ5ZFdVN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1EzSmxZWFJsSUdGdUlHOW1abVZ5SUdadmNpQjBhR1VnVjJWaUlGSlVReUJvWVc1a2MyaGhhMlVnWVc1a0lITmxibVFnZEdobElHOW1abVZ5SUhSdklIUm9aU0J6YVdkdVlXeHBibWNnYzJWeWRtVnlJSFpwWVNCM1pXSnpiMk5yWlhSY2JpQWdJQ0FnS2lCQWNHRnlZVzBnYjJabVpYSlBjSFJwYjI1eklDMGdVbFJESUU5bVptVnlJRTl3ZEdsdmJuTmNiaUFnSUNBZ0tpOWNiaUFnSUNCaGMzbHVZeUJqY21WaGRHVlBabVpsY2lodlptWmxjazl3ZEdsdmJuTTZJRkpVUTA5bVptVnlUM0IwYVc5dWN5d2dZMjl1Wm1sbk9pQkRiMjVtYVdjcElIdGNiaUFnSUNBZ0lDQWdURzluWjJWeUxreHZaeWhNYjJkblpYSXVSMlYwVTNSaFkydFVjbUZqWlNncExDQW5RM0psWVhSbElFOW1abVZ5Snl3Z05pazdYRzVjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdhWE5NYjJOaGJHaHZjM1JEYjI1dVpXTjBhVzl1SUQxY2JpQWdJQ0FnSUNBZ0lDQWdJR3h2WTJGMGFXOXVMbWh2YzNSdVlXMWxJRDA5UFNBbmJHOWpZV3hvYjNOMEp5QjhmRnh1SUNBZ0lDQWdJQ0FnSUNBZ2JHOWpZWFJwYjI0dWFHOXpkRzVoYldVZ1BUMDlJQ2N4TWpjdU1DNHdMakVuTzF4dUlDQWdJQ0FnSUNCamIyNXpkQ0JwYzBoMGRIQnpRMjl1Ym1WamRHbHZiaUE5SUd4dlkyRjBhVzl1TG5CeWIzUnZZMjlzSUQwOVBTQW5hSFIwY0hNNkp6dGNiaUFnSUNBZ0lDQWdiR1YwSUhWelpVMXBZeUE5SUdOdmJtWnBaeTVwYzBac1lXZEZibUZpYkdWa0tFWnNZV2R6TGxWelpVMXBZeWs3WEc0Z0lDQWdJQ0FnSUdsbUlDaDFjMlZOYVdNZ0ppWWdJU2hwYzB4dlkyRnNhRzl6ZEVOdmJtNWxZM1JwYjI0Z2ZId2dhWE5JZEhSd2MwTnZibTVsWTNScGIyNHBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjFjMlZOYVdNZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJRXh2WjJkbGNpNUZjbkp2Y2loY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCTWIyZG5aWEl1UjJWMFUzUmhZMnRVY21GalpTZ3BMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2ROYVdOeWIzQm9iMjVsSUdGalkyVnpjeUJwYmlCMGFHVWdZbkp2ZDNObGNpQjNhV3hzSUc1dmRDQjNiM0pySUdsbUlIbHZkU0JoY21VZ2JtOTBJRzl1SUVoVVZGQlRJRzl5SUd4dlkyRnNhRzl6ZEM0Z1JHbHpZV0pzYVc1bklHMXBZeUJoWTJObGMzTXVKMXh1SUNBZ0lDQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUV4dloyZGxjaTVGY25KdmNpaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQk1iMmRuWlhJdVIyVjBVM1JoWTJ0VWNtRmpaU2dwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUZ3aVJtOXlJSFJsYzNScGJtY2dlVzkxSUdOaGJpQmxibUZpYkdVZ1NGUlVVQ0J0YVdOeWIzQm9iMjVsSUdGalkyVnpjeUJEYUhKdmJXVWdZbmtnZG1semFYUnBibWNnWTJoeWIyMWxPaTh2Wm14aFozTXZJR0Z1WkNCbGJtRmliR2x1WnlBbmRXNXpZV1psYkhrdGRISmxZWFF0YVc1elpXTjFjbVV0YjNKcFoybHVMV0Z6TFhObFkzVnlaU2RjSWx4dUlDQWdJQ0FnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lIUm9hWE11YzJWMGRYQlVjbUZ1YzJObGFYWmxjbk5CYzNsdVl5aDFjMlZOYVdNcExtWnBibUZzYkhrb0tDa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1d1pXVnlRMjl1Ym1WamRHbHZibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRDh1WTNKbFlYUmxUMlptWlhJb2IyWm1aWEpQY0hScGIyNXpLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzUwYUdWdUtDaHZabVpsY2pvZ1VsUkRVMlZ6YzJsdmJrUmxjMk55YVhCMGFXOXVTVzVwZENrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbk5vYjNkVVpYaDBUM1psY214aGVVTnZibTVsWTNScGJtY29LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2IyWm1aWEl1YzJSd0lEMGdkR2hwY3k1dGRXNW5aVk5FVUNodlptWmxjaTV6WkhBc0lIVnpaVTFwWXlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWNHVmxja052Ym01bFkzUnBiMjQvTG5ObGRFeHZZMkZzUkdWelkzSnBjSFJwYjI0b2IyWm1aWElwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG05dVUyVnVaRmRsWWxKVVEwOW1abVZ5S0c5bVptVnlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM1allYUmphQ2dvS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjMmh2ZDFSbGVIUlBkbVZ5YkdGNVUyVjBkWEJHWVdsc2RYSmxLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1lYTjVibU1nY21WalpXbDJaVTltWm1WeUtHOW1abVZ5T2lCU1ZFTlRaWE56YVc5dVJHVnpZM0pwY0hScGIyNUpibWwwTENCamIyNW1hV2M2SUVOdmJtWnBaeWtnZTF4dUlDQWdJQ0FnSUNCTWIyZG5aWEl1VEc5bktFeHZaMmRsY2k1SFpYUlRkR0ZqYTFSeVlXTmxLQ2tzSUNkU1pXTmxhWFpsSUU5bVptVnlKeXdnTmlrN1hHNWNiaUFnSUNBZ0lDQWdkR2hwY3k1d1pXVnlRMjl1Ym1WamRHbHZiajh1YzJWMFVtVnRiM1JsUkdWelkzSnBjSFJwYjI0b2IyWm1aWElwTG5Sb1pXNG9LQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdhWE5NYjJOaGJHaHZjM1JEYjI1dVpXTjBhVzl1SUQxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc2IyTmhkR2x2Ymk1b2IzTjBibUZ0WlNBOVBUMGdKMnh2WTJGc2FHOXpkQ2NnZkh4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc2IyTmhkR2x2Ymk1b2IzTjBibUZ0WlNBOVBUMGdKekV5Tnk0d0xqQXVNU2M3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCcGMwaDBkSEJ6UTI5dWJtVmpkR2x2YmlBOUlHeHZZMkYwYVc5dUxuQnliM1J2WTI5c0lEMDlQU0FuYUhSMGNITTZKenRjYmlBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0IxYzJWTmFXTWdQU0JqYjI1bWFXY3VhWE5HYkdGblJXNWhZbXhsWkNoR2JHRm5jeTVWYzJWTmFXTXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFZ6WlUxcFl5QW1KaUFoS0dselRHOWpZV3hvYjNOMFEyOXVibVZqZEdsdmJpQjhmQ0JwYzBoMGRIQnpRMjl1Ym1WamRHbHZiaWtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMWMyVk5hV01nUFNCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JNYjJkblpYSXVSWEp5YjNJb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRXh2WjJkbGNpNUhaWFJUZEdGamExUnlZV05sS0Nrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2ROYVdOeWIzQm9iMjVsSUdGalkyVnpjeUJwYmlCMGFHVWdZbkp2ZDNObGNpQjNhV3hzSUc1dmRDQjNiM0pySUdsbUlIbHZkU0JoY21VZ2JtOTBJRzl1SUVoVVZGQlRJRzl5SUd4dlkyRnNhRzl6ZEM0Z1JHbHpZV0pzYVc1bklHMXBZeUJoWTJObGMzTXVKMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVEc5bloyVnlMa1Z5Y205eUtGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JNYjJkblpYSXVSMlYwVTNSaFkydFVjbUZqWlNncExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JjSWtadmNpQjBaWE4wYVc1bklIbHZkU0JqWVc0Z1pXNWhZbXhsSUVoVVZGQWdiV2xqY205d2FHOXVaU0JoWTJObGMzTWdRMmh5YjIxbElHSjVJSFpwYzJsMGFXNW5JR05vY205dFpUb3ZMMlpzWVdkekx5QmhibVFnWlc1aFlteHBibWNnSjNWdWMyRm1aV3g1TFhSeVpXRjBMV2x1YzJWamRYSmxMVzl5YVdkcGJpMWhjeTF6WldOMWNtVW5YQ0pjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5ObGRIVndWSEpoYm5OalpXbDJaWEp6UVhONWJtTW9kWE5sVFdsaktTNW1hVzVoYkd4NUtDZ3BJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbkJsWlhKRGIyNXVaV04wYVc5dVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRDh1WTNKbFlYUmxRVzV6ZDJWeUtDbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTG5Sb1pXNG9LRUZ1YzNkbGNqb2dVbFJEVTJWemMybHZia1JsYzJOeWFYQjBhVzl1U1c1cGRDa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUVc1emQyVnlMbk5rY0NBOUlIUm9hWE11YlhWdVoyVlRSRkFvUVc1emQyVnlMbk5rY0N3Z2RYTmxUV2xqS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuQmxaWEpEYjI1dVpXTjBhVzl1UHk1elpYUk1iMk5oYkVSbGMyTnlhWEIwYVc5dUtFRnVjM2RsY2lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDNTBhR1Z1S0NncElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWIyNVRaVzVrVjJWaVVsUkRRVzV6ZDJWeUtGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWNHVmxja052Ym01bFkzUnBiMjQvTG1OMWNuSmxiblJNYjJOaGJFUmxjMk55YVhCMGFXOXVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUtWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F1WTJGMFkyZ29LQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1RHOW5aMlZ5TGtWeWNtOXlLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUV4dloyZGxjaTVIWlhSVGRHRmphMVJ5WVdObEtDa3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSjJOeVpXRjBaVUZ1YzNkbGNpZ3BJR1poYVd4bFpDZGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lIMHBPMXh1WEc0Z0lDQWdJQ0FnSUM4dklGVm5iSGtnYzNsdWRHRjRMQ0JpZFhRZ2RHaHBjeUJoWTJocFpYWmxjeUIwYUdVZ2FXNTBaWEp6WldOMGFXOXVJRzltSUhSb1pTQmljbTkzYzJWeUlITjFjSEJ2Y25SbFpDQnNhWE4wSUdGdVpDQjBhR1VnVlVVZ2MzVndjRzl5ZEdWa0lHeHBjM1JjYmlBZ0lDQWdJQ0FnZEdocGN5NWpiMjVtYVdjdWMyVjBUM0IwYVc5dVUyVjBkR2x1WjA5d2RHbHZibk1vWEc0Z0lDQWdJQ0FnSUNBZ0lDQlBjSFJwYjI1UVlYSmhiV1YwWlhKekxsQnlaV1psY25KbFpFTnZaR1ZqTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1d1lYSnpaVUYyWVdsc1lXSnNaVU52WkdWamN5aHZabVpsY2lrdVptbHNkR1Z5S0NoMllXeDFaU2tnUFQ1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbU52Ym1acFoxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F1WjJWMFUyVjBkR2x1WjA5d2RHbHZiaWhQY0hScGIyNVFZWEpoYldWMFpYSnpMbEJ5WldabGNuSmxaRU52WkdWaktWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F1YjNCMGFXOXVjeTVwYm1Oc2RXUmxjeWgyWVd4MVpTbGNiaUFnSUNBZ0lDQWdJQ0FnSUNsY2JpQWdJQ0FnSUNBZ0tUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlRaWFFnZEdobElGSmxiVzkwWlNCRVpYTmpjbWx3ZEc5eUlHWnliMjBnZEdobElITnBaMjVoYkdsdVp5QnpaWEoyWlhJZ2RHOGdkR2hsSUZKVVF5QlFaV1Z5SUVOdmJtNWxZM1JwYjI1Y2JpQWdJQ0FnS2lCQWNHRnlZVzBnWVc1emQyVnlJQzBnVWxSRElGTmxjM05wYjI0Z1JHVnpZM0pwY0hSdmNpQm1jbTl0SUhSb1pTQlRhV2R1WVd4cGJtY2dVMlZ5ZG1WeVhHNGdJQ0FnSUNvdlhHNGdJQ0FnY21WalpXbDJaVUZ1YzNkbGNpaGhibk4zWlhJNklGSlVRMU5sYzNOcGIyNUVaWE5qY21sd2RHbHZia2x1YVhRcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1d1pXVnlRMjl1Ym1WamRHbHZiajh1YzJWMFVtVnRiM1JsUkdWelkzSnBjSFJwYjI0b1lXNXpkMlZ5S1R0Y2JpQWdJQ0FnSUNBZ0x5OGdWV2RzZVNCemVXNTBZWGdzSUdKMWRDQjBhR2x6SUdGamFHbGxkbVZ6SUhSb1pTQnBiblJsY25ObFkzUnBiMjRnYjJZZ2RHaGxJR0p5YjNkelpYSWdjM1Z3Y0c5eWRHVmtJR3hwYzNRZ1lXNWtJSFJvWlNCVlJTQnpkWEJ3YjNKMFpXUWdiR2x6ZEZ4dUlDQWdJQ0FnSUNCMGFHbHpMbU52Ym1acFp5NXpaWFJQY0hScGIyNVRaWFIwYVc1blQzQjBhVzl1Y3loY2JpQWdJQ0FnSUNBZ0lDQWdJRTl3ZEdsdmJsQmhjbUZ0WlhSbGNuTXVVSEpsWm1WeWNtVmtRMjlrWldNc1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuQmhjbk5sUVhaaGFXeGhZbXhsUTI5a1pXTnpLR0Z1YzNkbGNpa3VabWxzZEdWeUtDaDJZV3gxWlNrZ1BUNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1OdmJtWnBaMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdVoyVjBVMlYwZEdsdVowOXdkR2x2YmloUGNIUnBiMjVRWVhKaGJXVjBaWEp6TGxCeVpXWmxjbkpsWkVOdlpHVmpLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdWIzQjBhVzl1Y3k1cGJtTnNkV1JsY3loMllXeDFaU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDbGNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJIWlc1bGNtRjBaU0JCWjJkeVpXZGhkR1ZrSUZOMFlYUnpJR0Z1WkNCMGFHVnVJR1pwY21VZ1lTQnZibFpwWkdWdklGTjBZWFJ6SUdWMlpXNTBYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1oyVnVaWEpoZEdWVGRHRjBjeWdwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV3WldWeVEyOXVibVZqZEdsdmJqOHVaMlYwVTNSaGRITW9iblZzYkNrdWRHaGxiaWdvVTNSaGRITkVZWFJoT2lCU1ZFTlRkR0YwYzFKbGNHOXlkQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWhaMmR5WldkaGRHVmtVM1JoZEhNdWNISnZZMlZ6YzFOMFlYUnpLRk4wWVhSelJHRjBZU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG05dVZtbGtaVzlUZEdGMGN5aDBhR2x6TG1GblozSmxaMkYwWldSVGRHRjBjeWs3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUZWd1pHRjBaU0IwYUdVZ2NISmxabVZ5Y21Wa0lHTnZaR1ZqSUhObGJHVmpkR2x2YmlCaVlYTmxaQ0J2YmlCM2FHRjBJSGRoY3lCaFkzUjFZV3hzZVNCdVpXZHZkR2xoZEdWa1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTUxY0dSaGRHVkRiMlJsWTFObGJHVmpkR2x2YmlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WTI5dVptbG5Mbk5sZEU5d2RHbHZibE5sZEhScGJtZFdZV3gxWlNoY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdUM0IwYVc5dVVHRnlZVzFsZEdWeWN5NVFjbVZtWlhKeVpXUkRiMlJsWXl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1aFoyZHlaV2RoZEdWa1UzUmhkSE11WTI5a1pXTnpMbWRsZENoY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVZV2RuY21WbllYUmxaRk4wWVhSekxtbHVZbTkxYm1SV2FXUmxiMU4wWVhSekxtTnZaR1ZqU1dSY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVOc2IzTmxJRlJvWlNCUVpXVnlJRU52Ym01bFkzUnBiMjVjYmlBZ0lDQWdLaTljYmlBZ0lDQmpiRzl6WlNncElIdGNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVjR1ZsY2tOdmJtNWxZM1JwYjI0cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjR1ZsY2tOdmJtNWxZM1JwYjI0dVkyeHZjMlVvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWNHVmxja052Ym01bFkzUnBiMjRnUFNCdWRXeHNPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVFc5a2FXWjVJSFJvWlNCVFpYTnphVzl1SUVSbGMyTnlhWEIwYjNKY2JpQWdJQ0FnS2lCQWNHRnlZVzBnYzJSd0lDMGdVMlZ6YzJsdmJpQkVaWE5qY21sd2RHOXlJR0Z6SUdFZ2MzUnlhVzVuWEc0Z0lDQWdJQ29nUUhCaGNtRnRJSFZ6WlUxcFl5QXRJRWx6SUhSb1pTQnRhV055YjNCb2IyNWxJR2x1SUhWelpWeHVJQ0FnSUNBcUlFQnlaWFIxY201eklFRWdiVzlrYVdacFpXUWdVMlZ6YzJsdmJpQkVaWE5qY21sd2RHOXlYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2JYVnVaMlZUUkZBb2MyUndPaUJ6ZEhKcGJtY3NJSFZ6WlUxcFl6b2dZbTl2YkdWaGJpa2dlMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQnRkVzVuWldSVFJGQWdQU0J6WkhBN1hHNGdJQ0FnSUNBZ0lHMTFibWRsWkZORVVDNXlaWEJzWVdObEtGeHVJQ0FnSUNBZ0lDQWdJQ0FnTHloaFBXWnRkSEE2WEZ4a0t5QXVLbXhsZG1Wc0xXRnplVzF0WlhSeWVTMWhiR3h2ZDJWa1BTNHFLVnhjY2x4Y2JpOW5iU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDY2tNVHQ0TFdkdmIyZHNaUzF6ZEdGeWRDMWlhWFJ5WVhSbFBURXdNREF3TzNndFoyOXZaMnhsTFcxaGVDMWlhWFJ5WVhSbFBURXdNREF3TUZ4Y2NseGNiaWRjYmlBZ0lDQWdJQ0FnS1R0Y2JseHVJQ0FnSUNBZ0lDQnNaWFFnWVhWa2FXOVRSRkFnUFNBbkp6dGNibHh1SUNBZ0lDQWdJQ0F2THlCelpYUWdiV0Y0SUdKcGRISmhkR1VnZEc4Z2FHbG5hR1Z6ZENCaWFYUnlZWFJsSUU5d2RYTWdjM1Z3Y0c5eWRITmNiaUFnSUNBZ0lDQWdZWFZrYVc5VFJGQWdLejBnSjIxaGVHRjJaWEpoWjJWaWFYUnlZWFJsUFRVeE1EQXdNRHNuTzF4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2gxYzJWTmFXTXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJSE5sZENCMGFHVWdiV0Y0SUdOaGNIUjFjbVVnY21GMFpTQjBieUEwT0d0b2VpQW9jMjhnZDJVZ1kyRnVJSE5sYm1RZ2FHbG5hQ0J4ZFdGc2FYUjVJR0YxWkdsdklHWnliMjBnYldsaktWeHVJQ0FnSUNBZ0lDQWdJQ0FnWVhWa2FXOVRSRkFnS3owZ0ozTndjbTl3TFcxaGVHTmhjSFIxY21WeVlYUmxQVFE0TURBd095YzdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBdkx5QkdiM0pqWlNCdGIyNXZJRzl5SUhOMFpYSmxieUJpWVhObFpDQnZiaUIzYUdWMGFHVnlJRDltYjNKalpVMXZibThnZDJGeklIQmhjM05sWkNCdmNpQnViM1JjYmlBZ0lDQWdJQ0FnWVhWa2FXOVRSRkFnS3owZ2RHaHBjeTVqYjI1bWFXY3VhWE5HYkdGblJXNWhZbXhsWkNoR2JHRm5jeTVHYjNKalpVMXZibTlCZFdScGJ5bGNiaUFnSUNBZ0lDQWdJQ0FnSUQ4Z0ozTjBaWEpsYnowd095ZGNiaUFnSUNBZ0lDQWdJQ0FnSURvZ0ozTjBaWEpsYnoweE95YzdYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1pXNWhZbXhsSUdsdUxXSmhibVFnWm05eWQyRnlaQ0JsY25KdmNpQmpiM0p5WldOMGFXOXVJR1p2Y2lCdmNIVnpJR0YxWkdsdlhHNGdJQ0FnSUNBZ0lHRjFaR2x2VTBSUUlDczlJQ2QxYzJWcGJtSmhibVJtWldNOU1TYzdYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1YyVWdkWE5sSUhSb1pTQnNhVzVsSUNkMWMyVnBibUpoYm1SbVpXTTlNU2NnS0hkb2FXTm9JRTl3ZFhNZ2RYTmxjeWtnZEc4Z2MyVjBJRzkxY2lCUGNIVnpJSE53WldOcFptbGpJR0YxWkdsdklIQmhjbUZ0WlhSbGNuTXVYRzRnSUNBZ0lDQWdJRzExYm1kbFpGTkVVQzV5WlhCc1lXTmxLQ2QxYzJWcGJtSmhibVJtWldNOU1TY3NJR0YxWkdsdlUwUlFLVHRjYmx4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYlhWdVoyVmtVMFJRTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZkb1pXNGdZU0JKWTJVZ1EyRnVaR2xrWVhSbElHbHpJSEpsWTJWcGRtVmtJR0ZrWkNCMGJ5QjBhR1VnVWxSRElGQmxaWElnUTI5dWJtVmpkR2x2Ymx4dUlDQWdJQ0FxSUVCd1lYSmhiU0JwWTJWRFlXNWthV1JoZEdVZ0xTQlNWRU1nU1dObElFTmhibVJwWkdGMFpTQm1jbTl0SUhSb1pTQlRhV2R1WVd4cGJtY2dVMlZ5ZG1WeVhHNGdJQ0FnSUNvdlhHNGdJQ0FnYUdGdVpHeGxUMjVKWTJVb2FXTmxRMkZ1Wkdsa1lYUmxPaUJTVkVOSlkyVkRZVzVrYVdSaGRHVXBJSHRjYmlBZ0lDQWdJQ0FnVEc5bloyVnlMa3h2WnloTWIyZG5aWEl1UjJWMFUzUmhZMnRVY21GalpTZ3BMQ0FuY0dWbGNtTnZibTVsWTNScGIyNGdhR0Z1Wkd4bFQyNUpZMlVuTENBMktUdGNibHh1SUNBZ0lDQWdJQ0F2THlBdkx5QnBaaUJtYjNKamFXNW5JRlJWVWs0c0lISmxhbVZqZENCaGJua2dZMkZ1Wkdsa1lYUmxjeUJ1YjNRZ2NtVnNZWGxjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11WTI5dVptbG5MbWx6Um14aFowVnVZV0pzWldRb1JteGhaM011Um05eVkyVlVWVkpPS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1kyaGxZMnNnYVdZZ2JtOGdjbVZzWVhrZ1lXUmtjbVZ6Y3lCcGN5Qm1iM1Z1WkN3Z2FXWWdjMjhzSUhkbElHRnlaU0JoYzNOMWJXbHVaeUJwZENCdFpXRnVjeUJ1YnlCVVZWSk9JSE5sY25abGNseHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHbGpaVU5oYm1ScFpHRjBaUzVqWVc1a2FXUmhkR1V1YVc1a1pYaFBaaWduY21Wc1lYa25LU0E4SURBcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQk1iMmRuWlhJdVNXNW1ieWhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1RHOW5aMlZ5TGtkbGRGTjBZV05yVkhKaFkyVW9LU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lFUnliM0J3YVc1bklHTmhibVJwWkdGMFpTQmlaV05oZFhObElHbDBJSGRoY3lCdWIzUWdWRlZTVGlCeVpXeGhlUzRnZkNCVWVYQmxQU0FrZTJsalpVTmhibVJwWkdGMFpTNTBlWEJsZlNCOElGQnliM1J2WTI5c1BTQWtlMmxqWlVOaGJtUnBaR0YwWlM1d2NtOTBiMk52YkgwZ2ZDQkJaR1J5WlhOelBTUjdhV05sUTJGdVpHbGtZWFJsTG1Ga1pISmxjM045SUh3Z1VHOXlkRDBrZTJsalpVTmhibVJwWkdGMFpTNXdiM0owZlNCOFlDeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV3WldWeVEyOXVibVZqZEdsdmJqOHVZV1JrU1dObFEyRnVaR2xrWVhSbEtHbGpaVU5oYm1ScFpHRjBaU2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVjJobGJpQjBhR1VnVWxSRElGQmxaWElnUTI5dWJtVmpkR2x2YmlCVGFXZHVZV3hwYm1jZ2MyVnlkbVZ5SUhOMFlYUmxJRU5vWVc1blpYTmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2MzUmhkR1VnTFNCVGFXZHVZV3hwYm1jZ1UyVnlkbVZ5SUZOMFlYUmxJRU5vWVc1blpTQkZkbVZ1ZEZ4dUlDQWdJQ0FxTDF4dUlDQWdJR2hoYm1Sc1pWTnBaMjVoYkZOMFlYUmxRMmhoYm1kbEtITjBZWFJsT2lCRmRtVnVkQ2tnZTF4dUlDQWdJQ0FnSUNCTWIyZG5aWEl1VEc5bktGeHVJQ0FnSUNBZ0lDQWdJQ0FnVEc5bloyVnlMa2RsZEZOMFlXTnJWSEpoWTJVb0tTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNkemFXZHVZV3hwYm1jZ2MzUmhkR1VnWTJoaGJtZGxPaUFuSUNzZ2MzUmhkR1VzWEc0Z0lDQWdJQ0FnSUNBZ0lDQTJYRzRnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nU0dGdVpHeGxJSGRvWlc0Z2RHaGxJRWxqWlNCRGIyNXVaV04wYVc5dUlGTjBZWFJsSUVOb1lXNW5aWE5jYmlBZ0lDQWdLaUJBY0dGeVlXMGdjM1JoZEdVZ0xTQkpZMlVnUTI5dWJtVmpkR2x2YmlCVGRHRjBaVnh1SUNBZ0lDQXFMMXh1SUNBZ0lHaGhibVJzWlVsalpVTnZibTVsWTNScGIyNVRkR0YwWlVOb1lXNW5aU2h6ZEdGMFpUb2dSWFpsYm5RcElIdGNiaUFnSUNBZ0lDQWdURzluWjJWeUxreHZaeWhjYmlBZ0lDQWdJQ0FnSUNBZ0lFeHZaMmRsY2k1SFpYUlRkR0ZqYTFSeVlXTmxLQ2tzWEc0Z0lDQWdJQ0FnSUNBZ0lDQW5hV05sSUdOdmJtNWxZM1JwYjI0Z2MzUmhkR1VnWTJoaGJtZGxPaUFuSUNzZ2MzUmhkR1VzWEc0Z0lDQWdJQ0FnSUNBZ0lDQTJYRzRnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXViMjVKWTJWRGIyNXVaV04wYVc5dVUzUmhkR1ZEYUdGdVoyVW9jM1JoZEdVcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFaGhibVJzWlNCM2FHVnVJSFJvWlNCSlkyVWdSMkYwYUdWeWFXNW5JRk4wWVhSbElFTm9ZVzVuWlhOY2JpQWdJQ0FnS2lCQWNHRnlZVzBnYzNSaGRHVWdMU0JKWTJVZ1IyRjBhR1Z5YVc1bklGTjBZWFJsSUVOb1lXNW5aVnh1SUNBZ0lDQXFMMXh1SUNBZ0lHaGhibVJzWlVsalpVZGhkR2hsY21sdVoxTjBZWFJsUTJoaGJtZGxLSE4wWVhSbE9pQkZkbVZ1ZENrZ2UxeHVJQ0FnSUNBZ0lDQk1iMmRuWlhJdVRHOW5LRnh1SUNBZ0lDQWdJQ0FnSUNBZ1RHOW5aMlZ5TGtkbGRGTjBZV05yVkhKaFkyVW9LU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDZHBZMlVnWjJGMGFHVnlhVzVuSUhOMFlYUmxJR05vWVc1blpUb2dKeUFySUVwVFQwNHVjM1J5YVc1bmFXWjVLSE4wWVhSbEtTeGNiaUFnSUNBZ0lDQWdJQ0FnSURaY2JpQWdJQ0FnSUNBZ0tUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkJZM1JwZG1GMFpYTWdkR2hsSUc5dVZISmhZMnNnYldWMGFHOWtYRzRnSUNBZ0lDb2dRSEJoY21GdElHVjJaVzUwSUMwZ1ZHaGxJSGRsWWxKMFl5QjBjbUZqYXlCbGRtVnVkRnh1SUNBZ0lDQXFMMXh1SUNBZ0lHaGhibVJzWlU5dVZISmhZMnNvWlhabGJuUTZJRkpVUTFSeVlXTnJSWFpsYm5RcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1dmJsUnlZV05yS0dWMlpXNTBLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJCWTNScGRtRjBaWE1nZEdobElHOXVVR1ZsY2tsalpVTmhibVJwWkdGMFpWeHVJQ0FnSUNBcUlFQndZWEpoYlNCbGRtVnVkQ0F0SUZSb1pTQndaV1Z5SUdsalpTQmpZVzVrYVdSaGRHVmNiaUFnSUNBZ0tpOWNiaUFnSUNCb1lXNWtiR1ZKWTJWRFlXNWthV1JoZEdVb1pYWmxiblE2SUZKVVExQmxaWEpEYjI1dVpXTjBhVzl1U1dObFJYWmxiblFwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV2YmxCbFpYSkpZMlZEWVc1a2FXUmhkR1VvWlhabGJuUXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRUZqZEdsMllYUmxjeUIwYUdVZ2IyNUVZWFJoUTJoaGJtNWxiRnh1SUNBZ0lDQXFJRUJ3WVhKaGJTQmxkbVZ1ZENBdElGUm9aU0J3WldWeUozTWdaR0YwWVNCamFHRnVibVZzWEc0Z0lDQWdJQ292WEc0Z0lDQWdhR0Z1Wkd4bFJHRjBZVU5vWVc1dVpXd29aWFpsYm5RNklGSlVRMFJoZEdGRGFHRnVibVZzUlhabGJuUXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXZia1JoZEdGRGFHRnVibVZzS0dWMlpXNTBLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJCYmlCdmRtVnljbWxrWlNCdFpYUm9iMlFnWm05eUlHOXVWSEpoWTJzZ1ptOXlJSFZ6WlNCdmRYUnphV1JsSUc5bUlIUm9aU0JRWldWeVEyOXVibVZqZEdsdmJrTnZiblJ5YjJ4c1pYSmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2RISmhZMnRGZG1WdWRDQXRJRlJvWlNCM1pXSlNkR01nZEhKaFkyc2daWFpsYm5SY2JpQWdJQ0FnS2k5Y2JpQWdJQ0F2THlCbGMyeHBiblF0WkdsellXSnNaUzF1WlhoMExXeHBibVVnUUhSNWNHVnpZM0pwY0hRdFpYTnNhVzUwTDI1dkxYVnVkWE5sWkMxMllYSnpYRzRnSUNBZ2IyNVVjbUZqYXloMGNtRmphMFYyWlc1ME9pQlNWRU5VY21GamEwVjJaVzUwS1NCN1hHNGdJQ0FnSUNBZ0lDOHZJRVJsWm1GMWJIUWdSblZ1WTNScGIyNWhiR2wwZVRvZ1JHOGdUbTkwYUdsdVoxeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFRnVJRzkyWlhKeWFXUmxJRzFsZEdodlpDQm1iM0lnYjI1SlkyVkRiMjV1WldOMGFXOXVVM1JoZEdWRGFHRnVaMlVnWm05eUlIVnpaU0J2ZFhSemFXUmxJRzltSUhSb1pTQlFaV1Z5UTI5dWJtVmpkR2x2YmtOdmJuUnliMnhzWlhKY2JpQWdJQ0FnS2lCQWNHRnlZVzBnWlhabGJuUWdMU0JVYUdVZ2QyVmlVblJqSUdsalpXTnZibTVsWTNScGIyNXpkR0YwWldOb1lXNW5aU0JsZG1WdWRGeHVJQ0FnSUNBcUwxeHVJQ0FnSUM4dklHVnpiR2x1ZEMxa2FYTmhZbXhsTFc1bGVIUXRiR2x1WlNCQWRIbHdaWE5qY21sd2RDMWxjMnhwYm5RdmJtOHRkVzUxYzJWa0xYWmhjbk5jYmlBZ0lDQnZia2xqWlVOdmJtNWxZM1JwYjI1VGRHRjBaVU5vWVc1blpTaGxkbVZ1ZERvZ1JYWmxiblFwSUh0Y2JpQWdJQ0FnSUNBZ0x5OGdSR1ZtWVhWc2RDQkdkVzVqZEdsdmJtRnNhWFI1T2lCRWJ5Qk9iM1JvYVc1blhHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1FXNGdiM1psY25KcFpHVWdiV1YwYUc5a0lHWnZjaUJ2YmxCbFpYSkpZMlZEWVc1a2FXUmhkR1VnWm05eUlIVnpaU0J2ZFhSemFXUmxJRzltSUhSb1pTQlFaV1Z5UTI5dWJtVmpkR2x2YmtOdmJuUnliMnhzWlhKY2JpQWdJQ0FnS2lCQWNHRnlZVzBnY0dWbGNrTnZibTVsWTNScGIyNUpZMlZGZG1WdWRDQXRJRlJvWlNCd1pXVnlJR2xqWlNCallXNWthV1JoZEdWY2JpQWdJQ0FnS2k5Y2JpQWdJQ0F2THlCbGMyeHBiblF0WkdsellXSnNaUzF1WlhoMExXeHBibVVnUUhSNWNHVnpZM0pwY0hRdFpYTnNhVzUwTDI1dkxYVnVkWE5sWkMxMllYSnpYRzRnSUNBZ2IyNVFaV1Z5U1dObFEyRnVaR2xrWVhSbEtIQmxaWEpEYjI1dVpXTjBhVzl1U1dObFJYWmxiblE2SUZKVVExQmxaWEpEYjI1dVpXTjBhVzl1U1dObFJYWmxiblFwSUh0Y2JpQWdJQ0FnSUNBZ0x5OGdSR1ZtWVhWc2RDQkdkVzVqZEdsdmJtRnNhWFI1T2lCRWJ5Qk9iM1JvYVc1blhHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1FXNGdiM1psY25KcFpHVWdiV1YwYUc5a0lHWnZjaUJ2YmtSaGRHRkRhR0Z1Ym1Wc0lHWnZjaUIxYzJVZ2IzVjBjMmxrWlNCdlppQjBhR1VnVUdWbGNrTnZibTVsWTNScGIyNURiMjUwY205c2JHVnlYRzRnSUNBZ0lDb2dRSEJoY21GdElHUmhkR0ZqYUdGdWJtVnNSWFpsYm5RZ0xTQlVhR1VnY0dWbGNpZHpJR1JoZEdFZ1kyaGhibTVsYkZ4dUlDQWdJQ0FxTDF4dUlDQWdJQzh2SUdWemJHbHVkQzFrYVhOaFlteGxMVzVsZUhRdGJHbHVaU0JBZEhsd1pYTmpjbWx3ZEMxbGMyeHBiblF2Ym04dGRXNTFjMlZrTFhaaGNuTmNiaUFnSUNCdmJrUmhkR0ZEYUdGdWJtVnNLR1JoZEdGamFHRnVibVZzUlhabGJuUTZJRkpVUTBSaGRHRkRhR0Z1Ym1Wc1JYWmxiblFwSUh0Y2JpQWdJQ0FnSUNBZ0x5OGdSR1ZtWVhWc2RDQkdkVzVqZEdsdmJtRnNhWFI1T2lCRWJ5Qk9iM1JvYVc1blhHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1UyVjBkWEFnZEhKaFkydHpJRzl1SUhSb1pTQlNWRU1nVUdWbGNpQkRiMjV1WldOMGFXOXVYRzRnSUNBZ0lDb2dRSEJoY21GdElIVnpaVTFwWXlBdElHbHpJRzFwWXlCcGJpQjFjMlZjYmlBZ0lDQWdLaTljYmlBZ0lDQmhjM2x1WXlCelpYUjFjRlJ5WVc1elkyVnBkbVZ5YzBGemVXNWpLSFZ6WlUxcFl6b2dZbTl2YkdWaGJpa2dlMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQm9ZWE5VY21GdWMyTmxhWFpsY25NZ1BWeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXdaV1Z5UTI5dWJtVmpkR2x2Ymo4dVoyVjBWSEpoYm5OalpXbDJaWEp6S0NrdWJHVnVaM1JvSUQ0Z01EdGNibHh1SUNBZ0lDQWdJQ0F2THlCVFpYUjFjQ0JoSUhSeVlXNXpZMlZwZG1WeUlHWnZjaUJuWlhSMGFXNW5JRlZGSUhacFpHVnZYRzRnSUNBZ0lDQWdJSFJvYVhNdWNHVmxja052Ym01bFkzUnBiMjQvTG1Ga1pGUnlZVzV6WTJWcGRtVnlLQ2QyYVdSbGJ5Y3NJSHNnWkdseVpXTjBhVzl1T2lBbmNtVmpkbTl1YkhrbklIMHBPMXh1WEc0Z0lDQWdJQ0FnSUM4dklGZGxJR05oYmlCdmJteDVJSE5sZENCd2NtVm1aWEp5WldNZ1kyOWtaV01nYjI0Z1EyaHliMjFsWEc0Z0lDQWdJQ0FnSUdsbUlDaFNWRU5TZEhCU1pXTmxhWFpsY2k1blpYUkRZWEJoWW1sc2FYUnBaWE1nSmlZZ2RHaHBjeTV3Y21WbVpYSnlaV1JEYjJSbFl5QWhQU0FuSnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWm05eUlDaGpiMjV6ZENCMGNtRnVjMk5sYVhabGNpQnZaaUIwYUdsekxuQmxaWEpEYjI1dVpXTjBhVzl1UHk1blpYUlVjbUZ1YzJObGFYWmxjbk1vS1NBL1B5QmJYU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEhKaGJuTmpaV2wyWlhJZ0ppWmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEhKaGJuTmpaV2wyWlhJdWNtVmpaV2wyWlhJZ0ppWmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEhKaGJuTmpaV2wyWlhJdWNtVmpaV2wyWlhJdWRISmhZMnNnSmlaY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkSEpoYm5OalpXbDJaWEl1Y21WalpXbDJaWEl1ZEhKaFkyc3VhMmx1WkNBOVBUMGdKM1pwWkdWdkoxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0J3Y21WbVpYSnlaV1JTVkZCRGIyUmxZeUE5SUhSb2FYTXVjSEpsWm1WeWNtVmtRMjlrWldNdWMzQnNhWFFvSnlBbktUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdZMjlrWldOeklEMGdXMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUcxcGJXVlVlWEJsT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuZG1sa1pXOHZKeUFySUhCeVpXWmxjbkpsWkZKVVVFTnZaR1ZqV3pCZElDOHFJRTVoYldVZ0tpOHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJ4dlkydFNZWFJsT2lBNU1EQXdNQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCelpIQkdiWFJ3VEdsdVpUb2djSEpsWm1WeWNtVmtVbFJRUTI5a1pXTmJNVjBnTHlvZ2MyUndSbTEwY0V4cGJtVWdLaTljYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQeUJ3Y21WbVpYSnlaV1JTVkZCRGIyUmxZMXN4WFZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E2SUNjblhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRjA3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1amIyNW1hV2RjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzVuWlhSVFpYUjBhVzVuVDNCMGFXOXVLRTl3ZEdsdmJsQmhjbUZ0WlhSbGNuTXVVSEpsWm1WeWNtVmtRMjlrWldNcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdWIzQjBhVzl1Y3k1bWFXeDBaWElvS0c5d2RHbHZiaWtnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUZKbGJXOTJaU0IwYUdVZ2NISmxabVZ5Y21Wa0lHTnZaR1ZqSUdaeWIyMGdkR2hsSUd4cGMzUWdiMllnY0c5emMybGliR1VnWTI5a1pXTnpJR0Z6SUhkbEozWmxJSE5sZENCcGRDQmhiSEpsWVdSNVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHOXdkR2x2YmlBaFBTQjBhR2x6TG5CeVpXWmxjbkpsWkVOdlpHVmpPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzVtYjNKRllXTm9LQ2h2Y0hScGIyNHBJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJCYlcxbGJtUWdkR2hsSUhKbGMzUWdiMllnZEdobElHSnliM2R6WlhKeklITjFjSEJ2Y25SbFpDQmpiMlJsWTNOY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCaGJIUkRiMlJsWXlBOUlHOXdkR2x2Ymk1emNHeHBkQ2duSUNjcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052WkdWamN5NXdkWE5vS0h0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYldsdFpWUjVjR1U2SUNkMmFXUmxieThuSUNzZ1lXeDBRMjlrWldOYk1GMGdMeW9nVG1GdFpTQXFMeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMnh2WTJ0U1lYUmxPaUE1TURBd01DeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyUndSbTEwY0V4cGJtVTZJR0ZzZEVOdlpHVmpXekZkSUM4cUlITmtjRVp0ZEhCTWFXNWxJQ292WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBL0lHRnNkRU52WkdWald6RmRYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E2SUNjblhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYjNJZ0tHTnZibk4wSUdOdlpHVmpJRzltSUdOdlpHVmpjeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHTnZaR1ZqTG5Oa2NFWnRkSEJNYVc1bElEMDlQU0FuSnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUZkbElHTmhiaWQwSUdSNWJtRnRhV05oYkd4NUlHRmtaQ0J0WlcxaVpYSnpJSFJ2SUhSb1pTQmpiMlJsWXl3Z2MyOGdhVzV6ZEdWaFpDQnlaVzF2ZG1VZ2RHaGxJR1pwWld4a0lHbG1JR2wwSjNNZ1pXMXdkSGxjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa1pXeGxkR1VnWTI5a1pXTXVjMlJ3Um0xMGNFeHBibVU3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGNtRnVjMk5sYVhabGNpNXpaWFJEYjJSbFkxQnlaV1psY21WdVkyVnpLR052WkdWamN5azdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1UyVjBkWEFnWVNCMGNtRnVjMk5sYVhabGNpQm1iM0lnYzJWdVpHbHVaeUJ0YVdNZ1lYVmthVzhnZEc4Z1ZVVWdZVzVrSUhKbFkyVnBkbWx1WnlCaGRXUnBieUJtY205dElGVkZYRzRnSUNBZ0lDQWdJR2xtSUNnaGRYTmxUV2xqS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuQmxaWEpEYjI1dVpXTjBhVzl1UHk1aFpHUlVjbUZ1YzJObGFYWmxjaWduWVhWa2FXOG5MQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkdseVpXTjBhVzl1T2lBbmNtVmpkbTl1YkhrblhHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUhObGRDQjBhR1VnWVhWa2FXOGdiM0IwYVc5dWN5QmlZWE5sWkNCdmJpQnRhV01nZFhOaFoyVmNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJR0YxWkdsdlQzQjBhVzl1Y3lBOUlIVnpaVTFwWTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUQ4Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdGMWRHOUhZV2x1UTI5dWRISnZiRG9nWm1Gc2MyVXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyaGhibTVsYkVOdmRXNTBPaUF4TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1ZqYUc5RFlXNWpaV3hzWVhScGIyNDZJR1poYkhObExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4aGRHVnVZM2s2SURBc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYm05cGMyVlRkWEJ3Y21WemMybHZiam9nWm1Gc2MyVXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyRnRjR3hsVW1GMFpUb2dORGd3TURBc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJGdGNHeGxVMmw2WlRvZ01UWXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtOXNkVzFsT2lBeExqQmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E2SUdaaGJITmxPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJ6WlhRZ2RHaGxJRzFsWkdsaElITmxibVFnYjNCMGFXOXVjMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnYldWa2FXRlRaVzVrVDNCMGFXOXVjem9nVFdWa2FXRlRkSEpsWVcxRGIyNXpkSEpoYVc1MGN5QTlJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyYVdSbGJ6b2dabUZzYzJVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lYVmthVzg2SUdGMVpHbHZUM0IwYVc5dWMxeHVJQ0FnSUNBZ0lDQWdJQ0FnZlR0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1RtOTBaU0IxYzJsdVp5QnRhV01nYjI0Z1lXNWtjbTlwWkNCamFISnZiV1VnY21WeGRXbHlaWE1nVTFOTUlHOXlJR05vY205dFpUb3ZMMlpzWVdkekx5QmNJblZ1YzJGbVpXeDVMWFJ5WldGMExXbHVjMlZqZFhKbExXOXlhV2RwYmkxaGN5MXpaV04xY21WY0lseHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdjM1J5WldGdElEMGdZWGRoYVhRZ2JtRjJhV2RoZEc5eUxtMWxaR2xoUkdWMmFXTmxjeTVuWlhSVmMyVnlUV1ZrYVdFb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JXVmthV0ZUWlc1a1QzQjBhVzl1YzF4dUlDQWdJQ0FnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h6ZEhKbFlXMHBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2FHRnpWSEpoYm5OalpXbDJaWEp6S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2Y2lBb1kyOXVjM1FnZEhKaGJuTmpaV2wyWlhJZ2IyWWdkR2hwY3k1d1pXVnlRMjl1Ym1WamRHbHZiajh1WjJWMFZISmhibk5qWldsMlpYSnpLQ2tnUHo4Z1cxMHBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBjbUZ1YzJObGFYWmxjaUFtSmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUnlZVzV6WTJWcGRtVnlMbkpsWTJWcGRtVnlJQ1ltWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RISmhibk5qWldsMlpYSXVjbVZqWldsMlpYSXVkSEpoWTJzZ0ppWmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwY21GdWMyTmxhWFpsY2k1eVpXTmxhWFpsY2k1MGNtRmpheTVyYVc1a0lEMDlQU0FuWVhWa2FXOG5YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWIzSWdLR052Ym5OMElIUnlZV05ySUc5bUlITjBjbVZoYlM1blpYUlVjbUZqYTNNb0tTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEhKaFkyc3VhMmx1WkNBbUppQjBjbUZqYXk1cmFXNWtJRDA5SUNkaGRXUnBieWNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUnlZVzV6WTJWcGRtVnlMbk5sYm1SbGNpNXlaWEJzWVdObFZISmhZMnNvZEhKaFkyc3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEhKaGJuTmpaV2wyWlhJdVpHbHlaV04wYVc5dUlEMGdKM05sYm1SeVpXTjJKenRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdadmNpQW9ZMjl1YzNRZ2RISmhZMnNnYjJZZ2MzUnlaV0Z0TG1kbGRGUnlZV05yY3lncEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEhKaFkyc3VhMmx1WkNBbUppQjBjbUZqYXk1cmFXNWtJRDA5SUNkaGRXUnBieWNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5CbFpYSkRiMjV1WldOMGFXOXVQeTVoWkdSVWNtRnVjMk5sYVhabGNpaDBjbUZqYXl3Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa2FYSmxZM1JwYjI0NklDZHpaVzVrY21WamRpZGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV3WldWeVEyOXVibVZqZEdsdmJqOHVZV1JrVkhKaGJuTmpaV2wyWlhJb0oyRjFaR2x2Snl3Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrYVhKbFkzUnBiMjQ2SUNkeVpXTjJiMjVzZVNkY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFRnVaQ0J2ZG1WeWNtbGtaU0JsZG1WdWRDQm1iM0lnZDJobGJpQjBhR1VnZG1sa1pXOGdjM1JoZEhNZ1lYSmxJR1pwY21Wa1hHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUdWMlpXNTBJQzBnUVdkbmNtVm5ZWFJsWkNCVGRHRjBjMXh1SUNBZ0lDQXFMMXh1SUNBZ0lDOHZJR1Z6YkdsdWRDMWthWE5oWW14bExXNWxlSFF0YkdsdVpTQkFkSGx3WlhOamNtbHdkQzFsYzJ4cGJuUXZibTh0ZFc1MWMyVmtMWFpoY25OY2JpQWdJQ0J2YmxacFpHVnZVM1JoZEhNb1pYWmxiblE2SUVGblozSmxaMkYwWldSVGRHRjBjeWtnZTF4dUlDQWdJQ0FnSUNBdkx5QkVaV1poZFd4MElFWjFibU4wYVc5dVlXeHBkSGs2SUVSdklFNXZkR2hwYm1kY2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCRmRtVnVkQ0IwYnlCelpXNWtJSFJvWlNCU1ZFTWdiMlptWlhJZ2RHOGdkR2hsSUZOcFoyNWhiR2x1WnlCelpYSjJaWEpjYmlBZ0lDQWdLaUJBY0dGeVlXMGdiMlptWlhJZ0xTQlNWRU1nVDJabVpYSmNiaUFnSUNBZ0tpOWNiaUFnSUNBdkx5QmxjMnhwYm5RdFpHbHpZV0pzWlMxdVpYaDBMV3hwYm1VZ1FIUjVjR1Z6WTNKcGNIUXRaWE5zYVc1MEwyNXZMWFZ1ZFhObFpDMTJZWEp6WEc0Z0lDQWdiMjVUWlc1a1YyVmlVbFJEVDJabVpYSW9iMlptWlhJNklGSlVRMU5sYzNOcGIyNUVaWE5qY21sd2RHbHZia2x1YVhRcElIdGNiaUFnSUNBZ0lDQWdMeThnUkdWbVlYVnNkQ0JHZFc1amRHbHZibUZzYVhSNU9pQkVieUJPYjNSb2FXNW5YRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dSWFpsYm5RZ2RHOGdjMlZ1WkNCMGFHVWdVbFJESUVGdWMzZGxjaUIwYnlCMGFHVWdVMmxuYm1Gc2FXNW5JSE5sY25abGNseHVJQ0FnSUNBcUlFQndZWEpoYlNCaGJuTjNaWElnTFNCU1ZFTWdRVzV6ZDJWeVhHNGdJQ0FnSUNvdlhHNGdJQ0FnTHk4Z1pYTnNhVzUwTFdScGMyRmliR1V0Ym1WNGRDMXNhVzVsSUVCMGVYQmxjMk55YVhCMExXVnpiR2x1ZEM5dWJ5MTFiblZ6WldRdGRtRnljMXh1SUNBZ0lHOXVVMlZ1WkZkbFlsSlVRMEZ1YzNkbGNpaGhibk4zWlhJNklGSlVRMU5sYzNOcGIyNUVaWE5qY21sd2RHbHZia2x1YVhRcElIdGNiaUFnSUNBZ0lDQWdMeThnUkdWbVlYVnNkQ0JHZFc1amRHbHZibUZzYVhSNU9pQkVieUJPYjNSb2FXNW5YRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dRVzRnYjNabGNuSnBaR1VnWm05eUlITm9iM2RwYm1jZ2RHaGxJRkJsWlhJZ1kyOXVibVZqZEdsdmJpQmpiMjV1WldOMGFXNW5JRTkyWlhKc1lYbGNiaUFnSUNBZ0tpOWNiaUFnSUNCemFHOTNWR1Y0ZEU5MlpYSnNZWGxEYjI1dVpXTjBhVzVuS0NrZ2UxeHVJQ0FnSUNBZ0lDQXZMeUJFWldaaGRXeDBJRVoxYm1OMGFXOXVZV3hwZEhrNklFUnZJRTV2ZEdocGJtZGNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkJiaUJ2ZG1WeWNtbGtaU0JtYjNJZ2MyaHZkMmx1WnlCMGFHVWdVR1ZsY2lCamIyNXVaV04wYVc5dUlFWmhhV3hsWkNCdmRtVnliR0Y1WEc0Z0lDQWdJQ292WEc0Z0lDQWdjMmh2ZDFSbGVIUlBkbVZ5YkdGNVUyVjBkWEJHWVdsc2RYSmxLQ2tnZTF4dUlDQWdJQ0FnSUNBdkx5QkVaV1poZFd4MElFWjFibU4wYVc5dVlXeHBkSGs2SUVSdklFNXZkR2hwYm1kY2JpQWdJQ0I5WEc1Y2JpQWdJQ0J3WVhKelpVRjJZV2xzWVdKc1pVTnZaR1ZqY3loY2JpQWdJQ0FnSUNBZ2NuUmpVMlZ6YzJsdmJrUmxjMk55YVhCMGFXOXVPaUJTVkVOVFpYTnphVzl1UkdWelkzSnBjSFJwYjI1SmJtbDBYRzRnSUNBZ0tUb2dRWEp5WVhrOGMzUnlhVzVuUGlCN1hHNGdJQ0FnSUNBZ0lDOHZJRTV2SUhCdmFXNTBJR2x1SUhWd1pHRjBhVzVuSUhSb1pTQmhkbUZwYkdGaWJHVWdZMjlrWldOeklHbG1JRzl1SUVaR1hHNGdJQ0FnSUNBZ0lHbG1JQ2doVWxSRFVuUndVbVZqWldsMlpYSXVaMlYwUTJGd1lXSnBiR2wwYVdWektWeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRnNuVDI1c2VTQmhkbUZwYkdGaWJHVWdiMjRnUTJoeWIyMWxKMTA3WEc1Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnZFdWVGRYQndiM0owWldSRGIyUmxZM002SUVGeWNtRjVQSE4wY21sdVp6NGdQU0JiWFR0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYzJWamRHbHZibk1nUFNCemNHeHBkRk5sWTNScGIyNXpLSEowWTFObGMzTnBiMjVFWlhOamNtbHdkR2x2Ymk1elpIQXBPMXh1SUNBZ0lDQWdJQ0F2THlCa2FYTmpZWEprSUhSb1pTQnpaWE56YVc5dUlHbHVabTl5YldGMGFXOXVJR0Z6SUhkbElHOXViSGtnZDJGdWRDQnRaV1JwWVNCeVpXeGhkR1ZrSUdsdVptOWNiaUFnSUNBZ0lDQWdjMlZqZEdsdmJuTXVjMmhwWm5Rb0tUdGNiaUFnSUNBZ0lDQWdjMlZqZEdsdmJuTXVabTl5UldGamFDZ29iV1ZrYVdGVFpXTjBhVzl1S1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0I3SUdOdlpHVmpjeUI5SUQwZ2NHRnljMlZTZEhCUVlYSmhiV1YwWlhKektHMWxaR2xoVTJWamRHbHZiaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJHYVd4MFpYSWdiMjVzZVNCbWIzSWdWbEJZSUM4Z1NESTJXQ0F2SUVGV01WeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdiV0YwWTJobGNpQTlJQzhvVmxCY1hHUjhTREkyWEZ4a2ZFRldNU2t1S2k4N1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjJSbFkzTXVabTl5UldGamFDZ29ZeWtnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUhOMGNpQTlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdNdWJtRnRaU0FyWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDY2dKeUFyWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lFOWlhbVZqZEM1clpYbHpLR011Y0dGeVlXMWxkR1Z5Y3lCOGZDQjdmU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzV0WVhBb0tIQXBJRDArSUhBZ0t5QW5QU2NnS3lCakxuQmhjbUZ0WlhSbGNuTmJjRjBwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F1YW05cGJpZ25PeWNwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJRzFoZEdOb0lEMGdiV0YwWTJobGNpNWxlR1ZqS0hOMGNpazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0cxaGRHTm9JQ0U5UFNCdWRXeHNLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hqTG01aGJXVWdQVDBnSjFaUU9TY3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUZWRklHRnVjM2RsY25NZ1pHOXVKM1FnYzNCbFkybG1lU0J3Y205bWFXeGxJR0oxZENCM1pTQnJibTkzSUhkbElIZGhiblFnY0hKdlptbHNaU0F3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqTG5CaGNtRnRaWFJsY25NZ1BTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSjNCeWIyWnBiR1V0YVdRbk9pQW5NQ2RjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdZMjlrWldOVGRISTZJSE4wY21sdVp5QTlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpMbTVoYldVZ0sxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0p5QW5JQ3RjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRTlpYW1WamRDNXJaWGx6S0dNdWNHRnlZVzFsZEdWeWN5QjhmQ0I3ZlNsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXViV0Z3S0Nod0tTQTlQaUJ3SUNzZ0p6MG5JQ3NnWXk1d1lYSmhiV1YwWlhKelczQmRLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM1cWIybHVLQ2M3SnlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFZsVTNWd2NHOXlkR1ZrUTI5a1pXTnpMbkIxYzJnb1kyOWtaV05UZEhJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQjlLVHRjYmx4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZFdWVGRYQndiM0owWldSRGIyUmxZM003WEc0Z0lDQWdmVnh1ZlZ4dUlpd2lMeThnUTI5d2VYSnBaMmgwSUVWd2FXTWdSMkZ0WlhNc0lFbHVZeTRnUVd4c0lGSnBaMmgwY3lCU1pYTmxjblpsWkM1Y2JseHVMeW9xWEc0Z0tpQlRaWE56YVc5dUlITjBZWFJwYzNScFkzTmNiaUFxTDF4dVpYaHdiM0owSUdOc1lYTnpJRk5sYzNOcGIyNVRkR0YwY3lCN1hHNGdJQ0FnY25WdVZHbHRaVG9nYzNSeWFXNW5PMXh1SUNBZ0lHTnZiblJ5YjJ4elUzUnlaV0Z0U1c1d2RYUTZJSE4wY21sdVp6dGNiaUFnSUNCMmFXUmxiMFZ1WTI5a1pYSkJkbWRSVURvZ2JuVnRZbVZ5TzF4dWZWeHVJaXdpTHk4Z1EyOXdlWEpwWjJoMElFVndhV01nUjJGdFpYTXNJRWx1WXk0Z1FXeHNJRkpwWjJoMGN5QlNaWE5sY25abFpDNWNibHh1THlvcVhHNGdLaUJEYkdGemN5QjBieUJvYjJ4a0lIUm9aU0J6ZEhKbFlXMGdjM1JoZEhNZ1pHRjBZU0JqYjIxcGJtY2dhVzRnWm5KdmJTQjNaV0pTZEdOY2JpQXFMMXh1Wlhod2IzSjBJR05zWVhOeklGTjBjbVZoYlZOMFlYUnpJSHRjYmlBZ0lDQnBaRG9nYzNSeWFXNW5PMXh1SUNBZ0lITjBjbVZoYlVsa1pXNTBhV1pwWlhJNklITjBjbWx1Wnp0Y2JpQWdJQ0IwYVcxbGMzUmhiWEE2SUc1MWJXSmxjanRjYmlBZ0lDQjBjbUZqYTBsa2N6b2djM1J5YVc1blcxMDdYRzU5WEc0aUxDSXZMeUJEYjNCNWNtbG5hSFFnUlhCcFl5QkhZVzFsY3l3Z1NXNWpMaUJCYkd3Z1VtbG5hSFJ6SUZKbGMyVnlkbVZrTGx4dVhHNXBiWEJ2Y25RZ2V5QkRiMjVtYVdjc0lFOXdkR2x2YmxCaGNtRnRaWFJsY25NZ2ZTQm1jbTl0SUNjdUxpOURiMjVtYVdjdlEyOXVabWxuSnp0Y2JtbHRjRzl5ZENCN0lFeGhkR1Z1WTNsVVpYTjBVbVZ6ZFd4MGN5QjlJR1p5YjIwZ0p5NHVMMFJoZEdGRGFHRnVibVZzTDB4aGRHVnVZM2xVWlhOMFVtVnpkV3gwY3ljN1hHNXBiWEJ2Y25RZ2V5QkJaMmR5WldkaGRHVmtVM1JoZEhNZ2ZTQm1jbTl0SUNjdUxpOVFaV1Z5UTI5dWJtVmpkR2x2YmtOdmJuUnliMnhzWlhJdlFXZG5jbVZuWVhSbFpGTjBZWFJ6Snp0Y2JtbHRjRzl5ZENCN0lGZGxZbEowWTFCc1lYbGxja052Ym5SeWIyeHNaWElnZlNCbWNtOXRJQ2N1TGk5WFpXSlNkR05RYkdGNVpYSXZWMlZpVW5SalVHeGhlV1Z5UTI5dWRISnZiR3hsY2ljN1hHNXBiWEJ2Y25RZ2V5QkdiR0ZuY3l3Z1RuVnRaWEpwWTFCaGNtRnRaWFJsY25NZ2ZTQm1jbTl0SUNjdUxpOURiMjVtYVdjdlEyOXVabWxuSnp0Y2JtbHRjRzl5ZENCN0lFeHZaMmRsY2lCOUlHWnliMjBnSnk0dUwweHZaMmRsY2k5TWIyZG5aWEluTzF4dWFXMXdiM0owSUhzZ1NXNXBkR2xoYkZObGRIUnBibWR6SUgwZ1puSnZiU0FuTGk0dlJHRjBZVU5vWVc1dVpXd3ZTVzVwZEdsaGJGTmxkSFJwYm1kekp6dGNibWx0Y0c5eWRDQjdJRTl1VTJOeVpXVnVTMlY1WW05aGNtUWdmU0JtY205dElDY3VMaTlWU1M5UGJsTmpjbVZsYmt0bGVXSnZZWEprSnp0Y2JtbHRjRzl5ZENCN1hHNGdJQ0FnUlhabGJuUkZiV2wwZEdWeUxGeHVJQ0FnSUVsdWFYUnBZV3hUWlhSMGFXNW5jMFYyWlc1MExGeHVJQ0FnSUV4aGRHVnVZM2xVWlhOMFVtVnpkV3gwUlhabGJuUXNYRzRnSUNBZ1VHbDRaV3hUZEhKbFlXMXBibWRGZG1WdWRDeGNiaUFnSUNCVGRHRjBjMUpsWTJWcGRtVmtSWFpsYm5Rc1hHNGdJQ0FnVTNSeVpXRnRURzloWkdsdVowVjJaVzUwTEZ4dUlDQWdJRk4wY21WaGJWQnlaVU52Ym01bFkzUkZkbVZ1ZEN4Y2JpQWdJQ0JUZEhKbFlXMVNaV052Ym01bFkzUkZkbVZ1ZEN4Y2JpQWdJQ0JUZEhKbFlXMVFjbVZFYVhOamIyNXVaV04wUlhabGJuUXNYRzRnSUNBZ1ZtbGtaVzlGYm1OdlpHVnlRWFpuVVZCRmRtVnVkQ3hjYmlBZ0lDQldhV1JsYjBsdWFYUnBZV3hwZW1Wa1JYWmxiblFzWEc0Z0lDQWdWMlZpVW5SalFYVjBiME52Ym01bFkzUkZkbVZ1ZEN4Y2JpQWdJQ0JYWldKU2RHTkRiMjV1WldOMFpXUkZkbVZ1ZEN4Y2JpQWdJQ0JYWldKU2RHTkRiMjV1WldOMGFXNW5SWFpsYm5Rc1hHNGdJQ0FnVjJWaVVuUmpSR2x6WTI5dWJtVmpkR1ZrUlhabGJuUXNYRzRnSUNBZ1YyVmlVblJqUm1GcGJHVmtSWFpsYm5Rc1hHNGdJQ0FnVjJWaVVuUmpVMlJ3UlhabGJuUmNibjBnWm5KdmJTQW5MaTR2VlhScGJDOUZkbVZ1ZEVWdGFYUjBaWEluTzF4dWFXMXdiM0owSUhzZ1RXVnpjMkZuWlU5dVUyTnlaV1Z1UzJWNVltOWhjbVFnZlNCbWNtOXRJQ2N1TGk5WFpXSlRiMk5yWlhSekwwMWxjM05oWjJWU1pXTmxhWFpsSnp0Y2JtbHRjRzl5ZENCN0lGZGxZbGhTUTI5dWRISnZiR3hsY2lCOUlHWnliMjBnSnk0dUwxZGxZbGhTTDFkbFlsaFNRMjl1ZEhKdmJHeGxjaWM3WEc1Y2JtVjRjRzl5ZENCcGJuUmxjbVpoWTJVZ1VHbDRaV3hUZEhKbFlXMXBibWRQZG1WeWNtbGtaWE1nZTF4dUlDQWdJQzhxS2lCVWFHVWdSRTlOSUdWc2JXVnVkQ0IzYUdWeVpTQlFhWGhsYkNCVGRISmxZVzFwYm1jZ2RtbGtaVzhnWVc1a0lIVnpaWElnYVc1d2RYUWdaWFpsYm5RZ2FHRnVaR3hsY25NZ1lYSmxJR0YwZEdGamFHVmtJSFJ2TGx4dUlDQWdJQ0FxSUZsdmRTQmpZVzRnWjJsMlpTQmhiaUJsZUdsemRHbHVaeUJFVDAwZ1pXeGxiV1Z1ZENCb1pYSmxMaUJKWmlCdWIzUWdaMmwyWlc0c0lIUm9aU0JzYVdKeVlYSjVJSGRwYkd3Z1kzSmxZWFJsSUdFZ2JtVjNJR1JwZGlCbGJHVnRaVzUwWEc0Z0lDQWdJQ29nZEdoaGRDQnBjeUJ1YjNRZ1lYUjBZV05vWldRZ1lXNTVkMmhsY21VdUlFbHVJSFJvYVhNZ1kyRnpaU0I1YjNVZ1kyRnVJR3hoZEdWeUlHZGxkQ0JoWTJObGMzTWdkRzhnZEdocGN5QnVaWGNnWld4bGJXVnVkQ0JoYm1SY2JpQWdJQ0FnS2lCaGRIUmhZMmdnYVhRZ2RHOGdlVzkxY2lCM1pXSWdjR0ZuWlM0Z0tpOWNiaUFnSUNCMmFXUmxiMFZzWlcxbGJuUlFZWEpsYm5RL09pQklWRTFNUld4bGJXVnVkRHRjYm4xY2JseHVMeW9xWEc0Z0tpQlVhR1VnYTJWNUlHTnNZWE56SUdadmNpQjBhR1VnWW5KdmQzTmxjaUJ6YVdSbElHOW1JR0VnVUdsNFpXd2dVM1J5WldGdGFXNW5JR0Z3Y0d4cFkyRjBhVzl1TENCcGRDQnBibU5zZFdSbGN6cGNiaUFxSUZkbFlsSlVReUJvWVc1a2JHbHVaeXdnV0ZJZ2MzVndjRzl5ZEN3Z2FXNXdkWFFnYUdGdVpHeHBibWNzSUdGdVpDQmxiV2wwZEdWeWN5Qm1iM0lnYkdsbVpYUnBiV1VnWVc1a0lITjBZWFJsSUdOb1lXNW5aU0JsZG1WdWRITXVYRzRnS2lCVmMyVnljeUJoY21VZ1pXNWpiM1Z5WVdkbFpDQjBieUIxYzJVZ2RHaHBjeUJqYkdGemN5QmhjeUJwY3l3Z2RHaHliM1ZuYUNCamIyMXdiM05wZEdsdmJpd2diM0lnWlhoMFpXNWtJR2wwTGlCSmJpQmhibmtnWTJGelpTd2dYRzRnS2lCMGFHbHpJSGRwYkd3Z2JHbHJaV3g1SUdKbElIUm9aU0JqYjNKbElHOW1JSGx2ZFhJZ1VHbDRaV3dnVTNSeVpXRnRhVzVuSUdWNGNHVnlhV1Z1WTJVZ2FXNGdkR1Z5YlhNZ2IyWWdablZ1WTNScGIyNWhiR2wwZVM1Y2JpQXFMMXh1Wlhod2IzSjBJR05zWVhOeklGQnBlR1ZzVTNSeVpXRnRhVzVuSUh0Y2JpQWdJQ0J3Y205MFpXTjBaV1FnWDNkbFlsSjBZME52Ym5SeWIyeHNaWEk2SUZkbFlsSjBZMUJzWVhsbGNrTnZiblJ5YjJ4c1pYSTdYRzRnSUNBZ2NISnZkR1ZqZEdWa0lGOTNaV0pZY2tOdmJuUnliMnhzWlhJNklGZGxZbGhTUTI5dWRISnZiR3hsY2p0Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCRGIyNW1hV2QxY21GMGFXOXVJRzlpYW1WamRDNGdXVzkxSUdOaGJpQnlaV0ZrSUc5eUlHMXZaR2xtZVNCamIyNW1hV2NnZEdoeWIzVm5hQ0IwYUdseklHOWlhbVZqZEM0Z1YyaGxibVYyWlhKY2JpQWdJQ0FnS2lCMGFHVWdZMjl1Wm1sbmRYSmhkR2x2YmlCcGN5QmphR0Z1WjJWa0xDQjBhR1VnYkdsaWNtRnllU0IzYVd4c0lHVnRhWFFnWVNCZ2MyVjBkR2x1WjNORGFHRnVaMlZrWUNCbGRtVnVkQzVjYmlBZ0lDQWdLaTljYmlBZ0lDQndkV0pzYVdNZ1kyOXVabWxuT2lCRGIyNW1hV2M3WEc1Y2JpQWdJQ0J3Y21sMllYUmxJRjkyYVdSbGIwVnNaVzFsYm5SUVlYSmxiblE2SUVoVVRVeEZiR1Z0Wlc1ME8xeHVYRzRnSUNBZ1gzTm9iM2RCWTNScGIyNVBja1Z5Y205eVQyNUVhWE5qYjI1dVpXTjBJRDBnZEhKMVpUdGNiaUFnSUNCd2NtbDJZWFJsSUdGc2JHOTNRMjl1YzI5c1pVTnZiVzFoYm1SeklEMGdabUZzYzJVN1hHNWNiaUFnSUNCd2NtbDJZWFJsSUc5dVUyTnlaV1Z1UzJWNVltOWhjbVJJWld4d1pYSTZJRTl1VTJOeVpXVnVTMlY1WW05aGNtUTdYRzVjYmlBZ0lDQndjbWwyWVhSbElGOTJhV1JsYjFOMFlYSjBWR2x0WlRvZ2JuVnRZbVZ5TzF4dUlDQWdJSEJ5YVhaaGRHVWdYMmx1Y0hWMFEyOXVkSEp2Ykd4bGNqb2dZbTl2YkdWaGJqdGNibHh1SUNBZ0lIQnlhWFpoZEdVZ1gyVjJaVzUwUlcxcGRIUmxjam9nUlhabGJuUkZiV2wwZEdWeU8xeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dRSEJoY21GdElHTnZibVpwWnlBdElFRWdibVYzYkhrZ2FXNXpkR0Z1ZEdsaGRHVmtJR052Ym1acFp5QnZZbXBsWTNSY2JpQWdJQ0FnS2lCQWNHRnlZVzBnYjNabGNuSnBaR1Z6SUMwZ1VHRnlZVzFsZEdWeWN5QjBieUJ2ZG1WeWNtbGtaU0JrWldaaGRXeDBJR0psYUdGMmFXOTFjbHh1SUNBZ0lDQXFJSEpsZEhWeWJuTWdkR2hsSUdKaGMyVWdVR2w0Wld3Z2MzUnlaV0Z0YVc1bklHOWlhbVZqZEZ4dUlDQWdJQ0FxTDF4dUlDQWdJR052Ym5OMGNuVmpkRzl5S0dOdmJtWnBaem9nUTI5dVptbG5MQ0J2ZG1WeWNtbGtaWE0vT2lCUWFYaGxiRk4wY21WaGJXbHVaMDkyWlhKeWFXUmxjeWtnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbU52Ym1acFp5QTlJR052Ym1acFp6dGNibHh1SUNBZ0lDQWdJQ0JwWmlBb2IzWmxjbkpwWkdWelB5NTJhV1JsYjBWc1pXMWxiblJRWVhKbGJuUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDNacFpHVnZSV3hsYldWdWRGQmhjbVZ1ZENBOUlHOTJaWEp5YVdSbGN5NTJhV1JsYjBWc1pXMWxiblJRWVhKbGJuUTdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCMGFHbHpMbDlsZG1WdWRFVnRhWFIwWlhJZ1BTQnVaWGNnUlhabGJuUkZiV2wwZEdWeUtDazdYRzVjYmlBZ0lDQWdJQ0FnZEdocGN5NWpiMjVtYVdkMWNtVlRaWFIwYVc1bmN5Z3BPMXh1WEc0Z0lDQWdJQ0FnSUM4dklITmxkSFZ3SUZkbFlsSlVRMXh1SUNBZ0lDQWdJQ0IwYUdsekxuTmxkRmRsWWxKMFkxQnNZWGxsY2tOdmJuUnliMnhzWlhJb1hHNGdJQ0FnSUNBZ0lDQWdJQ0J1WlhjZ1YyVmlVblJqVUd4aGVXVnlRMjl1ZEhKdmJHeGxjaWgwYUdsekxtTnZibVpwWnl3Z2RHaHBjeWxjYmlBZ0lDQWdJQ0FnS1R0Y2JseHVJQ0FnSUNBZ0lDQXZMeUJQYm5OamNtVmxiaUJyWlhsaWIyRnlaRnh1SUNBZ0lDQWdJQ0IwYUdsekxtOXVVMk55WldWdVMyVjVZbTloY21SSVpXeHdaWElnUFNCdVpYY2dUMjVUWTNKbFpXNUxaWGxpYjJGeVpDaGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVkbWxrWlc5RmJHVnRaVzUwVUdGeVpXNTBYRzRnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXViMjVUWTNKbFpXNUxaWGxpYjJGeVpFaGxiSEJsY2k1MWJuRjFZVzUwYVhwbFFXNWtSR1Z1YjNKdFlXeHBlbVZWYm5OcFoyNWxaQ0E5SUNoY2JpQWdJQ0FnSUNBZ0lDQWdJSGc2SUc1MWJXSmxjaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lIazZJRzUxYldKbGNseHVJQ0FnSUNBZ0lDQXBJRDArWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5M1pXSlNkR05EYjI1MGNtOXNiR1Z5TG5KbGNYVmxjM1JWYm5GMVlXNTBhWHBsWkVGdVpFUmxibTl5YldGc2FYcGxWVzV6YVdkdVpXUW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdlQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I1WEc0Z0lDQWdJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOWhZM1JwZG1GMFpVOXVVMk55WldWdVMyVjVZbTloY21RZ1BTQW9ZMjl0YldGdVpEb2dUV1Z6YzJGblpVOXVVMk55WldWdVMyVjVZbTloY21RcElEMCtYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbTl1VTJOeVpXVnVTMlY1WW05aGNtUklaV3h3WlhJdWMyaHZkMDl1VTJOeVpXVnVTMlY1WW05aGNtUW9ZMjl0YldGdVpDazdYRzVjYmlBZ0lDQWdJQ0FnZEdocGN5NWZkMlZpV0hKRGIyNTBjbTlzYkdWeUlEMGdibVYzSUZkbFlsaFNRMjl1ZEhKdmJHeGxjaWgwYUdsekxsOTNaV0pTZEdORGIyNTBjbTlzYkdWeUtUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkhaWFJ6SUhSb1pTQmxiR1Z0Wlc1MElIUm9ZWFFnWTI5dWRHRnBibk1nZEdobElIWnBaR1Z2SUhOMGNtVmhiU0JsYkdWdFpXNTBMbHh1SUNBZ0lDQXFMMXh1SUNBZ0lIQjFZbXhwWXlCblpYUWdkbWxrWlc5RmJHVnRaVzUwVUdGeVpXNTBLQ2s2SUVoVVRVeEZiR1Z0Wlc1MElIdGNiaUFnSUNBZ0lDQWdhV1lnS0NGMGFHbHpMbDkyYVdSbGIwVnNaVzFsYm5SUVlYSmxiblFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgzWnBaR1Z2Uld4bGJXVnVkRkJoY21WdWRDQTlJR1J2WTNWdFpXNTBMbU55WldGMFpVVnNaVzFsYm5Rb0oyUnBkaWNwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmRtbGtaVzlGYkdWdFpXNTBVR0Z5Wlc1MExtbGtJRDBnSjNacFpHVnZSV3hsYldWdWRGQmhjbVZ1ZENjN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDNacFpHVnZSV3hsYldWdWRGQmhjbVZ1ZER0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCRGIyNW1hV2QxY21VZ2RHaGxJSE5sZEhScGJtZHpJSGRwZEdnZ2IyNGdZMmhoYm1kbElHeHBjM1JsYm1WeWN5QmhibVFnWVc1NUlHRmtaR2wwYVc5dVlXd2djR1Z5SUdWNGNHVnlhV1Z1WTJVZ2MyVjBkR2x1WjNNdVhHNGdJQ0FnSUNvdlhHNGdJQ0FnY0hKcGRtRjBaU0JqYjI1bWFXZDFjbVZUWlhSMGFXNW5jeWdwT2lCMmIybGtJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWpiMjVtYVdjdVgyRmtaRTl1VTJWMGRHbHVaME5vWVc1blpXUk1hWE4wWlc1bGNpaGNiaUFnSUNBZ0lDQWdJQ0FnSUVac1lXZHpMa2x6VVhWaGJHbDBlVU52Ym5SeWIyeHNaWElzWEc0Z0lDQWdJQ0FnSUNBZ0lDQW9kMkZ1ZEhOUmRXRnNhWFI1UTI5dWRISnZiR3hsY2pvZ1ltOXZiR1ZoYmlrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUVsbUlIUm9aU0J6WlhSMGFXNW5JR2hoY3lCaVpXVnVJSE5sZENCMGJ5QjBjblZsSUNobGFYUm9aWElnY0hKdlozSmhiV0YwYVdOaGJHeDVJRzl5SUhSb1pTQjFjMlZ5SUdoaGN5Qm1iR2xqYTJWa0lIUm9aU0IwYjJkbmJHVXBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnWVc1a0lIZGxJR0Z5Wlc0bmRDQmpkWEp5Wlc1MGJIa2djWFZoYkdsMGVTQmpiMjUwY205c2JHVnlMQ0J6Wlc1a0lIUm9aU0J5WlhGMVpYTjBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjNZVzUwYzFGMVlXeHBkSGxEYjI1MGNtOXNiR1Z5SUQwOVBTQjBjblZsSUNZbVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0YwYUdsekxsOTNaV0pTZEdORGIyNTBjbTlzYkdWeUxtbHpVWFZoYkdsMGVVTnZiblJ5YjJ4c1pYSmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmZDJWaVVuUmpRMjl1ZEhKdmJHeGxjaTV6Wlc1a1VtVnhkV1Z6ZEZGMVlXeHBkSGxEYjI1MGNtOXNUM2R1WlhKemFHbHdLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FwTzF4dVhHNGdJQ0FnSUNBZ0lIUm9hWE11WTI5dVptbG5MbDloWkdSUGJsTmxkSFJwYm1kRGFHRnVaMlZrVEdsemRHVnVaWElvWEc0Z0lDQWdJQ0FnSUNBZ0lDQkdiR0ZuY3k1QlJrdEVaWFJsWTNScGIyNHNYRzRnSUNBZ0lDQWdJQ0FnSUNBb2FYTkJSa3RGYm1GaWJHVmtPaUJpYjI5c1pXRnVLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmZDJWaVVuUmpRMjl1ZEhKdmJHeGxjaTV6WlhSQlptdEZibUZpYkdWa0tHbHpRVVpMUlc1aFlteGxaQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ2s3WEc1Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVqYjI1bWFXY3VYMkZrWkU5dVUyVjBkR2x1WjBOb1lXNW5aV1JNYVhOMFpXNWxjaWhjYmlBZ0lDQWdJQ0FnSUNBZ0lFWnNZV2R6TGsxaGRHTm9WbWxsZDNCdmNuUlNaWE52YkhWMGFXOXVMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0tDa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYM2RsWWxKMFkwTnZiblJ5YjJ4c1pYSXVkbWxrWlc5UWJHRjVaWEl1ZFhCa1lYUmxWbWxrWlc5VGRISmxZVzFUYVhwbEtDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDazdYRzVjYmlBZ0lDQWdJQ0FnZEdocGN5NWpiMjVtYVdjdVgyRmtaRTl1VTJWMGRHbHVaME5vWVc1blpXUk1hWE4wWlc1bGNpaGNiaUFnSUNBZ0lDQWdJQ0FnSUVac1lXZHpMa2h2ZG1WeWFXNW5UVzkxYzJWTmIyUmxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0tHbHpTRzkyWlhKcGJtZE5iM1Z6WlRvZ1ltOXZiR1ZoYmlrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVkyOXVabWxuTG5ObGRFWnNZV2RNWVdKbGJDaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUm14aFozTXVTRzkyWlhKcGJtZE5iM1Z6WlUxdlpHVXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdCRGIyNTBjbTlzSUZOamFHVnRaVG9nSkh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdselNHOTJaWEpwYm1kTmIzVnpaU0EvSUNkSWIzWmxjbWx1WnljZ09pQW5URzlqYTJWa0oxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUUxdmRYTmxZRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZkMlZpVW5SalEyOXVkSEp2Ykd4bGNpNXpaWFJOYjNWelpVbHVjSFYwUlc1aFlteGxaQ2gwYUdsekxtTnZibVpwWnk1cGMwWnNZV2RGYm1GaWJHVmtLRVpzWVdkekxrMXZkWE5sU1c1d2RYUXBLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdLVHRjYmx4dUlDQWdJQ0FnSUNBdkx5QjFjMlZ5SUdsdWNIVjBYRzRnSUNBZ0lDQWdJSFJvYVhNdVkyOXVabWxuTGw5aFpHUlBibE5sZEhScGJtZERhR0Z1WjJWa1RHbHpkR1Z1WlhJb1hHNGdJQ0FnSUNBZ0lDQWdJQ0JHYkdGbmN5NUxaWGxpYjJGeVpFbHVjSFYwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdLR2x6Ulc1aFlteGxaRG9nWW05dmJHVmhiaWtnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDNkbFlsSjBZME52Ym5SeWIyeHNaWEl1YzJWMFMyVjVZbTloY21SSmJuQjFkRVZ1WVdKc1pXUW9hWE5GYm1GaWJHVmtLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdLVHRjYmx4dUlDQWdJQ0FnSUNCMGFHbHpMbU52Ym1acFp5NWZZV1JrVDI1VFpYUjBhVzVuUTJoaGJtZGxaRXhwYzNSbGJtVnlLRnh1SUNBZ0lDQWdJQ0FnSUNBZ1JteGhaM011VFc5MWMyVkpibkIxZEN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ2hwYzBWdVlXSnNaV1E2SUdKdmIyeGxZVzRwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5M1pXSlNkR05EYjI1MGNtOXNiR1Z5TG5ObGRFMXZkWE5sU1c1d2RYUkZibUZpYkdWa0tHbHpSVzVoWW14bFpDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDazdYRzVjYmlBZ0lDQWdJQ0FnZEdocGN5NWpiMjVtYVdjdVgyRmtaRTl1VTJWMGRHbHVaME5vWVc1blpXUk1hWE4wWlc1bGNpaGNiaUFnSUNBZ0lDQWdJQ0FnSUVac1lXZHpMbFJ2ZFdOb1NXNXdkWFFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQW9hWE5GYm1GaWJHVmtPaUJpYjI5c1pXRnVLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmZDJWaVVuUmpRMjl1ZEhKdmJHeGxjaTV6WlhSVWIzVmphRWx1Y0hWMFJXNWhZbXhsWkNocGMwVnVZV0pzWldRcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBcE8xeHVYRzRnSUNBZ0lDQWdJSFJvYVhNdVkyOXVabWxuTGw5aFpHUlBibE5sZEhScGJtZERhR0Z1WjJWa1RHbHpkR1Z1WlhJb1hHNGdJQ0FnSUNBZ0lDQWdJQ0JHYkdGbmN5NUhZVzFsY0dGa1NXNXdkWFFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQW9hWE5GYm1GaWJHVmtPaUJpYjI5c1pXRnVLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmZDJWaVVuUmpRMjl1ZEhKdmJHeGxjaTV6WlhSSFlXMWxVR0ZrU1c1d2RYUkZibUZpYkdWa0tHbHpSVzVoWW14bFpDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDazdYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1pXNWpiMlJsY2lCelpYUjBhVzVuYzF4dUlDQWdJQ0FnSUNCMGFHbHpMbU52Ym1acFp5NWZZV1JrVDI1T2RXMWxjbWxqVTJWMGRHbHVaME5vWVc1blpXUk1hWE4wWlc1bGNpaGNiaUFnSUNBZ0lDQWdJQ0FnSUU1MWJXVnlhV05RWVhKaGJXVjBaWEp6TGsxcGJsRlFMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0tHNWxkMVpoYkhWbE9pQnVkVzFpWlhJcElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JNYjJkblpYSXVURzluS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQk1iMmRuWlhJdVIyVjBVM1JoWTJ0VWNtRmpaU2dwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5MUzB0TFMwdExTMGdJRk5sYm1ScGJtY2dUV2x1VVZBZ0lDMHRMUzB0TFMwdEp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTjF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmZDJWaVVuUmpRMjl1ZEhKdmJHeGxjaTV6Wlc1a1JXNWpiMlJsY2sxcGJsRlFLRzVsZDFaaGJIVmxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JNYjJkblpYSXVURzluS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQk1iMmRuWlhJdVIyVjBVM1JoWTJ0VWNtRmpaU2dwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5MUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSURkY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBcE8xeHVYRzRnSUNBZ0lDQWdJSFJvYVhNdVkyOXVabWxuTGw5aFpHUlBiazUxYldWeWFXTlRaWFIwYVc1blEyaGhibWRsWkV4cGMzUmxibVZ5S0Z4dUlDQWdJQ0FnSUNBZ0lDQWdUblZ0WlhKcFkxQmhjbUZ0WlhSbGNuTXVUV0Y0VVZBc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FvYm1WM1ZtRnNkV1U2SUc1MWJXSmxjaWtnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lFeHZaMmRsY2k1TWIyY29YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUV4dloyZGxjaTVIWlhSVGRHRmphMVJ5WVdObEtDa3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNjdExTMHRMUzB0TFNBZ1UyVnVaR2x1WnlCbGJtTnZaR1Z5SUhObGRIUnBibWR6SUNBdExTMHRMUzB0TFNjc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRGRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYM2RsWWxKMFkwTnZiblJ5YjJ4c1pYSXVjMlZ1WkVWdVkyOWtaWEpOWVhoUlVDaHVaWGRXWVd4MVpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdURzluWjJWeUxreHZaeWhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1RHOW5aMlZ5TGtkbGRGTjBZV05yVkhKaFkyVW9LU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0p5MHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0EzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnS1R0Y2JseHVJQ0FnSUNBZ0lDQXZMeUJYWldKU1ZFTWdjMlYwZEdsdVozTmNiaUFnSUNBZ0lDQWdkR2hwY3k1amIyNW1hV2N1WDJGa1pFOXVUblZ0WlhKcFkxTmxkSFJwYm1kRGFHRnVaMlZrVEdsemRHVnVaWElvWEc0Z0lDQWdJQ0FnSUNBZ0lDQk9kVzFsY21salVHRnlZVzFsZEdWeWN5NVhaV0pTVkVOTmFXNUNhWFJ5WVhSbExGeHVJQ0FnSUNBZ0lDQWdJQ0FnS0c1bGQxWmhiSFZsT2lCdWRXMWlaWElwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQk1iMmRuWlhJdVRHOW5LRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCTWIyZG5aWEl1UjJWMFUzUmhZMnRVY21GalpTZ3BMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBbkxTMHRMUzB0TFMwZ0lGTmxibVJwYm1jZ2QyVmlJSEowWXlCelpYUjBhVzVuY3lBZ0xTMHRMUzB0TFMwbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0EzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDkzWldKU2RHTkRiMjUwY205c2JHVnlMbk5sYm1SWFpXSlNWRU5OYVc1Q2FYUnlZWFJsS0c1bGQxWmhiSFZsSUNvZ01UQXdNQ0F2S2lCclluQnpJSFJ2SUdKd2N5QXFMeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVEc5bloyVnlMa3h2WnloY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdURzluWjJWeUxrZGxkRk4wWVdOclZISmhZMlVvS1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKeTB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMG5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBM1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0tUdGNibHh1SUNBZ0lDQWdJQ0IwYUdsekxtTnZibVpwWnk1ZllXUmtUMjVPZFcxbGNtbGpVMlYwZEdsdVowTm9ZVzVuWldSTWFYTjBaVzVsY2loY2JpQWdJQ0FnSUNBZ0lDQWdJRTUxYldWeWFXTlFZWEpoYldWMFpYSnpMbGRsWWxKVVEwMWhlRUpwZEhKaGRHVXNYRzRnSUNBZ0lDQWdJQ0FnSUNBb2JtVjNWbUZzZFdVNklHNTFiV0psY2lrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRXh2WjJkbGNpNU1iMmNvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lFeHZaMmRsY2k1SFpYUlRkR0ZqYTFSeVlXTmxLQ2tzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDY3RMUzB0TFMwdExTQWdVMlZ1WkdsdVp5QjNaV0lnY25SaklITmxkSFJwYm1keklDQXRMUzB0TFMwdExTY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSURkY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDNkbFlsSjBZME52Ym5SeWIyeHNaWEl1YzJWdVpGZGxZbEpVUTAxaGVFSnBkSEpoZEdVb2JtVjNWbUZzZFdVZ0tpQXhNREF3SUM4cUlHdGljSE1nZEc4Z1luQnpJQ292S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCTWIyZG5aWEl1VEc5bktGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JNYjJkblpYSXVSMlYwVTNSaFkydFVjbUZqWlNncExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuTFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMU2NzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEZGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQXBPMXh1WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZMjl1Wm1sbkxsOWhaR1JQYms1MWJXVnlhV05UWlhSMGFXNW5RMmhoYm1kbFpFeHBjM1JsYm1WeUtGeHVJQ0FnSUNBZ0lDQWdJQ0FnVG5WdFpYSnBZMUJoY21GdFpYUmxjbk11VjJWaVVsUkRSbEJUTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdLRzVsZDFaaGJIVmxPaUJ1ZFcxaVpYSXBJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCTWIyZG5aWEl1VEc5bktGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JNYjJkblpYSXVSMlYwVTNSaFkydFVjbUZqWlNncExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuTFMwdExTMHRMUzBnSUZObGJtUnBibWNnZDJWaUlISjBZeUJ6WlhSMGFXNW5jeUFnTFMwdExTMHRMUzBuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQTNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOTNaV0pTZEdORGIyNTBjbTlzYkdWeUxuTmxibVJYWldKU1ZFTkdjSE1vYm1WM1ZtRnNkV1VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUV4dloyZGxjaTVNYjJjb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRXh2WjJkbGNpNUhaWFJUZEdGamExUnlZV05sS0Nrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2N0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ04xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDazdYRzVjYmlBZ0lDQWdJQ0FnZEdocGN5NWpiMjVtYVdjdVgyRmtaRTl1VDNCMGFXOXVVMlYwZEdsdVowTm9ZVzVuWldSTWFYTjBaVzVsY2loY2JpQWdJQ0FnSUNBZ0lDQWdJRTl3ZEdsdmJsQmhjbUZ0WlhSbGNuTXVVSEpsWm1WeWNtVmtRMjlrWldNc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FvYm1WM1ZtRnNkV1U2SUhOMGNtbHVaeWtnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxsOTNaV0pTZEdORGIyNTBjbTlzYkdWeUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYM2RsWWxKMFkwTnZiblJ5YjJ4c1pYSXVjMlYwVUhKbFptVnljbVZrUTI5a1pXTW9ibVYzVm1Gc2RXVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdLVHRjYmx4dUlDQWdJQ0FnSUNCMGFHbHpMbU52Ym1acFp5NWZjbVZuYVhOMFpYSlBia05vWVc1blpVVjJaVzUwY3loMGFHbHpMbDlsZG1WdWRFVnRhWFIwWlhJcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFRmpkR2wyWVhSbElIUm9aU0J2YmlCelkzSmxaVzRnYTJWNVltOWhjbVFnZDJobGJpQnlaV05sYVhacGJtY2dkR2hsSUdOdmJXMWhibVFnWm5KdmJTQjBhR1VnYzNSeVpXRnRaWEpjYmlBZ0lDQWdLaUJBY0dGeVlXMGdZMjl0YldGdVpDQXRJSFJvWlNCclpYbGliMkZ5WkNCamIyMXRZVzVrWEc0Z0lDQWdJQ292WEc0Z0lDQWdMeThnWlhOc2FXNTBMV1JwYzJGaWJHVXRibVY0ZEMxc2FXNWxJRUIwZVhCbGMyTnlhWEIwTFdWemJHbHVkQzl1YnkxMWJuVnpaV1F0ZG1GeWMxeHVJQ0FnSUY5aFkzUnBkbUYwWlU5dVUyTnlaV1Z1UzJWNVltOWhjbVFvWTI5dGJXRnVaRG9nVFdWemMyRm5aVTl1VTJOeVpXVnVTMlY1WW05aGNtUXBPaUIyYjJsa0lIdGNiaUFnSUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZE5aWFJvYjJRZ2JtOTBJR2x0Y0d4bGJXVnVkR1ZrTGljcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGTmxkQ0IwYUdVZ2FXNXdkWFFnWTI5dWRISnZiQ0J2ZDI1bGNuTm9hWEJjYmlBZ0lDQWdLaUJBY0dGeVlXMGdhVzV3ZFhSRGIyNTBjbTlzVDNkdVpYSnphR2x3SUMwZ1pHOWxjeUIwYUdVZ2RYTmxjaUJvWVhabElHbHVjSFYwSUdOdmJuUnliMndnYjNkdVpYSnphR2x3WEc0Z0lDQWdJQ292WEc0Z0lDQWdYMjl1U1c1d2RYUkRiMjUwY205c1QzZHVaWEp6YUdsd0tHbHVjSFYwUTI5dWRISnZiRTkzYm1WeWMyaHBjRG9nWW05dmJHVmhiaWs2SUhadmFXUWdlMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXBibkIxZEVOdmJuUnliMnhzWlhJZ1BTQnBibkIxZEVOdmJuUnliMnhQZDI1bGNuTm9hWEE3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nU1c1emRHRnVkR2xoZEdVZ2RHaGxJRmRsWWxKVVExQnNZWGxsY2tOdmJuUnliMnhzWlhJZ2FXNTBaWEptWVdObElIUnZJSEJ5YjNacFpHVWdWMlZpVWxSRFVHeGhlV1Z5UTI5dWRISnZiR3hsY2lCbWRXNWpkR2x2Ym1Gc2FYUjVJSGRwZEdocGJpQjBhR2x6SUdOc1lYTnpJR0Z1WkNCelpYUWdkWEFnWVc1NWRHaHBibWNnZEdoaGRDQnlaWEYxYVhKbGN5QnBkRnh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjNaV0pTZEdOUWJHRjVaWEpEYjI1MGNtOXNiR1Z5SUMwZ1lTQlhaV0pTZEdOUWJHRjVaWEpEYjI1MGNtOXNiR1Z5SUdOdmJuUnliMnhzWlhJZ2FXNXpkR0Z1WTJWY2JpQWdJQ0FnS2k5Y2JpQWdJQ0J3Y21sMllYUmxJSE5sZEZkbFlsSjBZMUJzWVhsbGNrTnZiblJ5YjJ4c1pYSW9YRzRnSUNBZ0lDQWdJSGRsWWxKMFkxQnNZWGxsY2tOdmJuUnliMnhzWlhJNklGZGxZbEowWTFCc1lYbGxja052Ym5SeWIyeHNaWEpjYmlBZ0lDQXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZkMlZpVW5SalEyOXVkSEp2Ykd4bGNpQTlJSGRsWWxKMFkxQnNZWGxsY2tOdmJuUnliMnhzWlhJN1hHNWNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmQyVmlVblJqUTI5dWRISnZiR3hsY2k1elpYUlFjbVZtWlhKeVpXUkRiMlJsWXloY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVkyOXVabWxuTG1kbGRGTmxkSFJwYm1kUGNIUnBiMjRvVDNCMGFXOXVVR0Z5WVcxbGRHVnljeTVRY21WbVpYSnlaV1JEYjJSbFl5bGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXVjMlZzWldOMFpXUmNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZkMlZpVW5SalEyOXVkSEp2Ykd4bGNpNXlaWE5wZW1WUWJHRjVaWEpUZEhsc1pTZ3BPMXh1WEc0Z0lDQWdJQ0FnSUM4dklHTnZibTVsWTNRZ2FXWWdZWFYwYnlCamIyNXVaV04wSUdac1lXY2dhWE1nWlc1aFlteGxaRnh1SUNBZ0lDQWdJQ0IwYUdsekxtTm9aV05yUm05eVFYVjBiME52Ym01bFkzUW9LVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJEYjI1dVpXTjBJSFJ2SUhOcFoyNWhiR2x1WnlCelpYSjJaWEl1WEc0Z0lDQWdJQ292WEc0Z0lDQWdjSFZpYkdsaklHTnZibTVsWTNRb0tTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyVjJaVzUwUlcxcGRIUmxjaTVrYVhOd1lYUmphRVYyWlc1MEtHNWxkeUJUZEhKbFlXMVFjbVZEYjI1dVpXTjBSWFpsYm5Rb0tTazdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzZGxZbEowWTBOdmJuUnliMnhzWlhJdVkyOXVibVZqZEZSdlUybG5ibUZzYkdsdVoxTmxjblpsY2lncE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGSmxZMjl1Ym1WamRITWdkRzhnZEdobElITnBaMjVoYkdsdVp5QnpaWEoyWlhJdUlFbG1JR052Ym01bFkzUnBiMjRnYVhNZ2RYQXNJR1JwYzJOdmJtNWxZM1J6SUdacGNuTjBYRzRnSUNBZ0lDb2dZbVZtYjNKbElHVnpkR0ZpYkdsemFHbHVaeUJoSUc1bGR5QmpiMjV1WldOMGFXOXVYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2NIVmliR2xqSUhKbFkyOXVibVZqZENncElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZlpYWmxiblJGYldsMGRHVnlMbVJwYzNCaGRHTm9SWFpsYm5Rb2JtVjNJRk4wY21WaGJWSmxZMjl1Ym1WamRFVjJaVzUwS0NrcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5M1pXSlNkR05EYjI1MGNtOXNiR1Z5TG5KbGMzUmhjblJUZEhKbFlXMUJkWFJ2YldGMGFXTmhiR3g1S0NrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1JHbHpZMjl1Ym1WamRDQm1jbTl0SUhSb1pTQnphV2R1WVd4cGJtY2djMlZ5ZG1WeUlHRnVaQ0JqYkc5elpTQnZjR1Z1SUhCbFpYSWdZMjl1Ym1WamRHbHZibk11WEc0Z0lDQWdJQ292WEc0Z0lDQWdjSFZpYkdsaklHUnBjMk52Ym01bFkzUW9LU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMlYyWlc1MFJXMXBkSFJsY2k1a2FYTndZWFJqYUVWMlpXNTBLRzVsZHlCVGRISmxZVzFRY21WRWFYTmpiMjV1WldOMFJYWmxiblFvS1NrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDNkbFlsSjBZME52Ym5SeWIyeHNaWEl1WTJ4dmMyVW9LVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJRYkdGNUlIUm9aU0J6ZEhKbFlXMHVJRU5oYmlCaVpTQmpZV3hzWldRZ2IyNXNlU0JoWm5SbGNpQmhJSEJsWlhJZ1kyOXVibVZqZEdsdmJpQm9ZWE1nWW1WbGJpQmxjM1JoWW14cGMyaGxaQzVjYmlBZ0lDQWdLaTljYmlBZ0lDQndkV0pzYVdNZ2NHeGhlU2dwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmYjI1VGRISmxZVzFNYjJGa2FXNW5LQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYM2RsWWxKMFkwTnZiblJ5YjJ4c1pYSXVjR3hoZVZOMGNtVmhiU2dwTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVGMWRHOGdZMjl1Ym1WamRDQnBaaUJCZFhSdlEyOXVibVZqZENCbWJHRm5JR2x6SUdWdVlXSnNaV1JjYmlBZ0lDQWdLaTljYmlBZ0lDQndjbWwyWVhSbElHTm9aV05yUm05eVFYVjBiME52Ym01bFkzUW9LU0I3WEc0Z0lDQWdJQ0FnSUM4dklITmxkQ0IxY0NCcFppQjBhR1VnWVhWMGJ5QndiR0Y1SUhkcGJHd2dZbVVnZFhObFpDQnZjaUJ5WldkMWJHRnlJR05zYVdOcklIUnZJSE4wWVhKMFhHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxtTnZibVpwWnk1cGMwWnNZV2RGYm1GaWJHVmtLRVpzWVdkekxrRjFkRzlEYjI1dVpXTjBLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnYVdZZ1lYVjBiM0JzWVhscGJtY2djMmh2ZHlCaGJpQnBibVp2SUc5MlpYSnNZWGtnZDJocGJHVWdkMmhwYkdVZ2QyRnBkR2x1WnlCbWIzSWdkR2hsSUdOdmJtNWxZM1JwYjI0Z2RHOGdZbVZuYVc1Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyOXVWMlZpVW5SalFYVjBiME52Ym01bFkzUW9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDNkbFlsSjBZME52Ym5SeWIyeHNaWEl1WTI5dWJtVmpkRlJ2VTJsbmJtRnNiR2x1WjFObGNuWmxjaWdwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1JXMXBkQ0JoYmlCbGRtVnVkQ0J2YmlCaGRYUnZJR052Ym01bFkzUnBibWRjYmlBZ0lDQWdLaTljYmlBZ0lDQmZiMjVYWldKU2RHTkJkWFJ2UTI5dWJtVmpkQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWlhabGJuUkZiV2wwZEdWeUxtUnBjM0JoZEdOb1JYWmxiblFvYm1WM0lGZGxZbEowWTBGMWRHOURiMjV1WldOMFJYWmxiblFvS1NrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDNOb2IzZEJZM1JwYjI1UGNrVnljbTl5VDI1RWFYTmpiMjV1WldOMElEMGdkSEoxWlR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCVFpYUWdkWEFnWm5WdVkzUnBiMjVoYkdsMGVTQjBieUJvWVhCd1pXNGdkMmhsYmlCeVpXTmxhWFpwYm1jZ1lTQjNaV0pTVkVNZ1lXNXpkMlZ5WEc0Z0lDQWdJQ292WEc0Z0lDQWdYMjl1VjJWaVVuUmpVMlJ3S0NrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5bGRtVnVkRVZ0YVhSMFpYSXVaR2x6Y0dGMFkyaEZkbVZ1ZENodVpYY2dWMlZpVW5SalUyUndSWFpsYm5Rb0tTazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dSVzFwZEhNZ1lTQlRkSEpsWVcxTWIyRmthVzVuSUdWMlpXNTBYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1gyOXVVM1J5WldGdFRHOWhaR2x1WnlncElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZlpYWmxiblJGYldsMGRHVnlMbVJwYzNCaGRHTm9SWFpsYm5Rb2JtVjNJRk4wY21WaGJVeHZZV1JwYm1kRmRtVnVkQ2dwS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCRmRtVnVkQ0JtYVhKbFpDQjNhR1Z1SUhSb1pTQjJhV1JsYnlCcGN5QmthWE5qYjI1dVpXTjBaV1FnTFNCbGJXbDBjeUJuYVhabGJpQmxkbVZ1ZEZOMGNtbHVaeUJ2Y2lCaGJpQnZkbVZ5Y21sa1pWeHVJQ0FnSUNBcUlHMWxjM05oWjJVZ1puSnZiU0IzWldKU2RHTkRiMjUwY205c2JHVnlJR2xtSUc5dVpTQm9ZWE1nWW1WbGJpQnpaWFJjYmlBZ0lDQWdLaUJBY0dGeVlXMGdaWFpsYm5SVGRISnBibWNnTFNCMGFHVWdaWFpsYm5RZ2RHVjRkQ0IwYUdGMElIZHBiR3dnWW1VZ1pXMXBkSFJsWkZ4dUlDQWdJQ0FxTDF4dUlDQWdJRjl2YmtScGMyTnZibTVsWTNRb1pYWmxiblJUZEhKcGJtYzZJSE4wY21sdVp5a2dlMXh1SUNBZ0lDQWdJQ0F2THlCcFppQjNaU0JvWVhabElHOTJaWEp5YVdSa1pXNGdkR2hsSUdSbFptRjFiSFFnWkdselkyOXVibVZqZEdsdmJpQnRaWE56WVdkbExDQmhjM05wWjI0Z2RHaGxJRzVsZHlCMllXeDFaU0JvWlhKbFhHNGdJQ0FnSUNBZ0lHbG1JQ2hjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDNkbFlsSjBZME52Ym5SeWIyeHNaWEl1WjJWMFJHbHpZMjl1Ym1WamRFMWxjM05oWjJWUGRtVnljbWxrWlNncElDRTlJQ2NuSUNZbVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOTNaV0pTZEdORGIyNTBjbTlzYkdWeUxtZGxkRVJwYzJOdmJtNWxZM1JOWlhOellXZGxUM1psY25KcFpHVW9LU0FoUFQxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMWJtUmxabWx1WldRZ0ppWmNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYM2RsWWxKMFkwTnZiblJ5YjJ4c1pYSXVaMlYwUkdselkyOXVibVZqZEUxbGMzTmhaMlZQZG1WeWNtbGtaU2dwSUNFOUlHNTFiR3hjYmlBZ0lDQWdJQ0FnS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JsZG1WdWRGTjBjbWx1WnlBOUlIUm9hWE11WDNkbFlsSjBZME52Ym5SeWIyeHNaWEl1WjJWMFJHbHpZMjl1Ym1WamRFMWxjM05oWjJWUGRtVnljbWxrWlNncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZkMlZpVW5SalEyOXVkSEp2Ykd4bGNpNXpaWFJFYVhOamIyNXVaV04wVFdWemMyRm5aVTkyWlhKeWFXUmxLQ2NuS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyVjJaVzUwUlcxcGRIUmxjaTVrYVhOd1lYUmphRVYyWlc1MEtGeHVJQ0FnSUNBZ0lDQWdJQ0FnYm1WM0lGZGxZbEowWTBScGMyTnZibTVsWTNSbFpFVjJaVzUwS0h0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGRtVnVkRk4wY21sdVp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnphRzkzUVdOMGFXOXVUM0pGY25KdmNrOXVSR2x6WTI5dWJtVmpkRHBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmYzJodmQwRmpkR2x2Yms5eVJYSnliM0pQYmtScGMyTnZibTVsWTNSY2JpQWdJQ0FnSUNBZ0lDQWdJSDBwWEc0Z0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxsOXphRzkzUVdOMGFXOXVUM0pGY25KdmNrOXVSR2x6WTI5dWJtVmpkQ0E5UFNCbVlXeHpaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmMyaHZkMEZqZEdsdmJrOXlSWEp5YjNKUGJrUnBjMk52Ym01bFkzUWdQU0IwY25WbE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dTR0Z1Wkd4bGN5QjNhR1Z1SUZkbFlpQlNkR01nYVhNZ1kyOXVibVZqZEdsdVoxeHVJQ0FnSUNBcUwxeHVJQ0FnSUY5dmJsZGxZbEowWTBOdmJtNWxZM1JwYm1jb0tTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyVjJaVzUwUlcxcGRIUmxjaTVrYVhOd1lYUmphRVYyWlc1MEtHNWxkeUJYWldKU2RHTkRiMjV1WldOMGFXNW5SWFpsYm5Rb0tTazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dTR0Z1Wkd4bGN5QjNhR1Z1SUZkbFlpQlNkR01nYUdGeklHTnZibTVsWTNSbFpGeHVJQ0FnSUNBcUwxeHVJQ0FnSUY5dmJsZGxZbEowWTBOdmJtNWxZM1JsWkNncElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZlpYWmxiblJGYldsMGRHVnlMbVJwYzNCaGRHTm9SWFpsYm5Rb2JtVjNJRmRsWWxKMFkwTnZibTVsWTNSbFpFVjJaVzUwS0NrcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFaGhibVJzWlhNZ2QyaGxiaUJYWldJZ1VuUmpJR1poYVd4eklIUnZJR052Ym01bFkzUmNiaUFnSUNBZ0tpOWNiaUFnSUNCZmIyNVhaV0pTZEdOR1lXbHNaV1FvS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDJWMlpXNTBSVzFwZEhSbGNpNWthWE53WVhSamFFVjJaVzUwS0c1bGR5QlhaV0pTZEdOR1lXbHNaV1JGZG1WdWRDZ3BLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJJWVc1a2JHVWdkMmhsYmlCMGFHVWdWbWxrWlc4Z2FHRnpJR0psWlc0Z1NXNXBkR2xoYkdsNlpXUmNiaUFnSUNBZ0tpOWNiaUFnSUNCZmIyNVdhV1JsYjBsdWFYUnBZV3hwZW1Wa0tDa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOWxkbVZ1ZEVWdGFYUjBaWEl1WkdsemNHRjBZMmhGZG1WdWRDaHVaWGNnVm1sa1pXOUpibWwwYVdGc2FYcGxaRVYyWlc1MEtDa3BPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOTJhV1JsYjFOMFlYSjBWR2x0WlNBOUlFUmhkR1V1Ym05M0tDazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dVMlYwSUhWd0lHWjFibU4wYVc5dVlXeHBkSGtnZEc4Z2FHRndjR1Z1SUhkb1pXNGdjbVZqWldsMmFXNW5JR3hoZEdWdVkza2dkR1Z6ZENCeVpYTjFiSFJ6WEc0Z0lDQWdJQ29nUUhCaGNtRnRJR3hoZEdWdVkza2dMU0JzWVhSbGJtTjVJSFJsYzNRZ2NtVnpkV3gwY3lCdlltcGxZM1JjYmlBZ0lDQWdLaTljYmlBZ0lDQmZiMjVNWVhSbGJtTjVWR1Z6ZEZKbGMzVnNkQ2hzWVhSbGJtTjVWR2x0YVc1bmN6b2dUR0YwWlc1amVWUmxjM1JTWlhOMWJIUnpLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMlYyWlc1MFJXMXBkSFJsY2k1a2FYTndZWFJqYUVWMlpXNTBLRnh1SUNBZ0lDQWdJQ0FnSUNBZ2JtVjNJRXhoZEdWdVkzbFVaWE4wVW1WemRXeDBSWFpsYm5Rb2V5QnNZWFJsYm1ONVZHbHRhVzVuY3lCOUtWeHVJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRk5sZENCMWNDQm1kVzVqZEdsdmJtRnNhWFI1SUhSdklHaGhjSEJsYmlCM2FHVnVJSEpsWTJWcGRtbHVaeUIyYVdSbGJ5QnpkR0YwYVhOMGFXTnpYRzRnSUNBZ0lDb2dRSEJoY21GdElIWnBaR1Z2VTNSaGRITWdMU0IyYVdSbGJ5QnpkR0YwYVhOMGFXTnpJR0Z6SUdFZ1lXZG5jbVZuWVhSbElITjBZWFJ6SUc5aWFtVmpkRnh1SUNBZ0lDQXFMMXh1SUNBZ0lGOXZibFpwWkdWdlUzUmhkSE1vZG1sa1pXOVRkR0YwY3pvZ1FXZG5jbVZuWVhSbFpGTjBZWFJ6S1NCN1hHNGdJQ0FnSUNBZ0lDOHZJRVIxY21GMGFXOXVYRzRnSUNBZ0lDQWdJR2xtSUNnaGRHaHBjeTVmZG1sa1pXOVRkR0Z5ZEZScGJXVWdmSHdnZEdocGN5NWZkbWxrWlc5VGRHRnlkRlJwYldVZ1BUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmRtbGtaVzlUZEdGeWRGUnBiV1VnUFNCRVlYUmxMbTV2ZHlncE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSFpwWkdWdlUzUmhkSE11YUdGdVpHeGxVMlZ6YzJsdmJsTjBZWFJwYzNScFkzTW9YRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDkyYVdSbGIxTjBZWEowVkdsdFpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMmx1Y0hWMFEyOXVkSEp2Ykd4bGNpeGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYM2RsWWxKMFkwTnZiblJ5YjJ4c1pYSXVkbWxrWlc5QmRtZFJjRnh1SUNBZ0lDQWdJQ0FwTzF4dVhHNGdJQ0FnSUNBZ0lIUm9hWE11WDJWMlpXNTBSVzFwZEhSbGNpNWthWE53WVhSamFFVjJaVzUwS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdibVYzSUZOMFlYUnpVbVZqWldsMlpXUkZkbVZ1ZENoN0lHRm5aM0psWjJGMFpXUlRkR0YwY3pvZ2RtbGtaVzlUZEdGMGN5QjlLVnh1SUNBZ0lDQWdJQ0FwTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZObGRDQjFjQ0JtZFc1amRHbHZibUZzYVhSNUlIUnZJR2hoY0hCbGJpQjNhR1Z1SUdOaGJHTjFiR0YwYVc1bklIUm9aU0JoZG1WeVlXZGxJSFpwWkdWdklHVnVZMjlrWlhJZ2NYQmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ1VWQWdMU0IwYUdVZ2NYVmhiR2wwZVNCdWRXMWlaWElnYjJZZ2RHaGxJSE4wY21WaGJWeHVJQ0FnSUNBcUwxeHVJQ0FnSUY5dmJsWnBaR1Z2Ulc1amIyUmxja0YyWjFGUUtGRlFPaUJ1ZFcxaVpYSXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZaWFpsYm5SRmJXbDBkR1Z5TG1ScGMzQmhkR05vUlhabGJuUW9YRzRnSUNBZ0lDQWdJQ0FnSUNCdVpYY2dWbWxrWlc5RmJtTnZaR1Z5UVhablVWQkZkbVZ1ZENoN0lHRjJaMUZRT2lCUlVDQjlLVnh1SUNBZ0lDQWdJQ0FwTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZObGRDQjFjQ0JtZFc1amRHbHZibUZzYVhSNUlIUnZJR2hoY0hCbGJpQjNhR1Z1SUhKbFkyVnBkbWx1WnlCaGJtUWdhR0Z1Wkd4cGJtY2dhVzVwZEdsaGJDQnpaWFIwYVc1bmN5Qm1iM0lnZEdobElGVkZJR0Z3Y0Z4dUlDQWdJQ0FxSUVCd1lYSmhiU0J6WlhSMGFXNW5jeUF0SUdsdWFYUnBZV3dnVlVVZ1lYQndJSE5sZEhScGJtZHpYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1gyOXVTVzVwZEdsaGJGTmxkSFJwYm1kektITmxkSFJwYm1kek9pQkpibWwwYVdGc1UyVjBkR2x1WjNNcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZlpYWmxiblJGYldsMGRHVnlMbVJwYzNCaGRHTm9SWFpsYm5Rb1hHNGdJQ0FnSUNBZ0lDQWdJQ0J1WlhjZ1NXNXBkR2xoYkZObGRIUnBibWR6UlhabGJuUW9leUJ6WlhSMGFXNW5jeUI5S1Z4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQnBaaUFvYzJWMGRHbHVaM011VUdsNFpXeFRkSEpsWVcxcGJtZFRaWFIwYVc1bmN5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVoYkd4dmQwTnZibk52YkdWRGIyMXRZVzVrY3lBOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyVjBkR2x1WjNNdVVHbDRaV3hUZEhKbFlXMXBibWRUWlhSMGFXNW5jeTVCYkd4dmQxQnBlR1ZzVTNSeVpXRnRhVzVuUTI5dGJXRnVaSE1nUHo4Z1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NWhiR3h2ZDBOdmJuTnZiR1ZEYjIxdFlXNWtjeUE5UFQwZ1ptRnNjMlVwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCTWIyZG5aWEl1U1c1bWJ5aGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVEc5bloyVnlMa2RsZEZOMFlXTnJWSEpoWTJVb0tTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSnkxQmJHeHZkMUJwZUdWc1UzUnlaV0Z0YVc1blEyOXRiV0Z1WkhNOVptRnNjMlVzSUhObGJtUnBibWNnWVhKaWFYUnlZWEo1SUdOdmJuTnZiR1VnWTI5dGJXRnVaSE1nWm5KdmJTQmljbTkzYzJWeUlIUnZJRlZGSUdseklHUnBjMkZpYkdWa0xpZGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdkWE5sVlhKc1VHRnlZVzF6SUQwZ2RHaHBjeTVqYjI1bWFXY3VkWE5sVlhKc1VHRnlZVzF6TzF4dUlDQWdJQ0FnSUNCamIyNXpkQ0IxY214UVlYSmhiWE1nUFNCdVpYY2dWVkpNVTJWaGNtTm9VR0Z5WVcxektIZHBibVJ2ZHk1c2IyTmhkR2x2Ymk1elpXRnlZMmdwTzF4dUlDQWdJQ0FnSUNCcFppQW9jMlYwZEdsdVozTXVSVzVqYjJSbGNsTmxkSFJwYm1kektTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbU52Ym1acFp5NXpaWFJPZFcxbGNtbGpVMlYwZEdsdVp5aGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQk9kVzFsY21salVHRnlZVzFsZEdWeWN5NU5hVzVSVUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QkpaaUJoSUhObGRIUnBibWNnYVhNZ2MyVjBJR2x1SUhSb1pTQlZVa3dzSUcxaGEyVWdjM1Z5WlNCM1pTQnlaWE53WldOMElIUm9ZWFFnZG1Gc2RXVWdZWE1nYjNCd2IzTmxaQ0IwYnlCM2FHRjBJSFJvWlNCaGNIQnNhV05oZEdsdmJpQnpaVzVrY3lCMWMxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDaDFjMlZWY214UVlYSmhiWE1nSmlZZ2RYSnNVR0Z5WVcxekxtaGhjeWhPZFcxbGNtbGpVR0Z5WVcxbGRHVnljeTVOYVc1UlVDa3BJRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBL0lFNTFiV0psY2k1d1lYSnpaVWx1ZENoMWNteFFZWEpoYlhNdVoyVjBLRTUxYldWeWFXTlFZWEpoYldWMFpYSnpMazFwYmxGUUtTa2dYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSURvZ2MyVjBkR2x1WjNNdVJXNWpiMlJsY2xObGRIUnBibWR6TGsxcGJsRlFYRzRnSUNBZ0lDQWdJQ0FnSUNBcE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNCY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVkyOXVabWxuTG5ObGRFNTFiV1Z5YVdOVFpYUjBhVzVuS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUU1MWJXVnlhV05RWVhKaGJXVjBaWEp6TGsxaGVGRlFMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2gxYzJWVmNteFFZWEpoYlhNZ0ppWWdkWEpzVUdGeVlXMXpMbWhoY3loT2RXMWxjbWxqVUdGeVlXMWxkR1Z5Y3k1TllYaFJVQ2twSUZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQS9JRTUxYldKbGNpNXdZWEp6WlVsdWRDaDFjbXhRWVhKaGJYTXVaMlYwS0U1MWJXVnlhV05RWVhKaGJXVjBaWEp6TGsxaGVGRlFLU2tnWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEb2djMlYwZEdsdVozTXVSVzVqYjJSbGNsTmxkSFJwYm1kekxrMWhlRkZRWEc0Z0lDQWdJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdsbUlDaHpaWFIwYVc1bmN5NVhaV0pTVkVOVFpYUjBhVzVuY3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWpiMjVtYVdjdWMyVjBUblZ0WlhKcFkxTmxkSFJwYm1jb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1RuVnRaWEpwWTFCaGNtRnRaWFJsY25NdVYyVmlVbFJEVFdsdVFtbDBjbUYwWlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBb2RYTmxWWEpzVUdGeVlXMXpJQ1ltSUhWeWJGQmhjbUZ0Y3k1b1lYTW9UblZ0WlhKcFkxQmhjbUZ0WlhSbGNuTXVWMlZpVWxSRFRXbHVRbWwwY21GMFpTa3BJRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBL0lFNTFiV0psY2k1d1lYSnpaVWx1ZENoMWNteFFZWEpoYlhNdVoyVjBLRTUxYldWeWFXTlFZWEpoYldWMFpYSnpMbGRsWWxKVVEwMXBia0pwZEhKaGRHVXBLU0F2SURFd01EQWdMeW9nWW5CeklIUnZJR3RpY0hNZ0tpOWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnT2lCelpYUjBhVzVuY3k1WFpXSlNWRU5UWlhSMGFXNW5jeTVOYVc1Q2FYUnlZWFJsSUM4Z01UQXdNQ0F2S2lCaWNITWdkRzhnYTJKd2N5QXFMMXh1SUNBZ0lDQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVZMjl1Wm1sbkxuTmxkRTUxYldWeWFXTlRaWFIwYVc1bktGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lFNTFiV1Z5YVdOUVlYSmhiV1YwWlhKekxsZGxZbEpVUTAxaGVFSnBkSEpoZEdVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tIVnpaVlZ5YkZCaGNtRnRjeUFtSmlCMWNteFFZWEpoYlhNdWFHRnpLRTUxYldWeWFXTlFZWEpoYldWMFpYSnpMbGRsWWxKVVEwMWhlRUpwZEhKaGRHVXBLU0JjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1B5Qk9kVzFpWlhJdWNHRnljMlZKYm5Rb2RYSnNVR0Z5WVcxekxtZGxkQ2hPZFcxbGNtbGpVR0Z5WVcxbGRHVnljeTVYWldKU1ZFTk5ZWGhDYVhSeVlYUmxLU2tnTHlBeE1EQXdJQzhxSUdKd2N5QjBieUJyWW5CeklDb3ZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSURvZ2MyVjBkR2x1WjNNdVYyVmlVbFJEVTJWMGRHbHVaM011VFdGNFFtbDBjbUYwWlNBdklERXdNREFnTHlvZ1luQnpJSFJ2SUd0aWNITWdLaTljYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JjYmlBZ0lDQWdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbU52Ym1acFp5NXpaWFJPZFcxbGNtbGpVMlYwZEdsdVp5aGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQk9kVzFsY21salVHRnlZVzFsZEdWeWN5NVhaV0pTVkVOR1VGTXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLSFZ6WlZWeWJGQmhjbUZ0Y3lBbUppQjFjbXhRWVhKaGJYTXVhR0Z6S0U1MWJXVnlhV05RWVhKaGJXVjBaWEp6TGxkbFlsSlVRMFpRVXlrcElGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0EvSUU1MWJXSmxjaTV3WVhKelpVbHVkQ2gxY214UVlYSmhiWE11WjJWMEtFNTFiV1Z5YVdOUVlYSmhiV1YwWlhKekxsZGxZbEpVUTBaUVV5a3BYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSURvZ2MyVjBkR2x1WjNNdVYyVmlVbFJEVTJWMGRHbHVaM011UmxCVFhHNGdJQ0FnSUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1UyVjBJSFZ3SUdaMWJtTjBhVzl1WVd4cGRIa2dkRzhnYUdGd2NHVnVJSGRvWlc0Z2MyVjBkR2x1WnlCeGRXRnNhWFI1SUdOdmJuUnliMndnYjNkdVpYSnphR2x3SUc5bUlHRWdjM1J5WldGdFhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUdoaGMxRjFZV3hwZEhsUGQyNWxjbk5vYVhBZ0xTQmtiMlZ6SUhSb2FYTWdkWE5sY2lCb1lYWmxJSEYxWVd4cGRIa2diM2R1WlhKemFHbHdJRzltSUhSb1pTQnpkSEpsWVcwZ2RISjFaU0F2SUdaaGJITmxYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1gyOXVVWFZoYkdsMGVVTnZiblJ5YjJ4UGQyNWxjbk5vYVhBb2FHRnpVWFZoYkdsMGVVOTNibVZ5YzJocGNEb2dZbTl2YkdWaGJpa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxtTnZibVpwWnk1elpYUkdiR0ZuUlc1aFlteGxaQ2hjYmlBZ0lDQWdJQ0FnSUNBZ0lFWnNZV2R6TGtselVYVmhiR2wwZVVOdmJuUnliMnhzWlhJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JvWVhOUmRXRnNhWFI1VDNkdVpYSnphR2x3WEc0Z0lDQWdJQ0FnSUNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1VtVnhkV1Z6ZENCaElHTnZibTVsWTNScGIyNGdiR0YwWlc1amVTQjBaWE4wTGx4dUlDQWdJQ0FxSUU1UFZFVTZJRlJvWlhKbElHRnlaU0J3YkdGdWN5QjBieUJ5WldaaFkzUnZjaUJoYkd3Z2NtVnhkV1Z6ZENvZ1puVnVZM1JwYjI1ekxpQkZlSEJsWTNRZ1kyaGhibWRsY3lCcFppQjViM1VnZFhObElIUm9hWE1oWEc0Z0lDQWdJQ29nUUhKbGRIVnlibk5jYmlBZ0lDQWdLaTljYmlBZ0lDQndkV0pzYVdNZ2NtVnhkV1Z6ZEV4aGRHVnVZM2xVWlhOMEtDa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb0lYUm9hWE11WDNkbFlsSjBZME52Ym5SeWIyeHNaWEl1ZG1sa1pXOVFiR0Y1WlhJdWFYTldhV1JsYjFKbFlXUjVLQ2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5M1pXSlNkR05EYjI1MGNtOXNiR1Z5TG5ObGJtUk1ZWFJsYm1ONVZHVnpkQ2dwTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEhKMVpUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlNaWEYxWlhOMElHWnZjaUIwYUdVZ1ZVVWdZWEJ3YkdsallYUnBiMjRnZEc4Z2MyaHZkeUJHVUZNZ1kyOTFiblJsY2k1Y2JpQWdJQ0FnS2lCT1QxUkZPaUJVYUdWeVpTQmhjbVVnY0d4aGJuTWdkRzhnY21WbVlXTjBiM0lnWVd4c0lISmxjWFZsYzNRcUlHWjFibU4wYVc5dWN5NGdSWGh3WldOMElHTm9ZVzVuWlhNZ2FXWWdlVzkxSUhWelpTQjBhR2x6SVZ4dUlDQWdJQ0FxSUVCeVpYUjFjbTV6WEc0Z0lDQWdJQ292WEc0Z0lDQWdjSFZpYkdsaklISmxjWFZsYzNSVGFHOTNSbkJ6S0NrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvSVhSb2FYTXVYM2RsWWxKMFkwTnZiblJ5YjJ4c1pYSXVkbWxrWlc5UWJHRjVaWEl1YVhOV2FXUmxiMUpsWVdSNUtDa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCMGFHbHpMbDkzWldKU2RHTkRiMjUwY205c2JHVnlMbk5sYm1SVGFHOTNSbkJ6S0NrN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGNuVmxPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRkpsY1hWbGMzUWdabTl5SUdFZ2JtVjNJRWxHY21GdFpTQm1jbTl0SUhSb1pTQlZSU0JoY0hCc2FXTmhkR2x2Ymk1Y2JpQWdJQ0FnS2lCT1QxUkZPaUJVYUdWeVpTQmhjbVVnY0d4aGJuTWdkRzhnY21WbVlXTjBiM0lnWVd4c0lISmxjWFZsYzNRcUlHWjFibU4wYVc5dWN5NGdSWGh3WldOMElHTm9ZVzVuWlhNZ2FXWWdlVzkxSUhWelpTQjBhR2x6SVZ4dUlDQWdJQ0FxSUVCeVpYUjFjbTV6WEc0Z0lDQWdJQ292WEc0Z0lDQWdjSFZpYkdsaklISmxjWFZsYzNSSlpuSmhiV1VvS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2doZEdocGN5NWZkMlZpVW5SalEyOXVkSEp2Ykd4bGNpNTJhV1JsYjFCc1lYbGxjaTVwYzFacFpHVnZVbVZoWkhrb0tTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYM2RsWWxKMFkwTnZiblJ5YjJ4c1pYSXVjMlZ1WkVsbWNtRnRaVkpsY1hWbGMzUW9LVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJ5ZFdVN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1UyVnVaQ0JrWVhSaElIUnZJRlZGSUdGd2NHeHBZMkYwYVc5dUxpQlVhR1VnWkdGMFlTQjNhV3hzSUdKbElISjFiaUIwYUhKdmRXZG9JRXBUVDA0dWMzUnlhVzVuYVdaNUtDa2djMjhnWlM1bkxpQnpkSEpwYm1kelhHNGdJQ0FnSUNvZ1lXNWtJR0Z1ZVNCelpYSnBZV3hwZW1GaWJHVWdjR3hoYVc0Z1NsTlBUaUJ2WW1wbFkzUnpJSGRwZEdnZ2JtOGdjbVZqZFhKeVpXNWpaU0JqWVc0Z1ltVWdjMlZ1ZEM1Y2JpQWdJQ0FnS2lCQWNtVjBkWEp1Y3lCMGNuVmxJR2xtSUhOMVkyTmxaV1JsWkN3Z1ptRnNjMlVnYVdZZ2NtVnFaV04wWldSY2JpQWdJQ0FnS2k5Y2JpQWdJQ0J3ZFdKc2FXTWdaVzFwZEZWSlNXNTBaWEpoWTNScGIyNG9aR1Z6WTNKcGNIUnZjam9nYjJKcVpXTjBJSHdnYzNSeWFXNW5LU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hkR2hwY3k1ZmQyVmlVblJqUTI5dWRISnZiR3hsY2k1MmFXUmxiMUJzWVhsbGNpNXBjMVpwWkdWdlVtVmhaSGtvS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzZGxZbEowWTBOdmJuUnliMnhzWlhJdVpXMXBkRlZKU1c1MFpYSmhZM1JwYjI0b1pHVnpZM0pwY0hSdmNpazdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBjblZsTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZObGJtUWdZU0JqYjIxdFlXNWtJSFJ2SUZWRklHRndjR3hwWTJGMGFXOXVMaUJDYkc5amEzTWdRMjl1YzI5c1pVTnZiVzFoYm1RZ1pHVnpZM0pwY0hSdmNuTWdkVzVzWlhOeklGVkZYRzRnSUNBZ0lDb2dhR0Z6SUhOcFoyNWhiR1ZrSUhSb1lYUWdhWFFnWVd4c2IzZHpJR052Ym5OdmJHVWdZMjl0YldGdVpITXVYRzRnSUNBZ0lDb2dRSEpsZEhWeWJuTWdkSEoxWlNCcFppQnpkV05qWldWa1pXUXNJR1poYkhObElHbG1JSEpsYW1WamRHVmtYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2NIVmliR2xqSUdWdGFYUkRiMjF0WVc1a0tHUmxjMk55YVhCMGIzSTZJRzlpYW1WamRDa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb0lYUm9hWE11WDNkbFlsSjBZME52Ym5SeWIyeHNaWEl1ZG1sa1pXOVFiR0Y1WlhJdWFYTldhV1JsYjFKbFlXUjVLQ2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnBaaUFvSVhSb2FYTXVZV3hzYjNkRGIyNXpiMnhsUTI5dGJXRnVaSE1nSmlZZ0owTnZibk52YkdWRGIyMXRZVzVrSnlCcGJpQmtaWE5qY21sd2RHOXlLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2RHaHBjeTVmZDJWaVVuUmpRMjl1ZEhKdmJHeGxjaTVsYldsMFEyOXRiV0Z1WkNoa1pYTmpjbWx3ZEc5eUtUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUnlkV1U3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVTJWdVpDQmhJR052Ym5OdmJHVWdZMjl0YldGdVpDQjBieUJWUlNCaGNIQnNhV05oZEdsdmJpNGdUMjVzZVNCaGJHeHZkMlZrSUdsbUlGVkZJR2hoY3lCemFXZHVZV3hsWkNCMGFHRjBJR2wwSUdGc2JHOTNjMXh1SUNBZ0lDQXFJR052Ym5OdmJHVWdZMjl0YldGdVpITXVYRzRnSUNBZ0lDb2dRSEpsZEhWeWJuTWdkSEoxWlNCcFppQnpkV05qWldWa1pXUXNJR1poYkhObElHbG1JSEpsYW1WamRHVmtYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2NIVmliR2xqSUdWdGFYUkRiMjV6YjJ4bFEyOXRiV0Z1WkNoamIyMXRZVzVrT2lCemRISnBibWNwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLQ0YwYUdsekxtRnNiRzkzUTI5dWMyOXNaVU52YlcxaGJtUnpJSHg4SUNGMGFHbHpMbDkzWldKU2RHTkRiMjUwY205c2JHVnlMblpwWkdWdlVHeGhlV1Z5TG1selZtbGtaVzlTWldGa2VTZ3BLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2RHaHBjeTVmZDJWaVVuUmpRMjl1ZEhKdmJHeGxjaTVsYldsMFEyOXVjMjlzWlVOdmJXMWhibVFvWTI5dGJXRnVaQ2s3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwY25WbE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFRmtaQ0JoSUZWRklDMCtJR0p5YjNkelpYSWdjbVZ6Y0c5dWMyVWdaWFpsYm5RZ2JHbHpkR1Z1WlhKY2JpQWdJQ0FnS2lCQWNHRnlZVzBnYm1GdFpTQXRJRlJvWlNCdVlXMWxJRzltSUhSb1pTQnlaWE53YjI1elpTQm9ZVzVrYkdWeVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUd4cGMzUmxibVZ5SUMwZ1ZHaGxJRzFsZEdodlpDQjBieUJpWlNCaFkzUnBkbUYwWldRZ2QyaGxiaUJoSUcxbGMzTmhaMlVnYVhNZ2NtVmpaV2wyWldSY2JpQWdJQ0FnS2k5Y2JpQWdJQ0J3ZFdKc2FXTWdZV1JrVW1WemNHOXVjMlZGZG1WdWRFeHBjM1JsYm1WeUtGeHVJQ0FnSUNBZ0lDQnVZVzFsT2lCemRISnBibWNzWEc0Z0lDQWdJQ0FnSUd4cGMzUmxibVZ5T2lBb2NtVnpjRzl1YzJVNklITjBjbWx1WnlrZ1BUNGdkbTlwWkZ4dUlDQWdJQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbDkzWldKU2RHTkRiMjUwY205c2JHVnlMbkpsYzNCdmJuTmxRMjl1ZEhKdmJHeGxjaTVoWkdSU1pYTndiMjV6WlVWMlpXNTBUR2x6ZEdWdVpYSW9ibUZ0WlN3Z2JHbHpkR1Z1WlhJcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGSmxiVzkyWlNCaElGVkZJQzArSUdKeWIzZHpaWElnY21WemNHOXVjMlVnWlhabGJuUWdiR2x6ZEdWdVpYSmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2JtRnRaU0F0SUZSb1pTQnVZVzFsSUc5bUlIUm9aU0J5WlhOd2IyNXpaU0JvWVc1a2JHVnlYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2NIVmliR2xqSUhKbGJXOTJaVkpsYzNCdmJuTmxSWFpsYm5STWFYTjBaVzVsY2lodVlXMWxPaUJ6ZEhKcGJtY3BJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZkMlZpVW5SalEyOXVkSEp2Ykd4bGNpNXlaWE53YjI1elpVTnZiblJ5YjJ4c1pYSXVjbVZ0YjNabFVtVnpjRzl1YzJWRmRtVnVkRXhwYzNSbGJtVnlLRzVoYldVcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFUnBjM0JoZEdOb0lHRWdibVYzSUdWMlpXNTBMbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQmxJR1YyWlc1MFhHNGdJQ0FnSUNvZ1FISmxkSFZ5Ym5OY2JpQWdJQ0FnS2k5Y2JpQWdJQ0J3ZFdKc2FXTWdaR2x6Y0dGMFkyaEZkbVZ1ZENobE9pQlFhWGhsYkZOMGNtVmhiV2x1WjBWMlpXNTBLVG9nWW05dmJHVmhiaUI3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOWxkbVZ1ZEVWdGFYUjBaWEl1WkdsemNHRjBZMmhGZG1WdWRDaGxLVHRjYmlBZ0lDQjlYRzRnSUNBZ1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1VtVm5hWE4wWlhJZ1lXNGdaWFpsYm5RZ2FHRnVaR3hsY2k1Y2JpQWdJQ0FnS2lCQWNHRnlZVzBnZEhsd1pTQmxkbVZ1ZENCdVlXMWxYRzRnSUNBZ0lDb2dRSEJoY21GdElHeHBjM1JsYm1WeUlHVjJaVzUwSUdoaGJtUnNaWElnWm5WdVkzUnBiMjVjYmlBZ0lDQWdLaTljYmlBZ0lDQndkV0pzYVdNZ1lXUmtSWFpsYm5STWFYTjBaVzVsY2p4Y2JpQWdJQ0FnSUNBZ1ZDQmxlSFJsYm1SeklGQnBlR1ZzVTNSeVpXRnRhVzVuUlhabGJuUmJKM1I1Y0dVblhTeGNiaUFnSUNBZ0lDQWdSU0JsZUhSbGJtUnpJRkJwZUdWc1UzUnlaV0Z0YVc1blJYWmxiblFnSmlCN0lIUjVjR1U2SUZRZ2ZWeHVJQ0FnSUQ0b2RIbHdaVG9nVkN3Z2JHbHpkR1Z1WlhJNklDaGxPaUJGZG1WdWRDQW1JRVVwSUQwK0lIWnZhV1FwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWlhabGJuUkZiV2wwZEdWeUxtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb2RIbHdaU3dnYkdsemRHVnVaWElwTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZKbGJXOTJaU0JoYmlCbGRtVnVkQ0JvWVc1a2JHVnlMbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjBlWEJsSUdWMlpXNTBJRzVoYldWY2JpQWdJQ0FnS2lCQWNHRnlZVzBnYkdsemRHVnVaWElnWlhabGJuUWdhR0Z1Wkd4bGNpQm1kVzVqZEdsdmJseHVJQ0FnSUNBcUwxeHVJQ0FnSUhCMVlteHBZeUJ5WlcxdmRtVkZkbVZ1ZEV4cGMzUmxibVZ5UEZ4dUlDQWdJQ0FnSUNCVUlHVjRkR1Z1WkhNZ1VHbDRaV3hUZEhKbFlXMXBibWRGZG1WdWRGc25kSGx3WlNkZExGeHVJQ0FnSUNBZ0lDQkZJR1Y0ZEdWdVpITWdVR2w0Wld4VGRISmxZVzFwYm1kRmRtVnVkQ0FtSUhzZ2RIbHdaVG9nVkNCOVhHNGdJQ0FnUGloMGVYQmxPaUJVTENCc2FYTjBaVzVsY2pvZ0tHVTZJRVYyWlc1MElDWWdSU2tnUFQ0Z2RtOXBaQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbDlsZG1WdWRFVnRhWFIwWlhJdWNtVnRiM1psUlhabGJuUk1hWE4wWlc1bGNpaDBlWEJsTENCc2FYTjBaVzVsY2lrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1JXNWhZbXhsTDJScGMyRmliR1VnV0ZJZ2JXOWtaUzVjYmlBZ0lDQWdLaTljYmlBZ0lDQndkV0pzYVdNZ2RHOW5aMnhsV0ZJb0tTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWQyVmlXSEpEYjI1MGNtOXNiR1Z5TG5oeVEyeHBZMnRsWkNncE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGQmhjM01nYVc0Z1lTQm1kVzVqZEdsdmJpQjBieUJuWlc1bGNtRjBaU0JoSUhOcFoyNWhiR3hwYm1jZ2MyVnlkbVZ5SUZWU1RDNWNiaUFnSUNBZ0tpQlVhR2x6SUdaMWJtTjBhVzl1SUdseklIVnpaV1oxYkNCcFppQjViM1VnYm1WbFpDQjBieUJ3Y205bmNtRnRiV0YwYVdOaGJHeDVJR052Ym5OMGNuVmpkQ0I1YjNWeUlITnBaMjVoYkd4cGJtY2djMlZ5ZG1WeUlGVlNUQzVjYmlBZ0lDQWdLaUJBY0dGeVlXMGdjMmxuYm1Gc2JHbHVaMVZ5YkVKMWFXeGtaWEpHZFc1aklFRWdablZ1WTNScGIyNGdkR2hoZENCblpXNWxjbUYwWlhNZ1lTQnphV2R1WVd4c2FXNW5JSE5sY25abGNpQjFjbXd1WEc0Z0lDQWdJQ292WEc0Z0lDQWdjSFZpYkdsaklITmxkRk5wWjI1aGJHeHBibWRWY214Q2RXbHNaR1Z5S0hOcFoyNWhiR3hwYm1kVmNteENkV2xzWkdWeVJuVnVZem9nS0NrOVBuTjBjbWx1WnlrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5M1pXSlNkR05EYjI1MGNtOXNiR1Z5TG5OcFoyNWhiR3hwYm1kVmNteENkV2xzWkdWeUlEMGdjMmxuYm1Gc2JHbHVaMVZ5YkVKMWFXeGtaWEpHZFc1ak8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGQjFZbXhwWXlCblpYUjBaWElnWm05eUlIUm9aU0IzWldKemIyTnJaWFFnWTI5dWRISnZiR3hsY2k0Z1FXTmpaWE56SUhSdklIUm9hWE1nY0hKdmNHVnlkSGtnWVd4c2IzZHpJSGx2ZFNCMGJ5QnpaVzVrWEc0Z0lDQWdJQ29nWTNWemRHOXRJSGRsWW5OdlkydGxkQ0J0WlhOellXZGxjeTVjYmlBZ0lDQWdLaTljYmlBZ0lDQndkV0pzYVdNZ1oyVjBJSGRsWWxOdlkydGxkRU52Ym5SeWIyeHNaWElvS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDkzWldKU2RHTkRiMjUwY205c2JHVnlMbmRsWWxOdlkydGxkRU52Ym5SeWIyeHNaWEk3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVUhWaWJHbGpJR2RsZEhSbGNpQm1iM0lnZEdobElIZGxZbGh5UTI5dWRISnZiR3hsY2lCamIyNTBjbTlzYkdWeUxpQlZjMlZrSUdadmNpQmhiR3dnV0ZJZ1ptVmhkSFZ5WlhNdVhHNGdJQ0FnSUNvdlhHNGdJQ0FnY0hWaWJHbGpJR2RsZENCM1pXSllja052Ym5SeWIyeHNaWElvS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDkzWldKWWNrTnZiblJ5YjJ4c1pYSTdYRzRnSUNBZ2ZWeHVmVnh1SWl3aUx5OGdRMjl3ZVhKcFoyaDBJRVZ3YVdNZ1IyRnRaWE1zSUVsdVl5NGdRV3hzSUZKcFoyaDBjeUJTWlhObGNuWmxaQzVjYmx4dWFXMXdiM0owSUhzZ1ZXNXhkV0Z1ZEdsNlpXUkVaVzV2Y20xaGJHbDZaV1JWYm5OcFoyNWxaRU52YjNKa0lIMGdabkp2YlNBbkxpNHZWWFJwYkM5RGIyOXlaR2x1WVhSbFEyOXVkbVZ5ZEdWeUp6dGNibWx0Y0c5eWRDQjdJRTFsYzNOaFoyVlBibE5qY21WbGJrdGxlV0p2WVhKa0lIMGdabkp2YlNBbkxpNHZWMlZpVTI5amEyVjBjeTlOWlhOellXZGxVbVZqWldsMlpTYzdYRzVjYmk4cUtseHVJQ29nUTJ4aGMzTWdabTl5SUdoaGJtUnNhVzVuSUc5dUlITmpjbVZsYmlCclpYbGliMkZ5WkNCMWMyRm5aVnh1SUNvdlhHNWxlSEJ2Y25RZ1kyeGhjM01nVDI1VFkzSmxaVzVMWlhsaWIyRnlaQ0I3WEc0Z0lDQWdMeThnU1dZZ2RHaGxJSFZ6WlhJZ1ptOWpkWE5sY3lCdmJpQmhJRlZGSUdsdWNIVjBJSGRwWkdkbGRDQjBhR1Z1SUhkbElITm9iM2NnZEdobGJTQmhJR0oxZEhSdmJpQjBieUJ2Y0dWdVhHNGdJQ0FnTHk4Z2RHaGxJRzl1TFhOamNtVmxiaUJyWlhsaWIyRnlaQzRnU21GMllWTmpjbWx3ZENCelpXTjFjbWwwZVNCdFpXRnVjeUIzWlNCallXNGdiMjVzZVNCemFHOTNJSFJvWlZ4dUlDQWdJQzh2SUc5dUxYTmpjbVZsYmlCclpYbGliMkZ5WkNCcGJpQnlaWE53YjI1elpTQjBieUJoSUhWelpYSWdhVzUwWlhKaFkzUnBiMjR1WEc0Z0lDQWdaV1JwZEZSbGVIUkNkWFIwYjI0NklFaFVUVXhDZFhSMGIyNUZiR1Z0Wlc1ME8xeHVYRzRnSUNBZ0x5OGdRU0JvYVdSa1pXNGdhVzV3ZFhRZ2RHVjRkQ0JpYjNnZ2QyaHBZMmdnYVhNZ2RYTmxaQ0J2Ym14NUlHWnZjaUJtYjJOMWMybHVaeUJoYm1RZ2IzQmxibWx1WnlCMGFHVmNiaUFnSUNBdkx5QnZiaTF6WTNKbFpXNGdhMlY1WW05aGNtUXVYRzRnSUNBZ2FHbGtaR1Z1U1c1d2RYUTZJRWhVVFV4SmJuQjFkRVZzWlcxbGJuUTdYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjJhV1JsYjBWc1pXMWxiblJRWVhKbGJuUWdWR2hsSUdScGRpQmxiR1Z0Wlc1MElIUm9aU0IyYVdSbGJ5QndiR0Y1WlhJZ2FYTWdhVzVxWldOMFpXUWdhVzUwYjF4dUlDQWdJQ0FxTDF4dUlDQWdJR052Ym5OMGNuVmpkRzl5S0hacFpHVnZSV3hsYldWdWRGQmhjbVZ1ZERvZ1NGUk5URVZzWlcxbGJuUXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWxaR2wwVkdWNGRFSjFkSFJ2YmlBOUlHNTFiR3c3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVhR2xrWkdWdVNXNXdkWFFnUFNCdWRXeHNPMXh1WEc0Z0lDQWdJQ0FnSUdsbUlDZ25iMjUwYjNWamFITjBZWEowSnlCcGJpQmtiMk4xYldWdWRDNWtiMk4xYldWdWRFVnNaVzFsYm5RcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVZM0psWVhSbFQyNVRZM0psWlc1TFpYbGliMkZ5WkVobGJIQmxjbk1vZG1sa1pXOUZiR1Z0Wlc1MFVHRnlaVzUwS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFRnVJRzkyWlhKeWFXUmxJR1p2Y2lCMWJuRjFZVzUwYVhwbFFXNWtSR1Z1YjNKdFlXeHBlbVZWYm5OcFoyNWxaRnh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjRJSFJvWlNCNElHRjRhWE1nY0c5cGJuUmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2VTQjBhR1VnZVNCaGVHbHpJSEJ2YVc1MFhHNGdJQ0FnSUNvZ1FISmxkSFZ5Ym5NZ2RXNXhkV0Z1ZEdsNlpVRnVaRVJsYm05eWJXRnNhWHBsVlc1emFXZHVaV1FnYjJKcVpXTjBYRzRnSUNBZ0lDb3ZYRzRnSUNBZ0x5OGdaWE5zYVc1MExXUnBjMkZpYkdVdGJtVjRkQzFzYVc1bElFQjBlWEJsYzJOeWFYQjBMV1Z6YkdsdWRDOXVieTExYm5WelpXUXRkbUZ5YzF4dUlDQWdJSFZ1Y1hWaGJuUnBlbVZCYm1SRVpXNXZjbTFoYkdsNlpWVnVjMmxuYm1Wa0tGeHVJQ0FnSUNBZ0lDQjRPaUJ1ZFcxaVpYSXNYRzRnSUNBZ0lDQWdJSGs2SUc1MWJXSmxjbHh1SUNBZ0lDazZJRlZ1Y1hWaGJuUnBlbVZrUkdWdWIzSnRZV3hwZW1Wa1ZXNXphV2R1WldSRGIyOXlaQ0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ1ZFd4c08xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFTnlaV0YwWlhNZ2IyNGdjMk55WldWdUlHdGxlV0p2WVhKa0lHaGxiSEJsY25OY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZG1sa1pXOUZiR1Z0Wlc1MFVHRnlaVzUwSUZSb1pTQmthWFlnWld4bGJXVnVkQ0IwYUdVZ2RtbGtaVzhnY0d4aGVXVnlJR2tnYVc1cVpXTjBaV1FnYVc1MGIxeHVJQ0FnSUNBcUwxeHVJQ0FnSUdOeVpXRjBaVTl1VTJOeVpXVnVTMlY1WW05aGNtUklaV3h3WlhKektIWnBaR1Z2Uld4bGJXVnVkRkJoY21WdWREb2dTRlJOVEVWc1pXMWxiblFwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLQ0YwYUdsekxtaHBaR1JsYmtsdWNIVjBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1ocFpHUmxia2x1Y0hWMElEMGdaRzlqZFcxbGJuUXVZM0psWVhSbFJXeGxiV1Z1ZENnbmFXNXdkWFFuS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWFHbGtaR1Z1U1c1d2RYUXVhV1FnUFNBbmFHbGtaR1Z1U1c1d2RYUW5PMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVvYVdSa1pXNUpibkIxZEM1dFlYaE1aVzVuZEdnZ1BTQXdPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtbGtaVzlGYkdWdFpXNTBVR0Z5Wlc1MExtRndjR1Z1WkVOb2FXeGtLSFJvYVhNdWFHbGtaR1Z1U1c1d2RYUXBPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLQ0YwYUdsekxtVmthWFJVWlhoMFFuVjBkRzl1S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtVmthWFJVWlhoMFFuVjBkRzl1SUQwZ1pHOWpkVzFsYm5RdVkzSmxZWFJsUld4bGJXVnVkQ2duWW5WMGRHOXVKeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1Wa2FYUlVaWGgwUW5WMGRHOXVMbWxrSUQwZ0oyVmthWFJVWlhoMFFuVjBkRzl1Snp0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVpXUnBkRlJsZUhSQ2RYUjBiMjR1YVc1dVpYSklWRTFNSUQwZ0oyVmthWFFnZEdWNGRDYzdYRzRnSUNBZ0lDQWdJQ0FnSUNCMmFXUmxiMFZzWlcxbGJuUlFZWEpsYm5RdVlYQndaVzVrUTJocGJHUW9kR2hwY3k1bFpHbDBWR1Y0ZEVKMWRIUnZiaWs3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUVocFpHVWdkR2hsSUNkbFpHbDBJSFJsZUhRbklHSjFkSFJ2Ymk1Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVpXUnBkRlJsZUhSQ2RYUjBiMjR1WTJ4aGMzTk1hWE4wTG1Ga1pDZ25hR2xrWkdWdVUzUmhkR1VuS1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWxaR2wwVkdWNGRFSjFkSFJ2Ymk1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NkMGIzVmphR1Z1WkNjc0lDaGxkbVZ1ZERvZ1JYWmxiblFwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJUYUc5M0lIUm9aU0J2YmkxelkzSmxaVzRnYTJWNVltOWhjbVF1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NW9hV1JrWlc1SmJuQjFkQzVtYjJOMWN5Z3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1YyWlc1MExuQnlaWFpsYm5SRVpXWmhkV3gwS0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGTm9iM2R6SUhSb1pTQnZiaUJ6WTNKbFpXNGdhMlY1WW05aGNtUmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ1kyOXRiV0Z1WkNCMGFHVWdZMjl0YldGdVpDQnlaV05sYVhabFpDQjJhV0VnZEdobElHUmhkR0VnWTJoaGJtNWxiQ0JqYjI1MFlXbHVhVzVuSUd0bGVXSnZZWEprSUhCdmMybDBhVzl1YzF4dUlDQWdJQ0FxTDF4dUlDQWdJSE5vYjNkUGJsTmpjbVZsYmt0bGVXSnZZWEprS0dOdmJXMWhibVE2SUUxbGMzTmhaMlZQYmxOamNtVmxia3RsZVdKdllYSmtLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaGpiMjF0WVc1a0xuTm9iM2RQYmxOamNtVmxia3RsZVdKdllYSmtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJUYUc5M0lIUm9aU0FuWldScGRDQjBaWGgwSnlCaWRYUjBiMjR1WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1Wa2FYUlVaWGgwUW5WMGRHOXVMbU5zWVhOelRHbHpkQzV5WlcxdmRtVW9KMmhwWkdSbGJsTjBZWFJsSnlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCUWJHRmpaU0IwYUdVZ0oyVmthWFFnZEdWNGRDY2dZblYwZEc5dUlHNWxZWElnZEdobElGVkZJR2x1Y0hWMElIZHBaR2RsZEM1Y2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElIQnZjeUE5SUhSb2FYTXVkVzV4ZFdGdWRHbDZaVUZ1WkVSbGJtOXliV0ZzYVhwbFZXNXphV2R1WldRb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXRiV0Z1WkM1NExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZiVzFoYm1RdWVWeHVJQ0FnSUNBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVpXUnBkRlJsZUhSQ2RYUjBiMjR1YzNSNWJHVXVkRzl3SUQwZ2NHOXpMbmt1ZEc5VGRISnBibWNvS1NBcklDZHdlQ2M3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1Wa2FYUlVaWGgwUW5WMGRHOXVMbk4wZVd4bExteGxablFnUFNBb2NHOXpMbmdnTFNBME1Da3VkRzlUZEhKcGJtY29LU0FySUNkd2VDYzdYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QklhV1JsSUhSb1pTQW5aV1JwZENCMFpYaDBKeUJpZFhSMGIyNHVYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbVZrYVhSVVpYaDBRblYwZEc5dUxtTnNZWE56VEdsemRDNWhaR1FvSjJocFpHUmxibE4wWVhSbEp5azdYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QklhV1JsSUhSb1pTQnZiaTF6WTNKbFpXNGdhMlY1WW05aGNtUXVYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbWhwWkdSbGJrbHVjSFYwTG1Kc2RYSW9LVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYm4xY2JpSXNJaTh2SUVOdmNIbHlhV2RvZENCRmNHbGpJRWRoYldWekxDQkpibU11SUVGc2JDQlNhV2RvZEhNZ1VtVnpaWEoyWldRdVhHNWNibWx0Y0c5eWRDQjdJRXh2WjJkbGNpQjlJR1p5YjIwZ0p5NHVMMHh2WjJkbGNpOU1iMmRuWlhJbk8xeHVYRzVsZUhCdmNuUWdZMnhoYzNNZ1VtVnpjRzl1YzJWRGIyNTBjbTlzYkdWeUlIdGNiaUFnSUNCeVpYTndiMjV6WlVWMlpXNTBUR2x6ZEdWdVpYSnpPaUJOWVhBOGMzUnlhVzVuTENBb2NtVnpjRzl1YzJVNklITjBjbWx1WnlrZ1BUNGdkbTlwWkQ0Z1BTQnVaWGNnVFdGd0tDazdYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJCWkdRZ1lTQnlaWE53YjI1elpTQmxkbVZ1ZENCc2FYTjBaVzVsY2lCMGJ5QjBhR1VnY21WemNHOXVjMlVnYldGd1hHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUc1aGJXVWdMU0JVYUdVZ2JtRnRaU0J2WmlCMGFHVWdjbVZ6Y0c5dWMyVmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2JHbHpkR1Z1WlhJZ0xTQlVhR1VnYldWMGFHOWtJSFJ2SUdKbElHRmpkR2wyWVhSbFpDQjNhR1Z1SUhSb1pTQnlaWE53YjI1elpTQnBjeUJ6Wld4bFkzUmxaRnh1SUNBZ0lDQXFMMXh1SUNBZ0lHRmtaRkpsYzNCdmJuTmxSWFpsYm5STWFYTjBaVzVsY2loY2JpQWdJQ0FnSUNBZ2JtRnRaVG9nYzNSeWFXNW5MRnh1SUNBZ0lDQWdJQ0JzYVhOMFpXNWxjam9nS0hKbGMzQnZibk5sT2lCemRISnBibWNwSUQwK0lIWnZhV1JjYmlBZ0lDQXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXlaWE53YjI1elpVVjJaVzUwVEdsemRHVnVaWEp6TG5ObGRDaHVZVzFsTENCc2FYTjBaVzVsY2lrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1VtVnRiM1psSUdFZ2NtVnpjRzl1YzJVZ1pYWmxiblFnYkdsemRHVnVaWElnZEc4Z2RHaGxJSEpsYzNCdmJuTmxJRzFoY0Z4dUlDQWdJQ0FxSUVCd1lYSmhiU0J1WVcxbElDMGdWR2hsSUc1aGJXVWdiMllnZEdobElISmxjM0J2Ym5ObFhHNGdJQ0FnSUNvdlhHNGdJQ0FnY21WdGIzWmxVbVZ6Y0c5dWMyVkZkbVZ1ZEV4cGMzUmxibVZ5S0c1aGJXVTZJSE4wY21sdVp5a2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxuSmxjM0J2Ym5ObFJYWmxiblJNYVhOMFpXNWxjbk11WkdWc1pYUmxLRzVoYldVcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFaGhibVJzWlNCaElISmxjM0J2Ym5ObElIZG9aVzRnY21WalpXbDJhVzVuSUc5dVpTQm1iM0p0SUhSb1pTQnpkSEpsWVcxbGNseHVJQ0FnSUNBcUlFQndZWEpoYlNCdFpYTnpZV2RsSUMwZ1JHRjBZU0J5WldObGFYWmxaQ0JtY205dElIUm9aU0JrWVhSaElHTm9ZVzV1Wld3Z2QybDBhQ0IwYUdVZ1kyOXRiV0Z1WkNCcGJpQnhkV1Z6ZEdsdmJseHVJQ0FnSUNBcUwxeHVJQ0FnSUc5dVVtVnpjRzl1YzJVb2JXVnpjMkZuWlRvZ1FYSnlZWGxDZFdabVpYSXBJSHRjYmlBZ0lDQWdJQ0FnVEc5bloyVnlMa3h2WnloY2JpQWdJQ0FnSUNBZ0lDQWdJRXh2WjJkbGNpNUhaWFJUZEdGamExUnlZV05sS0Nrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FuUkdGMFlVTm9ZVzV1Wld4U1pXTmxhWFpsVFdWemMyRm5aVlI1Y0dVdVVtVnpjRzl1YzJVbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnTmx4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCeVpYTndiMjV6WlhNZ1BTQnVaWGNnVkdWNGRFUmxZMjlrWlhJb0ozVjBaaTB4TmljcExtUmxZMjlrWlNodFpYTnpZV2RsTG5Oc2FXTmxLREVwS1R0Y2JseHVJQ0FnSUNBZ0lDQk1iMmRuWlhJdVRHOW5LRXh2WjJkbGNpNUhaWFJUZEdGamExUnlZV05sS0Nrc0lISmxjM0J2Ym5ObGN5d2dOaWs3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjbVZ6Y0c5dWMyVkZkbVZ1ZEV4cGMzUmxibVZ5Y3k1bWIzSkZZV05vS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdLR3hwYzNSbGJtVnlPaUFvY21WemNHOXVjMlU2SUhOMGNtbHVaeWtnUFQ0Z2RtOXBaQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeHBjM1JsYm1WeUtISmxjM0J2Ym5ObGN5azdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDazdYRzRnSUNBZ2ZWeHVmVnh1SWl3aUx5OGdRMjl3ZVhKcFoyaDBJRVZ3YVdNZ1IyRnRaWE1zSUVsdVl5NGdRV3hzSUZKcFoyaDBjeUJTWlhObGNuWmxaQzVjYmx4dWFXMXdiM0owSUhzZ1JHRjBZVU5vWVc1dVpXeFRaVzVrWlhJZ2ZTQm1jbTl0SUNjdUxpOUVZWFJoUTJoaGJtNWxiQzlFWVhSaFEyaGhibTVsYkZObGJtUmxjaWM3WEc1cGJYQnZjblFnZXlCTWIyZG5aWElnZlNCbWNtOXRJQ2N1TGk5TWIyZG5aWEl2VEc5bloyVnlKenRjYm1sdGNHOXlkQ0I3SUZOMGNtVmhiVTFsYzNOaFoyVkRiMjUwY205c2JHVnlJSDBnWm5KdmJTQW5MaTlUZEhKbFlXMU5aWE56WVdkbFEyOXVkSEp2Ykd4bGNpYzdYRzVjYm1WNGNHOXlkQ0JqYkdGemN5QlRaVzVrUkdWelkzSnBjSFJ2Y2tOdmJuUnliMnhzWlhJZ2UxeHVJQ0FnSUhSdlUzUnlaV0Z0WlhKTlpYTnpZV2RsYzAxaGNGQnliM1pwWkdWeU9pQlRkSEpsWVcxTlpYTnpZV2RsUTI5dWRISnZiR3hsY2p0Y2JpQWdJQ0JrWVhSaFEyaGhibTVsYkZObGJtUmxjam9nUkdGMFlVTm9ZVzV1Wld4VFpXNWtaWEk3WEc1Y2JpQWdJQ0JqYjI1emRISjFZM1J2Y2loY2JpQWdJQ0FnSUNBZ1pHRjBZVU5vWVc1dVpXeFRaVzVrWlhJNklFUmhkR0ZEYUdGdWJtVnNVMlZ1WkdWeUxGeHVJQ0FnSUNBZ0lDQjBiMU4wY21WaGJXVnlUV1Z6YzJGblpYTk5ZWEJRY205MmFXUmxjam9nVTNSeVpXRnRUV1Z6YzJGblpVTnZiblJ5YjJ4c1pYSmNiaUFnSUNBcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1a1lYUmhRMmhoYm01bGJGTmxibVJsY2lBOUlHUmhkR0ZEYUdGdWJtVnNVMlZ1WkdWeU8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5SdlUzUnlaV0Z0WlhKTlpYTnpZV2RsYzAxaGNGQnliM1pwWkdWeUlEMGdkRzlUZEhKbFlXMWxjazFsYzNOaFoyVnpUV0Z3VUhKdmRtbGtaWEk3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVTJWdVpDQmhJRXhoZEdWdVkza2dWR1Z6ZENCMGJ5QjBhR1VnVlVVZ1NXNXpkR0Z1WTJWY2JpQWdJQ0FnS2lCQWNHRnlZVzBnWkdWelkzSnBjSFJ2Y2lBdElIUm9aU0JrWlhOamNtbHdkRzl5SUdadmNpQmhJR3hoZEdWdVkza2dkR1Z6ZEZ4dUlDQWdJQ0FxTDF4dUlDQWdJSE5sYm1STVlYUmxibU41VkdWemRDaGtaWE5qY21sd2RHOXlPaUJ2WW1wbFkzUXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXpaVzVrUkdWelkzSnBjSFJ2Y2lnblRHRjBaVzVqZVZSbGMzUW5MQ0JrWlhOamNtbHdkRzl5S1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCVFpXNWtJR0VnVEdGMFpXNWplU0JVWlhOMElIUnZJSFJvWlNCVlJTQkpibk4wWVc1alpWeHVJQ0FnSUNBcUlFQndZWEpoYlNCa1pYTmpjbWx3ZEc5eUlDMGdkR2hsSUdSbGMyTnlhWEIwYjNJZ1ptOXlJR0VnWTI5dGJXRnVaRnh1SUNBZ0lDQXFMMXh1SUNBZ0lHVnRhWFJEYjIxdFlXNWtLR1JsYzJOeWFYQjBiM0k2SUc5aWFtVmpkQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbk5sYm1SRVpYTmpjbWx3ZEc5eUtDZERiMjF0WVc1a0p5d2daR1Z6WTNKcGNIUnZjaWs3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVTJWdVpDQmhJRXhoZEdWdVkza2dWR1Z6ZENCMGJ5QjBhR1VnVlVVZ1NXNXpkR0Z1WTJWY2JpQWdJQ0FnS2lCQWNHRnlZVzBnWkdWelkzSnBjSFJ2Y2lBdElIUm9aU0JrWlhOamNtbHdkRzl5SUdadmNpQmhJRlZKSUVsdWRHVnlZV04wYVc5dVhHNGdJQ0FnSUNvdlhHNGdJQ0FnWlcxcGRGVkpTVzUwWlhKaFkzUnBiMjRvWkdWelkzSnBjSFJ2Y2pvZ2IySnFaV04wSUh3Z2MzUnlhVzVuS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YzJWdVpFUmxjMk55YVhCMGIzSW9KMVZKU1c1MFpYSmhZM1JwYjI0bkxDQmtaWE5qY21sd2RHOXlLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJUWlc1a0lHRWdSR1Z6WTNKcGNIUnZjaUIwYnlCMGFHVWdWVVVnU1c1emRHRnVZMlZ6WEc0Z0lDQWdJQ29nUUhCaGNtRnRJRzFsYzNOaFoyVlVlWEJsSUMwZ1ZVVWdUV1Z6YzJGblpTQlVlWEJsWEc0Z0lDQWdJQ29nUUhCaGNtRnRJR1JsYzJOeWFYQjBiM0lnTFNCRVpYTmpjbWx3ZEc5eUlFMWxjM05oWjJVZ1lYTWdTbE5QVGx4dUlDQWdJQ0FxTDF4dUlDQWdJSE5sYm1SRVpYTmpjbWx3ZEc5eUtHMWxjM05oWjJWVWVYQmxPaUJ6ZEhKcGJtY3NJR1JsYzJOeWFYQjBiM0k2SUc5aWFtVmpkQ0I4SUhOMGNtbHVaeWtnZTF4dUlDQWdJQ0FnSUNBdkx5QkRiMjUyWlhKMElIUm9aU0JrWlhOamNtbHdkRzl5SUc5aWFtVmpkQ0JwYm5SdklHRWdTbE5QVGlCemRISnBibWN1WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJR1JsYzJOeWFYQjBiM0pCYzFOMGNtbHVaeUE5SUVwVFQwNHVjM1J5YVc1bmFXWjVLR1JsYzJOeWFYQjBiM0lwTzF4dUlDQWdJQ0FnSUNCamIyNXpkQ0IwYjFOMGNtVmhiV1Z5VFdWemMyRm5aWE1nUFZ4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1MGIxTjBjbVZoYldWeVRXVnpjMkZuWlhOTllYQlFjbTkyYVdSbGNpNTBiMU4wY21WaGJXVnlUV1Z6YzJGblpYTTdYRzRnSUNBZ0lDQWdJR052Ym5OMElHMWxjM05oWjJWR2IzSnRZWFFnUFNCMGIxTjBjbVZoYldWeVRXVnpjMkZuWlhNdVoyVjBSbkp2YlV0bGVTaHRaWE56WVdkbFZIbHdaU2s3WEc0Z0lDQWdJQ0FnSUdsbUlDaHRaWE56WVdkbFJtOXliV0YwSUQwOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lFeHZaMmRsY2k1RmNuSnZjaWhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JNYjJkblpYSXVSMlYwVTNSaFkydFVjbUZqWlNncExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHQkJkSFJsYlhCMFpXUWdkRzhnWlcxcGRDQmtaWE5qY21sd2RHOXlJSGRwZEdnZ2JXVnpjMkZuWlNCMGVYQmxPaUFrZTIxbGMzTmhaMlZVZVhCbGZTd2dZblYwSUhSb1pTQm1jbTl1ZEdWdVpDQm9ZWE51SjNRZ1ltVmxiaUJqYjI1bWFXZDFjbVZrSUhSdklITmxibVFnYzNWamFDQmhJRzFsYzNOaFoyVXVJRU5vWldOcklIbHZkU2QyWlNCaFpHUmxaQ0IwYUdVZ2JXVnpjMkZuWlNCMGVYQmxJR2x1SUhsdmRYSWdZM0J3WUZ4dUlDQWdJQ0FnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lFeHZaMmRsY2k1TWIyY29URzluWjJWeUxrZGxkRk4wWVdOclZISmhZMlVvS1N3Z0oxTmxibVJwYm1jNklDY2dLeUJrWlhOamNtbHdkRzl5TENBMktUdGNiaUFnSUNBZ0lDQWdMeThnUVdSa0lIUm9aU0JWVkVZdE1UWWdTbE5QVGlCemRISnBibWNnZEc4Z2RHaGxJR0Z5Y21GNUlHSjVkR1VnWW5WbVptVnlMQ0JuYjJsdVp5QjBkMjhnWW5sMFpYTWdZWFJjYmlBZ0lDQWdJQ0FnTHk4Z1lTQjBhVzFsTGx4dUlDQWdJQ0FnSUNCamIyNXpkQ0JrWVhSaElEMGdibVYzSUVSaGRHRldhV1YzS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdibVYzSUVGeWNtRjVRblZtWm1WeUtERWdLeUF5SUNzZ01pQXFJR1JsYzJOeWFYQjBiM0pCYzFOMGNtbHVaeTVzWlc1bmRHZ3BYRzRnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUd4bGRDQmllWFJsU1dSNElEMGdNRHRjYmlBZ0lDQWdJQ0FnWkdGMFlTNXpaWFJWYVc1ME9DaGllWFJsU1dSNExDQnRaWE56WVdkbFJtOXliV0YwTG1sa0tUdGNiaUFnSUNBZ0lDQWdZbmwwWlVsa2VDc3JPMXh1SUNBZ0lDQWdJQ0JrWVhSaExuTmxkRlZwYm5ReE5paGllWFJsU1dSNExDQmtaWE5qY21sd2RHOXlRWE5UZEhKcGJtY3ViR1Z1WjNSb0xDQjBjblZsS1R0Y2JpQWdJQ0FnSUNBZ1lubDBaVWxrZUNBclBTQXlPMXh1SUNBZ0lDQWdJQ0JtYjNJZ0tHeGxkQ0JwSUQwZ01Ec2dhU0E4SUdSbGMyTnlhWEIwYjNKQmMxTjBjbWx1Wnk1c1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1pHRjBZUzV6WlhSVmFXNTBNVFlvWW5sMFpVbGtlQ3dnWkdWelkzSnBjSFJ2Y2tGelUzUnlhVzVuTG1Ob1lYSkRiMlJsUVhRb2FTa3NJSFJ5ZFdVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWW5sMFpVbGtlQ0FyUFNBeU8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tDRjBhR2x6TG1SaGRHRkRhR0Z1Ym1Wc1UyVnVaR1Z5TG1OaGJsTmxibVFvS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnVEc5bloyVnlMa2x1Wm04b1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1RHOW5aMlZ5TGtkbGRGTjBZV05yVkhKaFkyVW9LU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JnUkdGMFlTQmphR0Z1Ym1Wc0lHTmhibTV2ZENCelpXNWtJSGxsZEN3Z2MydHBjSEJwYm1jZ2MyVnVaR2x1WnlCa1pYTmpjbWx3ZEc5eUlHMWxjM05oWjJVNklDUjdiV1Z6YzJGblpWUjVjR1Y5SUMwZ0pIdGtaWE5qY21sd2RHOXlRWE5UZEhKcGJtZDlZRnh1SUNBZ0lDQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lIUm9hWE11WkdGMFlVTm9ZVzV1Wld4VFpXNWtaWEl1YzJWdVpFUmhkR0VvWkdGMFlTNWlkV1ptWlhJcE8xeHVJQ0FnSUgxY2JuMWNiaUlzSWk4dklFTnZjSGx5YVdkb2RDQkZjR2xqSUVkaGJXVnpMQ0JKYm1NdUlFRnNiQ0JTYVdkb2RITWdVbVZ6WlhKMlpXUXVYRzVjYm1sdGNHOXlkQ0I3SUVSaGRHRkRhR0Z1Ym1Wc1UyVnVaR1Z5SUgwZ1puSnZiU0FuTGk0dlJHRjBZVU5vWVc1dVpXd3ZSR0YwWVVOb1lXNXVaV3hUWlc1a1pYSW5PMXh1YVcxd2IzSjBJSHNnVEc5bloyVnlJSDBnWm5KdmJTQW5MaTR2VEc5bloyVnlMMHh2WjJkbGNpYzdYRzVwYlhCdmNuUWdleUJUZEhKbFlXMU5aWE56WVdkbFEyOXVkSEp2Ykd4bGNpQjlJR1p5YjIwZ0p5NHZVM1J5WldGdFRXVnpjMkZuWlVOdmJuUnliMnhzWlhJbk8xeHVYRzVsZUhCdmNuUWdZMnhoYzNNZ1UyVnVaRTFsYzNOaFoyVkRiMjUwY205c2JHVnlJSHRjYmlBZ0lDQjBiMU4wY21WaGJXVnlUV1Z6YzJGblpYTk5ZWEJRY205MmFXUmxjam9nVTNSeVpXRnRUV1Z6YzJGblpVTnZiblJ5YjJ4c1pYSTdYRzRnSUNBZ1pHRjBZVU5vWVc1dVpXeFRaVzVrWlhJNklFUmhkR0ZEYUdGdWJtVnNVMlZ1WkdWeU8xeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dRSEJoY21GdElHUmhkR0ZEYUdGdWJtVnNVMlZ1WkdWeUlDMGdSR0YwWVNCamFHRnVibVZzSUdsdWMzUmhibU5sWEc0Z0lDQWdJQ29nUUhCaGNtRnRJSFJ2VTNSeVpXRnRaWEpOWlhOellXZGxjMDFoY0ZCeWIzWnBaR1Z5SUMwZ1UzUnlaV0Z0SUUxbGMzTmhaMlZ6SUdsdWMzUmhibU5sWEc0Z0lDQWdJQ292WEc0Z0lDQWdZMjl1YzNSeWRXTjBiM0lvWEc0Z0lDQWdJQ0FnSUdSaGRHRkRhR0Z1Ym1Wc1UyVnVaR1Z5T2lCRVlYUmhRMmhoYm01bGJGTmxibVJsY2l4Y2JpQWdJQ0FnSUNBZ2RHOVRkSEpsWVcxbGNrMWxjM05oWjJWelRXRndVSEp2ZG1sa1pYSTZJRk4wY21WaGJVMWxjM05oWjJWRGIyNTBjbTlzYkdWeVhHNGdJQ0FnS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WkdGMFlVTm9ZVzV1Wld4VFpXNWtaWElnUFNCa1lYUmhRMmhoYm01bGJGTmxibVJsY2p0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTUwYjFOMGNtVmhiV1Z5VFdWemMyRm5aWE5OWVhCUWNtOTJhV1JsY2lBOUlIUnZVM1J5WldGdFpYSk5aWE56WVdkbGMwMWhjRkJ5YjNacFpHVnlPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRk5sYm1RZ1lTQnRaWE56WVdkbElIUnZJSFJvWlNCemRISmxZVzFsY2lCMGFISnZkV2RvSUhSb1pTQmtZWFJoSUdOb1lXNXVaV3hjYmlBZ0lDQWdLaUJBY0dGeVlXMGdiV1Z6YzJGblpWUjVjR1VnTFNCMGFHVWdkSGx3WlNCdlppQnRaWE56WVdkbElIZGxJR0Z5WlNCelpXNWthVzVuWEc0Z0lDQWdJQ29nUUhCaGNtRnRJRzFsYzNOaFoyVkVZWFJoSUMwZ2RHaGxJRzFsYzNOaFoyVWdaR0YwWVNCM1pTQmhjbVVnYzJWdVpHbHVaeUJ2ZG1WeUlIUm9aU0JrWVhSaElHTm9ZVzV1Wld4Y2JpQWdJQ0FnS2lCQWNtVjBkWEp1Y3lBdElHNXBiRnh1SUNBZ0lDQXFMMXh1SUNBZ0lITmxibVJOWlhOellXZGxWRzlUZEhKbFlXMWxjaWh0WlhOellXZGxWSGx3WlRvZ2MzUnlhVzVuTENCdFpYTnpZV2RsUkdGMFlUODZJRUZ5Y21GNVBHNTFiV0psY2o0cElIdGNiaUFnSUNBZ0lDQWdhV1lnS0cxbGMzTmhaMlZFWVhSaElEMDlQU0IxYm1SbFptbHVaV1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJRzFsYzNOaFoyVkVZWFJoSUQwZ1cxMDdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCamIyNXpkQ0IwYjFOMGNtVmhiV1Z5VFdWemMyRm5aWE1nUFZ4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1MGIxTjBjbVZoYldWeVRXVnpjMkZuWlhOTllYQlFjbTkyYVdSbGNpNTBiMU4wY21WaGJXVnlUV1Z6YzJGblpYTTdYRzRnSUNBZ0lDQWdJR052Ym5OMElHMWxjM05oWjJWR2IzSnRZWFFnUFNCMGIxTjBjbVZoYldWeVRXVnpjMkZuWlhNdVoyVjBSbkp2YlV0bGVTaHRaWE56WVdkbFZIbHdaU2s3WEc0Z0lDQWdJQ0FnSUdsbUlDaHRaWE56WVdkbFJtOXliV0YwSUQwOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lFeHZaMmRsY2k1RmNuSnZjaWhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JNYjJkblpYSXVSMlYwVTNSaFkydFVjbUZqWlNncExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHQkJkSFJsYlhCMFpXUWdkRzhnYzJWdVpDQmhJRzFsYzNOaFoyVWdkRzhnZEdobElITjBjbVZoYldWeUlIZHBkR2dnYldWemMyRm5aU0IwZVhCbE9pQWtlMjFsYzNOaFoyVlVlWEJsZlN3Z1luVjBJSFJvWlNCbWNtOXVkR1Z1WkNCb1lYTnVKM1FnWW1WbGJpQmpiMjVtYVdkMWNtVmtJSFJ2SUhObGJtUWdjM1ZqYUNCaElHMWxjM05oWjJVdUlFTm9aV05ySUhsdmRTZDJaU0JoWkdSbFpDQjBhR1VnYldWemMyRm5aU0IwZVhCbElHbHVJSGx2ZFhJZ1kzQndZRnh1SUNBZ0lDQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lHTnZibk4wSUdSaGRHRWdQU0J1WlhjZ1JHRjBZVlpwWlhjb1hHNGdJQ0FnSUNBZ0lDQWdJQ0J1WlhjZ1FYSnlZWGxDZFdabVpYSW9iV1Z6YzJGblpVWnZjbTFoZEM1aWVYUmxUR1Z1WjNSb0lDc2dNU2xjYmlBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ1pHRjBZUzV6WlhSVmFXNTBPQ2d3TENCdFpYTnpZV2RsUm05eWJXRjBMbWxrS1R0Y2JpQWdJQ0FnSUNBZ2JHVjBJR0o1ZEdWUFptWnpaWFFnUFNBeE8xeHVYRzRnSUNBZ0lDQWdJRzFsYzNOaFoyVkVZWFJoTG1admNrVmhZMmdvS0dWc1pXMWxiblE2SUc1MWJXSmxjaXdnYVdSNE9pQnVkVzFpWlhJcElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUhSNWNHVWdQU0J0WlhOellXZGxSbTl5YldGMExuTjBjblZqZEhWeVpWdHBaSGhkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjM2RwZEdOb0lDaDBlWEJsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0FuZFdsdWREZ25PbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa1lYUmhMbk5sZEZWcGJuUTRLR0o1ZEdWUFptWnpaWFFzSUdWc1pXMWxiblFwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmllWFJsVDJabWMyVjBJQ3M5SURFN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNBbmRXbHVkREUySnpwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR0YwWVM1elpYUlZhVzUwTVRZb1lubDBaVTltWm5ObGRDd2daV3hsYldWdWRDd2dkSEoxWlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0o1ZEdWUFptWnpaWFFnS3owZ01qdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElDZHBiblF4TmljNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JoZEdFdWMyVjBTVzUwTVRZb1lubDBaVTltWm5ObGRDd2daV3hsYldWdWRDd2dkSEoxWlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0o1ZEdWUFptWnpaWFFnS3owZ01qdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElDZG1iRzloZENjNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JoZEdFdWMyVjBSbXh2WVhRek1paGllWFJsVDJabWMyVjBMQ0JsYkdWdFpXNTBMQ0IwY25WbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5sMFpVOW1abk5sZENBclBTQTBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdKMlJ2ZFdKc1pTYzZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSaGRHRXVjMlYwUm14dllYUTJOQ2hpZVhSbFQyWm1jMlYwTENCbGJHVnRaVzUwTENCMGNuVmxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lubDBaVTltWm5ObGRDQXJQU0E0TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlNrN1hHNWNiaUFnSUNBZ0lDQWdhV1lnS0NGMGFHbHpMbVJoZEdGRGFHRnVibVZzVTJWdVpHVnlMbU5oYmxObGJtUW9LU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdURzluWjJWeUxrbHVabThvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVEc5bloyVnlMa2RsZEZOMFlXTnJWSEpoWTJVb0tTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmdSR0YwWVNCamFHRnVibVZzSUdOaGJtNXZkQ0J6Wlc1a0lIbGxkQ3dnYzJ0cGNIQnBibWNnYzJWdVpHbHVaeUJ0WlhOellXZGxPaUFrZTIxbGMzTmhaMlZVZVhCbGZTQXRJQ1I3Ym1WM0lGVnBiblE0UVhKeVlYa29YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSaGRHRXVZblZtWm1WeVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tYMWdYRzRnSUNBZ0lDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVrWVhSaFEyaGhibTVsYkZObGJtUmxjaTV6Wlc1a1JHRjBZU2hrWVhSaExtSjFabVpsY2lrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNTlYRzRpTENJdkx5QkRiM0I1Y21sbmFIUWdSWEJwWXlCSFlXMWxjeXdnU1c1akxpQkJiR3dnVW1sbmFIUnpJRkpsYzJWeWRtVmtMbHh1WEc1cGJYQnZjblFnZXlCVWQyOVhZWGxOWVhBZ2ZTQm1jbTl0SUNjdUwxUjNiMWRoZVUxaGNDYzdYRzVwYlhCdmNuUWdleUJNYjJkblpYSWdmU0JtY205dElDY3VMaTlNYjJkblpYSXZURzluWjJWeUp6dGNibHh1Wlhod2IzSjBJR05zWVhOeklGUnZVM1J5WldGdFpYSk5aWE56WVdkbElIdGNiaUFnSUNCcFpEb2diblZ0WW1WeU8xeHVJQ0FnSUdKNWRHVk1aVzVuZEdnNklHNTFiV0psY2p0Y2JpQWdJQ0J6ZEhKMVkzUjFjbVUvT2lCQmNuSmhlVHh6ZEhKcGJtYytPMXh1ZlZ4dVhHNWxlSEJ2Y25RZ1kyeGhjM01nVTNSeVpXRnRUV1Z6YzJGblpVTnZiblJ5YjJ4c1pYSWdlMXh1SUNBZ0lIUnZVM1J5WldGdFpYSklZVzVrYkdWeWN6b2dUV0Z3UEZ4dUlDQWdJQ0FnSUNCemRISnBibWNzWEc0Z0lDQWdJQ0FnSUNodFpYTnpZV2RsUkdGMFlUODZJRUZ5Y21GNVBHNTFiV0psY2o0Z2ZDQjFibVJsWm1sdVpXUXBJRDArSUhadmFXUmNiaUFnSUNBK08xeHVJQ0FnSUdaeWIyMVRkSEpsWVcxbGNraGhibVJzWlhKek9pQk5ZWEE4WEc0Z0lDQWdJQ0FnSUhOMGNtbHVaeXhjYmlBZ0lDQWdJQ0FnS0cxbGMzTmhaMlZVZVhCbE9pQnpkSEpwYm1jc0lHMWxjM05oWjJWRVlYUmhQem9nUVhKeVlYbENkV1ptWlhJZ2ZDQjFibVJsWm1sdVpXUXBJRDArSUhadmFXUmNiaUFnSUNBK08xeHVJQ0FnSUM4dklDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdWSGx3WlNBZ0lDQWdJRVp2Y20xaGRGeHVJQ0FnSUhSdlUzUnlaV0Z0WlhKTlpYTnpZV2RsY3pvZ1ZIZHZWMkY1VFdGd1BITjBjbWx1Wnl3Z1ZHOVRkSEpsWVcxbGNrMWxjM05oWjJVK08xeHVJQ0FnSUM4dklDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdWSGx3WlNBZ0lDQWdTVVJjYmlBZ0lDQm1jbTl0VTNSeVpXRnRaWEpOWlhOellXZGxjem9nVkhkdlYyRjVUV0Z3UEhOMGNtbHVaeXdnYm5WdFltVnlQanRjYmx4dUlDQWdJR052Ym5OMGNuVmpkRzl5S0NrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG5SdlUzUnlaV0Z0WlhKSVlXNWtiR1Z5Y3lBOUlHNWxkeUJOWVhBb0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1bWNtOXRVM1J5WldGdFpYSklZVzVrYkdWeWN5QTlJRzVsZHlCTllYQW9LVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NTBiMU4wY21WaGJXVnlUV1Z6YzJGblpYTWdQU0J1WlhjZ1ZIZHZWMkY1VFdGd0tDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdVpuSnZiVk4wY21WaGJXVnlUV1Z6YzJGblpYTWdQU0J1WlhjZ1ZIZHZWMkY1VFdGd0tDazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dVRzl3ZFd4aGRHVWdkR2hsSUVSbFptRjFiSFFnYldWemMyRm5aU0J3Y205MGIyTnZiRnh1SUNBZ0lDQXFMMXh1SUNBZ0lIQnZjSFZzWVhSbFJHVm1ZWFZzZEZCeWIzUnZZMjlzS0NrZ2UxeHVJQ0FnSUNBZ0lDQXZLbHh1SUNBZ0lDQWdJQ0FnS2lCRGIyNTBjbTlzSUUxbGMzTmhaMlZ6TGlCU1lXNW5aU0E5SURBdUxqUTVMbHh1SUNBZ0lDQWdJQ0FnS2k5Y2JpQWdJQ0FnSUNBZ2RHaHBjeTUwYjFOMGNtVmhiV1Z5VFdWemMyRm5aWE11WVdSa0tDZEpSbkpoYldWU1pYRjFaWE4wSnl3Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdRNklEQXNYRzRnSUNBZ0lDQWdJQ0FnSUNCaWVYUmxUR1Z1WjNSb09pQXdMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2MzUnlkV04wZFhKbE9pQmJYVnh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTUwYjFOMGNtVmhiV1Z5VFdWemMyRm5aWE11WVdSa0tDZFNaWEYxWlhOMFVYVmhiR2wwZVVOdmJuUnliMnduTENCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWkRvZ01TeGNiaUFnSUNBZ0lDQWdJQ0FnSUdKNWRHVk1aVzVuZEdnNklEQXNYRzRnSUNBZ0lDQWdJQ0FnSUNCemRISjFZM1IxY21VNklGdGRYRzRnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMblJ2VTNSeVpXRnRaWEpOWlhOellXZGxjeTVoWkdRb0owWndjMUpsY1hWbGMzUW5MQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaRG9nTWl4Y2JpQWdJQ0FnSUNBZ0lDQWdJR0o1ZEdWTVpXNW5kR2c2SURBc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6ZEhKMVkzUjFjbVU2SUZ0ZFhHNGdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuUnZVM1J5WldGdFpYSk5aWE56WVdkbGN5NWhaR1FvSjBGMlpYSmhaMlZDYVhSeVlYUmxVbVZ4ZFdWemRDY3NJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbGtPaUF6TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdZbmwwWlV4bGJtZDBhRG9nTUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSE4wY25WamRIVnlaVG9nVzExY2JpQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJSFJvYVhNdWRHOVRkSEpsWVcxbGNrMWxjM05oWjJWekxtRmtaQ2duVTNSaGNuUlRkSEpsWVcxcGJtY25MQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaRG9nTkN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR0o1ZEdWTVpXNW5kR2c2SURBc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6ZEhKMVkzUjFjbVU2SUZ0ZFhHNGdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuUnZVM1J5WldGdFpYSk5aWE56WVdkbGN5NWhaR1FvSjFOMGIzQlRkSEpsWVcxcGJtY25MQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaRG9nTlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR0o1ZEdWTVpXNW5kR2c2SURBc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6ZEhKMVkzUjFjbVU2SUZ0ZFhHNGdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuUnZVM1J5WldGdFpYSk5aWE56WVdkbGN5NWhaR1FvSjB4aGRHVnVZM2xVWlhOMEp5d2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXUTZJRFlzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmllWFJsVEdWdVozUm9PaUF3TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdjM1J5ZFdOMGRYSmxPaUJiWFZ4dUlDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1MGIxTjBjbVZoYldWeVRXVnpjMkZuWlhNdVlXUmtLQ2RTWlhGMVpYTjBTVzVwZEdsaGJGTmxkSFJwYm1kekp5d2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXUTZJRGNzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmllWFJsVEdWdVozUm9PaUF3TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdjM1J5ZFdOMGRYSmxPaUJiWFZ4dUlDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1MGIxTjBjbVZoYldWeVRXVnpjMkZuWlhNdVlXUmtLQ2RVWlhOMFJXTm9ieWNzSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xrT2lBNExGeHVJQ0FnSUNBZ0lDQWdJQ0FnWW5sMFpVeGxibWQwYURvZ01DeGNiaUFnSUNBZ0lDQWdJQ0FnSUhOMGNuVmpkSFZ5WlRvZ1cxMWNiaUFnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUM4cVhHNGdJQ0FnSUNBZ0lDQXFJRWx1Y0hWMElFMWxjM05oWjJWekxpQlNZVzVuWlNBOUlEVXdMaTQ0T1M1Y2JpQWdJQ0FnSUNBZ0lDb3ZYRzRnSUNBZ0lDQWdJQzh2SUVkbGJtVnlhV01nU1c1d2RYUWdUV1Z6YzJGblpYTXVJRkpoYm1kbElEMGdOVEF1TGpVNUxseHVJQ0FnSUNBZ0lDQjBhR2x6TG5SdlUzUnlaV0Z0WlhKTlpYTnpZV2RsY3k1aFpHUW9KMVZKU1c1MFpYSmhZM1JwYjI0bkxDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFpEb2dOVEFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmllWFJsVEdWdVozUm9PaUF3TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdjM1J5ZFdOMGRYSmxPaUJiWFZ4dUlDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1MGIxTjBjbVZoYldWeVRXVnpjMkZuWlhNdVlXUmtLQ2REYjIxdFlXNWtKeXdnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1E2SURVeExGeHVJQ0FnSUNBZ0lDQWdJQ0FnWW5sMFpVeGxibWQwYURvZ01DeGNiaUFnSUNBZ0lDQWdJQ0FnSUhOMGNuVmpkSFZ5WlRvZ1cxMWNiaUFnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUM4dklFdGxlV0p2WVhKa0lFbHVjSFYwSUUxbGMzTmhaMlV1SUZKaGJtZGxJRDBnTmpBdUxqWTVMbHh1SUNBZ0lDQWdJQ0IwYUdsekxuUnZVM1J5WldGdFpYSk5aWE56WVdkbGN5NWhaR1FvSjB0bGVVUnZkMjRuTENCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWkRvZ05qQXNYRzRnSUNBZ0lDQWdJQ0FnSUNCaWVYUmxUR1Z1WjNSb09pQXlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdJQ0FnSUNBZ0lDQWdJQ0JyWlhsRGIyUmxJQ0JwYzFKbGNHVmhkRnh1SUNBZ0lDQWdJQ0FnSUNBZ2MzUnlkV04wZFhKbE9pQmJKM1ZwYm5RNEp5d2dKM1ZwYm5RNEoxMWNiaUFnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkRzlUZEhKbFlXMWxjazFsYzNOaFoyVnpMbUZrWkNnblMyVjVWWEFuTENCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWkRvZ05qRXNYRzRnSUNBZ0lDQWdJQ0FnSUNCaWVYUmxUR1Z1WjNSb09pQXhMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdJQ0FnSUNBZ0lDQWdJQ0JyWlhsRGIyUmxYRzRnSUNBZ0lDQWdJQ0FnSUNCemRISjFZM1IxY21VNklGc25kV2x1ZERnblhWeHVJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NTBiMU4wY21WaGJXVnlUV1Z6YzJGblpYTXVZV1JrS0NkTFpYbFFjbVZ6Y3ljc0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsa09pQTJNaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lHSjVkR1ZNWlc1bmRHZzZJRElzWEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUFnSUNBZ0lDQWdJQ0FnSUdOb1lYSmpiMlJsWEc0Z0lDQWdJQ0FnSUNBZ0lDQnpkSEoxWTNSMWNtVTZJRnNuZFdsdWRERTJKMTFjYmlBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lDOHZJRTF2ZFhObElFbHVjSFYwSUUxbGMzTmhaMlZ6TGlCU1lXNW5aU0E5SURjd0xpNDNPUzVjYmlBZ0lDQWdJQ0FnZEdocGN5NTBiMU4wY21WaGJXVnlUV1Z6YzJGblpYTXVZV1JrS0NkTmIzVnpaVVZ1ZEdWeUp5d2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXUTZJRGN3TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdZbmwwWlV4bGJtZDBhRG9nTUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSE4wY25WamRIVnlaVG9nVzExY2JpQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJSFJvYVhNdWRHOVRkSEpsWVcxbGNrMWxjM05oWjJWekxtRmtaQ2duVFc5MWMyVk1aV0YyWlNjc0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsa09pQTNNU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHSjVkR1ZNWlc1bmRHZzZJREFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnpkSEoxWTNSMWNtVTZJRnRkWEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5SdlUzUnlaV0Z0WlhKTlpYTnpZV2RsY3k1aFpHUW9KMDF2ZFhObFJHOTNiaWNzSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xrT2lBM01peGNiaUFnSUNBZ0lDQWdJQ0FnSUdKNWRHVk1aVzVuZEdnNklEVXNYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QWdJQ0FnSUNBZ0lDQWdJQ0FnWW5WMGRHOXVJQ0FnSUNCNElDQWdJQ0FnSUNBZ2VWeHVJQ0FnSUNBZ0lDQWdJQ0FnYzNSeWRXTjBkWEpsT2lCYkozVnBiblE0Snl3Z0ozVnBiblF4Tmljc0lDZDFhVzUwTVRZblhWeHVJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NTBiMU4wY21WaGJXVnlUV1Z6YzJGblpYTXVZV1JrS0NkTmIzVnpaVlZ3Snl3Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdRNklEY3pMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1lubDBaVXhsYm1kMGFEb2dOU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWRYUjBiMjRnSUNBZ0lIZ2dJQ0FnSUNBZ0lDQjVYRzRnSUNBZ0lDQWdJQ0FnSUNCemRISjFZM1IxY21VNklGc25kV2x1ZERnbkxDQW5kV2x1ZERFMkp5d2dKM1ZwYm5ReE5pZGRYRzRnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMblJ2VTNSeVpXRnRaWEpOWlhOellXZGxjeTVoWkdRb0owMXZkWE5sVFc5MlpTY3NJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbGtPaUEzTkN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR0o1ZEdWTVpXNW5kR2c2SURnc1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlBZ0lDQWdJQ0FnSUNBZ0lDQWdlQ0FnSUNBZ0lDQWdJQ0FnZVNBZ0lDQWdJR1JsYkhSaFdDQWdJQ0JrWld4MFlWbGNiaUFnSUNBZ0lDQWdJQ0FnSUhOMGNuVmpkSFZ5WlRvZ1d5ZDFhVzUwTVRZbkxDQW5kV2x1ZERFMkp5d2dKMmx1ZERFMkp5d2dKMmx1ZERFMkoxMWNiaUFnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkRzlUZEhKbFlXMWxjazFsYzNOaFoyVnpMbUZrWkNnblRXOTFjMlZYYUdWbGJDY3NJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbGtPaUEzTlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR0o1ZEdWTVpXNW5kR2c2SURZc1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlBZ0lDQWdJQ0FnSUNBZ0lDQWdaR1ZzZEdFZ0lDQWdJQ0FnZUNBZ0lDQWdJQ0FnZVZ4dUlDQWdJQ0FnSUNBZ0lDQWdjM1J5ZFdOMGRYSmxPaUJiSjJsdWRERTJKeXdnSjNWcGJuUXhOaWNzSUNkMWFXNTBNVFluWFZ4dUlDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1MGIxTjBjbVZoYldWeVRXVnpjMkZuWlhNdVlXUmtLQ2ROYjNWelpVUnZkV0pzWlNjc0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsa09pQTNOaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lHSjVkR1ZNWlc1bmRHZzZJRFVzWEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUFnSUNBZ0lDQWdJQ0FnSUNBZ1luVjBkRzl1SUNBZ0lDQjRJQ0FnSUNBZ0lDQWdlVnh1SUNBZ0lDQWdJQ0FnSUNBZ2MzUnlkV04wZFhKbE9pQmJKM1ZwYm5RNEp5d2dKM1ZwYm5ReE5pY3NJQ2QxYVc1ME1UWW5YVnh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ0x5OGdWRzkxWTJnZ1NXNXdkWFFnVFdWemMyRm5aWE11SUZKaGJtZGxJRDBnT0RBdUxqZzVMbHh1SUNBZ0lDQWdJQ0IwYUdsekxuUnZVM1J5WldGdFpYSk5aWE56WVdkbGN5NWhaR1FvSjFSdmRXTm9VM1JoY25RbkxDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFpEb2dPREFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmllWFJsVEdWdVozUm9PaUE0TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnSUNBZ0lDQWdJQ0FnYm5WdGRHOTFZMmhsY3lneEtTQWdJSGdnSUNBZ0lDQWdlU0FnSUNBZ0lDQWdhV1I0SUNBZ0lDQm1iM0pqWlNBZ0lDQWdkbUZzYVdSY2JpQWdJQ0FnSUNBZ0lDQWdJSE4wY25WamRIVnlaVG9nV3lkMWFXNTBPQ2NzSUNkMWFXNTBNVFluTENBbmRXbHVkREUySnl3Z0ozVnBiblE0Snl3Z0ozVnBiblE0Snl3Z0ozVnBiblE0SjExY2JpQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJSFJvYVhNdWRHOVRkSEpsWVcxbGNrMWxjM05oWjJWekxtRmtaQ2duVkc5MVkyaEZibVFuTENCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWkRvZ09ERXNYRzRnSUNBZ0lDQWdJQ0FnSUNCaWVYUmxUR1Z1WjNSb09pQTRMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdJQ0FnSUNBZ0lDQWdiblZ0ZEc5MVkyaGxjeWd4S1NBZ0lIZ2dJQ0FnSUNBZ2VTQWdJQ0FnSUNBZ2FXUjRJQ0FnSUNCbWIzSmpaU0FnSUNBZ2RtRnNhV1JjYmlBZ0lDQWdJQ0FnSUNBZ0lITjBjblZqZEhWeVpUb2dXeWQxYVc1ME9DY3NJQ2QxYVc1ME1UWW5MQ0FuZFdsdWRERTJKeXdnSjNWcGJuUTRKeXdnSjNWcGJuUTRKeXdnSjNWcGJuUTRKMTFjYmlBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11ZEc5VGRISmxZVzFsY2sxbGMzTmhaMlZ6TG1Ga1pDZ25WRzkxWTJoTmIzWmxKeXdnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1E2SURneUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnWW5sMFpVeGxibWQwYURvZ09DeGNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklDQWdJQ0FnSUNBZ0lHNTFiWFJ2ZFdOb1pYTW9NU2tnSUNCNElDQWdJQ0FnSUhrZ0lDQWdJQ0FnYVdSNElDQWdJQ0FnWm05eVkyVWdJQ0FnSUhaaGJHbGtYRzRnSUNBZ0lDQWdJQ0FnSUNCemRISjFZM1IxY21VNklGc25kV2x1ZERnbkxDQW5kV2x1ZERFMkp5d2dKM1ZwYm5ReE5pY3NJQ2QxYVc1ME9DY3NJQ2QxYVc1ME9DY3NJQ2QxYVc1ME9DZGRYRzRnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNBdkx5QkhZVzFsY0dGa0lFbHVjSFYwSUUxbGMzTmhaMlZ6TGlCU1lXNW5aU0E5SURrd0xpNDVPVnh1SUNBZ0lDQWdJQ0IwYUdsekxuUnZVM1J5WldGdFpYSk5aWE56WVdkbGN5NWhaR1FvSjBkaGJXVndZV1JEYjI1dVpXTjBaV1FuTENCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWkRvZ09UTXNYRzRnSUNBZ0lDQWdJQ0FnSUNCaWVYUmxUR1Z1WjNSb09pQXdMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2MzUnlkV04wZFhKbE9pQmJYVnh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTUwYjFOMGNtVmhiV1Z5VFdWemMyRm5aWE11WVdSa0tDZEhZVzFsY0dGa1FuVjBkRzl1VUhKbGMzTmxaQ2NzSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xrT2lBNU1DeGNiaUFnSUNBZ0lDQWdJQ0FnSUdKNWRHVk1aVzVuZEdnNklETXNYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QWdJQ0FnSUNBZ0lDQWdJR04wY214bGNrbGtJQ0FnWW5WMGRHOXVJQ0JwYzFKbGNHVmhkRnh1SUNBZ0lDQWdJQ0FnSUNBZ2MzUnlkV04wZFhKbE9pQmJKM1ZwYm5RNEp5d2dKM1ZwYm5RNEp5d2dKM1ZwYm5RNEoxMWNiaUFnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkRzlUZEhKbFlXMWxjazFsYzNOaFoyVnpMbUZrWkNnblIyRnRaWEJoWkVKMWRIUnZibEpsYkdWaGMyVmtKeXdnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1E2SURreExGeHVJQ0FnSUNBZ0lDQWdJQ0FnWW5sMFpVeGxibWQwYURvZ015eGNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklDQWdJQ0FnSUNBZ0lDQWdZM1J5YkdWeVNXUWdJQ0JpZFhSMGIyNGdJR2x6VW1Wd1pXRjBLREFwWEc0Z0lDQWdJQ0FnSUNBZ0lDQnpkSEoxWTNSMWNtVTZJRnNuZFdsdWREZ25MQ0FuZFdsdWREZ25MQ0FuZFdsdWREZ25YVnh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTUwYjFOMGNtVmhiV1Z5VFdWemMyRm5aWE11WVdSa0tDZEhZVzFsY0dGa1FXNWhiRzluSnl3Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdRNklEa3lMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1lubDBaVXhsYm1kMGFEb2dNVEFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUFnSUNBZ0lDQWdJQ0FnSUdOMGNteGxja2xrSUNBZ1luVjBkRzl1SUNCaGJtRnNiMmRXWVd4MVpWeHVJQ0FnSUNBZ0lDQWdJQ0FnYzNSeWRXTjBkWEpsT2lCYkozVnBiblE0Snl3Z0ozVnBiblE0Snl3Z0oyUnZkV0pzWlNkZFhHNGdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuUnZVM1J5WldGdFpYSk5aWE56WVdkbGN5NWhaR1FvSjBkaGJXVndZV1JFYVhOamIyNXVaV04wWldRbkxDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFpEb2dPVFFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmllWFJsVEdWdVozUm9PaUF4TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnSUNBZ0lDQWdJQ0FnWTNSeWJHVnlTV1JjYmlBZ0lDQWdJQ0FnSUNBZ0lITjBjblZqZEhWeVpUb2dXeWQxYVc1ME9DZGRYRzRnSUNBZ0lDQWdJSDBwTzF4dVhHNGdJQ0FnSUNBZ0lIUm9hWE11Wm5KdmJWTjBjbVZoYldWeVRXVnpjMkZuWlhNdVlXUmtLQ2RSZFdGc2FYUjVRMjl1ZEhKdmJFOTNibVZ5YzJocGNDY3NJREFwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbVp5YjIxVGRISmxZVzFsY2sxbGMzTmhaMlZ6TG1Ga1pDZ25VbVZ6Y0c5dWMyVW5MQ0F4S1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVtY205dFUzUnlaV0Z0WlhKTlpYTnpZV2RsY3k1aFpHUW9KME52YlcxaGJtUW5MQ0F5S1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVtY205dFUzUnlaV0Z0WlhKTlpYTnpZV2RsY3k1aFpHUW9KMFp5WldWNlpVWnlZVzFsSnl3Z015azdYRzRnSUNBZ0lDQWdJSFJvYVhNdVpuSnZiVk4wY21WaGJXVnlUV1Z6YzJGblpYTXVZV1JrS0NkVmJtWnlaV1Y2WlVaeVlXMWxKeXdnTkNrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Wm5KdmJWTjBjbVZoYldWeVRXVnpjMkZuWlhNdVlXUmtLQ2RXYVdSbGIwVnVZMjlrWlhKQmRtZFJVQ2NzSURVcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1aeWIyMVRkSEpsWVcxbGNrMWxjM05oWjJWekxtRmtaQ2duVEdGMFpXNWplVlJsYzNRbkxDQTJLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NW1jbTl0VTNSeVpXRnRaWEpOWlhOellXZGxjeTVoWkdRb0owbHVhWFJwWVd4VFpYUjBhVzVuY3ljc0lEY3BPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtWnliMjFUZEhKbFlXMWxjazFsYzNOaFoyVnpMbUZrWkNnblJtbHNaVVY0ZEdWdWMybHZiaWNzSURncE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1aeWIyMVRkSEpsWVcxbGNrMWxjM05oWjJWekxtRmtaQ2duUm1sc1pVMXBiV1ZVZVhCbEp5d2dPU2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVabkp2YlZOMGNtVmhiV1Z5VFdWemMyRm5aWE11WVdSa0tDZEdhV3hsUTI5dWRHVnVkSE1uTENBeE1DazdYRzRnSUNBZ0lDQWdJSFJvYVhNdVpuSnZiVk4wY21WaGJXVnlUV1Z6YzJGblpYTXVZV1JrS0NkVVpYTjBSV05vYnljc0lERXhLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NW1jbTl0VTNSeVpXRnRaWEpOWlhOellXZGxjeTVoWkdRb0owbHVjSFYwUTI5dWRISnZiRTkzYm1WeWMyaHBjQ2NzSURFeUtUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1bWNtOXRVM1J5WldGdFpYSk5aWE56WVdkbGN5NWhaR1FvSjBkaGJXVndZV1JTWlhOd2IyNXpaU2NzSURFektUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1bWNtOXRVM1J5WldGdFpYSk5aWE56WVdkbGN5NWhaR1FvSjFCeWIzUnZZMjlzSnl3Z01qVTFLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJTWldkcGMzUmxjaUJoSUcxbGMzTmhaMlVnYUdGdVpHeGxjbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQnRaWE56WVdkbFJHbHlaV04wYVc5dUlDMGdkR2hsSUdScGNtVmpkR2x2YmlCdlppQjBhR1VnYldWemMyRm5aVHNnZEc5VGRISmxZVzFsY2lCdmNpQm1jbTl0VTNSeVpXRnRaWEpjYmlBZ0lDQWdLaUJBY0dGeVlXMGdiV1Z6YzJGblpWUjVjR1VnTFNCMGFHVWdkSGx3WlNCdlppQjBhR1VnYldWemMyRm5aVnh1SUNBZ0lDQXFJRUJ3WVhKaGJTQnRaWE56WVdkbFNHRnVaR3hsY2lBdElIUm9aU0JtZFc1amRHbHZiaUJ2Y2lCdFpYUm9iMlFnZEc4Z1ltVWdaWGhsWTNWMFpXUWdkMmhsYmlCMGFHbHpJR2hoYm1Sc1pYSWdhWE1nWTJGc2JHVmtYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2NtVm5hWE4wWlhKTlpYTnpZV2RsU0dGdVpHeGxjaWhjYmlBZ0lDQWdJQ0FnYldWemMyRm5aVVJwY21WamRHbHZiam9nVFdWemMyRm5aVVJwY21WamRHbHZiaXhjYmlBZ0lDQWdJQ0FnYldWemMyRm5aVlI1Y0dVNklITjBjbWx1Wnl4Y2JpQWdJQ0FnSUNBZ2JXVnpjMkZuWlVoaGJtUnNaWEk2SUNodFpYTnpZV2RsUkdGMFlUODZJSFZ1YTI1dmQyNGdmQ0IxYm1SbFptbHVaV1FwSUQwK0lIWnZhV1JjYmlBZ0lDQXBJSHRjYmlBZ0lDQWdJQ0FnYzNkcGRHTm9JQ2h0WlhOellXZGxSR2x5WldOMGFXOXVLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUUxbGMzTmhaMlZFYVhKbFkzUnBiMjR1Vkc5VGRISmxZVzFsY2pwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMblJ2VTNSeVpXRnRaWEpJWVc1a2JHVnljeTV6WlhRb2JXVnpjMkZuWlZSNWNHVXNJRzFsYzNOaFoyVklZVzVrYkdWeUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ1RXVnpjMkZuWlVScGNtVmpkR2x2Ymk1R2NtOXRVM1J5WldGdFpYSTZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1bWNtOXRVM1J5WldGdFpYSklZVzVrYkdWeWN5NXpaWFFvYldWemMyRm5aVlI1Y0dVc0lHMWxjM05oWjJWSVlXNWtiR1Z5S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJQ0FnSUNBZ0lHUmxabUYxYkhRNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1RHOW5aMlZ5TGt4dlp5aGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVEc5bloyVnlMa2RsZEZOMFlXTnJWSEpoWTJVb0tTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWUZWdWEyNXZkMjRnYldWemMyRm5aU0JrYVhKbFkzUnBiMjRnSkh0dFpYTnpZV2RsUkdseVpXTjBhVzl1ZldCY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVmVnh1WEc0dktpcGNiaUFxSUZSb1pTQmxiblZ0SUdadmNpQnRaWE56WVdkbElHUnBjbVZqZEdsdmJuTmNiaUFxTDF4dVpYaHdiM0owSUdWdWRXMGdUV1Z6YzJGblpVUnBjbVZqZEdsdmJpQjdYRzRnSUNBZ1ZHOVRkSEpsWVcxbGNpQTlJREFzWEc0Z0lDQWdSbkp2YlZOMGNtVmhiV1Z5SUQwZ01WeHVmVnh1SWl3aUx5OGdRMjl3ZVhKcFoyaDBJRVZ3YVdNZ1IyRnRaWE1zSUVsdVl5NGdRV3hzSUZKcFoyaDBjeUJTWlhObGNuWmxaQzVjYmx4dWFXMXdiM0owSUhzZ1UyVnVaRTFsYzNOaFoyVkRiMjUwY205c2JHVnlJSDBnWm5KdmJTQW5MaTlUWlc1a1RXVnpjMkZuWlVOdmJuUnliMnhzWlhJbk8xeHVYRzVsZUhCdmNuUWdZMnhoYzNNZ1ZHOVRkSEpsWVcxbGNrMWxjM05oWjJWelEyOXVkSEp2Ykd4bGNpQjdYRzRnSUNBZ2MyVnVaRTFsYzNOaFoyVkRiMjUwY205c2JHVnlPaUJUWlc1a1RXVnpjMkZuWlVOdmJuUnliMnhzWlhJN1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2MyVnVaRTFsYzNOaFoyVkRiMjUwY205c2JHVnlJQzBnVTNSeVpXRnRJRzFsYzNOaFoyVWdZMjl1ZEhKdmJHeGxjaUJwYm5OMFlXNWpaVnh1SUNBZ0lDQXFMMXh1SUNBZ0lHTnZibk4wY25WamRHOXlLSE5sYm1STlpYTnpZV2RsUTI5dWRISnZiR3hsY2pvZ1UyVnVaRTFsYzNOaFoyVkRiMjUwY205c2JHVnlLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjMlZ1WkUxbGMzTmhaMlZEYjI1MGNtOXNiR1Z5SUQwZ2MyVnVaRTFsYzNOaFoyVkRiMjUwY205c2JHVnlPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRk5sYm1RZ1VtVnhkV1Z6ZENCMGJ5QlVZV3RsSUZGMVlXeHBkSGtnUTI5dWRISnZiQ0IwYnlCMGFHVWdWVVVnU1c1emRHRnVZMlZjYmlBZ0lDQWdLaTljYmlBZ0lDQlRaVzVrVW1WeGRXVnpkRkYxWVd4cGRIbERiMjUwY205c0tDa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxuTmxibVJOWlhOellXZGxRMjl1ZEhKdmJHeGxjaTV6Wlc1a1RXVnpjMkZuWlZSdlUzUnlaV0Z0WlhJb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FuVW1WeGRXVnpkRkYxWVd4cGRIbERiMjUwY205c0oxeHVJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRk5sYm1RZ1RXRjRJRVpRVXlCU1pYRjFaWE4wSUhSdklIUm9aU0JWUlNCSmJuTjBZVzVqWlZ4dUlDQWdJQ0FxTDF4dUlDQWdJRk5sYm1STllYaEdjSE5TWlhGMVpYTjBLQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbk5sYm1STlpYTnpZV2RsUTI5dWRISnZiR3hsY2k1elpXNWtUV1Z6YzJGblpWUnZVM1J5WldGdFpYSW9KMFp3YzFKbGNYVmxjM1FuS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCVFpXNWtJRUYyWlhKaFoyVWdRbWwwY21GMFpTQlNaWEYxWlhOMElIUnZJSFJvWlNCVlJTQkpibk4wWVc1alpWeHVJQ0FnSUNBcUwxeHVJQ0FnSUZObGJtUkJkbVZ5WVdkbFFtbDBjbUYwWlZKbGNYVmxjM1FvS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YzJWdVpFMWxjM05oWjJWRGIyNTBjbTlzYkdWeUxuTmxibVJOWlhOellXZGxWRzlUZEhKbFlXMWxjaWhjYmlBZ0lDQWdJQ0FnSUNBZ0lDZEJkbVZ5WVdkbFFtbDBjbUYwWlZKbGNYVmxjM1FuWEc0Z0lDQWdJQ0FnSUNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1UyVnVaQ0JoSUZOMFlYSjBJRk4wY21WaGJXbHVaeUJOWlhOellXZGxJSFJ2SUhSb1pTQlZSU0JKYm5OMFlXNWpaVnh1SUNBZ0lDQXFMMXh1SUNBZ0lGTmxibVJUZEdGeWRGTjBjbVZoYldsdVp5Z3BJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXpaVzVrVFdWemMyRm5aVU52Ym5SeWIyeHNaWEl1YzJWdVpFMWxjM05oWjJWVWIxTjBjbVZoYldWeUtDZFRkR0Z5ZEZOMGNtVmhiV2x1WnljcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGTmxibVFnWVNCVGRHOXdJRk4wY21WaGJXbHVaeUJOWlhOellXZGxJSFJ2SUhSb1pTQlZSU0JKYm5OMFlXNWpaVnh1SUNBZ0lDQXFMMXh1SUNBZ0lGTmxibVJUZEc5d1UzUnlaV0Z0YVc1bktDa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxuTmxibVJOWlhOellXZGxRMjl1ZEhKdmJHeGxjaTV6Wlc1a1RXVnpjMkZuWlZSdlUzUnlaV0Z0WlhJb0oxTjBiM0JUZEhKbFlXMXBibWNuS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCVFpXNWtJR0VnVW1WeGRXVnpkQ0JKYm1sMGFXRnNJRk5sZEhScGJtZHpJSFJ2SUhSb1pTQlZSU0JKYm5OMFlXNWpaVnh1SUNBZ0lDQXFMMXh1SUNBZ0lGTmxibVJTWlhGMVpYTjBTVzVwZEdsaGJGTmxkSFJwYm1kektDa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxuTmxibVJOWlhOellXZGxRMjl1ZEhKdmJHeGxjaTV6Wlc1a1RXVnpjMkZuWlZSdlUzUnlaV0Z0WlhJb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FuVW1WeGRXVnpkRWx1YVhScFlXeFRaWFIwYVc1bmN5ZGNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQjlYRzU5WEc0aUxDSXZMeUJEYjNCNWNtbG5hSFFnUlhCcFl5QkhZVzFsY3l3Z1NXNWpMaUJCYkd3Z1VtbG5hSFJ6SUZKbGMyVnlkbVZrTGx4dVhHNWxlSEJ2Y25RZ1kyeGhjM01nVkhkdlYyRjVUV0Z3UEV0bGVWUjVjR1VzSUZaaGJIVmxWSGx3WlQ0Z2UxeHVJQ0FnSUcxaGNEb2dUV0Z3UEV0bGVWUjVjR1VzSUZaaGJIVmxWSGx3WlQ0N1hHNGdJQ0FnY21WMlpYSnpaVTFoY0RvZ1RXRndQRlpoYkhWbFZIbHdaU3dnUzJWNVZIbHdaVDQ3WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCQWNHRnlZVzBnYldGd0lDMGdZVzRnYjNCMGFXOXVZV3dnYldGd0lHOW1JSEJoY21GdFpYUmxjbk5jYmlBZ0lDQWdLaTljYmlBZ0lDQmpiMjV6ZEhKMVkzUnZjaWdwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV0WVhBZ1BTQnVaWGNnVFdGd0tDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdWNtVjJaWEp6WlUxaGNDQTlJRzVsZHlCTllYQW9LVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJIWlhRZ2RHaGxJSFpoYkhWbElHWnliMjBnZEdobElHMWhjQ0JpZVNCclpYbGNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2EyVjVJQzBnZEdobElHdGxlU0IzWlNCaGNtVWdjMlZoY21Ob2FXNW5JR0o1WEc0Z0lDQWdJQ29nUUhKbGRIVnlibk1nTFNCMGFHVWdkbUZzZFdVZ1lYTnpiMk5wWVhSbFpDQjNhWFJvSUhSb1pTQnJaWGxjYmlBZ0lDQWdLaTljYmlBZ0lDQm5aWFJHY205dFMyVjVLR3RsZVRvZ1MyVjVWSGx3WlNrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV0WVhBdVoyVjBLR3RsZVNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1IyVjBJSFJvWlNCeVpYWmxjbk5sSUd0bGVTQm1jbTl0SUhSb1pTQnRZWEFnWW5rZ2MyVmhjbU5vYVc1bklHSjVJSFpoYkhWbFhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUhaaGJIVmxJQzBnZEdobElHdGxlU0IzWlNCaGNtVWdjMlZoY21Ob2FXNW5JR0o1WEc0Z0lDQWdJQ29nUUhKbGRIVnlibk1nTFNCMGFHVjVJR3RsZVNCaGMzTnZZMmxoZEdWa0lIZHBkR2dnZEdobElIWmhiSFZsWEc0Z0lDQWdJQ292WEc0Z0lDQWdaMlYwUm5KdmJWWmhiSFZsS0haaGJIVmxPaUJXWVd4MVpWUjVjR1VwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjbVYyWlhKelpVMWhjQzVuWlhRb2RtRnNkV1VwTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVGa1pDQmhJR3RsZVNCaGJtUWdkbUZzZFdVZ2RHOGdZbTkwYUNCMGFHVWdiV0Z3SUdGdVpDQnlaWFpsY25ObElHMWhjRnh1SUNBZ0lDQXFJRUJ3WVhKaGJTQnJaWGtnTFNCMGFHVWdhVzVrWlhocGJtY2dhMlY1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSFpoYkhWbElDMGdkR2hsSUhaaGJIVmxJR0Z6YzI5amFXRjBaV1FnZDJsMGFDQjBhR1VnYTJWNVhHNGdJQ0FnSUNvdlhHNGdJQ0FnWVdSa0tHdGxlVG9nUzJWNVZIbHdaU3dnZG1Gc2RXVTZJRlpoYkhWbFZIbHdaU2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbTFoY0M1elpYUW9hMlY1TENCMllXeDFaU2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjbVYyWlhKelpVMWhjQzV6WlhRb2RtRnNkV1VzSUd0bGVTazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dVbVZ0YjNabElHRWdhMlY1SUdGdVpDQjJZV3gxWlNCbWNtOXRJR0p2ZEdnZ2RHaGxJRzFoY0NCaGJtUWdjbVYyWlhKelpTQnRZWEJjYmlBZ0lDQWdLaUJBY0dGeVlXMGdhMlY1SUMwZ2RHaGxJR2x1WkdWNGFXNW5JR3RsZVZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0IyWVd4MVpTQXRJSFJvWlNCMllXeDFaU0JoYzNOdlkybGhkR1ZrSUhkcGRHZ2dkR2hsSUd0bGVWeHVJQ0FnSUNBcUwxeHVJQ0FnSUhKbGJXOTJaU2hyWlhrNklFdGxlVlI1Y0dVc0lIWmhiSFZsT2lCV1lXeDFaVlI1Y0dVcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1dFlYQXVaR1ZzWlhSbEtHdGxlU2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjbVYyWlhKelpVMWhjQzVrWld4bGRHVW9kbUZzZFdVcE8xeHVJQ0FnSUgxY2JuMWNiaUlzSWk4dklFTnZjSGx5YVdkb2RDQkZjR2xqSUVkaGJXVnpMQ0JKYm1NdUlFRnNiQ0JTYVdkb2RITWdVbVZ6WlhKMlpXUXVYRzVjYm1sdGNHOXlkQ0I3SUV4dloyZGxjaUI5SUdaeWIyMGdKeTR1TDB4dloyZGxjaTlNYjJkblpYSW5PMXh1YVcxd2IzSjBJSHNnVm1sa1pXOVFiR0Y1WlhJZ2ZTQm1jbTl0SUNjdUxpOVdhV1JsYjFCc1lYbGxjaTlXYVdSbGIxQnNZWGxsY2ljN1hHNWNiaThxS2x4dUlDb2dRMjl1ZG1WeWRITWdZMjl2Y21ScGJtRjBaWE1nWm5KdmJTQmxiR1Z0Wlc1MElISmxiR0YwYVhabElHTnZiM0prYVc1aGRHVnpJSFJ2SUhaaGJIVmxjeUJ1YjNKdFlXeHBlbVZrSUhkcGRHaHBiaUIwYUdVZ2RtRnNkV1VnY21GdVoyVWdiMllnWVNCemFHOXlkQ0FvWVc1a0lHSmhZMnNnWVdkaGFXNHBYRzRnS2k5Y2JtVjRjRzl5ZENCamJHRnpjeUJEYjI5eVpHbHVZWFJsUTI5dWRtVnlkR1Z5SUh0Y2JpQWdJQ0IyYVdSbGIwVnNaVzFsYm5SUWNtOTJhV1JsY2pvZ1ZtbGtaVzlRYkdGNVpYSTdYRzRnSUNBZ2RtbGtaVzlGYkdWdFpXNTBVR0Z5Wlc1ME9pQklWRTFNUld4bGJXVnVkRHRjYmlBZ0lDQjJhV1JsYjBWc1pXMWxiblE2SUVoVVRVeFdhV1JsYjBWc1pXMWxiblE3WEc0Z0lDQWdjbUYwYVc4NklHNTFiV0psY2p0Y2JseHVJQ0FnSUc1dmNtMWhiR2w2WlVGdVpGRjFZVzUwYVhwbFZXNXphV2R1WldSR2RXNWpPaUFvWEc0Z0lDQWdJQ0FnSUhnNklHNTFiV0psY2l4Y2JpQWdJQ0FnSUNBZ2VUb2diblZ0WW1WeVhHNGdJQ0FnS1NBOVBpQk9iM0p0WVd4cGVtVmtVWFZoYm5ScGVtVmtWVzV6YVdkdVpXUkRiMjl5WkR0Y2JpQWdJQ0J1YjNKdFlXeHBlbVZCYm1SUmRXRnVkR2w2WlZOcFoyNWxaRVoxYm1NNklDaGNiaUFnSUNBZ0lDQWdlRG9nYm5WdFltVnlMRnh1SUNBZ0lDQWdJQ0I1T2lCdWRXMWlaWEpjYmlBZ0lDQXBJRDArSUU1dmNtMWhiR2w2WldSUmRXRnVkR2w2WldSVGFXZHVaV1JEYjI5eVpEdGNiaUFnSUNCa1pXNXZjbTFoYkdsNlpVRnVaRlZ1Y1hWaGJuUnBlbVZWYm5OcFoyNWxaRVoxYm1NNklDaGNiaUFnSUNBZ0lDQWdlRG9nYm5WdFltVnlMRnh1SUNBZ0lDQWdJQ0I1T2lCdWRXMWlaWEpjYmlBZ0lDQXBJRDArSUZWdWNYVmhiblJwZW1Wa1JHVnViM0p0WVd4cGVtVmtWVzV6YVdkdVpXUkRiMjl5WkR0Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFQndZWEpoYlNCMmFXUmxiMFZzWlcxbGJuUlFjbTkyYVdSbGNpQXRJSFJvWlNCa2FYWWdaV3hsYldWdWRDQjBhR0YwSUhSb1pTQjJhV1JsYnlCd2JHRjVaWElnZDJsc2JDQmlaU0JwYm1wbFkzUmxaQ0JwYm5SdlhHNGdJQ0FnSUNvdlhHNGdJQ0FnWTI5dWMzUnlkV04wYjNJb2RtbGtaVzlGYkdWdFpXNTBVSEp2ZG1sa1pYSTZJRlpwWkdWdlVHeGhlV1Z5S1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11ZG1sa1pXOUZiR1Z0Wlc1MFVISnZkbWxrWlhJZ1BTQjJhV1JsYjBWc1pXMWxiblJRY205MmFXUmxjanRjYmlBZ0lDQWdJQ0FnZEdocGN5NXViM0p0WVd4cGVtVkJibVJSZFdGdWRHbDZaVlZ1YzJsbmJtVmtSblZ1WXlBOUlDZ3BJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5UbTl5YldGc2FYcGxJR0Z1WkNCeGRXRnVkR2w2WlNCMWJuTnBaMjVsWkN3Z2JXVjBhRzlrSUc1dmRDQnBiWEJzWlcxbGJuUmxaQzRuWEc0Z0lDQWdJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0I5TzF4dUlDQWdJQ0FnSUNCMGFHbHpMbTV2Y20xaGJHbDZaVUZ1WkZGMVlXNTBhWHBsVTJsbmJtVmtSblZ1WXlBOUlDZ3BJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5UbTl5YldGc2FYcGxJR0Z1WkNCMWJuRjFZVzUwYVhwbElITnBaMjVsWkN3Z2JXVjBhRzlrSUc1dmRDQnBiWEJzWlcxbGJuUmxaQzRuWEc0Z0lDQWdJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0I5TzF4dUlDQWdJQ0FnSUNCMGFHbHpMbVJsYm05eWJXRnNhWHBsUVc1a1ZXNXhkV0Z1ZEdsNlpWVnVjMmxuYm1Wa1JuVnVZeUE5SUNncElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2loY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBblJHVnViM0p0WVd4cGVtVWdZVzVrSUhWdWNYVmhiblJwZW1VZ2RXNXphV2R1WldRc0lHMWxkR2h2WkNCdWIzUWdhVzF3YkdWdFpXNTBaV1F1SjF4dUlDQWdJQ0FnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCVWFHVWdjM1Z5Wm1GalpTQnRaWFJvYjJRZ1ptOXlJSE5sZEhSbGNrNXZjbTFoYkdsNlpVRnVaRkYxWVc1MGFYcGxWVzV6YVdkdVpXUmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2VDQXRJSGdnWVhocGN5QndiMmx1ZEZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0I1SUMwZ2VTQmhlR2x6SUhCdmFXNTBYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2JtOXliV0ZzYVhwbFFXNWtVWFZoYm5ScGVtVlZibk5wWjI1bFpDaGNiaUFnSUNBZ0lDQWdlRG9nYm5WdFltVnlMRnh1SUNBZ0lDQWdJQ0I1T2lCdWRXMWlaWEpjYmlBZ0lDQXBPaUJPYjNKdFlXeHBlbVZrVVhWaGJuUnBlbVZrVlc1emFXZHVaV1JEYjI5eVpDQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG01dmNtMWhiR2w2WlVGdVpGRjFZVzUwYVhwbFZXNXphV2R1WldSR2RXNWpLSGdzSUhrcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGUm9aU0J6ZFhKbVlXTmxJRzFsZEdodlpDQm1iM0lnYzJWMGRHVnlWVzV4ZFdGdWRHbDZaVUZ1WkVSbGJtOXliV0ZzYVhwbFZXNXphV2R1WldSY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZUNBdElIZ2dZWGhwY3lCd2IybHVkRnh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjVJQzBnZVNCaGVHbHpJSEJ2YVc1MFhHNGdJQ0FnSUNvdlhHNGdJQ0FnZFc1eGRXRnVkR2w2WlVGdVpFUmxibTl5YldGc2FYcGxWVzV6YVdkdVpXUW9YRzRnSUNBZ0lDQWdJSGc2SUc1MWJXSmxjaXhjYmlBZ0lDQWdJQ0FnZVRvZ2JuVnRZbVZ5WEc0Z0lDQWdLVG9nVlc1eGRXRnVkR2w2WldSRVpXNXZjbTFoYkdsNlpXUlZibk5wWjI1bFpFTnZiM0prSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVaR1Z1YjNKdFlXeHBlbVZCYm1SVmJuRjFZVzUwYVhwbFZXNXphV2R1WldSR2RXNWpLSGdzSUhrcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGUm9aU0J6ZFhKbVlXTmxJRzFsZEdodlpDQm1iM0lnYzJWMGRHVnlUbTl5YldGc2FYcGxRVzVrVVhWaGJuUnBlbVZUYVdkdVpXUmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2VDQXRJSGdnWVhocGN5QndiMmx1ZEZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0I1SUMwZ2VTQmhlR2x6SUhCdmFXNTBYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2JtOXliV0ZzYVhwbFFXNWtVWFZoYm5ScGVtVlRhV2R1WldRb1hHNGdJQ0FnSUNBZ0lIZzZJRzUxYldKbGNpeGNiaUFnSUNBZ0lDQWdlVG9nYm5WdFltVnlYRzRnSUNBZ0tUb2dUbTl5YldGc2FYcGxaRkYxWVc1MGFYcGxaRk5wWjI1bFpFTnZiM0prSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVibTl5YldGc2FYcGxRVzVrVVhWaGJuUnBlbVZUYVdkdVpXUkdkVzVqS0hnc0lIa3BPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJSE5sZENCMWNDQjBhR1VnVG05eWJXRnNhWHBsSUVGdVpDQlJkV0Z1ZEdsNlpTQnRaWFJvYjJSeklHSmhjMlZrSUc5dUlIUm9aU0JoYzNCbFkzUWdjbUYwYVc4Z1lXNWtJSFJvWlNCMmFXUmxieUJ3YkdGNVpYSWdjbUYwYVc5Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0J6WlhSMWNFNXZjbTFoYkdsNlpVRnVaRkYxWVc1MGFYcGxLQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMblpwWkdWdlJXeGxiV1Z1ZEZCaGNtVnVkQ0E5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5acFpHVnZSV3hsYldWdWRGQnliM1pwWkdWeUxtZGxkRlpwWkdWdlVHRnlaVzUwUld4bGJXVnVkQ2dwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMblpwWkdWdlJXeGxiV1Z1ZENBOUlIUm9hWE11ZG1sa1pXOUZiR1Z0Wlc1MFVISnZkbWxrWlhJdVoyVjBWbWxrWlc5RmJHVnRaVzUwS0NrN1hHNWNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVkbWxrWlc5RmJHVnRaVzUwVUdGeVpXNTBJQ1ltSUhSb2FYTXVkbWxrWlc5RmJHVnRaVzUwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQndiR0Y1WlhKQmMzQmxZM1JTWVhScGJ5QTlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1MmFXUmxiMFZzWlcxbGJuUlFZWEpsYm5RdVkyeHBaVzUwU0dWcFoyaDBJQzljYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuWnBaR1Z2Uld4bGJXVnVkRkJoY21WdWRDNWpiR2xsYm5SWGFXUjBhRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUhacFpHVnZRWE53WldOMFVtRjBhVzhnUFZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVkbWxrWlc5RmJHVnRaVzUwTG5acFpHVnZTR1ZwWjJoMElDOGdkR2hwY3k1MmFXUmxiMFZzWlcxbGJuUXVkbWxrWlc5WGFXUjBhRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h3YkdGNVpYSkJjM0JsWTNSU1lYUnBieUErSUhacFpHVnZRWE53WldOMFVtRjBhVzhwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCTWIyZG5aWEl1VEc5bktGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JNYjJkblpYSXVSMlYwVTNSaFkydFVjbUZqWlNncExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuVTJWMGRYQWdUbTl5YldGc2FYcGxJR0Z1WkNCUmRXRnVkR2w2WlNCbWIzSWdjR3hoZVdWeVFYTndaV04wVW1GMGFXOGdQaUIyYVdSbGIwRnpjR1ZqZEZKaGRHbHZKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ05seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1eVlYUnBieUE5SUhCc1lYbGxja0Z6Y0dWamRGSmhkR2x2SUM4Z2RtbGtaVzlCYzNCbFkzUlNZWFJwYnp0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbTV2Y20xaGJHbDZaVUZ1WkZGMVlXNTBhWHBsVlc1emFXZHVaV1JHZFc1aklEMGdLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCNE9pQnVkVzFpWlhJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSGs2SUc1MWJXSmxjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2tnUFQ0Z2RHaHBjeTV1YjNKdFlXeHBlbVZCYm1SUmRXRnVkR2w2WlZWdWMybG5ibVZrVUd4aGVXVnlRbWxuWjJWeUtIZ3NJSGtwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVibTl5YldGc2FYcGxRVzVrVVhWaGJuUnBlbVZUYVdkdVpXUkdkVzVqSUQwZ0tIZzZJRzUxYldKbGNpd2dlVG9nYm5WdFltVnlLU0E5UGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG01dmNtMWhiR2w2WlVGdVpGRjFZVzUwYVhwbFUybG5ibVZrVUd4aGVXVnlRbWxuWjJWeUtIZ3NJSGtwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVaR1Z1YjNKdFlXeHBlbVZCYm1SVmJuRjFZVzUwYVhwbFZXNXphV2R1WldSR2RXNWpJRDBnS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjRPaUJ1ZFcxaVpYSXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhrNklHNTFiV0psY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNrZ1BUNGdkR2hwY3k1a1pXNXZjbTFoYkdsNlpVRnVaRlZ1Y1hWaGJuUnBlbVZWYm5OcFoyNWxaRkJzWVhsbGNrSnBaMmRsY2loNExDQjVLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1RHOW5aMlZ5TGt4dlp5aGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVEc5bloyVnlMa2RsZEZOMFlXTnJWSEpoWTJVb0tTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSjFObGRIVndJRTV2Y20xaGJHbDZaU0JoYm1RZ1VYVmhiblJwZW1VZ1ptOXlJSEJzWVhsbGNrRnpjR1ZqZEZKaGRHbHZJRHc5SUhacFpHVnZRWE53WldOMFVtRjBhVzhuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQTJYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuSmhkR2x2SUQwZ2RtbGtaVzlCYzNCbFkzUlNZWFJwYnlBdklIQnNZWGxsY2tGemNHVmpkRkpoZEdsdk8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Ym05eWJXRnNhWHBsUVc1a1VYVmhiblJwZW1WVmJuTnBaMjVsWkVaMWJtTWdQU0FvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIZzZJRzUxYldKbGNpeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZVRvZ2JuVnRZbVZ5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS1NBOVBpQjBhR2x6TG01dmNtMWhiR2w2WlVGdVpGRjFZVzUwYVhwbFZXNXphV2R1WldSUWJHRjVaWEpUYldGc2JHVnlLSGdzSUhrcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Ym05eWJXRnNhWHBsUVc1a1VYVmhiblJwZW1WVGFXZHVaV1JHZFc1aklEMGdLSGc2SUc1MWJXSmxjaXdnZVRvZ2JuVnRZbVZ5S1NBOVBseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtNXZjbTFoYkdsNlpVRnVaRkYxWVc1MGFYcGxVMmxuYm1Wa1VHeGhlV1Z5VTIxaGJHeGxjaWg0TENCNUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1SbGJtOXliV0ZzYVhwbFFXNWtWVzV4ZFdGdWRHbDZaVlZ1YzJsbmJtVmtSblZ1WXlBOUlDaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZURvZ2JuVnRZbVZ5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjVPaUJ1ZFcxaVpYSmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXBJRDArSUhSb2FYTXVaR1Z1YjNKdFlXeHBlbVZCYm1SVmJuRjFZVzUwYVhwbFZXNXphV2R1WldSUWJHRjVaWEpUYldGc2JHVnlLSGdzSUhrcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ2JtOXliV0ZzYVhwbFFXNWtVWFZoYm5ScGVtVlZibk5wWjI1bFpDQm1iM0lnY0d4aGVXVnlRWE53WldOMFVtRjBhVzhnUGlCMmFXUmxiMEZ6Y0dWamRGSmhkR2x2WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSGdnTFNCNElHRjRhWE1nY0c5cGJuUmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2VTQXRJSGtnWVhocGN5QndiMmx1ZEZ4dUlDQWdJQ0FxTDF4dUlDQWdJRzV2Y20xaGJHbDZaVUZ1WkZGMVlXNTBhWHBsVlc1emFXZHVaV1JRYkdGNVpYSkNhV2RuWlhJb1hHNGdJQ0FnSUNBZ0lIZzZJRzUxYldKbGNpeGNiaUFnSUNBZ0lDQWdlVG9nYm5WdFltVnlYRzRnSUNBZ0tUb2dUbTl5YldGc2FYcGxaRkYxWVc1MGFYcGxaRlZ1YzJsbmJtVmtRMjl2Y21RZ2UxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCdWIzSnRZV3hwZW1Wa1dDQTlJSGdnTHlCMGFHbHpMblpwWkdWdlJXeGxiV1Z1ZEZCaGNtVnVkQzVqYkdsbGJuUlhhV1IwYUR0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYm05eWJXRnNhWHBsWkZrZ1BWeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXlZWFJwYnlBcUlDaDVJQzhnZEdocGN5NTJhV1JsYjBWc1pXMWxiblJRWVhKbGJuUXVZMnhwWlc1MFNHVnBaMmgwSUMwZ01DNDFLU0FySURBdU5UdGNiaUFnSUNBZ0lDQWdhV1lnS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdibTl5YldGc2FYcGxaRmdnUENBd0xqQWdmSHhjYmlBZ0lDQWdJQ0FnSUNBZ0lHNXZjbTFoYkdsNlpXUllJRDRnTVM0d0lIeDhYRzRnSUNBZ0lDQWdJQ0FnSUNCdWIzSnRZV3hwZW1Wa1dTQThJREF1TUNCOGZGeHVJQ0FnSUNBZ0lDQWdJQ0FnYm05eWJXRnNhWHBsWkZrZ1BpQXhMakJjYmlBZ0lDQWdJQ0FnS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzSUU1dmNtMWhiR2w2WldSUmRXRnVkR2w2WldSVmJuTnBaMjVsWkVOdmIzSmtLR1poYkhObExDQTJOVFV6TlN3Z05qVTFNelVwTzF4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHNWxkeUJPYjNKdFlXeHBlbVZrVVhWaGJuUnBlbVZrVlc1emFXZHVaV1JEYjI5eVpDaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBjblZsTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc1dmNtMWhiR2w2WldSWUlDb2dOalUxTXpZc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JtOXliV0ZzYVhwbFpGa2dLaUEyTlRVek5seHVJQ0FnSUNBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlIVnVjWFZoYm5ScGVtVkJibVJFWlc1dmNtMWhiR2w2WlZWdWMybG5ibVZrSUdadmNpQndiR0Y1WlhKQmMzQmxZM1JTWVhScGJ5QStJSFpwWkdWdlFYTndaV04wVW1GMGFXOWNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2VDQXRJSGdnWVhocGN5QndiMmx1ZEZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0I1SUMwZ2VTQmhlR2x6SUhCdmFXNTBYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1pHVnViM0p0WVd4cGVtVkJibVJWYm5GMVlXNTBhWHBsVlc1emFXZHVaV1JRYkdGNVpYSkNhV2RuWlhJb2VEb2diblZ0WW1WeUxDQjVPaUJ1ZFcxaVpYSXBJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdibTl5YldGc2FYcGxaRmdnUFNCNElDOGdOalUxTXpZN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUc1dmNtMWhiR2w2WldSWklEMGdLSGtnTHlBMk5UVXpOaUF0SURBdU5Ta2dMeUIwYUdsekxuSmhkR2x2SUNzZ01DNDFPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzSUZWdWNYVmhiblJwZW1Wa1JHVnViM0p0WVd4cGVtVmtWVzV6YVdkdVpXUkRiMjl5WkNoY2JpQWdJQ0FnSUNBZ0lDQWdJRzV2Y20xaGJHbDZaV1JZSUNvZ2RHaHBjeTUyYVdSbGIwVnNaVzFsYm5SUVlYSmxiblF1WTJ4cFpXNTBWMmxrZEdnc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J1YjNKdFlXeHBlbVZrV1NBcUlIUm9hWE11ZG1sa1pXOUZiR1Z0Wlc1MFVHRnlaVzUwTG1Oc2FXVnVkRWhsYVdkb2RGeHVJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRzV2Y20xaGJHbDZaVUZ1WkZGMVlXNTBhWHBsVTJsbmJtVmtJR1p2Y2lCd2JHRjVaWEpCYzNCbFkzUlNZWFJwYnlBK0lIWnBaR1Z2UVhOd1pXTjBVbUYwYVc5Y2JpQWdJQ0FnS2lCQWNHRnlZVzBnZUNBdElIZ2dZWGhwY3lCd2IybHVkRnh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjVJQzBnZVNCaGVHbHpJSEJ2YVc1MFhHNGdJQ0FnSUNvdlhHNGdJQ0FnYm05eWJXRnNhWHBsUVc1a1VYVmhiblJwZW1WVGFXZHVaV1JRYkdGNVpYSkNhV2RuWlhJb2VEb2diblZ0WW1WeUxDQjVPaUJ1ZFcxaVpYSXBJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdibTl5YldGc2FYcGxaRmdnUFNCNElDOGdLREF1TlNBcUlIUm9hWE11ZG1sa1pXOUZiR1Z0Wlc1MFVHRnlaVzUwTG1Oc2FXVnVkRmRwWkhSb0tUdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2JtOXliV0ZzYVhwbFpGa2dQVnh1SUNBZ0lDQWdJQ0FnSUNBZ0tIUm9hWE11Y21GMGFXOGdLaUI1S1NBdklDZ3dMalVnS2lCMGFHbHpMblpwWkdWdlJXeGxiV1Z1ZEZCaGNtVnVkQzVqYkdsbGJuUklaV2xuYUhRcE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2JtVjNJRTV2Y20xaGJHbDZaV1JSZFdGdWRHbDZaV1JUYVdkdVpXUkRiMjl5WkNoY2JpQWdJQ0FnSUNBZ0lDQWdJRzV2Y20xaGJHbDZaV1JZSUNvZ016STNOamNzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnViM0p0WVd4cGVtVmtXU0FxSURNeU56WTNYRzRnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nYm05eWJXRnNhWHBsUVc1a1VYVmhiblJwZW1WVmJuTnBaMjVsWkNCbWIzSWdjR3hoZVdWeVFYTndaV04wVW1GMGFXOGdQRDBnZG1sa1pXOUJjM0JsWTNSU1lYUnBiMXh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjRJQzBnZUNCaGVHbHpJSEJ2YVc1MFhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUhrZ0xTQjVJR0Y0YVhNZ2NHOXBiblJjYmlBZ0lDQWdLaTljYmlBZ0lDQnViM0p0WVd4cGVtVkJibVJSZFdGdWRHbDZaVlZ1YzJsbmJtVmtVR3hoZVdWeVUyMWhiR3hsY2loNE9pQnVkVzFpWlhJc0lIazZJRzUxYldKbGNpa2dlMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQnViM0p0WVd4cGVtVmtXQ0E5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5KaGRHbHZJQ29nS0hnZ0x5QjBhR2x6TG5acFpHVnZSV3hsYldWdWRGQmhjbVZ1ZEM1amJHbGxiblJYYVdSMGFDQXRJREF1TlNrZ0t5QXdMalU3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJRzV2Y20xaGJHbDZaV1JaSUQwZ2VTQXZJSFJvYVhNdWRtbGtaVzlGYkdWdFpXNTBVR0Z5Wlc1MExtTnNhV1Z1ZEVobGFXZG9kRHRjYmlBZ0lDQWdJQ0FnYVdZZ0tGeHVJQ0FnSUNBZ0lDQWdJQ0FnYm05eWJXRnNhWHBsWkZnZ1BDQXdMakFnZkh4Y2JpQWdJQ0FnSUNBZ0lDQWdJRzV2Y20xaGJHbDZaV1JZSUQ0Z01TNHdJSHg4WEc0Z0lDQWdJQ0FnSUNBZ0lDQnViM0p0WVd4cGVtVmtXU0E4SURBdU1DQjhmRnh1SUNBZ0lDQWdJQ0FnSUNBZ2JtOXliV0ZzYVhwbFpGa2dQaUF4TGpCY2JpQWdJQ0FnSUNBZ0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnYm1WM0lFNXZjbTFoYkdsNlpXUlJkV0Z1ZEdsNlpXUlZibk5wWjI1bFpFTnZiM0prS0daaGJITmxMQ0EyTlRVek5Td2dOalUxTXpVcE8xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZHlCT2IzSnRZV3hwZW1Wa1VYVmhiblJwZW1Wa1ZXNXphV2R1WldSRGIyOXlaQ2hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwY25WbExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHNXZjbTFoYkdsNlpXUllJQ29nTmpVMU16WXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdibTl5YldGc2FYcGxaRmtnS2lBMk5UVXpObHh1SUNBZ0lDQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJSFZ1Y1hWaGJuUnBlbVZCYm1SRVpXNXZjbTFoYkdsNlpWVnVjMmxuYm1Wa0lHWnZjaUJ3YkdGNVpYSkJjM0JsWTNSU1lYUnBieUE4UFNCMmFXUmxiMEZ6Y0dWamRGSmhkR2x2WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSGdnTFNCNElHRjRhWE1nY0c5cGJuUmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2VTQXRJSGtnWVhocGN5QndiMmx1ZEZ4dUlDQWdJQ0FxTDF4dUlDQWdJR1JsYm05eWJXRnNhWHBsUVc1a1ZXNXhkV0Z1ZEdsNlpWVnVjMmxuYm1Wa1VHeGhlV1Z5VTIxaGJHeGxjaWg0T2lCdWRXMWlaWElzSUhrNklHNTFiV0psY2lrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCdWIzSnRZV3hwZW1Wa1dDQTlJQ2g0SUM4Z05qVTFNellnTFNBd0xqVXBJQzhnZEdocGN5NXlZWFJwYnlBcklEQXVOVHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdibTl5YldGc2FYcGxaRmtnUFNCNUlDOGdOalUxTXpZN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2dWVzV4ZFdGdWRHbDZaV1JFWlc1dmNtMWhiR2w2WldSVmJuTnBaMjVsWkVOdmIzSmtLRnh1SUNBZ0lDQWdJQ0FnSUNBZ2JtOXliV0ZzYVhwbFpGZ2dLaUIwYUdsekxuWnBaR1Z2Uld4bGJXVnVkRkJoY21WdWRDNWpiR2xsYm5SWGFXUjBhQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHNXZjbTFoYkdsNlpXUlpJQ29nZEdocGN5NTJhV1JsYjBWc1pXMWxiblJRWVhKbGJuUXVZMnhwWlc1MFNHVnBaMmgwWEc0Z0lDQWdJQ0FnSUNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ2JtOXliV0ZzYVhwbFFXNWtVWFZoYm5ScGVtVlRhV2R1WldRZ1ptOXlJSEJzWVhsbGNrRnpjR1ZqZEZKaGRHbHZJRHc5SUhacFpHVnZRWE53WldOMFVtRjBhVzljYmlBZ0lDQWdLaUJBY0dGeVlXMGdlQ0F0SUhnZ1lYaHBjeUJ3YjJsdWRGeHVJQ0FnSUNBcUlFQndZWEpoYlNCNUlDMGdlU0JoZUdseklIQnZhVzUwWEc0Z0lDQWdJQ292WEc0Z0lDQWdibTl5YldGc2FYcGxRVzVrVVhWaGJuUnBlbVZUYVdkdVpXUlFiR0Y1WlhKVGJXRnNiR1Z5S0hnNklHNTFiV0psY2l3Z2VUb2diblZ0WW1WeUtTQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElHNXZjbTFoYkdsNlpXUllJRDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDaDBhR2x6TG5KaGRHbHZJQ29nZUNrZ0x5QW9NQzQxSUNvZ2RHaHBjeTUyYVdSbGIwVnNaVzFsYm5SUVlYSmxiblF1WTJ4cFpXNTBWMmxrZEdncE8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCdWIzSnRZV3hwZW1Wa1dTQTlJSGtnTHlBb01DNDFJQ29nZEdocGN5NTJhV1JsYjBWc1pXMWxiblJRWVhKbGJuUXVZMnhwWlc1MFNHVnBaMmgwS1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5Qk9iM0p0WVd4cGVtVmtVWFZoYm5ScGVtVmtVMmxuYm1Wa1EyOXZjbVFvWEc0Z0lDQWdJQ0FnSUNBZ0lDQnViM0p0WVd4cGVtVmtXQ0FxSURNeU56WTNMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2JtOXliV0ZzYVhwbFpGa2dLaUF6TWpjMk4xeHVJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lIMWNibjFjYmx4dUx5b3FYRzRnS2lCQklHTnNZWE56SUdadmNpQk9iM0p0WVd4cGVtVkJibVJSZFdGdWRHbDZaVlZ1YzJsbmJtVmtJRzlpYW1WamRITmNiaUFxTDF4dVpYaHdiM0owSUdOc1lYTnpJRTV2Y20xaGJHbDZaV1JSZFdGdWRHbDZaV1JWYm5OcFoyNWxaRU52YjNKa0lIdGNiaUFnSUNCcGJsSmhibWRsT2lCaWIyOXNaV0Z1TzF4dUlDQWdJSGc2SUc1MWJXSmxjanRjYmlBZ0lDQjVPaUJ1ZFcxaVpYSTdYRzVjYmlBZ0lDQmpiMjV6ZEhKMVkzUnZjaWhwYmxKaGJtZGxPaUJpYjI5c1pXRnVMQ0I0T2lCdWRXMWlaWElzSUhrNklHNTFiV0psY2lrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG1sdVVtRnVaMlVnUFNCcGJsSmhibWRsTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbmdnUFNCNE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5rZ1BTQjVPMXh1SUNBZ0lIMWNibjFjYmx4dUx5b3FYRzRnS2lCQklHTnNZWE56SUdadmNpQlZibkYxWVc1MGFYcGxaRUZ1WkVSbGJtOXliV0ZzYVhwbFZXNXphV2R1WldRZ2IySnFaV04wYzF4dUlDb3ZYRzVsZUhCdmNuUWdZMnhoYzNNZ1ZXNXhkV0Z1ZEdsNlpXUkVaVzV2Y20xaGJHbDZaV1JWYm5OcFoyNWxaRU52YjNKa0lIdGNiaUFnSUNCNE9pQnVkVzFpWlhJN1hHNGdJQ0FnZVRvZ2JuVnRZbVZ5TzF4dVhHNGdJQ0FnWTI5dWMzUnlkV04wYjNJb2VEb2diblZ0WW1WeUxDQjVPaUJ1ZFcxaVpYSXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NTRJRDBnZUR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTU1SUQwZ2VUdGNiaUFnSUNCOVhHNTlYRzVjYmk4cUtseHVJQ29nUVNCamJHRnpjeUJtYjNJZ1RtOXliV0ZzYVhwbFpGRjFZVzUwYVhwbFpGTnBaMjVsWkVOdmIzSmtJRzlpYW1WamRITmNiaUFxTDF4dVpYaHdiM0owSUdOc1lYTnpJRTV2Y20xaGJHbDZaV1JSZFdGdWRHbDZaV1JUYVdkdVpXUkRiMjl5WkNCN1hHNGdJQ0FnZURvZ2JuVnRZbVZ5TzF4dUlDQWdJSGs2SUc1MWJXSmxjanRjYmx4dUlDQWdJR052Ym5OMGNuVmpkRzl5S0hnNklHNTFiV0psY2l3Z2VUb2diblZ0WW1WeUtTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWVDQTlJSGc3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVlU0E5SUhrN1hHNGdJQ0FnZlZ4dWZWeHVJaXdpYVcxd2IzSjBJSHRjYmlBZ0lDQkdiR0ZuYzBsa2N5eGNiaUFnSUNCT2RXMWxjbWxqVUdGeVlXMWxkR1Z5YzBsa2N5eGNiaUFnSUNCUGNIUnBiMjVRWVhKaGJXVjBaWEp6U1dSekxGeHVJQ0FnSUZSbGVIUlFZWEpoYldWMFpYSnpTV1J6WEc1OUlHWnliMjBnSnk0dUwwTnZibVpwWnk5RGIyNW1hV2NuTzF4dWFXMXdiM0owSUhzZ1RHRjBaVzVqZVZSbGMzUlNaWE4xYkhSeklIMGdabkp2YlNBbkxpNHZSR0YwWVVOb1lXNXVaV3d2VEdGMFpXNWplVlJsYzNSU1pYTjFiSFJ6Snp0Y2JtbHRjRzl5ZENCN0lFRm5aM0psWjJGMFpXUlRkR0YwY3lCOUlHWnliMjBnSnk0dUwxQmxaWEpEYjI1dVpXTjBhVzl1UTI5dWRISnZiR3hsY2k5QloyZHlaV2RoZEdWa1UzUmhkSE1uTzF4dWFXMXdiM0owSUhzZ1NXNXBkR2xoYkZObGRIUnBibWR6SUgwZ1puSnZiU0FuTGk0dmNHbDRaV3h6ZEhKbFlXMXBibWRtY205dWRHVnVaQ2M3WEc1cGJYQnZjblFnZXlCTlpYTnpZV2RsVTNSeVpXRnRaWEpNYVhOMElIMGdabkp2YlNBbkxpNHZWMlZpVTI5amEyVjBjeTlOWlhOellXZGxVbVZqWldsMlpTYzdYRzVwYlhCdmNuUWdleUJUWlhSMGFXNW5SbXhoWnlCOUlHWnliMjBnSnk0dUwwTnZibVpwWnk5VFpYUjBhVzVuUm14aFp5YzdYRzVwYlhCdmNuUWdleUJUWlhSMGFXNW5UblZ0WW1WeUlIMGdabkp2YlNBbkxpNHZRMjl1Wm1sbkwxTmxkSFJwYm1kT2RXMWlaWEluTzF4dWFXMXdiM0owSUhzZ1UyVjBkR2x1WjFSbGVIUWdmU0JtY205dElDY3VMaTlEYjI1bWFXY3ZVMlYwZEdsdVoxUmxlSFFuTzF4dWFXMXdiM0owSUhzZ1UyVjBkR2x1WjA5d2RHbHZiaUI5SUdaeWIyMGdKeTR1TDBOdmJtWnBaeTlUWlhSMGFXNW5UM0IwYVc5dUp6dGNibHh1THlvcVhHNGdLaUJCYmlCbGRtVnVkQ0IwYUdGMElHbHpJR1Z0YVhSMFpXUWdkMmhsYmlCQlJrc2daR2x6WTI5dWJtVmpkQ0JwY3lCaFltOTFkQ0IwYnlCb1lYQndaVzR1WEc0Z0tpQkRZVzRnWW1VZ1kyRnVZMlZzYkdWa0lHSjVJR05oYkd4cGJtY2dkR2hsSUdOaGJHeGlZV05ySUdaMWJtTjBhVzl1SUhCeWIzWnBaR1ZrSUdGeklIQmhjblFnYjJZZ2RHaGxJR1YyWlc1MExseHVJQ292WEc1bGVIQnZjblFnWTJ4aGMzTWdRV1pyVjJGeWJtbHVaMEZqZEdsMllYUmxSWFpsYm5RZ1pYaDBaVzVrY3lCRmRtVnVkQ0I3WEc0Z0lDQWdjbVZoWkc5dWJIa2dkSGx3WlRvZ0oyRm1hMWRoY201cGJtZEJZM1JwZG1GMFpTYzdYRzRnSUNBZ2NtVmhaRzl1YkhrZ1pHRjBZVG9nZTF4dUlDQWdJQ0FnSUNBdktpb2dTRzkzSUcxaGJua2djMlZqYjI1a2N5QjFiblJwYkNCMGFHVWdjMlZ6YzJsdmJpQnBjeUJrYVhOamIyNXVaV04wWldRZ0tpOWNiaUFnSUNBZ0lDQWdZMjkxYm5SRWIzZHVPaUJ1ZFcxaVpYSTdYRzRnSUNBZ0lDQWdJQzhxS2lCRFlXeHNZbUZqYXlCbWRXNWpkR2x2YmlCMGFHRjBJRzVsWldSeklIUnZJR0psSUdOaGJHeGxaQ0JwWmlCNWIzVWdkMmx6YUNCMGJ5QmpZVzVqWld3Z2RHaGxJRUZHU3lCa2FYTmpiMjV1WldOMElIUnBiV1Z2ZFhRdUlDb3ZYRzRnSUNBZ0lDQWdJR1JwYzIxcGMzTkJabXM2SUNncElEMCtJSFp2YVdRN1hHNGdJQ0FnZlR0Y2JpQWdJQ0JqYjI1emRISjFZM1J2Y2loa1lYUmhPaUJCWm10WFlYSnVhVzVuUVdOMGFYWmhkR1ZGZG1WdWRGc25aR0YwWVNkZEtTQjdYRzRnSUNBZ0lDQWdJSE4xY0dWeUtDZGhabXRYWVhKdWFXNW5RV04wYVhaaGRHVW5LVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWtZWFJoSUQwZ1pHRjBZVHRjYmlBZ0lDQjlYRzU5WEc1Y2JpOHFLbHh1SUNvZ1FXNGdaWFpsYm5RZ2RHaGhkQ0JwY3lCbGJXbDBkR1ZrSUhkb1pXNGdkR2hsSUVGR1N5QmthWE5qYjI1dVpXTjBJR052ZFc1MFpHOTNiaUJwY3lCMWNHUmhkR1ZrTGx4dUlDb3ZYRzVsZUhCdmNuUWdZMnhoYzNNZ1FXWnJWMkZ5Ym1sdVoxVndaR0YwWlVWMlpXNTBJR1Y0ZEdWdVpITWdSWFpsYm5RZ2UxeHVJQ0FnSUhKbFlXUnZibXg1SUhSNWNHVTZJQ2RoWm10WFlYSnVhVzVuVlhCa1lYUmxKenRjYmlBZ0lDQnlaV0ZrYjI1c2VTQmtZWFJoT2lCN1hHNGdJQ0FnSUNBZ0lDOHFLaUJJYjNjZ2JXRnVlU0J6WldOdmJtUnpJSFZ1ZEdsc0lIUm9aU0J6WlhOemFXOXVJR2x6SUdScGMyTnZibTVsWTNSbFpDQXFMMXh1SUNBZ0lDQWdJQ0JqYjNWdWRFUnZkMjQ2SUc1MWJXSmxjbHh1SUNBZ0lIMDdYRzRnSUNBZ1kyOXVjM1J5ZFdOMGIzSW9aR0YwWVRvZ1FXWnJWMkZ5Ym1sdVoxVndaR0YwWlVWMlpXNTBXeWRrWVhSaEoxMHBJSHRjYmlBZ0lDQWdJQ0FnYzNWd1pYSW9KMkZtYTFkaGNtNXBibWRWY0dSaGRHVW5LVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWtZWFJoSUQwZ1pHRjBZVHRjYmlBZ0lDQjlYRzU5WEc1Y2JpOHFLbHh1SUNvZ1FXNGdaWFpsYm5RZ2RHaGhkQ0JwY3lCbGJXbDBkR1ZrSUhkb1pXNGdRVVpMSUhkaGNtNXBibWNnYVhNZ1pHVmhZM1JwZG1GMFpXUXVYRzRnS2k5Y2JtVjRjRzl5ZENCamJHRnpjeUJCWm10WFlYSnVhVzVuUkdWaFkzUnBkbUYwWlVWMlpXNTBJR1Y0ZEdWdVpITWdSWFpsYm5RZ2UxeHVJQ0FnSUhKbFlXUnZibXg1SUhSNWNHVTZJQ2RoWm10WFlYSnVhVzVuUkdWaFkzUnBkbUYwWlNjN1hHNGdJQ0FnWTI5dWMzUnlkV04wYjNJb0tTQjdYRzRnSUNBZ0lDQWdJSE4xY0dWeUtDZGhabXRYWVhKdWFXNW5SR1ZoWTNScGRtRjBaU2NwTzF4dUlDQWdJSDFjYm4xY2JseHVMeW9xWEc0Z0tpQkJiaUJsZG1WdWRDQjBhR0YwSUdseklHVnRhWFIwWldRZ2QyaGxiaUJCUmtzZ1kyOTFiblJrYjNkdUlISmxZV05vWlhNZ01DQmhibVFnZEdobElIVnpaWElnYVhNZ1pHbHpZMjl1Ym1WamRHVmtMbHh1SUNvdlhHNWxlSEJ2Y25RZ1kyeGhjM01nUVdaclZHbHRaV1JQZFhSRmRtVnVkQ0JsZUhSbGJtUnpJRVYyWlc1MElIdGNiaUFnSUNCeVpXRmtiMjVzZVNCMGVYQmxPaUFuWVdaclZHbHRaV1JQZFhRbk8xeHVJQ0FnSUdOdmJuTjBjblZqZEc5eUtDa2dlMXh1SUNBZ0lDQWdJQ0J6ZFhCbGNpZ25ZV1pyVkdsdFpXUlBkWFFuS1R0Y2JpQWdJQ0I5WEc1OVhHNWNiaThxS2x4dUlDb2dRVzRnWlhabGJuUWdkR2hoZENCcGN5QmxiV2wwZEdWa0lIZG9aVzRnZDJVZ2NtVmpaV2wyWlNCdVpYY2dkbWxrWlc4Z2NYVmhiR2wwZVNCMllXeDFaUzVjYmlBcUwxeHVaWGh3YjNKMElHTnNZWE56SUZacFpHVnZSVzVqYjJSbGNrRjJaMUZRUlhabGJuUWdaWGgwWlc1a2N5QkZkbVZ1ZENCN1hHNGdJQ0FnY21WaFpHOXViSGtnZEhsd1pUb2dKM1pwWkdWdlJXNWpiMlJsY2tGMloxRlFKenRjYmlBZ0lDQnlaV0ZrYjI1c2VTQmtZWFJoT2lCN1hHNGdJQ0FnSUNBZ0lDOHFLaUJCZG1WeVlXZGxJSFpwWkdWdklIRjFZV3hwZEhrZ2RtRnNkV1VnS2k5Y2JpQWdJQ0FnSUNBZ1lYWm5VVkE2SUc1MWJXSmxjbHh1SUNBZ0lIMDdYRzRnSUNBZ1kyOXVjM1J5ZFdOMGIzSW9aR0YwWVRvZ1ZtbGtaVzlGYm1OdlpHVnlRWFpuVVZCRmRtVnVkRnNuWkdGMFlTZGRLU0I3WEc0Z0lDQWdJQ0FnSUhOMWNHVnlLQ2QyYVdSbGIwVnVZMjlrWlhKQmRtZFJVQ2NwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbVJoZEdFZ1BTQmtZWFJoTzF4dUlDQWdJSDFjYm4xY2JseHVMeW9xWEc0Z0tpQkJiaUJsZG1WdWRDQjBhR0YwSUdseklHVnRhWFIwWldRZ1lXWjBaWElnWVNCWFpXSlNkR01nWTI5dWJtVmpkR2x2YmlCb1lYTWdZbVZsYmlCdVpXZHZkR2xoZEdWa0xpQmNiaUFxTDF4dVpYaHdiM0owSUdOc1lYTnpJRmRsWWxKMFkxTmtjRVYyWlc1MElHVjRkR1Z1WkhNZ1JYWmxiblFnZTF4dUlDQWdJSEpsWVdSdmJteDVJSFI1Y0dVNklDZDNaV0pTZEdOVFpIQW5PMXh1SUNBZ0lHTnZibk4wY25WamRHOXlLQ2tnZTF4dUlDQWdJQ0FnSUNCemRYQmxjaWduZDJWaVVuUmpVMlJ3SnlrN1hHNGdJQ0FnZlZ4dWZWeHVYRzR2S2lwY2JpQXFJRUZ1SUdWMlpXNTBJSFJvWVhRZ2FYTWdaVzFwZEhSbFpDQjNhR1Z1SUdGMWRHOGdZMjl1Ym1WamRHbHVaeTVjYmlBcUwxeHVaWGh3YjNKMElHTnNZWE56SUZkbFlsSjBZMEYxZEc5RGIyNXVaV04wUlhabGJuUWdaWGgwWlc1a2N5QkZkbVZ1ZENCN1hHNGdJQ0FnY21WaFpHOXViSGtnZEhsd1pUb2dKM2RsWWxKMFkwRjFkRzlEYjI1dVpXTjBKenRjYmlBZ0lDQmpiMjV6ZEhKMVkzUnZjaWdwSUh0Y2JpQWdJQ0FnSUNBZ2MzVndaWElvSjNkbFlsSjBZMEYxZEc5RGIyNXVaV04wSnlrN1hHNGdJQ0FnZlZ4dWZWeHVYRzR2S2lwY2JpQXFJRUZ1SUdWMlpXNTBJSFJvWVhRZ2FYTWdaVzFwZEhSbFpDQjNhR1Z1SUhObGJtUnBibWNnWVNCWFpXSlNkR01nYjJabVpYSXVYRzRnS2k5Y2JtVjRjRzl5ZENCamJHRnpjeUJYWldKU2RHTkRiMjV1WldOMGFXNW5SWFpsYm5RZ1pYaDBaVzVrY3lCRmRtVnVkQ0I3WEc0Z0lDQWdjbVZoWkc5dWJIa2dkSGx3WlRvZ0ozZGxZbEowWTBOdmJtNWxZM1JwYm1jbk8xeHVJQ0FnSUdOdmJuTjBjblZqZEc5eUtDa2dlMXh1SUNBZ0lDQWdJQ0J6ZFhCbGNpZ25kMlZpVW5SalEyOXVibVZqZEdsdVp5Y3BPMXh1SUNBZ0lIMWNibjFjYmx4dUx5b3FYRzRnS2lCQmJpQmxkbVZ1ZENCMGFHRjBJR2x6SUdWdGFYUjBaV1FnZDJobGJpQlhaV0pTZEdNZ1kyOXVibVZqZEdsdmJpQm9ZWE1nWW1WbGJpQmxjM1JoWW14cGMyaGxaQzVjYmlBcUwxeHVaWGh3YjNKMElHTnNZWE56SUZkbFlsSjBZME52Ym01bFkzUmxaRVYyWlc1MElHVjRkR1Z1WkhNZ1JYWmxiblFnZTF4dUlDQWdJSEpsWVdSdmJteDVJSFI1Y0dVNklDZDNaV0pTZEdORGIyNXVaV04wWldRbk8xeHVJQ0FnSUdOdmJuTjBjblZqZEc5eUtDa2dlMXh1SUNBZ0lDQWdJQ0J6ZFhCbGNpZ25kMlZpVW5SalEyOXVibVZqZEdWa0p5azdYRzRnSUNBZ2ZWeHVmVnh1WEc0dktpcGNiaUFxSUVGdUlHVjJaVzUwSUhSb1lYUWdhWE1nWlcxcGRIUmxaQ0JwWmlCWFpXSlNkR01nWTI5dWJtVmpkR2x2YmlCb1lYTWdabUZwYkdWa0xseHVJQ292WEc1bGVIQnZjblFnWTJ4aGMzTWdWMlZpVW5SalJtRnBiR1ZrUlhabGJuUWdaWGgwWlc1a2N5QkZkbVZ1ZENCN1hHNGdJQ0FnY21WaFpHOXViSGtnZEhsd1pUb2dKM2RsWWxKMFkwWmhhV3hsWkNjN1hHNGdJQ0FnWTI5dWMzUnlkV04wYjNJb0tTQjdYRzRnSUNBZ0lDQWdJSE4xY0dWeUtDZDNaV0pTZEdOR1lXbHNaV1FuS1R0Y2JpQWdJQ0I5WEc1OVhHNWNiaThxS2x4dUlDb2dRVzRnWlhabGJuUWdkR2hoZENCcGN5QmxiV2wwZEdWa0lHbG1JRmRsWWxKMFl5QmpiMjV1WldOMGFXOXVJR2x6SUdScGMyTnZibTVsWTNSbFpDNWNiaUFxTDF4dVpYaHdiM0owSUdOc1lYTnpJRmRsWWxKMFkwUnBjMk52Ym01bFkzUmxaRVYyWlc1MElHVjRkR1Z1WkhNZ1JYWmxiblFnZTF4dUlDQWdJSEpsWVdSdmJteDVJSFI1Y0dVNklDZDNaV0pTZEdORWFYTmpiMjV1WldOMFpXUW5PMXh1SUNBZ0lISmxZV1J2Ym14NUlHUmhkR0U2SUh0Y2JpQWdJQ0FnSUNBZ0x5b3FJRTFsYzNOaFoyVWdaR1Z6WTNKcFltbHVaeUIwYUdVZ1pHbHpZMjl1Ym1WamRDQnlaV0Z6YjI0Z0tpOWNiaUFnSUNBZ0lDQWdaWFpsYm5SVGRISnBibWM2SUhOMGNtbHVaenRjYmlBZ0lDQWdJQ0FnTHlvcUlIUnlkV1VnYVdZZ2RHaGxJSFZ6WlhJZ2FYTWdZV0pzWlNCMGJ5QnlaV052Ym01bFkzUXNJR1poYkhObElHbG1JR1JwYzJOdmJtNWxZM1JsWkNCaVpXTmhkWE5sSUc5bUlIVnVjbVZqYjNabGNtRmliR1VnY21WaGMyOXVjeUJzYVd0bElHNXZkQ0JoWW14bElIUnZJR052Ym01bFkzUWdkRzhnZEdobElITnBaMjVoYkdsdVp5QnpaWEoyWlhJZ0tpOWNiaUFnSUNBZ0lDQWdjMmh2ZDBGamRHbHZiazl5UlhKeWIzSlBia1JwYzJOdmJtNWxZM1E2SUdKdmIyeGxZVzQ3WEc0Z0lDQWdmVHRjYmlBZ0lDQmpiMjV6ZEhKMVkzUnZjaWhrWVhSaE9pQlhaV0pTZEdORWFYTmpiMjV1WldOMFpXUkZkbVZ1ZEZzblpHRjBZU2RkS1NCN1hHNGdJQ0FnSUNBZ0lITjFjR1Z5S0NkM1pXSlNkR05FYVhOamIyNXVaV04wWldRbktUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1a1lYUmhJRDBnWkdGMFlUdGNiaUFnSUNCOVhHNTlYRzVjYmk4cUtseHVJQ29nUVc0Z1pYWmxiblFnZEdoaGRDQnBjeUJsYldsMGRHVmtJSGRvWlc0Z1VsUkRSR0YwWVVOb1lXNXVaV3dnYVhNZ2IzQmxibVZrTGx4dUlDb3ZYRzVsZUhCdmNuUWdZMnhoYzNNZ1JHRjBZVU5vWVc1dVpXeFBjR1Z1UlhabGJuUWdaWGgwWlc1a2N5QkZkbVZ1ZENCN1hHNGdJQ0FnY21WaFpHOXViSGtnZEhsd1pUb2dKMlJoZEdGRGFHRnVibVZzVDNCbGJpYzdYRzRnSUNBZ2NtVmhaRzl1YkhrZ1pHRjBZVG9nZTF4dUlDQWdJQ0FnSUNBdktpb2dSR0YwWVNCamFHRnVibVZzSUd4aFltVnNMaUJQYm1VZ2IyWWdKMlJoZEdGamFHRnVibVZzSnl3Z0ozTmxibVF0WkdGMFlXTm9ZVzV1Wld3bkxDQW5jbVZqZGkxa1lYUmhZMmhoYm01bGJDY2dLaTljYmlBZ0lDQWdJQ0FnYkdGaVpXdzZJSE4wY21sdVp6dGNiaUFnSUNBZ0lDQWdMeW9xSUZKVVEwUmhkR0ZEYUdGdWJtVnNJRzl1VDNCbGJpQmxkbVZ1ZENBcUwxeHVJQ0FnSUNBZ0lDQmxkbVZ1ZERvZ1JYWmxiblJjYmlBZ0lDQjlPMXh1SUNBZ0lHTnZibk4wY25WamRHOXlLR1JoZEdFNklFUmhkR0ZEYUdGdWJtVnNUM0JsYmtWMlpXNTBXeWRrWVhSaEoxMHBJSHRjYmlBZ0lDQWdJQ0FnYzNWd1pYSW9KMlJoZEdGRGFHRnVibVZzVDNCbGJpY3BPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtUmhkR0VnUFNCa1lYUmhPMXh1SUNBZ0lIMWNibjFjYmx4dUx5b3FYRzRnS2lCQmJpQmxkbVZ1ZENCMGFHRjBJR2x6SUdWdGFYUjBaV1FnZDJobGJpQlNWRU5FWVhSaFEyaGhibTVsYkNCcGN5QmpiRzl6WldRdVhHNGdLaTljYm1WNGNHOXlkQ0JqYkdGemN5QkVZWFJoUTJoaGJtNWxiRU5zYjNObFJYWmxiblFnWlhoMFpXNWtjeUJGZG1WdWRDQjdYRzRnSUNBZ2NtVmhaRzl1YkhrZ2RIbHdaVG9nSjJSaGRHRkRhR0Z1Ym1Wc1EyeHZjMlVuTzF4dUlDQWdJSEpsWVdSdmJteDVJR1JoZEdFNklIdGNiaUFnSUNBZ0lDQWdMeW9xSUVSaGRHRWdZMmhoYm01bGJDQnNZV0psYkM0Z1QyNWxJRzltSUNka1lYUmhZMmhoYm01bGJDY3NJQ2R6Wlc1a0xXUmhkR0ZqYUdGdWJtVnNKeXdnSjNKbFkzWXRaR0YwWVdOb1lXNXVaV3duSUNvdlhHNGdJQ0FnSUNBZ0lHeGhZbVZzT2lCemRISnBibWM3WEc0Z0lDQWdJQ0FnSUM4cUtpQlNWRU5FWVhSaFEyaGhibTVsYkNCdmJrTnNiM05sSUdWMlpXNTBJQ292WEc0Z0lDQWdJQ0FnSUdWMlpXNTBPaUJGZG1WdWRGeHVJQ0FnSUgwN1hHNGdJQ0FnWTI5dWMzUnlkV04wYjNJb1pHRjBZVG9nUkdGMFlVTm9ZVzV1Wld4RGJHOXpaVVYyWlc1MFd5ZGtZWFJoSjEwcElIdGNiaUFnSUNBZ0lDQWdjM1Z3WlhJb0oyUmhkR0ZEYUdGdWJtVnNRMnh2YzJVbktUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1a1lYUmhJRDBnWkdGMFlUdGNiaUFnSUNCOVhHNTlYRzVjYmk4cUtseHVJQ29nUVc0Z1pYWmxiblFnZEdoaGRDQnBjeUJsYldsMGRHVmtJRzl1SUZKVVEwUmhkR0ZEYUdGdWJtVnNJR1Z5Y205eWN5NWNiaUFxTDF4dVpYaHdiM0owSUdOc1lYTnpJRVJoZEdGRGFHRnVibVZzUlhKeWIzSkZkbVZ1ZENCbGVIUmxibVJ6SUVWMlpXNTBJSHRjYmlBZ0lDQnlaV0ZrYjI1c2VTQjBlWEJsT2lBblpHRjBZVU5vWVc1dVpXeEZjbkp2Y2ljN1hHNGdJQ0FnY21WaFpHOXViSGtnWkdGMFlUb2dlMXh1SUNBZ0lDQWdJQ0F2S2lvZ1JHRjBZU0JqYUdGdWJtVnNJR3hoWW1Wc0xpQlBibVVnYjJZZ0oyUmhkR0ZqYUdGdWJtVnNKeXdnSjNObGJtUXRaR0YwWVdOb1lXNXVaV3duTENBbmNtVmpkaTFrWVhSaFkyaGhibTVsYkNjZ0tpOWNiaUFnSUNBZ0lDQWdiR0ZpWld3NklITjBjbWx1Wnp0Y2JpQWdJQ0FnSUNBZ0x5b3FJRkpVUTBSaGRHRkRhR0Z1Ym1Wc0lHOXVSWEp5YjNJZ1pYWmxiblFnS2k5Y2JpQWdJQ0FnSUNBZ1pYWmxiblE2SUVWMlpXNTBYRzRnSUNBZ2ZUdGNiaUFnSUNCamIyNXpkSEoxWTNSdmNpaGtZWFJoT2lCRVlYUmhRMmhoYm01bGJFVnljbTl5UlhabGJuUmJKMlJoZEdFblhTa2dlMXh1SUNBZ0lDQWdJQ0J6ZFhCbGNpZ25aR0YwWVVOb1lXNXVaV3hGY25KdmNpY3BPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtUmhkR0VnUFNCa1lYUmhPMXh1SUNBZ0lIMWNibjFjYmx4dUx5b3FYRzRnS2lCQmJpQmxkbVZ1ZENCMGFHRjBJR2x6SUdWdGFYUjBaV1FnZDJobGJpQjBhR1VnZG1sa1pXOGdjM1J5WldGdElHaGhjeUJpWldWdUlHbHVhWFJwWVd4cGVtVmtMbHh1SUNvdlhHNWxlSEJ2Y25RZ1kyeGhjM01nVm1sa1pXOUpibWwwYVdGc2FYcGxaRVYyWlc1MElHVjRkR1Z1WkhNZ1JYWmxiblFnZTF4dUlDQWdJSEpsWVdSdmJteDVJSFI1Y0dVNklDZDJhV1JsYjBsdWFYUnBZV3hwZW1Wa0p6dGNiaUFnSUNCamIyNXpkSEoxWTNSdmNpZ3BJSHRjYmlBZ0lDQWdJQ0FnYzNWd1pYSW9KM1pwWkdWdlNXNXBkR2xoYkdsNlpXUW5LVHRjYmlBZ0lDQjlYRzU5WEc1Y2JpOHFLbHh1SUNvZ1FXNGdaWFpsYm5RZ2RHaGhkQ0JwY3lCbGJXbDBkR1ZrSUhkb1pXNGdkbWxrWlc4Z2MzUnlaV0Z0SUd4dllXUnBibWNnYzNSaGNuUnpMbHh1SUNvdlhHNWxlSEJ2Y25RZ1kyeGhjM01nVTNSeVpXRnRURzloWkdsdVowVjJaVzUwSUdWNGRHVnVaSE1nUlhabGJuUWdlMXh1SUNBZ0lISmxZV1J2Ym14NUlIUjVjR1U2SUNkemRISmxZVzFNYjJGa2FXNW5KenRjYmlBZ0lDQmpiMjV6ZEhKMVkzUnZjaWdwSUh0Y2JpQWdJQ0FnSUNBZ2MzVndaWElvSjNOMGNtVmhiVXh2WVdScGJtY25LVHRjYmlBZ0lDQjlYRzU5WEc1Y2JpOHFLbHh1SUNvZ1FXNGdaWFpsYm5RZ2RHaGhkQ0JwY3lCbGJXbDBkR1ZrSUhkb1pXNGdkbWxrWlc4Z2MzUnlaV0Z0SUd4dllXUnBibWNnYUdGeklHWnBibWx6YUdWa0xseHVJQ292WEc1bGVIQnZjblFnWTJ4aGMzTWdVM1J5WldGdFVISmxRMjl1Ym1WamRFVjJaVzUwSUdWNGRHVnVaSE1nUlhabGJuUWdlMXh1SUNBZ0lISmxZV1J2Ym14NUlIUjVjR1U2SUNkemRISmxZVzFEYjI1dVpXTjBKenRjYmlBZ0lDQmpiMjV6ZEhKMVkzUnZjaWdwSUh0Y2JpQWdJQ0FnSUNBZ2MzVndaWElvSjNOMGNtVmhiVU52Ym01bFkzUW5LVHRjYmlBZ0lDQjlYRzU5WEc1Y2JpOHFLbHh1SUNvZ1FXNGdaWFpsYm5RZ2RHaGhkQ0JwY3lCbGJXbDBkR1ZrSUhkb1pXNGdkbWxrWlc4Z2MzUnlaV0Z0SUdoaGN5QnpkRzl3Y0dWa0xseHVJQ292WEc1bGVIQnZjblFnWTJ4aGMzTWdVM1J5WldGdFVISmxSR2x6WTI5dWJtVmpkRVYyWlc1MElHVjRkR1Z1WkhNZ1JYWmxiblFnZTF4dUlDQWdJSEpsWVdSdmJteDVJSFI1Y0dVNklDZHpkSEpsWVcxRWFYTmpiMjV1WldOMEp6dGNiaUFnSUNCamIyNXpkSEoxWTNSdmNpZ3BJSHRjYmlBZ0lDQWdJQ0FnYzNWd1pYSW9KM04wY21WaGJVUnBjMk52Ym01bFkzUW5LVHRjYmlBZ0lDQjlYRzU5WEc1Y2JpOHFLbHh1SUNvZ1FXNGdaWFpsYm5RZ2RHaGhkQ0JwY3lCbGJXbDBkR1ZrSUhkb1pXNGdkbWxrWlc4Z2MzUnlaV0Z0SUdseklISmxZMjl1Ym1WamRHbHVaeTVjYmlBcUwxeHVaWGh3YjNKMElHTnNZWE56SUZOMGNtVmhiVkpsWTI5dWJtVmpkRVYyWlc1MElHVjRkR1Z1WkhNZ1JYWmxiblFnZTF4dUlDQWdJSEpsWVdSdmJteDVJSFI1Y0dVNklDZHpkSEpsWVcxU1pXTnZibTVsWTNRbk8xeHVJQ0FnSUdOdmJuTjBjblZqZEc5eUtDa2dlMXh1SUNBZ0lDQWdJQ0J6ZFhCbGNpZ25jM1J5WldGdFVtVmpiMjV1WldOMEp5azdYRzRnSUNBZ2ZWeHVmVnh1WEc0dktpcGNiaUFxSUVGdUlHVjJaVzUwSUhSb1lYUWdhWE1nWlcxcGRIUmxaQ0JwWmlCMGFHVnlaU0JoY21VZ1pYSnliM0p6SUd4dllXUnBibWNnZEdobElIWnBaR1Z2SUhOMGNtVmhiUzVjYmlBcUwxeHVaWGh3YjNKMElHTnNZWE56SUZCc1lYbFRkSEpsWVcxRmNuSnZja1YyWlc1MElHVjRkR1Z1WkhNZ1JYWmxiblFnZTF4dUlDQWdJSEpsWVdSdmJteDVJSFI1Y0dVNklDZHdiR0Y1VTNSeVpXRnRSWEp5YjNJbk8xeHVJQ0FnSUhKbFlXUnZibXg1SUdSaGRHRTZJSHRjYmlBZ0lDQWdJQ0FnTHlvcUlFVnljbTl5SUcxbGMzTmhaMlVnS2k5Y2JpQWdJQ0FnSUNBZ2JXVnpjMkZuWlRvZ2MzUnlhVzVuWEc0Z0lDQWdmVHRjYmlBZ0lDQmpiMjV6ZEhKMVkzUnZjaWhrWVhSaE9pQlFiR0Y1VTNSeVpXRnRSWEp5YjNKRmRtVnVkRnNuWkdGMFlTZGRLU0I3WEc0Z0lDQWdJQ0FnSUhOMWNHVnlLQ2R3YkdGNVUzUnlaV0Z0UlhKeWIzSW5LVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWtZWFJoSUQwZ1pHRjBZVHRjYmlBZ0lDQjlYRzU5WEc1Y2JpOHFLbHh1SUNvZ1FXNGdaWFpsYm5RZ2RHaGhkQ0JwY3lCbGJXbDBkR1ZrSUdKbFptOXlaU0IwY25scGJtY2dkRzhnYzNSaGNuUWdkbWxrWlc4Z2NHeGhlV0poWTJzdVhHNGdLaTljYm1WNGNHOXlkQ0JqYkdGemN5QlFiR0Y1VTNSeVpXRnRSWFpsYm5RZ1pYaDBaVzVrY3lCRmRtVnVkQ0I3WEc0Z0lDQWdjbVZoWkc5dWJIa2dkSGx3WlRvZ0ozQnNZWGxUZEhKbFlXMG5PMXh1SUNBZ0lHTnZibk4wY25WamRHOXlLQ2tnZTF4dUlDQWdJQ0FnSUNCemRYQmxjaWduY0d4aGVWTjBjbVZoYlNjcE8xeHVJQ0FnSUgxY2JuMWNibHh1THlvcVhHNGdLaUJCYmlCbGRtVnVkQ0IwYUdGMElHbHpJR1Z0YVhSMFpXUWdhV1lnZEdobElHSnliM2R6WlhJZ2NtVnFaV04wY3lCMmFXUmxieUJ3YkdGNVltRmpheTRnUTJGdUlHaGhjSEJsYmlCbWIzSWdaWGhoYlhCc1pTQnBabHh1SUNvZ2RtbGtaVzhnWVhWMGJ5MXdiR0Y1SUhkcGRHaHZkWFFnZFhObGNpQnBiblJsY21GamRHbHZiaUJwY3lCeVpXWjFjMlZrSUdKNUlIUm9aU0JpY205M2MyVnlMbHh1SUNvdlhHNWxlSEJ2Y25RZ1kyeGhjM01nVUd4aGVWTjBjbVZoYlZKbGFtVmpkR1ZrUlhabGJuUWdaWGgwWlc1a2N5QkZkbVZ1ZENCN1hHNGdJQ0FnY21WaFpHOXViSGtnZEhsd1pUb2dKM0JzWVhsVGRISmxZVzFTWldwbFkzUmxaQ2M3WEc0Z0lDQWdjbVZoWkc5dWJIa2daR0YwWVRvZ2UxeHVJQ0FnSUNBZ0lDQXZLaW9nVW1WcVpXTjBhVzl1SUhKbFlYTnZiaUFxTDF4dUlDQWdJQ0FnSUNCeVpXRnpiMjQ2SUhWdWEyNXZkMjVjYmlBZ0lDQjlPMXh1SUNBZ0lHTnZibk4wY25WamRHOXlLR1JoZEdFNklGQnNZWGxUZEhKbFlXMVNaV3BsWTNSbFpFVjJaVzUwV3lka1lYUmhKMTBwSUh0Y2JpQWdJQ0FnSUNBZ2MzVndaWElvSjNCc1lYbFRkSEpsWVcxU1pXcGxZM1JsWkNjcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1SaGRHRWdQU0JrWVhSaE8xeHVJQ0FnSUgxY2JuMWNibHh1THlvcVhHNGdLaUJCYmlCbGRtVnVkQ0IwYUdGMElHbHpJR1Z0YVhSMFpXUWdkMmhsYmlCeVpXTmxhWFpwYm1jZ1lTQm1kV3hzSUVaeVpXVjZaVVp5WVcxbElHbHRZV2RsSUdaeWIyMGdWVVV1WEc0Z0tpOWNibVY0Y0c5eWRDQmpiR0Z6Y3lCTWIyRmtSbkpsWlhwbFJuSmhiV1ZGZG1WdWRDQmxlSFJsYm1SeklFVjJaVzUwSUh0Y2JpQWdJQ0J5WldGa2IyNXNlU0IwZVhCbE9pQW5iRzloWkVaeVpXVjZaVVp5WVcxbEp6dGNiaUFnSUNCeVpXRmtiMjVzZVNCa1lYUmhPaUI3WEc0Z0lDQWdJQ0FnSUM4cUtpQjBjblZsSUdsbUlITm9iM1ZzWkNCemFHOTNJR05zYVdOckxYUnZMWEJzWVhrZ2IzWmxjbXhoZVN3Z2JtOTBJSFJvWlNCbWNtVmxlbVVnWm5KaGJXVWdZMjl1ZEdWdWRITWdLaTljYmlBZ0lDQWdJQ0FnYzJodmRXeGtVMmh2ZDFCc1lYbFBkbVZ5YkdGNU9pQmliMjlzWldGdU8xeHVJQ0FnSUNBZ0lDQXZLaW9nZEhKMVpTQnBaaUIwYUdVZ2NtVmpaV2wyWldRZ2FXMWhaMlVnYVhNZ2RtRnNhV1FnS2k5Y2JpQWdJQ0FnSUNBZ2FYTldZV3hwWkRvZ1ltOXZiR1ZoYmp0Y2JpQWdJQ0FnSUNBZ0x5b3FJRWx0WVdkbElHUmhkR0V1SUVOaGJpQmlaU0JsTG1jdUlHUnBjM0JzWVhsbFpDQmllU0JsYm1OdlpHbHVaeUJoY3lCaElHUmhkR0VnZFhKc0xpQXFMMXh1SUNBZ0lDQWdJQ0JxY0dWblJHRjBZVDg2SUZWcGJuUTRRWEp5WVhrN1hHNGdJQ0FnZlR0Y2JpQWdJQ0JqYjI1emRISjFZM1J2Y2loa1lYUmhPaUJNYjJGa1JuSmxaWHBsUm5KaGJXVkZkbVZ1ZEZzblpHRjBZU2RkS1NCN1hHNGdJQ0FnSUNBZ0lITjFjR1Z5S0Nkc2IyRmtSbkpsWlhwbFJuSmhiV1VuS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVrWVhSaElEMGdaR0YwWVR0Y2JpQWdJQ0I5WEc1OVhHNWNiaThxS2x4dUlDb2dRVzRnWlhabGJuUWdkR2hoZENCcGN5QmxiV2wwZEdWa0lIZG9aVzRnY21WalpXbDJhVzVuSUZWdVpuSmxaWHBsUm5KaGJXVWdiV1Z6YzJGblpTQm1jbTl0SUZWRklHRnVaQ0IyYVdSbGJ5QndiR0Y1WW1GamF5QnBjeUJoWW05MWRDQjBieUJpWlNCeVpYTjFiV1ZrTGx4dUlDb3ZYRzVsZUhCdmNuUWdZMnhoYzNNZ1NHbGtaVVp5WldWNlpVWnlZVzFsUlhabGJuUWdaWGgwWlc1a2N5QkZkbVZ1ZENCN1hHNGdJQ0FnY21WaFpHOXViSGtnZEhsd1pUb2dKMmhwWkdWR2NtVmxlbVZHY21GdFpTYzdYRzRnSUNBZ1kyOXVjM1J5ZFdOMGIzSW9LU0I3WEc0Z0lDQWdJQ0FnSUhOMWNHVnlLQ2RvYVdSbFJuSmxaWHBsUm5KaGJXVW5LVHRjYmlBZ0lDQjlYRzU5WEc1Y2JpOHFLbHh1SUNvZ1FXNGdaWFpsYm5RZ2RHaGhkQ0JwY3lCbGJXbDBkR1ZrSUhkb1pXNGdjbVZqWldsMmFXNW5JRmRsWWxKVVF5QnpkR0YwYVhOMGFXTnpMbHh1SUNvdlhHNWxlSEJ2Y25RZ1kyeGhjM01nVTNSaGRITlNaV05sYVhabFpFVjJaVzUwSUdWNGRHVnVaSE1nUlhabGJuUWdlMXh1SUNBZ0lISmxZV1J2Ym14NUlIUjVjR1U2SUNkemRHRjBjMUpsWTJWcGRtVmtKenRjYmlBZ0lDQnlaV0ZrYjI1c2VTQmtZWFJoT2lCN1hHNGdJQ0FnSUNBZ0lDOHFLaUJUZEdGMGFYTjBhV056SUc5aWFtVmpkQ0FxTDF4dUlDQWdJQ0FnSUNCaFoyZHlaV2RoZEdWa1UzUmhkSE02SUVGblozSmxaMkYwWldSVGRHRjBjMXh1SUNBZ0lIMDdYRzRnSUNBZ1kyOXVjM1J5ZFdOMGIzSW9aR0YwWVRvZ1UzUmhkSE5TWldObGFYWmxaRVYyWlc1MFd5ZGtZWFJoSjEwcElIdGNiaUFnSUNBZ0lDQWdjM1Z3WlhJb0ozTjBZWFJ6VW1WalpXbDJaV1FuS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVrWVhSaElEMGdaR0YwWVR0Y2JpQWdJQ0I5WEc1OVhHNWNiaThxS2x4dUlDb2dRVzRnWlhabGJuUWdkR2hoZENCcGN5QmxiV2wwZEdWa0lIZG9aVzRnYzNSeVpXRnRaWElnYkdsemRDQmphR0Z1WjJWekxseHVJQ292WEc1bGVIQnZjblFnWTJ4aGMzTWdVM1J5WldGdFpYSk1hWE4wVFdWemMyRm5aVVYyWlc1MElHVjRkR1Z1WkhNZ1JYWmxiblFnZTF4dUlDQWdJSEpsWVdSdmJteDVJSFI1Y0dVNklDZHpkSEpsWVcxbGNreHBjM1JOWlhOellXZGxKenRjYmlBZ0lDQnlaV0ZrYjI1c2VTQmtZWFJoT2lCN1hHNGdJQ0FnSUNBZ0lDOHFLaUJUZEhKbFlXMWxjaUJzYVhOMElHMWxjM05oWjJVZ1kyOXVkR0ZwYm1sdVp5QmhiaUJoY25KaGVTQnZaaUJ6ZEhKbFlXMWxjaUJwWkhNZ0tpOWNiaUFnSUNBZ0lDQWdiV1Z6YzJGblpWTjBjbVZoYldWeVRHbHpkRG9nVFdWemMyRm5aVk4wY21WaGJXVnlUR2x6ZER0Y2JpQWdJQ0FnSUNBZ0x5b3FJRUYxZEc4dGMyVnNaV04wWldRZ2MzUnlaV0Z0WlhJZ1puSnZiU0IwYUdVZ2JHbHpkQ3dnYjNJZ2JuVnNiQ0JwWmlCMWJtRmliR1VnZEc4Z1lYVjBieTF6Wld4bFkzUWdZVzVrSUhWelpYSWdjMmh2ZFd4a0lHSmxJSEJ5YjIxd2RHVmtJSFJ2SUhObGJHVmpkQ0FxTDF4dUlDQWdJQ0FnSUNCaGRYUnZVMlZzWldOMFpXUlRkSEpsWVcxbGNrbGtPaUJ6ZEhKcGJtY2dmQ0J1ZFd4c08xeHVJQ0FnSUgwN1hHNGdJQ0FnWTI5dWMzUnlkV04wYjNJb1pHRjBZVG9nVTNSeVpXRnRaWEpNYVhOMFRXVnpjMkZuWlVWMlpXNTBXeWRrWVhSaEoxMHBJSHRjYmlBZ0lDQWdJQ0FnYzNWd1pYSW9KM04wY21WaGJXVnlUR2x6ZEUxbGMzTmhaMlVuS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVrWVhSaElEMGdaR0YwWVR0Y2JpQWdJQ0I5WEc1OVhHNWNiaThxS2x4dUlDb2dRVzRnWlhabGJuUWdkR2hoZENCcGN5QmxiV2wwZEdWa0lIZG9aVzRnY21WalpXbDJhVzVuSUd4aGRHVnVZM2tnZEdWemRDQnlaWE4xYkhSekxseHVJQ292WEc1bGVIQnZjblFnWTJ4aGMzTWdUR0YwWlc1amVWUmxjM1JTWlhOMWJIUkZkbVZ1ZENCbGVIUmxibVJ6SUVWMlpXNTBJSHRjYmlBZ0lDQnlaV0ZrYjI1c2VTQjBlWEJsT2lBbmJHRjBaVzVqZVZSbGMzUlNaWE4xYkhRbk8xeHVJQ0FnSUhKbFlXUnZibXg1SUdSaGRHRTZJSHRjYmlBZ0lDQWdJQ0FnTHlvcUlFeGhkR1Z1WTNrZ2RHVnpkQ0J5WlhOMWJIUWdiMkpxWldOMElDb3ZYRzRnSUNBZ0lDQWdJR3hoZEdWdVkzbFVhVzFwYm1kek9pQk1ZWFJsYm1ONVZHVnpkRkpsYzNWc2RITmNiaUFnSUNCOU8xeHVJQ0FnSUdOdmJuTjBjblZqZEc5eUtHUmhkR0U2SUV4aGRHVnVZM2xVWlhOMFVtVnpkV3gwUlhabGJuUmJKMlJoZEdFblhTa2dlMXh1SUNBZ0lDQWdJQ0J6ZFhCbGNpZ25iR0YwWlc1amVWUmxjM1JTWlhOMWJIUW5LVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWtZWFJoSUQwZ1pHRjBZVHRjYmlBZ0lDQjlYRzU5WEc1Y2JpOHFLbHh1SUNvZ1FXNGdaWFpsYm5RZ2RHaGhkQ0JwY3lCbGJXbDBkR1ZrSUhkb1pXNGdjbVZqWldsMmFXNW5JR2x1YVhScFlXd2djMlYwZEdsdVozTWdabkp2YlNCVlJTNWNiaUFxTDF4dVpYaHdiM0owSUdOc1lYTnpJRWx1YVhScFlXeFRaWFIwYVc1bmMwVjJaVzUwSUdWNGRHVnVaSE1nUlhabGJuUWdlMXh1SUNBZ0lISmxZV1J2Ym14NUlIUjVjR1U2SUNkcGJtbDBhV0ZzVTJWMGRHbHVaM01uTzF4dUlDQWdJSEpsWVdSdmJteDVJR1JoZEdFNklIdGNiaUFnSUNBZ0lDQWdMeW9xSUVsdWFYUnBZV3dnYzJWMGRHbHVaM01nWm5KdmJTQlZSU0FxTDF4dUlDQWdJQ0FnSUNCelpYUjBhVzVuY3pvZ1NXNXBkR2xoYkZObGRIUnBibWR6WEc0Z0lDQWdmVHRjYmlBZ0lDQmpiMjV6ZEhKMVkzUnZjaWhrWVhSaE9pQkpibWwwYVdGc1UyVjBkR2x1WjNORmRtVnVkRnNuWkdGMFlTZGRLU0I3WEc0Z0lDQWdJQ0FnSUhOMWNHVnlLQ2RwYm1sMGFXRnNVMlYwZEdsdVozTW5LVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWtZWFJoSUQwZ1pHRjBZVHRjYmlBZ0lDQjlYRzU5WEc1Y2JtVjRjRzl5ZENCMGVYQmxJRk5sZEhScGJtZHpSR0YwWVNBOVhHNGdJQ0FnZkNCN1hHNGdJQ0FnSUNBZ0lDQWdMeW9xSUVac1lXY2dhV1FnS2k5Y2JpQWdJQ0FnSUNBZ0lDQnBaRG9nUm14aFozTkpaSE03WEc0Z0lDQWdJQ0FnSUNBZ2RIbHdaVG9nSjJac1lXY25PMXh1SUNBZ0lDQWdJQ0FnSUM4cUtpQkdiR0ZuSUhaaGJIVmxJQ292WEc0Z0lDQWdJQ0FnSUNBZ2RtRnNkV1U2SUdKdmIyeGxZVzQ3WEc0Z0lDQWdJQ0FnSUNBZ0x5b3FJRk5sZEhScGJtZEdiR0ZuSUc5aWFtVmpkQ0FxTDF4dUlDQWdJQ0FnSUNBZ0lIUmhjbWRsZERvZ1UyVjBkR2x1WjBac1lXYzdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZDQjdYRzRnSUNBZ0lDQWdJQ0FnTHlvcUlFNTFiV1Z5YVdNZ2MyVjBkR2x1WnlCcFpDQXFMMXh1SUNBZ0lDQWdJQ0FnSUdsa09pQk9kVzFsY21salVHRnlZVzFsZEdWeWMwbGtjenRjYmlBZ0lDQWdJQ0FnSUNCMGVYQmxPaUFuYm5WdFltVnlKenRjYmlBZ0lDQWdJQ0FnSUNBdktpb2dUblZ0WlhKcFl5QnpaWFIwYVc1bklIWmhiSFZsSUNvdlhHNGdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklHNTFiV0psY2p0Y2JpQWdJQ0FnSUNBZ0lDQXZLaW9nVTJWMGRHbHVaMDUxYldKbGNpQnZZbXBsWTNRZ0tpOWNiaUFnSUNBZ0lDQWdJQ0IwWVhKblpYUTZJRk5sZEhScGJtZE9kVzFpWlhJN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZkNCN1hHNGdJQ0FnSUNBZ0lDQWdMeW9xSUZSbGVIUWdjMlYwZEdsdVp5QnBaQ0FxTDF4dUlDQWdJQ0FnSUNBZ0lHbGtPaUJVWlhoMFVHRnlZVzFsZEdWeWMwbGtjenRjYmlBZ0lDQWdJQ0FnSUNCMGVYQmxPaUFuZEdWNGRDYzdYRzRnSUNBZ0lDQWdJQ0FnTHlvcUlGUmxlSFFnYzJWMGRHbHVaeUIyWVd4MVpTQXFMMXh1SUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJ6ZEhKcGJtYzdYRzRnSUNBZ0lDQWdJQ0FnTHlvcUlGTmxkSFJwYm1kVVpYaDBJRzlpYW1WamRDQXFMMXh1SUNBZ0lDQWdJQ0FnSUhSaGNtZGxkRG9nVTJWMGRHbHVaMVJsZUhRN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZkNCN1hHNGdJQ0FnSUNBZ0lDQWdMeW9xSUU5d2RHbHZiaUJ6WlhSMGFXNW5JR2xrSUNvdlhHNGdJQ0FnSUNBZ0lDQWdhV1E2SUU5d2RHbHZibEJoY21GdFpYUmxjbk5KWkhNN1hHNGdJQ0FnSUNBZ0lDQWdkSGx3WlRvZ0oyOXdkR2x2YmljN1hHNGdJQ0FnSUNBZ0lDQWdMeW9xSUU5d2RHbHZiaUJ6WlhSMGFXNW5JSE5sYkdWamRHVmtJSFpoYkhWbElDb3ZYRzRnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJSE4wY21sdVp6dGNiaUFnSUNBZ0lDQWdJQ0F2S2lvZ1UyVjBkR2x1WjA5d2RHbHZiaUJ2WW1wbFkzUWdLaTljYmlBZ0lDQWdJQ0FnSUNCMFlYSm5aWFE2SUZObGRIUnBibWRQY0hScGIyNDdYRzRnSUNBZ0lDQjlPMXh1WEc0dktpcGNiaUFxSUVGdUlHVjJaVzUwSUhSb1lYUWdhWE1nWlcxcGRIUmxaQ0IzYUdWdUlGQnBlR1ZzVTNSeVpXRnRhVzVuSUhObGRIUnBibWR6SUdOb1lXNW5aUzVjYmlBcUwxeHVaWGh3YjNKMElHTnNZWE56SUZObGRIUnBibWR6UTJoaGJtZGxaRVYyWlc1MElHVjRkR1Z1WkhNZ1JYWmxiblFnZTF4dUlDQWdJSEpsWVdSdmJteDVJSFI1Y0dVNklDZHpaWFIwYVc1bmMwTm9ZVzVuWldRbk8xeHVJQ0FnSUhKbFlXUnZibXg1SUdSaGRHRTZJRk5sZEhScGJtZHpSR0YwWVR0Y2JpQWdJQ0JqYjI1emRISjFZM1J2Y2loa1lYUmhPaUJUWlhSMGFXNW5jME5vWVc1blpXUkZkbVZ1ZEZzblpHRjBZU2RkS1NCN1hHNGdJQ0FnSUNBZ0lITjFjR1Z5S0NkelpYUjBhVzVuYzBOb1lXNW5aV1FuS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVrWVhSaElEMGdaR0YwWVR0Y2JpQWdJQ0I5WEc1OVhHNWNiaThxS2x4dUlDb2dSWFpsYm5RZ1pXMXBkSFJsWkNCM2FHVnVJR0Z1SUZoU0lGTmxjM05wYjI0Z2MzUmhjblJ6WEc0Z0tpOWNibVY0Y0c5eWRDQmpiR0Z6Y3lCWWNsTmxjM05wYjI1VGRHRnlkR1ZrUlhabGJuUWdaWGgwWlc1a2N5QkZkbVZ1ZENCN1hHNGdJQ0FnY21WaFpHOXViSGtnZEhsd1pUb2dKM2h5VTJWemMybHZibE4wWVhKMFpXUW5PMXh1SUNBZ0lHTnZibk4wY25WamRHOXlLQ2tnZTF4dUlDQWdJQ0FnSUNCemRYQmxjaWduZUhKVFpYTnphVzl1VTNSaGNuUmxaQ2NwTzF4dUlDQWdJSDFjYm4xY2JseHVMeW9xWEc0Z0tpQkZkbVZ1ZENCbGJXbDBkR1ZrSUhkb1pXNGdZVzRnV0ZJZ1UyVnpjMmx2YmlCbGJtUnpYRzRnS2k5Y2JtVjRjRzl5ZENCamJHRnpjeUJZY2xObGMzTnBiMjVGYm1SbFpFVjJaVzUwSUdWNGRHVnVaSE1nUlhabGJuUWdlMXh1SUNBZ0lISmxZV1J2Ym14NUlIUjVjR1U2SUNkNGNsTmxjM05wYjI1RmJtUmxaQ2M3WEc0Z0lDQWdZMjl1YzNSeWRXTjBiM0lvS1NCN1hHNGdJQ0FnSUNBZ0lITjFjR1Z5S0NkNGNsTmxjM05wYjI1RmJtUmxaQ2NwTzF4dUlDQWdJSDFjYm4xY2JseHVaWGh3YjNKMElIUjVjR1VnV0hKR2NtRnRaVVJoZEdFZ1BTQjdYRzRnSUNBZ0x5b3FJRlJvWlNCbWNtRnRaU0IwYVcxbGMzUmhiWEFnSUNvdlhHNGdJQ0FnZEdsdFpUb2dSRTlOU0dsbmFGSmxjMVJwYldWVGRHRnRjRHRjYmlBZ0lDQXZLaW9nVkdobElGaFNSbkpoYldVZ0tpOWNiaUFnSUNCbWNtRnRaVG9nV0ZKR2NtRnRaVHRjYm4wN1hHNWNiaThxS2x4dUlDb2dSWFpsYm5RZ1pXMXBkSFJsWkNCM2FHVnVJR0Z1SUZoU0lFWnlZVzFsSUdseklHTnZiWEJzWlhSbFhHNGdLaTljYm1WNGNHOXlkQ0JqYkdGemN5Qllja1p5WVcxbFJYWmxiblFnWlhoMFpXNWtjeUJGZG1WdWRDQjdYRzRnSUNBZ2NtVmhaRzl1YkhrZ2RIbHdaVG9nSjNoeVJuSmhiV1VuTzF4dUlDQWdJSEpsWVdSdmJteDVJR1JoZEdFNklGaHlSbkpoYldWRVlYUmhYRzRnSUNBZ1kyOXVjM1J5ZFdOMGIzSW9aR0YwWVRvZ1dISkdjbUZ0WlVWMlpXNTBXeWRrWVhSaEoxMHBJSHRjYmlBZ0lDQWdJQ0FnYzNWd1pYSW9KM2h5Um5KaGJXVW5LVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWtZWFJoSUQwZ1pHRjBZVHRjYmlBZ0lDQjlYRzU5WEc1Y2JtVjRjRzl5ZENCMGVYQmxJRkJwZUdWc1UzUnlaV0Z0YVc1blJYWmxiblFnUFZ4dUlDQWdJSHdnUVdaclYyRnlibWx1WjBGamRHbDJZWFJsUlhabGJuUmNiaUFnSUNCOElFRm1hMWRoY201cGJtZFZjR1JoZEdWRmRtVnVkRnh1SUNBZ0lId2dRV1pyVjJGeWJtbHVaMFJsWVdOMGFYWmhkR1ZGZG1WdWRGeHVJQ0FnSUh3Z1FXWnJWR2x0WldSUGRYUkZkbVZ1ZEZ4dUlDQWdJSHdnVm1sa1pXOUZibU52WkdWeVFYWm5VVkJGZG1WdWRGeHVJQ0FnSUh3Z1YyVmlVblJqVTJSd1JYWmxiblJjYmlBZ0lDQjhJRmRsWWxKMFkwRjFkRzlEYjI1dVpXTjBSWFpsYm5SY2JpQWdJQ0I4SUZkbFlsSjBZME52Ym01bFkzUnBibWRGZG1WdWRGeHVJQ0FnSUh3Z1YyVmlVblJqUTI5dWJtVmpkR1ZrUlhabGJuUmNiaUFnSUNCOElGZGxZbEowWTBaaGFXeGxaRVYyWlc1MFhHNGdJQ0FnZkNCWFpXSlNkR05FYVhOamIyNXVaV04wWldSRmRtVnVkRnh1SUNBZ0lId2dSR0YwWVVOb1lXNXVaV3hQY0dWdVJYWmxiblJjYmlBZ0lDQjhJRVJoZEdGRGFHRnVibVZzUTJ4dmMyVkZkbVZ1ZEZ4dUlDQWdJSHdnUkdGMFlVTm9ZVzV1Wld4RmNuSnZja1YyWlc1MFhHNGdJQ0FnZkNCV2FXUmxiMGx1YVhScFlXeHBlbVZrUlhabGJuUmNiaUFnSUNCOElGTjBjbVZoYlV4dllXUnBibWRGZG1WdWRGeHVJQ0FnSUh3Z1UzUnlaV0Z0VUhKbFEyOXVibVZqZEVWMlpXNTBYRzRnSUNBZ2ZDQlRkSEpsWVcxU1pXTnZibTVsWTNSRmRtVnVkRnh1SUNBZ0lId2dVM1J5WldGdFVISmxSR2x6WTI5dWJtVmpkRVYyWlc1MFhHNGdJQ0FnZkNCUWJHRjVVM1J5WldGdFJYSnliM0pGZG1WdWRGeHVJQ0FnSUh3Z1VHeGhlVk4wY21WaGJVVjJaVzUwWEc0Z0lDQWdmQ0JRYkdGNVUzUnlaV0Z0VW1WcVpXTjBaV1JGZG1WdWRGeHVJQ0FnSUh3Z1RHOWhaRVp5WldWNlpVWnlZVzFsUlhabGJuUmNiaUFnSUNCOElFaHBaR1ZHY21WbGVtVkdjbUZ0WlVWMlpXNTBYRzRnSUNBZ2ZDQlRkR0YwYzFKbFkyVnBkbVZrUlhabGJuUmNiaUFnSUNCOElGTjBjbVZoYldWeVRHbHpkRTFsYzNOaFoyVkZkbVZ1ZEZ4dUlDQWdJSHdnVEdGMFpXNWplVlJsYzNSU1pYTjFiSFJGZG1WdWRGeHVJQ0FnSUh3Z1NXNXBkR2xoYkZObGRIUnBibWR6UlhabGJuUmNiaUFnSUNCOElGTmxkSFJwYm1kelEyaGhibWRsWkVWMlpXNTBYRzRnSUNBZ2ZDQlljbE5sYzNOcGIyNVRkR0Z5ZEdWa1JYWmxiblJjYmlBZ0lDQjhJRmh5VTJWemMybHZia1Z1WkdWa1JYWmxiblJjYmlBZ0lDQjhJRmh5Um5KaGJXVkZkbVZ1ZER0Y2JseHVaWGh3YjNKMElHTnNZWE56SUVWMlpXNTBSVzFwZEhSbGNpQmxlSFJsYm1SeklFVjJaVzUwVkdGeVoyVjBJSHRjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJFYVhOd1lYUmphQ0JoSUc1bGR5QmxkbVZ1ZEM1Y2JpQWdJQ0FnS2lCQWNHRnlZVzBnWlNCbGRtVnVkRnh1SUNBZ0lDQXFJRUJ5WlhSMWNtNXpYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2NIVmliR2xqSUdScGMzQmhkR05vUlhabGJuUW9aVG9nVUdsNFpXeFRkSEpsWVcxcGJtZEZkbVZ1ZENrNklHSnZiMnhsWVc0Z2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2MzVndaWEl1WkdsemNHRjBZMmhGZG1WdWRDaGxLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJTWldkcGMzUmxjaUJoYmlCbGRtVnVkQ0JvWVc1a2JHVnlMbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjBlWEJsSUdWMlpXNTBJRzVoYldWY2JpQWdJQ0FnS2lCQWNHRnlZVzBnYkdsemRHVnVaWElnWlhabGJuUWdhR0Z1Wkd4bGNpQm1kVzVqZEdsdmJseHVJQ0FnSUNBcUwxeHVJQ0FnSUhCMVlteHBZeUJoWkdSRmRtVnVkRXhwYzNSbGJtVnlQRnh1SUNBZ0lDQWdJQ0JVSUdWNGRHVnVaSE1nVUdsNFpXeFRkSEpsWVcxcGJtZEZkbVZ1ZEZzbmRIbHdaU2RkTEZ4dUlDQWdJQ0FnSUNCRklHVjRkR1Z1WkhNZ1VHbDRaV3hUZEhKbFlXMXBibWRGZG1WdWRDQW1JSHNnZEhsd1pUb2dWQ0I5WEc0Z0lDQWdQaWgwZVhCbE9pQlVMQ0JzYVhOMFpXNWxjam9nS0dVNklFVjJaVzUwSUNZZ1JTa2dQVDRnZG05cFpDa2dlMXh1SUNBZ0lDQWdJQ0J6ZFhCbGNpNWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtIUjVjR1VzSUd4cGMzUmxibVZ5S1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCU1pXMXZkbVVnWVc0Z1pYWmxiblFnYUdGdVpHeGxjaTVjYmlBZ0lDQWdLaUJBY0dGeVlXMGdkSGx3WlNCbGRtVnVkQ0J1WVcxbFhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUd4cGMzUmxibVZ5SUdWMlpXNTBJR2hoYm1Sc1pYSWdablZ1WTNScGIyNWNiaUFnSUNBZ0tpOWNiaUFnSUNCd2RXSnNhV01nY21WdGIzWmxSWFpsYm5STWFYTjBaVzVsY2p4Y2JpQWdJQ0FnSUNBZ1ZDQmxlSFJsYm1SeklGQnBlR1ZzVTNSeVpXRnRhVzVuUlhabGJuUmJKM1I1Y0dVblhTeGNiaUFnSUNBZ0lDQWdSU0JsZUhSbGJtUnpJRkJwZUdWc1UzUnlaV0Z0YVc1blJYWmxiblFnSmlCN0lIUjVjR1U2SUZRZ2ZWeHVJQ0FnSUQ0b2RIbHdaVG9nVkN3Z2JHbHpkR1Z1WlhJNklDaGxPaUJGZG1WdWRDQW1JRVVwSUQwK0lIWnZhV1FwSUh0Y2JpQWdJQ0FnSUNBZ2MzVndaWEl1Y21WdGIzWmxSWFpsYm5STWFYTjBaVzVsY2loMGVYQmxMQ0JzYVhOMFpXNWxjaWs3WEc0Z0lDQWdmVnh1ZlZ4dUlpd2lMeThnUTI5d2VYSnBaMmgwSUVWd2FXTWdSMkZ0WlhNc0lFbHVZeTRnUVd4c0lGSnBaMmgwY3lCU1pYTmxjblpsWkM1Y2JseHVaWGh3YjNKMElIUjVjR1VnVlc1eVpXZHBjM1JsY2taMWJtTjBhVzl1SUQwZ0tDa2dQVDRnZG05cFpEdGNibHh1Wlhod2IzSjBJR05zWVhOeklFVjJaVzUwVEdsemRHVnVaWEpVY21GamEyVnlJSHRjYmlBZ0lDQndjbWwyWVhSbElIVnVjbVZuYVhOMFpYSkRZV3hzWW1GamEzTTZJRlZ1Y21WbmFYTjBaWEpHZFc1amRHbHZibHRkTzF4dVhHNGdJQ0FnWTI5dWMzUnlkV04wYjNJb0tTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWRXNXlaV2RwYzNSbGNrTmhiR3hpWVdOcmN5QTlJRnRkTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVGa1pDQmhJRzVsZHlCallXeHNZbUZqYXlCMGFHRjBJR2x6SUdWNFpXTjFkR1ZrSUhkb1pXNGdkVzV5WldkcGMzUmxja0ZzYkNCcGN5QmpZV3hzWldRdVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUdOaGJHeGlZV05ySUZ4dUlDQWdJQ0FxTDF4dUlDQWdJR0ZrWkZWdWNtVm5hWE4wWlhKRFlXeHNZbUZqYXloallXeHNZbUZqYXpvZ1ZXNXlaV2RwYzNSbGNrWjFibU4wYVc5dUtTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWRXNXlaV2RwYzNSbGNrTmhiR3hpWVdOcmN5NXdkWE5vS0dOaGJHeGlZV05yS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCRmVHVmpkWFJsSUdGc2JDQmpZV3hzWW1GamEzTWdZVzVrSUdOc1pXRnlJSFJvWlNCc2FYTjBMbHh1SUNBZ0lDQXFMMXh1SUNBZ0lIVnVjbVZuYVhOMFpYSkJiR3dvS1NCN1hHNGdJQ0FnSUNBZ0lHWnZjaUFvWTI5dWMzUWdZMkZzYkdKaFkyc2diMllnZEdocGN5NTFibkpsWjJsemRHVnlRMkZzYkdKaFkydHpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpZV3hzWW1GamF5Z3BPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkVzV5WldkcGMzUmxja05oYkd4aVlXTnJjeUE5SUZ0ZE8xeHVJQ0FnSUgxY2JuMWNiaUlzSWk4dklFTnZjSGx5YVdkb2RDQkZjR2xqSUVkaGJXVnpMQ0JKYm1NdUlFRnNiQ0JTYVdkb2RITWdVbVZ6WlhKMlpXUXVYRzVjYm1sdGNHOXlkQ0I3SUV4dloyZGxjaUI5SUdaeWIyMGdKeTR1TDB4dloyZGxjaTlNYjJkblpYSW5PMXh1WEc0dktpcGNiaUFxSUZWMGFXeHBkSGtnWm5WdVkzUnBiMjRnWm05eUlIQnZjSFZzWVhSbElHWnBiR1VnYVc1bWIzSnRZWFJwYjI0Z1puSnZiU0JpZVhSbElHSjFabVpsY25NdVhHNGdLaTljYm1WNGNHOXlkQ0JqYkdGemN5QkdhV3hsVlhScGJDQjdYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dVSEp2WTJWemMyVnpJR0VnWm1sc1pYTWdaWGgwWlc1emFXOXVJSGRvWlc0Z2NtVmpaV2wyWldRZ2IzWmxjaUJrWVhSaElHTm9ZVzV1Wld4Y2JpQWdJQ0FnS2lCQWNHRnlZVzBnZG1sbGR5QXRJSFJvWlNCbWFXeGxJR1Y0ZEdWdWMybHZiaUJrWVhSaFhHNGdJQ0FnSUNvdlhHNGdJQ0FnYzNSaGRHbGpJSE5sZEVWNGRHVnVjMmx2YmtaeWIyMUNlWFJsY3loMmFXVjNPaUJWYVc1ME9FRnljbUY1TENCbWFXeGxPaUJHYVd4bFZHVnRjR3hoZEdVcElIdGNiaUFnSUNBZ0lDQWdMeThnVW1WelpYUWdabWxzWlNCcFppQjNaU0JuYjNRZ1lTQm1hV3hsSUcxbGMzTmhaMlVnWVc1a0lIZGxJR0Z5WlNCdWIzUWdYQ0p5WldObGFYWnBibWRjSWlCcGRDQjVaWFJjYmlBZ0lDQWdJQ0FnYVdZZ0tDRm1hV3hsTG5KbFkyVnBkbWx1WnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWm1sc1pTNXRhVzFsZEhsd1pTQTlJQ2NuTzF4dUlDQWdJQ0FnSUNBZ0lDQWdabWxzWlM1bGVIUmxibk5wYjI0Z1BTQW5KenRjYmlBZ0lDQWdJQ0FnSUNBZ0lHWnBiR1V1Y21WalpXbDJhVzVuSUQwZ2RISjFaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHWnBiR1V1ZG1Gc2FXUWdQU0JtWVd4elpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdacGJHVXVjMmw2WlNBOUlEQTdYRzRnSUNBZ0lDQWdJQ0FnSUNCbWFXeGxMbVJoZEdFZ1BTQmJYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHWnBiR1V1ZEdsdFpYTjBZVzF3VTNSaGNuUWdQU0J1WlhjZ1JHRjBaU2dwTG1kbGRGUnBiV1VvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJRXh2WjJkbGNpNU1iMmNvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVEc5bloyVnlMa2RsZEZOMFlXTnJWSEpoWTJVb0tTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5VbVZqWldsMlpXUWdabWx5YzNRZ1kyaDFibXNnYjJZZ1ptbHNaU2NzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTmx4dUlDQWdJQ0FnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lHTnZibk4wSUdWNGRHVnVjMmx2YmtGelUzUnlhVzVuSUQwZ2JtVjNJRlJsZUhSRVpXTnZaR1Z5S0NkMWRHWXRNVFluS1M1a1pXTnZaR1VvWEc0Z0lDQWdJQ0FnSUNBZ0lDQjJhV1YzTG5Oc2FXTmxLREVwWEc0Z0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lFeHZaMmRsY2k1TWIyY29URzluWjJWeUxrZGxkRk4wWVdOclZISmhZMlVvS1N3Z1pYaDBaVzV6YVc5dVFYTlRkSEpwYm1jc0lEWXBPMXh1SUNBZ0lDQWdJQ0JtYVd4bExtVjRkR1Z1YzJsdmJpQTlJR1Y0ZEdWdWMybHZia0Z6VTNSeWFXNW5PMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRkJ5YjJObGMzTmxjeUJoSUdacGJHVnpJRzFwYldVZ2RIbHdaU0IzYUdWdUlISmxZMlZwZG1Wa0lHOTJaWElnWkdGMFlTQmphR0Z1Ym1Wc1hHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUhacFpYY2dMU0IwYUdVZ1ptbHNaU0J0YVcxbElIUjVjR1VnWkdGMFlWeHVJQ0FnSUNBcUwxeHVJQ0FnSUhOMFlYUnBZeUJ6WlhSTmFXMWxWSGx3WlVaeWIyMUNlWFJsY3loMmFXVjNPaUJWYVc1ME9FRnljbUY1TENCbWFXeGxPaUJHYVd4bFZHVnRjR3hoZEdVcElIdGNiaUFnSUNBZ0lDQWdMeThnVW1WelpYUWdabWxzWlNCcFppQjNaU0JuYjNRZ1lTQm1hV3hsSUcxbGMzTmhaMlVnWVc1a0lIZGxJR0Z5WlNCdWIzUWdYQ0p5WldObGFYWnBibWRjSWlCcGRDQjVaWFJjYmlBZ0lDQWdJQ0FnYVdZZ0tDRm1hV3hsTG5KbFkyVnBkbWx1WnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWm1sc1pTNXRhVzFsZEhsd1pTQTlJQ2NuTzF4dUlDQWdJQ0FnSUNBZ0lDQWdabWxzWlM1bGVIUmxibk5wYjI0Z1BTQW5KenRjYmlBZ0lDQWdJQ0FnSUNBZ0lHWnBiR1V1Y21WalpXbDJhVzVuSUQwZ2RISjFaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHWnBiR1V1ZG1Gc2FXUWdQU0JtWVd4elpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdacGJHVXVjMmw2WlNBOUlEQTdYRzRnSUNBZ0lDQWdJQ0FnSUNCbWFXeGxMbVJoZEdFZ1BTQmJYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHWnBiR1V1ZEdsdFpYTjBZVzF3VTNSaGNuUWdQU0J1WlhjZ1JHRjBaU2dwTG1kbGRGUnBiV1VvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJRXh2WjJkbGNpNU1iMmNvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVEc5bloyVnlMa2RsZEZOMFlXTnJWSEpoWTJVb0tTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5VbVZqWldsMlpXUWdabWx5YzNRZ1kyaDFibXNnYjJZZ1ptbHNaU2NzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTmx4dUlDQWdJQ0FnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lHTnZibk4wSUcxcGJXVkJjMU4wY21sdVp5QTlJRzVsZHlCVVpYaDBSR1ZqYjJSbGNpZ25kWFJtTFRFMkp5a3VaR1ZqYjJSbEtIWnBaWGN1YzJ4cFkyVW9NU2twTzF4dUlDQWdJQ0FnSUNCTWIyZG5aWEl1VEc5bktFeHZaMmRsY2k1SFpYUlRkR0ZqYTFSeVlXTmxLQ2tzSUcxcGJXVkJjMU4wY21sdVp5d2dOaWs3WEc0Z0lDQWdJQ0FnSUdacGJHVXViV2x0WlhSNWNHVWdQU0J0YVcxbFFYTlRkSEpwYm1jN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1VISnZZMlZ6YzJWeklHRWdabWxzWlhNZ1kyOXVkR1Z1ZEhNZ2QyaGxiaUJ5WldObGFYWmxaQ0J2ZG1WeUlHUmhkR0VnWTJoaGJtNWxiRnh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjJhV1YzSUMwZ2RHaGxJR1pwYkdVZ1kyOXVkR1Z1ZEhNZ1pHRjBZVnh1SUNBZ0lDQXFMMXh1SUNBZ0lITjBZWFJwWXlCelpYUkRiMjUwWlc1MGMwWnliMjFDZVhSbGN5aDJhV1YzT2lCVmFXNTBPRUZ5Y21GNUxDQm1hV3hsT2lCR2FXeGxWR1Z0Y0d4aGRHVXBJSHRjYmlBZ0lDQWdJQ0FnTHk4Z1NXWWdkMlVnYUdGMlpXNG5kQ0J5WldObGFYWmxaQ0IwYUdVZ2FXNXBkR2xoYkNCelpYUjFjQ0JwYm5OMGNuVmpkR2x2Ym5Nc0lISmxkSFZ5Ymx4dUlDQWdJQ0FnSUNCcFppQW9JV1pwYkdVdWNtVmpaV2wyYVc1bktTQnlaWFIxY200N1hHNWNiaUFnSUNBZ0lDQWdMeThnUlhoMGNtRmpkQ0IwYUdVZ2RHOTBZV3dnYzJsNlpTQnZaaUIwYUdVZ1ptbHNaU0FvWVdOeWIzTnpJR0ZzYkNCamFIVnVhM01wWEc0Z0lDQWdJQ0FnSUdacGJHVXVjMmw2WlNBOUlFMWhkR2d1WTJWcGJDaGNiaUFnSUNBZ0lDQWdJQ0FnSUc1bGR5QkVZWFJoVm1sbGR5aDJhV1YzTG5Oc2FXTmxLREVzSURVcExtSjFabVpsY2lrdVoyVjBTVzUwTXpJb01Dd2dkSEoxWlNrZ0wxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lERTJNemM1SUM4cUlGUm9aU0J0WVhocGJYVnRJRzUxYldKbGNpQnZaaUJ3WVhsc2IyRmtJR0pwZEhNZ2NHVnlJRzFsYzNOaFoyVXFMMXh1SUNBZ0lDQWdJQ0FwTzF4dVhHNGdJQ0FnSUNBZ0lDOHZJRWRsZENCMGFHVWdabWxzWlNCd1lYSjBJRzltSUhSb1pTQndZWGxzYjJGa1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUdacGJHVkNlWFJsY3lBOUlIWnBaWGN1YzJ4cFkyVW9NU0FySURRcE8xeHVYRzRnSUNBZ0lDQWdJQzh2SUVGd2NHVnVaQ0IwYnlCbGVHbHpkR2x1WnlCa1lYUmhJSFJvWVhRZ2FHOXNaSE1nZEdobElHWnBiR1ZjYmlBZ0lDQWdJQ0FnWm1sc1pTNWtZWFJoTG5CMWMyZ29abWxzWlVKNWRHVnpLVHRjYmx4dUlDQWdJQ0FnSUNBdkx5QlZibU52YlcxbGJuUWdabTl5SUdSbFluVm5YRzRnSUNBZ0lDQWdJRXh2WjJkbGNpNU1iMmNvWEc0Z0lDQWdJQ0FnSUNBZ0lDQk1iMmRuWlhJdVIyVjBVM1JoWTJ0VWNtRmpaU2dwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdZRkpsWTJWcGRtVmtJR1pwYkdVZ1kyaDFibXM2SUNSN1ptbHNaUzVrWVhSaExteGxibWQwYUgwdkpIdG1hV3hsTG5OcGVtVjlZQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lEWmNiaUFnSUNBZ0lDQWdLVHRjYmx4dUlDQWdJQ0FnSUNCcFppQW9abWxzWlM1a1lYUmhMbXhsYm1kMGFDQTlQVDBnWm1sc1pTNXphWHBsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JtYVd4bExuSmxZMlZwZG1sdVp5QTlJR1poYkhObE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWm1sc1pTNTJZV3hwWkNBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQk1iMmRuWlhJdVRHOW5LRXh2WjJkbGNpNUhaWFJUZEdGamExUnlZV05sS0Nrc0lDZFNaV05sYVhabFpDQmpiMjF3YkdWMFpTQm1hV3hsSnl3Z05pazdYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0IwY21GdWMyWmxja1IxY21GMGFXOXVJRDBnYm1WM0lFUmhkR1VvS1M1blpYUlVhVzFsS0NrZ0xTQm1hV3hsTG5ScGJXVnpkR0Z0Y0ZOMFlYSjBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnZEhKaGJuTm1aWEpDYVhSeVlYUmxJRDBnVFdGMGFDNXliM1Z1WkNoY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBb1ptbHNaUzV6YVhwbElDb2dNVFlnS2lBeE1ESTBLU0F2SUhSeVlXNXpabVZ5UkhWeVlYUnBiMjVjYmlBZ0lDQWdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCTWIyZG5aWEl1VEc5bktGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lFeHZaMmRsY2k1SFpYUlRkR0ZqYTFSeVlXTmxLQ2tzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWUVGMlpYSmhaMlVnZEhKaGJuTm1aWElnWW1sMGNtRjBaVG9nSkh0MGNtRnVjMlpsY2tKcGRISmhkR1Y5YTJJdmN5QnZkbVZ5SUNSN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJ5WVc1elptVnlSSFZ5WVhScGIyNGdMeUF4TURBd1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTQnpaV052Ym1SellDeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQTJYRzRnSUNBZ0lDQWdJQ0FnSUNBcE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QkdhV3hsSUhKbFkyOXVjM1J5ZFdOMGFXOXVYRzRnSUNBZ0lDQWdJQ0FnSUNBdktpcGNiaUFnSUNBZ0lDQWdJQ0FnSUNBcUlFVjRZVzF3YkdVZ1kyOWtaU0IwYnlCeVpXTnZibk4wY25WamRDQjBhR1VnWm1sc1pWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FxSUZSb2FYTWdZMjlrWlNCeVpXTnZibk4wY25WamRITWdkR2hsSUhKbFkyVnBkbVZrSUdSaGRHRWdhVzUwYnlCMGFHVWdiM0pwWjJsdVlXd2dabWxzWlNCaVlYTmxaQ0J2YmlCMGFHVWdiV2x0WlNCMGVYQmxJR0Z1WkNCbGVIUmxibk5wYjI0Z2NISnZkbWxrWldRZ1lXNWtJSFJvWlc0Z1pHOTNibXh2WVdSeklIUm9aU0J5WldOdmJuTjBjblZqZEdWa0lHWnBiR1ZjYmlBZ0lDQWdJQ0FnSUNBZ0lDQXFMMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnY21WalpXbDJaV1FnUFNCdVpYY2dRbXh2WWlobWFXeGxMbVJoZEdFc0lIc2dkSGx3WlRvZ1ptbHNaUzV0YVcxbGRIbHdaU0I5S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElHRWdQU0JrYjJOMWJXVnVkQzVqY21WaGRHVkZiR1Z0Wlc1MEtDZGhKeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmhMbk5sZEVGMGRISnBZblYwWlNnbmFISmxaaWNzSUZWU1RDNWpjbVZoZEdWUFltcGxZM1JWVWt3b2NtVmpaV2wyWldRcEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdFdWMyVjBRWFIwY21saWRYUmxLQ2RrYjNkdWJHOWhaQ2NzSUdCMGNtRnVjMlpsY2k0a2UyWnBiR1V1WlhoMFpXNXphVzl1ZldBcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWkc5amRXMWxiblF1WW05a2VTNWhjSEJsYm1Rb1lTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QnBaaUI1YjNVZ1lYSmxJSE52SUdsdVkyeHBibVZrSUhSdklHMWhhMlVnYVhRZ1lYVjBieTFrYjNkdWJHOWhaQ3dnWkc4Z2MyOXRaWFJvYVc1bklHeHBhMlU2SUdFdVkyeHBZMnNvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR0V1Y21WdGIzWmxLQ2s3WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb1ptbHNaUzVrWVhSaExteGxibWQwYUNBK0lHWnBiR1V1YzJsNlpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1ptbHNaUzV5WldObGFYWnBibWNnUFNCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lFeHZaMmRsY2k1RmNuSnZjaWhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JNYjJkblpYSXVSMlYwVTNSaFkydFVjbUZqWlNncExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHQlNaV05sYVhabFpDQmlhV2RuWlhJZ1ptbHNaU0IwYUdGdUlHRmtkbVZ5ZEdselpXUTZJQ1I3Wm1sc1pTNWtZWFJoTG14bGJtZDBhSDB2Skh0bWFXeGxMbk5wZW1WOVlGeHVJQ0FnSUNBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JuMWNibHh1THlvcVhHNGdLaUJCSUdOc1lYTnpJSFJvWVhRZ2NtVndjbVZ6Wlc1MGN5QmhJSFJsYlhCc1lYUmxJR1p2Y2lCaElHUnZkMjVzYjJGa1pXUWdabWxzWlZ4dUlDb3ZYRzVsZUhCdmNuUWdZMnhoYzNNZ1JtbHNaVlJsYlhCc1lYUmxJSHRjYmlBZ0lDQnRhVzFsZEhsd1pTQTlJQ2NuTzF4dUlDQWdJR1Y0ZEdWdWMybHZiaUE5SUNjbk8xeHVJQ0FnSUhKbFkyVnBkbWx1WnlBOUlHWmhiSE5sTzF4dUlDQWdJSE5wZW1VZ1BTQXdPMXh1SUNBZ0lHUmhkR0U2SUVGeWNtRjVQRlZwYm5RNFFYSnlZWGsrSUQwZ1cxMDdYRzRnSUNBZ2RtRnNhV1FnUFNCbVlXeHpaVHRjYmlBZ0lDQjBhVzFsYzNSaGJYQlRkR0Z5ZERvZ2JuVnRZbVZ5TzF4dWZWeHVJaXdpTHk4Z1EyOXdlWEpwWjJoMElFVndhV01nUjJGdFpYTXNJRWx1WXk0Z1FXeHNJRkpwWjJoMGN5QlNaWE5sY25abFpDNWNibHh1Wlhod2IzSjBJR05zWVhOeklGZGxZa2RNVlhScGJITWdlMXh1SUNBZ0lITjBZWFJwWXlCMlpYSjBaWGhUYUdGa1pYSW9LVG9nYzNSeWFXNW5JSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR0JjYmx4MFhIUmhkSFJ5YVdKMWRHVWdkbVZqTWlCaFgzQnZjMmwwYVc5dU8xeHVYSFJjZEdGMGRISnBZblYwWlNCMlpXTXlJR0ZmZEdWNFEyOXZjbVE3WEc1Y2JseDBYSFF2THlCcGJuQjFkRnh1WEhSY2RIVnVhV1p2Y20wZ2RtVmpNaUIxWDNKbGMyOXNkWFJwYjI0N1hHNWNkRngwZFc1cFptOXliU0IyWldNMElIVmZiMlptYzJWME8xeHVYRzVjZEZ4MEx5OWNibHgwWEhSMllYSjVhVzVuSUhabFl6SWdkbDkwWlhoRGIyOXlaRHRjYmx4dVhIUmNkSFp2YVdRZ2JXRnBiaWdwSUh0Y2JseDBYSFFnSUNBdkx5QmpiMjUyWlhKMElIUm9aU0J5WldOMFlXNW5iR1VnWm5KdmJTQndhWGhsYkhNZ2RHOGdNQzR3SUhSdklERXVNRnh1WEhSY2RDQWdJSFpsWXpJZ2VtVnliMVJ2VDI1bElEMGdZVjl3YjNOcGRHbHZiaUF2SUhWZmNtVnpiMngxZEdsdmJqdGNibHh1WEhSY2RDQWdJQzh2SUdOdmJuWmxjblFnWm5KdmJTQXdMVDR4SUhSdklEQXRQakpjYmx4MFhIUWdJQ0IyWldNeUlIcGxjbTlVYjFSM2J5QTlJSHBsY205VWIwOXVaU0FxSURJdU1EdGNibHh1WEhSY2RDQWdJQzh2SUdOdmJuWmxjblFnWm5KdmJTQXdMVDR5SUhSdklDMHhMVDRyTVNBb1kyeHBjSE53WVdObEtWeHVYSFJjZENBZ0lIWmxZeklnWTJ4cGNGTndZV05sSUQwZ2VtVnliMVJ2VkhkdklDMGdNUzR3TzF4dVhHNWNkRngwSUNBZ1oyeGZVRzl6YVhScGIyNGdQU0IyWldNMEtHTnNhWEJUY0dGalpTQXFJSFpsWXpJb01Td2dMVEVwTENBd0xDQXhLVHRjYmx4MFhIUWdJQ0F2THlCd1lYTnpJSFJvWlNCMFpYaERiMjl5WkNCMGJ5QjBhR1VnWm5KaFoyMWxiblFnYzJoaFpHVnlYRzVjZEZ4MElDQWdMeThnVkdobElFZFFWU0IzYVd4c0lHbHVkR1Z5Y0c5c1lYUmxJSFJvYVhNZ2RtRnNkV1VnWW1WMGQyVmxiaUJ3YjJsdWRITXVYRzVjZEZ4MElDQWdkbDkwWlhoRGIyOXlaQ0E5SUNoaFgzUmxlRU52YjNKa0lDb2dkVjl2Wm1aelpYUXVlSGtwSUNzZ2RWOXZabVp6WlhRdWVuYzdYRzVjZEZ4MGZWeHVYSFJjZEdBN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYzNSaGRHbGpJR1p5WVdkdFpXNTBVMmhoWkdWeUtDazZJSE4wY21sdVp5QjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmdYRzVjZEZ4MGNISmxZMmx6YVc5dUlHMWxaR2wxYlhBZ1pteHZZWFE3WEc1Y2JseDBYSFF2THlCdmRYSWdkR1Y0ZEhWeVpWeHVYSFJjZEhWdWFXWnZjbTBnYzJGdGNHeGxjakpFSUhWZmFXMWhaMlU3WEc1Y2JseDBYSFF2THlCMGFHVWdkR1Y0UTI5dmNtUnpJSEJoYzNObFpDQnBiaUJtY205dElIUm9aU0IyWlhKMFpYZ2djMmhoWkdWeUxseHVYSFJjZEhaaGNubHBibWNnZG1Wak1pQjJYM1JsZUVOdmIzSmtPMXh1WEc1Y2RGeDBkbTlwWkNCdFlXbHVLQ2tnZTF4dVhIUmNkQ0FnSUdkc1gwWnlZV2REYjJ4dmNpQTlJSFJsZUhSMWNtVXlSQ2gxWDJsdFlXZGxMQ0IyWDNSbGVFTnZiM0prS1R0Y2JseDBYSFI5WEc1Y2RGeDBZRHRjYmlBZ0lDQjlYRzU5WEc0aUxDSXZMeUJEYjNCNWNtbG5hSFFnUlhCcFl5QkhZVzFsY3l3Z1NXNWpMaUJCYkd3Z1VtbG5hSFJ6SUZKbGMyVnlkbVZrTGx4dVhHNWxlSEJ2Y25RZ1kyeGhjM01nVjJWaVdGSlZkR2xzY3lCN1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1JHVmxjQ0JqYjNCcFpYTWdZU0JuWVcxbGNHRmtKM01nZG1Gc2RXVnpJR0o1SUdacGNuTjBJR052Ym5abGNuUnBibWNnYVhRZ2RHOGdZU0JLVTA5T0lHOWlhbVZqZENCaGJtUWdkR2hsYmlCaVlXTnJJSFJ2SUdFZ1oyRnRaWEJoWkZ4dUlDQWdJQ0FxWEc0Z0lDQWdJQ29nUUhCaGNtRnRJR2RoYldWd1lXUWdkR2hsSUc5eWFXZHBibUZzSUdkaGJXVndZV1JjYmlBZ0lDQWdLaUJBY21WMGRYSnVjeUJoSUc1bGR5Qm5ZVzFsY0dGa0lHOWlhbVZqZEN3Z2NHOXdkV3hoZEdWa0lIZHBkR2dnZEdobElHOXlhV2RwYm1Gc0lHZGhiV1Z3WVdSeklIWmhiSFZsYzF4dUlDQWdJQ0FxTDF4dUlDQWdJSE4wWVhScFl5QmtaV1Z3UTI5d2VVZGhiV1Z3WVdRb1oyRnRaWEJoWkRvZ1IyRnRaWEJoWkNrNklFZGhiV1Z3WVdRZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1NsTlBUaTV3WVhKelpTaGNiaUFnSUNBZ0lDQWdJQ0FnSUVwVFQwNHVjM1J5YVc1bmFXWjVLSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpZFhSMGIyNXpPaUJuWVcxbGNHRmtMbUoxZEhSdmJuTXViV0Z3S0NoaUtTQTlQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCS1UwOU9MbkJoY25ObEtGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1NsTlBUaTV6ZEhKcGJtZHBabmtvZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQnlaWE56WldRNklHSXVjSEpsYzNObFpDeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYjNWamFHVmtPaUJpTG5SdmRXTm9aV1JjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXBMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0Y0WlhNNklHZGhiV1Z3WVdRdVlYaGxjMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTbGNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQjlYRzU5WEc0aUxDSXZMeUJEYjNCNWNtbG5hSFFnUlhCcFl5QkhZVzFsY3l3Z1NXNWpMaUJCYkd3Z1VtbG5hSFJ6SUZKbGMyVnlkbVZrTGx4dVhHNXBiWEJ2Y25RZ2V5Qk5iM1Z6WlVOdmJuUnliMnhzWlhJZ2ZTQm1jbTl0SUNjdUxpOUpibkIxZEhNdlRXOTFjMlZEYjI1MGNtOXNiR1Z5Snp0Y2JtbHRjRzl5ZENCN0lFeHZaMmRsY2lCOUlHWnliMjBnSnk0dUwweHZaMmRsY2k5TWIyZG5aWEluTzF4dWFXMXdiM0owSUhzZ1ZtbGtaVzlRYkdGNVpYSWdmU0JtY205dElDY3VMMVpwWkdWdlVHeGhlV1Z5Snp0Y2JseHVMeW9xWEc0Z0tpQldhV1JsYnlCUWJHRjVaWElnUTI5dWRISnZiR3hsY2lCb1lXNWtiR1Z6SUhSb1pTQmpjbVZoZEdsdmJpQnZaaUIwYUdVZ2RtbGtaVzhnU0ZSTlRDQmxiR1Z0Wlc1MElHRnVaQ0JoYkd3Z2FHRnVaR3hsY25OY2JpQXFMMXh1Wlhod2IzSjBJR05zWVhOeklGTjBjbVZoYlVOdmJuUnliMnhzWlhJZ2UxeHVJQ0FnSUhacFpHVnZSV3hsYldWdWRGQnliM1pwWkdWeU9pQldhV1JsYjFCc1lYbGxjanRjYmlBZ0lDQmhkV1JwYjBWc1pXMWxiblE2SUVoVVRVeEJkV1JwYjBWc1pXMWxiblE3WEc0Z0lDQWdiVzkxYzJWRGIyNTBjbTlzYkdWeU9pQk5iM1Z6WlVOdmJuUnliMnhzWlhJN1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2RtbGtaVzlGYkdWdFpXNTBVSEp2ZG1sa1pYSWdWbWxrWlc4Z1VHeGhlV1Z5SUdsdWMzUmhibU5sWEc0Z0lDQWdJQ292WEc0Z0lDQWdZMjl1YzNSeWRXTjBiM0lvZG1sa1pXOUZiR1Z0Wlc1MFVISnZkbWxrWlhJNklGWnBaR1Z2VUd4aGVXVnlLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkbWxrWlc5RmJHVnRaVzUwVUhKdmRtbGtaWElnUFNCMmFXUmxiMFZzWlcxbGJuUlFjbTkyYVdSbGNqdGNiaUFnSUNBZ0lDQWdkR2hwY3k1aGRXUnBiMFZzWlcxbGJuUWdQU0JrYjJOMWJXVnVkQzVqY21WaGRHVkZiR1Z0Wlc1MEtDZEJkV1JwYnljcElHRnpJRWhVVFV4QmRXUnBiMFZzWlcxbGJuUTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dTR0Z1Wkd4bGN5QjNhR1Z1SUhSb1pTQlFaV1Z5SUdOdmJtNWxZM1JwYjI0Z2FHRnpJR0VnZEhKaFkyc2daWFpsYm5SY2JpQWdJQ0FnS2lCQWNHRnlZVzBnY25SalZISmhZMnRGZG1WdWRDQXRJRkpVUXlCVWNtRmpheUJGZG1WdWRGeHVJQ0FnSUNBcUwxeHVJQ0FnSUdoaGJtUnNaVTl1VkhKaFkyc29jblJqVkhKaFkydEZkbVZ1ZERvZ1VsUkRWSEpoWTJ0RmRtVnVkQ2tnZTF4dUlDQWdJQ0FnSUNCTWIyZG5aWEl1VEc5bktGeHVJQ0FnSUNBZ0lDQWdJQ0FnVEc5bloyVnlMa2RsZEZOMFlXTnJWSEpoWTJVb0tTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNkb1lXNWtiR1ZQYmxSeVlXTnJJQ2NnS3lCS1UwOU9Mbk4wY21sdVoybG1lU2h5ZEdOVWNtRmphMFYyWlc1MExuTjBjbVZoYlhNcExGeHVJQ0FnSUNBZ0lDQWdJQ0FnTmx4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCMmFXUmxiMFZzWlcxbGJuUWdQU0IwYUdsekxuWnBaR1Z2Uld4bGJXVnVkRkJ5YjNacFpHVnlMbWRsZEZacFpHVnZSV3hsYldWdWRDZ3BPMXh1WEc0Z0lDQWdJQ0FnSUdsbUlDaHlkR05VY21GamEwVjJaVzUwTG5SeVlXTnJLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQk1iMmRuWlhJdVRHOW5LRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRXh2WjJkbGNpNUhaWFJUZEdGamExUnlZV05sS0Nrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0owZHZkQ0IwY21GamF5QXRJQ2NnSzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlkR05VY21GamEwVjJaVzUwTG5SeVlXTnJMbXRwYm1RZ0sxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuSUdsa1BTY2dLMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeWRHTlVjbUZqYTBWMlpXNTBMblJ5WVdOckxtbGtJQ3RjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0p5QnlaV0ZrZVZOMFlYUmxQU2NnSzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlkR05VY21GamEwVjJaVzUwTG5SeVlXTnJMbkpsWVdSNVUzUmhkR1VzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTmx4dUlDQWdJQ0FnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2h5ZEdOVWNtRmphMFYyWlc1MExuUnlZV05yTG10cGJtUWdQVDBnSjJGMVpHbHZKeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1RGNtVmhkR1ZCZFdScGIxUnlZV05yS0hKMFkxUnlZV05yUlhabGJuUXVjM1J5WldGdGMxc3dYU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppQW9YRzRnSUNBZ0lDQWdJQ0FnSUNCeWRHTlVjbUZqYTBWMlpXNTBMblJ5WVdOckxtdHBibVFnUFQwZ0ozWnBaR1Z2SnlBbUpseHVJQ0FnSUNBZ0lDQWdJQ0FnZG1sa1pXOUZiR1Z0Wlc1MExuTnlZMDlpYW1WamRDQWhQVDBnY25SalZISmhZMnRGZG1WdWRDNXpkSEpsWVcxeld6QmRYRzRnSUNBZ0lDQWdJQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkbWxrWlc5RmJHVnRaVzUwTG5OeVkwOWlhbVZqZENBOUlISjBZMVJ5WVdOclJYWmxiblF1YzNSeVpXRnRjMXN3WFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJRXh2WjJkbGNpNU1iMmNvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVEc5bloyVnlMa2RsZEZOMFlXTnJWSEpoWTJVb0tTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5VMlYwSUhacFpHVnZJSE52ZFhKalpTQm1jbTl0SUhacFpHVnZJSFJ5WVdOcklHOXVkSEpoWTJzdUoxeHVJQ0FnSUNBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRU55WldGMFpYTWdkR2hsSUdGMVpHbHZJR1JsZG1salpTQjNhR1Z1SUhKbFkyVnBkbWx1WnlCaGJpQlNWRU5VY21GamEwVjJaVzUwSUhkcGRHZ2dkR2hsSUd0cGJtUWdiMllnWENKaGRXUnBiMXdpWEc0Z0lDQWdJQ29nUUhCaGNtRnRJR0YxWkdsdlRXVmthV0ZUZEhKbFlXMGdMU0JCZFdScGJ5Qk5aV1JwWVNCemRISmxZVzBnZEhKaFkydGNiaUFnSUNBZ0tpOWNiaUFnSUNCRGNtVmhkR1ZCZFdScGIxUnlZV05yS0dGMVpHbHZUV1ZrYVdGVGRISmxZVzA2SUUxbFpHbGhVM1J5WldGdEtTQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElIWnBaR1Z2Uld4bGJXVnVkQ0E5SUhSb2FYTXVkbWxrWlc5RmJHVnRaVzUwVUhKdmRtbGtaWEl1WjJWMFZtbGtaVzlGYkdWdFpXNTBLQ2s3WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdaRzhnYm05MGFHbHVaeUIwYUdVZ2RtbGtaVzhnYUdGeklIUm9aU0J6WVcxbElHMWxaR2xoSUhOMGNtVmhiU0JoY3lCMGFHVWdZWFZrYVc4Z2RISmhZMnNnZDJVZ2FHRjJaU0JvWlhKbElDaDBhR1Y1SUdGeVpTQnNhVzVyWldRcFhHNGdJQ0FnSUNBZ0lHbG1JQ2gyYVdSbGIwVnNaVzFsYm5RdWMzSmpUMkpxWldOMElEMDlJR0YxWkdsdlRXVmthV0ZUZEhKbFlXMHBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQXZMeUIyYVdSbGJ5QmxiR1Z0Wlc1MElHaGhjeUJ6YjIxbElHOTBhR1Z5SUcxbFpHbGhJSE4wY21WaGJTQjBhR0YwSUdseklHNXZkQ0JoYzNOdlkybGhkR1ZrSUhkcGRHZ2dkR2hwY3lCaGRXUnBieUIwY21GamExeHVJQ0FnSUNBZ0lDQmxiSE5sSUdsbUlDaGNiaUFnSUNBZ0lDQWdJQ0FnSUhacFpHVnZSV3hsYldWdWRDNXpjbU5QWW1wbFkzUWdKaVpjYmlBZ0lDQWdJQ0FnSUNBZ0lIWnBaR1Z2Uld4bGJXVnVkQzV6Y21OUFltcGxZM1FnSVQwOUlHRjFaR2x2VFdWa2FXRlRkSEpsWVcxY2JpQWdJQ0FnSUNBZ0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QmpjbVZoZEdVZ1lTQnVaWGNnWVhWa2FXOGdaV3hsYldWdWRGeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWhkV1JwYjBWc1pXMWxiblF1YzNKalQySnFaV04wSUQwZ1lYVmthVzlOWldScFlWTjBjbVZoYlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJRXh2WjJkbGNpNU1iMmNvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVEc5bloyVnlMa2RsZEZOMFlXTnJWSEpoWTJVb0tTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5RM0psWVhSbFpDQnVaWGNnWVhWa2FXOGdaV3hsYldWdWRDQjBieUJ3YkdGNUlITmxjR0Z5WVhSbElHRjFaR2x2SUhOMGNtVmhiUzRuWEc0Z0lDQWdJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1ZlZ4dUlpd2lMeThnUTI5d2VYSnBaMmgwSUVWd2FXTWdSMkZ0WlhNc0lFbHVZeTRnUVd4c0lGSnBaMmgwY3lCU1pYTmxjblpsWkM1Y2JseHVhVzF3YjNKMElIc2dRMjl1Wm1sbkxDQkdiR0ZuY3lCOUlHWnliMjBnSnk0dUwwTnZibVpwWnk5RGIyNW1hV2NuTzF4dWFXMXdiM0owSUhzZ1RHOW5aMlZ5SUgwZ1puSnZiU0FuTGk0dlRHOW5aMlZ5TDB4dloyZGxjaWM3WEc1Y2JpOHFLbHh1SUNvZ1JYaDBjbUVnZEhsd1pYTWdabTl5SUhSb1pTQklWRTFNUld4bGJXVnVkRnh1SUNvdlhHNWtaV05zWVhKbElHZHNiMkpoYkNCN1hHNGdJQ0FnYVc1MFpYSm1ZV05sSUVoVVRVeEZiR1Z0Wlc1MElIdGNiaUFnSUNBZ0lDQWdiVzk2VW1WeGRXVnpkRkJ2YVc1MFpYSk1iMk5yUHlncE9pQjJiMmxrTzF4dUlDQWdJSDFjYm4xY2JseHVMeW9xWEc0Z0tpQlVhR1VnZG1sa1pXOGdjR3hoZVdWeUlHaDBiV3dnWld4bGJXVnVkRnh1SUNvdlhHNWxlSEJ2Y25RZ1kyeGhjM01nVm1sa1pXOVFiR0Y1WlhJZ2UxeHVJQ0FnSUhCeWFYWmhkR1VnWTI5dVptbG5PaUJEYjI1bWFXYzdYRzRnSUNBZ2NISnBkbUYwWlNCMmFXUmxiMFZzWlcxbGJuUTZJRWhVVFV4V2FXUmxiMFZzWlcxbGJuUTdYRzRnSUNBZ2NISnBkbUYwWlNCdmNtbGxiblJoZEdsdmJrTm9ZVzVuWlZScGJXVnZkWFE2SUc1MWJXSmxjanRjYmlBZ0lDQndjbWwyWVhSbElHeGhjM1JVYVcxbFVtVnphWHBsWkNBOUlHNWxkeUJFWVhSbEtDa3VaMlYwVkdsdFpTZ3BPMXh1WEc0Z0lDQWdiMjVOWVhSamFGWnBaWGR3YjNKMFVtVnpiMngxZEdsdmJrTmhiR3hpWVdOck9pQW9kMmxrZEdnNklHNTFiV0psY2l3Z2FHVnBaMmgwT2lCdWRXMWlaWElwSUQwK0lIWnZhV1E3WEc0Z0lDQWdiMjVTWlhOcGVtVlFiR0Y1WlhKRFlXeHNZbUZqYXpvZ0tDa2dQVDRnZG05cFpEdGNiaUFnSUNCeVpYTnBlbVZVYVcxbGIzVjBTR0Z1Wkd4bE9pQnVkVzFpWlhJN1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2RtbGtaVzlGYkdWdFpXNTBVR0Z5Wlc1MElIUm9aU0JvZEcxc0lHUnBkaUIwYUdVZ2RHaGxJSFpwWkdWdklIQnNZWGxsY2lCM2FXeHNJR0psSUdsdWFtVmpkR1ZrSUdsdWRHOWNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ1kyOXVabWxuSUhSb1pTQmhjSEJzYVdOaGRHbHZibk1nWTI5dVptbG5kWEpoZEdsdmJpNGdWMlVuY21VZ2FXNTBaWEpsYzNSbFpDQnBiaUIwYUdVZ2MzUmhjblJXYVdSbGIwMTFkR1ZrSUdac1lXZGNiaUFnSUNBZ0tpOWNiaUFnSUNCamIyNXpkSEoxWTNSdmNpaDJhV1JsYjBWc1pXMWxiblJRWVhKbGJuUTZJRWhVVFV4RmJHVnRaVzUwTENCamIyNW1hV2M2SUVOdmJtWnBaeWtnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMblpwWkdWdlJXeGxiV1Z1ZENBOUlHUnZZM1Z0Wlc1MExtTnlaV0YwWlVWc1pXMWxiblFvSjNacFpHVnZKeWs3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZMjl1Wm1sbklEMGdZMjl1Wm1sbk8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5acFpHVnZSV3hsYldWdWRDNXBaQ0E5SUNkemRISmxZVzFwYm1kV2FXUmxieWM3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkbWxrWlc5RmJHVnRaVzUwTG1ScGMyRmliR1ZRYVdOMGRYSmxTVzVRYVdOMGRYSmxJRDBnZEhKMVpUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1MmFXUmxiMFZzWlcxbGJuUXVjR3hoZVhOSmJteHBibVVnUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuWnBaR1Z2Uld4bGJXVnVkQzV6ZEhsc1pTNTNhV1IwYUNBOUlDY3hNREFsSnp0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTUyYVdSbGIwVnNaVzFsYm5RdWMzUjViR1V1YUdWcFoyaDBJRDBnSnpFd01DVW5PMXh1SUNBZ0lDQWdJQ0IwYUdsekxuWnBaR1Z2Uld4bGJXVnVkQzV6ZEhsc1pTNXdiM05wZEdsdmJpQTlJQ2RoWW5OdmJIVjBaU2M3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkbWxrWlc5RmJHVnRaVzUwTG5OMGVXeGxMbkJ2YVc1MFpYSkZkbVZ1ZEhNZ1BTQW5ZV3hzSnp0Y2JpQWdJQ0FnSUNBZ2RtbGtaVzlGYkdWdFpXNTBVR0Z5Wlc1MExtRndjR1Z1WkVOb2FXeGtLSFJvYVhNdWRtbGtaVzlGYkdWdFpXNTBLVHRjYmx4dUlDQWdJQ0FnSUNCMGFHbHpMbTl1VW1WemFYcGxVR3hoZVdWeVEyRnNiR0poWTJzZ1BTQW9LU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbXh2WnloY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBblVtVnpiMngxZEdsdmJpQmphR0Z1WjJWa0xDQnlaWE4wZVd4cGJtY2djR3hoZVdWeUxDQmthV1FnZVc5MUlHWnZjbWRsZENCMGJ5QnZkbVZ5Y21sa1pTQjBhR2x6SUdaMWJtTjBhVzl1UHlkY2JpQWdJQ0FnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUgwN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YjI1TllYUmphRlpwWlhkd2IzSjBVbVZ6YjJ4MWRHbHZia05oYkd4aVlXTnJJRDBnS0NrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1c2IyY29YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKMUpsYzI5c2RYUnBiMjRnWTJoaGJtZGxaQ0JoYm1RZ2JXRjBZMmdnZG1sbGQzQnZjblFnY21WemIyeDFkR2x2YmlCcGN5QjBkWEp1WldRZ2IyNHNJR1JwWkNCNWIzVWdabTl5WjJWMElIUnZJRzkyWlhKeWFXUmxJSFJvYVhNZ1puVnVZM1JwYjI0L0oxeHVJQ0FnSUNBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ2ZUdGNibHh1SUNBZ0lDQWdJQ0F2THlCelpYUWdjR3hoZVNCbWIzSWdkbWxrWlc5Y2JpQWdJQ0FnSUNBZ2RHaHBjeTUyYVdSbGIwVnNaVzFsYm5RdWIyNWpiR2xqYXlBOUlDZ3BJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMblpwWkdWdlJXeGxiV1Z1ZEM1d1lYVnpaV1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMblpwWkdWdlJXeGxiV1Z1ZEM1d2JHRjVLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDA3WEc1Y2JpQWdJQ0FnSUNBZ2RHaHBjeTUyYVdSbGIwVnNaVzFsYm5RdWIyNXNiMkZrWldSdFpYUmhaR0YwWVNBOUlDZ3BJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWIyNVdhV1JsYjBsdWFYUnBZV3hwZW1Wa0tDazdYRzRnSUNBZ0lDQWdJSDA3WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdjMlYwSUhKbGMybDZaU0JsZG1WdWRITWdkRzhnZEdobElIZHBibVJ2ZDNNZ2FXWWdhWFFnYVhNZ2NtVnphWHBsWkNCdmNpQnBkSE1nYjNKcFpXNTBZWFJwYjI0Z2FYTWdZMmhoYm1kbFpGeHVJQ0FnSUNBZ0lDQjNhVzVrYjNjdVlXUmtSWFpsYm5STWFYTjBaVzVsY2lnbmNtVnphWHBsSnl3Z0tDa2dQVDRnZEdocGN5NXlaWE5wZW1WUWJHRjVaWEpUZEhsc1pTZ3BMQ0IwY25WbEtUdGNiaUFnSUNBZ0lDQWdkMmx1Wkc5M0xtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0oyOXlhV1Z1ZEdGMGFXOXVZMmhoYm1kbEp5d2dLQ2tnUFQ1Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWIyNVBjbWxsYm5SaGRHbHZia05vWVc1blpTZ3BYRzRnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVTJWMGN5QjFjQ0IwYUdVZ2RtbGtaVzhnWld4bGJXVnVkQ0IzYVhSb0lHRnVlU0JoY0hCc2FXTmhkR2x2YmlCamIyNW1hV2NnWVc1a0lIQnNZWGx6SUhSb1pTQjJhV1JsYnlCbGJHVnRaVzUwTGx4dUlDQWdJQ0FxSUVCeVpYUjFjbTV6SUVFZ2NISnZiV2x6WlNCbWIzSWdhV1lnY0d4aGVXbHVaeUIwYUdVZ2RtbGtaVzhnZDJGeklITjFZMk5sYzNObWRXd2diM0lnYm05MExseHVJQ0FnSUNBcUwxeHVJQ0FnSUhCc1lYa29LVG9nVUhKdmJXbHpaVHgyYjJsa1BpQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWRtbGtaVzlGYkdWdFpXNTBMbTExZEdWa0lEMGdkR2hwY3k1amIyNW1hV2N1YVhOR2JHRm5SVzVoWW14bFpDaGNiaUFnSUNBZ0lDQWdJQ0FnSUVac1lXZHpMbE4wWVhKMFZtbGtaVzlOZFhSbFpGeHVJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuWnBaR1Z2Uld4bGJXVnVkQzVoZFhSdmNHeGhlU0E5SUhSb2FYTXVZMjl1Wm1sbkxtbHpSbXhoWjBWdVlXSnNaV1FvWEc0Z0lDQWdJQ0FnSUNBZ0lDQkdiR0ZuY3k1QmRYUnZVR3hoZVZacFpHVnZYRzRnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuWnBaR1Z2Uld4bGJXVnVkQzV3YkdGNUtDazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dRSEpsZEhWeWJuTWdWSEoxWlNCcFppQjBhR1VnZG1sa1pXOGdaV3hsYldWdWRDQnBjeUJ3WVhWelpXUXVYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2FYTlFZWFZ6WldRb0tUb2dZbTl2YkdWaGJpQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5acFpHVnZSV3hsYldWdWRDNXdZWFZ6WldRN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1FISmxkSFZ5Ym5NZ0xTQjNhR1YwYUdWeUlIUm9aU0IyYVdSbGJ5QmxiR1Z0Wlc1MElHbHpJSEJzWVhscGJtY3VYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2FYTldhV1JsYjFKbFlXUjVLQ2s2SUdKdmIyeGxZVzRnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1MmFXUmxiMFZzWlcxbGJuUXVjbVZoWkhsVGRHRjBaU0FoUFQwZ2RXNWtaV1pwYm1Wa0lDWW1YRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMblpwWkdWdlJXeGxiV1Z1ZEM1eVpXRmtlVk4wWVhSbElENGdNRnh1SUNBZ0lDQWdJQ0FwTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVCeVpYUjFjbTV6SUZSeWRXVWdhV1lnZEdobElIWnBaR1Z2SUdWc1pXMWxiblFnYUdGeklHRWdkbUZzYVdRZ2RtbGtaVzhnYzI5MWNtTmxJQ2h6Y21OUFltcGxZM1FwTGx4dUlDQWdJQ0FxTDF4dUlDQWdJR2hoYzFacFpHVnZVMjkxY21ObEtDazZJR0p2YjJ4bFlXNGdlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdLRnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTUyYVdSbGIwVnNaVzFsYm5RdWMzSmpUMkpxWldOMElDRTlQU0IxYm1SbFptbHVaV1FnSmlaY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWRtbGtaVzlGYkdWdFpXNTBMbk55WTA5aWFtVmpkQ0FoUFQwZ2JuVnNiRnh1SUNBZ0lDQWdJQ0FwTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVkbGRDQjBhR1VnWTNWeWNtVnVkQ0JqYjI1MFpYaDBJRzltSUhSb1pTQm9kRzFzSUhacFpHVnZJR1ZzWlcxbGJuUmNiaUFnSUNBZ0tpQkFjbVYwZFhKdWN5QXRJSFJvWlNCamRYSnlaVzUwSUdOdmJuUmxlSFFnYjJZZ2RHaGxJSFpwWkdWdklHVnNaVzFsYm5SY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JuWlhSV2FXUmxiMFZzWlcxbGJuUW9LVG9nU0ZSTlRGWnBaR1Z2Uld4bGJXVnVkQ0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuWnBaR1Z2Uld4bGJXVnVkRHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJIWlhRZ2RHaGxJR04xY25KbGJuUWdZMjl1ZEdWNGRDQnZaaUIwYUdVZ2FIUnRiQ0IyYVdSbGJ5QmxiR1Z0Wlc1MGN5QndZWEpsYm5SY2JpQWdJQ0FnS2lCQWNtVjBkWEp1Y3lBdElIUm9aU0JqZFhKeVpXNTBJR052Ym5SbGVIUWdiMllnZEdobElIWnBaR1Z2SUdWc1pXMWxiblJ6SUhCaGNtVnVkRnh1SUNBZ0lDQXFMMXh1SUNBZ0lHZGxkRlpwWkdWdlVHRnlaVzUwUld4bGJXVnVkQ2dwT2lCSVZFMU1SV3hsYldWdWRDQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5acFpHVnZSV3hsYldWdWRDNXdZWEpsYm5SRmJHVnRaVzUwTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZObGRDQjBhR1VnVm1sa1pXOGdSV3hsYldWdWRITWdjM0pqSUc5aWFtVmpkQ0IwY21GamEzTWdkRzhnWlc1aFlteGxYRzRnSUNBZ0lDb2dRSEJoY21GdElHVnVZV0pzWldRZ0xTQkZibUZpYkdVZ1ZISmhZMnR6SUc5dUlIUm9aU0JUY21NZ1QySnFaV04wWEc0Z0lDQWdJQ292WEc0Z0lDQWdjMlYwVm1sa1pXOUZibUZpYkdWa0tHVnVZV0pzWldRNklHSnZiMnhsWVc0cElIdGNiaUFnSUNBZ0lDQWdMeThnZEdocGN5QnBjeUJoSUhSbGJYQnZjbUZ5ZVNCb1lXTnJJSFZ1ZEdsc0lIUjVjR1VnYzJOeWFYQjBjeUIyYVdSbGJ5QmxiR1Z0Wlc1MElHbHpJSFZ3WkdGMFpXUWdkRzhnY21WbWJHVmpkQ0IwYUdVZ2JtVmxaQ0JtYjNJZ2RISmhZMnR6SUc5dUlHRWdhSFJ0YkNCMmFXUmxieUJsYkdWdFpXNTBYRzRnSUNBZ0lDQWdJR052Ym5OMElIWnBaR1Z2Uld4bGJXVnVkQ0E5SUhSb2FYTXVkbWxrWlc5RmJHVnRaVzUwTzF4dUlDQWdJQ0FnSUNBb1BFMWxaR2xoVTNSeVpXRnRQblpwWkdWdlJXeGxiV1Z1ZEM1emNtTlBZbXBsWTNRcFhHNGdJQ0FnSUNBZ0lDQWdJQ0F1WjJWMFZISmhZMnR6S0NsY2JpQWdJQ0FnSUNBZ0lDQWdJQzVtYjNKRllXTm9LQ2gwY21GamF6b2dUV1ZrYVdGVGRISmxZVzFVY21GamF5a2dQVDRnS0hSeVlXTnJMbVZ1WVdKc1pXUWdQU0JsYm1GaWJHVmtLU2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUVc0Z2IzWmxjbkpwWkdVZ1ptOXlJSGRvWlc0Z2RHaGxJSFpwWkdWdklHaGhjeUJpWldWdUlHbHVhWFJwWVd4cGVtVmtJSGRwZEdnZ1lTQnpjbU5QWW1wbFkzUmNiaUFnSUNBZ0tpOWNiaUFnSUNCdmJsWnBaR1Z2U1c1cGRHbGhiR2w2WldRb0tTQjdYRzRnSUNBZ0lDQWdJQzh2SUVSbFptRjFiSFFnUm5WdVkzUnBiMjVoYkdsMGVUb2dSRzhnVG05MGFHbHVaMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRTl1SUhSb1pTQnZjbWxsYm5SaGRHbHZiaUJqYUdGdVoyVWdiMllnWVNCM2FXNWtiM2NnWTJ4bFlYSWdkR2hsSUhScGJXVnZkWFJjYmlBZ0lDQWdLaTljYmlBZ0lDQnZiazl5YVdWdWRHRjBhVzl1UTJoaGJtZGxLQ2tnZTF4dUlDQWdJQ0FnSUNCamJHVmhjbFJwYldWdmRYUW9kR2hwY3k1dmNtbGxiblJoZEdsdmJrTm9ZVzVuWlZScGJXVnZkWFFwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbTl5YVdWdWRHRjBhVzl1UTJoaGJtZGxWR2x0Wlc5MWRDQTlJSGRwYm1SdmR5NXpaWFJVYVcxbGIzVjBLQ2dwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjbVZ6YVhwbFVHeGhlV1Z5VTNSNWJHVW9LVHRjYmlBZ0lDQWdJQ0FnZlN3Z05UQXdLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJTWlhOcGVtVnpJSFJvWlNCd2JHRjVaWElnYzNSNWJHVWdZbUZ6WldRZ2IyNGdkR2hsSUhkcGJtUnZkeUJvWldsbmFIUWdZVzVrSUhkcFpIUm9YRzRnSUNBZ0lDb2dRSEpsZEhWeWJuTWdMU0J1YVd3Z2FXWWdjbVZ4ZFdseVpXMWxiblJ6SUdGeVpTQnpZWFJwYzJacFpXUmNiaUFnSUNBZ0tpOWNiaUFnSUNCeVpYTnBlbVZRYkdGNVpYSlRkSGxzWlNncElIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2RtbGtaVzlGYkdWdFpXNTBVR0Z5Wlc1MElEMGdkR2hwY3k1blpYUldhV1JsYjFCaGNtVnVkRVZzWlcxbGJuUW9LVHRjYmx4dUlDQWdJQ0FnSUNCcFppQW9JWFpwWkdWdlJXeGxiV1Z1ZEZCaGNtVnVkQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnZEdocGN5NTFjR1JoZEdWV2FXUmxiMU4wY21WaGJWTnBlbVVvS1R0Y2JseHVJQ0FnSUNBZ0lDQnBaaUFvZG1sa1pXOUZiR1Z0Wlc1MFVHRnlaVzUwTG1Oc1lYTnpUR2x6ZEM1amIyNTBZV2x1Y3lnblptbDRaV1F0YzJsNlpTY3BLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG05dVVtVnphWHBsVUd4aGVXVnlRMkZzYkdKaFkyc29LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQzh2SUdOdmJuUnliMnh6SUdadmNpQnlaWE5wZW1sdVp5QjBhR1VnY0d4aGVXVnlYRzRnSUNBZ0lDQWdJSFJvYVhNdWNtVnphWHBsVUd4aGVXVnlVM1I1YkdWVWIwWnBiR3hRWVhKbGJuUkZiR1Z0Wlc1MEtDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdWIyNVNaWE5wZW1WUWJHRjVaWEpEWVd4c1ltRmpheWdwTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZKbGMybDZaWE1nZEdobElIQnNZWGxsY2lCbGJHVnRaVzUwSUhSdklHWnBiR3dnZEdobElIQmhjbVZ1ZENCbGJHVnRaVzUwWEc0Z0lDQWdJQ292WEc0Z0lDQWdjbVZ6YVhwbFVHeGhlV1Z5VTNSNWJHVlViMFpwYkd4UVlYSmxiblJGYkdWdFpXNTBLQ2tnZTF4dUlDQWdJQ0FnSUNCamIyNXpkQ0IyYVdSbGIwVnNaVzFsYm5SUVlYSmxiblFnUFNCMGFHbHpMbWRsZEZacFpHVnZVR0Z5Wlc1MFJXeGxiV1Z1ZENncE8xeHVYRzRnSUNBZ0lDQWdJQzh2Vm1sa1pXOGdhWE1nYm05MElHbHVhWFJwWVd4cGVtVmtJSGxsZENCemJ5QnpaWFFnZG1sa1pXOUZiR1Z0Wlc1MFVHRnlaVzUwSUhSdklITnBlbVVnYjJZZ2NHRnlaVzUwSUdWc1pXMWxiblJjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdjM1I1YkdWWGFXUjBhQ0E5SUNjeE1EQWxKenRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdjM1I1YkdWSVpXbG5hSFFnUFNBbk1UQXdKU2M3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSE4wZVd4bFZHOXdJRDBnTUR0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYzNSNWJHVk1aV1owSUQwZ01EdGNiaUFnSUNBZ0lDQWdkbWxrWlc5RmJHVnRaVzUwVUdGeVpXNTBMbk5sZEVGMGRISnBZblYwWlNoY2JpQWdJQ0FnSUNBZ0lDQWdJQ2R6ZEhsc1pTY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBbmRHOXdPaUFuSUN0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemRIbHNaVlJ2Y0NBclhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0ozQjRPeUJzWldaME9pQW5JQ3RjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6ZEhsc1pVeGxablFnSzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNkd2VEc2dkMmxrZEdnNklDY2dLMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE4wZVd4bFYybGtkR2dnSzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNjN0lHaGxhV2RvZERvZ0p5QXJYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjM1I1YkdWSVpXbG5hSFFnSzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNjN0lHTjFjbk52Y2pvZ1pHVm1ZWFZzZERzblhHNGdJQ0FnSUNBZ0lDazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2RYQmtZWFJsVm1sa1pXOVRkSEpsWVcxVGFYcGxLQ2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9JWFJvYVhNdVkyOXVabWxuTG1selJteGhaMFZ1WVdKc1pXUW9SbXhoWjNNdVRXRjBZMmhXYVdWM2NHOXlkRkpsYzI5c2RYUnBiMjRwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCamIyNXpkQ0J1YjNjZ1BTQnVaWGNnUkdGMFpTZ3BMbWRsZEZScGJXVW9LVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHNXZkeUF0SUhSb2FYTXViR0Z6ZEZScGJXVlNaWE5wZW1Wa0lENGdNekF3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQjJhV1JsYjBWc1pXMWxiblJRWVhKbGJuUWdQU0IwYUdsekxtZGxkRlpwWkdWdlVHRnlaVzUwUld4bGJXVnVkQ2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NGMmFXUmxiMFZzWlcxbGJuUlFZWEpsYm5RcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWIyNU5ZWFJqYUZacFpYZHdiM0owVW1WemIyeDFkR2x2YmtOaGJHeGlZV05yS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhacFpHVnZSV3hsYldWdWRGQmhjbVZ1ZEM1amJHbGxiblJYYVdSMGFDeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJhV1JsYjBWc1pXMWxiblJRWVhKbGJuUXVZMnhwWlc1MFNHVnBaMmgwWEc0Z0lDQWdJQ0FnSUNBZ0lDQXBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG14aGMzUlVhVzFsVW1WemFYcGxaQ0E5SUc1bGR5QkVZWFJsS0NrdVoyVjBWR2x0WlNncE8xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnVEc5bloyVnlMa3h2WnloY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCTWIyZG5aWEl1UjJWMFUzUmhZMnRVY21GalpTZ3BMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2RTWlhOcGVtbHVaeUIwYjI4Z2IyWjBaVzRnTFNCemEybHdjR2x1Wnljc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ05seHVJQ0FnSUNBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05zWldGeVZHbHRaVzkxZENoMGFHbHpMbkpsYzJsNlpWUnBiV1Z2ZFhSSVlXNWtiR1VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1eVpYTnBlbVZVYVcxbGIzVjBTR0Z1Wkd4bElEMGdkMmx1Wkc5M0xuTmxkRlJwYldWdmRYUW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLQ2tnUFQ0Z2RHaHBjeTUxY0dSaGRHVldhV1JsYjFOMGNtVmhiVk5wZW1Vb0tTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXhNREJjYmlBZ0lDQWdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzU5WEc0aUxDSXZMeUJEYjNCNWNtbG5hSFFnUlhCcFl5QkhZVzFsY3l3Z1NXNWpMaUJCYkd3Z1VtbG5hSFJ6SUZKbGMyVnlkbVZrTGx4dVhHNXBiWEJ2Y25RZ2V5QlhaV0pUYjJOclpYUkRiMjUwY205c2JHVnlJSDBnWm5KdmJTQW5MaTR2VjJWaVUyOWphMlYwY3k5WFpXSlRiMk5yWlhSRGIyNTBjbTlzYkdWeUp6dGNibWx0Y0c5eWRDQjdJRk4wY21WaGJVTnZiblJ5YjJ4c1pYSWdmU0JtY205dElDY3VMaTlXYVdSbGIxQnNZWGxsY2k5VGRISmxZVzFEYjI1MGNtOXNiR1Z5Snp0Y2JtbHRjRzl5ZENCN1hHNGdJQ0FnVFdWemMyRm5aVUZ1YzNkbGNpeGNiaUFnSUNCTlpYTnpZV2RsVDJabVpYSXNYRzRnSUNBZ1RXVnpjMkZuWlVOdmJtWnBaeXhjYmlBZ0lDQk5aWE56WVdkbFUzUnlaV0Z0WlhKTWFYTjBYRzU5SUdaeWIyMGdKeTR1TDFkbFlsTnZZMnRsZEhNdlRXVnpjMkZuWlZKbFkyVnBkbVVuTzF4dWFXMXdiM0owSUhzZ1JuSmxaWHBsUm5KaGJXVkRiMjUwY205c2JHVnlJSDBnWm5KdmJTQW5MaTR2Um5KbFpYcGxSbkpoYldVdlJuSmxaWHBsUm5KaGJXVkRiMjUwY205c2JHVnlKenRjYm1sdGNHOXlkQ0I3SUVGR1MwTnZiblJ5YjJ4c1pYSWdmU0JtY205dElDY3VMaTlCUmtzdlFVWkxRMjl1ZEhKdmJHeGxjaWM3WEc1cGJYQnZjblFnZXlCRVlYUmhRMmhoYm01bGJFTnZiblJ5YjJ4c1pYSWdmU0JtY205dElDY3VMaTlFWVhSaFEyaGhibTVsYkM5RVlYUmhRMmhoYm01bGJFTnZiblJ5YjJ4c1pYSW5PMXh1YVcxd2IzSjBJSHNnVUdWbGNrTnZibTVsWTNScGIyNURiMjUwY205c2JHVnlJSDBnWm5KdmJTQW5MaTR2VUdWbGNrTnZibTVsWTNScGIyNURiMjUwY205c2JHVnlMMUJsWlhKRGIyNXVaV04wYVc5dVEyOXVkSEp2Ykd4bGNpYzdYRzVwYlhCdmNuUWdleUJMWlhsaWIyRnlaRU52Ym5SeWIyeHNaWElnZlNCbWNtOXRJQ2N1TGk5SmJuQjFkSE12UzJWNVltOWhjbVJEYjI1MGNtOXNiR1Z5Snp0Y2JtbHRjRzl5ZENCN0lFRm5aM0psWjJGMFpXUlRkR0YwY3lCOUlHWnliMjBnSnk0dUwxQmxaWEpEYjI1dVpXTjBhVzl1UTI5dWRISnZiR3hsY2k5QloyZHlaV2RoZEdWa1UzUmhkSE1uTzF4dWFXMXdiM0owSUh0Y2JpQWdJQ0JEYjI1bWFXY3NYRzRnSUNBZ1JteGhaM01zWEc0Z0lDQWdRMjl1ZEhKdmJGTmphR1Z0WlZSNWNHVXNYRzRnSUNBZ1ZHVjRkRkJoY21GdFpYUmxjbk1zWEc0Z0lDQWdUM0IwYVc5dVVHRnlZVzFsZEdWeWN5eGNiaUFnSUNCT2RXMWxjbWxqVUdGeVlXMWxkR1Z5YzF4dWZTQm1jbTl0SUNjdUxpOURiMjVtYVdjdlEyOXVabWxuSnp0Y2JtbHRjRzl5ZENCN1hHNGdJQ0FnUlc1amIyUmxjbE5sZEhScGJtZHpMRnh1SUNBZ0lFbHVhWFJwWVd4VFpYUjBhVzVuY3l4Y2JpQWdJQ0JYWldKU1ZFTlRaWFIwYVc1bmMxeHVmU0JtY205dElDY3VMaTlFWVhSaFEyaGhibTVsYkM5SmJtbDBhV0ZzVTJWMGRHbHVaM01uTzF4dWFXMXdiM0owSUhzZ1RHRjBaVzVqZVZSbGMzUlNaWE4xYkhSeklIMGdabkp2YlNBbkxpNHZSR0YwWVVOb1lXNXVaV3d2VEdGMFpXNWplVlJsYzNSU1pYTjFiSFJ6Snp0Y2JtbHRjRzl5ZENCN0lFeHZaMmRsY2lCOUlHWnliMjBnSnk0dUwweHZaMmRsY2k5TWIyZG5aWEluTzF4dWFXMXdiM0owSUhzZ1JtbHNaVlJsYlhCc1lYUmxMQ0JHYVd4bFZYUnBiQ0I5SUdaeWIyMGdKeTR1TDFWMGFXd3ZSbWxzWlZWMGFXd25PMXh1YVcxd2IzSjBJSHNnU1c1d2RYUkRiR0Z6YzJWelJtRmpkRzl5ZVNCOUlHWnliMjBnSnk0dUwwbHVjSFYwY3k5SmJuQjFkRU5zWVhOelpYTkdZV04wYjNKNUp6dGNibWx0Y0c5eWRDQjdJRlpwWkdWdlVHeGhlV1Z5SUgwZ1puSnZiU0FuTGk0dlZtbGtaVzlRYkdGNVpYSXZWbWxrWlc5UWJHRjVaWEluTzF4dWFXMXdiM0owSUh0Y2JpQWdJQ0JUZEhKbFlXMU5aWE56WVdkbFEyOXVkSEp2Ykd4bGNpeGNiaUFnSUNCTlpYTnpZV2RsUkdseVpXTjBhVzl1WEc1OUlHWnliMjBnSnk0dUwxVmxTVzV6ZEdGdVkyVk5aWE56WVdkbEwxTjBjbVZoYlUxbGMzTmhaMlZEYjI1MGNtOXNiR1Z5Snp0Y2JtbHRjRzl5ZENCN0lGSmxjM0J2Ym5ObFEyOXVkSEp2Ykd4bGNpQjlJR1p5YjIwZ0p5NHVMMVZsU1c1emRHRnVZMlZOWlhOellXZGxMMUpsYzNCdmJuTmxRMjl1ZEhKdmJHeGxjaWM3WEc1cGJYQnZjblFnS2lCaGN5Qk5aWE56WVdkbFVtVmpaV2wyWlNCbWNtOXRJQ2N1TGk5WFpXSlRiMk5yWlhSekwwMWxjM05oWjJWU1pXTmxhWFpsSnp0Y2JtbHRjRzl5ZENCN0lFMWxjM05oWjJWUGJsTmpjbVZsYmt0bGVXSnZZWEprSUgwZ1puSnZiU0FuTGk0dlYyVmlVMjlqYTJWMGN5OU5aWE56WVdkbFVtVmpaV2wyWlNjN1hHNXBiWEJ2Y25RZ2V5QlRaVzVrUkdWelkzSnBjSFJ2Y2tOdmJuUnliMnhzWlhJZ2ZTQm1jbTl0SUNjdUxpOVZaVWx1YzNSaGJtTmxUV1Z6YzJGblpTOVRaVzVrUkdWelkzSnBjSFJ2Y2tOdmJuUnliMnhzWlhJbk8xeHVhVzF3YjNKMElIc2dVMlZ1WkUxbGMzTmhaMlZEYjI1MGNtOXNiR1Z5SUgwZ1puSnZiU0FuTGk0dlZXVkpibk4wWVc1alpVMWxjM05oWjJVdlUyVnVaRTFsYzNOaFoyVkRiMjUwY205c2JHVnlKenRjYm1sdGNHOXlkQ0I3SUZSdlUzUnlaV0Z0WlhKTlpYTnpZV2RsYzBOdmJuUnliMnhzWlhJZ2ZTQm1jbTl0SUNjdUxpOVZaVWx1YzNSaGJtTmxUV1Z6YzJGblpTOVViMU4wY21WaGJXVnlUV1Z6YzJGblpYTkRiMjUwY205c2JHVnlKenRjYm1sdGNHOXlkQ0I3SUUxdmRYTmxRMjl1ZEhKdmJHeGxjaUI5SUdaeWIyMGdKeTR1TDBsdWNIVjBjeTlOYjNWelpVTnZiblJ5YjJ4c1pYSW5PMXh1YVcxd2IzSjBJSHNnUjJGdFpWQmhaRU52Ym5SeWIyeHNaWElnZlNCbWNtOXRJQ2N1TGk5SmJuQjFkSE12UjJGdFpYQmhaRU52Ym5SeWIyeHNaWEluTzF4dWFXMXdiM0owSUhzZ1JHRjBZVU5vWVc1dVpXeFRaVzVrWlhJZ2ZTQm1jbTl0SUNjdUxpOUVZWFJoUTJoaGJtNWxiQzlFWVhSaFEyaGhibTVsYkZObGJtUmxjaWM3WEc1cGJYQnZjblFnZTF4dUlDQWdJRU52YjNKa2FXNWhkR1ZEYjI1MlpYSjBaWElzWEc0Z0lDQWdWVzV4ZFdGdWRHbDZaV1JFWlc1dmNtMWhiR2w2WldSVmJuTnBaMjVsWkVOdmIzSmtYRzU5SUdaeWIyMGdKeTR1TDFWMGFXd3ZRMjl2Y21ScGJtRjBaVU52Ym5abGNuUmxjaWM3WEc1cGJYQnZjblFnZXlCUWFYaGxiRk4wY21WaGJXbHVaeUI5SUdaeWIyMGdKeTR1TDFCcGVHVnNVM1J5WldGdGFXNW5MMUJwZUdWc1UzUnlaV0Z0YVc1bkp6dGNibWx0Y0c5eWRDQjdJRWxVYjNWamFFTnZiblJ5YjJ4c1pYSWdmU0JtY205dElDY3VMaTlKYm5CMWRITXZTVlJ2ZFdOb1EyOXVkSEp2Ykd4bGNpYzdYRzVwYlhCdmNuUWdlMXh1SUNBZ0lFUmhkR0ZEYUdGdWJtVnNRMnh2YzJWRmRtVnVkQ3hjYmlBZ0lDQkVZWFJoUTJoaGJtNWxiRVZ5Y205eVJYWmxiblFzWEc0Z0lDQWdSR0YwWVVOb1lXNXVaV3hQY0dWdVJYWmxiblFzWEc0Z0lDQWdTR2xrWlVaeVpXVjZaVVp5WVcxbFJYWmxiblFzWEc0Z0lDQWdURzloWkVaeVpXVjZaVVp5WVcxbFJYWmxiblFzWEc0Z0lDQWdVR3hoZVZOMGNtVmhiVVZ5Y205eVJYWmxiblFzWEc0Z0lDQWdVR3hoZVZOMGNtVmhiVVYyWlc1MExGeHVJQ0FnSUZCc1lYbFRkSEpsWVcxU1pXcGxZM1JsWkVWMlpXNTBMRnh1SUNBZ0lGTjBjbVZoYldWeVRHbHpkRTFsYzNOaFoyVkZkbVZ1ZEZ4dWZTQm1jbTl0SUNjdUxpOVZkR2xzTDBWMlpXNTBSVzFwZEhSbGNpYzdYRzR2S2lwY2JpQXFJRVZ1ZEhKNUlIQnZhVzUwSUdadmNpQjBhR1VnVjJWaVVsUkRJRkJzWVhsbGNseHVJQ292WEc1bGVIQnZjblFnWTJ4aGMzTWdWMlZpVW5SalVHeGhlV1Z5UTI5dWRISnZiR3hsY2lCN1hHNGdJQ0FnWTI5dVptbG5PaUJEYjI1bWFXYzdYRzRnSUNBZ2NtVnpjRzl1YzJWRGIyNTBjbTlzYkdWeU9pQlNaWE53YjI1elpVTnZiblJ5YjJ4c1pYSTdYRzRnSUNBZ2MyUndRMjl1YzNSeVlXbHVkSE02SUZKVVEwOW1abVZ5VDNCMGFXOXVjenRjYmlBZ0lDQjNaV0pUYjJOclpYUkRiMjUwY205c2JHVnlPaUJYWldKVGIyTnJaWFJEYjI1MGNtOXNiR1Z5TzF4dUlDQWdJQzh2SUZSb1pTQndjbWx0WVhKNUlHUmhkR0VnWTJoaGJtNWxiQzRnVkdocGN5QnBjeUJpYVdScGNtVmpkR2x2Ym1Gc0lIZG9aVzRnY0RKd0lHRnVaQ0J6Wlc1a0lHOXViSGtnZDJobGJpQjFjMmx1WnlCaGJpQlRSbFZjYmlBZ0lDQnpaVzVrY21WamRrUmhkR0ZEYUdGdWJtVnNRMjl1ZEhKdmJHeGxjam9nUkdGMFlVTm9ZVzV1Wld4RGIyNTBjbTlzYkdWeU8xeHVJQ0FnSUM4dklFRWdjbVZqZGlCdmJteDVJR1JoZEdFZ1kyaGhibTVsYkNCeVpYRjFhWEpsWkNCM2FHVnVJSFZ6YVc1bklHRnVJRk5HVlZ4dUlDQWdJSEpsWTNaRVlYUmhRMmhoYm01bGJFTnZiblJ5YjJ4c1pYSTZJRVJoZEdGRGFHRnVibVZzUTI5dWRISnZiR3hsY2p0Y2JpQWdJQ0JrWVhSaFEyaGhibTVsYkZObGJtUmxjam9nUkdGMFlVTm9ZVzV1Wld4VFpXNWtaWEk3WEc0Z0lDQWdaR0YwWVdOb1lXNXVaV3hQY0hScGIyNXpPaUJTVkVORVlYUmhRMmhoYm01bGJFbHVhWFE3WEc0Z0lDQWdkbWxrWlc5UWJHRjVaWEk2SUZacFpHVnZVR3hoZVdWeU8xeHVJQ0FnSUhOMGNtVmhiVU52Ym5SeWIyeHNaWEk2SUZOMGNtVmhiVU52Ym5SeWIyeHNaWEk3WEc0Z0lDQWdjR1ZsY2tOdmJtNWxZM1JwYjI1RGIyNTBjbTlzYkdWeU9pQlFaV1Z5UTI5dWJtVmpkR2x2YmtOdmJuUnliMnhzWlhJN1hHNGdJQ0FnYVc1d2RYUkRiR0Z6YzJWelJtRmpkRzl5ZVRvZ1NXNXdkWFJEYkdGemMyVnpSbUZqZEc5eWVUdGNiaUFnSUNCbWNtVmxlbVZHY21GdFpVTnZiblJ5YjJ4c1pYSTZJRVp5WldWNlpVWnlZVzFsUTI5dWRISnZiR3hsY2p0Y2JpQWdJQ0J6YUc5MWJHUlRhRzkzVUd4aGVVOTJaWEpzWVhrZ1BTQjBjblZsTzF4dUlDQWdJR0ZtYTBOdmJuUnliMnhzWlhJNklFRkdTME52Ym5SeWIyeHNaWEk3WEc0Z0lDQWdkbWxrWlc5RmJHVnRaVzUwVUdGeVpXNTBRMnhwWlc1MFVtVmpkRG9nUkU5TlVtVmpkRHRjYmlBZ0lDQnNZWFJsYm1ONVUzUmhjblJVYVcxbE9pQnVkVzFpWlhJN1hHNGdJQ0FnY0dsNFpXeFRkSEpsWVcxcGJtYzZJRkJwZUdWc1UzUnlaV0Z0YVc1bk8xeHVJQ0FnSUhOMGNtVmhiVTFsYzNOaFoyVkRiMjUwY205c2JHVnlPaUJUZEhKbFlXMU5aWE56WVdkbFEyOXVkSEp2Ykd4bGNqdGNiaUFnSUNCelpXNWtSR1Z6WTNKcGNIUnZja052Ym5SeWIyeHNaWEk2SUZObGJtUkVaWE5qY21sd2RHOXlRMjl1ZEhKdmJHeGxjanRjYmlBZ0lDQnpaVzVrVFdWemMyRm5aVU52Ym5SeWIyeHNaWEk2SUZObGJtUk5aWE56WVdkbFEyOXVkSEp2Ykd4bGNqdGNiaUFnSUNCMGIxTjBjbVZoYldWeVRXVnpjMkZuWlhORGIyNTBjbTlzYkdWeU9pQlViMU4wY21WaGJXVnlUV1Z6YzJGblpYTkRiMjUwY205c2JHVnlPMXh1SUNBZ0lHdGxlV0p2WVhKa1EyOXVkSEp2Ykd4bGNqb2dTMlY1WW05aGNtUkRiMjUwY205c2JHVnlPMXh1SUNBZ0lHMXZkWE5sUTI5dWRISnZiR3hsY2pvZ1RXOTFjMlZEYjI1MGNtOXNiR1Z5TzF4dUlDQWdJSFJ2ZFdOb1EyOXVkSEp2Ykd4bGNqb2dTVlJ2ZFdOb1EyOXVkSEp2Ykd4bGNqdGNiaUFnSUNCbllXMWxVR0ZrUTI5dWRISnZiR3hsY2pvZ1IyRnRaVkJoWkVOdmJuUnliMnhzWlhJN1hHNGdJQ0FnWTI5dmNtUnBibUYwWlVOdmJuWmxjblJsY2pvZ1EyOXZjbVJwYm1GMFpVTnZiblpsY25SbGNqdGNiaUFnSUNCcGMxVnphVzVuVTBaVk9pQmliMjlzWldGdU8xeHVJQ0FnSUdselVYVmhiR2wwZVVOdmJuUnliMnhzWlhJNklHSnZiMnhsWVc0N1hHNGdJQ0FnYzNSaGRITlVhVzFsY2toaGJtUnNaVG9nYm5WdFltVnlPMXh1SUNBZ0lHWnBiR1U2SUVacGJHVlVaVzF3YkdGMFpUdGNiaUFnSUNCd2NtVm1aWEp5WldSRGIyUmxZem9nYzNSeWFXNW5PMXh1SUNBZ0lIQmxaWEpEYjI1bWFXYzZJRkpVUTBOdmJtWnBaM1Z5WVhScGIyNDdYRzRnSUNBZ2RtbGtaVzlCZG1kUmNEb2diblZ0WW1WeU8xeHVJQ0FnSUhOb2IzVnNaRkpsWTI5dWJtVmpkRG9nWW05dmJHVmhianRjYmlBZ0lDQnBjMUpsWTI5dWJtVmpkR2x1WnpvZ1ltOXZiR1ZoYmp0Y2JpQWdJQ0J5WldOdmJtNWxZM1JCZEhSbGJYQjBPaUJ1ZFcxaVpYSTdYRzRnSUNBZ2MzVmljMk55YVdKbFpGTjBjbVZoYlRvZ2MzUnlhVzVuSUh3Z2JuVnNiRHRjYmlBZ0lDQnphV2R1WVd4c2FXNW5WWEpzUW5WcGJHUmxjam9nS0NrZ1BUNGdjM1J5YVc1bk8xeHVYRzRnSUNBZ0x5OGdhV1lnZVc5MUlHOTJaWEp5YVdSbElIUm9aU0JrYVhOamIyNXVaV04wYVc5dUlHMWxjM05oWjJVZ1lua2dZMkZzYkdsdVp5QjBhR1VnYVc1MFpYSm1ZV05sSUcxbGRHaHZaQ0J6WlhSRWFYTmpiMjV1WldOMFRXVnpjMkZuWlU5MlpYSnlhV1JsWEc0Z0lDQWdMeThnYVhRZ2QybHNiQ0IxYzJVZ2RHaHBjeUJ3Y205d1pYSjBlU0IwYnlCemRHOXlaU0IwYUdVZ2IzWmxjbkpwWkdVZ2JXVnpjMkZuWlNCemRISnBibWRjYmlBZ0lDQmthWE5qYjI1dVpXTjBUV1Z6YzJGblpVOTJaWEp5YVdSbE9pQnpkSEpwYm1jN1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tseHVJQ0FnSUNBcUlFQndZWEpoYlNCamIyNW1hV2NnTFNCMGFHVWdabkp2Ym5SbGJtUWdZMjl1Wm1sbklHOWlhbVZqZEZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0J3YVhobGJGTjBjbVZoYldsdVp5QXRJSFJvWlNCUWFYaGxiRk4wY21WaGJXbHVaeUJ2WW1wbFkzUmNiaUFnSUNBZ0tpOWNiaUFnSUNCamIyNXpkSEoxWTNSdmNpaGpiMjVtYVdjNklFTnZibVpwWnl3Z2NHbDRaV3hUZEhKbFlXMXBibWM2SUZCcGVHVnNVM1J5WldGdGFXNW5LU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZMjl1Wm1sbklEMGdZMjl1Wm1sbk8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5CcGVHVnNVM1J5WldGdGFXNW5JRDBnY0dsNFpXeFRkSEpsWVcxcGJtYzdYRzRnSUNBZ0lDQWdJSFJvYVhNdWNtVnpjRzl1YzJWRGIyNTBjbTlzYkdWeUlEMGdibVYzSUZKbGMzQnZibk5sUTI5dWRISnZiR3hsY2lncE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1acGJHVWdQU0J1WlhjZ1JtbHNaVlJsYlhCc1lYUmxLQ2s3WEc1Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV6WkhCRGIyNXpkSEpoYVc1MGN5QTlJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHOW1abVZ5Vkc5U1pXTmxhWFpsUVhWa2FXODZJSFJ5ZFdVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J2Wm1abGNsUnZVbVZqWldsMlpWWnBaR1Z2T2lCMGNuVmxYRzRnSUNBZ0lDQWdJSDA3WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdjMlYwSUhWd0lIUm9aU0JoWm1zZ2JHOW5hV01nWTJ4aGMzTWdZVzVrSUdOdmJtNWxZM1FnZFhBZ2FYUnpJRzFsZEdodlpDQm1iM0lnWTJ4dmMybHVaeUIwYUdVZ2MybG5ibUZzYVc1bklITmxjblpsY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbUZtYTBOdmJuUnliMnhzWlhJZ1BTQnVaWGNnUVVaTFEyOXVkSEp2Ykd4bGNpaGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVZMjl1Wm1sbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXdhWGhsYkZOMGNtVmhiV2x1Wnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWIyNUJabXRVY21sbloyVnlaV1F1WW1sdVpDaDBhR2x6S1Z4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1GbWEwTnZiblJ5YjJ4c1pYSXViMjVCUmt0VWFXMWxaRTkxZEVOaGJHeGlZV05ySUQwZ0tDa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1elpYUkVhWE5qYjI1dVpXTjBUV1Z6YzJGblpVOTJaWEp5YVdSbEtGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDZFpiM1VnYUdGMlpTQmlaV1Z1SUdScGMyTnZibTVsWTNSbFpDQmtkV1VnZEc4Z2FXNWhZM1JwZG1sMGVTZGNiaUFnSUNBZ0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtTnNiM05sVTJsbmJtRnNhVzVuVTJWeWRtVnlLQ2s3WEc0Z0lDQWdJQ0FnSUgwN1hHNWNiaUFnSUNBZ0lDQWdkR2hwY3k1bWNtVmxlbVZHY21GdFpVTnZiblJ5YjJ4c1pYSWdQU0J1WlhjZ1JuSmxaWHBsUm5KaGJXVkRiMjUwY205c2JHVnlLRnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV3YVhobGJGTjBjbVZoYldsdVp5NTJhV1JsYjBWc1pXMWxiblJRWVhKbGJuUmNiaUFnSUNBZ0lDQWdLVHRjYmx4dUlDQWdJQ0FnSUNCMGFHbHpMblpwWkdWdlVHeGhlV1Z5SUQwZ2JtVjNJRlpwWkdWdlVHeGhlV1Z5S0Z4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1d2FYaGxiRk4wY21WaGJXbHVaeTUyYVdSbGIwVnNaVzFsYm5SUVlYSmxiblFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1OdmJtWnBaMXh1SUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMblpwWkdWdlVHeGhlV1Z5TG05dVZtbGtaVzlKYm1sMGFXRnNhWHBsWkNBOUlDZ3BJRDArWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1oaGJtUnNaVlpwWkdWdlNXNXBkR2xoYkdsNlpXUW9LVHRjYmx4dUlDQWdJQ0FnSUNBdkx5QlhhR1Z1SUdsdUlHMWhkR05vSUhacFpYZHdiM0owSUhKbGMyOXNkWFJwYjI0Z2JXOWtaU3dnZDJobGJpQjBhR1VnWW5KdmQzTmxjaUIyYVdWM2NHOXlkQ0JwY3lCeVpYTnBlbVZrSUhkbElITmxibVFnWVNCeVpYTnBlbVVnWTI5dGJXRnVaQ0JpWVdOcklIUnZJRlZGTGx4dUlDQWdJQ0FnSUNCMGFHbHpMblpwWkdWdlVHeGhlV1Z5TG05dVRXRjBZMmhXYVdWM2NHOXlkRkpsYzI5c2RYUnBiMjVEWVd4c1ltRmpheUE5SUNoY2JpQWdJQ0FnSUNBZ0lDQWdJSGRwWkhSb09pQnVkVzFpWlhJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JvWldsbmFIUTZJRzUxYldKbGNseHVJQ0FnSUNBZ0lDQXBJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElHUmxjMk55YVhCMGIzSWdQU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSjFKbGMyOXNkWFJwYjI0dVYybGtkR2duT2lCM2FXUjBhQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuVW1WemIyeDFkR2x2Ymk1SVpXbG5hSFFuT2lCb1pXbG5hSFJjYmlBZ0lDQWdJQ0FnSUNBZ0lIMDdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YzJWdVpFUmxjMk55YVhCMGIzSkRiMjUwY205c2JHVnlMbVZ0YVhSRGIyMXRZVzVrS0dSbGMyTnlhWEIwYjNJcE8xeHVJQ0FnSUNBZ0lDQjlPMXh1WEc0Z0lDQWdJQ0FnSUM4dklFVjJaWEo1SUhScGJXVWdkbWxrWlc4Z2NHeGhlV1Z5SUdseklISmxjMmw2WldRZ2FXNGdZbkp2ZDNObGNpQjNaU0J1WldWa0lIUnZJSEpsYVc1cGRHbGhiR2w2WlNCMGFHVWdiVzkxYzJVZ1kyOXZjbVJwYm1GMFpTQmpiMjUyWlhKemFXOXVJR0Z1WkNCbWNtVmxlbVVnWm5KaGJXVWdjMmw2YVc1bklHeHZaMmxqTGx4dUlDQWdJQ0FnSUNCMGFHbHpMblpwWkdWdlVHeGhlV1Z5TG05dVVtVnphWHBsVUd4aGVXVnlRMkZzYkdKaFkyc2dQU0FvS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbk5sZEZWd1RXOTFjMlZCYm1SR2NtVmxlbVZHY21GdFpTZ3BPMXh1SUNBZ0lDQWdJQ0I5TzF4dVhHNGdJQ0FnSUNBZ0lIUm9hWE11YzNSeVpXRnRRMjl1ZEhKdmJHeGxjaUE5SUc1bGR5QlRkSEpsWVcxRGIyNTBjbTlzYkdWeUtIUm9hWE11ZG1sa1pXOVFiR0Y1WlhJcE8xeHVYRzRnSUNBZ0lDQWdJSFJvYVhNdVkyOXZjbVJwYm1GMFpVTnZiblpsY25SbGNpQTlJRzVsZHlCRGIyOXlaR2x1WVhSbFEyOXVkbVZ5ZEdWeUtIUm9hWE11ZG1sa1pXOVFiR0Y1WlhJcE8xeHVYRzRnSUNBZ0lDQWdJSFJvYVhNdWMyVnVaSEpsWTNaRVlYUmhRMmhoYm01bGJFTnZiblJ5YjJ4c1pYSWdQU0J1WlhjZ1JHRjBZVU5vWVc1dVpXeERiMjUwY205c2JHVnlLQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjbVZqZGtSaGRHRkRhR0Z1Ym1Wc1EyOXVkSEp2Ykd4bGNpQTlJRzVsZHlCRVlYUmhRMmhoYm01bGJFTnZiblJ5YjJ4c1pYSW9LVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXlaV2RwYzNSbGNrUmhkR0ZEYUdGdWJtVnNSWFpsYm5SRmJXbDBkR1Z5Y3loY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWMyVnVaSEpsWTNaRVlYUmhRMmhoYm01bGJFTnZiblJ5YjJ4c1pYSmNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXlaV2RwYzNSbGNrUmhkR0ZEYUdGdWJtVnNSWFpsYm5SRmJXbDBkR1Z5Y3loMGFHbHpMbkpsWTNaRVlYUmhRMmhoYm01bGJFTnZiblJ5YjJ4c1pYSXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtUmhkR0ZEYUdGdWJtVnNVMlZ1WkdWeUlEMGdibVYzSUVSaGRHRkRhR0Z1Ym1Wc1UyVnVaR1Z5S0Z4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1elpXNWtjbVZqZGtSaGRHRkRhR0Z1Ym1Wc1EyOXVkSEp2Ykd4bGNseHVJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtUmhkR0ZEYUdGdWJtVnNVMlZ1WkdWeUxuSmxjMlYwUVdaclYyRnlibWx1WjFScGJXVnlUMjVFWVhSaFUyVnVaQ0E5SUNncElEMCtYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbUZtYTBOdmJuUnliMnhzWlhJdWNtVnpaWFJCWm10WFlYSnVhVzVuVkdsdFpYSW9LVHRjYmx4dUlDQWdJQ0FnSUNCMGFHbHpMbk4wY21WaGJVMWxjM05oWjJWRGIyNTBjbTlzYkdWeUlEMGdibVYzSUZOMGNtVmhiVTFsYzNOaFoyVkRiMjUwY205c2JHVnlLQ2s3WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdjMlYwSUhWd0lIZGxZbk52WTJ0bGRDQnRaWFJvYjJSelhHNGdJQ0FnSUNBZ0lIUm9hWE11ZDJWaVUyOWphMlYwUTI5dWRISnZiR3hsY2lBOUlHNWxkeUJYWldKVGIyTnJaWFJEYjI1MGNtOXNiR1Z5S0NrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11ZDJWaVUyOWphMlYwUTI5dWRISnZiR3hsY2k1dmJrTnZibVpwWnlBOUlDaGNiaUFnSUNBZ0lDQWdJQ0FnSUcxbGMzTmhaMlZEYjI1bWFXYzZJRTFsYzNOaFoyVlNaV05sYVhabExrMWxjM05oWjJWRGIyNW1hV2RjYmlBZ0lDQWdJQ0FnS1NBOVBpQjBhR2x6TG1oaGJtUnNaVTl1UTI5dVptbG5UV1Z6YzJGblpTaHRaWE56WVdkbFEyOXVabWxuS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTUzWldKVGIyTnJaWFJEYjI1MGNtOXNiR1Z5TG05dVUzUnlaV0Z0WlhKTWFYTjBJRDBnS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdiV1Z6YzJGblpVeHBjM1E2SUUxbGMzTmhaMlZTWldObGFYWmxMazFsYzNOaFoyVlRkSEpsWVcxbGNreHBjM1JjYmlBZ0lDQWdJQ0FnS1NBOVBpQjBhR2x6TG1oaGJtUnNaVk4wY21WaGJXVnlUR2x6ZEUxbGMzTmhaMlVvYldWemMyRm5aVXhwYzNRcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5kbFlsTnZZMnRsZEVOdmJuUnliMnhzWlhJdWIyNVhaV0pUYjJOclpYUlBibU5zYjNObFQzWmxjbXhoZVUxbGMzTmhaMlVnUFNBb1pYWmxiblFwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjR2w0Wld4VGRISmxZVzFwYm1jdVgyOXVSR2x6WTI5dWJtVmpkQ2hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JnVjJWaWMyOWphMlYwSUdScGMyTnZibTVsWTNRZ0tDUjdaWFpsYm5RdVkyOWtaWDBwSUNSN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1YyWlc1MExuSmxZWE52YmlBaFBTQW5KeUEvSUNjdElDY2dLeUJsZG1WdWRDNXlaV0Z6YjI0Z09pQW5KMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFnWEc0Z0lDQWdJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV6WlhSV2FXUmxiMFZ1WTI5a1pYSkJkbWRSVUNnd0tUdGNiaUFnSUNBZ0lDQWdmVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NTNaV0pUYjJOclpYUkRiMjUwY205c2JHVnlMbTl1VDNCbGJpNWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtDZHZjR1Z1Snl3Z0tDa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ1FuSnZkM05sY2xObGJtUnpUMlptWlhJZ1BTQjBhR2x6TG1OdmJtWnBaeTVwYzBac1lXZEZibUZpYkdWa0tGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lFWnNZV2R6TGtKeWIzZHpaWEpUWlc1a1QyWm1aWEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppZ2hRbkp2ZDNObGNsTmxibVJ6VDJabVpYSXBYRzRnSUNBZ0lDQWdJQ0FnSUNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTUzWldKVGIyTnJaWFJEYjI1MGNtOXNiR1Z5TG5KbGNYVmxjM1JUZEhKbFlXMWxja3hwYzNRb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJSFJvYVhNdWQyVmlVMjlqYTJWMFEyOXVkSEp2Ykd4bGNpNXZia05zYjNObExtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0oyTnNiM05sSnl3Z0tDa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1aFptdERiMjUwY205c2JHVnlMbk4wYjNCQlptdFhZWEp1YVc1blZHbHRaWElvS1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2MzUnZjQ0J6Wlc1a2FXNW5JSE4wWVhSeklHOXVJR2x1ZEdWeWRtRnNJR2xtSUhkbElHaGhkbVVnWTJ4dmMyVmtJRzkxY2lCamIyNXVaV04wYVc5dVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTV6ZEdGMGMxUnBiV1Z5U0dGdVpHeGxJQ1ltSUhSb2FYTXVjM1JoZEhOVWFXMWxja2hoYm1Sc1pTQWhQVDBnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2QybHVaRzkzTG1Oc1pXRnlTVzUwWlhKMllXd29kR2hwY3k1emRHRjBjMVJwYldWeVNHRnVaR3hsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnZFc1eVpXZHBjM1JsY2lCaGJHd2dhVzV3ZFhRZ1pHVjJhV05sSUdWMlpXNTBJR2hoYm1Sc1pYSnpJRzl1SUdScGMyTnZibTVsWTNSY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWMyVjBWRzkxWTJoSmJuQjFkRVZ1WVdKc1pXUW9abUZzYzJVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXpaWFJOYjNWelpVbHVjSFYwUlc1aFlteGxaQ2htWVd4elpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbk5sZEV0bGVXSnZZWEprU1c1d2RYUkZibUZpYkdWa0tHWmhiSE5sS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWMyVjBSMkZ0WlZCaFpFbHVjSFYwUlc1aFlteGxaQ2htWVd4elpTazdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1LSFJvYVhNdWMyaHZkV3hrVW1WamIyNXVaV04wSUNZbUlIUm9hWE11WTI5dVptbG5MbWRsZEU1MWJXVnlhV05UWlhSMGFXNW5WbUZzZFdVb1RuVnRaWEpwWTFCaGNtRnRaWFJsY25NdVRXRjRVbVZqYjI1dVpXTjBRWFIwWlcxd2RITXBJRDRnTUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YVhOU1pXTnZibTVsWTNScGJtY2dQU0IwY25WbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Y21WamIyNXVaV04wUVhSMFpXMXdkQ3NyTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjbVZ6ZEdGeWRGTjBjbVZoYlVGMWRHOXRZWFJwWTJGc2JIa29LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmU2s3WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdjMlYwSUhWd0lIUm9aU0JtYVc1aGJDQjNaV0pTZEdNZ2NHeGhlV1Z5SUdOdmJuUnliMnhzWlhJZ2JXVjBhRzlrY3lCbWNtOXRJSGRwZEdocGJpQnZkWElnWVhCd2JHbGpZWFJwYjI0Z2MyOGdZU0JqYjI1dVpXTjBhVzl1SUdOaGJpQmlaU0JoWTNScGRtRjBaV1JjYmlBZ0lDQWdJQ0FnZEdocGN5NXpaVzVrUkdWelkzSnBjSFJ2Y2tOdmJuUnliMnhzWlhJZ1BTQnVaWGNnVTJWdVpFUmxjMk55YVhCMGIzSkRiMjUwY205c2JHVnlLRnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVrWVhSaFEyaGhibTVsYkZObGJtUmxjaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YzNSeVpXRnRUV1Z6YzJGblpVTnZiblJ5YjJ4c1pYSmNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXpaVzVrVFdWemMyRm5aVU52Ym5SeWIyeHNaWElnUFNCdVpYY2dVMlZ1WkUxbGMzTmhaMlZEYjI1MGNtOXNiR1Z5S0Z4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1a1lYUmhRMmhoYm01bGJGTmxibVJsY2l4Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWMzUnlaV0Z0VFdWemMyRm5aVU52Ym5SeWIyeHNaWEpjYmlBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTUwYjFOMGNtVmhiV1Z5VFdWemMyRm5aWE5EYjI1MGNtOXNiR1Z5SUQwZ2JtVjNJRlJ2VTNSeVpXRnRaWEpOWlhOellXZGxjME52Ym5SeWIyeHNaWElvWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5ObGJtUk5aWE56WVdkbFEyOXVkSEp2Ykd4bGNseHVJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuSmxaMmx6ZEdWeVRXVnpjMkZuWlVoaGJtUnNaWEp6S0NrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YzNSeVpXRnRUV1Z6YzJGblpVTnZiblJ5YjJ4c1pYSXVjRzl3ZFd4aGRHVkVaV1poZFd4MFVISnZkRzlqYjJ3b0tUdGNibHh1SUNBZ0lDQWdJQ0IwYUdsekxtbHVjSFYwUTJ4aGMzTmxjMFpoWTNSdmNua2dQU0J1WlhjZ1NXNXdkWFJEYkdGemMyVnpSbUZqZEc5eWVTaGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjM1J5WldGdFRXVnpjMkZuWlVOdmJuUnliMnhzWlhJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuWnBaR1Z2VUd4aGVXVnlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVqYjI5eVpHbHVZWFJsUTI5dWRtVnlkR1Z5WEc0Z0lDQWdJQ0FnSUNrN1hHNWNiaUFnSUNBZ0lDQWdkR2hwY3k1cGMxVnphVzVuVTBaVklEMGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YVhOUmRXRnNhWFI1UTI5dWRISnZiR3hsY2lBOUlHWmhiSE5sTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbkJ5WldabGNuSmxaRU52WkdWaklEMGdKeWM3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjMmh2ZFd4a1VtVmpiMjV1WldOMElEMGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVwYzFKbFkyOXVibVZqZEdsdVp5QTlJR1poYkhObE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5KbFkyOXVibVZqZEVGMGRHVnRjSFFnUFNBd08xeHVYRzRnSUNBZ0lDQWdJSFJvYVhNdVkyOXVabWxuTGw5aFpHUlBiazl3ZEdsdmJsTmxkSFJwYm1kRGFHRnVaMlZrVEdsemRHVnVaWElvWEc0Z0lDQWdJQ0FnSUNBZ0lDQlBjSFJwYjI1UVlYSmhiV1YwWlhKekxsTjBjbVZoYldWeVNXUXNYRzRnSUNBZ0lDQWdJQ0FnSUNBb2MzUnlaV0Z0WlhKcFpDa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUtITjBjbVZoYldWeWFXUWdQVDA5SUZ3aVhDSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJR05zYjNObElIUm9aU0JqZFhKeVpXNTBJSEJsWlhJZ1kyOXVibVZqZEdsdmJpQmhibVFnWTNKbFlYUmxJR0VnYm1WM0lHOXVaVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWNHVmxja052Ym01bFkzUnBiMjVEYjI1MGNtOXNiR1Z5TG5CbFpYSkRiMjV1WldOMGFXOXVMbU5zYjNObEtDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1d1pXVnlRMjl1Ym1WamRHbHZia052Ym5SeWIyeHNaWEl1WTNKbFlYUmxVR1ZsY2tOdmJtNWxZM1JwYjI0b1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWNHVmxja052Ym1acFp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXdjbVZtWlhKeVpXUkRiMlJsWTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV6ZFdKelkzSnBZbVZrVTNSeVpXRnRJRDBnYzNSeVpXRnRaWEpwWkR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbmRsWWxOdlkydGxkRU52Ym5SeWIyeHNaWEl1YzJWdVpGTjFZbk5qY21saVpTaHpkSEpsWVcxbGNtbGtLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdLVHRjYmx4dUlDQWdJQ0FnSUNCMGFHbHpMbk5sZEZacFpHVnZSVzVqYjJSbGNrRjJaMUZRS0MweEtUdGNibHh1SUNBZ0lDQWdJQ0IwYUdsekxuTnBaMjVoYkd4cGJtZFZjbXhDZFdsc1pHVnlJRDBnSUNncElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J6YVdkdVlXeHNhVzVuVTJWeWRtVnlWWEpzSUQwZ2RHaHBjeTVqYjI1bWFXY3VaMlYwVkdWNGRGTmxkSFJwYm1kV1lXeDFaU2hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JVWlhoMFVHRnlZVzFsZEdWeWN5NVRhV2R1WVd4c2FXNW5VMlZ5ZG1WeVZYSnNYRzRnSUNBZ0lDQWdJQ0FnSUNBcE8xeHVJQ0FnSUZ4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnU1dZZ2QyVWdZWEpsSUdOdmJtNWxZM1JwYm1jZ2RHOGdkR2hsSUZOR1ZTQmhaR1FnWVNCemNHVmphV0ZzSUhWeWJDQndZWEpoYldWMFpYSWdkRzhnZEdobElIVnliRnh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVkyOXVabWxuTG1selJteGhaMFZ1WVdKc1pXUW9SbXhoWjNNdVFuSnZkM05sY2xObGJtUlBabVpsY2lrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnphV2R1WVd4c2FXNW5VMlZ5ZG1WeVZYSnNJQ3M5SUNjL0p5QXJJRVpzWVdkekxrSnliM2R6WlhKVFpXNWtUMlptWlhJZ0t5QW5QWFJ5ZFdVbk8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJRnh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdWR2hwY3lCamIyUmxJR2x6SUc1dklHeHZibWRsY2lCdVpXVmtaV1FzSUdKMWRDQnBjeUJoSUdkdmIyUWdaWGhoYlhCc1pTQm1iM0lnYUc5M0lITjFZbk5sY1hWbGJuUWdZMjl1Wm1sbklHWnNZV2R6SUdOaGJpQmlaU0JoY0hCbGJtUmxaRnh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdhV1lnS0hSb2FYTXVZMjl1Wm1sbkxtbHpSbXhoWjBWdVlXSnNaV1FvUm14aFozTXVRbkp2ZDNObGNsTmxibVJQWm1abGNpa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJQ0FnSUNCemFXZHVZV3hzYVc1blUyVnlkbVZ5VlhKc0lDczlJQ2h6YVdkdVlXeHNhVzVuVTJWeWRtVnlWWEpzTG1sdVkyeDFaR1Z6S0NjL0p5a2dQeUFuSmljZ09pQW5QeWNwSUNzZ1JteGhaM011UW5KdmQzTmxjbE5sYm1SUFptWmxjaUFySUNjOWRISjFaU2M3WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUI5WEc0Z0lDQWdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnYzJsbmJtRnNiR2x1WjFObGNuWmxjbFZ5YkR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFMWhhMlVnWVNCeVpYRjFaWE4wSUhSdklGVnVjWFZoYm5ScGVtVmtRVzVrUkdWdWIzSnRZV3hwZW1WVmJuTnBaMjVsWkNCamIyOXlaR2x1WVhSbGMxeHVJQ0FnSUNBcUlFQndZWEpoYlNCNElIZ2dZWGhwY3lCamIyOXlaR2x1WVhSbFhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUhrZ2VTQmhlR2x6SUdOdmIzSmthVzVoZEdWY2JpQWdJQ0FnS2k5Y2JpQWdJQ0J5WlhGMVpYTjBWVzV4ZFdGdWRHbDZaV1JCYm1SRVpXNXZjbTFoYkdsNlpWVnVjMmxuYm1Wa0tGeHVJQ0FnSUNBZ0lDQjRPaUJ1ZFcxaVpYSXNYRzRnSUNBZ0lDQWdJSGs2SUc1MWJXSmxjbHh1SUNBZ0lDazZJRlZ1Y1hWaGJuUnBlbVZrUkdWdWIzSnRZV3hwZW1Wa1ZXNXphV2R1WldSRGIyOXlaQ0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtTnZiM0prYVc1aGRHVkRiMjUyWlhKMFpYSXVkVzV4ZFdGdWRHbDZaVUZ1WkVSbGJtOXliV0ZzYVhwbFZXNXphV2R1WldRb2VDd2dlU2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nU0dGdVpHeGxjeUIzYUdWdUlHRWdiV1Z6YzJGblpTQnBjeUJ5WldObGFYWmxaRnh1SUNBZ0lDQXFJRUJ3WVhKaGJTQmxkbVZ1ZENBdElFMWxjM05oWjJVZ1JYWmxiblJjYmlBZ0lDQWdLaTljYmlBZ0lDQm9ZVzVrYkdWUGJrMWxjM05oWjJVb1pYWmxiblE2SUUxbGMzTmhaMlZGZG1WdWRDa2dlMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQnRaWE56WVdkbElEMGdibVYzSUZWcGJuUTRRWEp5WVhrb1pYWmxiblF1WkdGMFlTazdYRzRnSUNBZ0lDQWdJRXh2WjJkbGNpNU1iMmNvVEc5bloyVnlMa2RsZEZOMFlXTnJWSEpoWTJVb0tTd2dKMDFsYzNOaFoyVWdhVzVqYjIxcGJtYzZKeUFySUcxbGMzTmhaMlVzSURZcE8xeHVYRzRnSUNBZ0lDQWdJQzh2ZEhKNUlIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2JXVnpjMkZuWlZSNWNHVWdQVnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV6ZEhKbFlXMU5aWE56WVdkbFEyOXVkSEp2Ykd4bGNpNW1jbTl0VTNSeVpXRnRaWEpOWlhOellXZGxjeTVuWlhSR2NtOXRWbUZzZFdVb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JXVnpjMkZuWlZzd1hWeHVJQ0FnSUNBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV6ZEhKbFlXMU5aWE56WVdkbFEyOXVkSEp2Ykd4bGNpNW1jbTl0VTNSeVpXRnRaWEpJWVc1a2JHVnljeTVuWlhRb2JXVnpjMkZuWlZSNWNHVXBLRnh1SUNBZ0lDQWdJQ0FnSUNBZ1pYWmxiblF1WkdGMFlWeHVJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0F2TDMwZ1kyRjBZMmdnS0dVcElIdGNiaUFnSUNBZ0lDQWdMeTlNYjJkblpYSXVSWEp5YjNJb1RHOW5aMlZ5TGtkbGRGTjBZV05yVkhKaFkyVW9LU3dnWUVOMWMzUnZiU0JrWVhSaElHTm9ZVzV1Wld3Z2JXVnpjMkZuWlNCM2FYUm9JRzFsYzNOaFoyVWdkSGx3WlNCMGFHRjBJR2x6SUhWdWEyNXZkMjRnZEc4Z2RHaGxJRkJwZUdWc0lGTjBjbVZoYldsdVp5QndjbTkwYjJOdmJDNGdSRzlsY3lCNWIzVnlJRkJwZUdWc1UzUnlaV0Z0YVc1blVISnZkRzlqYjJ3Z2JtVmxaQ0IxY0dSaGRHbHVaejhnVkdobElHMWxjM05oWjJVZ2RIbHdaU0IzWVhNNklDUjdiV1Z6YzJGblpWc3dYWDFnS1R0Y2JpQWdJQ0FnSUNBZ0x5OTlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dVbVZuYVhOMFpYSWdiV1Z6YzJGblpTQmhiR3dnYUdGdVpHeGxjbk5jYmlBZ0lDQWdLaTljYmlBZ0lDQnlaV2RwYzNSbGNrMWxjM05oWjJWSVlXNWtiR1Z5Y3lncElIdGNiaUFnSUNBZ0lDQWdMeThnUm5KdmJTQlRkSEpsWVcxbGNseHVJQ0FnSUNBZ0lDQXZMeUJOWlhOellXZGxJR1YyWlc1MGN5Qm1jbTl0SUhSb1pTQnpkSEpsWVcxbGNpQm9ZWFpsSUdFZ1pHRjBZU0IwZVhCbElHOW1JRUZ5Y21GNVFuVm1abVZ5SUdGeklIZGxJR1p2Y21ObElIUm9hWE1nZEhsd1pTQnBiaUIwYUdVZ1JHRjBZV05vWVc1dVpXeERiMjUwY205c2JHVnlYRzRnSUNBZ0lDQWdJSFJvYVhNdWMzUnlaV0Z0VFdWemMyRm5aVU52Ym5SeWIyeHNaWEl1Y21WbmFYTjBaWEpOWlhOellXZGxTR0Z1Wkd4bGNpaGNiaUFnSUNBZ0lDQWdJQ0FnSUUxbGMzTmhaMlZFYVhKbFkzUnBiMjR1Um5KdmJWTjBjbVZoYldWeUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSjFGMVlXeHBkSGxEYjI1MGNtOXNUM2R1WlhKemFHbHdKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDaGtZWFJoT2lCQmNuSmhlVUoxWm1abGNpa2dQVDRnZEdocGN5NXZibEYxWVd4cGRIbERiMjUwY205c1QzZHVaWEp6YUdsd0tHUmhkR0VwWEc0Z0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YzNSeVpXRnRUV1Z6YzJGblpVTnZiblJ5YjJ4c1pYSXVjbVZuYVhOMFpYSk5aWE56WVdkbFNHRnVaR3hsY2loY2JpQWdJQ0FnSUNBZ0lDQWdJRTFsYzNOaFoyVkVhWEpsWTNScGIyNHVSbkp2YlZOMGNtVmhiV1Z5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdKMUpsYzNCdmJuTmxKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDaGtZWFJoT2lCQmNuSmhlVUoxWm1abGNpa2dQVDRnZEdocGN5NXlaWE53YjI1elpVTnZiblJ5YjJ4c1pYSXViMjVTWlhOd2IyNXpaU2hrWVhSaEtWeHVJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuTjBjbVZoYlUxbGMzTmhaMlZEYjI1MGNtOXNiR1Z5TG5KbFoybHpkR1Z5VFdWemMyRm5aVWhoYm1Sc1pYSW9YRzRnSUNBZ0lDQWdJQ0FnSUNCTlpYTnpZV2RsUkdseVpXTjBhVzl1TGtaeWIyMVRkSEpsWVcxbGNpeGNiaUFnSUNBZ0lDQWdJQ0FnSUNkRGIyMXRZVzVrSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ2hrWVhSaE9pQkJjbkpoZVVKMVptWmxjaWtnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YjI1RGIyMXRZVzVrS0dSaGRHRXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuTjBjbVZoYlUxbGMzTmhaMlZEYjI1MGNtOXNiR1Z5TG5KbFoybHpkR1Z5VFdWemMyRm5aVWhoYm1Sc1pYSW9YRzRnSUNBZ0lDQWdJQ0FnSUNCTlpYTnpZV2RsUkdseVpXTjBhVzl1TGtaeWIyMVRkSEpsWVcxbGNpeGNiaUFnSUNBZ0lDQWdJQ0FnSUNkR2NtVmxlbVZHY21GdFpTY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBb1pHRjBZVG9nUVhKeVlYbENkV1ptWlhJcElEMCtJSFJvYVhNdWIyNUdjbVZsZW1WR2NtRnRaVTFsYzNOaFoyVW9aR0YwWVNsY2JpQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1emRISmxZVzFOWlhOellXZGxRMjl1ZEhKdmJHeGxjaTV5WldkcGMzUmxjazFsYzNOaFoyVklZVzVrYkdWeUtGeHVJQ0FnSUNBZ0lDQWdJQ0FnVFdWemMyRm5aVVJwY21WamRHbHZiaTVHY205dFUzUnlaV0Z0WlhJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FuVlc1bWNtVmxlbVZHY21GdFpTY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBb0tTQTlQaUIwYUdsekxtbHVkbUZzYVdSaGRHVkdjbVZsZW1WR2NtRnRaVUZ1WkVWdVlXSnNaVlpwWkdWdktDbGNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXpkSEpsWVcxTlpYTnpZV2RsUTI5dWRISnZiR3hsY2k1eVpXZHBjM1JsY2sxbGMzTmhaMlZJWVc1a2JHVnlLRnh1SUNBZ0lDQWdJQ0FnSUNBZ1RXVnpjMkZuWlVScGNtVmpkR2x2Ymk1R2NtOXRVM1J5WldGdFpYSXNYRzRnSUNBZ0lDQWdJQ0FnSUNBblZtbGtaVzlGYm1OdlpHVnlRWFpuVVZBbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnS0dSaGRHRTZJRUZ5Y21GNVFuVm1abVZ5S1NBOVBpQjBhR2x6TG1oaGJtUnNaVlpwWkdWdlJXNWpiMlJsY2tGMloxRlFLR1JoZEdFcFhHNGdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdWMzUnlaV0Z0VFdWemMyRm5aVU52Ym5SeWIyeHNaWEl1Y21WbmFYTjBaWEpOWlhOellXZGxTR0Z1Wkd4bGNpaGNiaUFnSUNBZ0lDQWdJQ0FnSUUxbGMzTmhaMlZFYVhKbFkzUnBiMjR1Um5KdmJWTjBjbVZoYldWeUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSjB4aGRHVnVZM2xVWlhOMEp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNoa1lYUmhPaUJCY25KaGVVSjFabVpsY2lrZ1BUNGdkR2hwY3k1b1lXNWtiR1ZNWVhSbGJtTjVWR1Z6ZEZKbGMzVnNkQ2hrWVhSaEtWeHVJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuTjBjbVZoYlUxbGMzTmhaMlZEYjI1MGNtOXNiR1Z5TG5KbFoybHpkR1Z5VFdWemMyRm5aVWhoYm1Sc1pYSW9YRzRnSUNBZ0lDQWdJQ0FnSUNCTlpYTnpZV2RsUkdseVpXTjBhVzl1TGtaeWIyMVRkSEpsWVcxbGNpeGNiaUFnSUNBZ0lDQWdJQ0FnSUNkSmJtbDBhV0ZzVTJWMGRHbHVaM01uTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdLR1JoZEdFNklFRnljbUY1UW5WbVptVnlLU0E5UGlCMGFHbHpMbWhoYm1Sc1pVbHVhWFJwWVd4VFpYUjBhVzVuY3loa1lYUmhLVnh1SUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbk4wY21WaGJVMWxjM05oWjJWRGIyNTBjbTlzYkdWeUxuSmxaMmx6ZEdWeVRXVnpjMkZuWlVoaGJtUnNaWElvWEc0Z0lDQWdJQ0FnSUNBZ0lDQk5aWE56WVdkbFJHbHlaV04wYVc5dUxrWnliMjFUZEhKbFlXMWxjaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDZEdhV3hsUlhoMFpXNXphVzl1Snl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ2hrWVhSaE9pQkJjbkpoZVVKMVptWmxjaWtnUFQ0Z2RHaHBjeTV2YmtacGJHVkZlSFJsYm5OcGIyNG9aR0YwWVNsY2JpQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1emRISmxZVzFOWlhOellXZGxRMjl1ZEhKdmJHeGxjaTV5WldkcGMzUmxjazFsYzNOaFoyVklZVzVrYkdWeUtGeHVJQ0FnSUNBZ0lDQWdJQ0FnVFdWemMyRm5aVVJwY21WamRHbHZiaTVHY205dFUzUnlaV0Z0WlhJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FuUm1sc1pVMXBiV1ZVZVhCbEp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNoa1lYUmhPaUJCY25KaGVVSjFabVpsY2lrZ1BUNGdkR2hwY3k1dmJrWnBiR1ZOYVcxbFZIbHdaU2hrWVhSaEtWeHVJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuTjBjbVZoYlUxbGMzTmhaMlZEYjI1MGNtOXNiR1Z5TG5KbFoybHpkR1Z5VFdWemMyRm5aVWhoYm1Sc1pYSW9YRzRnSUNBZ0lDQWdJQ0FnSUNCTlpYTnpZV2RsUkdseVpXTjBhVzl1TGtaeWIyMVRkSEpsWVcxbGNpeGNiaUFnSUNBZ0lDQWdJQ0FnSUNkR2FXeGxRMjl1ZEdWdWRITW5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ0tHUmhkR0U2SUVGeWNtRjVRblZtWm1WeUtTQTlQaUIwYUdsekxtOXVSbWxzWlVOdmJuUmxiblJ6S0dSaGRHRXBYRzRnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjM1J5WldGdFRXVnpjMkZuWlVOdmJuUnliMnhzWlhJdWNtVm5hWE4wWlhKTlpYTnpZV2RsU0dGdVpHeGxjaWhjYmlBZ0lDQWdJQ0FnSUNBZ0lFMWxjM05oWjJWRWFYSmxZM1JwYjI0dVJuSnZiVk4wY21WaGJXVnlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0oxUmxjM1JGWTJodkp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNncElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2S2lCRWJ5QnViM1JvYVc1bklDb3ZYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdWMzUnlaV0Z0VFdWemMyRm5aVU52Ym5SeWIyeHNaWEl1Y21WbmFYTjBaWEpOWlhOellXZGxTR0Z1Wkd4bGNpaGNiaUFnSUNBZ0lDQWdJQ0FnSUUxbGMzTmhaMlZFYVhKbFkzUnBiMjR1Um5KdmJWTjBjbVZoYldWeUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSjBsdWNIVjBRMjl1ZEhKdmJFOTNibVZ5YzJocGNDY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBb1pHRjBZVG9nUVhKeVlYbENkV1ptWlhJcElEMCtJSFJvYVhNdWIyNUpibkIxZEVOdmJuUnliMnhQZDI1bGNuTm9hWEFvWkdGMFlTbGNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXpkSEpsWVcxTlpYTnpZV2RsUTI5dWRISnZiR3hsY2k1eVpXZHBjM1JsY2sxbGMzTmhaMlZJWVc1a2JHVnlLRnh1SUNBZ0lDQWdJQ0FnSUNBZ1RXVnpjMkZuWlVScGNtVmpkR2x2Ymk1R2NtOXRVM1J5WldGdFpYSXNYRzRnSUNBZ0lDQWdJQ0FnSUNBblIyRnRaWEJoWkZKbGMzQnZibk5sSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ2hrWVhSaE9pQkJjbkpoZVVKMVptWmxjaWtnUFQ0Z2RHaHBjeTV2YmtkaGJXVndZV1JTWlhOd2IyNXpaU2hrWVhSaEtWeHVJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuTjBjbVZoYlUxbGMzTmhaMlZEYjI1MGNtOXNiR1Z5TG5KbFoybHpkR1Z5VFdWemMyRm5aVWhoYm1Sc1pYSW9YRzRnSUNBZ0lDQWdJQ0FnSUNCTlpYTnpZV2RsUkdseVpXTjBhVzl1TGtaeWIyMVRkSEpsWVcxbGNpeGNiaUFnSUNBZ0lDQWdJQ0FnSUNkUWNtOTBiMk52YkNjc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FvWkdGMFlUb2dRWEp5WVhsQ2RXWm1aWElwSUQwK0lIUm9hWE11YjI1UWNtOTBiMk52YkUxbGMzTmhaMlVvWkdGMFlTbGNiaUFnSUNBZ0lDQWdLVHRjYmx4dUlDQWdJQ0FnSUNBdkx5QlVieUJUZEhKbFlXMWxjbHh1SUNBZ0lDQWdJQ0IwYUdsekxuTjBjbVZoYlUxbGMzTmhaMlZEYjI1MGNtOXNiR1Z5TG5KbFoybHpkR1Z5VFdWemMyRm5aVWhoYm1Sc1pYSW9YRzRnSUNBZ0lDQWdJQ0FnSUNCTlpYTnpZV2RsUkdseVpXTjBhVzl1TGxSdlUzUnlaV0Z0WlhJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FuU1VaeVlXMWxVbVZ4ZFdWemRDY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBb0tTQTlQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWMyVnVaRTFsYzNOaFoyVkRiMjUwY205c2JHVnlMbk5sYm1STlpYTnpZV2RsVkc5VGRISmxZVzFsY2loY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKMGxHY21GdFpWSmxjWFZsYzNRblhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tWeHVJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuTjBjbVZoYlUxbGMzTmhaMlZEYjI1MGNtOXNiR1Z5TG5KbFoybHpkR1Z5VFdWemMyRm5aVWhoYm1Sc1pYSW9YRzRnSUNBZ0lDQWdJQ0FnSUNCTlpYTnpZV2RsUkdseVpXTjBhVzl1TGxSdlUzUnlaV0Z0WlhJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FuVW1WeGRXVnpkRkYxWVd4cGRIbERiMjUwY205c0p5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNncElEMCtYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1elpXNWtUV1Z6YzJGblpVTnZiblJ5YjJ4c1pYSXVjMlZ1WkUxbGMzTmhaMlZVYjFOMGNtVmhiV1Z5S0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5VbVZ4ZFdWemRGRjFZV3hwZEhsRGIyNTBjbTlzSjF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNsY2JpQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1emRISmxZVzFOWlhOellXZGxRMjl1ZEhKdmJHeGxjaTV5WldkcGMzUmxjazFsYzNOaFoyVklZVzVrYkdWeUtGeHVJQ0FnSUNBZ0lDQWdJQ0FnVFdWemMyRm5aVVJwY21WamRHbHZiaTVVYjFOMGNtVmhiV1Z5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdKMFp3YzFKbGNYVmxjM1FuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdLQ2tnUFQ0Z2RHaHBjeTV6Wlc1a1RXVnpjMkZuWlVOdmJuUnliMnhzWlhJdWMyVnVaRTFsYzNOaFoyVlViMU4wY21WaGJXVnlLQ2RHY0hOU1pYRjFaWE4wSnlsY2JpQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1emRISmxZVzFOWlhOellXZGxRMjl1ZEhKdmJHeGxjaTV5WldkcGMzUmxjazFsYzNOaFoyVklZVzVrYkdWeUtGeHVJQ0FnSUNBZ0lDQWdJQ0FnVFdWemMyRm5aVVJwY21WamRHbHZiaTVVYjFOMGNtVmhiV1Z5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdKMEYyWlhKaFoyVkNhWFJ5WVhSbFVtVnhkV1Z6ZENjc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FvS1NBOVBseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YzJWdVpFMWxjM05oWjJWRGIyNTBjbTlzYkdWeUxuTmxibVJOWlhOellXZGxWRzlUZEhKbFlXMWxjaWhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0owRjJaWEpoWjJWQ2FYUnlZWFJsVW1WeGRXVnpkQ2RjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FwWEc0Z0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YzNSeVpXRnRUV1Z6YzJGblpVTnZiblJ5YjJ4c1pYSXVjbVZuYVhOMFpYSk5aWE56WVdkbFNHRnVaR3hsY2loY2JpQWdJQ0FnSUNBZ0lDQWdJRTFsYzNOaFoyVkVhWEpsWTNScGIyNHVWRzlUZEhKbFlXMWxjaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDZFRkR0Z5ZEZOMGNtVmhiV2x1Wnljc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FvS1NBOVBseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YzJWdVpFMWxjM05oWjJWRGIyNTBjbTlzYkdWeUxuTmxibVJOWlhOellXZGxWRzlUZEhKbFlXMWxjaWhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0oxTjBZWEowVTNSeVpXRnRhVzVuSjF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNsY2JpQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1emRISmxZVzFOWlhOellXZGxRMjl1ZEhKdmJHeGxjaTV5WldkcGMzUmxjazFsYzNOaFoyVklZVzVrYkdWeUtGeHVJQ0FnSUNBZ0lDQWdJQ0FnVFdWemMyRm5aVVJwY21WamRHbHZiaTVVYjFOMGNtVmhiV1Z5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdKMU4wYjNCVGRISmxZVzFwYm1jbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnS0NrZ1BUNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5ObGJtUk5aWE56WVdkbFEyOXVkSEp2Ykd4bGNpNXpaVzVrVFdWemMyRm5aVlJ2VTNSeVpXRnRaWElvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDZFRkRzl3VTNSeVpXRnRhVzVuSjF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNsY2JpQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1emRISmxZVzFOWlhOellXZGxRMjl1ZEhKdmJHeGxjaTV5WldkcGMzUmxjazFsYzNOaFoyVklZVzVrYkdWeUtGeHVJQ0FnSUNBZ0lDQWdJQ0FnVFdWemMyRm5aVVJwY21WamRHbHZiaTVVYjFOMGNtVmhiV1Z5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdKMHhoZEdWdVkzbFVaWE4wSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ2dwSUQwK1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV6Wlc1a1RXVnpjMkZuWlVOdmJuUnliMnhzWlhJdWMyVnVaRTFsYzNOaFoyVlViMU4wY21WaGJXVnlLQ2RNWVhSbGJtTjVWR1Z6ZENjcFhHNGdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdWMzUnlaV0Z0VFdWemMyRm5aVU52Ym5SeWIyeHNaWEl1Y21WbmFYTjBaWEpOWlhOellXZGxTR0Z1Wkd4bGNpaGNiaUFnSUNBZ0lDQWdJQ0FnSUUxbGMzTmhaMlZFYVhKbFkzUnBiMjR1Vkc5VGRISmxZVzFsY2l4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ2RTWlhGMVpYTjBTVzVwZEdsaGJGTmxkSFJwYm1kekp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNncElEMCtYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1elpXNWtUV1Z6YzJGblpVTnZiblJ5YjJ4c1pYSXVjMlZ1WkUxbGMzTmhaMlZVYjFOMGNtVmhiV1Z5S0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5VbVZ4ZFdWemRFbHVhWFJwWVd4VFpYUjBhVzVuY3lkY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBcFhHNGdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdWMzUnlaV0Z0VFdWemMyRm5aVU52Ym5SeWIyeHNaWEl1Y21WbmFYTjBaWEpOWlhOellXZGxTR0Z1Wkd4bGNpaGNiaUFnSUNBZ0lDQWdJQ0FnSUUxbGMzTmhaMlZFYVhKbFkzUnBiMjR1Vkc5VGRISmxZVzFsY2l4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ2RVWlhOMFJXTm9ieWNzWEc0Z0lDQWdJQ0FnSUNBZ0lDQW9LU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5b2dSRzhnYm05MGFHbHVaeUFxTDF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbk4wY21WaGJVMWxjM05oWjJWRGIyNTBjbTlzYkdWeUxuSmxaMmx6ZEdWeVRXVnpjMkZuWlVoaGJtUnNaWElvWEc0Z0lDQWdJQ0FnSUNBZ0lDQk5aWE56WVdkbFJHbHlaV04wYVc5dUxsUnZVM1J5WldGdFpYSXNYRzRnSUNBZ0lDQWdJQ0FnSUNBblZVbEpiblJsY21GamRHbHZiaWNzWEc0Z0lDQWdJQ0FnSUNBZ0lDQW9aR0YwWVRvZ2IySnFaV04wS1NBOVBseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YzJWdVpFUmxjMk55YVhCMGIzSkRiMjUwY205c2JHVnlMbVZ0YVhSVlNVbHVkR1Z5WVdOMGFXOXVLR1JoZEdFcFhHNGdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdWMzUnlaV0Z0VFdWemMyRm5aVU52Ym5SeWIyeHNaWEl1Y21WbmFYTjBaWEpOWlhOellXZGxTR0Z1Wkd4bGNpaGNiaUFnSUNBZ0lDQWdJQ0FnSUUxbGMzTmhaMlZFYVhKbFkzUnBiMjR1Vkc5VGRISmxZVzFsY2l4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ2REYjIxdFlXNWtKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDaGtZWFJoT2lCdlltcGxZM1FwSUQwK0lIUm9hWE11YzJWdVpFUmxjMk55YVhCMGIzSkRiMjUwY205c2JHVnlMbVZ0YVhSRGIyMXRZVzVrS0dSaGRHRXBYRzRnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjM1J5WldGdFRXVnpjMkZuWlVOdmJuUnliMnhzWlhJdWNtVm5hWE4wWlhKTlpYTnpZV2RsU0dGdVpHeGxjaWhjYmlBZ0lDQWdJQ0FnSUNBZ0lFMWxjM05oWjJWRWFYSmxZM1JwYjI0dVZHOVRkSEpsWVcxbGNpeGNiaUFnSUNBZ0lDQWdJQ0FnSUNkTFpYbEViM2R1Snl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ2hrWVhSaE9pQkJjbkpoZVR4dWRXMWlaWEkrS1NBOVBseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YzJWdVpFMWxjM05oWjJWRGIyNTBjbTlzYkdWeUxuTmxibVJOWlhOellXZGxWRzlUZEhKbFlXMWxjaWhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0owdGxlVVJ2ZDI0bkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrWVhSaFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tWeHVJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuTjBjbVZoYlUxbGMzTmhaMlZEYjI1MGNtOXNiR1Z5TG5KbFoybHpkR1Z5VFdWemMyRm5aVWhoYm1Sc1pYSW9YRzRnSUNBZ0lDQWdJQ0FnSUNCTlpYTnpZV2RsUkdseVpXTjBhVzl1TGxSdlUzUnlaV0Z0WlhJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FuUzJWNVZYQW5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ0tHUmhkR0U2SUVGeWNtRjVQRzUxYldKbGNqNHBJRDArWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXpaVzVrVFdWemMyRm5aVU52Ym5SeWIyeHNaWEl1YzJWdVpFMWxjM05oWjJWVWIxTjBjbVZoYldWeUtDZExaWGxWY0Njc0lHUmhkR0VwWEc0Z0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YzNSeVpXRnRUV1Z6YzJGblpVTnZiblJ5YjJ4c1pYSXVjbVZuYVhOMFpYSk5aWE56WVdkbFNHRnVaR3hsY2loY2JpQWdJQ0FnSUNBZ0lDQWdJRTFsYzNOaFoyVkVhWEpsWTNScGIyNHVWRzlUZEhKbFlXMWxjaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDZExaWGxRY21WemN5Y3NYRzRnSUNBZ0lDQWdJQ0FnSUNBb1pHRjBZVG9nUVhKeVlYazhiblZ0WW1WeVBpa2dQVDVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuTmxibVJOWlhOellXZGxRMjl1ZEhKdmJHeGxjaTV6Wlc1a1RXVnpjMkZuWlZSdlUzUnlaV0Z0WlhJb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2RMWlhsUWNtVnpjeWNzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUmhkR0ZjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FwWEc0Z0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YzNSeVpXRnRUV1Z6YzJGblpVTnZiblJ5YjJ4c1pYSXVjbVZuYVhOMFpYSk5aWE56WVdkbFNHRnVaR3hsY2loY2JpQWdJQ0FnSUNBZ0lDQWdJRTFsYzNOaFoyVkVhWEpsWTNScGIyNHVWRzlUZEhKbFlXMWxjaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDZE5iM1Z6WlVWdWRHVnlKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDaGtZWFJoT2lCQmNuSmhlVHh1ZFcxaVpYSStLU0E5UGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjMlZ1WkUxbGMzTmhaMlZEYjI1MGNtOXNiR1Z5TG5ObGJtUk5aWE56WVdkbFZHOVRkSEpsWVcxbGNpaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSjAxdmRYTmxSVzUwWlhJbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrWVhSaFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tWeHVJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuTjBjbVZoYlUxbGMzTmhaMlZEYjI1MGNtOXNiR1Z5TG5KbFoybHpkR1Z5VFdWemMyRm5aVWhoYm1Sc1pYSW9YRzRnSUNBZ0lDQWdJQ0FnSUNCTlpYTnpZV2RsUkdseVpXTjBhVzl1TGxSdlUzUnlaV0Z0WlhJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FuVFc5MWMyVk1aV0YyWlNjc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FvWkdGMFlUb2dRWEp5WVhrOGJuVnRZbVZ5UGlrZ1BUNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5ObGJtUk5aWE56WVdkbFEyOXVkSEp2Ykd4bGNpNXpaVzVrVFdWemMyRm5aVlJ2VTNSeVpXRnRaWElvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDZE5iM1Z6WlV4bFlYWmxKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHRjBZVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2xjYmlBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV6ZEhKbFlXMU5aWE56WVdkbFEyOXVkSEp2Ykd4bGNpNXlaV2RwYzNSbGNrMWxjM05oWjJWSVlXNWtiR1Z5S0Z4dUlDQWdJQ0FnSUNBZ0lDQWdUV1Z6YzJGblpVUnBjbVZqZEdsdmJpNVViMU4wY21WaGJXVnlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0owMXZkWE5sUkc5M2JpY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBb1pHRjBZVG9nUVhKeVlYazhiblZ0WW1WeVBpa2dQVDVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuTmxibVJOWlhOellXZGxRMjl1ZEhKdmJHeGxjaTV6Wlc1a1RXVnpjMkZuWlZSdlUzUnlaV0Z0WlhJb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2ROYjNWelpVUnZkMjRuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmtZWFJoWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS1Z4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5OMGNtVmhiVTFsYzNOaFoyVkRiMjUwY205c2JHVnlMbkpsWjJsemRHVnlUV1Z6YzJGblpVaGhibVJzWlhJb1hHNGdJQ0FnSUNBZ0lDQWdJQ0JOWlhOellXZGxSR2x5WldOMGFXOXVMbFJ2VTNSeVpXRnRaWElzWEc0Z0lDQWdJQ0FnSUNBZ0lDQW5UVzkxYzJWVmNDY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBb1pHRjBZVG9nUVhKeVlYazhiblZ0WW1WeVBpa2dQVDVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuTmxibVJOWlhOellXZGxRMjl1ZEhKdmJHeGxjaTV6Wlc1a1RXVnpjMkZuWlZSdlUzUnlaV0Z0WlhJb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2ROYjNWelpWVndKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHRjBZVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2xjYmlBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV6ZEhKbFlXMU5aWE56WVdkbFEyOXVkSEp2Ykd4bGNpNXlaV2RwYzNSbGNrMWxjM05oWjJWSVlXNWtiR1Z5S0Z4dUlDQWdJQ0FnSUNBZ0lDQWdUV1Z6YzJGblpVUnBjbVZqZEdsdmJpNVViMU4wY21WaGJXVnlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0owMXZkWE5sVFc5MlpTY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBb1pHRjBZVG9nUVhKeVlYazhiblZ0WW1WeVBpa2dQVDVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuTmxibVJOWlhOellXZGxRMjl1ZEhKdmJHeGxjaTV6Wlc1a1RXVnpjMkZuWlZSdlUzUnlaV0Z0WlhJb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2ROYjNWelpVMXZkbVVuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmtZWFJoWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS1Z4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5OMGNtVmhiVTFsYzNOaFoyVkRiMjUwY205c2JHVnlMbkpsWjJsemRHVnlUV1Z6YzJGblpVaGhibVJzWlhJb1hHNGdJQ0FnSUNBZ0lDQWdJQ0JOWlhOellXZGxSR2x5WldOMGFXOXVMbFJ2VTNSeVpXRnRaWElzWEc0Z0lDQWdJQ0FnSUNBZ0lDQW5UVzkxYzJWWGFHVmxiQ2NzWEc0Z0lDQWdJQ0FnSUNBZ0lDQW9aR0YwWVRvZ1FYSnlZWGs4Ym5WdFltVnlQaWtnUFQ1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbk5sYm1STlpYTnpZV2RsUTI5dWRISnZiR3hsY2k1elpXNWtUV1Z6YzJGblpWUnZVM1J5WldGdFpYSW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNkTmIzVnpaVmRvWldWc0p5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkdGMFlWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDbGNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXpkSEpsWVcxTlpYTnpZV2RsUTI5dWRISnZiR3hsY2k1eVpXZHBjM1JsY2sxbGMzTmhaMlZJWVc1a2JHVnlLRnh1SUNBZ0lDQWdJQ0FnSUNBZ1RXVnpjMkZuWlVScGNtVmpkR2x2Ymk1VWIxTjBjbVZoYldWeUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSjAxdmRYTmxSRzkxWW14bEp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNoa1lYUmhPaUJCY25KaGVUeHVkVzFpWlhJK0tTQTlQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWMyVnVaRTFsYzNOaFoyVkRiMjUwY205c2JHVnlMbk5sYm1STlpYTnpZV2RsVkc5VGRISmxZVzFsY2loY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKMDF2ZFhObFJHOTFZbXhsSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR0YwWVZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNsY2JpQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1emRISmxZVzFOWlhOellXZGxRMjl1ZEhKdmJHeGxjaTV5WldkcGMzUmxjazFsYzNOaFoyVklZVzVrYkdWeUtGeHVJQ0FnSUNBZ0lDQWdJQ0FnVFdWemMyRm5aVVJwY21WamRHbHZiaTVVYjFOMGNtVmhiV1Z5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdKMVJ2ZFdOb1UzUmhjblFuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdLR1JoZEdFNklFRnljbUY1UEc1MWJXSmxjajRwSUQwK1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV6Wlc1a1RXVnpjMkZuWlVOdmJuUnliMnhzWlhJdWMyVnVaRTFsYzNOaFoyVlViMU4wY21WaGJXVnlLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBblZHOTFZMmhUZEdGeWRDY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSaGRHRmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXBYRzRnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjM1J5WldGdFRXVnpjMkZuWlVOdmJuUnliMnhzWlhJdWNtVm5hWE4wWlhKTlpYTnpZV2RsU0dGdVpHeGxjaWhjYmlBZ0lDQWdJQ0FnSUNBZ0lFMWxjM05oWjJWRWFYSmxZM1JwYjI0dVZHOVRkSEpsWVcxbGNpeGNiaUFnSUNBZ0lDQWdJQ0FnSUNkVWIzVmphRVZ1WkNjc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FvWkdGMFlUb2dRWEp5WVhrOGJuVnRZbVZ5UGlrZ1BUNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5ObGJtUk5aWE56WVdkbFEyOXVkSEp2Ykd4bGNpNXpaVzVrVFdWemMyRm5aVlJ2VTNSeVpXRnRaWElvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDZFViM1ZqYUVWdVpDY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSaGRHRmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXBYRzRnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjM1J5WldGdFRXVnpjMkZuWlVOdmJuUnliMnhzWlhJdWNtVm5hWE4wWlhKTlpYTnpZV2RsU0dGdVpHeGxjaWhjYmlBZ0lDQWdJQ0FnSUNBZ0lFMWxjM05oWjJWRWFYSmxZM1JwYjI0dVZHOVRkSEpsWVcxbGNpeGNiaUFnSUNBZ0lDQWdJQ0FnSUNkVWIzVmphRTF2ZG1VbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnS0dSaGRHRTZJRUZ5Y21GNVBHNTFiV0psY2o0cElEMCtYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1elpXNWtUV1Z6YzJGblpVTnZiblJ5YjJ4c1pYSXVjMlZ1WkUxbGMzTmhaMlZVYjFOMGNtVmhiV1Z5S0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5WRzkxWTJoTmIzWmxKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHRjBZVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2xjYmlBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV6ZEhKbFlXMU5aWE56WVdkbFEyOXVkSEp2Ykd4bGNpNXlaV2RwYzNSbGNrMWxjM05oWjJWSVlXNWtiR1Z5S0Z4dUlDQWdJQ0FnSUNBZ0lDQWdUV1Z6YzJGblpVUnBjbVZqZEdsdmJpNVViMU4wY21WaGJXVnlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0owZGhiV1Z3WVdSRGIyNXVaV04wWldRbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnS0NrZ1BUNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5ObGJtUk5aWE56WVdkbFEyOXVkSEp2Ykd4bGNpNXpaVzVrVFdWemMyRm5aVlJ2VTNSeVpXRnRaWElvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDZEhZVzFsY0dGa1EyOXVibVZqZEdWa0oxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDbGNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXpkSEpsWVcxTlpYTnpZV2RsUTI5dWRISnZiR3hsY2k1eVpXZHBjM1JsY2sxbGMzTmhaMlZJWVc1a2JHVnlLRnh1SUNBZ0lDQWdJQ0FnSUNBZ1RXVnpjMkZuWlVScGNtVmpkR2x2Ymk1VWIxTjBjbVZoYldWeUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSjBkaGJXVndZV1JDZFhSMGIyNVFjbVZ6YzJWa0p5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNoa1lYUmhPaUJCY25KaGVUeHVkVzFpWlhJK0tTQTlQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWMyVnVaRTFsYzNOaFoyVkRiMjUwY205c2JHVnlMbk5sYm1STlpYTnpZV2RsVkc5VGRISmxZVzFsY2loY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKMGRoYldWd1lXUkNkWFIwYjI1UWNtVnpjMlZrSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR0YwWVZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNsY2JpQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1emRISmxZVzFOWlhOellXZGxRMjl1ZEhKdmJHeGxjaTV5WldkcGMzUmxjazFsYzNOaFoyVklZVzVrYkdWeUtGeHVJQ0FnSUNBZ0lDQWdJQ0FnVFdWemMyRm5aVVJwY21WamRHbHZiaTVVYjFOMGNtVmhiV1Z5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdKMGRoYldWd1lXUkNkWFIwYjI1U1pXeGxZWE5sWkNjc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FvWkdGMFlUb2dRWEp5WVhrOGJuVnRZbVZ5UGlrZ1BUNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5ObGJtUk5aWE56WVdkbFEyOXVkSEp2Ykd4bGNpNXpaVzVrVFdWemMyRm5aVlJ2VTNSeVpXRnRaWElvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDZEhZVzFsY0dGa1FuVjBkRzl1VW1Wc1pXRnpaV1FuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmtZWFJoWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS1Z4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5OMGNtVmhiVTFsYzNOaFoyVkRiMjUwY205c2JHVnlMbkpsWjJsemRHVnlUV1Z6YzJGblpVaGhibVJzWlhJb1hHNGdJQ0FnSUNBZ0lDQWdJQ0JOWlhOellXZGxSR2x5WldOMGFXOXVMbFJ2VTNSeVpXRnRaWElzWEc0Z0lDQWdJQ0FnSUNBZ0lDQW5SMkZ0WlhCaFpFRnVZV3h2Wnljc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FvWkdGMFlUb2dRWEp5WVhrOGJuVnRZbVZ5UGlrZ1BUNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5ObGJtUk5aWE56WVdkbFEyOXVkSEp2Ykd4bGNpNXpaVzVrVFdWemMyRm5aVlJ2VTNSeVpXRnRaWElvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDZEhZVzFsY0dGa1FXNWhiRzluSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR0YwWVZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNsY2JpQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1emRISmxZVzFOWlhOellXZGxRMjl1ZEhKdmJHeGxjaTV5WldkcGMzUmxjazFsYzNOaFoyVklZVzVrYkdWeUtGeHVJQ0FnSUNBZ0lDQWdJQ0FnVFdWemMyRm5aVVJwY21WamRHbHZiaTVVYjFOMGNtVmhiV1Z5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdKMGRoYldWd1lXUkVhWE5qYjI1dVpXTjBaV1FuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdLR1JoZEdFNklFRnljbUY1UEc1MWJXSmxjajRwSUQwK1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV6Wlc1a1RXVnpjMkZuWlVOdmJuUnliMnhzWlhJdWMyVnVaRTFsYzNOaFoyVlViMU4wY21WaGJXVnlLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBblIyRnRaWEJoWkVScGMyTnZibTVsWTNSbFpDY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSaGRHRmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXBYRzRnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjM1J5WldGdFRXVnpjMkZuWlVOdmJuUnliMnhzWlhJdWNtVm5hWE4wWlhKTlpYTnpZV2RsU0dGdVpHeGxjaWhjYmlBZ0lDQWdJQ0FnSUNBZ0lFMWxjM05oWjJWRWFYSmxZM1JwYjI0dVZHOVRkSEpsWVcxbGNpeGNiaUFnSUNBZ0lDQWdJQ0FnSUNkWVVraE5SRlJ5WVc1elptOXliU2NzWEc0Z0lDQWdJQ0FnSUNBZ0lDQW9aR0YwWVRvZ1FYSnlZWGs4Ym5WdFltVnlQaWtnUFQ1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbk5sYm1STlpYTnpZV2RsUTI5dWRISnZiR3hsY2k1elpXNWtUV1Z6YzJGblpWUnZVM1J5WldGdFpYSW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNkWVVraE5SRlJ5WVc1elptOXliU2NzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUmhkR0ZjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FwWEc0Z0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YzNSeVpXRnRUV1Z6YzJGblpVTnZiblJ5YjJ4c1pYSXVjbVZuYVhOMFpYSk5aWE56WVdkbFNHRnVaR3hsY2loY2JpQWdJQ0FnSUNBZ0lDQWdJRTFsYzNOaFoyVkVhWEpsWTNScGIyNHVWRzlUZEhKbFlXMWxjaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDZFlVa052Ym5SeWIyeHNaWEpVY21GdWMyWnZjbTBuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdLR1JoZEdFNklFRnljbUY1UEc1MWJXSmxjajRwSUQwK1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV6Wlc1a1RXVnpjMkZuWlVOdmJuUnliMnhzWlhJdWMyVnVaRTFsYzNOaFoyVlViMU4wY21WaGJXVnlLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBbldGSkRiMjUwY205c2JHVnlWSEpoYm5ObWIzSnRKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHRjBZVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2xjYmlBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV6ZEhKbFlXMU5aWE56WVdkbFEyOXVkSEp2Ykd4bGNpNXlaV2RwYzNSbGNrMWxjM05oWjJWSVlXNWtiR1Z5S0Z4dUlDQWdJQ0FnSUNBZ0lDQWdUV1Z6YzJGblpVUnBjbVZqZEdsdmJpNVViMU4wY21WaGJXVnlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0oxaFNVM2x6ZEdWdEp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNoa1lYUmhPaUJCY25KaGVUeHVkVzFpWlhJK0tTQTlQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWMyVnVaRTFsYzNOaFoyVkRiMjUwY205c2JHVnlMbk5sYm1STlpYTnpZV2RsVkc5VGRISmxZVzFsY2loY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKMWhTVTNsemRHVnRKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHRjBZVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2xjYmlBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV6ZEhKbFlXMU5aWE56WVdkbFEyOXVkSEp2Ykd4bGNpNXlaV2RwYzNSbGNrMWxjM05oWjJWSVlXNWtiR1Z5S0Z4dUlDQWdJQ0FnSUNBZ0lDQWdUV1Z6YzJGblpVUnBjbVZqZEdsdmJpNVViMU4wY21WaGJXVnlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0oxaFNRblYwZEc5dVZHOTFZMmhsWkNjc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FvWkdGMFlUb2dRWEp5WVhrOGJuVnRZbVZ5UGlrZ1BUNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5ObGJtUk5aWE56WVdkbFEyOXVkSEp2Ykd4bGNpNXpaVzVrVFdWemMyRm5aVlJ2VTNSeVpXRnRaWElvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDZFlVa0oxZEhSdmJsUnZkV05vWldRbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrWVhSaFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tWeHVJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuTjBjbVZoYlUxbGMzTmhaMlZEYjI1MGNtOXNiR1Z5TG5KbFoybHpkR1Z5VFdWemMyRm5aVWhoYm1Sc1pYSW9YRzRnSUNBZ0lDQWdJQ0FnSUNCTlpYTnpZV2RsUkdseVpXTjBhVzl1TGxSdlUzUnlaV0Z0WlhJc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FuV0ZKQ2RYUjBiMjVRY21WemMyVmtKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDaGtZWFJoT2lCQmNuSmhlVHh1ZFcxaVpYSStLU0E5UGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjMlZ1WkUxbGMzTmhaMlZEYjI1MGNtOXNiR1Z5TG5ObGJtUk5aWE56WVdkbFZHOVRkSEpsWVcxbGNpaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSjFoU1FuVjBkRzl1VUhKbGMzTmxaQ2NzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUmhkR0ZjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FwWEc0Z0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YzNSeVpXRnRUV1Z6YzJGblpVTnZiblJ5YjJ4c1pYSXVjbVZuYVhOMFpYSk5aWE56WVdkbFNHRnVaR3hsY2loY2JpQWdJQ0FnSUNBZ0lDQWdJRTFsYzNOaFoyVkVhWEpsWTNScGIyNHVWRzlUZEhKbFlXMWxjaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDZFlVa0oxZEhSdmJsSmxiR1ZoYzJWa0p5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNoa1lYUmhPaUJCY25KaGVUeHVkVzFpWlhJK0tTQTlQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWMyVnVaRTFsYzNOaFoyVkRiMjUwY205c2JHVnlMbk5sYm1STlpYTnpZV2RsVkc5VGRISmxZVzFsY2loY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKMWhTUW5WMGRHOXVVbVZzWldGelpXUW5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa1lYUmhYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLVnh1SUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbk4wY21WaGJVMWxjM05oWjJWRGIyNTBjbTlzYkdWeUxuSmxaMmx6ZEdWeVRXVnpjMkZuWlVoaGJtUnNaWElvWEc0Z0lDQWdJQ0FnSUNBZ0lDQk5aWE56WVdkbFJHbHlaV04wYVc5dUxsUnZVM1J5WldGdFpYSXNYRzRnSUNBZ0lDQWdJQ0FnSUNBbldGSkJibUZzYjJjbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnS0dSaGRHRTZJRUZ5Y21GNVBHNTFiV0psY2o0cElEMCtYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1elpXNWtUV1Z6YzJGblpVTnZiblJ5YjJ4c1pYSXVjMlZ1WkUxbGMzTmhaMlZVYjFOMGNtVmhiV1Z5S0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5XRkpCYm1Gc2IyY25MRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa1lYUmhYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLVnh1SUNBZ0lDQWdJQ0FwTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVGamRHbDJZWFJsSUhSb1pTQnNiMmRwWXlCaGMzTnZZMmxoZEdWa0lIZHBkR2dnWVNCamIyMXRZVzVrSUdaeWIyMGdWVVZjYmlBZ0lDQWdLaUJBY0dGeVlXMGdiV1Z6YzJGblpWeHVJQ0FnSUNBcUwxeHVJQ0FnSUc5dVEyOXRiV0Z1WkNodFpYTnpZV2RsT2lCQmNuSmhlVUoxWm1abGNpa2dlMXh1SUNBZ0lDQWdJQ0JNYjJkblpYSXVURzluS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdURzluWjJWeUxrZGxkRk4wWVdOclZISmhZMlVvS1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ2RFWVhSaFEyaGhibTVsYkZKbFkyVnBkbVZOWlhOellXZGxWSGx3WlM1RGIyMXRZVzVrSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJRFpjYmlBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnWTI5dGJXRnVaRUZ6VTNSeWFXNW5JRDBnYm1WM0lGUmxlSFJFWldOdlpHVnlLQ2QxZEdZdE1UWW5LUzVrWldOdlpHVW9YRzRnSUNBZ0lDQWdJQ0FnSUNCdFpYTnpZV2RsTG5Oc2FXTmxLREVwWEc0Z0lDQWdJQ0FnSUNrN1hHNWNiaUFnSUNBZ0lDQWdURzluWjJWeUxreHZaeWhjYmlBZ0lDQWdJQ0FnSUNBZ0lFeHZaMmRsY2k1SFpYUlRkR0ZqYTFSeVlXTmxLQ2tzWEc0Z0lDQWdJQ0FnSUNBZ0lDQW5SR0YwWVNCRGFHRnVibVZzSUVOdmJXMWhibVE2SUNjZ0t5QmpiMjF0WVc1a1FYTlRkSEpwYm1jc1hHNGdJQ0FnSUNBZ0lDQWdJQ0EyWEc0Z0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUdOdmJXMWhibVE2SUUxbGMzTmhaMlZQYmxOamNtVmxia3RsZVdKdllYSmtJRDBnU2xOUFRpNXdZWEp6WlNoamIyMXRZVzVrUVhOVGRISnBibWNwTzF4dUlDQWdJQ0FnSUNCcFppQW9ZMjl0YldGdVpDNWpiMjF0WVc1a0lEMDlQU0FuYjI1VFkzSmxaVzVMWlhsaWIyRnlaQ2NwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWNHbDRaV3hUZEhKbFlXMXBibWN1WDJGamRHbDJZWFJsVDI1VFkzSmxaVzVMWlhsaWIyRnlaQ2hqYjIxdFlXNWtLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVoaGJtUnNaWE1nWVNCd2NtOTBiMk52YkNCdFpYTnpZV2RsSUhKbFkyVnBkbVZrSUdaeWIyMGdkR2hsSUhOMGNtVmhiV1Z5WEc0Z0lDQWdJQ29nUUhCaGNtRnRJRzFsYzNOaFoyVWdkR2hsSUcxbGMzTmhaMlVnWkdGMFlTQm1jbTl0SUhSb1pTQnpkSEpsWVcxbGNseHVJQ0FnSUNBcUwxeHVJQ0FnSUc5dVVISnZkRzlqYjJ4TlpYTnpZV2RsS0cxbGMzTmhaMlU2SUVGeWNtRjVRblZtWm1WeUtTQjdYRzRnSUNBZ0lDQWdJSFJ5ZVNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQndjbTkwYjJOdmJGTjBjbWx1WnlBOUlHNWxkeUJVWlhoMFJHVmpiMlJsY2lnbmRYUm1MVEUySnlrdVpHVmpiMlJsS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUcxbGMzTmhaMlV1YzJ4cFkyVW9NU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0J3Y205MGIyTnZiRXBUVDA0Z1BTQktVMDlPTG5CaGNuTmxLSEJ5YjNSdlkyOXNVM1J5YVc1bktUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWhUMkpxWldOMExuQnliM1J2ZEhsd1pTNW9ZWE5QZDI1UWNtOXdaWEowZVM1allXeHNLSEJ5YjNSdlkyOXNTbE5QVGl3Z0owUnBjbVZqZEdsdmJpY3BYRzRnSUNBZ0lDQWdJQ0FnSUNBcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQk1iMmRuWlhJdVJYSnliM0lvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lFeHZaMmRsY2k1SFpYUlRkR0ZqYTFSeVlXTmxLQ2tzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDZE5ZV3htYjNKdFpXUWdjSEp2ZEc5amIyd2djbVZqWldsMlpXUXVJRVZ1YzNWeVpTQjBhR1VnY0hKdmRHOWpiMndnYldWemMyRm5aU0JqYjI1MFlXbHVjeUJoSUdScGNtVmpkR2x2YmlkY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ1pHbHlaV04wYVc5dUlEMGdjSEp2ZEc5amIyeEtVMDlPTGtScGNtVmpkR2x2Ymp0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1JsYkdWMFpTQndjbTkwYjJOdmJFcFRUMDR1UkdseVpXTjBhVzl1TzF4dUlDQWdJQ0FnSUNBZ0lDQWdURzluWjJWeUxreHZaeWhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JNYjJkblpYSXVSMlYwVTNSaFkydFVjbUZqWlNncExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHQlNaV05sYVhabFpDQnVaWGNnSkh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR2x5WldOMGFXOXVJRDA5SUUxbGMzTmhaMlZFYVhKbFkzUnBiMjR1Um5KdmJWTjBjbVZoYldWeVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBL0lDZEdjbTl0VTNSeVpXRnRaWEluWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E2SUNkVWIxTjBjbVZoYldWeUoxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMGdjSEp2ZEc5amIyd3VJRlZ3WkdGMGFXNW5JR1Y0YVhOMGFXNW5JSEJ5YjNSdlkyOXNMaTR1WUZ4dUlDQWdJQ0FnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lFOWlhbVZqZEM1clpYbHpLSEJ5YjNSdlkyOXNTbE5QVGlrdVptOXlSV0ZqYUNnb2JXVnpjMkZuWlZSNWNHVXBJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0J0WlhOellXZGxJRDBnY0hKdmRHOWpiMnhLVTA5T1cyMWxjM05oWjJWVWVYQmxYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6ZDJsMFkyZ2dLR1JwY21WamRHbHZiaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUUxbGMzTmhaMlZFYVhKbFkzUnBiMjR1Vkc5VGRISmxZVzFsY2pwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklFTm9aV05ySUhSb1lYUWdkR2hsSUcxbGMzTmhaMlVnWTI5dWRHRnBibk1nWVd4c0lIUm9aU0J5Wld4bGRtRnVkQ0J3WVhKaGJYTmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBaFQySnFaV04wTG5CeWIzUnZkSGx3WlM1b1lYTlBkMjVRY205d1pYSjBlUzVqWVd4c0tGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdFpYTnpZV2RsTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuYVdRblhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLU0I4ZkZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDRlBZbXBsWTNRdWNISnZkRzkwZVhCbExtaGhjMDkzYmxCeWIzQmxjblI1TG1OaGJHd29YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHMWxjM05oWjJVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNkaWVYUmxUR1Z1WjNSb0oxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lFeHZaMmRsY2k1RmNuSnZjaWhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdURzluWjJWeUxrZGxkRk4wWVdOclZISmhZMlVvS1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWUZSdlUzUnlaV0Z0WlhJdFBpUjdiV1Z6YzJGblpWUjVjR1Y5SUhCeWIzUnZZMjlzSUdSbFptbHVhWFJwYjI0Z2QyRnpJRzFoYkdadmNtMWxaQ0JoY3lCcGRDQmthV1J1SjNRZ1kyOXVkR0ZwYmlCaGRDQnNaV0Z6ZENCaGJpQnBaQ0JoYm1RZ1lTQmllWFJsVEdWdVozUm9YRnh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUkdWbWFXNXBkR2x2YmlCM1lYTTZJQ1I3U2xOUFRpNXpkSEpwYm1kcFpua29YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUcxbGMzTmhaMlVzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHNTFiR3dzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lESmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXBmV0JjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUhKbGRIVnliaUJwYmlCaElHWnZja1ZoWTJnZ2FYTWdaWEYxYVhaaGJHVnVkQ0IwYnlCaElHTnZiblJwYm5WbElHbHVJR0VnYm05eWJXRnNJR1p2Y2lCc2IyOXdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHMWxjM05oWjJVdVlubDBaVXhsYm1kMGFDQStJREFnSmlaY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWhUMkpxWldOMExuQnliM1J2ZEhsd1pTNW9ZWE5QZDI1UWNtOXdaWEowZVM1allXeHNLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnRaWE56WVdkbExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBbmMzUnlkV04wZFhKbEoxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRWxtSUhkbElITndaV05wWm5rZ1lTQmllWFJsYkdWdVozUm9MQ0IzYVd4c0lHMTFjM1FnYUdGMlpTQmhJR052Y25KbGMzQnZibVJwYm1jZ2MzUnlkV04wZFhKbFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdURzluWjJWeUxrVnljbTl5S0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JNYjJkblpYSXVSMlYwVTNSaFkydFVjbUZqWlNncExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZ1ZHOVRkSEpsWVcxbGNpMCtKSHR0WlhOellXZGxWSGx3WlgwZ2NISnZkRzlqYjJ3Z1pHVm1hVzVwZEdsdmJpQjNZWE1nYldGc1ptOXliV1ZrSUdGeklHbDBJSE53WldOcFptbGxaQ0JoSUdKNWRHVk1aVzVuZEdnZ1luVjBJRzV2SUdGalkyOXRjR0Z1ZVdsdVp5QnpkSEoxWTNSMWNtVmdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJ5WlhSMWNtNGdhVzRnWVNCbWIzSkZZV05vSUdseklHVnhkV2wyWVd4bGJuUWdkRzhnWVNCamIyNTBhVzUxWlNCcGJpQmhJRzV2Y20xaGJDQm1iM0lnYkc5dmNGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YzNSeVpXRnRUV1Z6YzJGblpVTnZiblJ5YjJ4c1pYSXVkRzlUZEhKbFlXMWxja2hoYm1Sc1pYSnpMbWRsZENoY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYldWemMyRm5aVlI1Y0dWY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QkpaaUIzWlNkMlpTQnlaV2RwYzNSbGNtVmtJR0VnYUdGdVpHeGxjaUJtYjNJZ2RHaHBjeUJ0WlhOellXZGxJSFI1Y0dVZ2QyVWdZMkZ1SUdGa1pDQnBkQ0IwYnlCdmRYSWdjM1Z3Y0c5eWRHVmtJRzFsYzNOaFoyVnpMaUJwWlNCeVpXZHBjM1JsY2sxbGMzTmhaMlZJWVc1a2JHVnlLQzR1TGlsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5OMGNtVmhiVTFsYzNOaFoyVkRiMjUwY205c2JHVnlMblJ2VTNSeVpXRnRaWEpOWlhOellXZGxjeTVoWkdRb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUcxbGMzTmhaMlZVZVhCbExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdFpYTnpZV2RsWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdURzluWjJWeUxrVnljbTl5S0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JNYjJkblpYSXVSMlYwVTNSaFkydFVjbUZqWlNncExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZ1ZHaGxjbVVnZDJGeklHNXZJSEpsWjJsemRHVnlaV1FnYUdGdVpHeGxjaUJtYjNJZ1hDSWtlMjFsYzNOaFoyVlVlWEJsZlZ3aUlDMGdkSEo1SUdGa1pHbHVaeUJ2Ym1VZ2RYTnBibWNnY21WbmFYTjBaWEpOWlhOellXZGxTR0Z1Wkd4bGNpaE5aWE56WVdkbFJHbHlaV04wYVc5dUxsUnZVM1J5WldGdFpYSXNJRndpSkh0dFpYTnpZV2RsVkhsd1pYMWNJaXdnYlhsSVlXNWtiR1Z5S1dCY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ1RXVnpjMkZuWlVScGNtVmpkR2x2Ymk1R2NtOXRVM1J5WldGdFpYSTZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJEYUdWamF5QjBhR0YwSUhSb1pTQnRaWE56WVdkbElHTnZiblJoYVc1eklHRnNiQ0IwYUdVZ2NtVnNaWFpoYm5RZ2NHRnlZVzF6WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJVTlpYW1WamRDNXdjbTkwYjNSNWNHVXVhR0Z6VDNkdVVISnZjR1Z5ZEhrdVkyRnNiQ2h0WlhOellXZGxMQ0FuYVdRbktWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVEc5bloyVnlMa1Z5Y205eUtGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCTWIyZG5aWEl1UjJWMFUzUmhZMnRVY21GalpTZ3BMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmdSbkp2YlZOMGNtVmhiV1Z5TFQ0a2UyMWxjM05oWjJWVWVYQmxmU0J3Y205MGIyTnZiQ0JrWldacGJtbDBhVzl1SUhkaGN5QnRZV3htYjNKdFpXUWdZWE1nYVhRZ1pHbGtiaWQwSUdOdmJuUmhhVzRnWVhRZ2JHVmhjM1FnWVc0Z2FXUmNYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCRVpXWnBibWwwYVc5dUlIZGhjem9nSkh0S1UwOU9Mbk4wY21sdVoybG1lU2h0WlhOellXZGxMQ0J1ZFd4c0xDQXlLWDFnWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCeVpYUjFjbTRnYVc0Z1lTQm1iM0pGWVdOb0lHbHpJR1Z4ZFdsMllXeGxiblFnZEc4Z1lTQmpiMjUwYVc1MVpTQnBiaUJoSUc1dmNtMWhiQ0JtYjNJZ2JHOXZjRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5OMGNtVmhiVTFsYzNOaFoyVkRiMjUwY205c2JHVnlMbVp5YjIxVGRISmxZVzFsY2toaGJtUnNaWEp6TG1kbGRDaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JXVnpjMkZuWlZSNWNHVmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJKWmlCM1pTZDJaU0J5WldkcGMzUmxjbVZrSUdFZ2FHRnVaR3hsY2lCbWIzSWdkR2hwY3lCdFpYTnpZV2RsSUhSNWNHVXVJR2xsSUhKbFoybHpkR1Z5VFdWemMyRm5aVWhoYm1Sc1pYSW9MaTR1S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YzNSeVpXRnRUV1Z6YzJGblpVTnZiblJ5YjJ4c1pYSXVabkp2YlZOMGNtVmhiV1Z5VFdWemMyRm5aWE11WVdSa0tGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdFpYTnpZV2RsVkhsd1pTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JXVnpjMkZuWlM1cFpGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUV4dloyZGxjaTVGY25KdmNpaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1RHOW5aMlZ5TGtkbGRGTjBZV05yVkhKaFkyVW9LU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZRlJvWlhKbElIZGhjeUJ1YnlCeVpXZHBjM1JsY21Wa0lHaGhibVJzWlhJZ1ptOXlJRndpSkh0dFpYTnpZV2RsZlZ3aUlDMGdkSEo1SUdGa1pHbHVaeUJ2Ym1VZ2RYTnBibWNnY21WbmFYTjBaWEpOWlhOellXZGxTR0Z1Wkd4bGNpaE5aWE56WVdkbFJHbHlaV04wYVc5dUxrWnliMjFUZEhKbFlXMWxjaXdnWENJa2UyMWxjM05oWjJWVWVYQmxmVndpTENCdGVVaGhibVJzWlhJcFlGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkdWbVlYVnNkRHBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRXh2WjJkbGNpNUZjbkp2Y2loY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQk1iMmRuWlhJdVIyVjBVM1JoWTJ0VWNtRmpaU2dwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHQlZibXR1YjNkdUlHUnBjbVZqZEdsdmJqb2dKSHRrYVhKbFkzUnBiMjU5WUZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1QyNWpaU0IwYUdVZ2NISnZkRzlqYjJ3Z2FHRnpJR0psWlc0Z2NtVmpaV2wyWldRc0lIZGxJR05oYmlCelpXNWtJRzkxY2lCamIyNTBjbTlzSUcxbGMzTmhaMlZ6WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5SdlUzUnlaV0Z0WlhKTlpYTnpZV2RsYzBOdmJuUnliMnhzWlhJdVUyVnVaRkpsY1hWbGMzUkpibWwwYVdGc1UyVjBkR2x1WjNNb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVkRzlUZEhKbFlXMWxjazFsYzNOaFoyVnpRMjl1ZEhKdmJHeGxjaTVUWlc1a1VtVnhkV1Z6ZEZGMVlXeHBkSGxEYjI1MGNtOXNLQ2s3WEc0Z0lDQWdJQ0FnSUgwZ1kyRjBZMmdnS0dVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUV4dloyZGxjaTVNYjJjb1RHOW5aMlZ5TGtkbGRGTjBZV05yVkhKaFkyVW9LU3dnWlNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQklZVzVrYkdWeklHRnVJR2x1Y0hWMElHTnZiblJ5YjJ3Z2JXVnpjMkZuWlNCM2FHVnVJR2wwSUdseklISmxZMlZwZG1Wa0lHWnliMjBnZEdobElITjBjbVZoYldWeVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUcxbGMzTmhaMlVnVkdobElHbHVjSFYwSUdOdmJuUnliMndnYldWemMyRm5aVnh1SUNBZ0lDQXFMMXh1SUNBZ0lHOXVTVzV3ZFhSRGIyNTBjbTlzVDNkdVpYSnphR2x3S0cxbGMzTmhaMlU2SUVGeWNtRjVRblZtWm1WeUtTQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElIWnBaWGNnUFNCdVpYY2dWV2x1ZERoQmNuSmhlU2h0WlhOellXZGxLVHRjYmlBZ0lDQWdJQ0FnVEc5bloyVnlMa3h2WnloY2JpQWdJQ0FnSUNBZ0lDQWdJRXh2WjJkbGNpNUhaWFJUZEdGamExUnlZV05sS0Nrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FuUkdGMFlVTm9ZVzV1Wld4U1pXTmxhWFpsVFdWemMyRm5aVlI1Y0dVdVNXNXdkWFJEYjI1MGNtOXNUM2R1WlhKemFHbHdKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lEWmNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdhVzV3ZFhSRGIyNTBjbTlzVDNkdVpYSnphR2x3SUQwZ2JtVjNJRUp2YjJ4bFlXNG9kbWxsZDFzeFhTa3VkbUZzZFdWUFppZ3BPMXh1SUNBZ0lDQWdJQ0JNYjJkblpYSXVURzluS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdURzluWjJWeUxrZGxkRk4wWVdOclZISmhZMlVvS1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJR0JTWldObGFYWmxaQ0JwYm5CMWRDQmpiMjUwY205c2JHVnlJRzFsYzNOaFoyVWdMU0IzYVd4c0lIbHZkWElnYVc1d2RYUWdZMjl1ZEhKdmJDQjBhR1VnYzNSeVpXRnRPaUFrZTJsdWNIVjBRMjl1ZEhKdmJFOTNibVZ5YzJocGNIMWdYRzRnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjR2w0Wld4VGRISmxZVzFwYm1jdVgyOXVTVzV3ZFhSRGIyNTBjbTlzVDNkdVpYSnphR2x3S0dsdWNIVjBRMjl1ZEhKdmJFOTNibVZ5YzJocGNDazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dYRzRnSUNBZ0lDb2dRSEJoY21GdElHMWxjM05oWjJVZ1hHNGdJQ0FnSUNvdlhHNGdJQ0FnYjI1SFlXMWxjR0ZrVW1WemNHOXVjMlVvYldWemMyRm5aVG9nUVhKeVlYbENkV1ptWlhJcElIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2NtVnpjRzl1YzJWVGRISnBibWNnUFNCdVpYY2dWR1Y0ZEVSbFkyOWtaWElvSjNWMFppMHhOaWNwTG1SbFkyOWtaU2h0WlhOellXZGxMbk5zYVdObEtERXBLVHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdjbVZ6Y0c5dWMyVktVMDlPSUQwZ1NsTlBUaTV3WVhKelpTaHlaWE53YjI1elpWTjBjbWx1WnlrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WjJGdFpWQmhaRU52Ym5SeWIyeHNaWEl1YjI1SFlXMWxjR0ZrVW1WemNHOXVjMlZTWldObGFYWmxaQ2h5WlhOd2IyNXpaVXBUVDA0dVkyOXVkSEp2Ykd4bGNrbGtLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnZia0ZtYTFSeWFXZG5aWEpsWkNncE9pQjJiMmxrSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVoWm10RGIyNTBjbTlzYkdWeUxtOXVRV1pyUTJ4cFkyc29LVHRjYmx4dUlDQWdJQ0FnSUNBdkx5QnBaaUIwYUdVZ2MzUnlaV0Z0SUdseklIQmhkWE5sWkNCd2JHRjVJR2wwTENCcFppQjNaU0JqWVc1Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdWRtbGtaVzlRYkdGNVpYSXVhWE5RWVhWelpXUW9LU0FtSmlCMGFHbHpMblpwWkdWdlVHeGhlV1Z5TG1oaGMxWnBaR1Z2VTI5MWNtTmxLQ2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWNHeGhlVk4wY21WaGJTZ3BPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVTJWMElIZG9aWFJvWlhJZ2QyVWdjMmh2ZFd4a0lIUnBiV1Z2ZFhRZ2QyaGxiaUJoWm1zdVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUdGbWEwVnVZV0pzWldRZ1NXWWdkSEoxWlNCM1pTQjBhVzFsYjNWMElIZG9aVzRnYVdSc1pTQm1iM0lnYzI5dFpTQm5hWFpsYmlCaGJXOTFiblFnYjJZZ2RHbHRaUzVjYmlBZ0lDQWdLaTljYmlBZ0lDQnpaWFJCWm10RmJtRmliR1ZrS0dGbWEwVnVZV0pzWldRNklHSnZiMnhsWVc0cE9pQjJiMmxrSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLR0ZtYTBWdVlXSnNaV1FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWIyNUJabXRVY21sbloyVnlaV1FvS1R0Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVlXWnJRMjl1ZEhKdmJHeGxjaTV6ZEc5d1FXWnJWMkZ5Ym1sdVoxUnBiV1Z5S0NrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlNaWE4wWVhKMElIUm9aU0J6ZEhKbFlXMGdZWFYwYjIxaGRHbGpZV3hzZVNCM2FYUm9iM1YwSUhKbFpuSmxjMmhwYm1jZ2RHaGxJSEJoWjJWY2JpQWdJQ0FnS2k5Y2JpQWdJQ0J5WlhOMFlYSjBVM1J5WldGdFFYVjBiMjFoZEdsallXeHNlU2dwSUh0Y2JpQWdJQ0FnSUNBZ0x5OGdhV1lnZEdobGNtVWdhWE1nYm04Z2QyVmlVMjlqYTJWMFEyOXVkSEp2Ykd4bGNpQnlaWFIxY200Z2FXMXRaV1JwWVhSbGJIa2diM0lnZEdocGN5QjNhV3hzSUc1dmRDQjNiM0pyWEc0Z0lDQWdJQ0FnSUdsbUlDZ2hkR2hwY3k1M1pXSlRiMk5yWlhSRGIyNTBjbTlzYkdWeUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCTWIyZG5aWEl1VEc5bktGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lFeHZaMmRsY2k1SFpYUlRkR0ZqYTFSeVlXTmxLQ2tzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSjFSb1pTQlhaV0lnVTI5amEyVjBJRU52Ym5SeWIyeHNaWElnWkc5bGN5QnViM1FnWlhocGMzUWdjMjhnZEdocGN5QjNhV3hzSUc1dmRDQjNiM0pySUhKcFoyaDBJRzV2ZHk0blhHNGdJQ0FnSUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnTHk4Z2FXWWdZU0IzWldKemIyTnJaWFFnYjJKcVpXTjBJR2hoY3lCdWIzUWdZbVZsYmlCamNtVmhkR1ZrSUdOdmJtNWxZM1FnYm05eWJXRnNiSGtnZDJsMGFHOTFkQ0JqYkc5emFXNW5YRzRnSUNBZ0lDQWdJR2xtSUNoY2JpQWdJQ0FnSUNBZ0lDQWdJQ0YwYUdsekxuZGxZbE52WTJ0bGRFTnZiblJ5YjJ4c1pYSXVkMlZpVTI5amEyVjBJSHg4WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5kbFlsTnZZMnRsZEVOdmJuUnliMnhzWlhJdWQyVmlVMjlqYTJWMExuSmxZV1I1VTNSaGRHVWdQVDA5SUZkbFlsTnZZMnRsZEM1RFRFOVRSVVJjYmlBZ0lDQWdJQ0FnS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JNYjJkblpYSXVURzluS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUV4dloyZGxjaTVIWlhSVGRHRmphMVJ5WVdObEtDa3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKMEVnZDJWaWMyOWphMlYwSUdOdmJtNWxZM1JwYjI0Z2FHRnpJRzV2ZENCaVpXVnVJRzFoWkdVZ2VXVjBJSE52SUhkbElIZHBiR3dnYzNSaGNuUWdkR2hsSUhOMGNtVmhiU2RjYmlBZ0lDQWdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbkJwZUdWc1UzUnlaV0Z0YVc1bkxsOXZibGRsWWxKMFkwRjFkRzlEYjI1dVpXTjBLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1OdmJtNWxZM1JVYjFOcFoyNWhiR3hwYm1kVFpYSjJaWElvS1R0Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUhObGRDQjBhR1VnY21Wd2JHRjVJSE4wWVhSMWN5QnpieUIzWlNCblpYUWdZU0IwWlhoMElHOTJaWEpzWVhrZ2IzWmxjaUJoYmlCaFkzUnBiMjRnYjNabGNteGhlVnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV3YVhobGJGTjBjbVZoYldsdVp5NWZjMmh2ZDBGamRHbHZiazl5UlhKeWIzSlBia1JwYzJOdmJtNWxZM1FnUFNCbVlXeHpaVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnYzJWMElIUm9aU0JrYVhOamIyNXVaV04wSUcxbGMzTmhaMlZjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YzJWMFJHbHpZMjl1Ym1WamRFMWxjM05oWjJWUGRtVnljbWxrWlNnblVtVnpkR0Z5ZEdsdVp5QnpkSEpsWVcwdUxpNG5LVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnWTJ4dmMyVWdkR2hsSUdOdmJtNWxZM1JwYjI1Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVkyeHZjMlZUYVdkdVlXeHBibWRUWlhKMlpYSW9LVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnZDJGcGRDQm1iM0lnZEdobElHTnZibTVsWTNScGIyNGdkRzhnWTJ4dmMyVWdZVzVrSUhKbGMzUmhjblFnZEdobElHTnZibTVsWTNScGIyNWNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJR0YxZEc5RGIyNXVaV04wVkdsdFpXOTFkQ0E5SUhObGRGUnBiV1Z2ZFhRb0tDa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjR2w0Wld4VGRISmxZVzFwYm1jdVgyOXVWMlZpVW5SalFYVjBiME52Ym01bFkzUW9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtTnZibTVsWTNSVWIxTnBaMjVoYkd4cGJtZFRaWEoyWlhJb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiR1ZoY2xScGJXVnZkWFFvWVhWMGIwTnZibTVsWTNSVWFXMWxiM1YwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDBzSURNd01EQXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVEc5aFpITWdZU0JtY21WbGVtVWdabkpoYldVZ2FXWWdhWFFnYVhNZ2NtVnhkV2x5WldRZ2IzUm9aWEozYVhObElITm9iM2R6SUhSb1pTQndiR0Y1SUc5MlpYSnNZWGxjYmlBZ0lDQWdLaTljYmlBZ0lDQnNiMkZrUm5KbFpYcGxSbkpoYldWUGNsTm9iM2RRYkdGNVQzWmxjbXhoZVNncElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1d2FYaGxiRk4wY21WaGJXbHVaeTVrYVhOd1lYUmphRVYyWlc1MEtGeHVJQ0FnSUNBZ0lDQWdJQ0FnYm1WM0lFeHZZV1JHY21WbGVtVkdjbUZ0WlVWMlpXNTBLSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6YUc5MWJHUlRhRzkzVUd4aGVVOTJaWEpzWVhrNklIUm9hWE11YzJodmRXeGtVMmh2ZDFCc1lYbFBkbVZ5YkdGNUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbHpWbUZzYVdRNklIUm9hWE11Wm5KbFpYcGxSbkpoYldWRGIyNTBjbTlzYkdWeUxuWmhiR2xrTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdwd1pXZEVZWFJoT2lCMGFHbHpMbVp5WldWNlpVWnlZVzFsUTI5dWRISnZiR3hsY2k1cWNHVm5YRzRnSUNBZ0lDQWdJQ0FnSUNCOUtWeHVJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTV6YUc5MWJHUlRhRzkzVUd4aGVVOTJaWEpzWVhrZ1BUMDlJSFJ5ZFdVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUV4dloyZGxjaTVNYjJjb1RHOW5aMlZ5TGtkbGRGTjBZV05yVkhKaFkyVW9LU3dnSjNOb2IzZHBibWNnY0d4aGVTQnZkbVZ5YkdGNUp5azdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbkpsYzJsNlpWQnNZWGxsY2xOMGVXeGxLQ2s3WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQk1iMmRuWlhJdVRHOW5LRXh2WjJkbGNpNUhaWFJUZEdGamExUnlZV05sS0Nrc0lDZHphRzkzYVc1bklHWnlaV1Y2WlNCbWNtRnRaU2NwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1bWNtVmxlbVZHY21GdFpVTnZiblJ5YjJ4c1pYSXVjMmh2ZDBaeVpXVjZaVVp5WVcxbEtDazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnYzJWMFZHbHRaVzkxZENnb0tTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5acFpHVnZVR3hoZVdWeUxuTmxkRlpwWkdWdlJXNWhZbXhsWkNobVlXeHpaU2s3WEc0Z0lDQWdJQ0FnSUgwc0lIUm9hWE11Wm5KbFpYcGxSbkpoYldWRGIyNTBjbTlzYkdWeUxtWnlaV1Y2WlVaeVlXMWxSR1ZzWVhrcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGQnliMk5sYzNNZ2RHaGxJR1p5WldWNlpTQm1jbUZ0WlNCaGJtUWdiRzloWkNCcGRGeHVJQ0FnSUNBcUlFQndZWEpoYlNCdFpYTnpZV2RsSUZSb1pTQm1jbVZsZW1VZ1puSmhiV1VnWkdGMFlTQnBiaUJpZVhSbGMxeHVJQ0FnSUNBcUwxeHVJQ0FnSUc5dVJuSmxaWHBsUm5KaGJXVk5aWE56WVdkbEtHMWxjM05oWjJVNklFRnljbUY1UW5WbVptVnlLU0I3WEc0Z0lDQWdJQ0FnSUV4dloyZGxjaTVNYjJjb1hHNGdJQ0FnSUNBZ0lDQWdJQ0JNYjJkblpYSXVSMlYwVTNSaFkydFVjbUZqWlNncExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSjBSaGRHRkRhR0Z1Ym1Wc1VtVmpaV2wyWlUxbGMzTmhaMlZVZVhCbExrWnlaV1Y2WlVaeVlXMWxKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lEWmNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdkbWxsZHlBOUlHNWxkeUJWYVc1ME9FRnljbUY1S0cxbGMzTmhaMlVwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbVp5WldWNlpVWnlZVzFsUTI5dWRISnZiR3hsY2k1d2NtOWpaWE56Um5KbFpYcGxSbkpoYldWTlpYTnpZV2RsS0hacFpYY3NJQ2dwSUQwK1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxteHZZV1JHY21WbGVtVkdjbUZ0WlU5eVUyaHZkMUJzWVhsUGRtVnliR0Y1S0NsY2JpQWdJQ0FnSUNBZ0tUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkZibUZpYkdVZ2RHaGxJSFpwWkdWdklHRm1kR1Z5SUdocFpHbHVaeUJoSUdaeVpXVjZaU0JtY21GdFpWeHVJQ0FnSUNBcUwxeHVJQ0FnSUdsdWRtRnNhV1JoZEdWR2NtVmxlbVZHY21GdFpVRnVaRVZ1WVdKc1pWWnBaR1Z2S0NrZ2UxeHVJQ0FnSUNBZ0lDQk1iMmRuWlhJdVRHOW5LRnh1SUNBZ0lDQWdJQ0FnSUNBZ1RHOW5aMlZ5TGtkbGRGTjBZV05yVkhKaFkyVW9LU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDZEVZWFJoUTJoaGJtNWxiRkpsWTJWcGRtVk5aWE56WVdkbFZIbHdaUzVHY21WbGVtVkdjbUZ0WlNjc1hHNGdJQ0FnSUNBZ0lDQWdJQ0EyWEc0Z0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lITmxkRlJwYldWdmRYUW9LQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXdhWGhsYkZOMGNtVmhiV2x1Wnk1a2FYTndZWFJqYUVWMlpXNTBLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzVsZHlCSWFXUmxSbkpsWlhwbFJuSmhiV1ZGZG1WdWRDZ3BYRzRnSUNBZ0lDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NW1jbVZsZW1WR2NtRnRaVU52Ym5SeWIyeHNaWEl1YUdsa1pVWnlaV1Y2WlVaeVlXMWxLQ2s3WEc0Z0lDQWdJQ0FnSUgwc0lIUm9hWE11Wm5KbFpYcGxSbkpoYldWRGIyNTBjbTlzYkdWeUxtWnlaV1Y2WlVaeVlXMWxSR1ZzWVhrcE8xeHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NTJhV1JsYjFCc1lYbGxjaTVuWlhSV2FXUmxiMFZzWlcxbGJuUW9LU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1MmFXUmxiMUJzWVhsbGNpNXpaWFJXYVdSbGIwVnVZV0pzWldRb2RISjFaU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCUWNtVndJR1JoZEdGamFHRnVibVZzSUdSaGRHRWdabTl5SUhCeWIyTmxjM05wYm1jZ1ptbHNaU0JsZUhSbGJuTnBiMjVjYmlBZ0lDQWdLaUJBY0dGeVlXMGdaR0YwWVNCMGFHVWdabWxzWlNCbGVIUmxibk5wYjI0Z1pHRjBZVnh1SUNBZ0lDQXFMMXh1SUNBZ0lHOXVSbWxzWlVWNGRHVnVjMmx2Ymloa1lYUmhPaUJCY25KaGVVSjFabVpsY2lrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCMmFXVjNJRDBnYm1WM0lGVnBiblE0UVhKeVlYa29aR0YwWVNrN1hHNGdJQ0FnSUNBZ0lFWnBiR1ZWZEdsc0xuTmxkRVY0ZEdWdWMybHZia1p5YjIxQ2VYUmxjeWgyYVdWM0xDQjBhR2x6TG1acGJHVXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRkJ5WlhBZ1pHRjBZV05vWVc1dVpXd2daR0YwWVNCbWIzSWdjSEp2WTJWemMybHVaeUIwYUdVZ1ptbHNaU0J0YVcxbElIUjVjR1ZjYmlBZ0lDQWdLaUJBY0dGeVlXMGdaR0YwWVNCMGFHVWdabWxzWlNCdGFXMWxJSFI1Y0dVZ1pHRjBZVnh1SUNBZ0lDQXFMMXh1SUNBZ0lHOXVSbWxzWlUxcGJXVlVlWEJsS0dSaGRHRTZJRUZ5Y21GNVFuVm1abVZ5S1NCN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUhacFpYY2dQU0J1WlhjZ1ZXbHVkRGhCY25KaGVTaGtZWFJoS1R0Y2JpQWdJQ0FnSUNBZ1JtbHNaVlYwYVd3dWMyVjBUV2x0WlZSNWNHVkdjbTl0UW5sMFpYTW9kbWxsZHl3Z2RHaHBjeTVtYVd4bEtUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlFjbVZ3SUdSaGRHRmphR0Z1Ym1Wc0lHUmhkR0VnWm05eUlIQnliMk5sYzNOcGJtY2dkR2hsSUdacGJHVWdZMjl1ZEdWdWRITmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ1pHRjBZU0IwYUdVZ1ptbHNaU0JqYjI1MFpXNTBjeUJrWVhSaFhHNGdJQ0FnSUNvdlhHNGdJQ0FnYjI1R2FXeGxRMjl1ZEdWdWRITW9aR0YwWVRvZ1FYSnlZWGxDZFdabVpYSXBJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdkbWxsZHlBOUlHNWxkeUJWYVc1ME9FRnljbUY1S0dSaGRHRXBPMXh1SUNBZ0lDQWdJQ0JHYVd4bFZYUnBiQzV6WlhSRGIyNTBaVzUwYzBaeWIyMUNlWFJsY3loMmFXVjNMQ0IwYUdsekxtWnBiR1VwTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUZCc1lYbHpJSFJvWlNCemRISmxZVzBnWVhWa2FXOGdZVzVrSUhacFpHVnZJSE52ZFhKalpTQmhibVFnYzJWMGN5QjFjQ0J2ZEdobGNpQndhV1ZqWlhNZ2QyaHBiR1VnZEdobElITjBjbVZoYlNCemRHRnlkSE5jYmlBZ0lDQWdLaTljYmlBZ0lDQndiR0Y1VTNSeVpXRnRLQ2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9JWFJvYVhNdWRtbGtaVzlRYkdGNVpYSXVaMlYwVm1sa1pXOUZiR1Z0Wlc1MEtDa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUcxbGMzTmhaMlVnUFZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNkRGIzVnNaQ0J1YjNRZ2NHeGhlU0IyYVdSbGJ5QnpkSEpsWVcwZ1ltVmpZWFZ6WlNCMGFHVWdkbWxrWlc4Z2NHeGhlV1Z5SUhkaGN5QnViM1FnYVc1cGRHbGhiR2w2WldRZ1kyOXljbVZqZEd4NUxpYzdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbkJwZUdWc1UzUnlaV0Z0YVc1bkxtUnBjM0JoZEdOb1JYWmxiblFvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYm1WM0lGQnNZWGxUZEhKbFlXMUZjbkp2Y2tWMlpXNTBLSHNnYldWemMyRm5aU0I5S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lFeHZaMmRsY2k1RmNuSnZjaWhNYjJkblpYSXVSMlYwVTNSaFkydFVjbUZqWlNncExDQnRaWE56WVdkbEtUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdjMlYwSUhSb1pTQmthWE5qYjI1dVpXTjBJRzFsYzNOaFoyVmNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjMlYwUkdselkyOXVibVZqZEUxbGMzTmhaMlZQZG1WeWNtbGtaU2hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuVTNSeVpXRnRJRzV2ZENCcGJtbDBhV0ZzYVhwbFpDQmpiM0p5WldOMGJIa25YRzRnSUNBZ0lDQWdJQ0FnSUNBcE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QmpiRzl6WlNCMGFHVWdZMjl1Ym1WamRHbHZibHh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVqYkc5elpWTnBaMjVoYkdsdVoxTmxjblpsY2lncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLQ0YwYUdsekxuWnBaR1Z2VUd4aGVXVnlMbWhoYzFacFpHVnZVMjkxY21ObEtDa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lFeHZaMmRsY2k1WFlYSnVhVzVuS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUV4dloyZGxjaTVIWlhSVGRHRmphMVJ5WVdObEtDa3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKME5oYm01dmRDQndiR0Y1SUhOMGNtVmhiU3dnZEdobElIWnBaR1Z2SUdWc1pXMWxiblFnYUdGeklHNXZJSE55WTA5aWFtVmpkQ0IwYnlCd2JHRjVMaWRjYmlBZ0lDQWdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQjBhR2x6TG5ObGRGUnZkV05vU1c1d2RYUkZibUZpYkdWa0tIUm9hWE11WTI5dVptbG5MbWx6Um14aFowVnVZV0pzWldRb1JteGhaM011Vkc5MVkyaEpibkIxZENrcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5CcGVHVnNVM1J5WldGdGFXNW5MbVJwYzNCaGRHTm9SWFpsYm5Rb2JtVjNJRkJzWVhsVGRISmxZVzFGZG1WdWRDZ3BLVHRjYmx4dUlDQWdJQ0FnSUNCcFppQW9kR2hwY3k1emRISmxZVzFEYjI1MGNtOXNiR1Z5TG1GMVpHbHZSV3hsYldWdWRDNXpjbU5QWW1wbFkzUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YzNSeVpXRnRRMjl1ZEhKdmJHeGxjaTVoZFdScGIwVnNaVzFsYm5RdWJYVjBaV1FnUFZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVZMjl1Wm1sbkxtbHpSbXhoWjBWdVlXSnNaV1FvUm14aFozTXVVM1JoY25SV2FXUmxiMDExZEdWa0tUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV6ZEhKbFlXMURiMjUwY205c2JHVnlMbUYxWkdsdlJXeGxiV1Z1ZEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM1d2JHRjVLQ2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F1ZEdobGJpZ29LU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWNHeGhlVlpwWkdWdktDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F1WTJGMFkyZ29LRzl1VW1WcVpXTjBaV1JTWldGemIyNHBJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdURzluWjJWeUxreHZaeWhNYjJkblpYSXVSMlYwVTNSaFkydFVjbUZqWlNncExDQnZibEpsYW1WamRHVmtVbVZoYzI5dUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVEc5bloyVnlMa3h2WnloY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUV4dloyZGxjaTVIWlhSVGRHRmphMVJ5WVdObEtDa3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5Rbkp2ZDNObGNpQmtiMlZ6SUc1dmRDQnpkWEJ3YjNKMElHRjFkRzl3YkdGNWFXNW5JSFpwWkdWdklIZHBkR2h2ZFhRZ2FXNTBaWEpoWTNScGIyNGdMU0IwYnlCeVpYTnZiSFpsSUhSb2FYTWdkMlVnWVhKbElHZHZhVzVuSUhSdklITm9iM2NnZEdobElIQnNZWGtnWW5WMGRHOXVJRzkyWlhKc1lYa3VKMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuQnBlR1ZzVTNSeVpXRnRhVzVuTG1ScGMzQmhkR05vUlhabGJuUW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnVaWGNnVUd4aGVWTjBjbVZoYlZKbGFtVmpkR1ZrUlhabGJuUW9lMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbFlYTnZiam9nYjI1U1pXcGxZM1JsWkZKbFlYTnZibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Y0d4aGVWWnBaR1Z2S0NrN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0IwYUdsekxuTm9iM1ZzWkZOb2IzZFFiR0Y1VDNabGNteGhlU0E5SUdaaGJITmxPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtWnlaV1Y2WlVaeVlXMWxRMjl1ZEhKdmJHeGxjaTV6YUc5M1JuSmxaWHBsUm5KaGJXVW9LVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJRYkdGNWN5QjBhR1VnZG1sa1pXOGdjM1J5WldGdFhHNGdJQ0FnSUNvdlhHNGdJQ0FnY0hKcGRtRjBaU0J3YkdGNVZtbGtaVzhvS1NCN1hHNGdJQ0FnSUNBZ0lDOHZJR2hoYm1Sc1pTQndiR0Y1S0NrZ2QybDBhQ0J3Y205dGFYTmxJR0Z6SUdsMElHbHpJR0Z1SUdGemVXNWphSEp2Ym05MWN5QmpZV3hzWEc0Z0lDQWdJQ0FnSUhSb2FYTXVkbWxrWlc5UWJHRjVaWEl1Y0d4aGVTZ3BMbU5oZEdOb0tDaHZibEpsYW1WamRHVmtVbVZoYzI5dU9pQnpkSEpwYm1jcElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxuTjBjbVZoYlVOdmJuUnliMnhzWlhJdVlYVmthVzlGYkdWdFpXNTBMbk55WTA5aWFtVmpkQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjM1J5WldGdFEyOXVkSEp2Ykd4bGNpNWhkV1JwYjBWc1pXMWxiblF1Y0dGMWMyVW9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUV4dloyZGxjaTVNYjJjb1RHOW5aMlZ5TGtkbGRGTjBZV05yVkhKaFkyVW9LU3dnYjI1U1pXcGxZM1JsWkZKbFlYTnZiaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQk1iMmRuWlhJdVRHOW5LRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRXh2WjJkbGNpNUhaWFJUZEdGamExUnlZV05sS0Nrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0owSnliM2R6WlhJZ1pHOWxjeUJ1YjNRZ2MzVndjRzl5ZENCaGRYUnZjR3hoZVdsdVp5QjJhV1JsYnlCM2FYUm9iM1YwSUdsdWRHVnlZV04wYVc5dUlDMGdkRzhnY21WemIyeDJaU0IwYUdseklIZGxJR0Z5WlNCbmIybHVaeUIwYnlCemFHOTNJSFJvWlNCd2JHRjVJR0oxZEhSdmJpQnZkbVZ5YkdGNUxpZGNiaUFnSUNBZ0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuQnBlR1ZzVTNSeVpXRnRhVzVuTG1ScGMzQmhkR05vUlhabGJuUW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdibVYzSUZCc1lYbFRkSEpsWVcxU1pXcGxZM1JsWkVWMlpXNTBLSHNnY21WaGMyOXVPaUJ2YmxKbGFtVmpkR1ZrVW1WaGMyOXVJSDBwWEc0Z0lDQWdJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCRmJtRmliR1VnZEdobElIWnBaR1Z2SUhSdklIQnNZWGtnWVhWMGIyMWhkR2xqWVd4c2VTQnBaaUJsYm1GaWJHVkJkWFJ2Y0d4aGVTQnBjeUIwY25WbFhHNGdJQ0FnSUNvdlhHNGdJQ0FnWVhWMGIxQnNZWGxXYVdSbGIwOXlVMlYwVlhCUWJHRjVUM1psY214aGVTZ3BJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11WTI5dVptbG5MbWx6Um14aFowVnVZV0pzWldRb1JteGhaM011UVhWMGIxQnNZWGxXYVdSbGJ5a3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJR0YwZEdWdGNIUWdkRzhnY0d4aGVTQjBhR1VnZG1sa1pXOWNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjR3hoZVZOMGNtVmhiU2dwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIUm9hWE11Y21WemFYcGxVR3hoZVdWeVUzUjViR1VvS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCRGIyNXVaV04wSUhSdklIUm9aU0JUYVdkdVlXeHBibWNnYzJWeWRtVnlYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1kyOXVibVZqZEZSdlUybG5ibUZzYkdsdVoxTmxjblpsY2lncElIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2MybG5ibUZzYkdsdVoxVnliQ0E5SUhSb2FYTXVjMmxuYm1Gc2JHbHVaMVZ5YkVKMWFXeGtaWElvS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTUzWldKVGIyTnJaWFJEYjI1MGNtOXNiR1Z5TG1OdmJtNWxZM1FvYzJsbmJtRnNiR2x1WjFWeWJDazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dWR2hwY3lCM2FXeHNJSE4wWVhKMElIUm9aU0JvWVc1a2MyaGhhMlVnZEc4Z2RHaGxJSE5wWjI1aGJHeHBibWNnYzJWeWRtVnlYRzRnSUNBZ0lDb2dRSEJoY21GdElIQmxaWEpEYjI1bWFXY2dJQzBnVWxSRElFTnZibVpwWjNWeVlYUnBiMjRnVDNCMGFXOXVjeUJtY205dElIUm9aU0JUYVdkdVlXeHBibWNnYzJWeWRtVnlYRzRnSUNBZ0lDb2dRSEpsYldGeWF5QlNWRU1nVUdWbGNpQkRiMjV1WldOMGFXOXVJRzl1SUVsalpTQkRZVzVrYVdSaGRHVWdaWFpsYm5RZ2FHRjJaU0JwZENCb1lXNWtiR1ZrSUdKNUlHaGhibVJzWlNCVFpXNWtJRWxqWlNCRFlXNWthV1JoZEdWY2JpQWdJQ0FnS2k5Y2JpQWdJQ0J6ZEdGeWRGTmxjM05wYjI0b2NHVmxja052Ym1acFp6b2dVbFJEUTI5dVptbG5kWEpoZEdsdmJpa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxuQmxaWEpEYjI1bWFXY2dQU0J3WldWeVEyOXVabWxuTzF4dUlDQWdJQ0FnSUNBdkx5QmphR1ZqYXlCbWIzSWdabTl5WTJsdVp5QjBkWEp1WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG1OdmJtWnBaeTVwYzBac1lXZEZibUZpYkdWa0tFWnNZV2R6TGtadmNtTmxWRlZTVGlrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklHTm9aV05ySUdadmNpQmhJSFIxY200Z2MyVnlkbVZ5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCb1lYTlVkWEp1VTJWeWRtVnlJRDBnZEdocGN5NWphR1ZqYTFSMWNtNVRaWEoyWlhKQmRtRnBiR0ZpYVd4cGRIa29jR1ZsY2tOdmJtWnBaeWs3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUdOc2IzTmxJR0Z1WkNCbGNuSnZjaUJwWmlCMGRYSnVJR2x6SUdadmNtTmxaQ0JoYm1RZ2RHaGxjbVVnYVhNZ2JtOGdkSFZ5YmlCelpYSjJaWEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doYUdGelZIVnlibE5sY25abGNpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRXh2WjJkbGNpNUpibVp2S0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQk1iMmRuWlhJdVIyVjBVM1JoWTJ0VWNtRmpaU2dwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5UbThnZEhWeWJpQnpaWEoyWlhJZ2QyRnpJR1p2ZFc1a0lHbHVJSFJvWlNCUVpXVnlJRU52Ym01bFkzUnBiMjRnVDNCMGFXOXVjeTRnVkZWU1RpQmpZVzV1YjNRZ1ltVWdabTl5WTJWa0xDQmpiRzl6YVc1bklHTnZibTVsWTNScGIyNHVJRkJzWldGelpTQjFjMlVnVTFSVlRpQnBibk4wWldGa0oxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1elpYUkVhWE5qYjI1dVpXTjBUV1Z6YzJGblpVOTJaWEp5YVdSbEtGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuVkZWU1RpQmpZVzV1YjNRZ1ltVWdabTl5WTJWa0xDQmpiRzl6YVc1bklHTnZibTVsWTNScGIyNHVJRkJzWldGelpTQjFjMlVnVTFSVlRpQnBibk4wWldGa0xpZGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVkyeHZjMlZUYVdkdVlXeHBibWRUWlhKMlpYSW9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0F2THlCelpYUWdkWEFnZEdobElIQmxaWElnWTI5dWJtVmpkR2x2YmlCamIyNTBjbTlzYkdWeVhHNGdJQ0FnSUNBZ0lIUm9hWE11Y0dWbGNrTnZibTVsWTNScGIyNURiMjUwY205c2JHVnlJRDBnYm1WM0lGQmxaWEpEYjI1dVpXTjBhVzl1UTI5dWRISnZiR3hsY2loY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWNHVmxja052Ym1acFp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVZMjl1Wm1sbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXdjbVZtWlhKeVpXUkRiMlJsWTF4dUlDQWdJQ0FnSUNBcE8xeHVYRzRnSUNBZ0lDQWdJQzh2SUhObGRDQjFjQ0J3WldWeUlHTnZibTVsWTNScGIyNGdZMjl1ZEhKdmJHeGxjaUIyYVdSbGJ5QnpkR0YwYzF4dUlDQWdJQ0FnSUNCMGFHbHpMbkJsWlhKRGIyNXVaV04wYVc5dVEyOXVkSEp2Ykd4bGNpNXZibFpwWkdWdlUzUmhkSE1nUFNBb1pYWmxiblE2SUVGblozSmxaMkYwWldSVGRHRjBjeWtnUFQ1Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWFHRnVaR3hsVm1sa1pXOVRkR0YwY3lobGRtVnVkQ2s3WEc1Y2JpQWdJQ0FnSUNBZ0x5b2dWMmhsYmlCMGFHVWdVR1ZsY2lCRGIyNXVaV04wYVc5dUlIZGhiblJ6SUhSdklITmxibVFnWVc0Z2IyWm1aWElnYUdGMlpTQnBkQ0JvWVc1a2JHVmtJQ292WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjR1ZsY2tOdmJtNWxZM1JwYjI1RGIyNTBjbTlzYkdWeUxtOXVVMlZ1WkZkbFlsSlVRMDltWm1WeUlEMGdLRnh1SUNBZ0lDQWdJQ0FnSUNBZ2IyWm1aWEk2SUZKVVExTmxjM05wYjI1RVpYTmpjbWx3ZEdsdmJrbHVhWFJjYmlBZ0lDQWdJQ0FnS1NBOVBpQjBhR2x6TG1oaGJtUnNaVk5sYm1SWFpXSlNWRU5QWm1abGNpaHZabVpsY2lrN1hHNWNiaUFnSUNBZ0lDQWdMeW9nVjJobGJpQjBhR1VnVUdWbGNpQkRiMjV1WldOMGFXOXVJSGRoYm5SeklIUnZJSE5sYm1RZ1lXNGdZVzV6ZDJWeUlHaGhkbVVnYVhRZ2FHRnVaR3hsWkNBcUwxeHVJQ0FnSUNBZ0lDQjBhR2x6TG5CbFpYSkRiMjV1WldOMGFXOXVRMjl1ZEhKdmJHeGxjaTV2YmxObGJtUlhaV0pTVkVOQmJuTjNaWElnUFNBb1hHNGdJQ0FnSUNBZ0lDQWdJQ0J2Wm1abGNqb2dVbFJEVTJWemMybHZia1JsYzJOeWFYQjBhVzl1U1c1cGRGeHVJQ0FnSUNBZ0lDQXBJRDArSUhSb2FYTXVhR0Z1Wkd4bFUyVnVaRmRsWWxKVVEwRnVjM2RsY2lodlptWmxjaWs3WEc1Y2JpQWdJQ0FnSUNBZ0x5b2dWMmhsYmlCMGFHVWdVR1ZsY2lCRGIyNXVaV04wYVc5dUlHbGpaU0JqWVc1a2FXUmhkR1VnYVhNZ1lXUmtaV1FnYUdGMlpTQnBkQ0JvWVc1a2JHVmtJQ292WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjR1ZsY2tOdmJtNWxZM1JwYjI1RGIyNTBjbTlzYkdWeUxtOXVVR1ZsY2tsalpVTmhibVJwWkdGMFpTQTlJQ2hjYmlBZ0lDQWdJQ0FnSUNBZ0lIQmxaWEpEYjI1dVpXTjBhVzl1U1dObFJYWmxiblE2SUZKVVExQmxaWEpEYjI1dVpXTjBhVzl1U1dObFJYWmxiblJjYmlBZ0lDQWdJQ0FnS1NBOVBpQjBhR2x6TG1oaGJtUnNaVk5sYm1SSlkyVkRZVzVrYVdSaGRHVW9jR1ZsY2tOdmJtNWxZM1JwYjI1SlkyVkZkbVZ1ZENrN1hHNWNiaUFnSUNBZ0lDQWdMeW9nVjJobGJpQjBhR1VnVUdWbGNpQkRiMjV1WldOMGFXOXVJR2hoY3lCaElHUmhkR0VnWTJoaGJtNWxiQ0JqY21WaGRHVmtJR1p2Y2lCcGRDQmllU0IwYUdVZ1luSnZkM05sY2l3Z2FHRnVaR3hsSUdsMElDb3ZYRzRnSUNBZ0lDQWdJSFJvYVhNdWNHVmxja052Ym01bFkzUnBiMjVEYjI1MGNtOXNiR1Z5TG05dVJHRjBZVU5vWVc1dVpXd2dQU0FvWEc0Z0lDQWdJQ0FnSUNBZ0lDQmtZWFJoWTJoaGJtNWxiRVYyWlc1ME9pQlNWRU5FWVhSaFEyaGhibTVsYkVWMlpXNTBYRzRnSUNBZ0lDQWdJQ2tnUFQ0Z2RHaHBjeTVvWVc1a2JHVkVZWFJoUTJoaGJtNWxiQ2hrWVhSaFkyaGhibTVsYkVWMlpXNTBLVHRjYmx4dUlDQWdJQ0FnSUNBdkx5QnpaWFFnZFhBZ2QyVmlVblJqSUhSbGVIUWdiM1psY214aGVYTmNiaUFnSUNBZ0lDQWdkR2hwY3k1d1pXVnlRMjl1Ym1WamRHbHZia052Ym5SeWIyeHNaWEl1YzJodmQxUmxlSFJQZG1WeWJHRjVRMjl1Ym1WamRHbHVaeUE5SUNncElEMCtYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbkJwZUdWc1UzUnlaV0Z0YVc1bkxsOXZibGRsWWxKMFkwTnZibTVsWTNScGJtY29LVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXdaV1Z5UTI5dWJtVmpkR2x2YmtOdmJuUnliMnhzWlhJdWMyaHZkMVJsZUhSUGRtVnliR0Y1VTJWMGRYQkdZV2xzZFhKbElEMGdLQ2tnUFQ1Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWNHbDRaV3hUZEhKbFlXMXBibWN1WDI5dVYyVmlVblJqUm1GcGJHVmtLQ2s3WEc0Z0lDQWdJQ0FnSUd4bGRDQjNaV0pTZEdORGIyNXVaV04wWldSVFpXNTBJRDBnWm1Gc2MyVTdYRzRnSUNBZ0lDQWdJSFJvYVhNdWNHVmxja052Ym01bFkzUnBiMjVEYjI1MGNtOXNiR1Z5TG05dVNXTmxRMjl1Ym1WamRHbHZibE4wWVhSbFEyaGhibWRsSUQwZ0tDa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnUW5KdmQzTmxjbk1nWlcxcGRDQmNJbU52Ym01bFkzUmxaRndpSUhkb1pXNGdaMlYwZEdsdVp5Qm1hWEp6ZENCamIyNXVaV04wYVc5dUlHRnVaQ0JjSW1OdmJYQnNaWFJsWkZ3aUlIZG9aVzRnWm1sdWFYTm9hVzVuWEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJqWVc1a2FXUmhkR1VnWTJobFkydHBibWN1SUVodmQyVjJaWElzSUhOdmJXVjBhVzFsY3lCaWNtOTNjMlZ5Y3lCallXNGdjMnRwY0NCY0ltTnZibTVsWTNSbFpGd2lJR0Z1WkNCdmJteDVJR1Z0YVhRZ1hDSmpiMjF3YkdWMFpXUmNJaTVjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRlJvWlhKbFptOXlaU0J1WldWa0lIUnZJR05vWldOcklHSnZkR2dnWTJGelpYTWdZVzVrSUdWdGFYUWdiMjVYWldKU2RHTkRiMjV1WldOMFpXUWdiMjVzZVNCdmJtTmxJRzl1SUhSb1pTQm1hWEp6ZENCb2FYUXVYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9JWGRsWWxKMFkwTnZibTVsWTNSbFpGTmxiblFnSmlZZ1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1cxd2lZMjl1Ym1WamRHVmtYQ0lzSUZ3aVkyOXRjR3hsZEdWa1hDSmRMbWx1WTJ4MVpHVnpLSFJvYVhNdWNHVmxja052Ym01bFkzUnBiMjVEYjI1MGNtOXNiR1Z5TG5CbFpYSkRiMjV1WldOMGFXOXVMbWxqWlVOdmJtNWxZM1JwYjI1VGRHRjBaU2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbkJwZUdWc1UzUnlaV0Z0YVc1bkxsOXZibGRsWWxKMFkwTnZibTVsWTNSbFpDZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSGRsWWxKMFkwTnZibTVsWTNSbFpGTmxiblFnUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlPMXh1WEc0Z0lDQWdJQ0FnSUM4cUlGSlVReUJRWldWeUlFTnZibTVsWTNScGIyNGdiMjRnVkhKaFkyc2daWFpsYm5RZ0xUNGdhR0Z1Wkd4bElHOXVJSFJ5WVdOcklDb3ZYRzRnSUNBZ0lDQWdJSFJvYVhNdWNHVmxja052Ym01bFkzUnBiMjVEYjI1MGNtOXNiR1Z5TG05dVZISmhZMnNnUFNBb2RISmhZMnRGZG1WdWREb2dVbFJEVkhKaFkydEZkbVZ1ZENrZ1BUNWNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjM1J5WldGdFEyOXVkSEp2Ykd4bGNpNW9ZVzVrYkdWUGJsUnlZV05yS0hSeVlXTnJSWFpsYm5RcE8xeHVYRzRnSUNBZ0lDQWdJQzhxSUZOMFlYSjBJSFJvWlNCSVlXNWtJSE5vWVd0bElIQnliMk5sYzNNZ1lua2dZM0psWVhScGJtY2dZVzRnVDJabVpYSWdLaTljYmlBZ0lDQWdJQ0FnWTI5dWMzUWdRbkp2ZDNObGNsTmxibVJ6VDJabVpYSWdQU0IwYUdsekxtTnZibVpwWnk1cGMwWnNZV2RGYm1GaWJHVmtLRnh1SUNBZ0lDQWdJQ0FnSUNBZ1JteGhaM011UW5KdmQzTmxjbE5sYm1SUFptWmxjbHh1SUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNCcFppQW9Rbkp2ZDNObGNsTmxibVJ6VDJabVpYSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRWxtSUdKeWIzZHpaWElnYVhNZ2MyVnVaR2x1WnlCMGFHVWdiMlptWlhJc0lHTnlaV0YwWlNCaGJpQnZabVpsY2lCaGJtUWdjMlZ1WkNCcGRDQjBieUIwYUdVZ2MzUnlaV0Z0WlhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWMyVnVaSEpsWTNaRVlYUmhRMmhoYm01bGJFTnZiblJ5YjJ4c1pYSXVZM0psWVhSbFJHRjBZVU5vWVc1dVpXd29YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1d1pXVnlRMjl1Ym1WamRHbHZia052Ym5SeWIyeHNaWEl1Y0dWbGNrTnZibTVsWTNScGIyNHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKMk5wY25KMWN5Y3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1a1lYUmhZMmhoYm01bGJFOXdkR2x2Ym5OY2JpQWdJQ0FnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5ObGJtUnlaV04yUkdGMFlVTm9ZVzV1Wld4RGIyNTBjbTlzYkdWeUxtaGhibVJzWlU5dVRXVnpjMkZuWlNBOUlDaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxkam9nVFdWemMyRm5aVVYyWlc1MFBFRnljbUY1UW5WbVptVnlQbHh1SUNBZ0lDQWdJQ0FnSUNBZ0tTQTlQaUIwYUdsekxtaGhibVJzWlU5dVRXVnpjMkZuWlNobGRpazdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbkJsWlhKRGIyNXVaV04wYVc5dVEyOXVkSEp2Ykd4bGNpNWpjbVZoZEdWUFptWmxjaWhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuTmtjRU52Ym5OMGNtRnBiblJ6TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVZMjl1Wm1sblhHNGdJQ0FnSUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1EyaGxZMnR6SUhSb1pTQndaV1Z5SUdOdmJtNWxZM1JwYjI0Z2IzQjBhVzl1Y3lCbWIzSWdZU0IwZFhKdUlITmxjblpsY2lCaGJtUWdjbVYwZFhKdWN5QjBjblZsSUc5eUlHWmhiSE5sWEc0Z0lDQWdJQ292WEc0Z0lDQWdZMmhsWTJ0VWRYSnVVMlZ5ZG1WeVFYWmhhV3hoWW1sc2FYUjVLRzl3ZEdsdmJuTTZJRkpVUTBOdmJtWnBaM1Z5WVhScGIyNHBJSHRjYmlBZ0lDQWdJQ0FnTHk4Z2FXWWdhV05sVTJWeWRtVnljeUJwY3lCbGJYQjBlU0J5WlhSMWNtNGdabUZzYzJVZ2RHaHBjeUJ6YUc5MWJHUWdibTkwSUdKbElIUm9aU0JuWlc1bGNtRnNJSFZ6WlNCallYTmxJR0oxZENCcGN5Qm9aWEpsSUdsdVkyRnpaVnh1SUNBZ0lDQWdJQ0JwWmlBb0lXOXdkR2x2Ym5NdWFXTmxVMlZ5ZG1WeWN5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1RHOW5aMlZ5TGtsdVptOG9URzluWjJWeUxrZGxkRk4wWVdOclZISmhZMlVvS1N3Z0owRWdkSFZ5YmlCelpYWmxjaUIzWVhNZ2JtOTBJR1p2ZFc1a0p5azdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWm1Gc2MyVTdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBdkx5QnNiMjl3SUhSb2NtOTFaMmdnZEdobElHbGpaU0J6WlhKMlpYSnpJSFJ2SUdOb1pXTnJJR1p2Y2lCaElIUjFjbTRnZFhKc1hHNGdJQ0FnSUNBZ0lHWnZjaUFvWTI5dWMzUWdhV05sVTJWeWRtVnlJRzltSUc5d2RHbHZibk11YVdObFUyVnlkbVZ5Y3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWm05eUlDaGpiMjV6ZENCMWNtd2diMllnYVdObFUyVnlkbVZ5TG5WeWJITXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RYSnNMbWx1WTJ4MVpHVnpLQ2QwZFhKdUp5a3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1RHOW5aMlZ5TGt4dlp5aGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lFeHZaMmRsY2k1SFpYUlRkR0ZqYTFSeVlXTmxLQ2tzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JnUVNCMGRYSnVJSE5sZG1WeUlIZGhjeUJtYjNWdVpDQmhkQ0FrZTNWeWJIMWdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBjblZsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lFeHZaMmRsY2k1SmJtWnZLRXh2WjJkbGNpNUhaWFJUZEdGamExUnlZV05sS0Nrc0lDZEJJSFIxY200Z2MyVjJaWElnZDJGeklHNXZkQ0JtYjNWdVpDY3BPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1NHRnVaR3hsY3lCM2FHVnVJR0VnUTI5dVptbG5JRTFsYzNOaFoyVWdhWE1nY21WalpXbDJaV1FnWTI5dWRHRnBibk1nZEdobElGQmxaWElnUTI5dWJtVmpkR2x2YmlCUGNIUnBiMjV6SUhKbGNYVnBjbVZrSUNoVFZGVk9JR0Z1WkNCVVZWSk9JRk5sY25abGNpQkpibVp2S1Z4dUlDQWdJQ0FxSUVCd1lYSmhiU0J0WlhOellXZGxRMjl1Wm1sbklDMGdRMjl1Wm1sbklFMWxjM05oWjJVZ2NtVmpaV2wyWldRZ1puSnZiU0IwYUdVZ2MybG5ibUZzYVc1bklITmxjblpsY2x4dUlDQWdJQ0FxTDF4dUlDQWdJR2hoYm1Sc1pVOXVRMjl1Wm1sblRXVnpjMkZuWlNodFpYTnpZV2RsUTI5dVptbG5PaUJOWlhOellXZGxRMjl1Wm1sbktTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWNtVnphWHBsVUd4aGVXVnlVM1I1YkdVb0tUdGNibHh1SUNBZ0lDQWdJQ0F2THlCVVpXeHNJSFJvWlNCWFpXSlNkR05EYjI1MGNtOXNiR1Z5SUhSdklITjBZWEowSUdFZ2MyVnpjMmx2YmlCM2FYUm9JSFJvWlNCd1pXVnlJRzl3ZEdsdmJuTWdjMlZ1ZENCbWNtOXRJSFJvWlNCemFXZHVZV3hwYm1jZ2MyVnlkbVZ5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjM1JoY25SVFpYTnphVzl1S0cxbGMzTmhaMlZEYjI1bWFXY3VjR1ZsY2tOdmJtNWxZM1JwYjI1UGNIUnBiMjV6S1R0Y2JseHVJQ0FnSUNBZ0lDQXZMeUJYYUdWdUlIUm9aU0J6YVdkdVlXeHBibWNnYzJWeWRtVnlJSE5sYm1SeklHRWdWMlZpVWxSRElFRnVjM2RsY2lCdmRtVnlJSFJvWlNCM1pXSnpiMk5yWlhRZ1kyOXVibVZqZEdsdmJpQm9ZWFpsSUhSb1pTQlhaV0pTZEdORGIyNTBjbTlzYkdWeUlHaGhibVJzWlNCMGFHVWdiV1Z6YzJGblpWeHVJQ0FnSUNBZ0lDQjBhR2x6TG5kbFlsTnZZMnRsZEVOdmJuUnliMnhzWlhJdWIyNVhaV0pTZEdOQmJuTjNaWElnUFNBb1hHNGdJQ0FnSUNBZ0lDQWdJQ0J0WlhOellXZGxRVzV6ZDJWeU9pQk5aWE56WVdkbFVtVmpaV2wyWlM1TlpYTnpZV2RsUVc1emQyVnlYRzRnSUNBZ0lDQWdJQ2tnUFQ0Z2RHaHBjeTVvWVc1a2JHVlhaV0pTZEdOQmJuTjNaWElvYldWemMyRm5aVUZ1YzNkbGNpazdYRzRnSUNBZ0lDQWdJSFJvYVhNdWQyVmlVMjlqYTJWMFEyOXVkSEp2Ykd4bGNpNXZibGRsWWxKMFkwOW1abVZ5SUQwZ0tGeHVJQ0FnSUNBZ0lDQWdJQ0FnYldWemMyRm5aVTltWm1WeU9pQk5aWE56WVdkbFVtVmpaV2wyWlM1TlpYTnpZV2RsVDJabVpYSmNiaUFnSUNBZ0lDQWdLU0E5UGlCMGFHbHpMbWhoYm1Sc1pWZGxZbEowWTA5bVptVnlLRzFsYzNOaFoyVlBabVpsY2lrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11ZDJWaVUyOWphMlYwUTI5dWRISnZiR3hsY2k1dmJsZGxZbEowWTFCbFpYSkVZWFJoUTJoaGJtNWxiSE1nUFNBb1hHNGdJQ0FnSUNBZ0lDQWdJQ0J0WlhOellXZGxSR0YwWVVOb1lXNXVaV3h6T2lCTlpYTnpZV2RsVW1WalpXbDJaUzVOWlhOellXZGxVR1ZsY2tSaGRHRkRhR0Z1Ym1Wc2MxeHVJQ0FnSUNBZ0lDQXBJRDArSUhSb2FYTXVhR0Z1Wkd4bFYyVmlVblJqVTBaVlVHVmxja1JoZEdGamFHRnVibVZzY3lodFpYTnpZV2RsUkdGMFlVTm9ZVzV1Wld4ektUdGNibHh1SUNBZ0lDQWdJQ0F2THlCWGFHVnVJSFJvWlNCemFXZHVZV3hwYm1jZ2MyVnlkbVZ5SUhObGJtUnpJR0VnU1dObFEyRnVaR2xrWVhSbElHOTJaWElnZEdobElIZGxZbk52WTJ0bGRDQmpiMjV1WldOMGFXOXVJR2hoZG1VZ2RHaGxJRmRsWWxKMFkwTnZiblJ5YjJ4c1pYSWdhR0Z1Wkd4bElIUm9aU0J0WlhOellXZGxYRzRnSUNBZ0lDQWdJSFJvYVhNdWQyVmlVMjlqYTJWMFEyOXVkSEp2Ykd4bGNpNXZia2xqWlVOaGJtUnBaR0YwWlNBOUlDaGNiaUFnSUNBZ0lDQWdJQ0FnSUdsalpVTmhibVJwWkdGMFpUb2dVbFJEU1dObFEyRnVaR2xrWVhSbFNXNXBkRnh1SUNBZ0lDQWdJQ0FwSUQwK0lIUm9hWE11YUdGdVpHeGxTV05sUTJGdVpHbGtZWFJsS0dsalpVTmhibVJwWkdGMFpTazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dTR0Z1Wkd4bGN5QjNhR1Z1SUhSb1pTQnphV2R1WVd4c2FXNW5JSE5sY25abGNpQm5hWFpsY3lCMWN5QjBhR1VnYkdsemRDQnZaaUJ6ZEhKbFlXMWxjaUJwWkhNdVhHNGdJQ0FnSUNvdlhHNGdJQ0FnYUdGdVpHeGxVM1J5WldGdFpYSk1hWE4wVFdWemMyRm5aU2h0WlhOellXZGxVM1J5WldGdFpYSk1hWE4wT2lCTlpYTnpZV2RsVTNSeVpXRnRaWEpNYVhOMEtTQjdYRzRnSUNBZ0lDQWdJRXh2WjJkbGNpNU1iMmNvWEc0Z0lDQWdJQ0FnSUNBZ0lDQk1iMmRuWlhJdVIyVjBVM1JoWTJ0VWNtRmpaU2dwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdZRWR2ZENCemRISmxZVzFsY2lCc2FYTjBJQ1I3YldWemMyRm5aVk4wY21WaGJXVnlUR2x6ZEM1cFpITjlZQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lEWmNiaUFnSUNBZ0lDQWdLVHRjYmx4dUlDQWdJQ0FnSUNCcFppaDBhR2x6TG1selVtVmpiMjV1WldOMGFXNW5LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaWh0WlhOellXZGxVM1J5WldGdFpYSk1hWE4wTG1sa2N5NXBibU5zZFdSbGN5aDBhR2x6TG5OMVluTmpjbWxpWldSVGRISmxZVzBwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdTV1lnZDJVbmNtVWdjbVZqYjI1dVpXTjBhVzVuSUdGdVpDQjBhR1VnY0hKbGRtbHZkWE5zZVNCemRXSnpZM0pwWW1Wa0lITjBjbVZoYlNCb1lYTWdZMjl0WlNCaVlXTnJMQ0J5WlhOMVluTmpjbWxpWlNCMGJ5QnBkRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWFYTlNaV052Ym01bFkzUnBibWNnUFNCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuSmxZMjl1Ym1WamRFRjBkR1Z0Y0hRZ1BTQXdPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWQyVmlVMjlqYTJWMFEyOXVkSEp2Ykd4bGNpNXpaVzVrVTNWaWMyTnlhV0psS0hSb2FYTXVjM1ZpYzJOeWFXSmxaRk4wY21WaGJTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZb2RHaHBjeTV5WldOdmJtNWxZM1JCZEhSbGJYQjBJRHdnZEdocGN5NWpiMjVtYVdjdVoyVjBUblZ0WlhKcFkxTmxkSFJwYm1kV1lXeDFaU2hPZFcxbGNtbGpVR0Z5WVcxbGRHVnljeTVOWVhoU1pXTnZibTVsWTNSQmRIUmxiWEIwY3lrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJQZFhJZ2NISmxkbWx2ZFhNZ2MzUnlaV0Z0SUdoaGMyNG5kQ0JqYjIxbElHSmhZMnNzSUhkaGFYUWdNaUJ6WldOdmJtUnpJR0Z1WkNCeVpYRjFaWE4wSUdGdUlIVndaR0YwWldRZ2MzUnlaV0Z0SUd4cGMzUmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5KbFkyOXVibVZqZEVGMGRHVnRjSFFyS3p0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCelpYUlVhVzFsYjNWMEtDZ3BJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1M1pXSlRiMk5yWlhSRGIyNTBjbTlzYkdWeUxuSmxjWFZsYzNSVGRISmxZVzFsY2t4cGMzUW9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5TENBeU1EQXdLVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QlhaU2QyWlNCbGVHaGhkWE4wWldRZ2IzVnlJSEpsWTI5dWJtVmpkQ0JoZEhSbGJYQjBjeXdnY21WMGRYSnVJSFJ2SUcxaGFXNGdjMk55WldWdVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV5WldOdmJtNWxZM1JCZEhSbGJYQjBJRDBnTUR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbWx6VW1WamIyNXVaV04wYVc1bklEMGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV6YUc5MWJHUlNaV052Ym01bFkzUWdQU0JtWVd4elpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5kbFlsTnZZMnRsZEVOdmJuUnliMnhzWlhJdVkyeHZjMlVvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbU52Ym1acFp5NXpaWFJQY0hScGIyNVRaWFIwYVc1blZtRnNkV1VvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lFOXdkR2x2YmxCaGNtRnRaWFJsY25NdVUzUnlaV0Z0WlhKSlpDeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWENKY0lseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1amIyNW1hV2N1YzJWMFQzQjBhVzl1VTJWMGRHbHVaMDl3ZEdsdmJuTW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUU5d2RHbHZibEJoY21GdFpYUmxjbk11VTNSeVpXRnRaWEpKWkN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdXMTFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnYzJWMGRHbHVaMDl3ZEdsdmJuTWdQU0JiTGk0dWJXVnpjMkZuWlZOMGNtVmhiV1Z5VEdsemRDNXBaSE5kT3lBdkx5QmpiM0I1SUhSb1pTQnZjbWxuYVc1aGJDQnRaWE56WVdkbFUzUnlaV0Z0WlhKTWFYTjBMbWxrYzF4dUlDQWdJQ0FnSUNBZ0lDQWdjMlYwZEdsdVowOXdkR2x2Ym5NdWRXNXphR2xtZENnbkp5azdJQzh2SUdGa1pDQmhiaUJsYlhCMGVTQnZjSFJwYjI0Z1lYUWdkR2hsSUhSdmNGeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWpiMjVtYVdjdWMyVjBUM0IwYVc5dVUyVjBkR2x1WjA5d2RHbHZibk1vWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVDNCMGFXOXVVR0Z5WVcxbGRHVnljeTVUZEhKbFlXMWxja2xrTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhObGRIUnBibWRQY0hScGIyNXpYRzRnSUNBZ0lDQWdJQ0FnSUNBcE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0IxY214UVlYSmhiWE1nUFNCdVpYY2dWVkpNVTJWaGNtTm9VR0Z5WVcxektIZHBibVJ2ZHk1c2IyTmhkR2x2Ymk1elpXRnlZMmdwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdGMWRHOVRaV3hsWTNSbFpGTjBjbVZoYldWeVNXUTZJSE4wY21sdVp5QjhJRzUxYkd3Z1BTQnVkV3hzTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0cxbGMzTmhaMlZUZEhKbFlXMWxja3hwYzNRdWFXUnpMbXhsYm1kMGFDQTlQU0F4S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdTV1lnZEdobGNtVW5jeUJ2Ym14NUlHRWdjMmx1WjJ4bElITjBjbVZoYldWeUxDQnpkV0p6WTNKcFltVWdkRzhnYVhRZ2NtVm5ZWEprYkdWemN5QnZaaUIzYUdGMElHbHpJR2x1SUhSb1pTQlZVa3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoZFhSdlUyVnNaV04wWldSVGRISmxZVzFsY2tsa0lEMGdiV1Z6YzJGblpWTjBjbVZoYldWeVRHbHpkQzVwWkhOYk1GMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WTI5dVptbG5MbWx6Um14aFowVnVZV0pzWldRb1JteGhaM011VUhKbFptVnlVMFpWS1NBbUpseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHMWxjM05oWjJWVGRISmxZVzFsY2t4cGMzUXVhV1J6TG1sdVkyeDFaR1Z6S0NkVFJsVW5LVnh1SUNBZ0lDQWdJQ0FnSUNBZ0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnU1dZZ2RHaGxJRk5HVlNCMGIyZG5iR1VnYVhNZ2IyNGdZVzVrSUhSb1pYSmxKM01nWVc0Z1UwWlZJR052Ym01bFkzUmxaQ3dnYzNWaWMyTnlhV0psSUhSdklHbDBJSEpsWjJGeVpHeGxjM01nYjJZZ2QyaGhkQ0JwY3lCcGJpQjBhR1VnVlZKTVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lYVjBiMU5sYkdWamRHVmtVM1J5WldGdFpYSkpaQ0E5SUNkVFJsVW5PMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjFjbXhRWVhKaGJYTXVhR0Z6S0U5d2RHbHZibEJoY21GdFpYUmxjbk11VTNSeVpXRnRaWEpKWkNrZ0ppWmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnRaWE56WVdkbFUzUnlaV0Z0WlhKTWFYTjBMbWxrY3k1cGJtTnNkV1JsY3loY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkWEpzVUdGeVlXMXpMbWRsZENoUGNIUnBiMjVRWVhKaGJXVjBaWEp6TGxOMGNtVmhiV1Z5U1dRcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tWeHVJQ0FnSUNBZ0lDQWdJQ0FnS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdTV1lnZEdobGNtVW5jeUJoSUhOMGNtVmhiV1Z5SUVsRUlHbHVJSFJvWlNCVlVrd2dZVzVrSUdFZ2MzUnlaV0Z0WlhJZ2QybDBhQ0IwYUdseklFbEVJR2x6SUdOdmJtNWxZM1JsWkN3Z2MyVjBJR2wwSUdGeklIUm9aU0J6Wld4bFkzUmxaQ0J6ZEhKbFlXMWxjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0YxZEc5VFpXeGxZM1JsWkZOMGNtVmhiV1Z5U1dRZ1BTQjFjbXhRWVhKaGJYTXVaMlYwS0U5d2RHbHZibEJoY21GdFpYUmxjbk11VTNSeVpXRnRaWEpKWkNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWVhWMGIxTmxiR1ZqZEdWa1UzUnlaV0Z0WlhKSlpDQWhQVDBnYm5Wc2JDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVkyOXVabWxuTG5ObGRFOXdkR2x2YmxObGRIUnBibWRXWVd4MVpTaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVDNCMGFXOXVVR0Z5WVcxbGRHVnljeTVUZEhKbFlXMWxja2xrTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmhkWFJ2VTJWc1pXTjBaV1JUZEhKbFlXMWxja2xrWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Y0dsNFpXeFRkSEpsWVcxcGJtY3VaR2x6Y0dGMFkyaEZkbVZ1ZENoY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdVpYY2dVM1J5WldGdFpYSk1hWE4wVFdWemMyRm5aVVYyWlc1MEtIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYldWemMyRm5aVk4wY21WaGJXVnlUR2x6ZEN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZWFYwYjFObGJHVmpkR1ZrVTNSeVpXRnRaWEpKWkZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1NHRnVaR3hsSUhSb1pTQlNWRU1nUVc1emQyVnlJR1p5YjIwZ2RHaGxJSE5wWjI1aGJHbHVaeUJ6WlhKMlpYSmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ1FXNXpkMlZ5SUMwZ1FXNXpkMlZ5SUZORVVDQm1jbTl0SUhSb1pTQndaV1Z5TGx4dUlDQWdJQ0FxTDF4dUlDQWdJR2hoYm1Sc1pWZGxZbEowWTBGdWMzZGxjaWhCYm5OM1pYSTZJRTFsYzNOaFoyVkJibk4zWlhJcElIdGNiaUFnSUNBZ0lDQWdURzluWjJWeUxreHZaeWhNYjJkblpYSXVSMlYwVTNSaFkydFVjbUZqWlNncExDQmdSMjkwSUdGdWMzZGxjaUJ6WkhBZ0pIdEJibk4zWlhJdWMyUndmV0FzSURZcE8xeHVYRzRnSUNBZ0lDQWdJR052Ym5OMElITmtjRUZ1YzNkbGNqb2dVbFJEVTJWemMybHZia1JsYzJOeWFYQjBhVzl1U1c1cGRDQTlJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lITmtjRG9nUVc1emQyVnlMbk5rY0N4Y2JpQWdJQ0FnSUNBZ0lDQWdJSFI1Y0dVNklDZGhibk4zWlhJblhHNGdJQ0FnSUNBZ0lIMDdYRzVjYmlBZ0lDQWdJQ0FnZEdocGN5NXdaV1Z5UTI5dWJtVmpkR2x2YmtOdmJuUnliMnhzWlhJdWNtVmpaV2wyWlVGdWMzZGxjaWh6WkhCQmJuTjNaWElwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbWhoYm1Sc1pWQnZjM1JYWldKeWRHTk9aV2R2ZEdsaGRHbHZiaWdwTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVoaGJtUnNaU0IwYUdVZ1VsUkRJRzltWm1WeUlHWnliMjBnWVNCWFpXSlNWRU1nY0dWbGNpQW9jbVZqWldsMlpXUWdkR2h5YjNWbmFDQjBhR1VnYzJsbmJtRnNiR2x1WnlCelpYSjJaWElwTGx4dUlDQWdJQ0FxSUVCd1lYSmhiU0JQWm1abGNpQXRJRTltWm1WeUlGTkVVQ0JtY205dElIUm9aU0J3WldWeUxseHVJQ0FnSUNBcUwxeHVJQ0FnSUdoaGJtUnNaVmRsWWxKMFkwOW1abVZ5S0U5bVptVnlPaUJOWlhOellXZGxUMlptWlhJcElIdGNiaUFnSUNBZ0lDQWdURzluWjJWeUxreHZaeWhNYjJkblpYSXVSMlYwVTNSaFkydFVjbUZqWlNncExDQmdSMjkwSUc5bVptVnlJSE5rY0NBa2UwOW1abVZ5TG5Oa2NIMWdMQ0EyS1R0Y2JseHVJQ0FnSUNBZ0lDQjBhR2x6TG1selZYTnBibWRUUmxVZ1BTQlBabVpsY2k1elpuVWdQeUJQWm1abGNpNXpablVnT2lCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11YVhOVmMybHVaMU5HVlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1JHbHpZV0pzWlNCdVpXZHZkR2xoZEdsdVp5QjNhWFJvSUhSb1pTQnpablVnWVhNZ2RHaGxJSE5tZFNCdmJteDVJSE4xY0hCdmNuUnpJRzl1WlNCamIyUmxZeUJoZENCaElIUnBiV1ZjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Y0dWbGNrTnZibTVsWTNScGIyNURiMjUwY205c2JHVnlMbkJ5WldabGNuSmxaRU52WkdWaklEMGdKeWM3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQmpiMjV6ZENCelpIQlBabVpsY2pvZ1VsUkRVMlZ6YzJsdmJrUmxjMk55YVhCMGFXOXVTVzVwZENBOUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhOa2NEb2dUMlptWlhJdWMyUndMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2RIbHdaVG9nSjI5bVptVnlKMXh1SUNBZ0lDQWdJQ0I5TzF4dVhHNGdJQ0FnSUNBZ0lIUm9hWE11Y0dWbGNrTnZibTVsWTNScGIyNURiMjUwY205c2JHVnlMbkpsWTJWcGRtVlBabVpsY2loelpIQlBabVpsY2l3Z2RHaHBjeTVqYjI1bWFXY3BPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtaGhibVJzWlZCdmMzUlhaV0p5ZEdOT1pXZHZkR2xoZEdsdmJpZ3BPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRWhoYm1Sc1pTQjNhR1Z1SUhSb1pTQlRSbFVnY0hKdmRtbGtaWE1nZEdobElIQmxaWElnZDJsMGFDQnBkSE1nWkdGMFlTQmphR0Z1Ym1Wc2MxeHVJQ0FnSUNBcUlFQndZWEpoYlNCRVlYUmhRMmhoYm01bGJITWdMU0JVYUdVZ2JXVnpjMkZuWlNCbWNtOXRJSFJvWlNCVFJsVWdZMjl1ZEdGcGJtbHVaeUIwYUdVZ1pHRjBZU0JqYUdGdWJtVnNjeUJwWkhOY2JpQWdJQ0FnS2k5Y2JpQWdJQ0JvWVc1a2JHVlhaV0pTZEdOVFJsVlFaV1Z5UkdGMFlXTm9ZVzV1Wld4ektGeHVJQ0FnSUNBZ0lDQkVZWFJoUTJoaGJtNWxiSE02SUUxbGMzTmhaMlZTWldObGFYWmxMazFsYzNOaFoyVlFaV1Z5UkdGMFlVTm9ZVzV1Wld4elhHNGdJQ0FnS1NCN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUZObGJtUlBjSFJwYjI1ek9pQlNWRU5FWVhSaFEyaGhibTVsYkVsdWFYUWdQU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnZjbVJsY21Wa09pQjBjblZsTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdibVZuYjNScFlYUmxaRG9nZEhKMVpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUdsa09pQkVZWFJoUTJoaGJtNWxiSE11YzJWdVpGTjBjbVZoYlVsa1hHNGdJQ0FnSUNBZ0lIMDdYRzVjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdkVzVwWkdseVpXTjBhVzl1WVd3Z1BWeHVJQ0FnSUNBZ0lDQWdJQ0FnUkdGMFlVTm9ZVzV1Wld4ekxuTmxibVJUZEhKbFlXMUpaQ0FoUFNCRVlYUmhRMmhoYm01bGJITXVjbVZqZGxOMGNtVmhiVWxrTzF4dVhHNGdJQ0FnSUNBZ0lIUm9hWE11YzJWdVpISmxZM1pFWVhSaFEyaGhibTVsYkVOdmJuUnliMnhzWlhJdVkzSmxZWFJsUkdGMFlVTm9ZVzV1Wld3b1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuQmxaWEpEYjI1dVpXTjBhVzl1UTI5dWRISnZiR3hsY2k1d1pXVnlRMjl1Ym1WamRHbHZiaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lIVnVhV1JwY21WamRHbHZibUZzSUQ4Z0ozTmxibVF0WkdGMFlXTm9ZVzV1Wld3bklEb2dKMlJoZEdGamFHRnVibVZzSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJRk5sYm1SUGNIUnBiMjV6WEc0Z0lDQWdJQ0FnSUNrN1hHNWNiaUFnSUNBZ0lDQWdhV1lnS0hWdWFXUnBjbVZqZEdsdmJtRnNLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCU1pXTjJUM0IwYVc5dWN6b2dVbFJEUkdGMFlVTm9ZVzV1Wld4SmJtbDBJRDBnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc5eVpHVnlaV1E2SUhSeWRXVXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdibVZuYjNScFlYUmxaRG9nZEhKMVpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaRG9nUkdGMFlVTm9ZVzV1Wld4ekxuSmxZM1pUZEhKbFlXMUpaRnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV5WldOMlJHRjBZVU5vWVc1dVpXeERiMjUwY205c2JHVnlMbU55WldGMFpVUmhkR0ZEYUdGdWJtVnNLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWNHVmxja052Ym01bFkzUnBiMjVEYjI1MGNtOXNiR1Z5TG5CbFpYSkRiMjV1WldOMGFXOXVMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2R5WldOMkxXUmhkR0ZqYUdGdWJtVnNKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JTWldOMlQzQjBhVzl1YzF4dUlDQWdJQ0FnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Y21WamRrUmhkR0ZEYUdGdWJtVnNRMjl1ZEhKdmJHeGxjaTVvWVc1a2JHVlBiazl3Wlc0Z1BTQW9LU0E5UGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVkMlZpVTI5amEyVjBRMjl1ZEhKdmJHeGxjaTV6Wlc1a1UwWlZVbVZqZGtSaGRHRkRhR0Z1Ym1Wc1VtVmhaSGtvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUVsbUlIZGxKM0psSUhWdWFTMWthWEpsWTNScGIyNWhiQ3dnYjI1c2VTQjBhR1VnY21WamRpQmtZWFJoSUdOb1lXNXVaV3dnYzJodmRXeGtJR2hoYm1Sc1pTQnBibU52YldsdVp5QnRaWE56WVdkbGMxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXlaV04yUkdGMFlVTm9ZVzV1Wld4RGIyNTBjbTlzYkdWeUxtaGhibVJzWlU5dVRXVnpjMkZuWlNBOUlDaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxkam9nVFdWemMyRm5aVVYyWlc1MFhHNGdJQ0FnSUNBZ0lDQWdJQ0FwSUQwK0lIUm9hWE11YUdGdVpHeGxUMjVOWlhOellXZGxLR1YyS1R0Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUdWc2MyVWdiM1Z5SUhCeWFXMWhjbmtnWkdGMFlXTm9ZVzV1Wld3Z2FYTWdjMlZ1WkM5eVpXTjJJSE52SUdsMElHTmhiaUJvWVc1a2JHVWdhVzVqYjIxcGJtY2diV1Z6YzJGblpYTmNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjMlZ1WkhKbFkzWkVZWFJoUTJoaGJtNWxiRU52Ym5SeWIyeHNaWEl1YUdGdVpHeGxUMjVOWlhOellXZGxJRDBnS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWMk9pQk5aWE56WVdkbFJYWmxiblJjYmlBZ0lDQWdJQ0FnSUNBZ0lDa2dQVDRnZEdocGN5NW9ZVzVrYkdWUGJrMWxjM05oWjJVb1pYWXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdhR0Z1Wkd4bFVHOXpkRmRsWW5KMFkwNWxaMjkwYVdGMGFXOXVLQ2tnZTF4dUlDQWdJQ0FnSUNBdkx5QnpkR0Z5ZENCMGFHVWdZV1pySUhkaGNtNXBibWNnZEdsdFpYSWdZWE1nVUZNZ2FYTWdibTkzSUhKMWJtNXBibWRjYmlBZ0lDQWdJQ0FnZEdocGN5NWhabXREYjI1MGNtOXNiR1Z5TG5OMFlYSjBRV1pyVjJGeWJtbHVaMVJwYldWeUtDazdYRzRnSUNBZ0lDQWdJQzh2SUhOb2IzY2dkR2hsSUc5MlpYSnNZWGtnZEdoaGRDQjNaU0JvWVhabElHNWxaMjkwYVdGMFpXUWdZU0JqYjI1dVpXTjBhVzl1WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjR2w0Wld4VGRISmxZVzFwYm1jdVgyOXVWMlZpVW5SalUyUndLQ2s3WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdWMzUmhkSE5VYVcxbGNraGhibVJzWlNBbUppQjBhR2x6TG5OMFlYUnpWR2x0WlhKSVlXNWtiR1VnSVQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2QybHVaRzkzTG1Oc1pXRnlTVzUwWlhKMllXd29kR2hwY3k1emRHRjBjMVJwYldWeVNHRnVaR3hsS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJSFJvYVhNdWMzUmhkSE5VYVcxbGNraGhibVJzWlNBOUlIZHBibVJ2ZHk1elpYUkpiblJsY25aaGJDZ29LU0E5UGlCMGFHbHpMbWRsZEZOMFlYUnpLQ2tzSURFd01EQXBPMXh1WEc0Z0lDQWdJQ0FnSUM4cUlDQXFMMXh1SUNBZ0lDQWdJQ0IwYUdsekxuTmxkRTF2ZFhObFNXNXdkWFJGYm1GaWJHVmtLSFJvYVhNdVkyOXVabWxuTG1selJteGhaMFZ1WVdKc1pXUW9SbXhoWjNNdVRXOTFjMlZKYm5CMWRDa3BPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuTmxkRXRsZVdKdllYSmtTVzV3ZFhSRmJtRmliR1ZrS0hSb2FYTXVZMjl1Wm1sbkxtbHpSbXhoWjBWdVlXSnNaV1FvUm14aFozTXVTMlY1WW05aGNtUkpibkIxZENrcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5ObGRFZGhiV1ZRWVdSSmJuQjFkRVZ1WVdKc1pXUW9kR2hwY3k1amIyNW1hV2N1YVhOR2JHRm5SVzVoWW14bFpDaEdiR0ZuY3k1SFlXMWxjR0ZrU1c1d2RYUXBLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJYYUdWdUlHRnVJR2xqWlNCRFlXNWthV1JoZEdVZ2FYTWdjbVZqWldsMlpXUWdabkp2YlNCMGFHVWdVMmxuYm1Gc2FXNW5JSE5sY25abGNpQmhaR1FnYVhRZ2RHOGdkR2hsSUZCbFpYSWdRMjl1Ym1WamRHbHZiaUJEYkdsbGJuUmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2FXTmxRMkZ1Wkdsa1lYUmxJQzBnU1dObElFTmhibVJwWkdGMFpTQm1jbTl0SUZObGNuWmxjbHh1SUNBZ0lDQXFMMXh1SUNBZ0lHaGhibVJzWlVsalpVTmhibVJwWkdGMFpTaHBZMlZEWVc1a2FXUmhkR1U2SUZKVVEwbGpaVU5oYm1ScFpHRjBaVWx1YVhRcElIdGNiaUFnSUNBZ0lDQWdURzluWjJWeUxreHZaeWhjYmlBZ0lDQWdJQ0FnSUNBZ0lFeHZaMmRsY2k1SFpYUlRkR0ZqYTFSeVlXTmxLQ2tzWEc0Z0lDQWdJQ0FnSUNBZ0lDQW5WMlZpSUZKVVF5QkRiMjUwY205c2JHVnlPaUJ2YmxkbFlsSjBZMGxqWlNjc1hHNGdJQ0FnSUNBZ0lDQWdJQ0EyWEc0Z0lDQWdJQ0FnSUNrN1hHNWNiaUFnSUNBZ0lDQWdZMjl1YzNRZ1kyRnVaR2xrWVhSbElEMGdibVYzSUZKVVEwbGpaVU5oYm1ScFpHRjBaU2hwWTJWRFlXNWthV1JoZEdVcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5CbFpYSkRiMjV1WldOMGFXOXVRMjl1ZEhKdmJHeGxjaTVvWVc1a2JHVlBia2xqWlNoallXNWthV1JoZEdVcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGTmxibVFnZEdobElHbGpaU0JEWVc1a2FXUmhkR1VnZEc4Z2RHaGxJSE5wWjI1aGJHbHVaeUJ6WlhKMlpYSWdkbWxoSUhkbFluTnZZMnRsZEZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0JwWTJWRmRtVnVkQ0F0SUZKVVF5QlFaV1Z5SUVOdmJtNWxZM1JwYjI1SlkyVkZkbVZ1ZENrZ2UxeHVJQ0FnSUNBcUwxeHVJQ0FnSUdoaGJtUnNaVk5sYm1SSlkyVkRZVzVrYVdSaGRHVW9hV05sUlhabGJuUTZJRkpVUTFCbFpYSkRiMjV1WldOMGFXOXVTV05sUlhabGJuUXBJSHRjYmlBZ0lDQWdJQ0FnVEc5bloyVnlMa3h2WnloTWIyZG5aWEl1UjJWMFUzUmhZMnRVY21GalpTZ3BMQ0FuVDI1SlkyVkRZVzVrYVdSaGRHVW5MQ0EyS1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLR2xqWlVWMlpXNTBMbU5oYm1ScFpHRjBaU0FtSmlCcFkyVkZkbVZ1ZEM1allXNWthV1JoZEdVdVkyRnVaR2xrWVhSbEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbmRsWWxOdlkydGxkRU52Ym5SeWIyeHNaWEl1YzJWdVpFbGpaVU5oYm1ScFpHRjBaU2hwWTJWRmRtVnVkQzVqWVc1a2FXUmhkR1VwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1UyVnVaQ0IwYUdVZ2FXTmxJRU5oYm1ScFpHRjBaU0IwYnlCMGFHVWdjMmxuYm1Gc2FXNW5JSE5sY25abGNpQjJhV0VnZDJWaWMyOWphMlYwWEc0Z0lDQWdJQ29nUUhCaGNtRnRJR2xqWlVWMlpXNTBJQzBnVWxSRElGQmxaWElnUTI5dWJtVmpkR2x2YmtsalpVVjJaVzUwS1NCN1hHNGdJQ0FnSUNvdlhHNGdJQ0FnYUdGdVpHeGxSR0YwWVVOb1lXNXVaV3dvWkdGMFlXTm9ZVzV1Wld4RmRtVnVkRG9nVWxSRFJHRjBZVU5vWVc1dVpXeEZkbVZ1ZENrZ2UxeHVJQ0FnSUNBZ0lDQk1iMmRuWlhJdVRHOW5LRnh1SUNBZ0lDQWdJQ0FnSUNBZ1RHOW5aMlZ5TGtkbGRGTjBZV05yVkhKaFkyVW9LU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDZEVZWFJoSUdOb1lXNXVaV3dnWTNKbFlYUmxaQ0JtYjNJZ2RYTWdZbmtnWW5KdmQzTmxjaUJoY3lCM1pTQmhjbVVnWVNCeVpXTmxhWFpwYm1jZ2NHVmxjaTRuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdObHh1SUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbk5sYm1SeVpXTjJSR0YwWVVOb1lXNXVaV3hEYjI1MGNtOXNiR1Z5TG1SaGRHRkRhR0Z1Ym1Wc0lEMWNiaUFnSUNBZ0lDQWdJQ0FnSUdSaGRHRmphR0Z1Ym1Wc1JYWmxiblF1WTJoaGJtNWxiRHRjYmlBZ0lDQWdJQ0FnTHk4Z1JHRjBZU0JqYUdGdWJtVnNJSGRoY3lCamNtVmhkR1ZrSUdadmNpQjFjeXdnYzI4Z2QyVWdhblZ6ZENCdVpXVmtJSFJ2SUhObGRIVndJR2wwY3lCallXeHNZbUZqYTNNZ1lXNWtJR0Z5Y21GNUlIUjVjR1ZjYmlBZ0lDQWdJQ0FnZEdocGN5NXpaVzVrY21WamRrUmhkR0ZEYUdGdWJtVnNRMjl1ZEhKdmJHeGxjaTV6WlhSMWNFUmhkR0ZEYUdGdWJtVnNLQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjMlZ1WkhKbFkzWkVZWFJoUTJoaGJtNWxiRU52Ym5SeWIyeHNaWEl1YUdGdVpHeGxUMjVOWlhOellXZGxJRDBnS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdaWFk2SUUxbGMzTmhaMlZGZG1WdWREeEJjbkpoZVVKMVptWmxjajVjYmlBZ0lDQWdJQ0FnS1NBOVBpQjBhR2x6TG1oaGJtUnNaVTl1VFdWemMyRm5aU2hsZGlrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1UyVnVaQ0IwYUdVZ1VsUkRJRTltWm1WeUlGTmxjM05wYjI0Z2RHOGdkR2hsSUZOcFoyNWhiR2x1WnlCelpYSjJaWElnZG1saElIZGxZbk52WTJ0bGRGeHVJQ0FnSUNBcUlFQndZWEpoYlNCdlptWmxjaUF0SUZKVVF5QlRaWE56YVc5dUlFUmxjMk55YVhCMGFXOXVYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2FHRnVaR3hsVTJWdVpGZGxZbEpVUTA5bVptVnlLRzltWm1WeU9pQlNWRU5UWlhOemFXOXVSR1Z6WTNKcGNIUnBiMjVKYm1sMEtTQjdYRzRnSUNBZ0lDQWdJRXh2WjJkbGNpNU1iMmNvWEc0Z0lDQWdJQ0FnSUNBZ0lDQk1iMmRuWlhJdVIyVjBVM1JoWTJ0VWNtRmpaU2dwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdKMU5sYm1ScGJtY2dkR2hsSUc5bVptVnlJSFJ2SUhSb1pTQlRaWEoyWlhJbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnTmx4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5kbFlsTnZZMnRsZEVOdmJuUnliMnhzWlhJdWMyVnVaRmRsWWxKMFkwOW1abVZ5S0c5bVptVnlLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJUWlc1a0lIUm9aU0JTVkVNZ1QyWm1aWElnVTJWemMybHZiaUIwYnlCMGFHVWdVMmxuYm1Gc2FXNW5JSE5sY25abGNpQjJhV0VnZDJWaWMyOWphMlYwWEc0Z0lDQWdJQ29nUUhCaGNtRnRJR0Z1YzNkbGNpQXRJRkpVUXlCVFpYTnphVzl1SUVSbGMyTnlhWEIwYVc5dVhHNGdJQ0FnSUNvdlhHNGdJQ0FnYUdGdVpHeGxVMlZ1WkZkbFlsSlVRMEZ1YzNkbGNpaGhibk4zWlhJNklGSlVRMU5sYzNOcGIyNUVaWE5qY21sd2RHbHZia2x1YVhRcElIdGNiaUFnSUNBZ0lDQWdURzluWjJWeUxreHZaeWhjYmlBZ0lDQWdJQ0FnSUNBZ0lFeHZaMmRsY2k1SFpYUlRkR0ZqYTFSeVlXTmxLQ2tzWEc0Z0lDQWdJQ0FnSUNBZ0lDQW5VMlZ1WkdsdVp5QjBhR1VnWVc1emQyVnlJSFJ2SUhSb1pTQlRaWEoyWlhJbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnTmx4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5kbFlsTnZZMnRsZEVOdmJuUnliMnhzWlhJdWMyVnVaRmRsWWxKMFkwRnVjM2RsY2loaGJuTjNaWElwTzF4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxtbHpWWE5wYm1kVFJsVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11ZDJWaVUyOWphMlYwUTI5dWRISnZiR3hsY2k1elpXNWtWMlZpVW5SalJHRjBZV05vWVc1dVpXeFNaWEYxWlhOMEtDazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJUWlhRZ2RHaGxJR1p5WldWNlpTQm1jbUZ0WlNCdmRtVnliR0Y1SUhSdklIUm9aU0J3YkdGNVpYSWdaR2wyWEc0Z0lDQWdJQ292WEc0Z0lDQWdjMlYwVlhCTmIzVnpaVUZ1WkVaeVpXVjZaVVp5WVcxbEtDa2dlMXh1SUNBZ0lDQWdJQ0F2THlCRFlXeGpkV3hoZEdsdVp5QmhibVFnYm05eWJXRnNhWHBwYm1jZ2NHOXphWFJwYjI1eklHUmxjR1Z1WkhNZ2IyNGdkR2hsSUhkcFpIUm9JR0Z1WkNCb1pXbG5hSFFnYjJZZ2RHaGxJSEJzWVhsbGNpNWNiaUFnSUNBZ0lDQWdkR2hwY3k1MmFXUmxiMFZzWlcxbGJuUlFZWEpsYm5SRGJHbGxiblJTWldOMElEMGdkR2hwY3k1MmFXUmxiMUJzWVhsbGNseHVJQ0FnSUNBZ0lDQWdJQ0FnTG1kbGRGWnBaR1Z2VUdGeVpXNTBSV3hsYldWdWRDZ3BYRzRnSUNBZ0lDQWdJQ0FnSUNBdVoyVjBRbTkxYm1ScGJtZERiR2xsYm5SU1pXTjBLQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZMjl2Y21ScGJtRjBaVU52Ym5abGNuUmxjaTV6WlhSMWNFNXZjbTFoYkdsNlpVRnVaRkYxWVc1MGFYcGxLQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVabkpsWlhwbFJuSmhiV1ZEYjI1MGNtOXNiR1Z5TG1aeVpXVjZaVVp5WVcxbExuSmxjMmw2WlNncE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFTnNiM05sSUhSb1pTQkRiMjV1WldOMGFXOXVJSFJ2SUhSb1pTQnphV2R1WVd4cGJtY2djMlZ5ZG1WeVhHNGdJQ0FnSUNvdlhHNGdJQ0FnWTJ4dmMyVlRhV2R1WVd4cGJtZFRaWEoyWlhJb0tTQjdYRzRnSUNBZ0lDQWdJQzh2SUZkbElHVjRjR3hwWTJsMGJIa2dZMkZzYkdWa0lHTnNiM05sTENCMGFHVnlaV1p2Y21VZ2QyVWdaRzl1SjNRZ2QyRnVkQ0IwYnlCMGNtbG5aMlZ5SUdGMWRHOGdjbVZqYjI1dVpXTjBYRzRnSUNBZ0lDQWdJSFJvYVhNdWMyaHZkV3hrVW1WamIyNXVaV04wSUQwZ1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkMlZpVTI5amEyVjBRMjl1ZEhKdmJHeGxjajh1WTJ4dmMyVW9LVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJEYkc5elpTQjBhR1VnY0dWbGNpQmpiMjV1WldOMGFXOXVYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1kyeHZjMlZRWldWeVEyOXVibVZqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXdaV1Z5UTI5dWJtVmpkR2x2YmtOdmJuUnliMnhzWlhJL0xtTnNiM05sS0NrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1EyeHZjMlVnWVd4c0lHTnZibTVsWTNScGIyNXpYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1kyeHZjMlVvS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WTJ4dmMyVlRhV2R1WVd4cGJtZFRaWEoyWlhJb0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1amJHOXpaVkJsWlhKRGIyNXVaV04wYVc5dUtDazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dSbWx5WlhNZ1lTQldhV1JsYnlCVGRHRjBjeUJGZG1WdWRDQnBiaUIwYUdVZ1VsUkRJRkJsWlhJZ1EyOXVibVZqZEdsdmJseHVJQ0FnSUNBcUwxeHVJQ0FnSUdkbGRGTjBZWFJ6S0NrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG5CbFpYSkRiMjV1WldOMGFXOXVRMjl1ZEhKdmJHeGxjaTVuWlc1bGNtRjBaVk4wWVhSektDazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dVMlZ1WkNCaElFeGhkR1Z1WTNrZ1ZHVnpkQ0JTWlhGMVpYTjBJSFJ2SUhSb1pTQlZSU0JKYm5OMFlXNWpaVnh1SUNBZ0lDQXFMMXh1SUNBZ0lITmxibVJNWVhSbGJtTjVWR1Z6ZENncElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1c1lYUmxibU41VTNSaGNuUlVhVzFsSUQwZ1JHRjBaUzV1YjNjb0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1elpXNWtSR1Z6WTNKcGNIUnZja052Ym5SeWIyeHNaWEl1YzJWdVpFeGhkR1Z1WTNsVVpYTjBLSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lGTjBZWEowVkdsdFpUb2dkR2hwY3k1c1lYUmxibU41VTNSaGNuUlVhVzFsWEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGTmxibVFnZEdobElFMXBibEZRSUdWdVkyOWtaWElnYzJWMGRHbHVaeUIwYnlCMGFHVWdWVVVnU1c1emRHRnVZMlV1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJRzFwYmxGUUlDMGdWR2hsSUd4dmQyVnlJR0p2ZFc1a0lHWnZjaUJSVUNCM2FHVnVJR1Z1WTI5a2FXNW5YRzRnSUNBZ0lDb2dkbUZzYVdRZ2RtRnNkV1Z6SUdGeVpTQW9NUzAxTVNrZ2QyaGxjbVU2WEc0Z0lDQWdJQ29nTVNBOUlFSmxjM1FnY1hWaGJHbDBlU0JpZFhRZ2FHbG5hR1Z6ZENCaWFYUnlZWFJsTGx4dUlDQWdJQ0FxSURVeElEMGdWMjl5YzNRZ2NYVmhiR2wwZVNCaWRYUWdiRzkzWlhOMElHSnBkSEpoZEdVdVhHNGdJQ0FnSUNvZ1Fua2daR1ZtWVhWc2RDQjBhR1VnYldsdVVWQWdhWE1nTVNCdFpXRnVhVzVuSUhSb1pTQmxibU52WkdWeUlHbHpJR1p5WldWY2JpQWdJQ0FnS2lCMGJ5QmhhVzBnWm05eUlIUm9aU0JpWlhOMElIRjFZV3hwZEhrZ2FYUWdZMkZ1SUc5dUlIUm9aU0JuYVhabGJpQnVaWFIzYjNKcklHeHBibXN1WEc0Z0lDQWdJQ292WEc0Z0lDQWdjMlZ1WkVWdVkyOWtaWEpOYVc1UlVDaHRhVzVSVURvZ2JuVnRZbVZ5S1NCN1hHNGdJQ0FnSUNBZ0lFeHZaMmRsY2k1TWIyY29URzluWjJWeUxrZGxkRk4wWVdOclZISmhZMlVvS1N3Z1lFMXBibEZRUFNSN2JXbHVVVkI5WEZ4dVlDd2dOaWs3WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLRzFwYmxGUUlDRTlJRzUxYkd3cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjMlZ1WkVSbGMyTnlhWEIwYjNKRGIyNTBjbTlzYkdWeUxtVnRhWFJEYjIxdFlXNWtLSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuUlc1amIyUmxjaTVOYVc1UlVDYzZJRzFwYmxGUVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGTmxibVFnZEdobElFMWhlRkZRSUdWdVkyOWtaWElnYzJWMGRHbHVaeUIwYnlCMGFHVWdWVVVnU1c1emRHRnVZMlV1WEc0Z0lDQWdJQ29nUUhCaGNtRnRJRzFoZUZGUUlDMGdWR2hsSUhWd2NHVnlJR0p2ZFc1a0lHWnZjaUJSVUNCM2FHVnVJR1Z1WTI5a2FXNW5YRzRnSUNBZ0lDb2dkbUZzYVdRZ2RtRnNkV1Z6SUdGeVpTQW9NUzAxTVNrZ2QyaGxjbVU2WEc0Z0lDQWdJQ29nTVNBOUlFSmxjM1FnY1hWaGJHbDBlU0JpZFhRZ2FHbG5hR1Z6ZENCaWFYUnlZWFJsTGx4dUlDQWdJQ0FxSURVeElEMGdWMjl5YzNRZ2NYVmhiR2wwZVNCaWRYUWdiRzkzWlhOMElHSnBkSEpoZEdVdVhHNGdJQ0FnSUNvZ1Fua2daR1ZtWVhWc2RDQjBhR1VnYldGNFVWQWdhWE1nTlRFZ2JXVmhibWx1WnlCMGFHVWdaVzVqYjJSbGNpQnBjeUJtY21WbFhHNGdJQ0FnSUNvZ2RHOGdaSEp2Y0NCeGRXRnNhWFI1SUdGeklHeHZkeUJoY3lCdVpXVmtaV1FnYjI0Z2RHaGxJR2RwZG1WdUlHNWxkSGR2Y21zZ2JHbHVheTVjYmlBZ0lDQWdLaTljYmlBZ0lDQWdjMlZ1WkVWdVkyOWtaWEpOWVhoUlVDaHRZWGhSVURvZ2JuVnRZbVZ5S1NCN1hHNGdJQ0FnSUNBZ0lFeHZaMmRsY2k1TWIyY29URzluWjJWeUxrZGxkRk4wWVdOclZISmhZMlVvS1N3Z1lFMWhlRkZRUFNSN2JXRjRVVkI5WEZ4dVlDd2dOaWs3WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLRzFoZUZGUUlDRTlJRzUxYkd3cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjMlZ1WkVSbGMyTnlhWEIwYjNKRGIyNTBjbTlzYkdWeUxtVnRhWFJEYjIxdFlXNWtLSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuUlc1amIyUmxjaTVOWVhoUlVDYzZJRzFoZUZGUVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGTmxibVFnZEdobElIc2dWMlZpVWxSRExrMXBia0pwZEhKaGRHVTZJRk52YldWT2RXMWlaWElnZlgwZ1kyOXRiV0Z1WkNCMGJ5QlZSU0IwYnlCelpYUWdYRzRnSUNBZ0lDb2dkR2hsSUcxcGJtbHRkVzBnWW1sMGNtRjBaU0IwYUdGMElIZGxJR0ZzYkc5M0lGZGxZbEpVUXlCMGJ5QjFjMlVnWEc0Z0lDQWdJQ29nS0c1dmRHVWdjMlYwZEdsdVp5QjBhR2x6SUhSdmJ5Qm9hV2RvSUdsdUlIQnZiM0lnYm1WMGQyOXlhM01nWTJGdUlHSmxJSEJ5YjJKc1pXMWhkR2xqS1M1Y2JpQWdJQ0FnS2lCQWNHRnlZVzBnYldsdVFtbDBjbUYwWlNBdElGUm9aU0J0YVc1cGJYVnRJR0pwZEhKaGRHVWdkMlVnZDI5MWJHUWdiR2xyWlNCWFpXSlNWRU1nZEc4Z2JtOTBJR1poYkd3Z1ltVnNiM2N1WEc0Z0lDQWdJQ292WEc0Z0lDQWdjMlZ1WkZkbFlsSlVRMDFwYmtKcGRISmhkR1VvYldsdVFtbDBjbUYwWlRvZ2JuVnRZbVZ5S1NCN1hHNGdJQ0FnSUNBZ0lFeHZaMmRsY2k1TWIyY29URzluWjJWeUxrZGxkRk4wWVdOclZISmhZMlVvS1N3Z1lGZGxZbEpVUXlCTmFXNGdRbWwwY21GMFpUMGtlMjFwYmtKcGRISmhkR1Y5WUN3Z05pazdYRzRnSUNBZ0lDQWdJR2xtSUNodGFXNUNhWFJ5WVhSbElDRTlJRzUxYkd3cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjMlZ1WkVSbGMyTnlhWEIwYjNKRGIyNTBjbTlzYkdWeUxtVnRhWFJEYjIxdFlXNWtLSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuVjJWaVVsUkRMazFwYmtKcGRISmhkR1VuT2lCdGFXNUNhWFJ5WVhSbFhHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGTmxibVFnZEdobElIc2dWMlZpVWxSRExrMWhlRUpwZEhKaGRHVTZJRk52YldWT2RXMWlaWElnZlgwZ1kyOXRiV0Z1WkNCMGJ5QlZSU0IwYnlCelpYUWdYRzRnSUNBZ0lDb2dkR2hsSUcxcGJtbHRkVzBnWW1sMGNtRjBaU0IwYUdGMElIZGxJR0ZzYkc5M0lGZGxZbEpVUXlCMGJ5QjFjMlVnWEc0Z0lDQWdJQ29nS0c1dmRHVWdjMlYwZEdsdVp5QjBhR2x6SUhSdmJ5QnNiM2NnWTI5MWJHUWdjbVZ6ZFd4MElHbHVJR0pzYjJOcmVTQjJhV1JsYnlrdVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUcxcGJrSnBkSEpoZEdVZ0xTQlVhR1VnYldsdWFXMTFiU0JpYVhSeVlYUmxJSGRsSUhkdmRXeGtJR3hwYTJVZ1YyVmlVbFJESUhSdklHNXZkQ0JtWVd4c0lHSmxiRzkzTGx4dUlDQWdJQ0FxTDF4dUlDQWdJQ0J6Wlc1a1YyVmlVbFJEVFdGNFFtbDBjbUYwWlNodFlYaENhWFJ5WVhSbE9pQnVkVzFpWlhJcElIdGNiaUFnSUNBZ0lDQWdURzluWjJWeUxreHZaeWhNYjJkblpYSXVSMlYwVTNSaFkydFVjbUZqWlNncExDQmdWMlZpVWxSRElFMWhlQ0JDYVhSeVlYUmxQU1I3YldGNFFtbDBjbUYwWlgxZ0xDQTJLVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHMWhlRUpwZEhKaGRHVWdJVDBnYm5Wc2JDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV6Wlc1a1JHVnpZM0pwY0hSdmNrTnZiblJ5YjJ4c1pYSXVaVzFwZEVOdmJXMWhibVFvZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNkWFpXSlNWRU11VFdGNFFtbDBjbUYwWlNjNklHMWhlRUpwZEhKaGRHVmNiaUFnSUNBZ0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dVMlZ1WkNCMGFHVWdleUJYWldKU1ZFTXVSbkJ6T2lCVGIyMWxUblZ0WW1WeUlIMTlJRlZGSURVdU1DdGNiaUFnSUNBZ0tpQmhibVFnZXlCWFpXSlNWRU11VFdGNFJuQnpJSDBnVlVVZ05DNHlOeUJqYjIxdFlXNWtJSFJ2SUhObGRDQmNiaUFnSUNBZ0tpQjBhR1VnYldGNGFXMTFiU0JtY0hNZ2QyVWdkMjkxYkdRZ2JHbHJaU0JYWldKU1ZFTWdkRzhnYzNSeVpXRnRJR0YwTGlCY2JpQWdJQ0FnS2lCQWNHRnlZVzBnWm5CeklDMGdWR2hsSUcxaGVHbHRkVzBnYzNSeVpXRnRJR1p3Y3k1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0FnYzJWdVpGZGxZbEpVUTBad2N5aG1jSE02SUc1MWJXSmxjaWtnZTF4dUlDQWdJQ0FnSUNCTWIyZG5aWEl1VEc5bktFeHZaMmRsY2k1SFpYUlRkR0ZqYTFSeVlXTmxLQ2tzSUdCWFpXSlNWRU1nUmxCVFBTUjdabkJ6ZldBc0lEWXBPMXh1SUNBZ0lDQWdJQ0JwWmlBb1puQnpJQ0U5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YzJWdVpFUmxjMk55YVhCMGIzSkRiMjUwY205c2JHVnlMbVZ0YVhSRGIyMXRZVzVrS0hzblYyVmlVbFJETGtad2N5YzZJR1p3YzMwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXpaVzVrUkdWelkzSnBjSFJ2Y2tOdmJuUnliMnhzWlhJdVpXMXBkRU52YlcxaGJtUW9leWRYWldKU1ZFTXVUV0Y0Um5Cekp6b2dabkJ6ZlNrN0lDOHFJRlJQUkU4NklGSmxiVzkyWlNCM2FHVnVJRlZGSURRdU1qY2dkVzV6ZFhCd2IzSjBaV1F1SUNvdlhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlRaVzVrY3lCMGFHVWdWVWtnUkdWelkzSnBjSFJ2Y2lCZ2MzUmhkQ0JtY0hOZ0lIUnZJSFJvWlNCVlJTQkpibk4wWVc1alpWeHVJQ0FnSUNBcUwxeHVJQ0FnSUhObGJtUlRhRzkzUm5CektDazZJSFp2YVdRZ2UxeHVJQ0FnSUNBZ0lDQk1iMmRuWlhJdVRHOW5LRnh1SUNBZ0lDQWdJQ0FnSUNBZ1RHOW5aMlZ5TGtkbGRGTjBZV05yVkhKaFkyVW9LU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDY3RMUzB0SUNBZ1UyVnVaR2x1WnlCemFHOTNJSE4wWVhRZ2RHOGdWVVVnSUNBdExTMHRKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lEWmNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXpaVzVrUkdWelkzSnBjSFJ2Y2tOdmJuUnliMnhzWlhJdVpXMXBkRU52YlcxaGJtUW9leUFuYzNSaGRDNW1jSE1uT2lBbkp5QjlLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJUWlc1a0lHRnVJRWxtY21GdFpTQnlaWEYxWlhOMElIUnZJSFJvWlNCemRISmxZVzFsY2x4dUlDQWdJQ0FxTDF4dUlDQWdJSE5sYm1SSlpuSmhiV1ZTWlhGMVpYTjBLQ2s2SUhadmFXUWdlMXh1SUNBZ0lDQWdJQ0JNYjJkblpYSXVURzluS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdURzluWjJWeUxrZGxkRk4wWVdOclZISmhZMlVvS1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ2N0TFMwdElDQWdVMlZ1WkdsdVp5QlNaWEYxWlhOMElHWnZjaUJoYmlCSlJuSmhiV1VnSUMwdExTMG5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ05seHVJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuTjBjbVZoYlUxbGMzTmhaMlZEYjI1MGNtOXNiR1Z5TG5SdlUzUnlaV0Z0WlhKSVlXNWtiR1Z5Y3k1blpYUW9KMGxHY21GdFpWSmxjWFZsYzNRbktTZ3BPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRk5sYm1RZ1lTQlZTVWx1ZEdWeVlXTjBhVzl1SUcxbGMzTmhaMlZjYmlBZ0lDQWdLaTljYmlBZ0lDQmxiV2wwVlVsSmJuUmxjbUZqZEdsdmJpaGtaWE5qY21sd2RHOXlPaUJ2WW1wbFkzUWdmQ0J6ZEhKcGJtY3BJSHRjYmlBZ0lDQWdJQ0FnVEc5bloyVnlMa3h2WnloY2JpQWdJQ0FnSUNBZ0lDQWdJRXh2WjJkbGNpNUhaWFJUZEdGamExUnlZV05sS0Nrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FuTFMwdExTQWdJRk5sYm1ScGJtY2dZM1Z6ZEc5dElGVkpTVzUwWlhKaFkzUnBiMjRnYldWemMyRm5aU0FnSUMwdExTMG5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ05seHVJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuTmxibVJFWlhOamNtbHdkRzl5UTI5dWRISnZiR3hsY2k1bGJXbDBWVWxKYm5SbGNtRmpkR2x2Ymloa1pYTmpjbWx3ZEc5eUtUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQlRaVzVrSUdFZ1EyOXRiV0Z1WkNCdFpYTnpZV2RsWEc0Z0lDQWdJQ292WEc0Z0lDQWdaVzFwZEVOdmJXMWhibVFvWkdWelkzSnBjSFJ2Y2pvZ2IySnFaV04wS1NCN1hHNGdJQ0FnSUNBZ0lFeHZaMmRsY2k1TWIyY29YRzRnSUNBZ0lDQWdJQ0FnSUNCTWIyZG5aWEl1UjJWMFUzUmhZMnRVY21GalpTZ3BMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0p5MHRMUzBnSUNCVFpXNWthVzVuSUdOMWMzUnZiU0JEYjIxdFlXNWtJRzFsYzNOaFoyVWdJQ0F0TFMwdEp5eGNiaUFnSUNBZ0lDQWdJQ0FnSURaY2JpQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1elpXNWtSR1Z6WTNKcGNIUnZja052Ym5SeWIyeHNaWEl1WlcxcGRFTnZiVzFoYm1Rb1pHVnpZM0pwY0hSdmNpazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dVMlZ1WkNCaElHTnZibk52YkdVZ1kyOXRiV0Z1WkNCdFpYTnpZV2RsWEc0Z0lDQWdJQ292WEc0Z0lDQWdaVzFwZEVOdmJuTnZiR1ZEYjIxdFlXNWtLR052YlcxaGJtUTZJSE4wY21sdVp5a2dlMXh1SUNBZ0lDQWdJQ0JNYjJkblpYSXVURzluS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdURzluWjJWeUxrZGxkRk4wWVdOclZISmhZMlVvS1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ2N0TFMwdElDQWdVMlZ1WkdsdVp5QmpkWE4wYjIwZ1EyOXRiV0Z1WkRwRGIyNXpiMnhsUTI5dGJXRnVaQ0J0WlhOellXZGxJQ0FnTFMwdExTY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBMlhHNGdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdWMyVnVaRVJsYzJOeWFYQjBiM0pEYjI1MGNtOXNiR1Z5TG1WdGFYUkRiMjF0WVc1a0tIdGNiaUFnSUNBZ0lDQWdJQ0FnSUVOdmJuTnZiR1ZEYjIxdFlXNWtPaUJqYjIxdFlXNWtMRnh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCVFpXNWtjeUJoSUhKbGNYVmxjM1FnZEc4Z2RHaGxJRlZGSUVsdWMzUmhibU5sSUhSdklHaGhkbVVnYjNkdVpYSnphR2x3SUc5bUlGRjFZV3hwZEhsY2JpQWdJQ0FnS2k5Y2JpQWdJQ0J6Wlc1a1VtVnhkV1Z6ZEZGMVlXeHBkSGxEYjI1MGNtOXNUM2R1WlhKemFHbHdLQ2s2SUhadmFXUWdlMXh1SUNBZ0lDQWdJQ0JNYjJkblpYSXVURzluS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdURzluWjJWeUxrZGxkRk4wWVdOclZISmhZMlVvS1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ2N0TFMwdElDQWdVMlZ1WkdsdVp5QlNaWEYxWlhOMElIUnZJRU52Ym5SeWIyd2dVWFZoYkdsMGVTQWdMUzB0TFNjc1hHNGdJQ0FnSUNBZ0lDQWdJQ0EyWEc0Z0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11ZEc5VGRISmxZVzFsY2sxbGMzTmhaMlZ6UTI5dWRISnZiR3hsY2k1VFpXNWtVbVZ4ZFdWemRGRjFZV3hwZEhsRGIyNTBjbTlzS0NrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1NHRnVaR3hsY3lCM2FHVnVJR0VnVEdGMFpXNWplU0JVWlhOMElGSmxjM1ZzZENCaGNtVWdjbVZqWldsMlpXUWdabkp2YlNCMGFHVWdWVVVnU1c1emRHRnVZMlZjYmlBZ0lDQWdLaUJBY0dGeVlXMGdiV1Z6YzJGblpTQXRJRXhoZEdWdVkza2dWR1Z6ZENCVWFXMXBibWR6WEc0Z0lDQWdJQ292WEc0Z0lDQWdhR0Z1Wkd4bFRHRjBaVzVqZVZSbGMzUlNaWE4xYkhRb2JXVnpjMkZuWlRvZ1FYSnlZWGxDZFdabVpYSXBJSHRjYmlBZ0lDQWdJQ0FnVEc5bloyVnlMa3h2WnloY2JpQWdJQ0FnSUNBZ0lDQWdJRXh2WjJkbGNpNUhaWFJUZEdGamExUnlZV05sS0Nrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FuUkdGMFlVTm9ZVzV1Wld4U1pXTmxhWFpsVFdWemMyRm5aVlI1Y0dVdWJHRjBaVzVqZVZSbGMzUW5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ05seHVJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQnNZWFJsYm1ONVFYTlRkSEpwYm1jZ1BTQnVaWGNnVkdWNGRFUmxZMjlrWlhJb0ozVjBaaTB4TmljcExtUmxZMjlrWlNoY2JpQWdJQ0FnSUNBZ0lDQWdJRzFsYzNOaFoyVXVjMnhwWTJVb01TbGNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdiR0YwWlc1amVWUmxjM1JTWlhOMWJIUnpPaUJNWVhSbGJtTjVWR1Z6ZEZKbGMzVnNkSE1nUFNCdVpYY2dUR0YwWlc1amVWUmxjM1JTWlhOMWJIUnpLQ2s3WEc0Z0lDQWdJQ0FnSUU5aWFtVmpkQzVoYzNOcFoyNG9iR0YwWlc1amVWUmxjM1JTWlhOMWJIUnpMQ0JLVTA5T0xuQmhjbk5sS0d4aGRHVnVZM2xCYzFOMGNtbHVaeWtwTzF4dUlDQWdJQ0FnSUNCc1lYUmxibU41VkdWemRGSmxjM1ZzZEhNdWNISnZZMlZ6YzBacFpXeGtjeWdwTzF4dVhHNGdJQ0FnSUNBZ0lHeGhkR1Z1WTNsVVpYTjBVbVZ6ZFd4MGN5NTBaWE4wVTNSaGNuUlVhVzFsVFhNZ1BTQjBhR2x6TG14aGRHVnVZM2xUZEdGeWRGUnBiV1U3WEc0Z0lDQWdJQ0FnSUd4aGRHVnVZM2xVWlhOMFVtVnpkV3gwY3k1aWNtOTNjMlZ5VW1WalpXbHdkRlJwYldWTmN5QTlJRVJoZEdVdWJtOTNLQ2s3WEc1Y2JpQWdJQ0FnSUNBZ2JHRjBaVzVqZVZSbGMzUlNaWE4xYkhSekxteGhkR1Z1WTNsRmVHTnNkV1JwYm1kRVpXTnZaR1VnUFNCK2ZpaGNiaUFnSUNBZ0lDQWdJQ0FnSUd4aGRHVnVZM2xVWlhOMFVtVnpkV3gwY3k1aWNtOTNjMlZ5VW1WalpXbHdkRlJwYldWTmN5QXRYRzRnSUNBZ0lDQWdJQ0FnSUNCc1lYUmxibU41VkdWemRGSmxjM1ZzZEhNdWRHVnpkRk4wWVhKMFZHbHRaVTF6WEc0Z0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lHeGhkR1Z1WTNsVVpYTjBVbVZ6ZFd4MGN5NTBaWE4wUkhWeVlYUnBiMjRnUFNCK2ZpaGNiaUFnSUNBZ0lDQWdJQ0FnSUd4aGRHVnVZM2xVWlhOMFVtVnpkV3gwY3k1VWNtRnVjMjFwYzNOcGIyNVVhVzFsVFhNZ0xWeHVJQ0FnSUNBZ0lDQWdJQ0FnYkdGMFpXNWplVlJsYzNSU1pYTjFiSFJ6TGxKbFkyVnBjSFJVYVcxbFRYTmNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnYkdGMFpXNWplVlJsYzNSU1pYTjFiSFJ6TG01bGRIZHZjbXRNWVhSbGJtTjVJRDBnZm40b1hHNGdJQ0FnSUNBZ0lDQWdJQ0JzWVhSbGJtTjVWR1Z6ZEZKbGMzVnNkSE11YkdGMFpXNWplVVY0WTJ4MVpHbHVaMFJsWTI5a1pTQXRYRzRnSUNBZ0lDQWdJQ0FnSUNCc1lYUmxibU41VkdWemRGSmxjM1ZzZEhNdWRHVnpkRVIxY21GMGFXOXVYRzRnSUNBZ0lDQWdJQ2s3WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLRnh1SUNBZ0lDQWdJQ0FnSUNBZ2JHRjBaVzVqZVZSbGMzUlNaWE4xYkhSekxtWnlZVzFsUkdsemNHeGhlVVJsYkhSaFZHbHRaVTF6SUNZbVhHNGdJQ0FnSUNBZ0lDQWdJQ0JzWVhSbGJtTjVWR1Z6ZEZKbGMzVnNkSE11WW5KdmQzTmxjbEpsWTJWcGNIUlVhVzFsVFhOY2JpQWdJQ0FnSUNBZ0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCc1lYUmxibU41VkdWemRGSmxjM1ZzZEhNdVpXNWtWRzlGYm1STVlYUmxibU41SUQxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCK2ZpaHNZWFJsYm1ONVZHVnpkRkpsYzNWc2RITXVabkpoYldWRWFYTndiR0Y1UkdWc2RHRlVhVzFsVFhNZ0sxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWVhSbGJtTjVWR1Z6ZEZKbGMzVnNkSE11Ym1WMGQyOXlhMHhoZEdWdVkza3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLMnhoZEdWdVkzbFVaWE4wVW1WemRXeDBjeTVEWVhCMGRYSmxWRzlUWlc1a1RYTXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjR2w0Wld4VGRISmxZVzFwYm1jdVgyOXVUR0YwWlc1amVWUmxjM1JTWlhOMWJIUW9iR0YwWlc1amVWUmxjM1JTWlhOMWJIUnpLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJJWVc1a2JHVnpJSGRvWlc0Z2RHaGxJRVZ1WTI5a1pYSWdZVzVrSUZkbFlpQlNWRU1nVTJWMGRHbHVaM01nWVhKbElISmxZMlZwZG1Wa0lHWnliMjBnZEdobElGVkZJRWx1YzNSaGJtTmxYRzRnSUNBZ0lDb2dRSEJoY21GdElHMWxjM05oWjJVZ0xTQkpibWwwYVdGc0lFVnVZMjlrWlhJZ1lXNWtJRmRsWWlCU1ZFTWdVMlYwZEdsdVozTmNiaUFnSUNBZ0tpOWNiaUFnSUNCb1lXNWtiR1ZKYm1sMGFXRnNVMlYwZEdsdVozTW9iV1Z6YzJGblpUb2dRWEp5WVhsQ2RXWm1aWElwSUh0Y2JpQWdJQ0FnSUNBZ1RHOW5aMlZ5TGt4dlp5aGNiaUFnSUNBZ0lDQWdJQ0FnSUV4dloyZGxjaTVIWlhSVGRHRmphMVJ5WVdObEtDa3NYRzRnSUNBZ0lDQWdJQ0FnSUNBblJHRjBZVU5vWVc1dVpXeFNaV05sYVhabFRXVnpjMkZuWlZSNWNHVXVTVzVwZEdsaGJGTmxkSFJwYm1kekp5eGNiaUFnSUNBZ0lDQWdJQ0FnSURaY2JpQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2NHRjViRzloWkVGelUzUnlhVzVuSUQwZ2JtVjNJRlJsZUhSRVpXTnZaR1Z5S0NkMWRHWXRNVFluS1M1a1pXTnZaR1VvWEc0Z0lDQWdJQ0FnSUNBZ0lDQnRaWE56WVdkbExuTnNhV05sS0RFcFhHNGdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJR052Ym5OMElIQmhjbk5sWkVsdWFYUnBZV3hUWlhSMGFXNW5jeUE5SUVwVFQwNHVjR0Z5YzJVb2NHRjViRzloWkVGelUzUnlhVzVuS1R0Y2JseHVJQ0FnSUNBZ0lDQmpiMjV6ZENCcGJtbDBhV0ZzVTJWMGRHbHVaM002SUVsdWFYUnBZV3hUWlhSMGFXNW5jeUE5SUc1bGR5QkpibWwwYVdGc1UyVjBkR2x1WjNNb0tUdGNibHh1SUNBZ0lDQWdJQ0JwWmlBb2NHRnljMlZrU1c1cGRHbGhiRk5sZEhScGJtZHpMa1Z1WTI5a1pYSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbHVhWFJwWVd4VFpYUjBhVzVuY3k1RmJtTnZaR1Z5VTJWMGRHbHVaM01nUFNCd1lYSnpaV1JKYm1sMGFXRnNVMlYwZEdsdVozTXVSVzVqYjJSbGNqdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUdsbUlDaHdZWEp6WldSSmJtbDBhV0ZzVTJWMGRHbHVaM011VjJWaVVsUkRLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBibWwwYVdGc1UyVjBkR2x1WjNNdVYyVmlVbFJEVTJWMGRHbHVaM01nUFNCd1lYSnpaV1JKYm1sMGFXRnNVMlYwZEdsdVozTXVWMlZpVWxSRE8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tIQmhjbk5sWkVsdWFYUnBZV3hUWlhSMGFXNW5jeTVRYVhobGJGTjBjbVZoYldsdVp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXNXBkR2xoYkZObGRIUnBibWR6TGxCcGVHVnNVM1J5WldGdGFXNW5VMlYwZEdsdVozTWdQVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJoY25ObFpFbHVhWFJwWVd4VFpYUjBhVzVuY3k1UWFYaGxiRk4wY21WaGJXbHVaenRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2h3WVhKelpXUkpibWwwYVdGc1UyVjBkR2x1WjNNdVEyOXVabWxuVDNCMGFXOXVjeUFtSmlCd1lYSnpaV1JKYm1sMGFXRnNVMlYwZEdsdVozTXVRMjl1Wm1sblQzQjBhVzl1Y3k1RVpXWmhkV3gwVkc5SWIzWmxjaUFoUFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbU52Ym1acFp5NXpaWFJHYkdGblJXNWhZbXhsWkNoY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCR2JHRm5jeTVJYjNabGNtbHVaMDF2ZFhObFRXOWtaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FoSVhCaGNuTmxaRWx1YVhScFlXeFRaWFIwYVc1bmN5NURiMjVtYVdkUGNIUnBiMjV6TGtSbFptRjFiSFJVYjBodmRtVnlYRzRnSUNBZ0lDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnYVc1cGRHbGhiRk5sZEhScGJtZHpMblZsUTI5dGNHRjBhV0pzWlNncE8xeHVJQ0FnSUNBZ0lDQk1iMmRuWlhJdVRHOW5LRXh2WjJkbGNpNUhaWFJUZEdGamExUnlZV05sS0Nrc0lIQmhlV3h2WVdSQmMxTjBjbWx1Wnl3Z05pazdYRzVjYmlBZ0lDQWdJQ0FnZEdocGN5NXdhWGhsYkZOMGNtVmhiV2x1Wnk1ZmIyNUpibWwwYVdGc1UyVjBkR2x1WjNNb2FXNXBkR2xoYkZObGRIUnBibWR6S1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCSVlXNWtiR1Z6SUhkb1pXNGdkR2hsSUZGMVlXNTBhWHBoZEdsdmJpQlFZWEpoYldWMFpYSWdZWEpsSUhKbFkyVnBkbVZrSUdaeWIyMGdkR2hsSUZWRklFbHVjM1JoYm1ObFhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUcxbGMzTmhaMlVnTFNCRmJtTnZaR1Z5Y3lCUmRXRnVkR2w2WVhScGIyNGdVR0Z5WVcxbGRHVnlYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2FHRnVaR3hsVm1sa1pXOUZibU52WkdWeVFYWm5VVkFvYldWemMyRm5aVG9nUVhKeVlYbENkV1ptWlhJcElIdGNiaUFnSUNBZ0lDQWdURzluWjJWeUxreHZaeWhjYmlBZ0lDQWdJQ0FnSUNBZ0lFeHZaMmRsY2k1SFpYUlRkR0ZqYTFSeVlXTmxLQ2tzWEc0Z0lDQWdJQ0FnSUNBZ0lDQW5SR0YwWVVOb1lXNXVaV3hTWldObGFYWmxUV1Z6YzJGblpWUjVjR1V1Vm1sa1pXOUZibU52WkdWeVFYWm5VVkFuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdObHh1SUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNCamIyNXpkQ0JCZG1kUlVDQTlJRTUxYldKbGNpaGNiaUFnSUNBZ0lDQWdJQ0FnSUc1bGR5QlVaWGgwUkdWamIyUmxjaWduZFhSbUxURTJKeWt1WkdWamIyUmxLRzFsYzNOaFoyVXVjMnhwWTJVb01Ta3BYRzRnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjMlYwVm1sa1pXOUZibU52WkdWeVFYWm5VVkFvUVhablVWQXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRWhoYm1Sc1pYTWdkMmhsYmlCMGFHVWdkbWxrWlc4Z1pXeGxiV1Z1ZENCb1lYTWdZbVZsYmlCc2IyRmtaV1FnZDJsMGFDQmhJSE55WTA5aWFtVmpkRnh1SUNBZ0lDQXFMMXh1SUNBZ0lHaGhibVJzWlZacFpHVnZTVzVwZEdsaGJHbDZaV1FvS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Y0dsNFpXeFRkSEpsWVcxcGJtY3VYMjl1Vm1sa1pXOUpibWwwYVdGc2FYcGxaQ2dwTzF4dVhHNGdJQ0FnSUNBZ0lDOHZJR1ZwZEdobGNpQmhkWFJ2Y0d4aGVTQjBhR1VnZG1sa1pXOGdiM0lnYzJWMElIVndJSFJvWlNCd2JHRjVJRzkyWlhKc1lYbGNiaUFnSUNBZ0lDQWdkR2hwY3k1aGRYUnZVR3hoZVZacFpHVnZUM0pUWlhSVmNGQnNZWGxQZG1WeWJHRjVLQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjbVZ6YVhwbFVHeGhlV1Z5VTNSNWJHVW9LVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NTJhV1JsYjFCc1lYbGxjaTUxY0dSaGRHVldhV1JsYjFOMGNtVmhiVk5wZW1Vb0tUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQkdiR0ZuSUhObGRDQnBaaUIwYUdVZ2RYTmxjaUJvWVhNZ1VYVmhiR2wwZVNCUGQyNWxjbk5vYVhCY2JpQWdJQ0FnS2lCQWNHRnlZVzBnYldWemMyRm5aU0F0SUVSdlpYTWdkR2hsSUdOMWNuSmxiblFnWTJ4cFpXNTBJR2hoZG1VZ1VYVmhiR2wwZVNCUGQyNWxjbk5vYVhCY2JpQWdJQ0FnS2k5Y2JpQWdJQ0J2YmxGMVlXeHBkSGxEYjI1MGNtOXNUM2R1WlhKemFHbHdLRzFsYzNOaFoyVTZJRUZ5Y21GNVFuVm1abVZ5S1NCN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUhacFpYY2dQU0J1WlhjZ1ZXbHVkRGhCY25KaGVTaHRaWE56WVdkbEtUdGNiaUFnSUNBZ0lDQWdURzluWjJWeUxreHZaeWhjYmlBZ0lDQWdJQ0FnSUNBZ0lFeHZaMmRsY2k1SFpYUlRkR0ZqYTFSeVlXTmxLQ2tzWEc0Z0lDQWdJQ0FnSUNBZ0lDQW5SR0YwWVVOb1lXNXVaV3hTWldObGFYWmxUV1Z6YzJGblpWUjVjR1V1VVhWaGJHbDBlVU52Ym5SeWIyeFBkMjVsY25Ob2FYQW5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ05seHVJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtbHpVWFZoYkdsMGVVTnZiblJ5YjJ4c1pYSWdQU0J1WlhjZ1FtOXZiR1ZoYmloMmFXVjNXekZkS1M1MllXeDFaVTltS0NrN1hHNGdJQ0FnSUNBZ0lFeHZaMmRsY2k1TWIyY29YRzRnSUNBZ0lDQWdJQ0FnSUNCTWIyZG5aWEl1UjJWMFUzUmhZMnRVY21GalpTZ3BMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1lGSmxZMlZwZG1Wa0lIRjFZV3hwZEhrZ1kyOXVkSEp2Ykd4bGNpQnRaWE56WVdkbExDQjNhV3hzSUdOdmJuUnliMndnY1hWaGJHbDBlVG9nSkh0MGFHbHpMbWx6VVhWaGJHbDBlVU52Ym5SeWIyeHNaWEo5WUZ4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5CcGVHVnNVM1J5WldGdGFXNW5MbDl2YmxGMVlXeHBkSGxEYjI1MGNtOXNUM2R1WlhKemFHbHdLRnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVwYzFGMVlXeHBkSGxEYjI1MGNtOXNiR1Z5WEc0Z0lDQWdJQ0FnSUNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1NHRnVaR3hsY3lCM2FHVnVJSFJvWlNCQloyZHlaV2RoZEdWa0lITjBZWFJ6SUdGeVpTQkRiMnhzWldOMFpXUmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2MzUmhkSE1nTFNCQloyZHlaV2RoZEdWa0lGTjBZWFJ6WEc0Z0lDQWdJQ292WEc0Z0lDQWdhR0Z1Wkd4bFZtbGtaVzlUZEdGMGN5aHpkR0YwY3pvZ1FXZG5jbVZuWVhSbFpGTjBZWFJ6S1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Y0dsNFpXeFRkSEpsWVcxcGJtY3VYMjl1Vm1sa1pXOVRkR0YwY3loemRHRjBjeWs3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVkc4Z1VtVnphWHBsSUhSb1pTQldhV1JsYnlCUWJHRjVaWElnWld4bGJXVnVkRnh1SUNBZ0lDQXFMMXh1SUNBZ0lISmxjMmw2WlZCc1lYbGxjbE4wZVd4bEtDazZJSFp2YVdRZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG5acFpHVnZVR3hoZVdWeUxuSmxjMmw2WlZCc1lYbGxjbE4wZVd4bEtDazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dSMlYwSUhSb1pTQnZkbVZ5Y21sa1pHVnVJR1JwYzJOdmJtNWxZM1FnYldWemMyRm5aVnh1SUNBZ0lDQXFMMXh1SUNBZ0lHZGxkRVJwYzJOdmJtNWxZM1JOWlhOellXZGxUM1psY25KcFpHVW9LVG9nYzNSeWFXNW5JSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVpHbHpZMjl1Ym1WamRFMWxjM05oWjJWUGRtVnljbWxrWlR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCVFpYUWdkR2hsSUc5MlpYSnlhV1JsSUdadmNpQjBhR1VnWkdselkyOXVibVZqZENCdFpYTnpZV2RsWEc0Z0lDQWdJQ292WEc0Z0lDQWdjMlYwUkdselkyOXVibVZqZEUxbGMzTmhaMlZQZG1WeWNtbGtaU2h0WlhOellXZGxPaUJ6ZEhKcGJtY3BPaUIyYjJsa0lIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1a2FYTmpiMjV1WldOMFRXVnpjMkZuWlU5MlpYSnlhV1JsSUQwZ2JXVnpjMkZuWlR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J6WlhSUWNtVm1aWEp5WldSRGIyUmxZeWhqYjJSbFl6b2djM1J5YVc1bktTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWNISmxabVZ5Y21Wa1EyOWtaV01nUFNCamIyUmxZenRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11Y0dWbGNrTnZibTVsWTNScGIyNURiMjUwY205c2JHVnlLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5CbFpYSkRiMjV1WldOMGFXOXVRMjl1ZEhKdmJHeGxjaTV3Y21WbVpYSnlaV1JEYjJSbFl5QTlJR052WkdWak8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXdaV1Z5UTI5dWJtVmpkR2x2YmtOdmJuUnliMnhzWlhJdWRYQmtZWFJsUTI5a1pXTlRaV3hsWTNScGIyNGdQU0JtWVd4elpUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNibHh1SUNBZ0lITmxkRlpwWkdWdlJXNWpiMlJsY2tGMloxRlFLR0YyWjFGUU9pQnVkVzFpWlhJcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1MmFXUmxiMEYyWjFGd0lEMGdZWFpuVVZBN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Y0dsNFpXeFRkSEpsWVcxcGJtY3VYMjl1Vm1sa1pXOUZibU52WkdWeVFYWm5VVkFvZEdocGN5NTJhV1JsYjBGMloxRndLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJsYm1GaWJHVnpMMlJwYzJGaWJHVnpJR3RsZVdKdllYSmtJR1YyWlc1MElHeHBjM1JsYm1WeWMxeHVJQ0FnSUNBcUwxeHVJQ0FnSUhObGRFdGxlV0p2WVhKa1NXNXdkWFJGYm1GaWJHVmtLR2x6Ulc1aFlteGxaRG9nWW05dmJHVmhiaWtnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbXRsZVdKdllYSmtRMjl1ZEhKdmJHeGxjajh1ZFc1eVpXZHBjM1JsY2t0bGVVSnZZWEprUlhabGJuUnpLQ2s3WEc0Z0lDQWdJQ0FnSUdsbUlDaHBjMFZ1WVdKc1pXUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YTJWNVltOWhjbVJEYjI1MGNtOXNiR1Z5SUQwZ2RHaHBjeTVwYm5CMWRFTnNZWE56WlhOR1lXTjBiM0o1TG5KbFoybHpkR1Z5UzJWNVFtOWhjbVFvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWpiMjVtYVdkY2JpQWdJQ0FnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCbGJtRmliR1Z6TDJScGMyRmliR1Z6SUcxdmRYTmxJR1YyWlc1MElHeHBjM1JsYm1WeWMxeHVJQ0FnSUNBcUwxeHVJQ0FnSUhObGRFMXZkWE5sU1c1d2RYUkZibUZpYkdWa0tHbHpSVzVoWW14bFpEb2dZbTl2YkdWaGJpa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxtMXZkWE5sUTI5dWRISnZiR3hsY2o4dWRXNXlaV2RwYzNSbGNrMXZkWE5sUlhabGJuUnpLQ2s3WEc0Z0lDQWdJQ0FnSUdsbUlDaHBjMFZ1WVdKc1pXUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUcxdmRYTmxUVzlrWlNBOUlIUm9hWE11WTI5dVptbG5MbWx6Um14aFowVnVZV0pzWldRb1JteGhaM011U0c5MlpYSnBibWROYjNWelpVMXZaR1VwWEc0Z0lDQWdJQ0FnSUNBZ0lDQS9JRU52Ym5SeWIyeFRZMmhsYldWVWVYQmxMa2h2ZG1WeWFXNW5UVzkxYzJWY2JpQWdJQ0FnSUNBZ0lDQWdJRG9nUTI5dWRISnZiRk5qYUdWdFpWUjVjR1V1VEc5amEyVmtUVzkxYzJVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtMXZkWE5sUTI5dWRISnZiR3hsY2lBOVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtbHVjSFYwUTJ4aGMzTmxjMFpoWTNSdmNua3VjbVZuYVhOMFpYSk5iM1Z6WlNodGIzVnpaVTF2WkdVcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2daVzVoWW14bGN5OWthWE5oWW14bGN5QjBiM1ZqYUNCbGRtVnVkQ0JzYVhOMFpXNWxjbk5jYmlBZ0lDQWdLaTljYmlBZ0lDQnpaWFJVYjNWamFFbHVjSFYwUlc1aFlteGxaQ2hwYzBWdVlXSnNaV1E2SUdKdmIyeGxZVzRwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTUwYjNWamFFTnZiblJ5YjJ4c1pYSS9MblZ1Y21WbmFYTjBaWEpVYjNWamFFVjJaVzUwY3lncE8xeHVJQ0FnSUNBZ0lDQnBaaUFvYVhORmJtRmliR1ZrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuUnZkV05vUTI5dWRISnZiR3hsY2lBOUlIUm9hWE11YVc1d2RYUkRiR0Z6YzJWelJtRmpkRzl5ZVM1eVpXZHBjM1JsY2xSdmRXTm9LRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVkyOXVabWxuTG1selJteGhaMFZ1WVdKc1pXUW9SbXhoWjNNdVJtRnJaVTF2ZFhObFYybDBhRlJ2ZFdOb1pYTXBMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWRtbGtaVzlGYkdWdFpXNTBVR0Z5Wlc1MFEyeHBaVzUwVW1WamRGeHVJQ0FnSUNBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlHVnVZV0pzWlhNdlpHbHpZV0pzWlhNZ1oyRnRaU0J3WVdRZ1pYWmxiblFnYkdsemRHVnVaWEp6WEc0Z0lDQWdJQ292WEc0Z0lDQWdjMlYwUjJGdFpWQmhaRWx1Y0hWMFJXNWhZbXhsWkNocGMwVnVZV0pzWldRNklHSnZiMnhsWVc0cElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1bllXMWxVR0ZrUTI5dWRISnZiR3hsY2o4dWRXNXlaV2RwYzNSbGNrZGhiV1ZRWVdSRmRtVnVkSE1vS1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLR2x6Ulc1aFlteGxaQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1bllXMWxVR0ZrUTI5dWRISnZiR3hsY2lBOUlIUm9hWE11YVc1d2RYUkRiR0Z6YzJWelJtRmpkRzl5ZVM1eVpXZHBjM1JsY2tkaGJXVlFZV1FvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVoyRnRaVkJoWkVOdmJuUnliMnhzWlhJdWIyNUhZVzFsY0dGa1EyOXVibVZqZEdWa0lEMGdLQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11YzNSeVpXRnRUV1Z6YzJGblpVTnZiblJ5YjJ4c1pYSXVkRzlUZEhKbFlXMWxja2hoYm1Sc1pYSnpMbWRsZENnblIyRnRaWEJoWkVOdmJtNWxZM1JsWkNjcEtDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtZGhiV1ZRWVdSRGIyNTBjbTlzYkdWeUxtOXVSMkZ0WlhCaFpFUnBjMk52Ym01bFkzUmxaQ0E5SUNoamIyNTBjbTlzYkdWeVNXUjRPaUJ1ZFcxaVpYSXBJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbk4wY21WaGJVMWxjM05oWjJWRGIyNTBjbTlzYkdWeUxuUnZVM1J5WldGdFpYSklZVzVrYkdWeWN5NW5aWFFvSjBkaGJXVndZV1JFYVhOamIyNXVaV04wWldRbktTaGJZMjl1ZEhKdmJHeGxja2xrZUYwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnY21WbmFYTjBaWEpFWVhSaFEyaGhibTVsYkVWMlpXNTBSVzFwZEhSbGNuTW9aR0YwWVVOb1lXNXVaV3c2SUVSaGRHRkRhR0Z1Ym1Wc1EyOXVkSEp2Ykd4bGNpa2dlMXh1SUNBZ0lDQWdJQ0JrWVhSaFEyaGhibTVsYkM1dmJrOXdaVzRnUFNBb2JHRmlaV3dzSUdWMlpXNTBLU0E5UGx4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1d2FYaGxiRk4wY21WaGJXbHVaeTVrYVhOd1lYUmphRVYyWlc1MEtGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHNWxkeUJFWVhSaFEyaGhibTVsYkU5d1pXNUZkbVZ1ZENoN0lHeGhZbVZzTENCbGRtVnVkQ0I5S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnWkdGMFlVTm9ZVzV1Wld3dWIyNURiRzl6WlNBOUlDaHNZV0psYkN3Z1pYWmxiblFwSUQwK1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuQnBlR1ZzVTNSeVpXRnRhVzVuTG1ScGMzQmhkR05vUlhabGJuUW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdibVYzSUVSaGRHRkRhR0Z1Ym1Wc1EyeHZjMlZGZG1WdWRDaDdJR3hoWW1Wc0xDQmxkbVZ1ZENCOUtWeHVJQ0FnSUNBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ1pHRjBZVU5vWVc1dVpXd3ViMjVGY25KdmNpQTlJQ2hzWVdKbGJDd2daWFpsYm5RcElEMCtYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbkJwZUdWc1UzUnlaV0Z0YVc1bkxtUnBjM0JoZEdOb1JYWmxiblFvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYm1WM0lFUmhkR0ZEYUdGdWJtVnNSWEp5YjNKRmRtVnVkQ2g3SUd4aFltVnNMQ0JsZG1WdWRDQjlLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0tUdGNiaUFnSUNCOVhHNTlYRzRpTENJdkx5QkRiM0I1Y21sbmFIUWdSWEJwWXlCSFlXMWxjeXdnU1c1akxpQkJiR3dnVW1sbmFIUnpJRkpsYzJWeWRtVmtMbHh1WEc0dktpcGNiaUFxSUZSb1pTQlVlWEJsY3lCdlppQk5aWE56WVdkbGN5QjBhR0YwSUhkcGJHd2dZbVVnY21WalpXbDJaV1JjYmlBcUwxeHVaWGh3YjNKMElHVnVkVzBnVFdWemMyRm5aVkpsWTNaVWVYQmxjeUI3WEc0Z0lDQWdRMDlPUmtsSElEMGdKMk52Ym1acFp5Y3NYRzRnSUNBZ1UxUlNSVUZOUlZKZlRFbFRWQ0E5SUNkemRISmxZVzFsY2t4cGMzUW5MRnh1SUNBZ0lGQk1RVmxGVWw5RFQxVk9WQ0E5SUNkd2JHRjVaWEpEYjNWdWRDY3NYRzRnSUNBZ1QwWkdSVklnUFNBbmIyWm1aWEluTEZ4dUlDQWdJRUZPVTFkRlVpQTlJQ2RoYm5OM1pYSW5MRnh1SUNBZ0lFbERSVjlEUVU1RVNVUkJWRVVnUFNBbmFXTmxRMkZ1Wkdsa1lYUmxKeXhjYmlBZ0lDQlFSVVZTWDBSQlZFRmZRMGhCVGs1RlRGTWdQU0FuY0dWbGNrUmhkR0ZEYUdGdWJtVnNjeWNzWEc0Z0lDQWdVRWxPUnlBOUlDZHdhVzVuSnl4Y2JpQWdJQ0JYUVZKT1NVNUhJRDBnSjNkaGNtNXBibWNuWEc1OVhHNWNiaThxS2x4dUlDb2dRMjl1WTNKbGRHVWdVbVZqWldsMlpXUWdUV1Z6YzJGblpTQjNjbUZ3Y0dWeVhHNGdLaTljYm1WNGNHOXlkQ0JqYkdGemN5Qk5aWE56WVdkbFVtVmpkaUI3WEc0Z0lDQWdkSGx3WlRvZ2MzUnlhVzVuTzF4dUlDQWdJR2xrT2lCemRISnBibWM3WEc1OVhHNWNiaThxS2x4dUlDb2dRWFYwYUdWdWRHbGpZWFJwYjI0Z1VtVnhkV2x5WldRZ1RXVnpjMkZuWlNCM2NtRndjR1Z5WEc0Z0tpOWNibVY0Y0c5eWRDQmpiR0Z6Y3lCTlpYTnpZV2RsUVhWMGFGSmxjWFZwY21Wa0lHVjRkR1Z1WkhNZ1RXVnpjMkZuWlZKbFkzWWdlMzFjYmx4dUx5b3FYRzRnS2lCRGIyNW1hV2NnVFdWemMyRm5aU0JYY21Gd2NHVnlYRzRnS2k5Y2JtVjRjRzl5ZENCamJHRnpjeUJOWlhOellXZGxRMjl1Wm1sbklHVjRkR1Z1WkhNZ1RXVnpjMkZuWlZKbFkzWWdlMXh1SUNBZ0lIQmxaWEpEYjI1dVpXTjBhVzl1VDNCMGFXOXVjem9nVWxSRFEyOXVabWxuZFhKaGRHbHZianRjYm4xY2JseHVMeW9xWEc0Z0tpQlRkSEpsWVcxbGNpQk1hWE4wSUUxbGMzTmhaMlVnVjNKaGNIQmxjbHh1SUNvdlhHNWxlSEJ2Y25RZ1kyeGhjM01nVFdWemMyRm5aVk4wY21WaGJXVnlUR2x6ZENCbGVIUmxibVJ6SUUxbGMzTmhaMlZTWldOMklIdGNiaUFnSUNCcFpITTZJSE4wY21sdVoxdGRPMXh1ZlZ4dVhHNHZLaXBjYmlBcUlGQnNZWGxsY2lCRGIzVnVkQ0JOWlhOellXZGxJSGR5WVhCd1pYSmNiaUFxTDF4dVpYaHdiM0owSUdOc1lYTnpJRTFsYzNOaFoyVlFiR0Y1WlhKRGIzVnVkQ0JsZUhSbGJtUnpJRTFsYzNOaFoyVlNaV04ySUh0Y2JpQWdJQ0JqYjNWdWREb2diblZ0WW1WeU8xeHVmVnh1WEc0dktpcGNiaUFxSUZkbFlpQlNWRU1nYjJabVpYSWdRVzV6ZDJWeUlFMWxjM05oWjJVZ2QzSmhjSEJsY2x4dUlDb3ZYRzVsZUhCdmNuUWdZMnhoYzNNZ1RXVnpjMkZuWlVGdWMzZGxjaUJsZUhSbGJtUnpJRTFsYzNOaFoyVlNaV04ySUh0Y2JpQWdJQ0J6WkhBNklITjBjbWx1Wnp0Y2JuMWNibHh1THlvcVhHNGdLaUJYWldKU1ZFTWdjMlJ3SUc5bVptVnlJRTFsYzNOaFoyVWdkM0poY0hCbGNpNWNiaUFxTDF4dVpYaHdiM0owSUdOc1lYTnpJRTFsYzNOaFoyVlBabVpsY2lCbGVIUmxibVJ6SUUxbGMzTmhaMlZTWldOMklIdGNiaUFnSUNCelpIQTZJSE4wY21sdVp6dGNiaUFnSUNCelpuVS9PaUJpYjI5c1pXRnVPMXh1SUNBZ0lHUmxabUYxYkhSVWIwaHZkbVZ5UHpvZ2MzUnlhVzVuTzF4dWZWeHVYRzR2S2lwY2JpQXFJRWxqWlNCRFlXNWthV1JoZEdVZ1RXVnpjMkZuWlNCM2NtRndjR1Z5WEc0Z0tpOWNibVY0Y0c5eWRDQmpiR0Z6Y3lCTlpYTnpZV2RsU1dObFEyRnVaR2xrWVhSbElHVjRkR1Z1WkhNZ1RXVnpjMkZuWlZKbFkzWWdlMXh1SUNBZ0lHTmhibVJwWkdGMFpUb2dVbFJEU1dObFEyRnVaR2xrWVhSbFNXNXBkRHRjYm4xY2JseHVMeW9xWEc0Z0tpQlFaV1Z5SUVSaGRHRWdRMmhoYm01bGJITWdUV1Z6YzJGblpTQjNjbUZ3Y0dWeVhHNGdLaTljYm1WNGNHOXlkQ0JqYkdGemN5Qk5aWE56WVdkbFVHVmxja1JoZEdGRGFHRnVibVZzY3lCbGVIUmxibVJ6SUUxbGMzTmhaMlZTWldOMklIdGNiaUFnSUNCeVpXTjJVM1J5WldGdFNXUTZJRzUxYldKbGNqdGNiaUFnSUNCelpXNWtVM1J5WldGdFNXUTZJRzUxYldKbGNqdGNiaUFnSUNCMGVYQmxPaUJ6ZEhKcGJtYzdYRzU5WEc1Y2JtVjRjRzl5ZENCamJHRnpjeUJOWlhOellXZGxUMjVUWTNKbFpXNUxaWGxpYjJGeVpDQjdYRzRnSUNBZ1kyOXRiV0Z1WkRvZ2MzUnlhVzVuTzF4dUlDQWdJSE5vYjNkUGJsTmpjbVZsYmt0bGVXSnZZWEprT2lCaWIyOXNaV0Z1TzF4dUlDQWdJSGc2SUc1MWJXSmxjanRjYmlBZ0lDQjVPaUJ1ZFcxaVpYSTdYRzU5WEc0aUxDSXZMeUJEYjNCNWNtbG5hSFFnUlhCcFl5QkhZVzFsY3l3Z1NXNWpMaUJCYkd3Z1VtbG5hSFJ6SUZKbGMyVnlkbVZrTGx4dVhHNXBiWEJ2Y25RZ2V5Qk1iMmRuWlhJZ2ZTQm1jbTl0SUNjdUxpOU1iMmRuWlhJdlRHOW5aMlZ5Snp0Y2JseHVMeW9xWEc0Z0tpQlVhR1VnVTJWdVpDQlVlWEJsY3lCMGFHRjBJR0Z5WlNCd2RYTm9aV1FnWm5KdmJTQjBhR1VnYzJsbmJtRnNhVzVuSUhObGNuWmxjbHh1SUNvdlhHNWxlSEJ2Y25RZ1pXNTFiU0JOWlhOellXZGxVMlZ1WkZSNWNHVnpJSHRjYmlBZ0lDQk1TVk5VWDFOVVVrVkJUVVZTVXlBOUlDZHNhWE4wVTNSeVpXRnRaWEp6Snl4Y2JpQWdJQ0JUVlVKVFExSkpRa1VnUFNBbmMzVmljMk55YVdKbEp5eGNiaUFnSUNCVlRsTlZRbE5EVWtsQ1JTQTlJQ2QxYm5OMVluTmpjbWxpWlNjc1hHNGdJQ0FnU1VORlgwTkJUa1JKUkVGVVJTQTlJQ2RwWTJWRFlXNWthV1JoZEdVbkxGeHVJQ0FnSUU5R1JrVlNJRDBnSjI5bVptVnlKeXhjYmlBZ0lDQkJUbE5YUlZJZ1BTQW5ZVzV6ZDJWeUp5eGNiaUFnSUNCRVFWUkJRMGhCVGs1RlRGSkZVVlZGVTFRZ1BTQW5aR0YwWVVOb1lXNXVaV3hTWlhGMVpYTjBKeXhjYmlBZ0lDQlRSbFZTUlVOV1JFRlVRVU5JUVU1T1JVeFNSVUZFV1NBOUlDZHdaV1Z5UkdGMFlVTm9ZVzV1Wld4elVtVmhaSGtuTEZ4dUlDQWdJRkJQVGtjZ1BTQW5jRzl1WnlkY2JuMWNibHh1THlvcVhHNGdLaUJCSUZkeVlYQndaWElnWm05eUlIUm9aU0J0WlhOellXZGxJSFJ2SUhObGJtUWdkRzhnZEdobElITnBaMjVoYkdsdVp5QnpaWEoyWlhKY2JpQXFMMXh1Wlhod2IzSjBJR05zWVhOeklFMWxjM05oWjJWVFpXNWtJR2x0Y0d4bGJXVnVkSE1nVTJWdVpDQjdYRzRnSUNBZ2RIbHdaVG9nYzNSeWFXNW5PMXh1SUNBZ0lIQmxaWEpEYjI1dVpXTjBhVzl1VDNCMGFXOXVjem9nYjJKcVpXTjBPMXh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVkhWeWJuTWdkR2hsSUhkeVlYQndaWElnYVc1MGJ5QmhJRXBUVDA0Z1UzUnlhVzVuWEc0Z0lDQWdJQ29nUUhKbGRIVnlibk1nTFNCS1UwOU9JRk4wY21sdVp5QnZaaUIwYUdVZ1RXVnpjMkZuWlNCMGJ5QnpaVzVrWEc0Z0lDQWdJQ292WEc0Z0lDQWdjR0Y1Ykc5aFpDZ3BJSHRjYmlBZ0lDQWdJQ0FnVEc5bloyVnlMa3h2WnloY2JpQWdJQ0FnSUNBZ0lDQWdJRXh2WjJkbGNpNUhaWFJUZEdGamExUnlZV05sS0Nrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FuVTJWdVpHbHVaeUE5UGlCY1hHNG5JQ3NnU2xOUFRpNXpkSEpwYm1kcFpua29kR2hwY3l3Z2RXNWtaV1pwYm1Wa0xDQTBLU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lEWmNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRXBUVDA0dWMzUnlhVzVuYVdaNUtIUm9hWE1wTzF4dUlDQWdJSDFjYm4xY2JseHVaWGh3YjNKMElHbHVkR1Z5Wm1GalpTQlRaVzVrSUh0Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCVWRYSnVjeUIwYUdVZ2QzSmhjSEJsY2lCcGJuUnZJR0VnU2xOUFRpQlRkSEpwYm1kY2JpQWdJQ0FnS2lCQWNtVjBkWEp1Y3lBdElFcFRUMDRnVTNSeWFXNW5JRzltSUhSb1pTQk5aWE56WVdkbElIUnZJSE5sYm1SY2JpQWdJQ0FnS2k5Y2JpQWdJQ0J3WVhsc2IyRmtPaUFvS1NBOVBpQnpkSEpwYm1jN1hHNTlYRzVjYm1WNGNHOXlkQ0JqYkdGemN5Qk5aWE56WVdkbFRHbHpkRk4wY21WaGJXVnljeUJsZUhSbGJtUnpJRTFsYzNOaFoyVlRaVzVrSUh0Y2JpQWdJQ0JqYjI1emRISjFZM1J2Y2lncElIdGNiaUFnSUNBZ0lDQWdjM1Z3WlhJb0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1MGVYQmxJRDBnVFdWemMyRm5aVk5sYm1SVWVYQmxjeTVNU1ZOVVgxTlVVa1ZCVFVWU1V6dGNiaUFnSUNCOVhHNTlYRzVjYm1WNGNHOXlkQ0JqYkdGemN5Qk5aWE56WVdkbFUzVmljMk55YVdKbElHVjRkR1Z1WkhNZ1RXVnpjMkZuWlZObGJtUWdlMXh1SUNBZ0lITjBjbVZoYldWeVNXUTZJSE4wY21sdVp6dGNibHh1SUNBZ0lHTnZibk4wY25WamRHOXlLSE4wY21WaGJXVnlhV1E2SUhOMGNtbHVaeWtnZTF4dUlDQWdJQ0FnSUNCemRYQmxjaWdwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMblI1Y0dVZ1BTQk5aWE56WVdkbFUyVnVaRlI1Y0dWekxsTlZRbE5EVWtsQ1JUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1emRISmxZVzFsY2tsa0lEMGdjM1J5WldGdFpYSnBaRHRjYmlBZ0lDQjlYRzU5WEc1Y2JtVjRjRzl5ZENCamJHRnpjeUJOWlhOellXZGxWVzV6ZFdKelkzSnBZbVVnWlhoMFpXNWtjeUJOWlhOellXZGxVMlZ1WkNCN1hHNGdJQ0FnWTI5dWMzUnlkV04wYjNJb0tTQjdYRzRnSUNBZ0lDQWdJSE4xY0dWeUtDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdWRIbHdaU0E5SUUxbGMzTmhaMlZUWlc1a1ZIbHdaWE11VlU1VFZVSlRRMUpKUWtVN1hHNGdJQ0FnZlZ4dWZWeHVYRzR2S2lwY2JpQXFJRWx1YzNSaGJtTmxJRkpsY1hWbGMzUWdUV1Z6YzJGblpTQlhjbUZ3Y0dWeVhHNGdLaTljYm1WNGNHOXlkQ0JqYkdGemN5Qk5aWE56WVdkbFVHOXVaeUJsZUhSbGJtUnpJRTFsYzNOaFoyVlRaVzVrSUh0Y2JpQWdJQ0IwYVcxbE9pQnVkVzFpWlhJN1hHNWNiaUFnSUNCamIyNXpkSEoxWTNSdmNpaDBhVzFsT2lCdWRXMWlaWElwSUh0Y2JpQWdJQ0FnSUNBZ2MzVndaWElvS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTUwZVhCbElEMGdUV1Z6YzJGblpWTmxibVJVZVhCbGN5NVFUMDVITzF4dUlDQWdJQ0FnSUNCMGFHbHpMblJwYldVZ1BTQjBhVzFsTzF4dUlDQWdJSDFjYm4xY2JseHVMeW9xWEc0Z0tpQWdWMlZpSUZKVVF5QlBabVpsY2lCdFpYTnpZV2RsSUhkeVlYQndaWEpjYmlBcUwxeHVaWGh3YjNKMElHTnNZWE56SUUxbGMzTmhaMlZYWldKU1ZFTlBabVpsY2lCbGVIUmxibVJ6SUUxbGMzTmhaMlZUWlc1a0lIdGNiaUFnSUNCelpIQTZJSE4wY21sdVp6dGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQnZabVpsY2lBdElFZGxibVZ5WVhSbFpDQlhaV0lnVWxSRElFOW1abVZ5WEc0Z0lDQWdJQ292WEc0Z0lDQWdZMjl1YzNSeWRXTjBiM0lvYjJabVpYSS9PaUJTVkVOVFpYTnphVzl1UkdWelkzSnBjSFJwYjI1SmJtbDBLU0I3WEc0Z0lDQWdJQ0FnSUhOMWNHVnlLQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkSGx3WlNBOUlFMWxjM05oWjJWVFpXNWtWSGx3WlhNdVQwWkdSVkk3WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLRzltWm1WeUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMblI1Y0dVZ1BTQnZabVpsY2k1MGVYQmxJR0Z6SUUxbGMzTmhaMlZUWlc1a1ZIbHdaWE03WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5Oa2NDQTlJRzltWm1WeUxuTmtjRHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYm4xY2JseHVMeW9xWEc0Z0tpQWdWMlZpSUZKVVF5QkJibk4zWlhJZ2JXVnpjMkZuWlNCM2NtRndjR1Z5WEc0Z0tpOWNibVY0Y0c5eWRDQmpiR0Z6Y3lCTlpYTnpZV2RsVjJWaVVsUkRRVzV6ZDJWeUlHVjRkR1Z1WkhNZ1RXVnpjMkZuWlZObGJtUWdlMXh1SUNBZ0lITmtjRG9nYzNSeWFXNW5PMXh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUUhCaGNtRnRJR0Z1YzNkbGNpQXRJRWRsYm1WeVlYUmxaQ0JYWldJZ1VsUkRJRTltWm1WeVhHNGdJQ0FnSUNvdlhHNGdJQ0FnWTI5dWMzUnlkV04wYjNJb1lXNXpkMlZ5UHpvZ1VsUkRVMlZ6YzJsdmJrUmxjMk55YVhCMGFXOXVTVzVwZENrZ2UxeHVJQ0FnSUNBZ0lDQnpkWEJsY2lncE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5SNWNHVWdQU0JOWlhOellXZGxVMlZ1WkZSNWNHVnpMa0ZPVTFkRlVqdGNibHh1SUNBZ0lDQWdJQ0JwWmlBb1lXNXpkMlZ5S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuUjVjR1VnUFNCaGJuTjNaWEl1ZEhsd1pTQmhjeUJOWlhOellXZGxVMlZ1WkZSNWNHVnpPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV6WkhBZ1BTQmhibk4zWlhJdWMyUndPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1ZlZ4dVhHNHZLaXBjYmlBcUlDQlhaV0lnVWxSRElFUmhkR0VnWTJoaGJtNWxiQ0J5WlhGMVpYTjBJRzFsYzNOaFoyVWdkM0poY0hCbGNseHVJQ292WEc1bGVIQnZjblFnWTJ4aGMzTWdUV1Z6YzJGblpWZGxZbEpVUTBSaGRHRmphR0Z1Ym1Wc1VtVnhkV1Z6ZENCbGVIUmxibVJ6SUUxbGMzTmhaMlZUWlc1a0lIdGNiaUFnSUNCamIyNXpkSEoxWTNSdmNpZ3BJSHRjYmlBZ0lDQWdJQ0FnYzNWd1pYSW9LVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NTBlWEJsSUQwZ1RXVnpjMkZuWlZObGJtUlVlWEJsY3k1RVFWUkJRMGhCVGs1RlRGSkZVVlZGVTFRN1hHNGdJQ0FnZlZ4dWZWeHVYRzR2S2lwY2JpQXFJQ0JYWldJZ1VsUkRJRk5HVlNCRVlYUmhJR05vWVc1dVpXd2djbVZoWkhrZ2JXVnpjMkZuWlNCM2NtRndjR1Z5WEc0Z0tpOWNibVY0Y0c5eWRDQmpiR0Z6Y3lCTlpYTnpZV2RsVTBaVlVtVmpka1JoZEdGRGFHRnVibVZzVW1WaFpIa2daWGgwWlc1a2N5Qk5aWE56WVdkbFUyVnVaQ0I3WEc0Z0lDQWdZMjl1YzNSeWRXTjBiM0lvS1NCN1hHNGdJQ0FnSUNBZ0lITjFjR1Z5S0NrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11ZEhsd1pTQTlJRTFsYzNOaFoyVlRaVzVrVkhsd1pYTXVVMFpWVWtWRFZrUkJWRUZEU0VGT1RrVk1Va1ZCUkZrN1hHNGdJQ0FnZlZ4dWZWeHVYRzR2S2lwY2JpQXFJRkpVUXlCSlkyVWdRMkZ1Wkdsa1lYUmxJRmR5WVhCd1pYSmNiaUFxTDF4dVpYaHdiM0owSUdOc1lYTnpJRTFsYzNOaFoyVkpZMlZEWVc1a2FXUmhkR1VnYVcxd2JHVnRaVzUwY3lCVFpXNWtJSHRjYmlBZ0lDQmpZVzVrYVdSaGRHVTZJRkpVUTBsalpVTmhibVJwWkdGMFpUdGNiaUFnSUNCMGVYQmxPaUJOWlhOellXZGxVMlZ1WkZSNWNHVnpPMXh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUUhCaGNtRnRJR05oYm1ScFpHRjBaU0F0SUZKVVF5QkpZMlVnUTJGdVpHbGtZWFJsWEc0Z0lDQWdJQ292WEc0Z0lDQWdZMjl1YzNSeWRXTjBiM0lvWTJGdVpHbGtZWFJsT2lCU1ZFTkpZMlZEWVc1a2FXUmhkR1VwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTUwZVhCbElEMGdUV1Z6YzJGblpWTmxibVJVZVhCbGN5NUpRMFZmUTBGT1JFbEVRVlJGTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbU5oYm1ScFpHRjBaU0E5SUdOaGJtUnBaR0YwWlR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCVWRYSnVjeUIwYUdVZ2QzSmhjSEJsY2lCcGJuUnZJR0VnU2xOUFRpQlRkSEpwYm1kY2JpQWdJQ0FnS2lCQWNtVjBkWEp1Y3lBdElFcFRUMDRnVTNSeWFXNW5JRzltSUhSb1pTQk5aWE56WVdkbElIUnZJSE5sYm1SY2JpQWdJQ0FnS2k5Y2JpQWdJQ0J3WVhsc2IyRmtLQ2tnZTF4dUlDQWdJQ0FnSUNCTWIyZG5aWEl1VEc5bktGeHVJQ0FnSUNBZ0lDQWdJQ0FnVEc5bloyVnlMa2RsZEZOMFlXTnJWSEpoWTJVb0tTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNkVFpXNWthVzVuSUQwK0lGeGNiaWNnS3lCS1UwOU9Mbk4wY21sdVoybG1lU2gwYUdsekxDQjFibVJsWm1sdVpXUXNJRFFwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdObHh1SUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnU2xOUFRpNXpkSEpwYm1kcFpua29kR2hwY3lrN1hHNGdJQ0FnZlZ4dWZWeHVJaXdpTHk4Z1EyOXdlWEpwWjJoMElFVndhV01nUjJGdFpYTXNJRWx1WXk0Z1FXeHNJRkpwWjJoMGN5QlNaWE5sY25abFpDNWNibHh1YVcxd2IzSjBJSHNnVEc5bloyVnlJSDBnWm5KdmJTQW5MaTR2VEc5bloyVnlMMHh2WjJkbGNpYzdYRzVwYlhCdmNuUWdleUJYWldKVGIyTnJaWFJEYjI1MGNtOXNiR1Z5SUgwZ1puSnZiU0FuTGk5WFpXSlRiMk5yWlhSRGIyNTBjbTlzYkdWeUp6dGNibWx0Y0c5eWRDQjdYRzRnSUNBZ1RXVnpjMkZuWlZKbFkzWlVlWEJsY3l4Y2JpQWdJQ0JOWlhOellXZGxRMjl1Wm1sbkxGeHVJQ0FnSUUxbGMzTmhaMlZUZEhKbFlXMWxja3hwYzNRc1hHNGdJQ0FnVFdWemMyRm5aVkJzWVhsbGNrTnZkVzUwTEZ4dUlDQWdJRTFsYzNOaFoyVkJibk4zWlhJc1hHNGdJQ0FnVFdWemMyRm5aVTltWm1WeUxGeHVJQ0FnSUUxbGMzTmhaMlZKWTJWRFlXNWthV1JoZEdVc1hHNGdJQ0FnVFdWemMyRm5aVkJsWlhKRVlYUmhRMmhoYm01bGJITmNibjBnWm5KdmJTQW5MaTlOWlhOellXZGxVbVZqWldsMlpTYzdYRzVwYlhCdmNuUWdleUJOWlhOellXZGxVRzl1WnlCOUlHWnliMjBnSnk0dlRXVnpjMkZuWlZObGJtUW5PMXh1WEc0dktpcGNiaUFxSUZOcFoyNWhiR3hwYm1jZ2NISnZkRzlqYjJ3Z1ptOXlJR2hoYm1Sc2FXNW5JRzFsYzNOaFoyVnpJR1p5YjIwZ2RHaGxJSE5wWjI1aGJHeHBibWNnYzJWeWRtVnlMbHh1SUNvdlhHNWxlSEJ2Y25RZ1kyeGhjM01nVTJsbmJtRnNiR2x1WjFCeWIzUnZZMjlzSUh0Y2JpQWdJQ0J3Y21sMllYUmxJRVp5YjIxVlJVMWxjM05oWjJWSVlXNWtiR1Z5Y3pvZ1RXRndQSE4wY21sdVp5d2dLSEJoZVd4dllXUTZJSE4wY21sdVp5a2dQVDRnZG05cFpENDdYRzVjYmlBZ0lDQmpiMjV6ZEhKMVkzUnZjaWdwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVHY205dFZVVk5aWE56WVdkbFNHRnVaR3hsY25NZ1BTQnVaWGNnVFdGd1BGeHVJQ0FnSUNBZ0lDQWdJQ0FnYzNSeWFXNW5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ0tIQmhlV3h2WVdRNklITjBjbWx1WnlrZ1BUNGdkbTlwWkZ4dUlDQWdJQ0FnSUNBK0tDazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1lXUmtUV1Z6YzJGblpVaGhibVJzWlhJb1hHNGdJQ0FnSUNBZ0lHMWxjM05oWjJWSlpEb2djM1J5YVc1bkxGeHVJQ0FnSUNBZ0lDQnRaWE56WVdkbFNHRnVaR3hsY2pvZ0tIQmhlV3h2WVdRNklITjBjbWx1WnlrZ1BUNGdkbTlwWkZ4dUlDQWdJQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMa1p5YjIxVlJVMWxjM05oWjJWSVlXNWtiR1Z5Y3k1elpYUW9iV1Z6YzJGblpVbGtMQ0J0WlhOellXZGxTR0Z1Wkd4bGNpazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FHRnVaR3hsVFdWemMyRm5aU2h0WlhOellXZGxTV1E2SUhOMGNtbHVaeXdnYldWemMyRm5aVVJoZEdFNklITjBjbWx1WnlrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NUdjbTl0VlVWTlpYTnpZV2RsU0dGdVpHeGxjbk11YUdGektHMWxjM05oWjJWSlpDa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Um5KdmJWVkZUV1Z6YzJGblpVaGhibVJzWlhKekxtZGxkQ2h0WlhOellXZGxTV1FwS0cxbGMzTmhaMlZFWVhSaEtUdGNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUV4dloyZGxjaTVGY25KdmNpaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQk1iMmRuWlhJdVIyVjBVM1JoWTJ0VWNtRmpaU2dwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdCTlpYTnpZV2RsSUhSNWNHVWdiMllnSkh0dFpYTnpZV2RsU1dSOUlHUnZaWE1nYm05MElHaGhkbVVnWVNCdFpYTnpZV2RsSUdoaGJtUnNaWElnY21WbmFYTjBaWEpsWkNCdmJpQjBhR1VnWm5KdmJuUmxibVFnTFNCcFoyNXZjbWx1WnlCdFpYTnpZV2RsTG1CY2JpQWdJQ0FnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCVFpYUjFjQ0JoYm5rZ1pHVm1ZWFZzZENCemFXZHVZV3hzYVc1bklHMWxjM05oWjJVZ2FHRnVaR3hwYm1jc0lIUm9aWE5sSUdOaGJpQmlaU0J2ZG1WeWNtbGtaR1Z1SUc5eUlHRmtaR2wwYVc5dVlXd2dhR0Z1Wkd4bGNuTWdZV1JrWldRZ2QybDBhQ0JnWVdSa1RXVnpjMkZuWlVoaGJtUnNaWEpnTGx4dUlDQWdJQ0FxSUVCd1lYSmhiU0IzWldKemIyTnJaWFJEYjI1MGNtOXNiR1Z5SUZSb1pTQmpiMjUwY205c2JHVnlJSFJ2SUhObGRIVndJSFJvWlhObElHaGhibVJzWlhKeklHOXVMbHh1SUNBZ0lDQXFMMXh1SUNBZ0lITjBZWFJwWXlCelpYUjFjRVJsWm1GMWJIUklZVzVrYkdWeWN5aDNaV0p6YjJOclpYUkRiMjUwY205c2JHVnlPaUJYWldKVGIyTnJaWFJEYjI1MGNtOXNiR1Z5S1NCN1hHNGdJQ0FnSUNBZ0lDOHZJRkJKVGtkY2JpQWdJQ0FnSUNBZ2QyVmljMjlqYTJWMFEyOXVkSEp2Ykd4bGNpNXphV2R1WVd4c2FXNW5VSEp2ZEc5amIyd3VZV1JrVFdWemMyRm5aVWhoYm1Sc1pYSW9YRzRnSUNBZ0lDQWdJQ0FnSUNCTlpYTnpZV2RsVW1WamRsUjVjR1Z6TGxCSlRrY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBb2NHbHVaMUJoZVd4dllXUTZJSE4wY21sdVp5a2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklITmxibVFnYjNWeUlIQnZibWNnY0dGNWJHOWhaQ0JpWVdOcklIUnZJSFJvWlNCemFXZHVZV3hzYVc1bklITmxjblpsY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJSEJ2Ym1kUVlYbHNiMkZrSUQwZ2JtVjNJRTFsYzNOaFoyVlFiMjVuS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnVaWGNnUkdGMFpTZ3BMbWRsZEZScGJXVW9LVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2t1Y0dGNWJHOWhaQ2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUV4dloyZGxjaTVNYjJjb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRXh2WjJkbGNpNUhaWFJUZEdGamExUnlZV05sS0Nrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRTFsYzNOaFoyVlNaV04yVkhsd1pYTXVVRWxPUnlBcklDYzZJQ2NnS3lCd2FXNW5VR0Y1Ykc5aFpDeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2QyVmljMjlqYTJWMFEyOXVkSEp2Ykd4bGNpNTNaV0pUYjJOclpYUXVjMlZ1WkNod2IyNW5VR0Y1Ykc5aFpDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDazdYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1EwOU9Sa2xIWEc0Z0lDQWdJQ0FnSUhkbFluTnZZMnRsZEVOdmJuUnliMnhzWlhJdWMybG5ibUZzYkdsdVoxQnliM1J2WTI5c0xtRmtaRTFsYzNOaFoyVklZVzVrYkdWeUtGeHVJQ0FnSUNBZ0lDQWdJQ0FnVFdWemMyRm5aVkpsWTNaVWVYQmxjeTVEVDA1R1NVY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBb1kyOXVabWxuVUdGNWJHOWhaRG9nYzNSeWFXNW5LU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1RHOW5aMlZ5TGt4dlp5aE1iMmRuWlhJdVIyVjBVM1JoWTJ0VWNtRmpaU2dwTENCTlpYTnpZV2RsVW1WamRsUjVjR1Z6TGtOUFRrWkpSeXdnTmlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnWTI5dVptbG5PaUJOWlhOellXZGxRMjl1Wm1sbklEMGdTbE5QVGk1d1lYSnpaU2hqYjI1bWFXZFFZWGxzYjJGa0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjNaV0p6YjJOclpYUkRiMjUwY205c2JHVnlMbTl1UTI5dVptbG5LR052Ym1acFp5azdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDazdYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1UxUlNSVUZOUlZKZlRFbFRWRnh1SUNBZ0lDQWdJQ0IzWldKemIyTnJaWFJEYjI1MGNtOXNiR1Z5TG5OcFoyNWhiR3hwYm1kUWNtOTBiMk52YkM1aFpHUk5aWE56WVdkbFNHRnVaR3hsY2loY2JpQWdJQ0FnSUNBZ0lDQWdJRTFsYzNOaFoyVlNaV04yVkhsd1pYTXVVMVJTUlVGTlJWSmZURWxUVkN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ2hzYVhOMFVHRjViRzloWkRvZ2MzUnlhVzVuS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdURzluWjJWeUxreHZaeWhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1RHOW5aMlZ5TGtkbGRGTjBZV05yVkhKaFkyVW9LU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1RXVnpjMkZuWlZKbFkzWlVlWEJsY3k1VFZGSkZRVTFGVWw5TVNWTlVMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBMlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCemRISmxZVzFsY2t4cGMzUTZJRTFsYzNOaFoyVlRkSEpsWVcxbGNreHBjM1FnUFZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQktVMDlPTG5CaGNuTmxLR3hwYzNSUVlYbHNiMkZrS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCM1pXSnpiMk5yWlhSRGIyNTBjbTlzYkdWeUxtOXVVM1J5WldGdFpYSk1hWE4wS0hOMGNtVmhiV1Z5VEdsemRDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDazdYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1VFeEJXVVZTWDBOUFZVNVVYRzRnSUNBZ0lDQWdJSGRsWW5OdlkydGxkRU52Ym5SeWIyeHNaWEl1YzJsbmJtRnNiR2x1WjFCeWIzUnZZMjlzTG1Ga1pFMWxjM05oWjJWSVlXNWtiR1Z5S0Z4dUlDQWdJQ0FnSUNBZ0lDQWdUV1Z6YzJGblpWSmxZM1pVZVhCbGN5NVFURUZaUlZKZlEwOVZUbFFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQW9jR3hoZVdWeVEyOTFiblJRWVhsc2IyRmtPaUJ6ZEhKcGJtY3BJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCTWIyZG5aWEl1VEc5bktGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JNYjJkblpYSXVSMlYwVTNSaFkydFVjbUZqWlNncExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JOWlhOellXZGxVbVZqZGxSNWNHVnpMbEJNUVZsRlVsOURUMVZPVkN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdObHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdjR3hoZVdWeVEyOTFiblE2SUUxbGMzTmhaMlZRYkdGNVpYSkRiM1Z1ZENBOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRXBUVDA0dWNHRnljMlVvY0d4aGVXVnlRMjkxYm5SUVlYbHNiMkZrS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCTWIyZG5aWEl1VEc5bktGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JNYjJkblpYSXVSMlYwVTNSaFkydFVjbUZqWlNncExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuVUd4aGVXVnlJRU52ZFc1ME9pQW5JQ3NnY0d4aGVXVnlRMjkxYm5RdVkyOTFiblFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEWmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQXBPMXh1WEc0Z0lDQWdJQ0FnSUM4dklFRk9VMWRGVWx4dUlDQWdJQ0FnSUNCM1pXSnpiMk5yWlhSRGIyNTBjbTlzYkdWeUxuTnBaMjVoYkd4cGJtZFFjbTkwYjJOdmJDNWhaR1JOWlhOellXZGxTR0Z1Wkd4bGNpaGNiaUFnSUNBZ0lDQWdJQ0FnSUUxbGMzTmhaMlZTWldOMlZIbHdaWE11UVU1VFYwVlNMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0tHRnVjM2RsY2xCaGVXeHZZV1E2SUhOMGNtbHVaeWtnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJSE5sYm1RZ2IzVnlJSEJ2Ym1jZ2NHRjViRzloWkNCaVlXTnJJSFJ2SUhSb1pTQnphV2R1WVd4c2FXNW5JSE5sY25abGNseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lFeHZaMmRsY2k1TWIyY29URzluWjJWeUxrZGxkRk4wWVdOclZISmhZMlVvS1N3Z1RXVnpjMkZuWlZKbFkzWlVlWEJsY3k1QlRsTlhSVklzSURZcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUdGdWMzZGxjam9nVFdWemMyRm5aVUZ1YzNkbGNpQTlJRXBUVDA0dWNHRnljMlVvWVc1emQyVnlVR0Y1Ykc5aFpDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkMlZpYzI5amEyVjBRMjl1ZEhKdmJHeGxjaTV2YmxkbFlsSjBZMEZ1YzNkbGNpaGhibk4zWlhJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBcE8xeHVYRzRnSUNBZ0lDQWdJQzh2SUU5R1JrVlNYRzRnSUNBZ0lDQWdJSGRsWW5OdlkydGxkRU52Ym5SeWIyeHNaWEl1YzJsbmJtRnNiR2x1WjFCeWIzUnZZMjlzTG1Ga1pFMWxjM05oWjJWSVlXNWtiR1Z5S0Z4dUlDQWdJQ0FnSUNBZ0lDQWdUV1Z6YzJGblpWSmxZM1pVZVhCbGN5NVBSa1pGVWl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ2h2Wm1abGNsQmhlV3h2WVdRNklITjBjbWx1WnlrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUhObGJtUWdiM1Z5SUhCdmJtY2djR0Y1Ykc5aFpDQmlZV05ySUhSdklIUm9aU0J6YVdkdVlXeHNhVzVuSUhObGNuWmxjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRXh2WjJkbGNpNU1iMmNvVEc5bloyVnlMa2RsZEZOMFlXTnJWSEpoWTJVb0tTd2dUV1Z6YzJGblpWSmxZM1pVZVhCbGN5NVBSa1pGVWl3Z05pazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2IyWm1aWEk2SUUxbGMzTmhaMlZQWm1abGNpQTlJRXBUVDA0dWNHRnljMlVvYjJabVpYSlFZWGxzYjJGa0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjNaV0p6YjJOclpYUkRiMjUwY205c2JHVnlMbTl1VjJWaVVuUmpUMlptWlhJb2IyWm1aWElwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FwTzF4dVhHNGdJQ0FnSUNBZ0lDOHZJRWxEUlNCRFFVNUVTVVJCVkVWY2JpQWdJQ0FnSUNBZ2QyVmljMjlqYTJWMFEyOXVkSEp2Ykd4bGNpNXphV2R1WVd4c2FXNW5VSEp2ZEc5amIyd3VZV1JrVFdWemMyRm5aVWhoYm1Sc1pYSW9YRzRnSUNBZ0lDQWdJQ0FnSUNCTlpYTnpZV2RsVW1WamRsUjVjR1Z6TGtsRFJWOURRVTVFU1VSQlZFVXNYRzRnSUNBZ0lDQWdJQ0FnSUNBb2FXTmxRMkZ1Wkdsa1lYUmxVR0Y1Ykc5aFpEb2djM1J5YVc1bktTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2MyVnVaQ0J2ZFhJZ2NHOXVaeUJ3WVhsc2IyRmtJR0poWTJzZ2RHOGdkR2hsSUhOcFoyNWhiR3hwYm1jZ2MyVnlkbVZ5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVEc5bloyVnlMa3h2WnloY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdURzluWjJWeUxrZGxkRk4wWVdOclZISmhZMlVvS1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdUV1Z6YzJGblpWSmxZM1pVZVhCbGN5NUpRMFZmUTBGT1JFbEVRVlJGTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQTJYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQnBZMlZEWVc1a2FXUmhkR1U2SUUxbGMzTmhaMlZKWTJWRFlXNWthV1JoZEdVZ1BWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JLVTA5T0xuQmhjbk5sS0dsalpVTmhibVJwWkdGMFpWQmhlV3h2WVdRcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIZGxZbk52WTJ0bGRFTnZiblJ5YjJ4c1pYSXViMjVKWTJWRFlXNWthV1JoZEdVb2FXTmxRMkZ1Wkdsa1lYUmxMbU5oYm1ScFpHRjBaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ2s3WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdWMEZTVGtsT1IxeHVJQ0FnSUNBZ0lDQjNaV0p6YjJOclpYUkRiMjUwY205c2JHVnlMbk5wWjI1aGJHeHBibWRRY205MGIyTnZiQzVoWkdSTlpYTnpZV2RsU0dGdVpHeGxjaWhjYmlBZ0lDQWdJQ0FnSUNBZ0lFMWxjM05oWjJWU1pXTjJWSGx3WlhNdVYwRlNUa2xPUnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ2gzWVhKdWFXNW5VR0Y1Ykc5aFpEb2djM1J5YVc1bktTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVEc5bloyVnlMbGRoY201cGJtY29YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUV4dloyZGxjaTVIWlhSVGRHRmphMVJ5WVdObEtDa3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdCWFlYSnVhVzVuSUhKbFkyVnBkbVZrT2lBa2UzZGhjbTVwYm1kUVlYbHNiMkZrZldCY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBcE8xeHVYRzRnSUNBZ0lDQWdJQzh2SUZCRlJWSWdSRUZVUVNCRFNFRk9Ua1ZNVTF4dUlDQWdJQ0FnSUNCM1pXSnpiMk5yWlhSRGIyNTBjbTlzYkdWeUxuTnBaMjVoYkd4cGJtZFFjbTkwYjJOdmJDNWhaR1JOWlhOellXZGxTR0Z1Wkd4bGNpaGNiaUFnSUNBZ0lDQWdJQ0FnSUUxbGMzTmhaMlZTWldOMlZIbHdaWE11VUVWRlVsOUVRVlJCWDBOSVFVNU9SVXhUTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdLSEJsWlhKRVlYUmhRMmhoYm01bGJITlFZWGxzYjJGa09pQnpkSEpwYm1jcElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JNYjJkblpYSXVURzluS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQk1iMmRuWlhJdVIyVjBVM1JoWTJ0VWNtRmpaU2dwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQk5aWE56WVdkbFVtVmpkbFI1Y0dWekxsQkZSVkpmUkVGVVFWOURTRUZPVGtWTVV5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnY0dWbGNrUmhkR0ZEYUdGdWJtVnNjem9nVFdWemMyRm5aVkJsWlhKRVlYUmhRMmhoYm01bGJITWdQU0JLVTA5T0xuQmhjbk5sS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQndaV1Z5UkdGMFlVTm9ZVzV1Wld4elVHRjViRzloWkZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2QyVmljMjlqYTJWMFEyOXVkSEp2Ykd4bGNpNXZibGRsWWxKMFkxQmxaWEpFWVhSaFEyaGhibTVsYkhNb2NHVmxja1JoZEdGRGFHRnVibVZzY3lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNrN1hHNGdJQ0FnZlZ4dWZWeHVJaXdpTHk4Z1EyOXdlWEpwWjJoMElFVndhV01nUjJGdFpYTXNJRWx1WXk0Z1FXeHNJRkpwWjJoMGN5QlNaWE5sY25abFpDNWNibHh1YVcxd2IzSjBJSHNnVEc5bloyVnlJSDBnWm5KdmJTQW5MaTR2VEc5bloyVnlMMHh2WjJkbGNpYzdYRzVwYlhCdmNuUWdLaUJoY3lCTlpYTnpZV2RsVW1WalpXbDJaU0JtY205dElDY3VMMDFsYzNOaFoyVlNaV05sYVhabEp6dGNibWx0Y0c5eWRDQXFJR0Z6SUUxbGMzTmhaMlZUWlc1a0lHWnliMjBnSnk0dlRXVnpjMkZuWlZObGJtUW5PMXh1YVcxd2IzSjBJSHNnVTJsbmJtRnNiR2x1WjFCeWIzUnZZMjlzSUgwZ1puSnZiU0FuTGk5VGFXZHVZV3hzYVc1blVISnZkRzlqYjJ3bk8xeHVYRzR2THlCa1pXTnNZWEpsSUhSb1pTQnVaWGNnYldWMGFHOWtJR1p2Y2lCMGFHVWdkMlZpYzI5amEyVjBJR2x1ZEdWeVptRmpaVnh1WkdWamJHRnlaU0JuYkc5aVlXd2dlMXh1SUNBZ0lHbHVkR1Z5Wm1GalpTQlhaV0pUYjJOclpYUWdlMXh1SUNBZ0lDQWdJQ0J2Ym0xbGMzTmhaMlZpYVc1aGNuay9LR1YyWlc1MFB6b2dUV1Z6YzJGblpVVjJaVzUwS1RvZ2RtOXBaRHRjYmlBZ0lDQjlYRzU5WEc1Y2JpOHFLbHh1SUNvZ1ZHaGxJR052Ym5SeWIyeHNaWElnWm05eUlIUm9aU0JYWldKVGIyTnJaWFFnWVc1a0lHRnNiQ0JoYzNOdlkybGhkR1ZrSUcxbGRHaHZaSE5jYmlBcUwxeHVaWGh3YjNKMElHTnNZWE56SUZkbFlsTnZZMnRsZEVOdmJuUnliMnhzWlhJZ2UxeHVJQ0FnSUZkVFgwOVFSVTVmVTFSQlZFVWdQU0F4TzF4dUlDQWdJSGRsWWxOdlkydGxkRG9nVjJWaVUyOWphMlYwTzF4dUlDQWdJRzl1VDNCbGJqb2dSWFpsYm5SVVlYSm5aWFE3WEc0Z0lDQWdiMjVEYkc5elpUb2dSWFpsYm5SVVlYSm5aWFE3WEc0Z0lDQWdjMmxuYm1Gc2JHbHVaMUJ5YjNSdlkyOXNPaUJUYVdkdVlXeHNhVzVuVUhKdmRHOWpiMnc3WEc1Y2JpQWdJQ0JqYjI1emRISjFZM1J2Y2lncElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1dmJrOXdaVzRnUFNCdVpYY2dSWFpsYm5SVVlYSm5aWFFvS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV2YmtOc2IzTmxJRDBnYm1WM0lFVjJaVzUwVkdGeVoyVjBLQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjMmxuYm1Gc2JHbHVaMUJ5YjNSdlkyOXNJRDBnYm1WM0lGTnBaMjVoYkd4cGJtZFFjbTkwYjJOdmJDZ3BPMXh1SUNBZ0lDQWdJQ0JUYVdkdVlXeHNhVzVuVUhKdmRHOWpiMnd1YzJWMGRYQkVaV1poZFd4MFNHRnVaR3hsY25Nb2RHaHBjeWs3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUTI5dWJtVmpkQ0IwYnlCMGFHVWdjMmxuYm1Gc2FXNW5JSE5sY25abGNseHVJQ0FnSUNBcUlFQndZWEpoYlNCamIyNXVaV04wYVc5dVZWSk1JQzBnVkdobElFRmtaSEpsYzNNZ2IyWWdkR2hsSUhOcFoyNWhiR2x1WnlCelpYSjJaWEpjYmlBZ0lDQWdLaUJBY21WMGRYSnVjeUF0SUVsbUlIUm9aWEpsSUdseklHRWdZMjl1Ym1WamRHbHZibHh1SUNBZ0lDQXFMMXh1SUNBZ0lHTnZibTVsWTNRb1kyOXVibVZqZEdsdmJsVlNURG9nYzNSeWFXNW5LVG9nWW05dmJHVmhiaUI3WEc0Z0lDQWdJQ0FnSUV4dloyZGxjaTVNYjJjb1RHOW5aMlZ5TGtkbGRGTjBZV05yVkhKaFkyVW9LU3dnWTI5dWJtVmpkR2x2YmxWU1RDd2dOaWs3WEc0Z0lDQWdJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbmRsWWxOdlkydGxkQ0E5SUc1bGR5QlhaV0pUYjJOclpYUW9ZMjl1Ym1WamRHbHZibFZTVENrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuZGxZbE52WTJ0bGRDNXZibTl3Wlc0Z1BTQW9aWFpsYm5RcElEMCtJSFJvYVhNdWFHRnVaR3hsVDI1UGNHVnVLR1YyWlc1MEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVkMlZpVTI5amEyVjBMbTl1WlhKeWIzSWdQU0FvS1NBOVBpQjBhR2x6TG1oaGJtUnNaVTl1UlhKeWIzSW9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11ZDJWaVUyOWphMlYwTG05dVkyeHZjMlVnUFNBb1pYWmxiblFwSUQwK0lIUm9hWE11YUdGdVpHeGxUMjVEYkc5elpTaGxkbVZ1ZENrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuZGxZbE52WTJ0bGRDNXZibTFsYzNOaFoyVWdQU0FvWlhabGJuUXBJRDArSUhSb2FYTXVhR0Z1Wkd4bFQyNU5aWE56WVdkbEtHVjJaVzUwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWQyVmlVMjlqYTJWMExtOXViV1Z6YzJGblpXSnBibUZ5ZVNBOUlDaGxkbVZ1ZENrZ1BUNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1oaGJtUnNaVTl1VFdWemMyRm5aVUpwYm1GeWVTaGxkbVZ1ZENrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ2ZTQmpZWFJqYUNBb1pYSnliM0lwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJRXh2WjJkbGNpNUZjbkp2Y2lobGNuSnZjaXdnWlhKeWIzSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nU0dGdVpHeGxjeUIzYUdGMElHaGhjSEJsYm5NZ2QyaGxiaUJoSUcxbGMzTmhaMlVnYVhNZ2NtVmpaV2wyWldRZ2FXNGdZbWx1WVhKNUlHWnZjbTFjYmlBZ0lDQWdLaUJBY0dGeVlXMGdaWFpsYm5RZ0xTQk5aWE56WVdkbElGSmxZMlZwZG1Wa1hHNGdJQ0FnSUNvdlhHNGdJQ0FnYUdGdVpHeGxUMjVOWlhOellXZGxRbWx1WVhKNUtHVjJaVzUwT2lCTlpYTnpZV2RsUlhabGJuUXBJSHRjYmlBZ0lDQWdJQ0FnTHk4Z2FXWWdkR2hsSUdWMlpXNTBJR2x6SUdWdGNIUjVJSEpsZEhWeWJseHVJQ0FnSUNBZ0lDQnBaaUFvSVdWMlpXNTBJSHg4SUNGbGRtVnVkQzVrWVhSaEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQXZMeUJvWVc1a2JHVWdkR2hsSUdKcGJtRnllU0JoYm1RZ2RHaGxiaUJvWVc1a2JHVWdkR2hsSUcxbGMzTmhaMlZjYmlBZ0lDQWdJQ0FnWlhabGJuUXVaR0YwWVZ4dUlDQWdJQ0FnSUNBZ0lDQWdMblJsZUhRb0tWeHVJQ0FnSUNBZ0lDQWdJQ0FnTG5Sb1pXNG9LRzFsYzNOaFoyVlRkSEpwYm1jNklIVnVhMjV2ZDI0cElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCaWRXbHNaQ0JoSUc1bGR5QnRaWE56WVdkbFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnWTI5dWMzUnlkV04wWldSTlpYTnpZV2RsSUQwZ2JtVjNJRTFsYzNOaFoyVkZkbVZ1ZENoY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKMjFsYzNOaFoyVkdjbTl0UW1sdVlYSjVKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHRjBZVG9nYldWemMyRm5aVk4wY21sdVoxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJSE5sYm1RZ2RHaGxJRzVsZHlCemRISnBibWRwWm1sbFpDQmxkbVZ1ZENCaVlXTnJJR2x1ZEc4Z1lHOXViV1Z6YzJGblpXQmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1oaGJtUnNaVTl1VFdWemMyRm5aU2hqYjI1emRISjFZM1JsWkUxbGMzTmhaMlVwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDNWpZWFJqYUNnb1pYSnliM0k2SUVWeWNtOXlLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1RHOW5aMlZ5TGtWeWNtOXlLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCTWIyZG5aWEl1UjJWMFUzUmhZMnRVY21GalpTZ3BMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZ1JtRnBiR1ZrSUhSdklIQmhjbk5sSUdKcGJtRnllU0JpYkc5aUlHWnliMjBnZDJWaWMyOWphMlYwTENCeVpXRnpiMjQ2SUNSN1pYSnliM0o5WUZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCSVlXNWtiR1Z6SUhkb1lYUWdhR0Z3Y0dWdWN5QjNhR1Z1SUdFZ2JXVnpjMkZuWlNCcGN5QnlaV05sYVhabFpGeHVJQ0FnSUNBcUlFQndZWEpoYlNCbGRtVnVkQ0F0SUUxbGMzTmhaMlVnVW1WalpXbDJaV1JjYmlBZ0lDQWdLaTljYmlBZ0lDQm9ZVzVrYkdWUGJrMWxjM05oWjJVb1pYWmxiblE2SUUxbGMzTmhaMlZGZG1WdWRDa2dlMXh1SUNBZ0lDQWdJQ0F2THlCRGFHVmpheUJwWmlCM1pXSnpiMk5yWlhRZ2JXVnpjMkZuWlNCcGN5QmlhVzVoY25rc0lHbG1JSE52TENCemRISnBibWRwWm5rZ2FYUXVYRzRnSUNBZ0lDQWdJR2xtSUNobGRtVnVkQzVrWVhSaElDWW1JR1YyWlc1MExtUmhkR0VnYVc1emRHRnVZMlZ2WmlCQ2JHOWlLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1oaGJtUnNaVTl1VFdWemMyRm5aVUpwYm1GeWVTaGxkbVZ1ZENrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCamIyNXpkQ0J0WlhOellXZGxPaUJOWlhOellXZGxVbVZqWldsMlpTNU5aWE56WVdkbFVtVmpkaUE5SUVwVFQwNHVjR0Z5YzJVb1pYWmxiblF1WkdGMFlTazdYRzRnSUNBZ0lDQWdJRXh2WjJkbGNpNU1iMmNvWEc0Z0lDQWdJQ0FnSUNBZ0lDQk1iMmRuWlhJdVIyVjBVM1JoWTJ0VWNtRmpaU2dwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdKM0psWTJWcGRtVmtJRDArSUZ4Y2JpY2dLMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRXBUVDA0dWMzUnlhVzVuYVdaNUtFcFRUMDR1Y0dGeWMyVW9aWFpsYm5RdVpHRjBZU2tzSUhWdVpHVm1hVzVsWkN3Z05Da3NYRzRnSUNBZ0lDQWdJQ0FnSUNBMlhHNGdJQ0FnSUNBZ0lDazdYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1UyVnVaQ0IwYnlCdmRYSWdjMmxuYm1Gc2JHbHVaeUJ3Y205MGIyTnZiQ0IwYnlCb1lXNWtiR1VnZEdobElHbHVZMjl0YVc1bklHMWxjM05oWjJWY2JpQWdJQ0FnSUNBZ2RHaHBjeTV6YVdkdVlXeHNhVzVuVUhKdmRHOWpiMnd1YUdGdVpHeGxUV1Z6YzJGblpTaHRaWE56WVdkbExuUjVjR1VzSUdWMlpXNTBMbVJoZEdFcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFaGhibVJzWlhNZ2QyaGxiaUIwYUdVZ1YyVmljMjlqYTJWMElHbHpJRzl3Wlc1bFpGeHVJQ0FnSUNBcUlFQndZWEpoYlNCbGRtVnVkQ0F0SUU1dmRDQlZjMlZrWEc0Z0lDQWdJQ292WEc0Z0lDQWdMeThnWlhOc2FXNTBMV1JwYzJGaWJHVXRibVY0ZEMxc2FXNWxJRUIwZVhCbGMyTnlhWEIwTFdWemJHbHVkQzl1YnkxMWJuVnpaV1F0ZG1GeWMxeHVJQ0FnSUdoaGJtUnNaVTl1VDNCbGJpaGxkbVZ1ZERvZ1JYWmxiblFwSUh0Y2JpQWdJQ0FnSUNBZ1RHOW5aMlZ5TGt4dlp5aGNiaUFnSUNBZ0lDQWdJQ0FnSUV4dloyZGxjaTVIWlhSVGRHRmphMVJ5WVdObEtDa3NYRzRnSUNBZ0lDQWdJQ0FnSUNBblEyOXVibVZqZEdWa0lIUnZJSFJvWlNCemFXZHVZV3hzYVc1bklITmxjblpsY2lCMmFXRWdWMlZpVTI5amEyVjBKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lEWmNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXZiazl3Wlc0dVpHbHpjR0YwWTJoRmRtVnVkQ2h1WlhjZ1JYWmxiblFvSjI5d1pXNG5LU2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nU0dGdVpHeGxjeUIzYUdWdUlIUm9aWEpsSUdseklHRnVJR1Z5Y205eUlHOXVJSFJvWlNCM1pXSnpiMk5yWlhSY2JpQWdJQ0FnS2lCQWNHRnlZVzBnWlhabGJuUWdMU0JGY25KdmNpQlFZWGxzYjJGa1hHNGdJQ0FnSUNvdlhHNGdJQ0FnYUdGdVpHeGxUMjVGY25KdmNpZ3BJSHRjYmlBZ0lDQWdJQ0FnVEc5bloyVnlMa1Z5Y205eUtFeHZaMmRsY2k1SFpYUlRkR0ZqYTFSeVlXTmxLQ2tzSUNkWFpXSlRiMk5yWlhRZ1pYSnliM0luS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCSVlXNWtiR1Z6SUhkb1pXNGdkR2hsSUZkbFluTnZZMnRsZENCcGN5QmpiRzl6WldSY2JpQWdJQ0FnS2lCQWNHRnlZVzBnWlhabGJuUWdMU0JEYkc5elpTQkZkbVZ1ZEZ4dUlDQWdJQ0FxTDF4dUlDQWdJR2hoYm1Sc1pVOXVRMnh2YzJVb1pYWmxiblE2SUVOc2IzTmxSWFpsYm5RcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1dmJsZGxZbE52WTJ0bGRFOXVZMnh2YzJWUGRtVnliR0Y1VFdWemMyRm5aU2hsZG1WdWRDazdYRzRnSUNBZ0lDQWdJRXh2WjJkbGNpNU1iMmNvWEc0Z0lDQWdJQ0FnSUNBZ0lDQk1iMmRuWlhJdVIyVjBVM1JoWTJ0VWNtRmpaU2dwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdKMFJwYzJOdmJtNWxZM1JsWkNCMGJ5QjBhR1VnYzJsbmJtRnNiR2x1WnlCelpYSjJaWElnZG1saElGZGxZbE52WTJ0bGREb2dKeUFyWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnU2xOUFRpNXpkSEpwYm1kcFpua29aWFpsYm5RdVkyOWtaU2tnSzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNjZ0xTQW5JQ3RjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsZG1WdWRDNXlaV0Z6YjI1Y2JpQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1dmJrTnNiM05sTG1ScGMzQmhkR05vUlhabGJuUW9ibVYzSUVWMlpXNTBLQ2RqYkc5elpTY3BLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnlaWEYxWlhOMFUzUnlaV0Z0WlhKTWFYTjBLQ2tnZTF4dUlDQWdJQ0FnSUNCamIyNXpkQ0J3WVhsc2IyRmtJRDBnYm1WM0lFMWxjM05oWjJWVFpXNWtMazFsYzNOaFoyVk1hWE4wVTNSeVpXRnRaWEp6S0NrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11ZDJWaVUyOWphMlYwTG5ObGJtUW9jR0Y1Ykc5aFpDNXdZWGxzYjJGa0tDa3BPMXh1SUNBZ0lIMWNibHh1SUNBZ0lITmxibVJUZFdKelkzSnBZbVVvYzNSeVpXRnRaWEpwWkRvZ2MzUnlhVzVuS1NCN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUhCaGVXeHZZV1FnUFNCdVpYY2dUV1Z6YzJGblpWTmxibVF1VFdWemMyRm5aVk4xWW5OamNtbGlaU2h6ZEhKbFlXMWxjbWxrS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTUzWldKVGIyTnJaWFF1YzJWdVpDaHdZWGxzYjJGa0xuQmhlV3h2WVdRb0tTazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2MyVnVaRlZ1YzNWaWMyTnlhV0psS0NrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCd1lYbHNiMkZrSUQwZ2JtVjNJRTFsYzNOaFoyVlRaVzVrTGsxbGMzTmhaMlZWYm5OMVluTmpjbWxpWlNncE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5kbFlsTnZZMnRsZEM1elpXNWtLSEJoZVd4dllXUXVjR0Y1Ykc5aFpDZ3BLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnpaVzVrVjJWaVVuUmpUMlptWlhJb2IyWm1aWEk2SUZKVVExTmxjM05wYjI1RVpYTmpjbWx3ZEdsdmJrbHVhWFFwSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnY0dGNWJHOWhaQ0E5SUc1bGR5Qk5aWE56WVdkbFUyVnVaQzVOWlhOellXZGxWMlZpVWxSRFQyWm1aWElvYjJabVpYSXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuZGxZbE52WTJ0bGRDNXpaVzVrS0hCaGVXeHZZV1F1Y0dGNWJHOWhaQ2dwS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J6Wlc1a1YyVmlVblJqUVc1emQyVnlLR0Z1YzNkbGNqb2dVbFJEVTJWemMybHZia1JsYzJOeWFYQjBhVzl1U1c1cGRDa2dlMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQndZWGxzYjJGa0lEMGdibVYzSUUxbGMzTmhaMlZUWlc1a0xrMWxjM05oWjJWWFpXSlNWRU5CYm5OM1pYSW9ZVzV6ZDJWeUtUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1M1pXSlRiMk5yWlhRdWMyVnVaQ2h3WVhsc2IyRmtMbkJoZVd4dllXUW9LU2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjMlZ1WkZkbFlsSjBZMFJoZEdGamFHRnVibVZzVW1WeGRXVnpkQ2dwSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnY0dGNWJHOWhaQ0E5SUc1bGR5Qk5aWE56WVdkbFUyVnVaQzVOWlhOellXZGxWMlZpVWxSRFJHRjBZV05vWVc1dVpXeFNaWEYxWlhOMEtDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdWQyVmlVMjlqYTJWMExuTmxibVFvY0dGNWJHOWhaQzV3WVhsc2IyRmtLQ2twTzF4dUlDQWdJSDFjYmx4dUlDQWdJSE5sYm1SVFJsVlNaV04yUkdGMFlVTm9ZVzV1Wld4U1pXRmtlU2dwSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnY0dGNWJHOWhaQ0E5SUc1bGR5Qk5aWE56WVdkbFUyVnVaQzVOWlhOellXZGxVMFpWVW1WamRrUmhkR0ZEYUdGdWJtVnNVbVZoWkhrb0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1M1pXSlRiMk5yWlhRdWMyVnVaQ2h3WVhsc2IyRmtMbkJoZVd4dllXUW9LU2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVTJWdVpITWdZVzRnVWxSRElFbGpaU0JEWVc1a2FXUmhkR1VnZEc4Z2RHaGxJRk5sY25abGNseHVJQ0FnSUNBcUlFQndZWEpoYlNCallXNWthV1JoZEdVZ0xTQlNWRU1nU1dObElFTmhibVJwWkdGMFpWeHVJQ0FnSUNBcUwxeHVJQ0FnSUhObGJtUkpZMlZEWVc1a2FXUmhkR1VvWTJGdVpHbGtZWFJsT2lCU1ZFTkpZMlZEWVc1a2FXUmhkR1VwSUh0Y2JpQWdJQ0FnSUNBZ1RHOW5aMlZ5TGt4dlp5aE1iMmRuWlhJdVIyVjBVM1JoWTJ0VWNtRmpaU2dwTENBblUyVnVaR2x1WnlCSlkyVWdRMkZ1Wkdsa1lYUmxKeWs3WEc0Z0lDQWdJQ0FnSUdsbUlDaGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVkMlZpVTI5amEyVjBJQ1ltWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5kbFlsTnZZMnRsZEM1eVpXRmtlVk4wWVhSbElEMDlQU0IwYUdsekxsZFRYMDlRUlU1ZlUxUkJWRVZjYmlBZ0lDQWdJQ0FnS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2TDNkekxuTmxibVFvU2xOUFRpNXpkSEpwYm1kcFpua29leUIwZVhCbE9pQW5hV05sUTJGdVpHbGtZWFJsSnl3Z1kyRnVaR2xrWVhSbE9pQmpZVzVrYVdSaGRHVWdmU2twTzF4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ1NXTmxRMkZ1Wkdsa1lYUmxJRDBnYm1WM0lFMWxjM05oWjJWVFpXNWtMazFsYzNOaFoyVkpZMlZEWVc1a2FXUmhkR1VvWTJGdVpHbGtZWFJsS1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NTNaV0pUYjJOclpYUXVjMlZ1WkNoSlkyVkRZVzVrYVdSaGRHVXVjR0Y1Ykc5aFpDZ3BLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVOc2IzTmxjeUIwYUdVZ1YyVmljMjlqYTJWMElHTnZibTVsWTNScGIyNWNiaUFnSUNBZ0tpOWNiaUFnSUNCamJHOXpaU2dwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTUzWldKVGIyTnJaWFEvTG1Oc2IzTmxLQ2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xSUVWMlpXNTBJSFZ6WldRZ1ptOXlJRVJwYzNCc1lYbHBibWNnZDJWaWMyOWphMlYwSUdOc2IzTmxaQ0J0WlhOellXZGxjeUFxTDF4dUlDQWdJQzh2SUdWemJHbHVkQzFrYVhOaFlteGxMVzVsZUhRdGJHbHVaU0JBZEhsd1pYTmpjbWx3ZEMxbGMyeHBiblF2Ym04dGRXNTFjMlZrTFhaaGNuTXNJRUIwZVhCbGMyTnlhWEIwTFdWemJHbHVkQzl1YnkxbGJYQjBlUzFtZFc1amRHbHZibHh1SUNBZ0lHOXVWMlZpVTI5amEyVjBUMjVqYkc5elpVOTJaWEpzWVhsTlpYTnpZV2RsS0dWMlpXNTBPaUJEYkc5elpVVjJaVzUwS1NCN2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dWR2hsSUUxbGMzTmhaMlVnUTI5dWRHRnBibk1nZEdobElIQmhlV3h2WVdRZ2IyWWdkR2hsSUhCbFpYSWdZMjl1Ym1WamRHbHZiaUJ2Y0hScGIyNXpJSFZ6WldRZ1ptOXlJSFJvWlNCU1ZFTWdVR1ZsY2lCb1lXNWtJSE5vWVd0bFhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUcxbGMzTmhaMlZEYjI1bWFXY2dMU0JEYjI1bWFXY2dUV1Z6YzJGblpTQnlaV05sYVhabFpDQm1jbTl0SUdobElITnBaMjVoYkdsdVp5QnpaWEoyWlhKY2JpQWdJQ0FnS2k5Y2JpQWdJQ0F2THlCbGMyeHBiblF0WkdsellXSnNaUzF1WlhoMExXeHBibVVnUUhSNWNHVnpZM0pwY0hRdFpYTnNhVzUwTDI1dkxYVnVkWE5sWkMxMllYSnpMQ0JBZEhsd1pYTmpjbWx3ZEMxbGMyeHBiblF2Ym04dFpXMXdkSGt0Wm5WdVkzUnBiMjVjYmlBZ0lDQnZia052Ym1acFp5aHRaWE56WVdkbFEyOXVabWxuT2lCTlpYTnpZV2RsVW1WalpXbDJaUzVOWlhOellXZGxRMjl1Wm1sbktTQjdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVkdobElFMWxjM05oWjJVZ1EyOXVkR0ZwYm5NZ2RHaGxJSEJoZVd4dllXUWdiMllnZEdobElIQmxaWElnWTI5dWJtVmpkR2x2YmlCdmNIUnBiMjV6SUhWelpXUWdabTl5SUhSb1pTQlNWRU1nVUdWbGNpQm9ZVzVrSUhOb1lXdGxYRzRnSUNBZ0lDb2dRSEJoY21GdElHMWxjM05oWjJWRGIyNW1hV2NnTFNCRGIyNW1hV2NnVFdWemMyRm5aU0J5WldObGFYWmxaQ0JtY205dElHaGxJSE5wWjI1aGJHbHVaeUJ6WlhKMlpYSmNiaUFnSUNBZ0tpOWNiaUFnSUNBdkx5QmxjMnhwYm5RdFpHbHpZV0pzWlMxdVpYaDBMV3hwYm1VZ1FIUjVjR1Z6WTNKcGNIUXRaWE5zYVc1MEwyNXZMWFZ1ZFhObFpDMTJZWEp6TENCQWRIbHdaWE5qY21sd2RDMWxjMnhwYm5RdmJtOHRaVzF3ZEhrdFpuVnVZM1JwYjI1Y2JpQWdJQ0J2YmxOMGNtVmhiV1Z5VEdsemRDaHRaWE56WVdkbFUzUnlaV0Z0WlhKTWFYTjBPaUJOWlhOellXZGxVbVZqWldsMlpTNU5aWE56WVdkbFUzUnlaV0Z0WlhKTWFYTjBLU0I3ZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUdsalpVTmhibVJwWkdGMFpTQXRJRWxqWlNCRFlXNWthV1JoZEdVZ2MyVnVkQ0JtY205dElIUm9aU0JUYVdkdVlXeHBibWNnYzJWeWRtVnlJSE5sY25abGNpZHpJRkpVUXlCb1lXNWtJSE5vWVd0bFhHNGdJQ0FnSUNvdlhHNGdJQ0FnTHk4Z1pYTnNhVzUwTFdScGMyRmliR1V0Ym1WNGRDMXNhVzVsSUVCMGVYQmxjMk55YVhCMExXVnpiR2x1ZEM5dWJ5MTFiblZ6WldRdGRtRnljeXdnUUhSNWNHVnpZM0pwY0hRdFpYTnNhVzUwTDI1dkxXVnRjSFI1TFdaMWJtTjBhVzl1WEc0Z0lDQWdiMjVKWTJWRFlXNWthV1JoZEdVb2FXTmxRMkZ1Wkdsa1lYUmxPaUJTVkVOSlkyVkRZVzVrYVdSaGRHVkpibWwwS1NCN2ZWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dSWFpsYm5RZ2FYTWdabWx5WldRZ2QyaGxiaUIwYUdVZ2QyVmljMjlqYTJWMElISmxZMlZwZG1WeklIUm9aU0JoYm5OM1pYSWdabTl5SUhSb1pTQlNWRU1nY0dWbGNpQkRiMjV1WldOMGFXOXVYRzRnSUNBZ0lDb2dRSEJoY21GdElHMWxjM05oWjJWQmJuTjNaWElnTFNCVWFHVWdVbFJESUVGdWMzZGxjaUJ3WVhsc2IyRmtJR1p5YjIwZ2RHaGxJSE5wWjI1aGJHbHVaeUJ6WlhKMlpYSmNiaUFnSUNBZ0tpOWNiaUFnSUNBdkx5QmxjMnhwYm5RdFpHbHpZV0pzWlMxdVpYaDBMV3hwYm1VZ1FIUjVjR1Z6WTNKcGNIUXRaWE5zYVc1MEwyNXZMWFZ1ZFhObFpDMTJZWEp6TENCQWRIbHdaWE5qY21sd2RDMWxjMnhwYm5RdmJtOHRaVzF3ZEhrdFpuVnVZM1JwYjI1Y2JpQWdJQ0J2YmxkbFlsSjBZMEZ1YzNkbGNpaHRaWE56WVdkbFFXNXpkMlZ5T2lCTlpYTnpZV2RsVW1WalpXbDJaUzVOWlhOellXZGxRVzV6ZDJWeUtTQjdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nUlhabGJuUWdhWE1nWm1seVpXUWdkMmhsYmlCMGFHVWdkMlZpYzI5amEyVjBJSEpsWTJWcGRtVnpJSFJvWlNCdlptWmxjaUJtYjNJZ2RHaGxJRkpVUXlCd1pXVnlJRU52Ym01bFkzUnBiMjVjYmlBZ0lDQWdLaUJBY0dGeVlXMGdiV1Z6YzJGblpVOW1abVZ5SUMwZ1ZHaGxJSE5rY0NCdlptWmxjbHh1SUNBZ0lDQXFMMXh1SUNBZ0lDOHZJR1Z6YkdsdWRDMWthWE5oWW14bExXNWxlSFF0YkdsdVpTQkFkSGx3WlhOamNtbHdkQzFsYzJ4cGJuUXZibTh0ZFc1MWMyVmtMWFpoY25Nc0lFQjBlWEJsYzJOeWFYQjBMV1Z6YkdsdWRDOXVieTFsYlhCMGVTMW1kVzVqZEdsdmJseHVJQ0FnSUc5dVYyVmlVblJqVDJabVpYSW9iV1Z6YzJGblpVOW1abVZ5T2lCTlpYTnpZV2RsVW1WalpXbDJaUzVOWlhOellXZGxUMlptWlhJcElIdDlYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJGZG1WdWRDQnBjeUJtYVhKbFpDQjNhR1Z1SUhSb1pTQjNaV0p6YjJOclpYUWdjbVZqWldsMlpYTWdkR2hsSUdSaGRHRWdZMmhoYm01bGJITWdabTl5SUhSb1pTQlNWRU1nY0dWbGNpQkRiMjV1WldOMGFXOXVJR1p5YjIwZ2RHaGxJRk5HVlZ4dUlDQWdJQ0FxSUVCd1lYSmhiU0J0WlhOellXZGxSR0YwWVVOb1lXNXVaV3h6SUMwZ1ZHaGxJR1JoZEdFZ1kyaGhibTVsYkhNZ1pHVjBZV2xzYzF4dUlDQWdJQ0FxTDF4dUlDQWdJQzh2SUdWemJHbHVkQzFrYVhOaFlteGxMVzVsZUhRdGJHbHVaU0JBZEhsd1pYTmpjbWx3ZEMxbGMyeHBiblF2Ym04dGRXNTFjMlZrTFhaaGNuTXNJRUIwZVhCbGMyTnlhWEIwTFdWemJHbHVkQzl1YnkxbGJYQjBlUzFtZFc1amRHbHZibHh1SUNBZ0lHOXVWMlZpVW5SalVHVmxja1JoZEdGRGFHRnVibVZzY3loY2JpQWdJQ0FnSUNBZ2JXVnpjMkZuWlVSaGRHRkRhR0Z1Ym1Wc2N6b2dUV1Z6YzJGblpWSmxZMlZwZG1VdVRXVnpjMkZuWlZCbFpYSkVZWFJoUTJoaGJtNWxiSE5jYmlBZ0lDQXBJSHQ5WEc1OVhHNGlMQ0l2THlCRGIzQjVjbWxuYUhRZ1JYQnBZeUJIWVcxbGN5d2dTVzVqTGlCQmJHd2dVbWxuYUhSeklGSmxjMlZ5ZG1Wa0xseHVYRzVwYlhCdmNuUWdleUJNYjJkblpYSWdmU0JtY205dElDY3VMaTlNYjJkblpYSXZURzluWjJWeUp6dGNibWx0Y0c5eWRDQjdJRmRsWWxKMFkxQnNZWGxsY2tOdmJuUnliMnhzWlhJZ2ZTQm1jbTl0SUNjdUxpOVhaV0pTZEdOUWJHRjVaWEl2VjJWaVVuUmpVR3hoZVdWeVEyOXVkSEp2Ykd4bGNpYzdYRzVwYlhCdmNuUWdleUJYWldKSFRGVjBhV3h6SUgwZ1puSnZiU0FuTGk0dlZYUnBiQzlYWldKSFRGVjBhV3h6Snp0Y2JtbHRjRzl5ZENCN0lFTnZiblJ5YjJ4c1pYSWdmU0JtY205dElDY3VMaTlKYm5CMWRITXZSMkZ0WlhCaFpGUjVjR1Z6Snp0Y2JtbHRjRzl5ZENCN0lGaFNSMkZ0WlhCaFpFTnZiblJ5YjJ4c1pYSWdmU0JtY205dElDY3VMaTlKYm5CMWRITXZXRkpIWVcxbGNHRmtRMjl1ZEhKdmJHeGxjaWM3WEc1cGJYQnZjblFnZXlCWWNrWnlZVzFsUlhabGJuUWdmU0JtY205dElDY3VMaTlWZEdsc0wwVjJaVzUwUlcxcGRIUmxjaWRjYm1sdGNHOXlkQ0I3SUVac1lXZHpJSDBnWm5KdmJTQW5MaTR2Y0dsNFpXeHpkSEpsWVcxcGJtZG1jbTl1ZEdWdVpDYzdYRzVjYm1WNGNHOXlkQ0JqYkdGemN5QlhaV0pZVWtOdmJuUnliMnhzWlhJZ2UxeHVJQ0FnSUhCeWFYWmhkR1VnZUhKVFpYTnphVzl1T2lCWVVsTmxjM05wYjI0N1hHNGdJQ0FnY0hKcGRtRjBaU0I0Y2xKbFpsTndZV05sT2lCWVVsSmxabVZ5Wlc1alpWTndZV05sTzF4dUlDQWdJSEJ5YVhaaGRHVWdaMnc2SUZkbFlrZE1NbEpsYm1SbGNtbHVaME52Ym5SbGVIUTdYRzVjYmlBZ0lDQndjbWwyWVhSbElIQnZjMmwwYVc5dVRHOWpZWFJwYjI0NklHNTFiV0psY2p0Y2JpQWdJQ0J3Y21sMllYUmxJSFJsZUdOdmIzSmtURzlqWVhScGIyNDZJRzUxYldKbGNqdGNiaUFnSUNCd2NtbDJZWFJsSUhKbGMyOXNkWFJwYjI1TWIyTmhkR2x2YmpvZ1YyVmlSMHhWYm1sbWIzSnRURzlqWVhScGIyNDdYRzRnSUNBZ2NISnBkbUYwWlNCdlptWnpaWFJNYjJOaGRHbHZiam9nVjJWaVIweFZibWxtYjNKdFRHOWpZWFJwYjI0N1hHNWNiaUFnSUNCd2NtbDJZWFJsSUhCdmMybDBhVzl1UW5WbVptVnlPaUJYWldKSFRFSjFabVpsY2p0Y2JpQWdJQ0J3Y21sMllYUmxJSFJsZUdOdmIzSmtRblZtWm1WeU9pQlhaV0pIVEVKMVptWmxjanRjYmx4dUlDQWdJSEJ5YVhaaGRHVWdkMlZpVW5SalEyOXVkSEp2Ykd4bGNqb2dWMlZpVW5SalVHeGhlV1Z5UTI5dWRISnZiR3hsY2p0Y2JpQWdJQ0J3Y21sMllYUmxJSGh5UjJGdFpYQmhaRU52Ym5SeWIyeHNaWEk2SUZoU1IyRnRaWEJoWkVOdmJuUnliMnhzWlhJN1hHNGdJQ0FnY0hKcGRtRjBaU0I0Y2tOdmJuUnliMnhzWlhKek9pQkJjbkpoZVR4RGIyNTBjbTlzYkdWeVBqdGNibHh1SUNBZ0lHOXVVMlZ6YzJsdmJsTjBZWEowWldRNklFVjJaVzUwVkdGeVoyVjBPMXh1SUNBZ0lHOXVVMlZ6YzJsdmJrVnVaR1ZrT2lCRmRtVnVkRlJoY21kbGREdGNiaUFnSUNCdmJrWnlZVzFsT2lCRmRtVnVkRlJoY21kbGREdGNibHh1SUNBZ0lHTnZibk4wY25WamRHOXlLSGRsWWxKMFkxQnNZWGxsY2tOdmJuUnliMnhzWlhJNklGZGxZbEowWTFCc1lYbGxja052Ym5SeWIyeHNaWElwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTU0Y2xObGMzTnBiMjRnUFNCdWRXeHNPMXh1SUNBZ0lDQWdJQ0IwYUdsekxuZGxZbEowWTBOdmJuUnliMnhzWlhJZ1BTQjNaV0pTZEdOUWJHRjVaWEpEYjI1MGNtOXNiR1Z5TzF4dUlDQWdJQ0FnSUNCMGFHbHpMbmh5UTI5dWRISnZiR3hsY25NZ1BTQmJYVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NTRja2RoYldWd1lXUkRiMjUwY205c2JHVnlJRDBnYm1WM0lGaFNSMkZ0WlhCaFpFTnZiblJ5YjJ4c1pYSW9YRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbmRsWWxKMFkwTnZiblJ5YjJ4c1pYSXVjM1J5WldGdFRXVnpjMkZuWlVOdmJuUnliMnhzWlhKY2JpQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1dmJsTmxjM05wYjI1RmJtUmxaQ0E5SUc1bGR5QkZkbVZ1ZEZSaGNtZGxkQ2dwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbTl1VTJWemMybHZibE4wWVhKMFpXUWdQU0J1WlhjZ1JYWmxiblJVWVhKblpYUW9LVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXZia1p5WVcxbElEMGdibVYzSUVWMlpXNTBWR0Z5WjJWMEtDazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2NIVmliR2xqSUhoeVEyeHBZMnRsWkNncElIdGNiaUFnSUNBZ0lDQWdhV1lnS0NGMGFHbHpMbmh5VTJWemMybHZiaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdibUYyYVdkaGRHOXlMbmh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTG5KbGNYVmxjM1JUWlhOemFXOXVLQ2RwYlcxbGNuTnBkbVV0ZG5JbktWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDNTBhR1Z1S0NoelpYTnphVzl1T2lCWVVsTmxjM05wYjI0cElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV2YmxoeVUyVnpjMmx2YmxOMFlYSjBaV1FvYzJWemMybHZiaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuaHlVMlZ6YzJsdmJpNWxibVFvS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUc5dVdISlRaWE56YVc5dVJXNWtaV1FvS1NCN1hHNGdJQ0FnSUNBZ0lFeHZaMmRsY2k1TWIyY29URzluWjJWeUxrZGxkRk4wWVdOclZISmhZMlVvS1N3Z0oxaFNJRk5sYzNOcGIyNGdaVzVrWldRbktUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1NGNsTmxjM05wYjI0Z1BTQnVkV3hzTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbTl1VTJWemMybHZia1Z1WkdWa0xtUnBjM0JoZEdOb1JYWmxiblFvYm1WM0lFVjJaVzUwS0NkNGNsTmxjM05wYjI1RmJtUmxaQ2NwS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J2YmxoeVUyVnpjMmx2YmxOMFlYSjBaV1FvYzJWemMybHZiam9nV0ZKVFpYTnphVzl1S1NCN1hHNGdJQ0FnSUNBZ0lFeHZaMmRsY2k1TWIyY29URzluWjJWeUxrZGxkRk4wWVdOclZISmhZMlVvS1N3Z0oxaFNJRk5sYzNOcGIyNGdjM1JoY25SbFpDY3BPMXh1WEc0Z0lDQWdJQ0FnSUhSb2FYTXVlSEpUWlhOemFXOXVJRDBnYzJWemMybHZianRjYmlBZ0lDQWdJQ0FnZEdocGN5NTRjbE5sYzNOcGIyNHVZV1JrUlhabGJuUk1hWE4wWlc1bGNpZ25aVzVrSnl3Z0tDa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1dmJsaHlVMlZ6YzJsdmJrVnVaR1ZrS0NrN1hHNGdJQ0FnSUNBZ0lIMHBPMXh1WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJR05oYm5aaGN5QTlJR1J2WTNWdFpXNTBMbU55WldGMFpVVnNaVzFsYm5Rb0oyTmhiblpoY3ljcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1kc0lEMGdZMkZ1ZG1GekxtZGxkRU52Ym5SbGVIUW9KM2RsWW1kc01pY3NJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIaHlRMjl0Y0dGMGFXSnNaVG9nZEhKMVpWeHVJQ0FnSUNBZ0lDQjlLVHRjYmx4dUlDQWdJQ0FnSUNCMGFHbHpMbmh5VTJWemMybHZiaTUxY0dSaGRHVlNaVzVrWlhKVGRHRjBaU2g3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmlZWE5sVEdGNVpYSTZJRzVsZHlCWVVsZGxZa2RNVEdGNVpYSW9kR2hwY3k1NGNsTmxjM05wYjI0c0lIUm9hWE11WjJ3cFhHNGdJQ0FnSUNBZ0lIMHBPMXh1WEc0Z0lDQWdJQ0FnSUM4dklITmxkSFZ3SUhabGNuUmxlQ0J6YUdGa1pYSmNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2RtVnlkR1Y0VTJoaFpHVnlJRDBnZEdocGN5NW5iQzVqY21WaGRHVlRhR0ZrWlhJb2RHaHBjeTVuYkM1V1JWSlVSVmhmVTBoQlJFVlNLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NW5iQzV6YUdGa1pYSlRiM1Z5WTJVb2RtVnlkR1Y0VTJoaFpHVnlMQ0JYWldKSFRGVjBhV3h6TG5abGNuUmxlRk5vWVdSbGNpZ3BLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NW5iQzVqYjIxd2FXeGxVMmhoWkdWeUtIWmxjblJsZUZOb1lXUmxjaWs3WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdjMlYwZFhBZ1puSmhaMjFsYm5RZ2MyaGhaR1Z5WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJR1p5WVdkdFpXNTBVMmhoWkdWeUlEMGdkR2hwY3k1bmJDNWpjbVZoZEdWVGFHRmtaWElvZEdocGN5NW5iQzVHVWtGSFRVVk9WRjlUU0VGRVJWSXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtZHNMbk5vWVdSbGNsTnZkWEpqWlNobWNtRm5iV1Z1ZEZOb1lXUmxjaXdnVjJWaVIweFZkR2xzY3k1bWNtRm5iV1Z1ZEZOb1lXUmxjaWdwS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVuYkM1amIyMXdhV3hsVTJoaFpHVnlLR1p5WVdkdFpXNTBVMmhoWkdWeUtUdGNibHh1SUNBZ0lDQWdJQ0F2THlCelpYUjFjQ0JIVEZOTUlIQnliMmR5WVcxY2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYzJoaFpHVnlVSEp2WjNKaGJTQTlJSFJvYVhNdVoyd3VZM0psWVhSbFVISnZaM0poYlNncE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1kc0xtRjBkR0ZqYUZOb1lXUmxjaWh6YUdGa1pYSlFjbTluY21GdExDQjJaWEowWlhoVGFHRmtaWElwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbWRzTG1GMGRHRmphRk5vWVdSbGNpaHphR0ZrWlhKUWNtOW5jbUZ0TENCbWNtRm5iV1Z1ZEZOb1lXUmxjaWs3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVaMnd1YkdsdWExQnliMmR5WVcwb2MyaGhaR1Z5VUhKdlozSmhiU2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVaMnd1ZFhObFVISnZaM0poYlNoemFHRmtaWEpRY205bmNtRnRLVHRjYmx4dUlDQWdJQ0FnSUNBdkx5QnNiMjlySUhWd0lIZG9aWEpsSUhabGNuUmxlQ0JrWVhSaElHNWxaV1J6SUhSdklHZHZYRzRnSUNBZ0lDQWdJSFJvYVhNdWNHOXphWFJwYjI1TWIyTmhkR2x2YmlBOUlIUm9hWE11WjJ3dVoyVjBRWFIwY21saVRHOWpZWFJwYjI0b1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6YUdGa1pYSlFjbTluY21GdExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSjJGZmNHOXphWFJwYjI0blhHNGdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdWRHVjRZMjl2Y21STWIyTmhkR2x2YmlBOUlIUm9hWE11WjJ3dVoyVjBRWFIwY21saVRHOWpZWFJwYjI0b1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6YUdGa1pYSlFjbTluY21GdExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSjJGZmRHVjRRMjl2Y21RblhHNGdJQ0FnSUNBZ0lDazdYRzRnSUNBZ0lDQWdJQzh2SUVOeVpXRjBaU0JoSUdKMVptWmxjaUIwYnlCd2RYUWdkR2h5WldVZ01tUWdZMnhwY0NCemNHRmpaU0J3YjJsdWRITWdhVzVjYmlBZ0lDQWdJQ0FnZEdocGN5NXdiM05wZEdsdmJrSjFabVpsY2lBOUlIUm9hWE11WjJ3dVkzSmxZWFJsUW5WbVptVnlLQ2s3WEc0Z0lDQWdJQ0FnSUM4dklFSnBibVFnYVhRZ2RHOGdRVkpTUVZsZlFsVkdSa1ZTSUNoMGFHbHVheUJ2WmlCcGRDQmhjeUJCVWxKQldWOUNWVVpHUlZJZ1BTQndiM05wZEdsdmJrSjFabVpsY2lsY2JpQWdJQ0FnSUNBZ2RHaHBjeTVuYkM1aWFXNWtRblZtWm1WeUtIUm9hWE11WjJ3dVFWSlNRVmxmUWxWR1JrVlNMQ0IwYUdsekxuQnZjMmwwYVc5dVFuVm1abVZ5S1R0Y2JseHVJQ0FnSUNBZ0lDQXZMeUJVZFhKdUlHOXVJSFJvWlNCd2IzTnBkR2x2YmlCaGRIUnlhV0oxZEdWY2JpQWdJQ0FnSUNBZ2RHaHBjeTVuYkM1bGJtRmliR1ZXWlhKMFpYaEJkSFJ5YVdKQmNuSmhlU2gwYUdsekxuQnZjMmwwYVc5dVRHOWpZWFJwYjI0cE8xeHVJQ0FnSUNBZ0lDQXZMeUJEY21WaGRHVWdZU0IwWlhoMGRYSmxMbHh1SUNBZ0lDQWdJQ0JqYjI1emRDQjBaWGgwZFhKbElEMGdkR2hwY3k1bmJDNWpjbVZoZEdWVVpYaDBkWEpsS0NrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WjJ3dVltbHVaRlJsZUhSMWNtVW9kR2hwY3k1bmJDNVVSVmhVVlZKRlh6SkVMQ0IwWlhoMGRYSmxLVHRjYmlBZ0lDQWdJQ0FnTHk4Z1UyVjBJSFJvWlNCd1lYSmhiV1YwWlhKeklITnZJSGRsSUdOaGJpQnlaVzVrWlhJZ1lXNTVJSE5wZW1VZ2FXMWhaMlV1WEc0Z0lDQWdJQ0FnSUhSb2FYTXVaMnd1ZEdWNFVHRnlZVzFsZEdWeWFTaGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVaMnd1VkVWWVZGVlNSVjh5UkN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVoyd3VWRVZZVkZWU1JWOVhVa0ZRWDFNc1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtZHNMa05NUVUxUVgxUlBYMFZFUjBWY2JpQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1bmJDNTBaWGhRWVhKaGJXVjBaWEpwS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1bmJDNVVSVmhVVlZKRlh6SkVMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVuYkM1VVJWaFVWVkpGWDFkU1FWQmZWQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WjJ3dVEweEJUVkJmVkU5ZlJVUkhSVnh1SUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbWRzTG5SbGVGQmhjbUZ0WlhSbGNta29YRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbWRzTGxSRldGUlZVa1ZmTWtRc1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtZHNMbFJGV0ZSVlVrVmZUVWxPWDBaSlRGUkZVaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WjJ3dVRrVkJVa1ZUVkZ4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1kc0xuUmxlRkJoY21GdFpYUmxjbWtvWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1kc0xsUkZXRlJWVWtWZk1rUXNYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbWRzTGxSRldGUlZVa1ZmVFVGSFgwWkpURlJGVWl4Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVoyd3VUa1ZCVWtWVFZGeHVJQ0FnSUNBZ0lDQXBPMXh1WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkR1Y0WTI5dmNtUkNkV1ptWlhJZ1BTQjBhR2x6TG1kc0xtTnlaV0YwWlVKMVptWmxjaWdwTzF4dUlDQWdJQ0FnSUNBdkx5QnNiMjlyZFhBZ2RXNXBabTl5YlhOY2JpQWdJQ0FnSUNBZ2RHaHBjeTV5WlhOdmJIVjBhVzl1VEc5allYUnBiMjRnUFNCMGFHbHpMbWRzTG1kbGRGVnVhV1p2Y20xTWIyTmhkR2x2YmloY2JpQWdJQ0FnSUNBZ0lDQWdJSE5vWVdSbGNsQnliMmR5WVcwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FuZFY5eVpYTnZiSFYwYVc5dUoxeHVJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtOW1abk5sZEV4dlkyRjBhVzl1SUQwZ2RHaHBjeTVuYkM1blpYUlZibWxtYjNKdFRHOWpZWFJwYjI0b1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6YUdGa1pYSlFjbTluY21GdExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSjNWZmIyWm1jMlYwSjF4dUlDQWdJQ0FnSUNBcE8xeHVYRzRnSUNBZ0lDQWdJSE5sYzNOcGIyNHVjbVZ4ZFdWemRGSmxabVZ5Wlc1alpWTndZV05sS0Nkc2IyTmhiQ2NwTG5Sb1pXNG9LSEpsWmxOd1lXTmxLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuaHlVbVZtVTNCaFkyVWdQU0J5WldaVGNHRmpaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11ZUhKVFpYTnphVzl1TG5KbGNYVmxjM1JCYm1sdFlYUnBiMjVHY21GdFpTaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW9kR2x0WlRvZ1JFOU5TR2xuYUZKbGMxUnBiV1ZUZEdGdGNDd2dabkpoYldVNklGaFNSbkpoYldVcElEMCtYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXViMjVZY2taeVlXMWxLSFJwYldVc0lHWnlZVzFsS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnZlNrN1hHNWNiaUFnSUNBZ0lDQWdkR2hwY3k1dmJsTmxjM05wYjI1VGRHRnlkR1ZrTG1ScGMzQmhkR05vUlhabGJuUW9ibVYzSUVWMlpXNTBLQ2Q0Y2xObGMzTnBiMjVUZEdGeWRHVmtKeWtwTzF4dUlDQWdJSDFjYmx4dUlDQWdJRzl1V0hKR2NtRnRaU2gwYVcxbE9pQkVUMDFJYVdkb1VtVnpWR2x0WlZOMFlXMXdMQ0JtY21GdFpUb2dXRkpHY21GdFpTa2dlMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQndiM05sSUQwZ1puSmhiV1V1WjJWMFZtbGxkMlZ5VUc5elpTaDBhR2x6TG5oeVVtVm1VM0JoWTJVcE8xeHVJQ0FnSUNBZ0lDQnBaaUFvY0c5elpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnYldGMGNtbDRJRDBnY0c5elpTNTBjbUZ1YzJadmNtMHViV0YwY21sNE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdiV0YwSUQwZ1cxMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCbWIzSWdLR3hsZENCcElEMGdNRHNnYVNBOElERTJPeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnRZWFJiYVYwZ1BTQnVaWGNnUm14dllYUXpNa0Z5Y21GNUtGdHRZWFJ5YVhoYmFWMWRLVnN3WFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnY0hKbGRIUnBaWEl0YVdkdWIzSmxYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbmRsWWxKMFkwTnZiblJ5YjJ4c1pYSXVjM1J5WldGdFRXVnpjMkZuWlVOdmJuUnliMnhzWlhJdWRHOVRkSEpsWVcxbGNraGhibVJzWlhKekxtZGxkQ2duV0ZKSVRVUlVjbUZ1YzJadmNtMG5LU2hiWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYldGMFd6QmRMQ0J0WVhSYk5GMHNJRzFoZEZzNFhTd2diV0YwV3pFeVhTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnRZWFJiTVYwc0lHMWhkRnMxWFN3Z2JXRjBXemxkTENCdFlYUmJNVE5kTENCY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdFlYUmJNbDBzSUcxaGRGczJYU3dnYldGMFd6RXdYU3dnYldGMFd6RTBYU3dnWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYldGMFd6TmRMQ0J0WVhSYk4xMHNJRzFoZEZzeE1WMHNJRzFoZEZzeE5WMWNiaUFnSUNBZ0lDQWdJQ0FnSUYwcE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0JuYkV4aGVXVnlJRDBnZEdocGN5NTRjbE5sYzNOcGIyNHVjbVZ1WkdWeVUzUmhkR1V1WW1GelpVeGhlV1Z5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnU1dZZ2QyVWdaRzhnYUdGMlpTQmhJSFpoYkdsa0lIQnZjMlVzSUdKcGJtUWdkR2hsSUZkbFlrZE1JR3hoZVdWeUozTWdabkpoYldWaWRXWm1aWElzWEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUIzYUdsamFDQnBjeUIzYUdWeVpTQmhibmtnWTI5dWRHVnVkQ0IwYnlCaVpTQmthWE53YkdGNVpXUWdiMjRnZEdobElGaFNSR1YyYVdObElHMTFjM1FnWW1WY2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUhKbGJtUmxjbVZrTGx4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1bmJDNWlhVzVrUm5KaGJXVmlkV1ptWlhJb2RHaHBjeTVuYkM1R1VrRk5SVUpWUmtaRlVpd2daMnhNWVhsbGNpNW1jbUZ0WldKMVptWmxjaWs3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUZWd2JHOWhaQ0IwYUdVZ2FXMWhaMlVnYVc1MGJ5QjBhR1VnZEdWNGRIVnlaUzRnVjJWaVIwd2dhMjV2ZDNNZ2FHOTNJSFJ2SUdWNGRISmhZM1FnZEdobElHTjFjbkpsYm5RZ1puSmhiV1VnWm5KdmJTQjBhR1VnZG1sa1pXOGdaV3hsYldWdWRGeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NW5iQzUwWlhoSmJXRm5aVEpFS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVaMnd1VkVWWVZGVlNSVjh5UkN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBd0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WjJ3dVVrZENRU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtZHNMbEpIUWtFc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVuYkM1VlRsTkpSMDVGUkY5Q1dWUkZMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWQyVmlVblJqUTI5dWRISnZiR3hsY2k1MmFXUmxiMUJzWVhsbGNpNW5aWFJXYVdSbGIwVnNaVzFsYm5Rb0tWeHVJQ0FnSUNBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWNtVnVaR1Z5S0hSb2FYTXVkMlZpVW5SalEyOXVkSEp2Ykd4bGNpNTJhV1JsYjFCc1lYbGxjaTVuWlhSV2FXUmxiMFZzWlcxbGJuUW9LU2s3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NTNaV0pTZEdORGIyNTBjbTlzYkdWeUxtTnZibVpwWnk1cGMwWnNZV2RGYm1GaWJHVmtLRVpzWVdkekxsaFNRMjl1ZEhKdmJHeGxja2x1Y0hWMEtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTU0Y2xObGMzTnBiMjR1YVc1d2RYUlRiM1Z5WTJWekxtWnZja1ZoWTJnb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tITnZkWEpqWlRvZ1dGSkpibkIxZEZOdmRYSmpaU3dnYVc1a1pYZzZJRzUxYldKbGNpd2dZWEp5WVhrNklGaFNTVzV3ZFhSVGIzVnlZMlZiWFNrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbmh5UjJGdFpYQmhaRU52Ym5SeWIyeHNaWEl1ZFhCa1lYUmxVM1JoZEhWektGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyOTFjbU5sTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm5KaGJXVXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5oeVVtVm1VM0JoWTJWY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTmNiaUFnSUNBZ0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0IwYUdsekxuaHlVMlZ6YzJsdmJpNXlaWEYxWlhOMFFXNXBiV0YwYVc5dVJuSmhiV1VvWEc0Z0lDQWdJQ0FnSUNBZ0lDQW9kR2x0WlRvZ1JFOU5TR2xuYUZKbGMxUnBiV1ZUZEdGdGNDd2dabkpoYldVNklGaFNSbkpoYldVcElEMCtYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1dmJsaHlSbkpoYldVb2RHbHRaU3dnWm5KaGJXVXBYRzRnSUNBZ0lDQWdJQ2s3WEc1Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV2YmtaeVlXMWxMbVJwYzNCaGRHTm9SWFpsYm5Rb2JtVjNJRmh5Um5KaGJXVkZkbVZ1ZENoN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYVcxbExGeHVJQ0FnSUNBZ0lDQWdJQ0FnWm5KaGJXVmNiaUFnSUNBZ0lDQWdmU2twTzF4dUlDQWdJSDFjYmx4dUlDQWdJSEJ5YVhaaGRHVWdjbVZ1WkdWeUtIWnBaR1Z2Uld4bGJXVnVkRG9nU0ZSTlRGWnBaR1Z2Uld4bGJXVnVkQ2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9JWFJvYVhNdVoyd3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJR052Ym5OMElHZHNUR0Y1WlhJZ1BTQjBhR2x6TG5oeVUyVnpjMmx2Ymk1eVpXNWtaWEpUZEdGMFpTNWlZWE5sVEdGNVpYSTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVoyd3VkbWxsZDNCdmNuUW9YRzRnSUNBZ0lDQWdJQ0FnSUNBd0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnTUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR2RzVEdGNVpYSXVabkpoYldWaWRXWm1aWEpYYVdSMGFDeGNiaUFnSUNBZ0lDQWdJQ0FnSUdkc1RHRjVaWEl1Wm5KaGJXVmlkV1ptWlhKSVpXbG5hSFJjYmlBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVuYkM1MWJtbG1iM0p0TkdZb2RHaHBjeTV2Wm1aelpYUk1iMk5oZEdsdmJpd2dNUzR3TENBeExqQXNJREF1TUN3Z01DNHdLVHRjYmx4dUlDQWdJQ0FnSUNBdkx5QlRaWFFnY21WamRHRnVaMnhsWEc0Z0lDQWdJQ0FnSUM4dklIQnlaWFIwYVdWeUxXbG5ibTl5WlZ4dUlDQWdJQ0FnSUNCMGFHbHpMbWRzTG1KMVptWmxja1JoZEdFb1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtZHNMa0ZTVWtGWlgwSlZSa1pGVWl4Y2JpQWdJQ0FnSUNBZ0lDQWdJRzVsZHlCR2JHOWhkRE15UVhKeVlYa29XMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJREFzSURBc0lGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWnBaR1Z2Uld4bGJXVnVkQzUyYVdSbGIxZHBaSFJvTENBd0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEQXNJSFpwWkdWdlJXeGxiV1Z1ZEM1MmFXUmxiMGhsYVdkb2RDd2dYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdNQ3dnZG1sa1pXOUZiR1Z0Wlc1MExuWnBaR1Z2U0dWcFoyaDBMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpwWkdWdlJXeGxiV1Z1ZEM1MmFXUmxiMWRwWkhSb0xDQXdMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpwWkdWdlJXeGxiV1Z1ZEM1MmFXUmxiMWRwWkhSb0xDQjJhV1JsYjBWc1pXMWxiblF1ZG1sa1pXOUlaV2xuYUhSY2JpQWdJQ0FnSUNBZ0lDQWdJRjBwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1bmJDNVRWRUZVU1VOZlJGSkJWMXh1SUNBZ0lDQWdJQ0FwTzF4dVhHNGdJQ0FnSUNBZ0lDOHZJRkJ5YjNacFpHVWdkR1Y0ZEhWeVpTQmpiMjl5WkdsdVlYUmxjeUJtYjNJZ2RHaGxJSEpsWTNSaGJtZHNaVnh1SUNBZ0lDQWdJQ0IwYUdsekxtZHNMbUpwYm1SQ2RXWm1aWElvZEdocGN5NW5iQzVCVWxKQldWOUNWVVpHUlZJc0lIUm9hWE11ZEdWNFkyOXZjbVJDZFdabVpYSXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtZHNMbUoxWm1abGNrUmhkR0VvWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1kc0xrRlNVa0ZaWDBKVlJrWkZVaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lHNWxkeUJHYkc5aGRETXlRWEp5WVhrb1cxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEQXVNQ3dnTUM0d0xDQXhMakFzSURBdU1Dd2dNQzR3TENBeExqQXNJREF1TUN3Z01TNHdMQ0F4TGpBc0lEQXVNQ3dnTVM0d0xDQXhMakJjYmlBZ0lDQWdJQ0FnSUNBZ0lGMHBMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVuYkM1VFZFRlVTVU5mUkZKQlYxeHVJQ0FnSUNBZ0lDQXBPMXh1WEc0Z0lDQWdJQ0FnSUd4bGRDQnphWHBsT3lBdkx5QmpiMjF3YjI1bGJuUnpJSEJsY2lCcGRHVnlZWFJwYjI1Y2JpQWdJQ0FnSUNBZ2JHVjBJSFI1Y0dVN0lDOHZJSFJvWlNCa1lYUmhJSFI1Y0dWY2JpQWdJQ0FnSUNBZ2JHVjBJRzV2Y20xaGJHbDZaVHNnTHk4Z2JtOXliV0ZzYVhwbElIUm9aU0JrWVhSaFhHNGdJQ0FnSUNBZ0lHeGxkQ0J6ZEhKcFpHVTdJQzh2SURBZ1BTQnRiM1psSUdadmNuZGhjbVFnYzJsNlpTQXFJSE5wZW1WdlppaDBlWEJsS1NCbFlXTm9JR2wwWlhKaGRHbHZiaUIwYnlCblpYUWdkR2hsSUc1bGVIUWdjRzl6YVhScGIyNWNiaUFnSUNBZ0lDQWdiR1YwSUc5bVpuTmxkRHNnTHk4Z2MzUmhjblFnY0c5emFYUnBiMjRnYjJZZ2RHaGxJR0oxWm1abGNseHVYRzRnSUNBZ0lDQWdJQzh2SUVKcGJtUWdkR2hsSUhCdmMybDBhVzl1SUdKMVptWmxjaTVjYmlBZ0lDQWdJQ0FnZEdocGN5NW5iQzVpYVc1a1FuVm1abVZ5S0hSb2FYTXVaMnd1UVZKU1FWbGZRbFZHUmtWU0xDQjBhR2x6TG5CdmMybDBhVzl1UW5WbVptVnlLVHRjYmlBZ0lDQWdJQ0FnTHk4Z1ZHVnNiQ0IwYUdVZ2NHOXphWFJwYjI0Z1lYUjBjbWxpZFhSbElHaHZkeUIwYnlCblpYUWdaR0YwWVNCdmRYUWdiMllnY0c5emFYUnBiMjVDZFdabVpYSWdLRUZTVWtGWlgwSlZSa1pGVWlsY2JpQWdJQ0FnSUNBZ2MybDZaU0E5SURJN0lDOHZJRElnWTI5dGNHOXVaVzUwY3lCd1pYSWdhWFJsY21GMGFXOXVYRzRnSUNBZ0lDQWdJSFI1Y0dVZ1BTQjBhR2x6TG1kc0xrWk1UMEZVT3lBdkx5QjBhR1VnWkdGMFlTQnBjeUF6TW1KcGRDQm1iRzloZEhOY2JpQWdJQ0FnSUNBZ2JtOXliV0ZzYVhwbElEMGdabUZzYzJVN0lDOHZJR1J2YmlkMElHNXZjbTFoYkdsNlpTQjBhR1VnWkdGMFlWeHVJQ0FnSUNBZ0lDQnpkSEpwWkdVZ1BTQXdPeUF2THlBd0lEMGdiVzkyWlNCbWIzSjNZWEprSUhOcGVtVWdLaUJ6YVhwbGIyWW9kSGx3WlNrZ1pXRmphQ0JwZEdWeVlYUnBiMjRnZEc4Z1oyVjBJSFJvWlNCdVpYaDBJSEJ2YzJsMGFXOXVYRzRnSUNBZ0lDQWdJRzltWm5ObGRDQTlJREE3SUM4dklITjBZWEowSUdGMElIUm9aU0JpWldkcGJtNXBibWNnYjJZZ2RHaGxJR0oxWm1abGNseHVJQ0FnSUNBZ0lDQjBhR2x6TG1kc0xuWmxjblJsZUVGMGRISnBZbEJ2YVc1MFpYSW9YRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbkJ2YzJsMGFXOXVURzlqWVhScGIyNHNYRzRnSUNBZ0lDQWdJQ0FnSUNCemFYcGxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2RIbHdaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHNXZjbTFoYkdsNlpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUhOMGNtbGtaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHOW1abk5sZEZ4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQXZMeUJVZFhKdUlHOXVJSFJvWlNCMFpYaGpiMjl5WkNCaGRIUnlhV0oxZEdWY2JpQWdJQ0FnSUNBZ2RHaHBjeTVuYkM1bGJtRmliR1ZXWlhKMFpYaEJkSFJ5YVdKQmNuSmhlU2gwYUdsekxuUmxlR052YjNKa1RHOWpZWFJwYjI0cE8xeHVJQ0FnSUNBZ0lDQXZMeUJpYVc1a0lIUm9aU0IwWlhoamIyOXlaQ0JpZFdabVpYSXVYRzRnSUNBZ0lDQWdJSFJvYVhNdVoyd3VZbWx1WkVKMVptWmxjaWgwYUdsekxtZHNMa0ZTVWtGWlgwSlZSa1pGVWl3Z2RHaHBjeTUwWlhoamIyOXlaRUoxWm1abGNpazdYRzRnSUNBZ0lDQWdJQzh2SUZSbGJHd2dkR2hsSUhSbGVHTnZiM0prSUdGMGRISnBZblYwWlNCb2IzY2dkRzhnWjJWMElHUmhkR0VnYjNWMElHOW1JSFJsZUdOdmIzSmtRblZtWm1WeUlDaEJVbEpCV1Y5Q1ZVWkdSVklwWEc0Z0lDQWdJQ0FnSUhOcGVtVWdQU0F5T3lBdkx5QXlJR052YlhCdmJtVnVkSE1nY0dWeUlHbDBaWEpoZEdsdmJseHVJQ0FnSUNBZ0lDQjBlWEJsSUQwZ2RHaHBjeTVuYkM1R1RFOUJWRHNnTHk4Z2RHaGxJR1JoZEdFZ2FYTWdNekppYVhRZ1pteHZZWFJ6WEc0Z0lDQWdJQ0FnSUc1dmNtMWhiR2w2WlNBOUlHWmhiSE5sT3lBdkx5QmtiMjRuZENCdWIzSnRZV3hwZW1VZ2RHaGxJR1JoZEdGY2JpQWdJQ0FnSUNBZ2MzUnlhV1JsSUQwZ01Ec2dMeThnTUNBOUlHMXZkbVVnWm05eWQyRnlaQ0J6YVhwbElDb2djMmw2Wlc5bUtIUjVjR1VwSUdWaFkyZ2dhWFJsY21GMGFXOXVJSFJ2SUdkbGRDQjBhR1VnYm1WNGRDQndiM05wZEdsdmJseHVJQ0FnSUNBZ0lDQnZabVp6WlhRZ1BTQXdPeUF2THlCemRHRnlkQ0JoZENCMGFHVWdZbVZuYVc1dWFXNW5JRzltSUhSb1pTQmlkV1ptWlhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTVuYkM1MlpYSjBaWGhCZEhSeWFXSlFiMmx1ZEdWeUtGeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NTBaWGhqYjI5eVpFeHZZMkYwYVc5dUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnYzJsNlpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUhSNWNHVXNYRzRnSUNBZ0lDQWdJQ0FnSUNCdWIzSnRZV3hwZW1Vc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6ZEhKcFpHVXNYRzRnSUNBZ0lDQWdJQ0FnSUNCdlptWnpaWFJjYmlBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ0x5OGdjMlYwSUhSb1pTQnlaWE52YkhWMGFXOXVYRzRnSUNBZ0lDQWdJSFJvYVhNdVoyd3VkVzVwWm05eWJUSm1LRnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV5WlhOdmJIVjBhVzl1VEc5allYUnBiMjRzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjJhV1JsYjBWc1pXMWxiblF1ZG1sa1pXOVhhV1IwYUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpwWkdWdlJXeGxiV1Z1ZEM1MmFXUmxiMGhsYVdkb2RGeHVJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0F2THlCa2NtRjNJSFJvWlNCeVpXTjBZVzVuYkdVdVhHNGdJQ0FnSUNBZ0lHTnZibk4wSUhCeWFXMXBkR2wyWlZSNWNHVWdQU0IwYUdsekxtZHNMbFJTU1VGT1IweEZVenRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdZMjkxYm5RZ1BTQTJPMXh1SUNBZ0lDQWdJQ0J2Wm1aelpYUWdQU0F3TzF4dUlDQWdJQ0FnSUNCMGFHbHpMbWRzTG1SeVlYZEJjbkpoZVhNb2NISnBiV2wwYVhabFZIbHdaU3dnYjJabWMyVjBMQ0JqYjNWdWRDazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2MzUmhkR2xqSUdselUyVnpjMmx2YmxOMWNIQnZjblJsWkNodGIyUmxPaUJZVWxObGMzTnBiMjVOYjJSbEtUb2dVSEp2YldselpUeGliMjlzWldGdVBpQjdYRzRnSUNBZ0lDQWdJR2xtSUNodVlYWnBaMkYwYjNJdWVISXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCdVlYWnBaMkYwYjNJdWVISXVhWE5UWlhOemFXOXVVM1Z3Y0c5eWRHVmtLRzF2WkdVcE8xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZHlCUWNtOXRhWE5sUEdKdmIyeGxZVzQrS0NncElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JuMWNiaUlzSW5aaGNpQjRJRDBnZVNBOVBpQjdJSFpoY2lCNElEMGdlMzA3SUY5ZmQyVmljR0ZqYTE5eVpYRjFhWEpsWDE4dVpDaDRMQ0I1S1RzZ2NtVjBkWEp1SUhnN0lIMWNiblpoY2lCNUlEMGdlQ0E5UGlBb0tTQTlQaUI0WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUY5ZlYwVkNVRUZEUzE5RldGUkZVazVCVEY5TlQwUlZURVZmYzJSd1gxODdJaXdpTHk4Z1ZHaGxJRzF2WkhWc1pTQmpZV05vWlZ4dWRtRnlJRjlmZDJWaWNHRmphMTl0YjJSMWJHVmZZMkZqYUdWZlh5QTlJSHQ5TzF4dVhHNHZMeUJVYUdVZ2NtVnhkV2x5WlNCbWRXNWpkR2x2Ymx4dVpuVnVZM1JwYjI0Z1gxOTNaV0p3WVdOclgzSmxjWFZwY21WZlh5aHRiMlIxYkdWSlpDa2dlMXh1WEhRdkx5QkRhR1ZqYXlCcFppQnRiMlIxYkdVZ2FYTWdhVzRnWTJGamFHVmNibHgwZG1GeUlHTmhZMmhsWkUxdlpIVnNaU0E5SUY5ZmQyVmljR0ZqYTE5dGIyUjFiR1ZmWTJGamFHVmZYMXR0YjJSMWJHVkpaRjA3WEc1Y2RHbG1JQ2hqWVdOb1pXUk5iMlIxYkdVZ0lUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dVhIUmNkSEpsZEhWeWJpQmpZV05vWldSTmIyUjFiR1V1Wlhod2IzSjBjenRjYmx4MGZWeHVYSFF2THlCRGNtVmhkR1VnWVNCdVpYY2diVzlrZFd4bElDaGhibVFnY0hWMElHbDBJR2x1ZEc4Z2RHaGxJR05oWTJobEtWeHVYSFIyWVhJZ2JXOWtkV3hsSUQwZ1gxOTNaV0p3WVdOclgyMXZaSFZzWlY5allXTm9aVjlmVzIxdlpIVnNaVWxrWFNBOUlIdGNibHgwWEhRdkx5QnVieUJ0YjJSMWJHVXVhV1FnYm1WbFpHVmtYRzVjZEZ4MEx5OGdibThnYlc5a2RXeGxMbXh2WVdSbFpDQnVaV1ZrWldSY2JseDBYSFJsZUhCdmNuUnpPaUI3ZlZ4dVhIUjlPMXh1WEc1Y2RDOHZJRVY0WldOMWRHVWdkR2hsSUcxdlpIVnNaU0JtZFc1amRHbHZibHh1WEhSZlgzZGxZbkJoWTJ0ZmJXOWtkV3hsYzE5ZlcyMXZaSFZzWlVsa1hTaHRiMlIxYkdVc0lHMXZaSFZzWlM1bGVIQnZjblJ6TENCZlgzZGxZbkJoWTJ0ZmNtVnhkV2x5WlY5ZktUdGNibHh1WEhRdkx5QlNaWFIxY200Z2RHaGxJR1Y0Y0c5eWRITWdiMllnZEdobElHMXZaSFZzWlZ4dVhIUnlaWFIxY200Z2JXOWtkV3hsTG1WNGNHOXlkSE03WEc1OVhHNWNiaUlzSWk4dklHUmxabWx1WlNCblpYUjBaWElnWm5WdVkzUnBiMjV6SUdadmNpQm9ZWEp0YjI1NUlHVjRjRzl5ZEhOY2JsOWZkMlZpY0dGamExOXlaWEYxYVhKbFgxOHVaQ0E5SUNobGVIQnZjblJ6TENCa1pXWnBibWwwYVc5dUtTQTlQaUI3WEc1Y2RHWnZjaWgyWVhJZ2EyVjVJR2x1SUdSbFptbHVhWFJwYjI0cElIdGNibHgwWEhScFppaGZYM2RsWW5CaFkydGZjbVZ4ZFdseVpWOWZMbThvWkdWbWFXNXBkR2x2Yml3Z2EyVjVLU0FtSmlBaFgxOTNaV0p3WVdOclgzSmxjWFZwY21WZlh5NXZLR1Y0Y0c5eWRITXNJR3RsZVNrcElIdGNibHgwWEhSY2RFOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2hsZUhCdmNuUnpMQ0JyWlhrc0lIc2daVzUxYldWeVlXSnNaVG9nZEhKMVpTd2daMlYwT2lCa1pXWnBibWwwYVc5dVcydGxlVjBnZlNrN1hHNWNkRngwZlZ4dVhIUjlYRzU5T3lJc0lsOWZkMlZpY0dGamExOXlaWEYxYVhKbFgxOHVieUE5SUNodlltb3NJSEJ5YjNBcElEMCtJQ2hQWW1wbFkzUXVjSEp2ZEc5MGVYQmxMbWhoYzA5M2JsQnliM0JsY25SNUxtTmhiR3dvYjJKcUxDQndjbTl3S1NraUxDSXZMeUJrWldacGJtVWdYMTlsYzAxdlpIVnNaU0J2YmlCbGVIQnZjblJ6WEc1ZlgzZGxZbkJoWTJ0ZmNtVnhkV2x5WlY5ZkxuSWdQU0FvWlhod2IzSjBjeWtnUFQ0Z2UxeHVYSFJwWmloMGVYQmxiMllnVTNsdFltOXNJQ0U5UFNBbmRXNWtaV1pwYm1Wa0p5QW1KaUJUZVcxaWIyd3VkRzlUZEhKcGJtZFVZV2NwSUh0Y2JseDBYSFJQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb1pYaHdiM0owY3l3Z1UzbHRZbTlzTG5SdlUzUnlhVzVuVkdGbkxDQjdJSFpoYkhWbE9pQW5UVzlrZFd4bEp5QjlLVHRjYmx4MGZWeHVYSFJQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb1pYaHdiM0owY3l3Z0oxOWZaWE5OYjJSMWJHVW5MQ0I3SUhaaGJIVmxPaUIwY25WbElIMHBPMXh1ZlRzaUxDSXZMeUJEYjNCNWNtbG5hSFFnUlhCcFl5QkhZVzFsY3l3Z1NXNWpMaUJCYkd3Z1VtbG5hSFJ6SUZKbGMyVnlkbVZrTGx4dVhHNWxlSEJ2Y25RZ2V5QlhaV0pTZEdOUWJHRjVaWEpEYjI1MGNtOXNiR1Z5SUgwZ1puSnZiU0FuTGk5WFpXSlNkR05RYkdGNVpYSXZWMlZpVW5SalVHeGhlV1Z5UTI5dWRISnZiR3hsY2ljN1hHNWxlSEJ2Y25RZ2V5QlhaV0pZVWtOdmJuUnliMnhzWlhJZ2ZTQm1jbTl0SUNjdUwxZGxZbGhTTDFkbFlsaFNRMjl1ZEhKdmJHeGxjaWM3WEc1bGVIQnZjblFnZTF4dUlDQWdJRU52Ym1acFp5eGNiaUFnSUNCRGIyNTBjbTlzVTJOb1pXMWxWSGx3WlN4Y2JpQWdJQ0JHYkdGbmN5eGNiaUFnSUNCT2RXMWxjbWxqVUdGeVlXMWxkR1Z5Y3l4Y2JpQWdJQ0JVWlhoMFVHRnlZVzFsZEdWeWN5eGNiaUFnSUNCUGNIUnBiMjVRWVhKaGJXVjBaWEp6TEZ4dUlDQWdJRVpzWVdkelNXUnpMRnh1SUNBZ0lFNTFiV1Z5YVdOUVlYSmhiV1YwWlhKelNXUnpMRnh1SUNBZ0lGUmxlSFJRWVhKaGJXVjBaWEp6U1dSekxGeHVJQ0FnSUU5d2RHbHZibEJoY21GdFpYUmxjbk5KWkhNc1hHNGdJQ0FnUVd4c1UyVjBkR2x1WjNOY2JuMGdabkp2YlNBbkxpOURiMjVtYVdjdlEyOXVabWxuSnp0Y2JtVjRjRzl5ZENCN0lGTmxkSFJwYm1kQ1lYTmxJSDBnWm5KdmJTQW5MaTlEYjI1bWFXY3ZVMlYwZEdsdVowSmhjMlVuTzF4dVpYaHdiM0owSUhzZ1UyVjBkR2x1WjBac1lXY2dmU0JtY205dElDY3VMME52Ym1acFp5OVRaWFIwYVc1blJteGhaeWM3WEc1bGVIQnZjblFnZXlCVFpYUjBhVzVuVG5WdFltVnlJSDBnWm5KdmJTQW5MaTlEYjI1bWFXY3ZVMlYwZEdsdVowNTFiV0psY2ljN1hHNWxlSEJ2Y25RZ2V5QlRaWFIwYVc1blQzQjBhVzl1SUgwZ1puSnZiU0FuTGk5RGIyNW1hV2N2VTJWMGRHbHVaMDl3ZEdsdmJpYzdYRzVsZUhCdmNuUWdleUJUWlhSMGFXNW5WR1Y0ZENCOUlHWnliMjBnSnk0dlEyOXVabWxuTDFObGRIUnBibWRVWlhoMEp6dGNibVY0Y0c5eWRDQjdJRkJwZUdWc1UzUnlaV0Z0YVc1bklIMGdabkp2YlNBbkxpOVFhWGhsYkZOMGNtVmhiV2x1Wnk5UWFYaGxiRk4wY21WaGJXbHVaeWM3WEc1Y2JtVjRjRzl5ZENCN0lFRkdTME52Ym5SeWIyeHNaWElnWVhNZ1FXWnJURzluYVdNZ2ZTQm1jbTl0SUNjdUwwRkdTeTlCUmt0RGIyNTBjbTlzYkdWeUp6dGNibHh1Wlhod2IzSjBJSHNnVEdGMFpXNWplVlJsYzNSU1pYTjFiSFJ6SUgwZ1puSnZiU0FuTGk5RVlYUmhRMmhoYm01bGJDOU1ZWFJsYm1ONVZHVnpkRkpsYzNWc2RITW5PMXh1Wlhod2IzSjBJSHRjYmlBZ0lDQkZibU52WkdWeVUyVjBkR2x1WjNNc1hHNGdJQ0FnU1c1cGRHbGhiRk5sZEhScGJtZHpMRnh1SUNBZ0lGZGxZbEpVUTFObGRIUnBibWR6WEc1OUlHWnliMjBnSnk0dlJHRjBZVU5vWVc1dVpXd3ZTVzVwZEdsaGJGTmxkSFJwYm1kekp6dGNibVY0Y0c5eWRDQjdJRUZuWjNKbFoyRjBaV1JUZEdGMGN5QjlJR1p5YjIwZ0p5NHZVR1ZsY2tOdmJtNWxZM1JwYjI1RGIyNTBjbTlzYkdWeUwwRm5aM0psWjJGMFpXUlRkR0YwY3ljN1hHNWxlSEJ2Y25RZ2V5Qk1iMmRuWlhJZ2ZTQm1jbTl0SUNjdUwweHZaMmRsY2k5TWIyZG5aWEluTzF4dVpYaHdiM0owSUhzZ1ZXNXhkV0Z1ZEdsNlpXUkVaVzV2Y20xaGJHbDZaV1JWYm5OcFoyNWxaRU52YjNKa0lHRnpJRlZ1Y1hWaGJuUnBlbVZrUVc1a1JHVnViM0p0WVd4cGVtVlZibk5wWjI1bFpDQjlJR1p5YjIwZ0p5NHZWWFJwYkM5RGIyOXlaR2x1WVhSbFEyOXVkbVZ5ZEdWeUp6dGNibVY0Y0c5eWRDQjdJRTFsYzNOaFoyVlRaVzVrSUgwZ1puSnZiU0FuTGk5WFpXSlRiMk5yWlhSekwwMWxjM05oWjJWVFpXNWtKenRjYm1WNGNHOXlkQ0I3SUUxbGMzTmhaMlZTWldOMkxDQk5aWE56WVdkbFUzUnlaV0Z0WlhKTWFYTjBJSDBnWm5KdmJTQW5MaTlYWldKVGIyTnJaWFJ6TDAxbGMzTmhaMlZTWldObGFYWmxKenRjYm1WNGNHOXlkQ0I3SUZkbFlsTnZZMnRsZEVOdmJuUnliMnhzWlhJZ2ZTQm1jbTl0SUNjdUwxZGxZbE52WTJ0bGRITXZWMlZpVTI5amEyVjBRMjl1ZEhKdmJHeGxjaWM3WEc1bGVIQnZjblFnZXlCVGFXZHVZV3hzYVc1blVISnZkRzlqYjJ3Z2ZTQm1jbTl0SUNjdUwxZGxZbE52WTJ0bGRITXZVMmxuYm1Gc2JHbHVaMUJ5YjNSdlkyOXNKenRjYmx4dVpYaHdiM0owSUhzZ1EyRnVaR2xrWVhSbFVHRnBjbE4wWVhSeklIMGdabkp2YlNBbkxpOVFaV1Z5UTI5dWJtVmpkR2x2YmtOdmJuUnliMnhzWlhJdlEyRnVaR2xrWVhSbFVHRnBjbE4wWVhSekp6dGNibVY0Y0c5eWRDQjdJRU5oYm1ScFpHRjBaVk4wWVhRZ2ZTQm1jbTl0SUNjdUwxQmxaWEpEYjI1dVpXTjBhVzl1UTI5dWRISnZiR3hsY2k5RFlXNWthV1JoZEdWVGRHRjBKenRjYm1WNGNHOXlkQ0I3SUVSaGRHRkRhR0Z1Ym1Wc1UzUmhkSE1nZlNCbWNtOXRJQ2N1TDFCbFpYSkRiMjV1WldOMGFXOXVRMjl1ZEhKdmJHeGxjaTlFWVhSaFEyaGhibTVsYkZOMFlYUnpKenRjYm1WNGNHOXlkQ0I3WEc0Z0lDQWdTVzVpYjNWdVpFRjFaR2x2VTNSaGRITXNYRzRnSUNBZ1NXNWliM1Z1WkZacFpHVnZVM1JoZEhOY2JuMGdabkp2YlNBbkxpOVFaV1Z5UTI5dWJtVmpkR2x2YmtOdmJuUnliMnhzWlhJdlNXNWliM1Z1WkZKVVVGTjBZWFJ6Snp0Y2JtVjRjRzl5ZENCN0lFOTFkRUp2ZFc1a1ZtbGtaVzlUZEdGMGN5QjlJR1p5YjIwZ0p5NHZVR1ZsY2tOdmJtNWxZM1JwYjI1RGIyNTBjbTlzYkdWeUwwOTFkRUp2ZFc1a1VsUlFVM1JoZEhNbk8xeHVaWGh3YjNKMElDb2dabkp2YlNBbkxpOVZkR2xzTDBWMlpXNTBSVzFwZEhSbGNpYzdYRzRpWFN3aWJtRnRaWE1pT2x0ZExDSnpiM1Z5WTJWU2IyOTBJam9pSW4wPSIsIi8qIGVzbGludC1lbnYgbm9kZSAqL1xuJ3VzZSBzdHJpY3QnO1xuXG4vLyBTRFAgaGVscGVycy5cbmNvbnN0IFNEUFV0aWxzID0ge307XG5cbi8vIEdlbmVyYXRlIGFuIGFscGhhbnVtZXJpYyBpZGVudGlmaWVyIGZvciBjbmFtZSBvciBtaWRzLlxuLy8gVE9ETzogdXNlIFVVSURzIGluc3RlYWQ/IGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL2plZC85ODI4ODNcblNEUFV0aWxzLmdlbmVyYXRlSWRlbnRpZmllciA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDIsIDEyKTtcbn07XG5cbi8vIFRoZSBSVENQIENOQU1FIHVzZWQgYnkgYWxsIHBlZXJjb25uZWN0aW9ucyBmcm9tIHRoZSBzYW1lIEpTLlxuU0RQVXRpbHMubG9jYWxDTmFtZSA9IFNEUFV0aWxzLmdlbmVyYXRlSWRlbnRpZmllcigpO1xuXG4vLyBTcGxpdHMgU0RQIGludG8gbGluZXMsIGRlYWxpbmcgd2l0aCBib3RoIENSTEYgYW5kIExGLlxuU0RQVXRpbHMuc3BsaXRMaW5lcyA9IGZ1bmN0aW9uKGJsb2IpIHtcbiAgcmV0dXJuIGJsb2IudHJpbSgpLnNwbGl0KCdcXG4nKS5tYXAobGluZSA9PiBsaW5lLnRyaW0oKSk7XG59O1xuLy8gU3BsaXRzIFNEUCBpbnRvIHNlc3Npb25wYXJ0IGFuZCBtZWRpYXNlY3Rpb25zLiBFbnN1cmVzIENSTEYuXG5TRFBVdGlscy5zcGxpdFNlY3Rpb25zID0gZnVuY3Rpb24oYmxvYikge1xuICBjb25zdCBwYXJ0cyA9IGJsb2Iuc3BsaXQoJ1xcbm09Jyk7XG4gIHJldHVybiBwYXJ0cy5tYXAoKHBhcnQsIGluZGV4KSA9PiAoaW5kZXggPiAwID9cbiAgICAnbT0nICsgcGFydCA6IHBhcnQpLnRyaW0oKSArICdcXHJcXG4nKTtcbn07XG5cbi8vIFJldHVybnMgdGhlIHNlc3Npb24gZGVzY3JpcHRpb24uXG5TRFBVdGlscy5nZXREZXNjcmlwdGlvbiA9IGZ1bmN0aW9uKGJsb2IpIHtcbiAgY29uc3Qgc2VjdGlvbnMgPSBTRFBVdGlscy5zcGxpdFNlY3Rpb25zKGJsb2IpO1xuICByZXR1cm4gc2VjdGlvbnMgJiYgc2VjdGlvbnNbMF07XG59O1xuXG4vLyBSZXR1cm5zIHRoZSBpbmRpdmlkdWFsIG1lZGlhIHNlY3Rpb25zLlxuU0RQVXRpbHMuZ2V0TWVkaWFTZWN0aW9ucyA9IGZ1bmN0aW9uKGJsb2IpIHtcbiAgY29uc3Qgc2VjdGlvbnMgPSBTRFBVdGlscy5zcGxpdFNlY3Rpb25zKGJsb2IpO1xuICBzZWN0aW9ucy5zaGlmdCgpO1xuICByZXR1cm4gc2VjdGlvbnM7XG59O1xuXG4vLyBSZXR1cm5zIGxpbmVzIHRoYXQgc3RhcnQgd2l0aCBhIGNlcnRhaW4gcHJlZml4LlxuU0RQVXRpbHMubWF0Y2hQcmVmaXggPSBmdW5jdGlvbihibG9iLCBwcmVmaXgpIHtcbiAgcmV0dXJuIFNEUFV0aWxzLnNwbGl0TGluZXMoYmxvYikuZmlsdGVyKGxpbmUgPT4gbGluZS5pbmRleE9mKHByZWZpeCkgPT09IDApO1xufTtcblxuLy8gUGFyc2VzIGFuIElDRSBjYW5kaWRhdGUgbGluZS4gU2FtcGxlIGlucHV0OlxuLy8gY2FuZGlkYXRlOjcwMjc4NjM1MCAyIHVkcCA0MTgxOTkwMiA4LjguOC44IDYwNzY5IHR5cCByZWxheSByYWRkciA4LjguOC44XG4vLyBycG9ydCA1NTk5NlwiXG4vLyBJbnB1dCBjYW4gYmUgcHJlZml4ZWQgd2l0aCBhPS5cblNEUFV0aWxzLnBhcnNlQ2FuZGlkYXRlID0gZnVuY3Rpb24obGluZSkge1xuICBsZXQgcGFydHM7XG4gIC8vIFBhcnNlIGJvdGggdmFyaWFudHMuXG4gIGlmIChsaW5lLmluZGV4T2YoJ2E9Y2FuZGlkYXRlOicpID09PSAwKSB7XG4gICAgcGFydHMgPSBsaW5lLnN1YnN0cmluZygxMikuc3BsaXQoJyAnKTtcbiAgfSBlbHNlIHtcbiAgICBwYXJ0cyA9IGxpbmUuc3Vic3RyaW5nKDEwKS5zcGxpdCgnICcpO1xuICB9XG5cbiAgY29uc3QgY2FuZGlkYXRlID0ge1xuICAgIGZvdW5kYXRpb246IHBhcnRzWzBdLFxuICAgIGNvbXBvbmVudDogezE6ICdydHAnLCAyOiAncnRjcCd9W3BhcnRzWzFdXSB8fCBwYXJ0c1sxXSxcbiAgICBwcm90b2NvbDogcGFydHNbMl0udG9Mb3dlckNhc2UoKSxcbiAgICBwcmlvcml0eTogcGFyc2VJbnQocGFydHNbM10sIDEwKSxcbiAgICBpcDogcGFydHNbNF0sXG4gICAgYWRkcmVzczogcGFydHNbNF0sIC8vIGFkZHJlc3MgaXMgYW4gYWxpYXMgZm9yIGlwLlxuICAgIHBvcnQ6IHBhcnNlSW50KHBhcnRzWzVdLCAxMCksXG4gICAgLy8gc2tpcCBwYXJ0c1s2XSA9PSAndHlwJ1xuICAgIHR5cGU6IHBhcnRzWzddLFxuICB9O1xuXG4gIGZvciAobGV0IGkgPSA4OyBpIDwgcGFydHMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICBzd2l0Y2ggKHBhcnRzW2ldKSB7XG4gICAgICBjYXNlICdyYWRkcic6XG4gICAgICAgIGNhbmRpZGF0ZS5yZWxhdGVkQWRkcmVzcyA9IHBhcnRzW2kgKyAxXTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdycG9ydCc6XG4gICAgICAgIGNhbmRpZGF0ZS5yZWxhdGVkUG9ydCA9IHBhcnNlSW50KHBhcnRzW2kgKyAxXSwgMTApO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3RjcHR5cGUnOlxuICAgICAgICBjYW5kaWRhdGUudGNwVHlwZSA9IHBhcnRzW2kgKyAxXTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICd1ZnJhZyc6XG4gICAgICAgIGNhbmRpZGF0ZS51ZnJhZyA9IHBhcnRzW2kgKyAxXTsgLy8gZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkuXG4gICAgICAgIGNhbmRpZGF0ZS51c2VybmFtZUZyYWdtZW50ID0gcGFydHNbaSArIDFdO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6IC8vIGV4dGVuc2lvbiBoYW5kbGluZywgaW4gcGFydGljdWxhciB1ZnJhZy4gRG9uJ3Qgb3ZlcndyaXRlLlxuICAgICAgICBpZiAoY2FuZGlkYXRlW3BhcnRzW2ldXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgY2FuZGlkYXRlW3BhcnRzW2ldXSA9IHBhcnRzW2kgKyAxXTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNhbmRpZGF0ZTtcbn07XG5cbi8vIFRyYW5zbGF0ZXMgYSBjYW5kaWRhdGUgb2JqZWN0IGludG8gU0RQIGNhbmRpZGF0ZSBhdHRyaWJ1dGUuXG4vLyBUaGlzIGRvZXMgbm90IGluY2x1ZGUgdGhlIGE9IHByZWZpeCFcblNEUFV0aWxzLndyaXRlQ2FuZGlkYXRlID0gZnVuY3Rpb24oY2FuZGlkYXRlKSB7XG4gIGNvbnN0IHNkcCA9IFtdO1xuICBzZHAucHVzaChjYW5kaWRhdGUuZm91bmRhdGlvbik7XG5cbiAgY29uc3QgY29tcG9uZW50ID0gY2FuZGlkYXRlLmNvbXBvbmVudDtcbiAgaWYgKGNvbXBvbmVudCA9PT0gJ3J0cCcpIHtcbiAgICBzZHAucHVzaCgxKTtcbiAgfSBlbHNlIGlmIChjb21wb25lbnQgPT09ICdydGNwJykge1xuICAgIHNkcC5wdXNoKDIpO1xuICB9IGVsc2Uge1xuICAgIHNkcC5wdXNoKGNvbXBvbmVudCk7XG4gIH1cbiAgc2RwLnB1c2goY2FuZGlkYXRlLnByb3RvY29sLnRvVXBwZXJDYXNlKCkpO1xuICBzZHAucHVzaChjYW5kaWRhdGUucHJpb3JpdHkpO1xuICBzZHAucHVzaChjYW5kaWRhdGUuYWRkcmVzcyB8fCBjYW5kaWRhdGUuaXApO1xuICBzZHAucHVzaChjYW5kaWRhdGUucG9ydCk7XG5cbiAgY29uc3QgdHlwZSA9IGNhbmRpZGF0ZS50eXBlO1xuICBzZHAucHVzaCgndHlwJyk7XG4gIHNkcC5wdXNoKHR5cGUpO1xuICBpZiAodHlwZSAhPT0gJ2hvc3QnICYmIGNhbmRpZGF0ZS5yZWxhdGVkQWRkcmVzcyAmJlxuICAgICAgY2FuZGlkYXRlLnJlbGF0ZWRQb3J0KSB7XG4gICAgc2RwLnB1c2goJ3JhZGRyJyk7XG4gICAgc2RwLnB1c2goY2FuZGlkYXRlLnJlbGF0ZWRBZGRyZXNzKTtcbiAgICBzZHAucHVzaCgncnBvcnQnKTtcbiAgICBzZHAucHVzaChjYW5kaWRhdGUucmVsYXRlZFBvcnQpO1xuICB9XG4gIGlmIChjYW5kaWRhdGUudGNwVHlwZSAmJiBjYW5kaWRhdGUucHJvdG9jb2wudG9Mb3dlckNhc2UoKSA9PT0gJ3RjcCcpIHtcbiAgICBzZHAucHVzaCgndGNwdHlwZScpO1xuICAgIHNkcC5wdXNoKGNhbmRpZGF0ZS50Y3BUeXBlKTtcbiAgfVxuICBpZiAoY2FuZGlkYXRlLnVzZXJuYW1lRnJhZ21lbnQgfHwgY2FuZGlkYXRlLnVmcmFnKSB7XG4gICAgc2RwLnB1c2goJ3VmcmFnJyk7XG4gICAgc2RwLnB1c2goY2FuZGlkYXRlLnVzZXJuYW1lRnJhZ21lbnQgfHwgY2FuZGlkYXRlLnVmcmFnKTtcbiAgfVxuICByZXR1cm4gJ2NhbmRpZGF0ZTonICsgc2RwLmpvaW4oJyAnKTtcbn07XG5cbi8vIFBhcnNlcyBhbiBpY2Utb3B0aW9ucyBsaW5lLCByZXR1cm5zIGFuIGFycmF5IG9mIG9wdGlvbiB0YWdzLlxuLy8gU2FtcGxlIGlucHV0OlxuLy8gYT1pY2Utb3B0aW9uczpmb28gYmFyXG5TRFBVdGlscy5wYXJzZUljZU9wdGlvbnMgPSBmdW5jdGlvbihsaW5lKSB7XG4gIHJldHVybiBsaW5lLnN1YnN0cmluZygxNCkuc3BsaXQoJyAnKTtcbn07XG5cbi8vIFBhcnNlcyBhIHJ0cG1hcCBsaW5lLCByZXR1cm5zIFJUQ1J0cENvZGRlY1BhcmFtZXRlcnMuIFNhbXBsZSBpbnB1dDpcbi8vIGE9cnRwbWFwOjExMSBvcHVzLzQ4MDAwLzJcblNEUFV0aWxzLnBhcnNlUnRwTWFwID0gZnVuY3Rpb24obGluZSkge1xuICBsZXQgcGFydHMgPSBsaW5lLnN1YnN0cmluZyg5KS5zcGxpdCgnICcpO1xuICBjb25zdCBwYXJzZWQgPSB7XG4gICAgcGF5bG9hZFR5cGU6IHBhcnNlSW50KHBhcnRzLnNoaWZ0KCksIDEwKSwgLy8gd2FzOiBpZFxuICB9O1xuXG4gIHBhcnRzID0gcGFydHNbMF0uc3BsaXQoJy8nKTtcblxuICBwYXJzZWQubmFtZSA9IHBhcnRzWzBdO1xuICBwYXJzZWQuY2xvY2tSYXRlID0gcGFyc2VJbnQocGFydHNbMV0sIDEwKTsgLy8gd2FzOiBjbG9ja3JhdGVcbiAgcGFyc2VkLmNoYW5uZWxzID0gcGFydHMubGVuZ3RoID09PSAzID8gcGFyc2VJbnQocGFydHNbMl0sIDEwKSA6IDE7XG4gIC8vIGxlZ2FjeSBhbGlhcywgZ290IHJlbmFtZWQgYmFjayB0byBjaGFubmVscyBpbiBPUlRDLlxuICBwYXJzZWQubnVtQ2hhbm5lbHMgPSBwYXJzZWQuY2hhbm5lbHM7XG4gIHJldHVybiBwYXJzZWQ7XG59O1xuXG4vLyBHZW5lcmF0ZXMgYSBydHBtYXAgbGluZSBmcm9tIFJUQ1J0cENvZGVjQ2FwYWJpbGl0eSBvclxuLy8gUlRDUnRwQ29kZWNQYXJhbWV0ZXJzLlxuU0RQVXRpbHMud3JpdGVSdHBNYXAgPSBmdW5jdGlvbihjb2RlYykge1xuICBsZXQgcHQgPSBjb2RlYy5wYXlsb2FkVHlwZTtcbiAgaWYgKGNvZGVjLnByZWZlcnJlZFBheWxvYWRUeXBlICE9PSB1bmRlZmluZWQpIHtcbiAgICBwdCA9IGNvZGVjLnByZWZlcnJlZFBheWxvYWRUeXBlO1xuICB9XG4gIGNvbnN0IGNoYW5uZWxzID0gY29kZWMuY2hhbm5lbHMgfHwgY29kZWMubnVtQ2hhbm5lbHMgfHwgMTtcbiAgcmV0dXJuICdhPXJ0cG1hcDonICsgcHQgKyAnICcgKyBjb2RlYy5uYW1lICsgJy8nICsgY29kZWMuY2xvY2tSYXRlICtcbiAgICAgIChjaGFubmVscyAhPT0gMSA/ICcvJyArIGNoYW5uZWxzIDogJycpICsgJ1xcclxcbic7XG59O1xuXG4vLyBQYXJzZXMgYSBleHRtYXAgbGluZSAoaGVhZGVyZXh0ZW5zaW9uIGZyb20gUkZDIDUyODUpLiBTYW1wbGUgaW5wdXQ6XG4vLyBhPWV4dG1hcDoyIHVybjppZXRmOnBhcmFtczpydHAtaGRyZXh0OnRvZmZzZXRcbi8vIGE9ZXh0bWFwOjIvc2VuZG9ubHkgdXJuOmlldGY6cGFyYW1zOnJ0cC1oZHJleHQ6dG9mZnNldFxuU0RQVXRpbHMucGFyc2VFeHRtYXAgPSBmdW5jdGlvbihsaW5lKSB7XG4gIGNvbnN0IHBhcnRzID0gbGluZS5zdWJzdHJpbmcoOSkuc3BsaXQoJyAnKTtcbiAgcmV0dXJuIHtcbiAgICBpZDogcGFyc2VJbnQocGFydHNbMF0sIDEwKSxcbiAgICBkaXJlY3Rpb246IHBhcnRzWzBdLmluZGV4T2YoJy8nKSA+IDAgPyBwYXJ0c1swXS5zcGxpdCgnLycpWzFdIDogJ3NlbmRyZWN2JyxcbiAgICB1cmk6IHBhcnRzWzFdLFxuICAgIGF0dHJpYnV0ZXM6IHBhcnRzLnNsaWNlKDIpLmpvaW4oJyAnKSxcbiAgfTtcbn07XG5cbi8vIEdlbmVyYXRlcyBhbiBleHRtYXAgbGluZSBmcm9tIFJUQ1J0cEhlYWRlckV4dGVuc2lvblBhcmFtZXRlcnMgb3Jcbi8vIFJUQ1J0cEhlYWRlckV4dGVuc2lvbi5cblNEUFV0aWxzLndyaXRlRXh0bWFwID0gZnVuY3Rpb24oaGVhZGVyRXh0ZW5zaW9uKSB7XG4gIHJldHVybiAnYT1leHRtYXA6JyArIChoZWFkZXJFeHRlbnNpb24uaWQgfHwgaGVhZGVyRXh0ZW5zaW9uLnByZWZlcnJlZElkKSArXG4gICAgICAoaGVhZGVyRXh0ZW5zaW9uLmRpcmVjdGlvbiAmJiBoZWFkZXJFeHRlbnNpb24uZGlyZWN0aW9uICE9PSAnc2VuZHJlY3YnXG4gICAgICAgID8gJy8nICsgaGVhZGVyRXh0ZW5zaW9uLmRpcmVjdGlvblxuICAgICAgICA6ICcnKSArXG4gICAgICAnICcgKyBoZWFkZXJFeHRlbnNpb24udXJpICtcbiAgICAgIChoZWFkZXJFeHRlbnNpb24uYXR0cmlidXRlcyA/ICcgJyArIGhlYWRlckV4dGVuc2lvbi5hdHRyaWJ1dGVzIDogJycpICtcbiAgICAgICdcXHJcXG4nO1xufTtcblxuLy8gUGFyc2VzIGEgZm10cCBsaW5lLCByZXR1cm5zIGRpY3Rpb25hcnkuIFNhbXBsZSBpbnB1dDpcbi8vIGE9Zm10cDo5NiB2YnI9b247Y25nPW9uXG4vLyBBbHNvIGRlYWxzIHdpdGggdmJyPW9uOyBjbmc9b25cblNEUFV0aWxzLnBhcnNlRm10cCA9IGZ1bmN0aW9uKGxpbmUpIHtcbiAgY29uc3QgcGFyc2VkID0ge307XG4gIGxldCBrdjtcbiAgY29uc3QgcGFydHMgPSBsaW5lLnN1YnN0cmluZyhsaW5lLmluZGV4T2YoJyAnKSArIDEpLnNwbGl0KCc7Jyk7XG4gIGZvciAobGV0IGogPSAwOyBqIDwgcGFydHMubGVuZ3RoOyBqKyspIHtcbiAgICBrdiA9IHBhcnRzW2pdLnRyaW0oKS5zcGxpdCgnPScpO1xuICAgIHBhcnNlZFtrdlswXS50cmltKCldID0ga3ZbMV07XG4gIH1cbiAgcmV0dXJuIHBhcnNlZDtcbn07XG5cbi8vIEdlbmVyYXRlcyBhIGZtdHAgbGluZSBmcm9tIFJUQ1J0cENvZGVjQ2FwYWJpbGl0eSBvciBSVENSdHBDb2RlY1BhcmFtZXRlcnMuXG5TRFBVdGlscy53cml0ZUZtdHAgPSBmdW5jdGlvbihjb2RlYykge1xuICBsZXQgbGluZSA9ICcnO1xuICBsZXQgcHQgPSBjb2RlYy5wYXlsb2FkVHlwZTtcbiAgaWYgKGNvZGVjLnByZWZlcnJlZFBheWxvYWRUeXBlICE9PSB1bmRlZmluZWQpIHtcbiAgICBwdCA9IGNvZGVjLnByZWZlcnJlZFBheWxvYWRUeXBlO1xuICB9XG4gIGlmIChjb2RlYy5wYXJhbWV0ZXJzICYmIE9iamVjdC5rZXlzKGNvZGVjLnBhcmFtZXRlcnMpLmxlbmd0aCkge1xuICAgIGNvbnN0IHBhcmFtcyA9IFtdO1xuICAgIE9iamVjdC5rZXlzKGNvZGVjLnBhcmFtZXRlcnMpLmZvckVhY2gocGFyYW0gPT4ge1xuICAgICAgaWYgKGNvZGVjLnBhcmFtZXRlcnNbcGFyYW1dICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcGFyYW1zLnB1c2gocGFyYW0gKyAnPScgKyBjb2RlYy5wYXJhbWV0ZXJzW3BhcmFtXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJhbXMucHVzaChwYXJhbSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgbGluZSArPSAnYT1mbXRwOicgKyBwdCArICcgJyArIHBhcmFtcy5qb2luKCc7JykgKyAnXFxyXFxuJztcbiAgfVxuICByZXR1cm4gbGluZTtcbn07XG5cbi8vIFBhcnNlcyBhIHJ0Y3AtZmIgbGluZSwgcmV0dXJucyBSVENQUnRjcEZlZWRiYWNrIG9iamVjdC4gU2FtcGxlIGlucHV0OlxuLy8gYT1ydGNwLWZiOjk4IG5hY2sgcnBzaVxuU0RQVXRpbHMucGFyc2VSdGNwRmIgPSBmdW5jdGlvbihsaW5lKSB7XG4gIGNvbnN0IHBhcnRzID0gbGluZS5zdWJzdHJpbmcobGluZS5pbmRleE9mKCcgJykgKyAxKS5zcGxpdCgnICcpO1xuICByZXR1cm4ge1xuICAgIHR5cGU6IHBhcnRzLnNoaWZ0KCksXG4gICAgcGFyYW1ldGVyOiBwYXJ0cy5qb2luKCcgJyksXG4gIH07XG59O1xuXG4vLyBHZW5lcmF0ZSBhPXJ0Y3AtZmIgbGluZXMgZnJvbSBSVENSdHBDb2RlY0NhcGFiaWxpdHkgb3IgUlRDUnRwQ29kZWNQYXJhbWV0ZXJzLlxuU0RQVXRpbHMud3JpdGVSdGNwRmIgPSBmdW5jdGlvbihjb2RlYykge1xuICBsZXQgbGluZXMgPSAnJztcbiAgbGV0IHB0ID0gY29kZWMucGF5bG9hZFR5cGU7XG4gIGlmIChjb2RlYy5wcmVmZXJyZWRQYXlsb2FkVHlwZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcHQgPSBjb2RlYy5wcmVmZXJyZWRQYXlsb2FkVHlwZTtcbiAgfVxuICBpZiAoY29kZWMucnRjcEZlZWRiYWNrICYmIGNvZGVjLnJ0Y3BGZWVkYmFjay5sZW5ndGgpIHtcbiAgICAvLyBGSVhNRTogc3BlY2lhbCBoYW5kbGluZyBmb3IgdHJyLWludD9cbiAgICBjb2RlYy5ydGNwRmVlZGJhY2suZm9yRWFjaChmYiA9PiB7XG4gICAgICBsaW5lcyArPSAnYT1ydGNwLWZiOicgKyBwdCArICcgJyArIGZiLnR5cGUgK1xuICAgICAgKGZiLnBhcmFtZXRlciAmJiBmYi5wYXJhbWV0ZXIubGVuZ3RoID8gJyAnICsgZmIucGFyYW1ldGVyIDogJycpICtcbiAgICAgICAgICAnXFxyXFxuJztcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gbGluZXM7XG59O1xuXG4vLyBQYXJzZXMgYSBSRkMgNTU3NiBzc3JjIG1lZGlhIGF0dHJpYnV0ZS4gU2FtcGxlIGlucHV0OlxuLy8gYT1zc3JjOjM3MzU5Mjg1NTkgY25hbWU6c29tZXRoaW5nXG5TRFBVdGlscy5wYXJzZVNzcmNNZWRpYSA9IGZ1bmN0aW9uKGxpbmUpIHtcbiAgY29uc3Qgc3AgPSBsaW5lLmluZGV4T2YoJyAnKTtcbiAgY29uc3QgcGFydHMgPSB7XG4gICAgc3NyYzogcGFyc2VJbnQobGluZS5zdWJzdHJpbmcoNywgc3ApLCAxMCksXG4gIH07XG4gIGNvbnN0IGNvbG9uID0gbGluZS5pbmRleE9mKCc6Jywgc3ApO1xuICBpZiAoY29sb24gPiAtMSkge1xuICAgIHBhcnRzLmF0dHJpYnV0ZSA9IGxpbmUuc3Vic3RyaW5nKHNwICsgMSwgY29sb24pO1xuICAgIHBhcnRzLnZhbHVlID0gbGluZS5zdWJzdHJpbmcoY29sb24gKyAxKTtcbiAgfSBlbHNlIHtcbiAgICBwYXJ0cy5hdHRyaWJ1dGUgPSBsaW5lLnN1YnN0cmluZyhzcCArIDEpO1xuICB9XG4gIHJldHVybiBwYXJ0cztcbn07XG5cbi8vIFBhcnNlIGEgc3NyYy1ncm91cCBsaW5lIChzZWUgUkZDIDU1NzYpLiBTYW1wbGUgaW5wdXQ6XG4vLyBhPXNzcmMtZ3JvdXA6c2VtYW50aWNzIDEyIDM0XG5TRFBVdGlscy5wYXJzZVNzcmNHcm91cCA9IGZ1bmN0aW9uKGxpbmUpIHtcbiAgY29uc3QgcGFydHMgPSBsaW5lLnN1YnN0cmluZygxMykuc3BsaXQoJyAnKTtcbiAgcmV0dXJuIHtcbiAgICBzZW1hbnRpY3M6IHBhcnRzLnNoaWZ0KCksXG4gICAgc3NyY3M6IHBhcnRzLm1hcChzc3JjID0+IHBhcnNlSW50KHNzcmMsIDEwKSksXG4gIH07XG59O1xuXG4vLyBFeHRyYWN0cyB0aGUgTUlEIChSRkMgNTg4OCkgZnJvbSBhIG1lZGlhIHNlY3Rpb24uXG4vLyBSZXR1cm5zIHRoZSBNSUQgb3IgdW5kZWZpbmVkIGlmIG5vIG1pZCBsaW5lIHdhcyBmb3VuZC5cblNEUFV0aWxzLmdldE1pZCA9IGZ1bmN0aW9uKG1lZGlhU2VjdGlvbikge1xuICBjb25zdCBtaWQgPSBTRFBVdGlscy5tYXRjaFByZWZpeChtZWRpYVNlY3Rpb24sICdhPW1pZDonKVswXTtcbiAgaWYgKG1pZCkge1xuICAgIHJldHVybiBtaWQuc3Vic3RyaW5nKDYpO1xuICB9XG59O1xuXG4vLyBQYXJzZXMgYSBmaW5nZXJwcmludCBsaW5lIGZvciBEVExTLVNSVFAuXG5TRFBVdGlscy5wYXJzZUZpbmdlcnByaW50ID0gZnVuY3Rpb24obGluZSkge1xuICBjb25zdCBwYXJ0cyA9IGxpbmUuc3Vic3RyaW5nKDE0KS5zcGxpdCgnICcpO1xuICByZXR1cm4ge1xuICAgIGFsZ29yaXRobTogcGFydHNbMF0udG9Mb3dlckNhc2UoKSwgLy8gYWxnb3JpdGhtIGlzIGNhc2Utc2Vuc2l0aXZlIGluIEVkZ2UuXG4gICAgdmFsdWU6IHBhcnRzWzFdLnRvVXBwZXJDYXNlKCksIC8vIHRoZSBkZWZpbml0aW9uIGlzIHVwcGVyLWNhc2UgaW4gUkZDIDQ1NzIuXG4gIH07XG59O1xuXG4vLyBFeHRyYWN0cyBEVExTIHBhcmFtZXRlcnMgZnJvbSBTRFAgbWVkaWEgc2VjdGlvbiBvciBzZXNzaW9ucGFydC5cbi8vIEZJWE1FOiBmb3IgY29uc2lzdGVuY3kgd2l0aCBvdGhlciBmdW5jdGlvbnMgdGhpcyBzaG91bGQgb25seVxuLy8gICBnZXQgdGhlIGZpbmdlcnByaW50IGxpbmUgYXMgaW5wdXQuIFNlZSBhbHNvIGdldEljZVBhcmFtZXRlcnMuXG5TRFBVdGlscy5nZXREdGxzUGFyYW1ldGVycyA9IGZ1bmN0aW9uKG1lZGlhU2VjdGlvbiwgc2Vzc2lvbnBhcnQpIHtcbiAgY29uc3QgbGluZXMgPSBTRFBVdGlscy5tYXRjaFByZWZpeChtZWRpYVNlY3Rpb24gKyBzZXNzaW9ucGFydCxcbiAgICAnYT1maW5nZXJwcmludDonKTtcbiAgLy8gTm90ZTogYT1zZXR1cCBsaW5lIGlzIGlnbm9yZWQgc2luY2Ugd2UgdXNlIHRoZSAnYXV0bycgcm9sZSBpbiBFZGdlLlxuICByZXR1cm4ge1xuICAgIHJvbGU6ICdhdXRvJyxcbiAgICBmaW5nZXJwcmludHM6IGxpbmVzLm1hcChTRFBVdGlscy5wYXJzZUZpbmdlcnByaW50KSxcbiAgfTtcbn07XG5cbi8vIFNlcmlhbGl6ZXMgRFRMUyBwYXJhbWV0ZXJzIHRvIFNEUC5cblNEUFV0aWxzLndyaXRlRHRsc1BhcmFtZXRlcnMgPSBmdW5jdGlvbihwYXJhbXMsIHNldHVwVHlwZSkge1xuICBsZXQgc2RwID0gJ2E9c2V0dXA6JyArIHNldHVwVHlwZSArICdcXHJcXG4nO1xuICBwYXJhbXMuZmluZ2VycHJpbnRzLmZvckVhY2goZnAgPT4ge1xuICAgIHNkcCArPSAnYT1maW5nZXJwcmludDonICsgZnAuYWxnb3JpdGhtICsgJyAnICsgZnAudmFsdWUgKyAnXFxyXFxuJztcbiAgfSk7XG4gIHJldHVybiBzZHA7XG59O1xuXG4vLyBQYXJzZXMgYT1jcnlwdG8gbGluZXMgaW50b1xuLy8gICBodHRwczovL3Jhd2dpdC5jb20vYWJvYmEvZWRnZXJ0Yy9tYXN0ZXIvbXNvcnRjLXJzNC5odG1sI2RpY3Rpb25hcnktcnRjc3J0cHNkZXNwYXJhbWV0ZXJzLW1lbWJlcnNcblNEUFV0aWxzLnBhcnNlQ3J5cHRvTGluZSA9IGZ1bmN0aW9uKGxpbmUpIHtcbiAgY29uc3QgcGFydHMgPSBsaW5lLnN1YnN0cmluZyg5KS5zcGxpdCgnICcpO1xuICByZXR1cm4ge1xuICAgIHRhZzogcGFyc2VJbnQocGFydHNbMF0sIDEwKSxcbiAgICBjcnlwdG9TdWl0ZTogcGFydHNbMV0sXG4gICAga2V5UGFyYW1zOiBwYXJ0c1syXSxcbiAgICBzZXNzaW9uUGFyYW1zOiBwYXJ0cy5zbGljZSgzKSxcbiAgfTtcbn07XG5cblNEUFV0aWxzLndyaXRlQ3J5cHRvTGluZSA9IGZ1bmN0aW9uKHBhcmFtZXRlcnMpIHtcbiAgcmV0dXJuICdhPWNyeXB0bzonICsgcGFyYW1ldGVycy50YWcgKyAnICcgK1xuICAgIHBhcmFtZXRlcnMuY3J5cHRvU3VpdGUgKyAnICcgK1xuICAgICh0eXBlb2YgcGFyYW1ldGVycy5rZXlQYXJhbXMgPT09ICdvYmplY3QnXG4gICAgICA/IFNEUFV0aWxzLndyaXRlQ3J5cHRvS2V5UGFyYW1zKHBhcmFtZXRlcnMua2V5UGFyYW1zKVxuICAgICAgOiBwYXJhbWV0ZXJzLmtleVBhcmFtcykgK1xuICAgIChwYXJhbWV0ZXJzLnNlc3Npb25QYXJhbXMgPyAnICcgKyBwYXJhbWV0ZXJzLnNlc3Npb25QYXJhbXMuam9pbignICcpIDogJycpICtcbiAgICAnXFxyXFxuJztcbn07XG5cbi8vIFBhcnNlcyB0aGUgY3J5cHRvIGtleSBwYXJhbWV0ZXJzIGludG9cbi8vICAgaHR0cHM6Ly9yYXdnaXQuY29tL2Fib2JhL2VkZ2VydGMvbWFzdGVyL21zb3J0Yy1yczQuaHRtbCNydGNzcnRwa2V5cGFyYW0qXG5TRFBVdGlscy5wYXJzZUNyeXB0b0tleVBhcmFtcyA9IGZ1bmN0aW9uKGtleVBhcmFtcykge1xuICBpZiAoa2V5UGFyYW1zLmluZGV4T2YoJ2lubGluZTonKSAhPT0gMCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGNvbnN0IHBhcnRzID0ga2V5UGFyYW1zLnN1YnN0cmluZyg3KS5zcGxpdCgnfCcpO1xuICByZXR1cm4ge1xuICAgIGtleU1ldGhvZDogJ2lubGluZScsXG4gICAga2V5U2FsdDogcGFydHNbMF0sXG4gICAgbGlmZVRpbWU6IHBhcnRzWzFdLFxuICAgIG1raVZhbHVlOiBwYXJ0c1syXSA/IHBhcnRzWzJdLnNwbGl0KCc6JylbMF0gOiB1bmRlZmluZWQsXG4gICAgbWtpTGVuZ3RoOiBwYXJ0c1syXSA/IHBhcnRzWzJdLnNwbGl0KCc6JylbMV0gOiB1bmRlZmluZWQsXG4gIH07XG59O1xuXG5TRFBVdGlscy53cml0ZUNyeXB0b0tleVBhcmFtcyA9IGZ1bmN0aW9uKGtleVBhcmFtcykge1xuICByZXR1cm4ga2V5UGFyYW1zLmtleU1ldGhvZCArICc6J1xuICAgICsga2V5UGFyYW1zLmtleVNhbHQgK1xuICAgIChrZXlQYXJhbXMubGlmZVRpbWUgPyAnfCcgKyBrZXlQYXJhbXMubGlmZVRpbWUgOiAnJykgK1xuICAgIChrZXlQYXJhbXMubWtpVmFsdWUgJiYga2V5UGFyYW1zLm1raUxlbmd0aFxuICAgICAgPyAnfCcgKyBrZXlQYXJhbXMubWtpVmFsdWUgKyAnOicgKyBrZXlQYXJhbXMubWtpTGVuZ3RoXG4gICAgICA6ICcnKTtcbn07XG5cbi8vIEV4dHJhY3RzIGFsbCBTREVTIHBhcmFtZXRlcnMuXG5TRFBVdGlscy5nZXRDcnlwdG9QYXJhbWV0ZXJzID0gZnVuY3Rpb24obWVkaWFTZWN0aW9uLCBzZXNzaW9ucGFydCkge1xuICBjb25zdCBsaW5lcyA9IFNEUFV0aWxzLm1hdGNoUHJlZml4KG1lZGlhU2VjdGlvbiArIHNlc3Npb25wYXJ0LFxuICAgICdhPWNyeXB0bzonKTtcbiAgcmV0dXJuIGxpbmVzLm1hcChTRFBVdGlscy5wYXJzZUNyeXB0b0xpbmUpO1xufTtcblxuLy8gUGFyc2VzIElDRSBpbmZvcm1hdGlvbiBmcm9tIFNEUCBtZWRpYSBzZWN0aW9uIG9yIHNlc3Npb25wYXJ0LlxuLy8gRklYTUU6IGZvciBjb25zaXN0ZW5jeSB3aXRoIG90aGVyIGZ1bmN0aW9ucyB0aGlzIHNob3VsZCBvbmx5XG4vLyAgIGdldCB0aGUgaWNlLXVmcmFnIGFuZCBpY2UtcHdkIGxpbmVzIGFzIGlucHV0LlxuU0RQVXRpbHMuZ2V0SWNlUGFyYW1ldGVycyA9IGZ1bmN0aW9uKG1lZGlhU2VjdGlvbiwgc2Vzc2lvbnBhcnQpIHtcbiAgY29uc3QgdWZyYWcgPSBTRFBVdGlscy5tYXRjaFByZWZpeChtZWRpYVNlY3Rpb24gKyBzZXNzaW9ucGFydCxcbiAgICAnYT1pY2UtdWZyYWc6JylbMF07XG4gIGNvbnN0IHB3ZCA9IFNEUFV0aWxzLm1hdGNoUHJlZml4KG1lZGlhU2VjdGlvbiArIHNlc3Npb25wYXJ0LFxuICAgICdhPWljZS1wd2Q6JylbMF07XG4gIGlmICghKHVmcmFnICYmIHB3ZCkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4ge1xuICAgIHVzZXJuYW1lRnJhZ21lbnQ6IHVmcmFnLnN1YnN0cmluZygxMiksXG4gICAgcGFzc3dvcmQ6IHB3ZC5zdWJzdHJpbmcoMTApLFxuICB9O1xufTtcblxuLy8gU2VyaWFsaXplcyBJQ0UgcGFyYW1ldGVycyB0byBTRFAuXG5TRFBVdGlscy53cml0ZUljZVBhcmFtZXRlcnMgPSBmdW5jdGlvbihwYXJhbXMpIHtcbiAgbGV0IHNkcCA9ICdhPWljZS11ZnJhZzonICsgcGFyYW1zLnVzZXJuYW1lRnJhZ21lbnQgKyAnXFxyXFxuJyArXG4gICAgICAnYT1pY2UtcHdkOicgKyBwYXJhbXMucGFzc3dvcmQgKyAnXFxyXFxuJztcbiAgaWYgKHBhcmFtcy5pY2VMaXRlKSB7XG4gICAgc2RwICs9ICdhPWljZS1saXRlXFxyXFxuJztcbiAgfVxuICByZXR1cm4gc2RwO1xufTtcblxuLy8gUGFyc2VzIHRoZSBTRFAgbWVkaWEgc2VjdGlvbiBhbmQgcmV0dXJucyBSVENSdHBQYXJhbWV0ZXJzLlxuU0RQVXRpbHMucGFyc2VSdHBQYXJhbWV0ZXJzID0gZnVuY3Rpb24obWVkaWFTZWN0aW9uKSB7XG4gIGNvbnN0IGRlc2NyaXB0aW9uID0ge1xuICAgIGNvZGVjczogW10sXG4gICAgaGVhZGVyRXh0ZW5zaW9uczogW10sXG4gICAgZmVjTWVjaGFuaXNtczogW10sXG4gICAgcnRjcDogW10sXG4gIH07XG4gIGNvbnN0IGxpbmVzID0gU0RQVXRpbHMuc3BsaXRMaW5lcyhtZWRpYVNlY3Rpb24pO1xuICBjb25zdCBtbGluZSA9IGxpbmVzWzBdLnNwbGl0KCcgJyk7XG4gIGZvciAobGV0IGkgPSAzOyBpIDwgbWxpbmUubGVuZ3RoOyBpKyspIHsgLy8gZmluZCBhbGwgY29kZWNzIGZyb20gbWxpbmVbMy4uXVxuICAgIGNvbnN0IHB0ID0gbWxpbmVbaV07XG4gICAgY29uc3QgcnRwbWFwbGluZSA9IFNEUFV0aWxzLm1hdGNoUHJlZml4KFxuICAgICAgbWVkaWFTZWN0aW9uLCAnYT1ydHBtYXA6JyArIHB0ICsgJyAnKVswXTtcbiAgICBpZiAocnRwbWFwbGluZSkge1xuICAgICAgY29uc3QgY29kZWMgPSBTRFBVdGlscy5wYXJzZVJ0cE1hcChydHBtYXBsaW5lKTtcbiAgICAgIGNvbnN0IGZtdHBzID0gU0RQVXRpbHMubWF0Y2hQcmVmaXgoXG4gICAgICAgIG1lZGlhU2VjdGlvbiwgJ2E9Zm10cDonICsgcHQgKyAnICcpO1xuICAgICAgLy8gT25seSB0aGUgZmlyc3QgYT1mbXRwOjxwdD4gaXMgY29uc2lkZXJlZC5cbiAgICAgIGNvZGVjLnBhcmFtZXRlcnMgPSBmbXRwcy5sZW5ndGggPyBTRFBVdGlscy5wYXJzZUZtdHAoZm10cHNbMF0pIDoge307XG4gICAgICBjb2RlYy5ydGNwRmVlZGJhY2sgPSBTRFBVdGlscy5tYXRjaFByZWZpeChcbiAgICAgICAgbWVkaWFTZWN0aW9uLCAnYT1ydGNwLWZiOicgKyBwdCArICcgJylcbiAgICAgICAgLm1hcChTRFBVdGlscy5wYXJzZVJ0Y3BGYik7XG4gICAgICBkZXNjcmlwdGlvbi5jb2RlY3MucHVzaChjb2RlYyk7XG4gICAgICAvLyBwYXJzZSBGRUMgbWVjaGFuaXNtcyBmcm9tIHJ0cG1hcCBsaW5lcy5cbiAgICAgIHN3aXRjaCAoY29kZWMubmFtZS50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICAgIGNhc2UgJ1JFRCc6XG4gICAgICAgIGNhc2UgJ1VMUEZFQyc6XG4gICAgICAgICAgZGVzY3JpcHRpb24uZmVjTWVjaGFuaXNtcy5wdXNoKGNvZGVjLm5hbWUudG9VcHBlckNhc2UoKSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6IC8vIG9ubHkgUkVEIGFuZCBVTFBGRUMgYXJlIHJlY29nbml6ZWQgYXMgRkVDIG1lY2hhbmlzbXMuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIFNEUFV0aWxzLm1hdGNoUHJlZml4KG1lZGlhU2VjdGlvbiwgJ2E9ZXh0bWFwOicpLmZvckVhY2gobGluZSA9PiB7XG4gICAgZGVzY3JpcHRpb24uaGVhZGVyRXh0ZW5zaW9ucy5wdXNoKFNEUFV0aWxzLnBhcnNlRXh0bWFwKGxpbmUpKTtcbiAgfSk7XG4gIGNvbnN0IHdpbGRjYXJkUnRjcEZiID0gU0RQVXRpbHMubWF0Y2hQcmVmaXgobWVkaWFTZWN0aW9uLCAnYT1ydGNwLWZiOiogJylcbiAgICAubWFwKFNEUFV0aWxzLnBhcnNlUnRjcEZiKTtcbiAgZGVzY3JpcHRpb24uY29kZWNzLmZvckVhY2goY29kZWMgPT4ge1xuICAgIHdpbGRjYXJkUnRjcEZiLmZvckVhY2goZmI9PiB7XG4gICAgICBjb25zdCBkdXBsaWNhdGUgPSBjb2RlYy5ydGNwRmVlZGJhY2suZmluZChleGlzdGluZ0ZlZWRiYWNrID0+IHtcbiAgICAgICAgcmV0dXJuIGV4aXN0aW5nRmVlZGJhY2sudHlwZSA9PT0gZmIudHlwZSAmJlxuICAgICAgICAgIGV4aXN0aW5nRmVlZGJhY2sucGFyYW1ldGVyID09PSBmYi5wYXJhbWV0ZXI7XG4gICAgICB9KTtcbiAgICAgIGlmICghZHVwbGljYXRlKSB7XG4gICAgICAgIGNvZGVjLnJ0Y3BGZWVkYmFjay5wdXNoKGZiKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG4gIC8vIEZJWE1FOiBwYXJzZSBydGNwLlxuICByZXR1cm4gZGVzY3JpcHRpb247XG59O1xuXG4vLyBHZW5lcmF0ZXMgcGFydHMgb2YgdGhlIFNEUCBtZWRpYSBzZWN0aW9uIGRlc2NyaWJpbmcgdGhlIGNhcGFiaWxpdGllcyAvXG4vLyBwYXJhbWV0ZXJzLlxuU0RQVXRpbHMud3JpdGVSdHBEZXNjcmlwdGlvbiA9IGZ1bmN0aW9uKGtpbmQsIGNhcHMpIHtcbiAgbGV0IHNkcCA9ICcnO1xuXG4gIC8vIEJ1aWxkIHRoZSBtbGluZS5cbiAgc2RwICs9ICdtPScgKyBraW5kICsgJyAnO1xuICBzZHAgKz0gY2Fwcy5jb2RlY3MubGVuZ3RoID4gMCA/ICc5JyA6ICcwJzsgLy8gcmVqZWN0IGlmIG5vIGNvZGVjcy5cbiAgc2RwICs9ICcgVURQL1RMUy9SVFAvU0FWUEYgJztcbiAgc2RwICs9IGNhcHMuY29kZWNzLm1hcChjb2RlYyA9PiB7XG4gICAgaWYgKGNvZGVjLnByZWZlcnJlZFBheWxvYWRUeXBlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBjb2RlYy5wcmVmZXJyZWRQYXlsb2FkVHlwZTtcbiAgICB9XG4gICAgcmV0dXJuIGNvZGVjLnBheWxvYWRUeXBlO1xuICB9KS5qb2luKCcgJykgKyAnXFxyXFxuJztcblxuICBzZHAgKz0gJ2M9SU4gSVA0IDAuMC4wLjBcXHJcXG4nO1xuICBzZHAgKz0gJ2E9cnRjcDo5IElOIElQNCAwLjAuMC4wXFxyXFxuJztcblxuICAvLyBBZGQgYT1ydHBtYXAgbGluZXMgZm9yIGVhY2ggY29kZWMuIEFsc28gZm10cCBhbmQgcnRjcC1mYi5cbiAgY2Fwcy5jb2RlY3MuZm9yRWFjaChjb2RlYyA9PiB7XG4gICAgc2RwICs9IFNEUFV0aWxzLndyaXRlUnRwTWFwKGNvZGVjKTtcbiAgICBzZHAgKz0gU0RQVXRpbHMud3JpdGVGbXRwKGNvZGVjKTtcbiAgICBzZHAgKz0gU0RQVXRpbHMud3JpdGVSdGNwRmIoY29kZWMpO1xuICB9KTtcbiAgbGV0IG1heHB0aW1lID0gMDtcbiAgY2Fwcy5jb2RlY3MuZm9yRWFjaChjb2RlYyA9PiB7XG4gICAgaWYgKGNvZGVjLm1heHB0aW1lID4gbWF4cHRpbWUpIHtcbiAgICAgIG1heHB0aW1lID0gY29kZWMubWF4cHRpbWU7XG4gICAgfVxuICB9KTtcbiAgaWYgKG1heHB0aW1lID4gMCkge1xuICAgIHNkcCArPSAnYT1tYXhwdGltZTonICsgbWF4cHRpbWUgKyAnXFxyXFxuJztcbiAgfVxuXG4gIGlmIChjYXBzLmhlYWRlckV4dGVuc2lvbnMpIHtcbiAgICBjYXBzLmhlYWRlckV4dGVuc2lvbnMuZm9yRWFjaChleHRlbnNpb24gPT4ge1xuICAgICAgc2RwICs9IFNEUFV0aWxzLndyaXRlRXh0bWFwKGV4dGVuc2lvbik7XG4gICAgfSk7XG4gIH1cbiAgLy8gRklYTUU6IHdyaXRlIGZlY01lY2hhbmlzbXMuXG4gIHJldHVybiBzZHA7XG59O1xuXG4vLyBQYXJzZXMgdGhlIFNEUCBtZWRpYSBzZWN0aW9uIGFuZCByZXR1cm5zIGFuIGFycmF5IG9mXG4vLyBSVENSdHBFbmNvZGluZ1BhcmFtZXRlcnMuXG5TRFBVdGlscy5wYXJzZVJ0cEVuY29kaW5nUGFyYW1ldGVycyA9IGZ1bmN0aW9uKG1lZGlhU2VjdGlvbikge1xuICBjb25zdCBlbmNvZGluZ1BhcmFtZXRlcnMgPSBbXTtcbiAgY29uc3QgZGVzY3JpcHRpb24gPSBTRFBVdGlscy5wYXJzZVJ0cFBhcmFtZXRlcnMobWVkaWFTZWN0aW9uKTtcbiAgY29uc3QgaGFzUmVkID0gZGVzY3JpcHRpb24uZmVjTWVjaGFuaXNtcy5pbmRleE9mKCdSRUQnKSAhPT0gLTE7XG4gIGNvbnN0IGhhc1VscGZlYyA9IGRlc2NyaXB0aW9uLmZlY01lY2hhbmlzbXMuaW5kZXhPZignVUxQRkVDJykgIT09IC0xO1xuXG4gIC8vIGZpbHRlciBhPXNzcmM6Li4uIGNuYW1lOiwgaWdub3JlIFBsYW5CLW1zaWRcbiAgY29uc3Qgc3NyY3MgPSBTRFBVdGlscy5tYXRjaFByZWZpeChtZWRpYVNlY3Rpb24sICdhPXNzcmM6JylcbiAgICAubWFwKGxpbmUgPT4gU0RQVXRpbHMucGFyc2VTc3JjTWVkaWEobGluZSkpXG4gICAgLmZpbHRlcihwYXJ0cyA9PiBwYXJ0cy5hdHRyaWJ1dGUgPT09ICdjbmFtZScpO1xuICBjb25zdCBwcmltYXJ5U3NyYyA9IHNzcmNzLmxlbmd0aCA+IDAgJiYgc3NyY3NbMF0uc3NyYztcbiAgbGV0IHNlY29uZGFyeVNzcmM7XG5cbiAgY29uc3QgZmxvd3MgPSBTRFBVdGlscy5tYXRjaFByZWZpeChtZWRpYVNlY3Rpb24sICdhPXNzcmMtZ3JvdXA6RklEJylcbiAgICAubWFwKGxpbmUgPT4ge1xuICAgICAgY29uc3QgcGFydHMgPSBsaW5lLnN1YnN0cmluZygxNykuc3BsaXQoJyAnKTtcbiAgICAgIHJldHVybiBwYXJ0cy5tYXAocGFydCA9PiBwYXJzZUludChwYXJ0LCAxMCkpO1xuICAgIH0pO1xuICBpZiAoZmxvd3MubGVuZ3RoID4gMCAmJiBmbG93c1swXS5sZW5ndGggPiAxICYmIGZsb3dzWzBdWzBdID09PSBwcmltYXJ5U3NyYykge1xuICAgIHNlY29uZGFyeVNzcmMgPSBmbG93c1swXVsxXTtcbiAgfVxuXG4gIGRlc2NyaXB0aW9uLmNvZGVjcy5mb3JFYWNoKGNvZGVjID0+IHtcbiAgICBpZiAoY29kZWMubmFtZS50b1VwcGVyQ2FzZSgpID09PSAnUlRYJyAmJiBjb2RlYy5wYXJhbWV0ZXJzLmFwdCkge1xuICAgICAgbGV0IGVuY1BhcmFtID0ge1xuICAgICAgICBzc3JjOiBwcmltYXJ5U3NyYyxcbiAgICAgICAgY29kZWNQYXlsb2FkVHlwZTogcGFyc2VJbnQoY29kZWMucGFyYW1ldGVycy5hcHQsIDEwKSxcbiAgICAgIH07XG4gICAgICBpZiAocHJpbWFyeVNzcmMgJiYgc2Vjb25kYXJ5U3NyYykge1xuICAgICAgICBlbmNQYXJhbS5ydHggPSB7c3NyYzogc2Vjb25kYXJ5U3NyY307XG4gICAgICB9XG4gICAgICBlbmNvZGluZ1BhcmFtZXRlcnMucHVzaChlbmNQYXJhbSk7XG4gICAgICBpZiAoaGFzUmVkKSB7XG4gICAgICAgIGVuY1BhcmFtID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShlbmNQYXJhbSkpO1xuICAgICAgICBlbmNQYXJhbS5mZWMgPSB7XG4gICAgICAgICAgc3NyYzogcHJpbWFyeVNzcmMsXG4gICAgICAgICAgbWVjaGFuaXNtOiBoYXNVbHBmZWMgPyAncmVkK3VscGZlYycgOiAncmVkJyxcbiAgICAgICAgfTtcbiAgICAgICAgZW5jb2RpbmdQYXJhbWV0ZXJzLnB1c2goZW5jUGFyYW0pO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIGlmIChlbmNvZGluZ1BhcmFtZXRlcnMubGVuZ3RoID09PSAwICYmIHByaW1hcnlTc3JjKSB7XG4gICAgZW5jb2RpbmdQYXJhbWV0ZXJzLnB1c2goe1xuICAgICAgc3NyYzogcHJpbWFyeVNzcmMsXG4gICAgfSk7XG4gIH1cblxuICAvLyB3ZSBzdXBwb3J0IGJvdGggYj1BUyBhbmQgYj1USUFTIGJ1dCBpbnRlcnByZXQgQVMgYXMgVElBUy5cbiAgbGV0IGJhbmR3aWR0aCA9IFNEUFV0aWxzLm1hdGNoUHJlZml4KG1lZGlhU2VjdGlvbiwgJ2I9Jyk7XG4gIGlmIChiYW5kd2lkdGgubGVuZ3RoKSB7XG4gICAgaWYgKGJhbmR3aWR0aFswXS5pbmRleE9mKCdiPVRJQVM6JykgPT09IDApIHtcbiAgICAgIGJhbmR3aWR0aCA9IHBhcnNlSW50KGJhbmR3aWR0aFswXS5zdWJzdHJpbmcoNyksIDEwKTtcbiAgICB9IGVsc2UgaWYgKGJhbmR3aWR0aFswXS5pbmRleE9mKCdiPUFTOicpID09PSAwKSB7XG4gICAgICAvLyB1c2UgZm9ybXVsYSBmcm9tIEpTRVAgdG8gY29udmVydCBiPUFTIHRvIFRJQVMgdmFsdWUuXG4gICAgICBiYW5kd2lkdGggPSBwYXJzZUludChiYW5kd2lkdGhbMF0uc3Vic3RyaW5nKDUpLCAxMCkgKiAxMDAwICogMC45NVxuICAgICAgICAgIC0gKDUwICogNDAgKiA4KTtcbiAgICB9IGVsc2Uge1xuICAgICAgYmFuZHdpZHRoID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBlbmNvZGluZ1BhcmFtZXRlcnMuZm9yRWFjaChwYXJhbXMgPT4ge1xuICAgICAgcGFyYW1zLm1heEJpdHJhdGUgPSBiYW5kd2lkdGg7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIGVuY29kaW5nUGFyYW1ldGVycztcbn07XG5cbi8vIHBhcnNlcyBodHRwOi8vZHJhZnQub3J0Yy5vcmcvI3J0Y3J0Y3BwYXJhbWV0ZXJzKlxuU0RQVXRpbHMucGFyc2VSdGNwUGFyYW1ldGVycyA9IGZ1bmN0aW9uKG1lZGlhU2VjdGlvbikge1xuICBjb25zdCBydGNwUGFyYW1ldGVycyA9IHt9O1xuXG4gIC8vIEdldHMgdGhlIGZpcnN0IFNTUkMuIE5vdGUgdGhhdCB3aXRoIFJUWCB0aGVyZSBtaWdodCBiZSBtdWx0aXBsZVxuICAvLyBTU1JDcy5cbiAgY29uc3QgcmVtb3RlU3NyYyA9IFNEUFV0aWxzLm1hdGNoUHJlZml4KG1lZGlhU2VjdGlvbiwgJ2E9c3NyYzonKVxuICAgIC5tYXAobGluZSA9PiBTRFBVdGlscy5wYXJzZVNzcmNNZWRpYShsaW5lKSlcbiAgICAuZmlsdGVyKG9iaiA9PiBvYmouYXR0cmlidXRlID09PSAnY25hbWUnKVswXTtcbiAgaWYgKHJlbW90ZVNzcmMpIHtcbiAgICBydGNwUGFyYW1ldGVycy5jbmFtZSA9IHJlbW90ZVNzcmMudmFsdWU7XG4gICAgcnRjcFBhcmFtZXRlcnMuc3NyYyA9IHJlbW90ZVNzcmMuc3NyYztcbiAgfVxuXG4gIC8vIEVkZ2UgdXNlcyB0aGUgY29tcG91bmQgYXR0cmlidXRlIGluc3RlYWQgb2YgcmVkdWNlZFNpemVcbiAgLy8gY29tcG91bmQgaXMgIXJlZHVjZWRTaXplXG4gIGNvbnN0IHJzaXplID0gU0RQVXRpbHMubWF0Y2hQcmVmaXgobWVkaWFTZWN0aW9uLCAnYT1ydGNwLXJzaXplJyk7XG4gIHJ0Y3BQYXJhbWV0ZXJzLnJlZHVjZWRTaXplID0gcnNpemUubGVuZ3RoID4gMDtcbiAgcnRjcFBhcmFtZXRlcnMuY29tcG91bmQgPSByc2l6ZS5sZW5ndGggPT09IDA7XG5cbiAgLy8gcGFyc2VzIHRoZSBydGNwLW11eCBhdHRy0ZZidXRlLlxuICAvLyBOb3RlIHRoYXQgRWRnZSBkb2VzIG5vdCBzdXBwb3J0IHVubXV4ZWQgUlRDUC5cbiAgY29uc3QgbXV4ID0gU0RQVXRpbHMubWF0Y2hQcmVmaXgobWVkaWFTZWN0aW9uLCAnYT1ydGNwLW11eCcpO1xuICBydGNwUGFyYW1ldGVycy5tdXggPSBtdXgubGVuZ3RoID4gMDtcblxuICByZXR1cm4gcnRjcFBhcmFtZXRlcnM7XG59O1xuXG5TRFBVdGlscy53cml0ZVJ0Y3BQYXJhbWV0ZXJzID0gZnVuY3Rpb24ocnRjcFBhcmFtZXRlcnMpIHtcbiAgbGV0IHNkcCA9ICcnO1xuICBpZiAocnRjcFBhcmFtZXRlcnMucmVkdWNlZFNpemUpIHtcbiAgICBzZHAgKz0gJ2E9cnRjcC1yc2l6ZVxcclxcbic7XG4gIH1cbiAgaWYgKHJ0Y3BQYXJhbWV0ZXJzLm11eCkge1xuICAgIHNkcCArPSAnYT1ydGNwLW11eFxcclxcbic7XG4gIH1cbiAgaWYgKHJ0Y3BQYXJhbWV0ZXJzLnNzcmMgIT09IHVuZGVmaW5lZCAmJiBydGNwUGFyYW1ldGVycy5jbmFtZSkge1xuICAgIHNkcCArPSAnYT1zc3JjOicgKyBydGNwUGFyYW1ldGVycy5zc3JjICtcbiAgICAgICcgY25hbWU6JyArIHJ0Y3BQYXJhbWV0ZXJzLmNuYW1lICsgJ1xcclxcbic7XG4gIH1cbiAgcmV0dXJuIHNkcDtcbn07XG5cblxuLy8gcGFyc2VzIGVpdGhlciBhPW1zaWQ6IG9yIGE9c3NyYzouLi4gbXNpZCBsaW5lcyBhbmQgcmV0dXJuc1xuLy8gdGhlIGlkIG9mIHRoZSBNZWRpYVN0cmVhbSBhbmQgTWVkaWFTdHJlYW1UcmFjay5cblNEUFV0aWxzLnBhcnNlTXNpZCA9IGZ1bmN0aW9uKG1lZGlhU2VjdGlvbikge1xuICBsZXQgcGFydHM7XG4gIGNvbnN0IHNwZWMgPSBTRFBVdGlscy5tYXRjaFByZWZpeChtZWRpYVNlY3Rpb24sICdhPW1zaWQ6Jyk7XG4gIGlmIChzcGVjLmxlbmd0aCA9PT0gMSkge1xuICAgIHBhcnRzID0gc3BlY1swXS5zdWJzdHJpbmcoNykuc3BsaXQoJyAnKTtcbiAgICByZXR1cm4ge3N0cmVhbTogcGFydHNbMF0sIHRyYWNrOiBwYXJ0c1sxXX07XG4gIH1cbiAgY29uc3QgcGxhbkIgPSBTRFBVdGlscy5tYXRjaFByZWZpeChtZWRpYVNlY3Rpb24sICdhPXNzcmM6JylcbiAgICAubWFwKGxpbmUgPT4gU0RQVXRpbHMucGFyc2VTc3JjTWVkaWEobGluZSkpXG4gICAgLmZpbHRlcihtc2lkUGFydHMgPT4gbXNpZFBhcnRzLmF0dHJpYnV0ZSA9PT0gJ21zaWQnKTtcbiAgaWYgKHBsYW5CLmxlbmd0aCA+IDApIHtcbiAgICBwYXJ0cyA9IHBsYW5CWzBdLnZhbHVlLnNwbGl0KCcgJyk7XG4gICAgcmV0dXJuIHtzdHJlYW06IHBhcnRzWzBdLCB0cmFjazogcGFydHNbMV19O1xuICB9XG59O1xuXG4vLyBTQ1RQXG4vLyBwYXJzZXMgZHJhZnQtaWV0Zi1tbXVzaWMtc2N0cC1zZHAtMjYgZmlyc3QgYW5kIGZhbGxzIGJhY2tcbi8vIHRvIGRyYWZ0LWlldGYtbW11c2ljLXNjdHAtc2RwLTA1XG5TRFBVdGlscy5wYXJzZVNjdHBEZXNjcmlwdGlvbiA9IGZ1bmN0aW9uKG1lZGlhU2VjdGlvbikge1xuICBjb25zdCBtbGluZSA9IFNEUFV0aWxzLnBhcnNlTUxpbmUobWVkaWFTZWN0aW9uKTtcbiAgY29uc3QgbWF4U2l6ZUxpbmUgPSBTRFBVdGlscy5tYXRjaFByZWZpeChtZWRpYVNlY3Rpb24sICdhPW1heC1tZXNzYWdlLXNpemU6Jyk7XG4gIGxldCBtYXhNZXNzYWdlU2l6ZTtcbiAgaWYgKG1heFNpemVMaW5lLmxlbmd0aCA+IDApIHtcbiAgICBtYXhNZXNzYWdlU2l6ZSA9IHBhcnNlSW50KG1heFNpemVMaW5lWzBdLnN1YnN0cmluZygxOSksIDEwKTtcbiAgfVxuICBpZiAoaXNOYU4obWF4TWVzc2FnZVNpemUpKSB7XG4gICAgbWF4TWVzc2FnZVNpemUgPSA2NTUzNjtcbiAgfVxuICBjb25zdCBzY3RwUG9ydCA9IFNEUFV0aWxzLm1hdGNoUHJlZml4KG1lZGlhU2VjdGlvbiwgJ2E9c2N0cC1wb3J0OicpO1xuICBpZiAoc2N0cFBvcnQubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiB7XG4gICAgICBwb3J0OiBwYXJzZUludChzY3RwUG9ydFswXS5zdWJzdHJpbmcoMTIpLCAxMCksXG4gICAgICBwcm90b2NvbDogbWxpbmUuZm10LFxuICAgICAgbWF4TWVzc2FnZVNpemUsXG4gICAgfTtcbiAgfVxuICBjb25zdCBzY3RwTWFwTGluZXMgPSBTRFBVdGlscy5tYXRjaFByZWZpeChtZWRpYVNlY3Rpb24sICdhPXNjdHBtYXA6Jyk7XG4gIGlmIChzY3RwTWFwTGluZXMubGVuZ3RoID4gMCkge1xuICAgIGNvbnN0IHBhcnRzID0gc2N0cE1hcExpbmVzWzBdXG4gICAgICAuc3Vic3RyaW5nKDEwKVxuICAgICAgLnNwbGl0KCcgJyk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBvcnQ6IHBhcnNlSW50KHBhcnRzWzBdLCAxMCksXG4gICAgICBwcm90b2NvbDogcGFydHNbMV0sXG4gICAgICBtYXhNZXNzYWdlU2l6ZSxcbiAgICB9O1xuICB9XG59O1xuXG4vLyBTQ1RQXG4vLyBvdXRwdXRzIHRoZSBkcmFmdC1pZXRmLW1tdXNpYy1zY3RwLXNkcC0yNiB2ZXJzaW9uIHRoYXQgYWxsIGJyb3dzZXJzXG4vLyBzdXBwb3J0IGJ5IG5vdyByZWNlaXZpbmcgaW4gdGhpcyBmb3JtYXQsIHVubGVzcyB3ZSBvcmlnaW5hbGx5IHBhcnNlZFxuLy8gYXMgdGhlIGRyYWZ0LWlldGYtbW11c2ljLXNjdHAtc2RwLTA1IGZvcm1hdCAoaW5kaWNhdGVkIGJ5IHRoZSBtLWxpbmVcbi8vIHByb3RvY29sIG9mIERUTFMvU0NUUCAtLSB3aXRob3V0IFVEUC8gb3IgVENQLylcblNEUFV0aWxzLndyaXRlU2N0cERlc2NyaXB0aW9uID0gZnVuY3Rpb24obWVkaWEsIHNjdHApIHtcbiAgbGV0IG91dHB1dCA9IFtdO1xuICBpZiAobWVkaWEucHJvdG9jb2wgIT09ICdEVExTL1NDVFAnKSB7XG4gICAgb3V0cHV0ID0gW1xuICAgICAgJ209JyArIG1lZGlhLmtpbmQgKyAnIDkgJyArIG1lZGlhLnByb3RvY29sICsgJyAnICsgc2N0cC5wcm90b2NvbCArICdcXHJcXG4nLFxuICAgICAgJ2M9SU4gSVA0IDAuMC4wLjBcXHJcXG4nLFxuICAgICAgJ2E9c2N0cC1wb3J0OicgKyBzY3RwLnBvcnQgKyAnXFxyXFxuJyxcbiAgICBdO1xuICB9IGVsc2Uge1xuICAgIG91dHB1dCA9IFtcbiAgICAgICdtPScgKyBtZWRpYS5raW5kICsgJyA5ICcgKyBtZWRpYS5wcm90b2NvbCArICcgJyArIHNjdHAucG9ydCArICdcXHJcXG4nLFxuICAgICAgJ2M9SU4gSVA0IDAuMC4wLjBcXHJcXG4nLFxuICAgICAgJ2E9c2N0cG1hcDonICsgc2N0cC5wb3J0ICsgJyAnICsgc2N0cC5wcm90b2NvbCArICcgNjU1MzVcXHJcXG4nLFxuICAgIF07XG4gIH1cbiAgaWYgKHNjdHAubWF4TWVzc2FnZVNpemUgIT09IHVuZGVmaW5lZCkge1xuICAgIG91dHB1dC5wdXNoKCdhPW1heC1tZXNzYWdlLXNpemU6JyArIHNjdHAubWF4TWVzc2FnZVNpemUgKyAnXFxyXFxuJyk7XG4gIH1cbiAgcmV0dXJuIG91dHB1dC5qb2luKCcnKTtcbn07XG5cbi8vIEdlbmVyYXRlIGEgc2Vzc2lvbiBJRCBmb3IgU0RQLlxuLy8gaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL2RyYWZ0LWlldGYtcnRjd2ViLWpzZXAtMjAjc2VjdGlvbi01LjIuMVxuLy8gcmVjb21tZW5kcyB1c2luZyBhIGNyeXB0b2dyYXBoaWNhbGx5IHJhbmRvbSArdmUgNjQtYml0IHZhbHVlXG4vLyBidXQgcmlnaHQgbm93IHRoaXMgc2hvdWxkIGJlIGFjY2VwdGFibGUgYW5kIHdpdGhpbiB0aGUgcmlnaHQgcmFuZ2VcblNEUFV0aWxzLmdlbmVyYXRlU2Vzc2lvbklkID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKCkuc3Vic3RyKDIsIDIyKTtcbn07XG5cbi8vIFdyaXRlIGJvaWxlciBwbGF0ZSBmb3Igc3RhcnQgb2YgU0RQXG4vLyBzZXNzSWQgYXJndW1lbnQgaXMgb3B0aW9uYWwgLSBpZiBub3Qgc3VwcGxpZWQgaXQgd2lsbFxuLy8gYmUgZ2VuZXJhdGVkIHJhbmRvbWx5XG4vLyBzZXNzVmVyc2lvbiBpcyBvcHRpb25hbCBhbmQgZGVmYXVsdHMgdG8gMlxuLy8gc2Vzc1VzZXIgaXMgb3B0aW9uYWwgYW5kIGRlZmF1bHRzIHRvICd0aGlzaXNhZGFwdGVyb3J0YydcblNEUFV0aWxzLndyaXRlU2Vzc2lvbkJvaWxlcnBsYXRlID0gZnVuY3Rpb24oc2Vzc0lkLCBzZXNzVmVyLCBzZXNzVXNlcikge1xuICBsZXQgc2Vzc2lvbklkO1xuICBjb25zdCB2ZXJzaW9uID0gc2Vzc1ZlciAhPT0gdW5kZWZpbmVkID8gc2Vzc1ZlciA6IDI7XG4gIGlmIChzZXNzSWQpIHtcbiAgICBzZXNzaW9uSWQgPSBzZXNzSWQ7XG4gIH0gZWxzZSB7XG4gICAgc2Vzc2lvbklkID0gU0RQVXRpbHMuZ2VuZXJhdGVTZXNzaW9uSWQoKTtcbiAgfVxuICBjb25zdCB1c2VyID0gc2Vzc1VzZXIgfHwgJ3RoaXNpc2FkYXB0ZXJvcnRjJztcbiAgLy8gRklYTUU6IHNlc3MtaWQgc2hvdWxkIGJlIGFuIE5UUCB0aW1lc3RhbXAuXG4gIHJldHVybiAndj0wXFxyXFxuJyArXG4gICAgICAnbz0nICsgdXNlciArICcgJyArIHNlc3Npb25JZCArICcgJyArIHZlcnNpb24gK1xuICAgICAgICAnIElOIElQNCAxMjcuMC4wLjFcXHJcXG4nICtcbiAgICAgICdzPS1cXHJcXG4nICtcbiAgICAgICd0PTAgMFxcclxcbic7XG59O1xuXG4vLyBHZXRzIHRoZSBkaXJlY3Rpb24gZnJvbSB0aGUgbWVkaWFTZWN0aW9uIG9yIHRoZSBzZXNzaW9ucGFydC5cblNEUFV0aWxzLmdldERpcmVjdGlvbiA9IGZ1bmN0aW9uKG1lZGlhU2VjdGlvbiwgc2Vzc2lvbnBhcnQpIHtcbiAgLy8gTG9vayBmb3Igc2VuZHJlY3YsIHNlbmRvbmx5LCByZWN2b25seSwgaW5hY3RpdmUsIGRlZmF1bHQgdG8gc2VuZHJlY3YuXG4gIGNvbnN0IGxpbmVzID0gU0RQVXRpbHMuc3BsaXRMaW5lcyhtZWRpYVNlY3Rpb24pO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgc3dpdGNoIChsaW5lc1tpXSkge1xuICAgICAgY2FzZSAnYT1zZW5kcmVjdic6XG4gICAgICBjYXNlICdhPXNlbmRvbmx5JzpcbiAgICAgIGNhc2UgJ2E9cmVjdm9ubHknOlxuICAgICAgY2FzZSAnYT1pbmFjdGl2ZSc6XG4gICAgICAgIHJldHVybiBsaW5lc1tpXS5zdWJzdHJpbmcoMik7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICAvLyBGSVhNRTogV2hhdCBzaG91bGQgaGFwcGVuIGhlcmU/XG4gICAgfVxuICB9XG4gIGlmIChzZXNzaW9ucGFydCkge1xuICAgIHJldHVybiBTRFBVdGlscy5nZXREaXJlY3Rpb24oc2Vzc2lvbnBhcnQpO1xuICB9XG4gIHJldHVybiAnc2VuZHJlY3YnO1xufTtcblxuU0RQVXRpbHMuZ2V0S2luZCA9IGZ1bmN0aW9uKG1lZGlhU2VjdGlvbikge1xuICBjb25zdCBsaW5lcyA9IFNEUFV0aWxzLnNwbGl0TGluZXMobWVkaWFTZWN0aW9uKTtcbiAgY29uc3QgbWxpbmUgPSBsaW5lc1swXS5zcGxpdCgnICcpO1xuICByZXR1cm4gbWxpbmVbMF0uc3Vic3RyaW5nKDIpO1xufTtcblxuU0RQVXRpbHMuaXNSZWplY3RlZCA9IGZ1bmN0aW9uKG1lZGlhU2VjdGlvbikge1xuICByZXR1cm4gbWVkaWFTZWN0aW9uLnNwbGl0KCcgJywgMilbMV0gPT09ICcwJztcbn07XG5cblNEUFV0aWxzLnBhcnNlTUxpbmUgPSBmdW5jdGlvbihtZWRpYVNlY3Rpb24pIHtcbiAgY29uc3QgbGluZXMgPSBTRFBVdGlscy5zcGxpdExpbmVzKG1lZGlhU2VjdGlvbik7XG4gIGNvbnN0IHBhcnRzID0gbGluZXNbMF0uc3Vic3RyaW5nKDIpLnNwbGl0KCcgJyk7XG4gIHJldHVybiB7XG4gICAga2luZDogcGFydHNbMF0sXG4gICAgcG9ydDogcGFyc2VJbnQocGFydHNbMV0sIDEwKSxcbiAgICBwcm90b2NvbDogcGFydHNbMl0sXG4gICAgZm10OiBwYXJ0cy5zbGljZSgzKS5qb2luKCcgJyksXG4gIH07XG59O1xuXG5TRFBVdGlscy5wYXJzZU9MaW5lID0gZnVuY3Rpb24obWVkaWFTZWN0aW9uKSB7XG4gIGNvbnN0IGxpbmUgPSBTRFBVdGlscy5tYXRjaFByZWZpeChtZWRpYVNlY3Rpb24sICdvPScpWzBdO1xuICBjb25zdCBwYXJ0cyA9IGxpbmUuc3Vic3RyaW5nKDIpLnNwbGl0KCcgJyk7XG4gIHJldHVybiB7XG4gICAgdXNlcm5hbWU6IHBhcnRzWzBdLFxuICAgIHNlc3Npb25JZDogcGFydHNbMV0sXG4gICAgc2Vzc2lvblZlcnNpb246IHBhcnNlSW50KHBhcnRzWzJdLCAxMCksXG4gICAgbmV0VHlwZTogcGFydHNbM10sXG4gICAgYWRkcmVzc1R5cGU6IHBhcnRzWzRdLFxuICAgIGFkZHJlc3M6IHBhcnRzWzVdLFxuICB9O1xufTtcblxuLy8gYSB2ZXJ5IG5haXZlIGludGVycHJldGF0aW9uIG9mIGEgdmFsaWQgU0RQLlxuU0RQVXRpbHMuaXNWYWxpZFNEUCA9IGZ1bmN0aW9uKGJsb2IpIHtcbiAgaWYgKHR5cGVvZiBibG9iICE9PSAnc3RyaW5nJyB8fCBibG9iLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBjb25zdCBsaW5lcyA9IFNEUFV0aWxzLnNwbGl0TGluZXMoYmxvYik7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAobGluZXNbaV0ubGVuZ3RoIDwgMiB8fCBsaW5lc1tpXS5jaGFyQXQoMSkgIT09ICc9Jykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvLyBUT0RPOiBjaGVjayB0aGUgbW9kaWZpZXIgYSBiaXQgbW9yZS5cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbi8vIEV4cG9zZSBwdWJsaWMgbWV0aG9kcy5cbmlmICh0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jykge1xuICBtb2R1bGUuZXhwb3J0cyA9IFNEUFV0aWxzO1xufVxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsIi8vIENvcHlyaWdodCBFcGljIEdhbWVzLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcbmltcG9ydCB7IENvbmZpZywgUGl4ZWxTdHJlYW1pbmcgfSBmcm9tICdAZXBpY2dhbWVzLXBzL2xpYi1waXhlbHN0cmVhbWluZ2Zyb250ZW5kLXVlNS4yJztcclxuZG9jdW1lbnQuYm9keS5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAvLyBFeGFtcGxlIG9mIGhvdyB0byBzZXQgdGhlIGxvZ2dlciBsZXZlbFxyXG4gICAgLy8gTG9nZ2VyLlNldExvZ2dlclZlcmJvc2l0eSgxMCk7XHJcbiAgICAvLyBDcmVhdGUgYSBjb25maWcgb2JqZWN0XHJcbiAgICB2YXIgY29uZmlnID0gbmV3IENvbmZpZyh7XHJcbiAgICAgICAgaW5pdGlhbFNldHRpbmdzOiB7XHJcbiAgICAgICAgICAgIEF1dG9QbGF5VmlkZW86IHRydWUsXHJcbiAgICAgICAgICAgIEF1dG9Db25uZWN0OiB0cnVlLFxyXG4gICAgICAgICAgICBzczogXCJ3czovL2xvY2FsaG9zdDo4MFwiLFxyXG4gICAgICAgICAgICBTdGFydFZpZGVvTXV0ZWQ6IHRydWUsXHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICAvLyBDcmVhdGUgYSBQaXhlbFN0cmVhbWluZyBpbnN0YW5jZSBhbmQgYXR0YWNoIHRoZSB2aWRlbyBlbGVtZW50IHRvIGFuIGV4aXN0aW5nIHBhcmVudCBkaXZcclxuICAgIHZhciBwaXhlbFN0cmVhbWluZyA9IG5ldyBQaXhlbFN0cmVhbWluZyhjb25maWcsIHsgdmlkZW9FbGVtZW50UGFyZW50OiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInZpZGVvUGFyZW50RWxlbWVudFwiKSB9KTtcclxuICAgIC8vIElmIGJyb3dzZXIgZGVuaWVzIGF1dG9wbGF5LCBzaG93IFwiQ2xpY2sgdG8gcGxheVwiIGFuZCByZWdpc3RlciBhIGNsaWNrLXRvLXBsYXkgaGFuZGxlclxyXG4gICAgcGl4ZWxTdHJlYW1pbmcuYWRkRXZlbnRMaXN0ZW5lcihcInBsYXlTdHJlYW1SZWplY3RlZFwiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGNsaWNrVG9QbGF5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjbGlja1RvUGxheUVsZW1lbnRcIik7XHJcbiAgICAgICAgY2xpY2tUb1BsYXkuY2xhc3NOYW1lID0gXCJ2aXNpYmxlXCI7XHJcbiAgICAgICAgY2xpY2tUb1BsYXkub25jbGljayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcGl4ZWxTdHJlYW1pbmcucGxheSgpO1xyXG4gICAgICAgICAgICBjbGlja1RvUGxheS5jbGFzc05hbWUgPSBcIlwiO1xyXG4gICAgICAgICAgICBjbGlja1RvUGxheS5vbmNsaWNrID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIH07XHJcbiAgICB9KTtcclxufTtcclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9